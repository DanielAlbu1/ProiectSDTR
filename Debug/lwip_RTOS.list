
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000182d0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000037d8  080184d0  080184d0  000194d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bca8  0801bca8  0001d078  2**0
                  CONTENTS
  4 .ARM          00000008  0801bca8  0801bca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bcb0  0801bcb0  0001d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bcb0  0801bcb0  0001ccb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bcb4  0801bcb4  0001ccb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0801bcb8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e188  20000078  0801bd30  0001d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e200  0801bd30  0001d200  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035e7a  00000000  00000000  0001d0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000867a  00000000  00000000  00052f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027b8  00000000  00000000  0005b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f74  00000000  00000000  0005dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001345c  00000000  00000000  0005fccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040864  00000000  00000000  00073128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125a6e  00000000  00000000  000b398c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d93fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000adc8  00000000  00000000  001d9440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001e4208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080184b8 	.word	0x080184b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080184b8 	.word	0x080184b8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fd1d 	bl	8001022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f8e6 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f886 	bl	8000700 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f8b4 	bl	8000760 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f005 fc1e 	bl	8005e38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <main+0x34>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4805      	ldr	r0, [pc, #20]	@ (8000618 <main+0x38>)
 8000602:	f005 fcab 	bl	8005f5c <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <main+0x3c>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f005 fc48 	bl	8005ea0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x30>
 8000614:	0801ba68 	.word	0x0801ba68
 8000618:	08000901 	.word	0x08000901
 800061c:	2000051c 	.word	0x2000051c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	@ 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f017 f900 	bl	8017834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f002 fab4 	bl	8002bb0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <SystemClock_Config+0xd8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a2a      	ldr	r2, [pc, #168]	@ (80006f8 <SystemClock_Config+0xd8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b28      	ldr	r3, [pc, #160]	@ (80006f8 <SystemClock_Config+0xd8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemClock_Config+0xdc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a25      	ldr	r2, [pc, #148]	@ (80006fc <SystemClock_Config+0xdc>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000690:	23d8      	movs	r3, #216	@ 0xd8
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000698:	2309      	movs	r3, #9
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fae3 	bl	8002c70 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 f94c 	bl	800094c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b4:	f002 fa8c 	bl	8002bd0 <HAL_PWREx_EnableOverDrive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006be:	f000 f945 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2107      	movs	r1, #7
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fd73 	bl	80031cc <HAL_RCC_ClockConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006ec:	f000 f92e 	bl	800094c <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3750      	adds	r7, #80	@ 0x50
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	@ (800075c <MX_USART3_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_USART3_UART_Init+0x58>)
 8000744:	f003 fea2 	bl	800448c <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8fd 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000094 	.word	0x20000094
 800075c:	40004800 	.word	0x40004800

08000760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800076a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2206      	movs	r2, #6
 8000770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2202      	movs	r2, #2
 8000776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2201      	movs	r2, #1
 800079a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	f002 f8bb 	bl	800291e <HAL_PCD_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f8cd 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000118 	.word	0x20000118

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b47      	ldr	r3, [pc, #284]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a46      	ldr	r2, [pc, #280]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b41      	ldr	r3, [pc, #260]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a40      	ldr	r2, [pc, #256]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b3e      	ldr	r3, [pc, #248]	@ (80008f0 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b3b      	ldr	r3, [pc, #236]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a3a      	ldr	r2, [pc, #232]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b38      	ldr	r3, [pc, #224]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b35      	ldr	r3, [pc, #212]	@ (80008f0 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a34      	ldr	r2, [pc, #208]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b32      	ldr	r3, [pc, #200]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b2f      	ldr	r3, [pc, #188]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a2e      	ldr	r2, [pc, #184]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b2c      	ldr	r3, [pc, #176]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b29      	ldr	r3, [pc, #164]	@ (80008f0 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a28      	ldr	r2, [pc, #160]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000868:	4822      	ldr	r0, [pc, #136]	@ (80008f4 <MX_GPIO_Init+0x138>)
 800086a:	f002 f825 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	@ 0x40
 8000872:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 8000874:	f002 f820 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	481b      	ldr	r0, [pc, #108]	@ (80008fc <MX_GPIO_Init+0x140>)
 8000890:	f001 fe66 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4811      	ldr	r0, [pc, #68]	@ (80008f4 <MX_GPIO_Init+0x138>)
 80008ae:	f001 fe57 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	@ 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 80008ca:	f001 fe49 	bl	8002560 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 fe3d 	bl	8002560 <HAL_GPIO_Init>

}
 80008e6:	bf00      	nop
 80008e8:	3730      	adds	r7, #48	@ 0x30
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020400 	.word	0x40020400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40020800 	.word	0x40020800

08000900 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000908:	f004 fd10 	bl	800532c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 800090c:	f000 fb4c 	bl	8000fa8 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000910:	2101      	movs	r1, #1
 8000912:	4804      	ldr	r0, [pc, #16]	@ (8000924 <StartDefaultTask+0x24>)
 8000914:	f001 ffe9 	bl	80028ea <HAL_GPIO_TogglePin>
	  osDelay(200);
 8000918:	20c8      	movs	r0, #200	@ 0xc8
 800091a:	f005 fbc5 	bl	80060a8 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800091e:	bf00      	nop
 8000920:	e7f6      	b.n	8000910 <StartDefaultTask+0x10>
 8000922:	bf00      	nop
 8000924:	40020400 	.word	0x40020400

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 fb7f 	bl	800103c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010000 	.word	0x40010000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000980:	6453      	str	r3, [r2, #68]	@ 0x44
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fc4d 	bl	8001234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ae      	sub	sp, #184	@ 0xb8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2290      	movs	r2, #144	@ 0x90
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f016 ff33 	bl	8017834 <memset>
  if(huart->Instance==USART3)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <HAL_UART_MspInit+0xb4>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13c      	bne.n	8000a52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009dc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009de:	2300      	movs	r3, #0
 80009e0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 fe48 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f2:	f7ff ffab 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a19      	ldr	r2, [pc, #100]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 80009fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a13      	ldr	r2, [pc, #76]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_UART_MspInit+0xb8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a40:	2307      	movs	r3, #7
 8000a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_UART_MspInit+0xbc>)
 8000a4e:	f001 fd87 	bl	8002560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a52:	bf00      	nop
 8000a54:	37b8      	adds	r7, #184	@ 0xb8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40004800 	.word	0x40004800
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020c00 	.word	0x40020c00

08000a68 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2290      	movs	r2, #144	@ 0x90
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f016 fed3 	bl	8017834 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a96:	d159      	bne.n	8000b4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000a9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 fde7 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ab4:	f7ff ff4a 	bl	800094c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	4a25      	ldr	r2, [pc, #148]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac4:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aea:	230a      	movs	r3, #10
 8000aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000af4:	4619      	mov	r1, r3
 8000af6:	4818      	ldr	r0, [pc, #96]	@ (8000b58 <HAL_PCD_MspInit+0xf0>)
 8000af8:	f001 fd32 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <HAL_PCD_MspInit+0xf0>)
 8000b18:	f001 fd22 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b20:	4a0c      	ldr	r2, [pc, #48]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b26:	6353      	str	r3, [r2, #52]	@ 0x34
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b38:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <HAL_PCD_MspInit+0xec>)
 8000b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37b8      	adds	r7, #184	@ 0xb8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	2019      	movs	r0, #25
 8000b72:	f000 fb5f 	bl	8001234 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b76:	2019      	movs	r0, #25
 8000b78:	f000 fb78 	bl	800126c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <HAL_InitTick+0xa0>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	4a1e      	ldr	r2, [pc, #120]	@ (8000bfc <HAL_InitTick+0xa0>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_InitTick+0xa0>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fd3a 	bl	8003618 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ba4:	f002 fd24 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb0:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <HAL_InitTick+0xa4>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <HAL_InitTick+0xac>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a0e      	ldr	r2, [pc, #56]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bde:	f003 f975 	bl	8003ecc <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000be8:	4806      	ldr	r0, [pc, #24]	@ (8000c04 <HAL_InitTick+0xa8>)
 8000bea:	f003 f9d1 	bl	8003f90 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3730      	adds	r7, #48	@ 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	20000520 	.word	0x20000520
 8000c08:	40010000 	.word	0x40010000

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <NMI_Handler+0x4>

08000c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <MemManage_Handler+0x4>

08000c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c4a:	f003 fa19 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000520 	.word	0x20000520

08000c58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <ETH_IRQHandler+0x10>)
 8000c5e:	f000 fef1 	bl	8001a44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20003ca0 	.word	0x20003ca0

08000c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	return 1;
 8000c70:	2301      	movs	r3, #1
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_kill>:

int _kill(int pid, int sig)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <_kill+0x20>)
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	2000e0b0 	.word	0x2000e0b0

08000ca0 <_exit>:

void _exit (int status)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ffe5 	bl	8000c7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cb2:	bf00      	nop
 8000cb4:	e7fd      	b.n	8000cb2 <_exit+0x12>

08000cb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e00a      	b.n	8000cde <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cc8:	f3af 8000 	nop.w
 8000ccc:	4601      	mov	r1, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	b2ca      	uxtb	r2, r1
 8000cd6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	dbf0      	blt.n	8000cc8 <_read+0x12>
	}

return len;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	e009      	b.n	8000d16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60ba      	str	r2, [r7, #8]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	3301      	adds	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dbf1      	blt.n	8000d02 <_write+0x12>
	}
	return len;
 8000d1e:	687b      	ldr	r3, [r7, #4]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_close>:

int _close(int file)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	return -1;
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d50:	605a      	str	r2, [r3, #4]
	return 0;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_isatty>:

int _isatty(int file)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	return 1;
 8000d68:	2301      	movs	r3, #1
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b085      	sub	sp, #20
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
	return 0;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d205      	bcs.n	8000dcc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <_sbrk+0x6c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20080000 	.word	0x20080000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	2000056c 	.word	0x2000056c
 8000df8:	2000e200 	.word	0x2000e200
 8000dfc:	2000e0b0 	.word	0x2000e0b0

08000e00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <process_http_request>:
char msg[512];
char smsg[1024];

// Funcție pentru a analiza cererea HTTP
static void process_http_request(const char *request, char *response)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 8000e2e:	4913      	ldr	r1, [pc, #76]	@ (8000e7c <process_http_request+0x58>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f016 fd1a 	bl	801786a <strstr>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <process_http_request+0x26>
    {
        // Răspuns pentru cererea GET
        const char *http_response =
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <process_http_request+0x5c>)
 8000e3e:	60fb      	str	r3, [r7, #12]
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>Hello from STM32 HTTP Server</h1></body></html>";
        strcpy(response, http_response);
 8000e40:	68f9      	ldr	r1, [r7, #12]
 8000e42:	6838      	ldr	r0, [r7, #0]
 8000e44:	f016 fd95 	bl	8017972 <strcpy>
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
    }
}
 8000e48:	e013      	b.n	8000e72 <process_http_request+0x4e>
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 8000e4a:	490e      	ldr	r1, [pc, #56]	@ (8000e84 <process_http_request+0x60>)
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f016 fd0c 	bl	801786a <strstr>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <process_http_request+0x42>
        const char *http_response =
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <process_http_request+0x64>)
 8000e5a:	613b      	str	r3, [r7, #16]
        strcpy(response, http_response);
 8000e5c:	6939      	ldr	r1, [r7, #16]
 8000e5e:	6838      	ldr	r0, [r7, #0]
 8000e60:	f016 fd87 	bl	8017972 <strcpy>
}
 8000e64:	e005      	b.n	8000e72 <process_http_request+0x4e>
        const char *http_response =
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <process_http_request+0x68>)
 8000e68:	617b      	str	r3, [r7, #20]
        strcpy(response, http_response);
 8000e6a:	6979      	ldr	r1, [r7, #20]
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f016 fd80 	bl	8017972 <strcpy>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	080184dc 	.word	0x080184dc
 8000e80:	080184ec 	.word	0x080184ec
 8000e84:	0801856c 	.word	0x0801856c
 8000e88:	0801857c 	.word	0x0801857c
 8000e8c:	080185f8 	.word	0x080185f8

08000e90 <tcp_thread>:

// Funcția principală a serverului TCP
static void tcp_thread(void *arg)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;

    // Creează o conexiune TCP
    conn = netconn_new(NETCONN_TCP);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2010      	movs	r0, #16
 8000e9e:	f009 f83b 	bl	8009f18 <netconn_new_with_proto_and_callback>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a37      	ldr	r2, [pc, #220]	@ (8000f84 <tcp_thread+0xf4>)
 8000ea6:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8000ea8:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <tcp_thread+0xf4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d065      	beq.n	8000f7c <tcp_thread+0xec>
    {
        // Leagă conexiunea de portul 80 (HTTP default)
        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8000eb0:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <tcp_thread+0xf4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2250      	movs	r2, #80	@ 0x50
 8000eb6:	4934      	ldr	r1, [pc, #208]	@ (8000f88 <tcp_thread+0xf8>)
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f009 f8e7 	bl	800a08c <netconn_bind>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 8000ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d150      	bne.n	8000f6c <tcp_thread+0xdc>
        {
            // Intră în modul de ascultare
            netconn_listen(conn);
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <tcp_thread+0xf4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	21ff      	movs	r1, #255	@ 0xff
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f009 f913 	bl	800a0fc <netconn_listen_with_backlog>

            while (1)
            {
                // Acceptă o nouă conexiune
                accept_err = netconn_accept(conn, &newconn);
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f84 <tcp_thread+0xf4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	492c      	ldr	r1, [pc, #176]	@ (8000f8c <tcp_thread+0xfc>)
 8000edc:	4618      	mov	r0, r3
 8000ede:	f009 f939 	bl	800a154 <netconn_accept>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 8000ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d13a      	bne.n	8000f64 <tcp_thread+0xd4>
                {
                    // Primește date de la client
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8000eee:	e02f      	b.n	8000f50 <tcp_thread+0xc0>
                    {
                        // Procesează cererea HTTP
                        strncpy(msg, buf->p->payload, buf->p->len);  // Extrage cererea
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <tcp_thread+0x100>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6859      	ldr	r1, [r3, #4]
 8000ef8:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <tcp_thread+0x100>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	895b      	ldrh	r3, [r3, #10]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4824      	ldr	r0, [pc, #144]	@ (8000f94 <tcp_thread+0x104>)
 8000f04:	f016 fc9e 	bl	8017844 <strncpy>

                        // Print pentru debug
                        printf("Received request: %s\n", msg);
 8000f08:	4922      	ldr	r1, [pc, #136]	@ (8000f94 <tcp_thread+0x104>)
 8000f0a:	4823      	ldr	r0, [pc, #140]	@ (8000f98 <tcp_thread+0x108>)
 8000f0c:	f016 fb3a 	bl	8017584 <iprintf>

                        // Pregătește răspunsul HTTP
                        process_http_request(msg, smsg);
 8000f10:	4922      	ldr	r1, [pc, #136]	@ (8000f9c <tcp_thread+0x10c>)
 8000f12:	4820      	ldr	r0, [pc, #128]	@ (8000f94 <tcp_thread+0x104>)
 8000f14:	f7ff ff86 	bl	8000e24 <process_http_request>

                        // Trimite răspunsul la client
                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <tcp_thread+0xfc>)
 8000f1a:	681c      	ldr	r4, [r3, #0]
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <tcp_thread+0x10c>)
 8000f1e:	f7ff f98f 	bl	8000240 <strlen>
 8000f22:	4602      	mov	r2, r0
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	491c      	ldr	r1, [pc, #112]	@ (8000f9c <tcp_thread+0x10c>)
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f009 fb93 	bl	800a658 <netconn_write_partly>

                        // Curăță bufferul
                        netbuf_delete(buf);
 8000f32:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <tcp_thread+0x100>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f00b f88e 	bl	800c058 <netbuf_delete>

                        // Închide și șterge conexiunea după fiecare răspuns
                        netconn_close(newconn);
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <tcp_thread+0xfc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f009 fc8b 	bl	800a85c <netconn_close>
                        netconn_delete(newconn);
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <tcp_thread+0xfc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 f882 	bl	800a054 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <tcp_thread+0xfc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	490e      	ldr	r1, [pc, #56]	@ (8000f90 <tcp_thread+0x100>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f009 fb04 	bl	800a564 <netconn_recv>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0c6      	beq.n	8000ef0 <tcp_thread+0x60>
 8000f62:	e7b8      	b.n	8000ed6 <tcp_thread+0x46>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 8000f64:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <tcp_thread+0x110>)
 8000f66:	f016 fb75 	bl	8017654 <puts>
                accept_err = netconn_accept(conn, &newconn);
 8000f6a:	e7b4      	b.n	8000ed6 <tcp_thread+0x46>
                }
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 8000f6c:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <tcp_thread+0x114>)
 8000f6e:	f016 fb71 	bl	8017654 <puts>
            netconn_delete(conn);
 8000f72:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <tcp_thread+0xf4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f009 f86c 	bl	800a054 <netconn_delete>
        }
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	20000570 	.word	0x20000570
 8000f88:	0801bbb8 	.word	0x0801bbb8
 8000f8c:	20000574 	.word	0x20000574
 8000f90:	20000578 	.word	0x20000578
 8000f94:	2000057c 	.word	0x2000057c
 8000f98:	08018658 	.word	0x08018658
 8000f9c:	2000077c 	.word	0x2000077c
 8000fa0:	08018670 	.word	0x08018670
 8000fa4:	0801868c 	.word	0x0801868c

08000fa8 <tcpserver_init>:

// Funcția de inițializare
void tcpserver_init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000fae:	2318      	movs	r3, #24
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4903      	ldr	r1, [pc, #12]	@ (8000fc8 <tcpserver_init+0x20>)
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <tcpserver_init+0x24>)
 8000fbc:	f016 f9a4 	bl	8017308 <sys_thread_new>
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08000e91 	.word	0x08000e91
 8000fcc:	080186a8 	.word	0x080186a8

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	@ (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	@ (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	@ (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ff01 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f016 fc91 	bl	8017924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff faed 	bl	80005e0 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001014:	0801bcb8 	.word	0x0801bcb8
  ldr r2, =_sbss
 8001018:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800101c:	2000e200 	.word	0x2000e200

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>

08001022 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001026:	2003      	movs	r0, #3
 8001028:	f000 f8f9 	bl	800121e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800102c:	200f      	movs	r0, #15
 800102e:	f7ff fd95 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001032:	f7ff fc91 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	20000b7c 	.word	0x20000b7c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000b7c 	.word	0x20000b7c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_Delay+0x44>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000008 	.word	0x20000008

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x40>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	05fa0000 	.word	0x05fa0000

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	@ (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	@ (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	@ 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff4c 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001246:	f7ff ff61 	bl	800110c <__NVIC_GetPriorityGrouping>
 800124a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ffb1 	bl	80011b8 <NVIC_EncodePriority>
 8001256:	4602      	mov	r2, r0
 8001258:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff80 	bl	8001164 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff54 	bl	8001128 <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001298:	4ba0      	ldr	r3, [pc, #640]	@ (800151c <HAL_ETH_Init+0x294>)
 800129a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e180      	b.n	80015b0 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f004 f994 	bl	80055f0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c8:	4b95      	ldr	r3, [pc, #596]	@ (8001520 <HAL_ETH_Init+0x298>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012cc:	4a94      	ldr	r2, [pc, #592]	@ (8001520 <HAL_ETH_Init+0x298>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d4:	4b92      	ldr	r3, [pc, #584]	@ (8001520 <HAL_ETH_Init+0x298>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012e0:	4b90      	ldr	r3, [pc, #576]	@ (8001524 <HAL_ETH_Init+0x29c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a8f      	ldr	r2, [pc, #572]	@ (8001524 <HAL_ETH_Init+0x29c>)
 80012e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80012ea:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012ec:	4b8d      	ldr	r3, [pc, #564]	@ (8001524 <HAL_ETH_Init+0x29c>)
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	498b      	ldr	r1, [pc, #556]	@ (8001524 <HAL_ETH_Init+0x29c>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001310:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001312:	f7ff fea7 	bl	8001064 <HAL_GetTick>
 8001316:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001318:	e011      	b.n	800133e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800131a:	f7ff fea3 	bl	8001064 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001328:	d909      	bls.n	800133e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e138      	b.n	80015b0 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1e4      	bne.n	800131a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f023 031c 	bic.w	r3, r3, #28
 800135e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001360:	f002 f926 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 8001364:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4a6f      	ldr	r2, [pc, #444]	@ (8001528 <HAL_ETH_Init+0x2a0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d908      	bls.n	8001380 <HAL_ETH_Init+0xf8>
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4a6e      	ldr	r2, [pc, #440]	@ (800152c <HAL_ETH_Init+0x2a4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d804      	bhi.n	8001380 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	e027      	b.n	80013d0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4a6a      	ldr	r2, [pc, #424]	@ (800152c <HAL_ETH_Init+0x2a4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d908      	bls.n	800139a <HAL_ETH_Init+0x112>
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4a64      	ldr	r2, [pc, #400]	@ (800151c <HAL_ETH_Init+0x294>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d204      	bcs.n	800139a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f043 030c 	orr.w	r3, r3, #12
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	e01a      	b.n	80013d0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4a5f      	ldr	r2, [pc, #380]	@ (800151c <HAL_ETH_Init+0x294>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d303      	bcc.n	80013aa <HAL_ETH_Init+0x122>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	4a62      	ldr	r2, [pc, #392]	@ (8001530 <HAL_ETH_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d911      	bls.n	80013ce <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4a60      	ldr	r2, [pc, #384]	@ (8001530 <HAL_ETH_Init+0x2a8>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d908      	bls.n	80013c4 <HAL_ETH_Init+0x13c>
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <HAL_ETH_Init+0x2ac>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d804      	bhi.n	80013c4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e005      	b.n	80013d0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e000      	b.n	80013d0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013ce:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013d8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013dc:	2100      	movs	r1, #0
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fc10 	bl	8001c04 <HAL_ETH_WritePHYRegister>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013ee:	6939      	ldr	r1, [r7, #16]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 fdc5 	bl	8001f80 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0d6      	b.n	80015b0 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001402:	20ff      	movs	r0, #255	@ 0xff
 8001404:	f7ff fe3a 	bl	800107c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a4 	beq.w	800155a <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001412:	f7ff fe27 	bl	8001064 <HAL_GetTick>
 8001416:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	461a      	mov	r2, r3
 800141e:	2101      	movs	r1, #1
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fb87 	bl	8001b34 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001426:	f7ff fe1d 	bl	8001064 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d90f      	bls.n	8001458 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fd9e 	bl	8001f80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e0ab      	b.n	80015b0 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0da      	beq.n	8001418 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001462:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001466:	2100      	movs	r1, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fbcb 	bl	8001c04 <HAL_ETH_WritePHYRegister>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001478:	6939      	ldr	r1, [r7, #16]
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 fd80 	bl	8001f80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001488:	2301      	movs	r3, #1
 800148a:	e091      	b.n	80015b0 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff fdea 	bl	8001064 <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	461a      	mov	r2, r3
 8001498:	2101      	movs	r1, #1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fb4a 	bl	8001b34 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014a0:	f7ff fde0 	bl	8001064 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d90f      	bls.n	80014d2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014b6:	6939      	ldr	r1, [r7, #16]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fd61 	bl	8001f80 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e06e      	b.n	80015b0 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0da      	beq.n	8001492 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	461a      	mov	r2, r3
 80014e2:	2110      	movs	r1, #16
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fb25 	bl	8001b34 <HAL_ETH_ReadPHYRegister>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00b      	beq.n	8001508 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fd42 	bl	8001f80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001504:	2301      	movs	r3, #1
 8001506:	e053      	b.n	80015b0 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d012      	beq.n	8001538 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	e010      	b.n	800153e <HAL_ETH_Init+0x2b6>
 800151c:	03938700 	.word	0x03938700
 8001520:	40023800 	.word	0x40023800
 8001524:	40013800 	.word	0x40013800
 8001528:	01312cff 	.word	0x01312cff
 800152c:	02160ebf 	.word	0x02160ebf
 8001530:	05f5e0ff 	.word	0x05f5e0ff
 8001534:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e026      	b.n	800159e <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e021      	b.n	800159e <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	085b      	lsrs	r3, r3, #1
 8001568:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800156a:	4313      	orrs	r3, r2
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fb46 	bl	8001c04 <HAL_ETH_WritePHYRegister>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00b      	beq.n	8001596 <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001582:	6939      	ldr	r1, [r7, #16]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fcfb 	bl	8001f80 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001596:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800159a:	f7ff fd6f 	bl	800107c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800159e:	6939      	ldr	r1, [r7, #16]
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fced 	bl	8001f80 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ETH_DMATxDescListInit+0x20>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e051      	b.n	800167c <HAL_ETH_DMATxDescListInit+0xc4>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e030      	b.n	8001656 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	4413      	add	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001604:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	461a      	mov	r2, r3
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	3b01      	subs	r3, #1
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	d208      	bcs.n	800164a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	4413      	add	r3, r2
 8001642:	461a      	mov	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	e002      	b.n	8001650 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d3ca      	bcc.n	80015f4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001668:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ETH_DMARxDescListInit+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e055      	b.n	8001754 <HAL_ETH_DMARxDescListInit+0xcc>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e034      	b.n	800172e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	015b      	lsls	r3, r3, #5
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	4413      	add	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80016d4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80016dc:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	429a      	cmp	r2, r3
 800170e:	d208      	bcs.n	8001722 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	015b      	lsls	r3, r3, #5
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	4413      	add	r3, r2
 800171a:	461a      	mov	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	e002      	b.n	8001728 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3301      	adds	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d3c6      	bcc.n	80016c4 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001740:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_ETH_TransmitFrame+0x24>
 8001780:	2302      	movs	r3, #2
 8001782:	e0cc      	b.n	800191e <HAL_ETH_TransmitFrame+0x1be>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d109      	bne.n	80017ae <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0b7      	b.n	800191e <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da09      	bge.n	80017cc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2212      	movs	r2, #18
 80017bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0a8      	b.n	800191e <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d915      	bls.n	8001802 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4a54      	ldr	r2, [pc, #336]	@ (800192c <HAL_ETH_TransmitFrame+0x1cc>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0a9b      	lsrs	r3, r3, #10
 80017e0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4b51      	ldr	r3, [pc, #324]	@ (800192c <HAL_ETH_TransmitFrame+0x1cc>)
 80017e6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ea:	0a9b      	lsrs	r3, r3, #10
 80017ec:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e001      	b.n	8001806 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001802:	2301      	movs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d11c      	bne.n	8001846 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800181a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001826:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001832:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001836:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001844:	e04b      	b.n	80018de <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	e044      	b.n	80018d6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001856:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800185a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001870:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001876:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800187a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3b01      	subs	r3, #1
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	429a      	cmp	r2, r3
 8001884:	d116      	bne.n	80018b4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001894:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4a25      	ldr	r2, [pc, #148]	@ (8001930 <HAL_ETH_TransmitFrame+0x1d0>)
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80018a6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018b2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80018c2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	3301      	adds	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3b6      	bcc.n	800184c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00d      	beq.n	800190c <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f8:	461a      	mov	r2, r3
 80018fa:	2304      	movs	r3, #4
 80018fc:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001906:	461a      	mov	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	ac02b00b 	.word	0xac02b00b
 8001930:	fffffa0c 	.word	0xfffffa0c

08001934 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800194a:	2302      	movs	r3, #2
 800194c:	e074      	b.n	8001a38 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2202      	movs	r2, #2
 800195a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800195e:	e05a      	b.n	8001a16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001974:	d10d      	bne.n	8001992 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001990:	e041      	b.n	8001a16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80019b6:	e02e      	b.n	8001a16 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d103      	bne.n	80019da <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019e6:	1f1a      	subs	r2, r3, #4
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e010      	b.n	8001a38 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db02      	blt.n	8001a26 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d99c      	bls.n	8001960 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5a:	2b40      	cmp	r3, #64	@ 0x40
 8001a5c:	d112      	bne.n	8001a84 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f003 fe86 	bl	8005770 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2340      	movs	r3, #64	@ 0x40
 8001a70:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a82:	e01a      	b.n	8001aba <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d111      	bne.n	8001aba <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f838 	bl	8001b0c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac8:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001adc:	d112      	bne.n	8001b04 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f81e 	bl	8001b20 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aec:	461a      	mov	r2, r3
 8001aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001af2:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b82      	cmp	r3, #130	@ 0x82
 8001b54:	d101      	bne.n	8001b5a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	e050      	b.n	8001bfc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2282      	movs	r2, #130	@ 0x82
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 031c 	and.w	r3, r3, #28
 8001b70:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8a1b      	ldrh	r3, [r3, #16]
 8001b76:	02db      	lsls	r3, r3, #11
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b80:	897b      	ldrh	r3, [r7, #10]
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f023 0302 	bic.w	r3, r3, #2
 8001b94:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba6:	f7ff fa5d 	bl	8001064 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bac:	e015      	b.n	8001bda <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bae:	f7ff fa59 	bl	8001064 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbc:	d309      	bcc.n	8001bd2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e014      	b.n	8001bfc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e4      	bne.n	8001bae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b42      	cmp	r3, #66	@ 0x42
 8001c24:	d101      	bne.n	8001c2a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	e04e      	b.n	8001cc8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2242      	movs	r2, #66	@ 0x42
 8001c2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 031c 	and.w	r3, r3, #28
 8001c40:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8a1b      	ldrh	r3, [r3, #16]
 8001c46:	02db      	lsls	r3, r3, #11
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c50:	897b      	ldrh	r3, [r7, #10]
 8001c52:	019b      	lsls	r3, r3, #6
 8001c54:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff f9f0 	bl	8001064 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c86:	e015      	b.n	8001cb4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c88:	f7ff f9ec 	bl	8001064 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c96:	d309      	bcc.n	8001cac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e00d      	b.n	8001cc8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1e4      	bne.n	8001c88 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ETH_Start+0x16>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e01f      	b.n	8001d26 <HAL_ETH_Start+0x56>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fb40 	bl	800237c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fb77 	bl	80023f0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fc06 	bl	8002514 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fbab 	bl	8002464 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fbd4 	bl	80024bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ETH_Stop+0x16>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e01f      	b.n	8001d84 <HAL_ETH_Stop+0x56>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fb9b 	bl	8002490 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fbc4 	bl	80024e8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fb62 	bl	800242a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fbd4 	bl	8002514 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fb22 	bl	80023b6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_ETH_ConfigMAC+0x1c>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e0e4      	b.n	8001f72 <HAL_ETH_ConfigMAC+0x1e6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80b1 	beq.w	8001f22 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4b6c      	ldr	r3, [pc, #432]	@ (8001f7c <HAL_ETH_ConfigMAC+0x1f0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dd8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001dde:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001de4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001dea:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001df0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001df6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001dfc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e02:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e08:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e0e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e14:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 8001e1a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff f922 	bl	800107c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e48:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001e4e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001e54:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e5a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001e60:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001e66:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e72:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e74:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff f8fc 	bl	800107c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e94:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e9e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001eae:	4013      	ands	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ebc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001ec2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001ec8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ece:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001ed4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff f8c5 	bl	800107c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff f8b2 	bl	800107c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	61da      	str	r2, [r3, #28]
 8001f20:	e01e      	b.n	8001f60 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001f30:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7ff f892 	bl	800107c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	ff20810f 	.word	0xff20810f

08001f80 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0b0      	sub	sp, #192	@ 0xc0
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f9c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d103      	bne.n	8001fce <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001fc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fca:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fcc:	e001      	b.n	8001fd2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001fd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fd6:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001fec:	2340      	movs	r3, #64	@ 0x40
 8001fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002044:	2300      	movs	r3, #0
 8002046:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002058:	4ba9      	ldr	r3, [pc, #676]	@ (8002300 <ETH_MACDMAConfig+0x380>)
 800205a:	4013      	ands	r3, r2
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002060:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8002062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002064:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8002068:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800206a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 800206c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002072:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8002076:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002078:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 800207a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002080:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8002084:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8002088:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800208a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 800208c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800208e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002090:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8002094:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80020a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7fe ffe1 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80020c2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020c4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80020c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020c8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 80020cc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80020ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 80020d2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 80020d8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 80020de:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020f0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020f2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7fe ffbc 	bl	800107c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800210c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002116:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002120:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800212c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002130:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002134:	4013      	ands	r3, r2
 8002136:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800213a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002140:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002144:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 800214a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800214c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002150:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002156:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002158:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 800215c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800215e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002170:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800217c:	2001      	movs	r0, #1
 800217e:	f7fe ff7d 	bl	800107c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800218a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800218c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 8002190:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7fe ff68 	bl	800107c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80021b4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021be:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80021c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80021c8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021da:	2304      	movs	r3, #4
 80021dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021e8:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021ee:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021fe:	2300      	movs	r3, #0
 8002200:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002210:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002214:	4b3b      	ldr	r3, [pc, #236]	@ (8002304 <ETH_MACDMAConfig+0x384>)
 8002216:	4013      	ands	r3, r2
 8002218:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800221c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800221e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002220:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002222:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002224:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002226:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002228:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800222a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800222c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800222e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002230:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002232:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002234:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002238:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800223a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 800223c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800223e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002250:	461a      	mov	r2, r3
 8002252:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002256:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe ff08 	bl	800107c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002274:	461a      	mov	r2, r3
 8002276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800227a:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800227c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 800227e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002280:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8002284:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002288:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800228a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 800228c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800228e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002290:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002292:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002296:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022a4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7fe fee1 	bl	800107c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022c2:	461a      	mov	r2, r3
 80022c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022c8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10b      	bne.n	80022ea <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022da:	69d9      	ldr	r1, [r3, #28]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <ETH_MACDMAConfig+0x388>)
 80022e2:	430b      	orrs	r3, r1
 80022e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e8:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	461a      	mov	r2, r3
 80022f0:	2100      	movs	r1, #0
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f80a 	bl	800230c <ETH_MACAddressConfig>
}
 80022f8:	bf00      	nop
 80022fa:	37c0      	adds	r7, #192	@ 0xc0
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ff20810f 	.word	0xff20810f
 8002304:	f8de3f23 	.word	0xf8de3f23
 8002308:	00010040 	.word	0x00010040

0800230c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3305      	adds	r3, #5
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	3204      	adds	r2, #4
 8002324:	7812      	ldrb	r2, [r2, #0]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <ETH_MACAddressConfig+0x68>)
 800232e:	4413      	add	r3, r2
 8002330:	461a      	mov	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3303      	adds	r3, #3
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3302      	adds	r3, #2
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	041b      	lsls	r3, r3, #16
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4313      	orrs	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <ETH_MACAddressConfig+0x6c>)
 800235e:	4413      	add	r3, r2
 8002360:	461a      	mov	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40028040 	.word	0x40028040
 8002378:	40028044 	.word	0x40028044

0800237c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7fe fe6b 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7fe fe4e 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	601a      	str	r2, [r3, #0]
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0204 	orr.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002414:	2001      	movs	r0, #1
 8002416:	f7fe fe31 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0204 	bic.w	r2, r2, #4
 8002444:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7fe fe14 	bl	800107c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800247e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002482:	6193      	str	r3, [r2, #24]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80024aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ae:	6193      	str	r3, [r2, #24]
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024da:	6193      	str	r3, [r2, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	f023 0302 	bic.w	r3, r3, #2
 8002502:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002506:	6193      	str	r3, [r2, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002536:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe fd99 	bl	800107c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002554:	6193      	str	r3, [r2, #24]
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e175      	b.n	800286c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8164 	bne.w	8002866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x56>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80be 	beq.w	8002866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	4b66      	ldr	r3, [pc, #408]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a65      	ldr	r2, [pc, #404]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b63      	ldr	r3, [pc, #396]	@ (8002884 <HAL_GPIO_Init+0x324>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002702:	4a61      	ldr	r2, [pc, #388]	@ (8002888 <HAL_GPIO_Init+0x328>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	089b      	lsrs	r3, r3, #2
 8002708:	3302      	adds	r3, #2
 800270a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	220f      	movs	r2, #15
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a58      	ldr	r2, [pc, #352]	@ (800288c <HAL_GPIO_Init+0x32c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d037      	beq.n	800279e <HAL_GPIO_Init+0x23e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_GPIO_Init+0x330>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_GPIO_Init+0x23a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_GPIO_Init+0x334>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02b      	beq.n	8002796 <HAL_GPIO_Init+0x236>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a55      	ldr	r2, [pc, #340]	@ (8002898 <HAL_GPIO_Init+0x338>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x232>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a54      	ldr	r2, [pc, #336]	@ (800289c <HAL_GPIO_Init+0x33c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x22e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a53      	ldr	r2, [pc, #332]	@ (80028a0 <HAL_GPIO_Init+0x340>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x22a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <HAL_GPIO_Init+0x344>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x226>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a51      	ldr	r2, [pc, #324]	@ (80028a8 <HAL_GPIO_Init+0x348>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x222>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a50      	ldr	r2, [pc, #320]	@ (80028ac <HAL_GPIO_Init+0x34c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x21e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4f      	ldr	r2, [pc, #316]	@ (80028b0 <HAL_GPIO_Init+0x350>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x21a>
 8002776:	2309      	movs	r3, #9
 8002778:	e012      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277a:	230a      	movs	r3, #10
 800277c:	e010      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800277e:	2308      	movs	r3, #8
 8002780:	e00e      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002782:	2307      	movs	r3, #7
 8002784:	e00c      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002786:	2306      	movs	r3, #6
 8002788:	e00a      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278a:	2305      	movs	r3, #5
 800278c:	e008      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800278e:	2304      	movs	r3, #4
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002792:	2303      	movs	r3, #3
 8002794:	e004      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 8002796:	2302      	movs	r3, #2
 8002798:	e002      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x240>
 800279e:	2300      	movs	r3, #0
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	f002 0203 	and.w	r2, r2, #3
 80027a6:	0092      	lsls	r2, r2, #2
 80027a8:	4093      	lsls	r3, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027b0:	4935      	ldr	r1, [pc, #212]	@ (8002888 <HAL_GPIO_Init+0x328>)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b3d      	ldr	r3, [pc, #244]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e2:	4a34      	ldr	r2, [pc, #208]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e8:	4b32      	ldr	r3, [pc, #200]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800280c:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002812:	4b28      	ldr	r3, [pc, #160]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002836:	4a1f      	ldr	r2, [pc, #124]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800283c:	4b1d      	ldr	r3, [pc, #116]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <HAL_GPIO_Init+0x354>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b0f      	cmp	r3, #15
 8002870:	f67f ae86 	bls.w	8002580 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3724      	adds	r7, #36	@ 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	40013800 	.word	0x40013800
 800288c:	40020000 	.word	0x40020000
 8002890:	40020400 	.word	0x40020400
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40021c00 	.word	0x40021c00
 80028ac:	40022000 	.word	0x40022000
 80028b0:	40022400 	.word	0x40022400
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028fc:	887a      	ldrh	r2, [r7, #2]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4013      	ands	r3, r2
 8002902:	041a      	lsls	r2, r3, #16
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	43d9      	mvns	r1, r3
 8002908:	887b      	ldrh	r3, [r7, #2]
 800290a:	400b      	ands	r3, r1
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800291e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002920:	b08f      	sub	sp, #60	@ 0x3c
 8002922:	af0a      	add	r7, sp, #40	@ 0x28
 8002924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e116      	b.n	8002b5e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe f88c 	bl	8000a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2203      	movs	r2, #3
 8002954:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fa46 	bl	8004e00 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	687e      	ldr	r6, [r7, #4]
 800297c:	466d      	mov	r5, sp
 800297e:	f106 0410 	add.w	r4, r6, #16
 8002982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800298e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002992:	1d33      	adds	r3, r6, #4
 8002994:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002996:	6838      	ldr	r0, [r7, #0]
 8002998:	f002 f9da 	bl	8004d50 <USB_CoreInit>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e0d7      	b.n	8002b5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 fa34 	bl	8004e22 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e04a      	b.n	8002a56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	333d      	adds	r3, #61	@ 0x3d
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	333c      	adds	r3, #60	@ 0x3c
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b298      	uxth	r0, r3
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3342      	adds	r3, #66	@ 0x42
 80029fc:	4602      	mov	r2, r0
 80029fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	333f      	adds	r3, #63	@ 0x3f
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	3344      	adds	r3, #68	@ 0x44
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3348      	adds	r3, #72	@ 0x48
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3350      	adds	r3, #80	@ 0x50
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	3301      	adds	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3af      	bcc.n	80029c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	73fb      	strb	r3, [r7, #15]
 8002a64:	e044      	b.n	8002af0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	3301      	adds	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3b5      	bcc.n	8002a66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	687e      	ldr	r6, [r7, #4]
 8002b02:	466d      	mov	r5, sp
 8002b04:	f106 0410 	add.w	r4, r6, #16
 8002b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b14:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b18:	1d33      	adds	r3, r6, #4
 8002b1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1c:	6838      	ldr	r0, [r7, #0]
 8002b1e:	f002 f9cd 	bl	8004ebc <USB_DevInit>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e014      	b.n	8002b5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f80b 	bl	8002b68 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fb87 	bl	800526a <USB_DevDisconnect>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b96:	4b05      	ldr	r3, [pc, #20]	@ (8002bac <HAL_PCDEx_ActivateLPM+0x44>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	10000003 	.word	0x10000003

08002bb0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	4b23      	ldr	r3, [pc, #140]	@ (8002c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a22      	ldr	r2, [pc, #136]	@ (8002c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <HAL_PWREx_EnableOverDrive+0x98>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bfe:	f7fe fa31 	bl	8001064 <HAL_GetTick>
 8002c02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c04:	e009      	b.n	8002c1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c06:	f7fe fa2d 	bl	8001064 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c14:	d901      	bls.n	8002c1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e022      	b.n	8002c60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c26:	d1ee      	bne.n	8002c06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c34:	f7fe fa16 	bl	8001064 <HAL_GetTick>
 8002c38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3a:	e009      	b.n	8002c50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c3c:	f7fe fa12 	bl	8001064 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c4a:	d901      	bls.n	8002c50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e007      	b.n	8002c60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e29b      	b.n	80031be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8087 	beq.w	8002da2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c94:	4b96      	ldr	r3, [pc, #600]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d00c      	beq.n	8002cba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ca0:	4b93      	ldr	r3, [pc, #588]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d112      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62>
 8002cac:	4b90      	ldr	r3, [pc, #576]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cba:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d06c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x130>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d168      	bne.n	8002da0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e275      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x7a>
 8002cdc:	4b84      	ldr	r3, [pc, #528]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a83      	ldr	r2, [pc, #524]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e02e      	b.n	8002d48 <HAL_RCC_OscConfig+0xd8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x9c>
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7b      	ldr	r2, [pc, #492]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xd8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0xc0>
 8002d16:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b73      	ldr	r3, [pc, #460]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xd8>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe f988 	bl	8001064 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe f984 	bl	8001064 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e229      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xe8>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f974 	bl	8001064 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe f970 	bl	8001064 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e215      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b57      	ldr	r3, [pc, #348]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x110>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d069      	beq.n	8002e82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dae:	4b50      	ldr	r3, [pc, #320]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d11c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x190>
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_RCC_OscConfig+0x17a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e1e9      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dea:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	493d      	ldr	r1, [pc, #244]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	e040      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d023      	beq.n	8002e50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e08:	4b39      	ldr	r3, [pc, #228]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a38      	ldr	r2, [pc, #224]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f926 	bl	8001064 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe f922 	bl	8001064 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1c7      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4929      	ldr	r1, [pc, #164]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]
 8002e4e:	e018      	b.n	8002e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e50:	4b27      	ldr	r3, [pc, #156]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a26      	ldr	r2, [pc, #152]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe f902 	bl	8001064 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe f8fe 	bl	8001064 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1a3      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d038      	beq.n	8002f00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe f8df 	bl	8001064 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eaa:	f7fe f8db 	bl	8001064 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e180      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x23a>
 8002ec8:	e01a      	b.n	8002f00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <HAL_RCC_OscConfig+0x280>)
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f8c5 	bl	8001064 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ede:	f7fe f8c1 	bl	8001064 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d903      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e166      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
 8002ef0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b92      	ldr	r3, [pc, #584]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ee      	bne.n	8002ede <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a4 	beq.w	8003056 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b8c      	ldr	r3, [pc, #560]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10d      	bne.n	8002f36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	4a88      	ldr	r2, [pc, #544]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f26:	4b86      	ldr	r3, [pc, #536]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f36:	4b83      	ldr	r3, [pc, #524]	@ (8003144 <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d118      	bne.n	8002f74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f42:	4b80      	ldr	r3, [pc, #512]	@ (8003144 <HAL_RCC_OscConfig+0x4d4>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a7f      	ldr	r2, [pc, #508]	@ (8003144 <HAL_RCC_OscConfig+0x4d4>)
 8002f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f889 	bl	8001064 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f56:	f7fe f885 	bl	8001064 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e12a      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f68:	4b76      	ldr	r3, [pc, #472]	@ (8003144 <HAL_RCC_OscConfig+0x4d4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x31a>
 8002f7c:	4b70      	ldr	r3, [pc, #448]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a6f      	ldr	r2, [pc, #444]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f88:	e02d      	b.n	8002fe6 <HAL_RCC_OscConfig+0x376>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x33c>
 8002f92:	4b6b      	ldr	r3, [pc, #428]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	4a6a      	ldr	r2, [pc, #424]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9e:	4b68      	ldr	r3, [pc, #416]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a67      	ldr	r2, [pc, #412]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	f023 0304 	bic.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002faa:	e01c      	b.n	8002fe6 <HAL_RCC_OscConfig+0x376>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCC_OscConfig+0x35e>
 8002fb4:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a61      	ldr	r2, [pc, #388]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	f043 0304 	orr.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fcc:	e00b      	b.n	8002fe6 <HAL_RCC_OscConfig+0x376>
 8002fce:	4b5c      	ldr	r3, [pc, #368]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fda:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8002fe0:	f023 0304 	bic.w	r3, r3, #4
 8002fe4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d015      	beq.n	800301a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe f839 	bl	8001064 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe f835 	bl	8001064 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0d8      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300c:	4b4c      	ldr	r3, [pc, #304]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ee      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x386>
 8003018:	e014      	b.n	8003044 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe f823 	bl	8001064 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe f81f 	bl	8001064 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0c2      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003038:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ee      	bne.n	8003022 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a3c      	ldr	r2, [pc, #240]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 80ae 	beq.w	80031bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003060:	4b37      	ldr	r3, [pc, #220]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d06d      	beq.n	8003148 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d14b      	bne.n	800310c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b32      	ldr	r3, [pc, #200]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a31      	ldr	r2, [pc, #196]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd fff0 	bl	8001064 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fd ffec 	bl	8001064 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e091      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309a:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	019b      	lsls	r3, r3, #6
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	491b      	ldr	r1, [pc, #108]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a18      	ldr	r2, [pc, #96]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd ffbe 	bl	8001064 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fd ffba 	bl	8001064 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e05f      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x47c>
 800310a:	e057      	b.n	80031bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0b      	ldr	r2, [pc, #44]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fd ffa4 	bl	8001064 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fd ffa0 	bl	8001064 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e045      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b03      	ldr	r3, [pc, #12]	@ (8003140 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x4b0>
 800313e:	e03d      	b.n	80031bc <HAL_RCC_OscConfig+0x54c>
 8003140:	40023800 	.word	0x40023800
 8003144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003148:	4b1f      	ldr	r3, [pc, #124]	@ (80031c8 <HAL_RCC_OscConfig+0x558>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d030      	beq.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d129      	bne.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d122      	bne.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800317e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003180:	4293      	cmp	r3, r2
 8003182:	d119      	bne.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	3b01      	subs	r3, #1
 8003192:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d10f      	bne.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d107      	bne.n	80031b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0d0      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d910      	bls.n	8003214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	4b67      	ldr	r3, [pc, #412]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 020f 	bic.w	r2, r3, #15
 80031fa:	4965      	ldr	r1, [pc, #404]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003202:	4b63      	ldr	r3, [pc, #396]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0b8      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800322c:	4b59      	ldr	r3, [pc, #356]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003244:	4b53      	ldr	r3, [pc, #332]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a52      	ldr	r2, [pc, #328]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800324e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003250:	4b50      	ldr	r3, [pc, #320]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	494d      	ldr	r1, [pc, #308]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d040      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003276:	4b47      	ldr	r3, [pc, #284]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d115      	bne.n	80032ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e07f      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328e:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e073      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329e:	4b3d      	ldr	r3, [pc, #244]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06b      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ae:	4b39      	ldr	r3, [pc, #228]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4936      	ldr	r1, [pc, #216]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c0:	f7fd fed0 	bl	8001064 <HAL_GetTick>
 80032c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c6:	e00a      	b.n	80032de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fd fecc 	bl	8001064 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e053      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032de:	4b2d      	ldr	r3, [pc, #180]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 020c 	and.w	r2, r3, #12
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1eb      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032f0:	4b27      	ldr	r3, [pc, #156]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d210      	bcs.n	8003320 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 020f 	bic.w	r2, r3, #15
 8003306:	4922      	ldr	r1, [pc, #136]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_RCC_ClockConfig+0x1c4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e032      	b.n	8003386 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4916      	ldr	r1, [pc, #88]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800334a:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	490e      	ldr	r1, [pc, #56]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800335e:	f000 f821 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 8003362:	4602      	mov	r2, r0
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_ClockConfig+0x1c8>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	490a      	ldr	r1, [pc, #40]	@ (8003398 <HAL_RCC_ClockConfig+0x1cc>)
 8003370:	5ccb      	ldrb	r3, [r1, r3]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_RCC_ClockConfig+0x1d0>)
 8003378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1d4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fbec 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40023c00 	.word	0x40023c00
 8003394:	40023800 	.word	0x40023800
 8003398:	0801ba8c 	.word	0x0801ba8c
 800339c:	20000000 	.word	0x20000000
 80033a0:	20000004 	.word	0x20000004

080033a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a8:	b094      	sub	sp, #80	@ 0x50
 80033aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80033b0:	2300      	movs	r3, #0
 80033b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b4:	2300      	movs	r3, #0
 80033b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033bc:	4b79      	ldr	r3, [pc, #484]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d00d      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x40>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	f200 80e1 	bhi.w	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HAL_RCC_GetSysClockFreq+0x34>
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d003      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x3a>
 80033d6:	e0db      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b73      	ldr	r3, [pc, #460]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033dc:	e0db      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033de:	4b73      	ldr	r3, [pc, #460]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x208>)
 80033e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e2:	e0d8      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e4:	4b6f      	ldr	r3, [pc, #444]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d063      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	2200      	movs	r2, #0
 8003402:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003404:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340c:	633b      	str	r3, [r7, #48]	@ 0x30
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
 8003412:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003416:	4622      	mov	r2, r4
 8003418:	462b      	mov	r3, r5
 800341a:	f04f 0000 	mov.w	r0, #0
 800341e:	f04f 0100 	mov.w	r1, #0
 8003422:	0159      	lsls	r1, r3, #5
 8003424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003428:	0150      	lsls	r0, r2, #5
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4621      	mov	r1, r4
 8003430:	1a51      	subs	r1, r2, r1
 8003432:	6139      	str	r1, [r7, #16]
 8003434:	4629      	mov	r1, r5
 8003436:	eb63 0301 	sbc.w	r3, r3, r1
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003448:	4659      	mov	r1, fp
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003452:	4651      	mov	r1, sl
 8003454:	018a      	lsls	r2, r1, #6
 8003456:	4651      	mov	r1, sl
 8003458:	ebb2 0801 	subs.w	r8, r2, r1
 800345c:	4659      	mov	r1, fp
 800345e:	eb63 0901 	sbc.w	r9, r3, r1
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800346e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003476:	4690      	mov	r8, r2
 8003478:	4699      	mov	r9, r3
 800347a:	4623      	mov	r3, r4
 800347c:	eb18 0303 	adds.w	r3, r8, r3
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	462b      	mov	r3, r5
 8003484:	eb49 0303 	adc.w	r3, r9, r3
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003496:	4629      	mov	r1, r5
 8003498:	024b      	lsls	r3, r1, #9
 800349a:	4621      	mov	r1, r4
 800349c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a0:	4621      	mov	r1, r4
 80034a2:	024a      	lsls	r2, r1, #9
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034aa:	2200      	movs	r2, #0
 80034ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034b4:	f7fc ff1c 	bl	80002f0 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c0:	e058      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	4618      	mov	r0, r3
 80034cc:	4611      	mov	r1, r2
 80034ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034d2:	623b      	str	r3, [r7, #32]
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034dc:	4642      	mov	r2, r8
 80034de:	464b      	mov	r3, r9
 80034e0:	f04f 0000 	mov.w	r0, #0
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	0159      	lsls	r1, r3, #5
 80034ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ee:	0150      	lsls	r0, r2, #5
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4641      	mov	r1, r8
 80034f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034fa:	4649      	mov	r1, r9
 80034fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800350c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003510:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003514:	ebb2 040a 	subs.w	r4, r2, sl
 8003518:	eb63 050b 	sbc.w	r5, r3, fp
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	00eb      	lsls	r3, r5, #3
 8003526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	4614      	mov	r4, r2
 800352e:	461d      	mov	r5, r3
 8003530:	4643      	mov	r3, r8
 8003532:	18e3      	adds	r3, r4, r3
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	464b      	mov	r3, r9
 8003538:	eb45 0303 	adc.w	r3, r5, r3
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9d7 4500 	ldrd	r4, r5, [r7]
 800354a:	4629      	mov	r1, r5
 800354c:	028b      	lsls	r3, r1, #10
 800354e:	4621      	mov	r1, r4
 8003550:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003554:	4621      	mov	r1, r4
 8003556:	028a      	lsls	r2, r1, #10
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800355e:	2200      	movs	r2, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	61fa      	str	r2, [r7, #28]
 8003564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003568:	f7fc fec2 	bl	80002f0 <__aeabi_uldivmod>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4613      	mov	r3, r2
 8003572:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	3301      	adds	r3, #1
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003584:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003586:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800358e:	e002      	b.n	8003596 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003592:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003598:	4618      	mov	r0, r3
 800359a:	3750      	adds	r7, #80	@ 0x50
 800359c:	46bd      	mov	sp, r7
 800359e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000000 	.word	0x20000000

080035c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035cc:	f7ff fff0 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035d0:	4602      	mov	r2, r0
 80035d2:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	0a9b      	lsrs	r3, r3, #10
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	4903      	ldr	r1, [pc, #12]	@ (80035ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800
 80035ec:	0801ba9c 	.word	0x0801ba9c

080035f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035f4:	f7ff ffdc 	bl	80035b0 <HAL_RCC_GetHCLKFreq>
 80035f8:	4602      	mov	r2, r0
 80035fa:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	0b5b      	lsrs	r3, r3, #13
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	4903      	ldr	r1, [pc, #12]	@ (8003614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003606:	5ccb      	ldrb	r3, [r1, r3]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40023800 	.word	0x40023800
 8003614:	0801ba9c 	.word	0x0801ba9c

08003618 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	220f      	movs	r2, #15
 8003626:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003628:	4b12      	ldr	r3, [pc, #72]	@ (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0203 	and.w	r2, r3, #3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003634:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003640:	4b0c      	ldr	r3, [pc, #48]	@ (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <HAL_RCC_GetClockConfig+0x5c>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <HAL_RCC_GetClockConfig+0x60>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	40023c00 	.word	0x40023c00

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a4:	4b69      	ldr	r3, [pc, #420]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a68      	ldr	r2, [pc, #416]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036ae:	6093      	str	r3, [r2, #8]
 80036b0:	4b66      	ldr	r3, [pc, #408]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036b8:	4964      	ldr	r1, [pc, #400]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d6:	4b5d      	ldr	r3, [pc, #372]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	4959      	ldr	r1, [pc, #356]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d017      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003712:	4b4e      	ldr	r3, [pc, #312]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003718:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	494a      	ldr	r1, [pc, #296]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 808b 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b3a      	ldr	r3, [pc, #232]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003764:	4a39      	ldr	r2, [pc, #228]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376a:	6413      	str	r3, [r2, #64]	@ 0x40
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003778:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd fc6e 	bl	8001064 <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fd fc6a 	bl	8001064 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e38f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800379e:	4b2c      	ldr	r3, [pc, #176]	@ (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037aa:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d035      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d02e      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037c8:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d2:	4b1e      	ldr	r3, [pc, #120]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037de:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a1a      	ldr	r2, [pc, #104]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ea:	4a18      	ldr	r2, [pc, #96]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f0:	4b16      	ldr	r3, [pc, #88]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d114      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fc32 	bl	8001064 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fc2e 	bl	8001064 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e351      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ee      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003832:	d111      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003842:	400b      	ands	r3, r1
 8003844:	4901      	ldr	r1, [pc, #4]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
 800384a:	e00b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	0ffffcff 	.word	0x0ffffcff
 8003858:	4bac      	ldr	r3, [pc, #688]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4aab      	ldr	r2, [pc, #684]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800385e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	4ba9      	ldr	r3, [pc, #676]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	49a6      	ldr	r1, [pc, #664]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003872:	4313      	orrs	r3, r2
 8003874:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003882:	4ba2      	ldr	r3, [pc, #648]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003888:	4aa0      	ldr	r2, [pc, #640]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003892:	4b9e      	ldr	r3, [pc, #632]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003894:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	499b      	ldr	r1, [pc, #620]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b0:	4b96      	ldr	r3, [pc, #600]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038be:	4993      	ldr	r1, [pc, #588]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d2:	4b8e      	ldr	r3, [pc, #568]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e0:	498a      	ldr	r1, [pc, #552]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f4:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003902:	4982      	ldr	r1, [pc, #520]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003916:	4b7d      	ldr	r3, [pc, #500]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4979      	ldr	r1, [pc, #484]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003938:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	4971      	ldr	r1, [pc, #452]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800395a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003960:	f023 020c 	bic.w	r2, r3, #12
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003968:	4968      	ldr	r1, [pc, #416]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397c:	4b63      	ldr	r3, [pc, #396]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003982:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4960      	ldr	r1, [pc, #384]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399e:	4b5b      	ldr	r3, [pc, #364]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	4957      	ldr	r1, [pc, #348]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c0:	4b52      	ldr	r3, [pc, #328]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	494f      	ldr	r1, [pc, #316]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	4946      	ldr	r1, [pc, #280]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a04:	4b41      	ldr	r3, [pc, #260]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	493e      	ldr	r1, [pc, #248]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a26:	4b39      	ldr	r3, [pc, #228]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	4935      	ldr	r1, [pc, #212]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a48:	4b30      	ldr	r3, [pc, #192]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a56:	492d      	ldr	r1, [pc, #180]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d011      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a6a:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a70:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a78:	4924      	ldr	r1, [pc, #144]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a88:	d101      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aaa:	4b18      	ldr	r3, [pc, #96]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	4914      	ldr	r1, [pc, #80]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003acc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ad2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003adc:	490b      	ldr	r1, [pc, #44]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00f      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af0:	4b06      	ldr	r3, [pc, #24]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b00:	4902      	ldr	r1, [pc, #8]	@ (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2c:	4986      	ldr	r1, [pc, #536]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b40:	4b81      	ldr	r3, [pc, #516]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b46:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b50:	497d      	ldr	r1, [pc, #500]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d006      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80d6 	beq.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b6c:	4b76      	ldr	r3, [pc, #472]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a75      	ldr	r2, [pc, #468]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fd fa74 	bl	8001064 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b80:	f7fd fa70 	bl	8001064 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e195      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b92:	4b6d      	ldr	r3, [pc, #436]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d021      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11d      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bc0:	4b61      	ldr	r3, [pc, #388]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc6:	0e1b      	lsrs	r3, r3, #24
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	019a      	lsls	r2, r3, #6
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	071b      	lsls	r3, r3, #28
 8003be6:	4958      	ldr	r1, [pc, #352]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c18:	d129      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c28:	4b47      	ldr	r3, [pc, #284]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	493e      	ldr	r1, [pc, #248]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c56:	4b3c      	ldr	r3, [pc, #240]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c5c:	f023 021f 	bic.w	r2, r3, #31
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	3b01      	subs	r3, #1
 8003c66:	4938      	ldr	r1, [pc, #224]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01d      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c7a:	4b33      	ldr	r3, [pc, #204]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c88:	4b2f      	ldr	r3, [pc, #188]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c8e:	0f1b      	lsrs	r3, r3, #28
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	019a      	lsls	r2, r3, #6
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	061b      	lsls	r3, r3, #24
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	4926      	ldr	r1, [pc, #152]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d011      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	491a      	ldr	r1, [pc, #104]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ce6:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a17      	ldr	r2, [pc, #92]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf2:	f7fd f9b7 	bl	8001064 <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cfa:	f7fd f9b3 	bl	8001064 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b64      	cmp	r3, #100	@ 0x64
 8003d06:	d901      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e0d8      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	f040 80ce 	bne.w	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd f99a 	bl	8001064 <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d32:	e00b      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d34:	f7fd f996 	bl	8001064 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d904      	bls.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e0bb      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d58:	d0ec      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d02e      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d12a      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d82:	4b51      	ldr	r3, [pc, #324]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d90:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	0f1b      	lsrs	r3, r3, #28
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	019a      	lsls	r2, r3, #6
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	061b      	lsls	r3, r3, #24
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	071b      	lsls	r3, r3, #28
 8003db6:	4944      	ldr	r1, [pc, #272]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dbe:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dc4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	493d      	ldr	r1, [pc, #244]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d022      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dec:	d11d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dee:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dfc:	4b32      	ldr	r3, [pc, #200]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	431a      	orrs	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4929      	ldr	r1, [pc, #164]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d028      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	0e1b      	lsrs	r3, r3, #24
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e44:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e4a:	0c1b      	lsrs	r3, r3, #16
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	019a      	lsls	r2, r3, #6
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	061b      	lsls	r3, r3, #24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	4917      	ldr	r1, [pc, #92]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e80:	4911      	ldr	r1, [pc, #68]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e94:	f7fd f8e6 	bl	8001064 <HAL_GetTick>
 8003e98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e9c:	f7fd f8e2 	bl	8001064 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	@ 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e007      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eba:	d1ef      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40023800 	.word	0x40023800

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e049      	b.n	8003f72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f841 	bl	8003f7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 fa00 	bl	8004310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e054      	b.n	8004052 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d022      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd2:	d01d      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a22      	ldr	r2, [pc, #136]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d018      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a21      	ldr	r2, [pc, #132]	@ (8004068 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1f      	ldr	r2, [pc, #124]	@ (800406c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00e      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8004070 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <HAL_TIM_Base_Start_IT+0xe4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <HAL_TIM_Base_Start_IT+0xe8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d115      	bne.n	800403c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_TIM_Base_Start_IT+0xec>)
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b06      	cmp	r3, #6
 8004020:	d015      	beq.n	800404e <HAL_TIM_Base_Start_IT+0xbe>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004028:	d011      	beq.n	800404e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	e008      	b.n	800404e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e000      	b.n	8004050 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40010000 	.word	0x40010000
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40010400 	.word	0x40010400
 8004074:	40014000 	.word	0x40014000
 8004078:	40001800 	.word	0x40001800
 800407c:	00010007 	.word	0x00010007

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f905 	bl	80042d2 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f8f7 	bl	80042be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f908 	bl	80042e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8db 	bl	80042d2 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8cd 	bl	80042be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8de 	bl	80042e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8b1 	bl	80042d2 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8a3 	bl	80042be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8b4 	bl	80042e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f887 	bl	80042d2 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f879 	bl	80042be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f88a 	bl	80042e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fb92 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420e:	2b80      	cmp	r3, #128	@ 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	2b80      	cmp	r3, #128	@ 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f91a 	bl	8004464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b80      	cmp	r3, #128	@ 0x80
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f90d 	bl	8004478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004276:	2b40      	cmp	r3, #64	@ 0x40
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f838 	bl	80042fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0220 	mvn.w	r2, #32
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8cd 	bl	8004450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a40      	ldr	r2, [pc, #256]	@ (8004424 <TIM_Base_SetConfig+0x114>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800432e:	d00f      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a3d      	ldr	r2, [pc, #244]	@ (8004428 <TIM_Base_SetConfig+0x118>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3c      	ldr	r2, [pc, #240]	@ (800442c <TIM_Base_SetConfig+0x11c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3b      	ldr	r2, [pc, #236]	@ (8004430 <TIM_Base_SetConfig+0x120>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3a      	ldr	r2, [pc, #232]	@ (8004434 <TIM_Base_SetConfig+0x124>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2f      	ldr	r2, [pc, #188]	@ (8004424 <TIM_Base_SetConfig+0x114>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d02b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d027      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a2c      	ldr	r2, [pc, #176]	@ (8004428 <TIM_Base_SetConfig+0x118>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d023      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <TIM_Base_SetConfig+0x11c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a2a      	ldr	r2, [pc, #168]	@ (8004430 <TIM_Base_SetConfig+0x120>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a29      	ldr	r2, [pc, #164]	@ (8004434 <TIM_Base_SetConfig+0x124>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d017      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a28      	ldr	r2, [pc, #160]	@ (8004438 <TIM_Base_SetConfig+0x128>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a27      	ldr	r2, [pc, #156]	@ (800443c <TIM_Base_SetConfig+0x12c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00f      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <TIM_Base_SetConfig+0x130>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00b      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a25      	ldr	r2, [pc, #148]	@ (8004444 <TIM_Base_SetConfig+0x134>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d007      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a24      	ldr	r2, [pc, #144]	@ (8004448 <TIM_Base_SetConfig+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d003      	beq.n	80043c2 <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a23      	ldr	r2, [pc, #140]	@ (800444c <TIM_Base_SetConfig+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d108      	bne.n	80043d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004424 <TIM_Base_SetConfig+0x114>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0c      	ldr	r2, [pc, #48]	@ (8004434 <TIM_Base_SetConfig+0x124>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d103      	bne.n	8004410 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	615a      	str	r2, [r3, #20]
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40000c00 	.word	0x40000c00
 8004434:	40010400 	.word	0x40010400
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	40001800 	.word	0x40001800
 8004448:	40001c00 	.word	0x40001c00
 800444c:	40002000 	.word	0x40002000

08004450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e040      	b.n	8004520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc fa7a 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	@ 0x24
 80044b8:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f82c 	bl	8004528 <UART_SetConfig>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e022      	b.n	8004520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fa84 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fb0b 	bl	8004b34 <UART_CheckIdleState>
 800451e:	4603      	mov	r3, r0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4ba6      	ldr	r3, [pc, #664]	@ (80047ec <UART_SetConfig+0x2c4>)
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	6979      	ldr	r1, [r7, #20]
 800455c:	430b      	orrs	r3, r1
 800455e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	430a      	orrs	r2, r1
 8004598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a94      	ldr	r2, [pc, #592]	@ (80047f0 <UART_SetConfig+0x2c8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d120      	bne.n	80045e6 <UART_SetConfig+0xbe>
 80045a4:	4b93      	ldr	r3, [pc, #588]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d816      	bhi.n	80045e0 <UART_SetConfig+0xb8>
 80045b2:	a201      	add	r2, pc, #4	@ (adr r2, 80045b8 <UART_SetConfig+0x90>)
 80045b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b8:	080045c9 	.word	0x080045c9
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045cf 	.word	0x080045cf
 80045c4:	080045db 	.word	0x080045db
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e150      	b.n	8004870 <UART_SetConfig+0x348>
 80045ce:	2302      	movs	r3, #2
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e14d      	b.n	8004870 <UART_SetConfig+0x348>
 80045d4:	2304      	movs	r3, #4
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e14a      	b.n	8004870 <UART_SetConfig+0x348>
 80045da:	2308      	movs	r3, #8
 80045dc:	77fb      	strb	r3, [r7, #31]
 80045de:	e147      	b.n	8004870 <UART_SetConfig+0x348>
 80045e0:	2310      	movs	r3, #16
 80045e2:	77fb      	strb	r3, [r7, #31]
 80045e4:	e144      	b.n	8004870 <UART_SetConfig+0x348>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a83      	ldr	r2, [pc, #524]	@ (80047f8 <UART_SetConfig+0x2d0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d132      	bne.n	8004656 <UART_SetConfig+0x12e>
 80045f0:	4b80      	ldr	r3, [pc, #512]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80045f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b0c      	cmp	r3, #12
 80045fc:	d828      	bhi.n	8004650 <UART_SetConfig+0x128>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <UART_SetConfig+0xdc>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	08004639 	.word	0x08004639
 8004608:	08004651 	.word	0x08004651
 800460c:	08004651 	.word	0x08004651
 8004610:	08004651 	.word	0x08004651
 8004614:	08004645 	.word	0x08004645
 8004618:	08004651 	.word	0x08004651
 800461c:	08004651 	.word	0x08004651
 8004620:	08004651 	.word	0x08004651
 8004624:	0800463f 	.word	0x0800463f
 8004628:	08004651 	.word	0x08004651
 800462c:	08004651 	.word	0x08004651
 8004630:	08004651 	.word	0x08004651
 8004634:	0800464b 	.word	0x0800464b
 8004638:	2300      	movs	r3, #0
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e118      	b.n	8004870 <UART_SetConfig+0x348>
 800463e:	2302      	movs	r3, #2
 8004640:	77fb      	strb	r3, [r7, #31]
 8004642:	e115      	b.n	8004870 <UART_SetConfig+0x348>
 8004644:	2304      	movs	r3, #4
 8004646:	77fb      	strb	r3, [r7, #31]
 8004648:	e112      	b.n	8004870 <UART_SetConfig+0x348>
 800464a:	2308      	movs	r3, #8
 800464c:	77fb      	strb	r3, [r7, #31]
 800464e:	e10f      	b.n	8004870 <UART_SetConfig+0x348>
 8004650:	2310      	movs	r3, #16
 8004652:	77fb      	strb	r3, [r7, #31]
 8004654:	e10c      	b.n	8004870 <UART_SetConfig+0x348>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a68      	ldr	r2, [pc, #416]	@ (80047fc <UART_SetConfig+0x2d4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d120      	bne.n	80046a2 <UART_SetConfig+0x17a>
 8004660:	4b64      	ldr	r3, [pc, #400]	@ (80047f4 <UART_SetConfig+0x2cc>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800466a:	2b30      	cmp	r3, #48	@ 0x30
 800466c:	d013      	beq.n	8004696 <UART_SetConfig+0x16e>
 800466e:	2b30      	cmp	r3, #48	@ 0x30
 8004670:	d814      	bhi.n	800469c <UART_SetConfig+0x174>
 8004672:	2b20      	cmp	r3, #32
 8004674:	d009      	beq.n	800468a <UART_SetConfig+0x162>
 8004676:	2b20      	cmp	r3, #32
 8004678:	d810      	bhi.n	800469c <UART_SetConfig+0x174>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <UART_SetConfig+0x15c>
 800467e:	2b10      	cmp	r3, #16
 8004680:	d006      	beq.n	8004690 <UART_SetConfig+0x168>
 8004682:	e00b      	b.n	800469c <UART_SetConfig+0x174>
 8004684:	2300      	movs	r3, #0
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e0f2      	b.n	8004870 <UART_SetConfig+0x348>
 800468a:	2302      	movs	r3, #2
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e0ef      	b.n	8004870 <UART_SetConfig+0x348>
 8004690:	2304      	movs	r3, #4
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e0ec      	b.n	8004870 <UART_SetConfig+0x348>
 8004696:	2308      	movs	r3, #8
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e0e9      	b.n	8004870 <UART_SetConfig+0x348>
 800469c:	2310      	movs	r3, #16
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e0e6      	b.n	8004870 <UART_SetConfig+0x348>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a56      	ldr	r2, [pc, #344]	@ (8004800 <UART_SetConfig+0x2d8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d120      	bne.n	80046ee <UART_SetConfig+0x1c6>
 80046ac:	4b51      	ldr	r3, [pc, #324]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046b8:	d013      	beq.n	80046e2 <UART_SetConfig+0x1ba>
 80046ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80046bc:	d814      	bhi.n	80046e8 <UART_SetConfig+0x1c0>
 80046be:	2b80      	cmp	r3, #128	@ 0x80
 80046c0:	d009      	beq.n	80046d6 <UART_SetConfig+0x1ae>
 80046c2:	2b80      	cmp	r3, #128	@ 0x80
 80046c4:	d810      	bhi.n	80046e8 <UART_SetConfig+0x1c0>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <UART_SetConfig+0x1a8>
 80046ca:	2b40      	cmp	r3, #64	@ 0x40
 80046cc:	d006      	beq.n	80046dc <UART_SetConfig+0x1b4>
 80046ce:	e00b      	b.n	80046e8 <UART_SetConfig+0x1c0>
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e0cc      	b.n	8004870 <UART_SetConfig+0x348>
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	e0c9      	b.n	8004870 <UART_SetConfig+0x348>
 80046dc:	2304      	movs	r3, #4
 80046de:	77fb      	strb	r3, [r7, #31]
 80046e0:	e0c6      	b.n	8004870 <UART_SetConfig+0x348>
 80046e2:	2308      	movs	r3, #8
 80046e4:	77fb      	strb	r3, [r7, #31]
 80046e6:	e0c3      	b.n	8004870 <UART_SetConfig+0x348>
 80046e8:	2310      	movs	r3, #16
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e0c0      	b.n	8004870 <UART_SetConfig+0x348>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a44      	ldr	r2, [pc, #272]	@ (8004804 <UART_SetConfig+0x2dc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d125      	bne.n	8004744 <UART_SetConfig+0x21c>
 80046f8:	4b3e      	ldr	r3, [pc, #248]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004702:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004706:	d017      	beq.n	8004738 <UART_SetConfig+0x210>
 8004708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470c:	d817      	bhi.n	800473e <UART_SetConfig+0x216>
 800470e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004712:	d00b      	beq.n	800472c <UART_SetConfig+0x204>
 8004714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004718:	d811      	bhi.n	800473e <UART_SetConfig+0x216>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <UART_SetConfig+0x1fe>
 800471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004722:	d006      	beq.n	8004732 <UART_SetConfig+0x20a>
 8004724:	e00b      	b.n	800473e <UART_SetConfig+0x216>
 8004726:	2300      	movs	r3, #0
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e0a1      	b.n	8004870 <UART_SetConfig+0x348>
 800472c:	2302      	movs	r3, #2
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e09e      	b.n	8004870 <UART_SetConfig+0x348>
 8004732:	2304      	movs	r3, #4
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e09b      	b.n	8004870 <UART_SetConfig+0x348>
 8004738:	2308      	movs	r3, #8
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e098      	b.n	8004870 <UART_SetConfig+0x348>
 800473e:	2310      	movs	r3, #16
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e095      	b.n	8004870 <UART_SetConfig+0x348>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2f      	ldr	r2, [pc, #188]	@ (8004808 <UART_SetConfig+0x2e0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d125      	bne.n	800479a <UART_SetConfig+0x272>
 800474e:	4b29      	ldr	r3, [pc, #164]	@ (80047f4 <UART_SetConfig+0x2cc>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004754:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004758:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800475c:	d017      	beq.n	800478e <UART_SetConfig+0x266>
 800475e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004762:	d817      	bhi.n	8004794 <UART_SetConfig+0x26c>
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	d00b      	beq.n	8004782 <UART_SetConfig+0x25a>
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d811      	bhi.n	8004794 <UART_SetConfig+0x26c>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <UART_SetConfig+0x254>
 8004774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004778:	d006      	beq.n	8004788 <UART_SetConfig+0x260>
 800477a:	e00b      	b.n	8004794 <UART_SetConfig+0x26c>
 800477c:	2301      	movs	r3, #1
 800477e:	77fb      	strb	r3, [r7, #31]
 8004780:	e076      	b.n	8004870 <UART_SetConfig+0x348>
 8004782:	2302      	movs	r3, #2
 8004784:	77fb      	strb	r3, [r7, #31]
 8004786:	e073      	b.n	8004870 <UART_SetConfig+0x348>
 8004788:	2304      	movs	r3, #4
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e070      	b.n	8004870 <UART_SetConfig+0x348>
 800478e:	2308      	movs	r3, #8
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e06d      	b.n	8004870 <UART_SetConfig+0x348>
 8004794:	2310      	movs	r3, #16
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e06a      	b.n	8004870 <UART_SetConfig+0x348>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	@ (800480c <UART_SetConfig+0x2e4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d138      	bne.n	8004816 <UART_SetConfig+0x2ee>
 80047a4:	4b13      	ldr	r3, [pc, #76]	@ (80047f4 <UART_SetConfig+0x2cc>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80047ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b2:	d017      	beq.n	80047e4 <UART_SetConfig+0x2bc>
 80047b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047b8:	d82a      	bhi.n	8004810 <UART_SetConfig+0x2e8>
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047be:	d00b      	beq.n	80047d8 <UART_SetConfig+0x2b0>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c4:	d824      	bhi.n	8004810 <UART_SetConfig+0x2e8>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <UART_SetConfig+0x2aa>
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ce:	d006      	beq.n	80047de <UART_SetConfig+0x2b6>
 80047d0:	e01e      	b.n	8004810 <UART_SetConfig+0x2e8>
 80047d2:	2300      	movs	r3, #0
 80047d4:	77fb      	strb	r3, [r7, #31]
 80047d6:	e04b      	b.n	8004870 <UART_SetConfig+0x348>
 80047d8:	2302      	movs	r3, #2
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e048      	b.n	8004870 <UART_SetConfig+0x348>
 80047de:	2304      	movs	r3, #4
 80047e0:	77fb      	strb	r3, [r7, #31]
 80047e2:	e045      	b.n	8004870 <UART_SetConfig+0x348>
 80047e4:	2308      	movs	r3, #8
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e042      	b.n	8004870 <UART_SetConfig+0x348>
 80047ea:	bf00      	nop
 80047ec:	efff69f3 	.word	0xefff69f3
 80047f0:	40011000 	.word	0x40011000
 80047f4:	40023800 	.word	0x40023800
 80047f8:	40004400 	.word	0x40004400
 80047fc:	40004800 	.word	0x40004800
 8004800:	40004c00 	.word	0x40004c00
 8004804:	40005000 	.word	0x40005000
 8004808:	40011400 	.word	0x40011400
 800480c:	40007800 	.word	0x40007800
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e02c      	b.n	8004870 <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a72      	ldr	r2, [pc, #456]	@ (80049e4 <UART_SetConfig+0x4bc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d125      	bne.n	800486c <UART_SetConfig+0x344>
 8004820:	4b71      	ldr	r3, [pc, #452]	@ (80049e8 <UART_SetConfig+0x4c0>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004826:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800482a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800482e:	d017      	beq.n	8004860 <UART_SetConfig+0x338>
 8004830:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004834:	d817      	bhi.n	8004866 <UART_SetConfig+0x33e>
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800483a:	d00b      	beq.n	8004854 <UART_SetConfig+0x32c>
 800483c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004840:	d811      	bhi.n	8004866 <UART_SetConfig+0x33e>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <UART_SetConfig+0x326>
 8004846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800484a:	d006      	beq.n	800485a <UART_SetConfig+0x332>
 800484c:	e00b      	b.n	8004866 <UART_SetConfig+0x33e>
 800484e:	2300      	movs	r3, #0
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e00d      	b.n	8004870 <UART_SetConfig+0x348>
 8004854:	2302      	movs	r3, #2
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e00a      	b.n	8004870 <UART_SetConfig+0x348>
 800485a:	2304      	movs	r3, #4
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e007      	b.n	8004870 <UART_SetConfig+0x348>
 8004860:	2308      	movs	r3, #8
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e004      	b.n	8004870 <UART_SetConfig+0x348>
 8004866:	2310      	movs	r3, #16
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e001      	b.n	8004870 <UART_SetConfig+0x348>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004878:	d15b      	bne.n	8004932 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800487a:	7ffb      	ldrb	r3, [r7, #31]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d828      	bhi.n	80048d2 <UART_SetConfig+0x3aa>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0x360>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe fe8c 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 80048b0:	61b8      	str	r0, [r7, #24]
        break;
 80048b2:	e013      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe fe9c 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 80048b8:	61b8      	str	r0, [r7, #24]
        break;
 80048ba:	e00f      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b4b      	ldr	r3, [pc, #300]	@ (80049ec <UART_SetConfig+0x4c4>)
 80048be:	61bb      	str	r3, [r7, #24]
        break;
 80048c0:	e00c      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fd6f 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 80048c6:	61b8      	str	r0, [r7, #24]
        break;
 80048c8:	e008      	b.n	80048dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ce:	61bb      	str	r3, [r7, #24]
        break;
 80048d0:	e004      	b.n	80048dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77bb      	strb	r3, [r7, #30]
        break;
 80048da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d074      	beq.n	80049cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	005a      	lsls	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	085b      	lsrs	r3, r3, #1
 80048ec:	441a      	add	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d916      	bls.n	800492c <UART_SetConfig+0x404>
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004904:	d212      	bcs.n	800492c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f023 030f 	bic.w	r3, r3, #15
 800490e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	b29b      	uxth	r3, r3
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	b29a      	uxth	r2, r3
 800491c:	89fb      	ldrh	r3, [r7, #14]
 800491e:	4313      	orrs	r3, r2
 8004920:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	89fa      	ldrh	r2, [r7, #14]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	e04f      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	77bb      	strb	r3, [r7, #30]
 8004930:	e04c      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d828      	bhi.n	800498a <UART_SetConfig+0x462>
 8004938:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <UART_SetConfig+0x418>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	0800498b 	.word	0x0800498b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800498b 	.word	0x0800498b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fe30 	bl	80035c8 <HAL_RCC_GetPCLK1Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e013      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fe fe40 	bl	80035f0 <HAL_RCC_GetPCLK2Freq>
 8004970:	61b8      	str	r0, [r7, #24]
        break;
 8004972:	e00f      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <UART_SetConfig+0x4c4>)
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e00c      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fe fd13 	bl	80033a4 <HAL_RCC_GetSysClockFreq>
 800497e:	61b8      	str	r0, [r7, #24]
        break;
 8004980:	e008      	b.n	8004994 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e004      	b.n	8004994 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	77bb      	strb	r3, [r7, #30]
        break;
 8004992:	bf00      	nop
    }

    if (pclk != 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	085a      	lsrs	r2, r3, #1
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d909      	bls.n	80049c8 <UART_SetConfig+0x4a0>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ba:	d205      	bcs.n	80049c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e001      	b.n	80049cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 80049d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40007c00 	.word	0x40007c00
 80049e8:	40023800 	.word	0x40023800
 80049ec:	00f42400 	.word	0x00f42400

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01a      	beq.n	8004b06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aee:	d10a      	bne.n	8004b06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	605a      	str	r2, [r3, #4]
  }
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b44:	f7fc fa8e 	bl	8001064 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d10e      	bne.n	8004b76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f82d 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e023      	b.n	8004bbe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d10e      	bne.n	8004ba2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f817 	bl	8004bc6 <UART_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e00d      	b.n	8004bbe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b09c      	sub	sp, #112	@ 0x70
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd6:	e0a5      	b.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	f000 80a1 	beq.w	8004d24 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be2:	f7fc fa3f 	bl	8001064 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d13e      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004c0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c18:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004c1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e6      	bne.n	8004bf8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3308      	adds	r3, #8
 8004c48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c4a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004c4c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e5      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2220      	movs	r2, #32
 8004c62:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e067      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d04f      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c92:	d147      	bne.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cbe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004cf0:	623a      	str	r2, [r7, #32]
 8004cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	69f9      	ldr	r1, [r7, #28]
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e010      	b.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	f43f af4a 	beq.w	8004bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3770      	adds	r7, #112	@ 0x70
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
	...

08004d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d50:	b084      	sub	sp, #16
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	f107 001c 	add.w	r0, r7, #28
 8004d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d120      	bne.n	8004daa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <USB_CoreInit+0xac>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d105      	bne.n	8004d9e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa92 	bl	80052c8 <USB_CoreReset>
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e010      	b.n	8004dcc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa86 	bl	80052c8 <USB_CoreReset>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10b      	bne.n	8004dea <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f043 0206 	orr.w	r2, r3, #6
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df6:	b004      	add	sp, #16
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	ffbdffbf 	.word	0xffbdffbf

08004e00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f023 0201 	bic.w	r2, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d115      	bne.n	8004e70 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e50:	2001      	movs	r0, #1
 8004e52:	f7fc f913 	bl	800107c <HAL_Delay>
      ms++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa25 	bl	80052ac <USB_GetMode>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d01e      	beq.n	8004ea6 <USB_SetCurrentMode+0x84>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b31      	cmp	r3, #49	@ 0x31
 8004e6c:	d9f0      	bls.n	8004e50 <USB_SetCurrentMode+0x2e>
 8004e6e:	e01a      	b.n	8004ea6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d115      	bne.n	8004ea2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7fc f8fa 	bl	800107c <HAL_Delay>
      ms++;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa0c 	bl	80052ac <USB_GetMode>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <USB_SetCurrentMode+0x84>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b31      	cmp	r3, #49	@ 0x31
 8004e9e:	d9f0      	bls.n	8004e82 <USB_SetCurrentMode+0x60>
 8004ea0:	e001      	b.n	8004ea6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e005      	b.n	8004eb2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b32      	cmp	r3, #50	@ 0x32
 8004eaa:	d101      	bne.n	8004eb0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e009      	b.n	8004ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3340      	adds	r3, #64	@ 0x40
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3301      	adds	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0e      	cmp	r3, #14
 8004ef4:	d9f2      	bls.n	8004edc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11c      	bne.n	8004f36 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f0a:	f043 0302 	orr.w	r3, r3, #2
 8004f0e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e005      	b.n	8004f42 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f54:	4619      	mov	r1, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	680b      	ldr	r3, [r1, #0]
 8004f60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10c      	bne.n	8004f82 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f961 	bl	8005238 <USB_SetDevSpeed>
 8004f76:	e008      	b.n	8004f8a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f78:	2101      	movs	r1, #1
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f95c 	bl	8005238 <USB_SetDevSpeed>
 8004f80:	e003      	b.n	8004f8a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f82:	2103      	movs	r1, #3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f957 	bl	8005238 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f8a:	2110      	movs	r1, #16
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8f3 	bl	8005178 <USB_FlushTxFifo>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f91d 	bl	80051dc <USB_FlushRxFifo>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	e043      	b.n	800505e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fe8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fec:	d118      	bne.n	8005020 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005000:	461a      	mov	r2, r3
 8005002:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e013      	b.n	8005032 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005016:	461a      	mov	r2, r3
 8005018:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e008      	b.n	8005032 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	2300      	movs	r3, #0
 8005030:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503e:	461a      	mov	r2, r3
 8005040:	2300      	movs	r3, #0
 8005042:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005050:	461a      	mov	r2, r3
 8005052:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005056:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	3301      	adds	r3, #1
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3b7      	bcc.n	8004fd6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	e043      	b.n	80050f4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800507e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005082:	d118      	bne.n	80050b6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005096:	461a      	mov	r2, r3
 8005098:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e013      	b.n	80050c8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ac:	461a      	mov	r2, r3
 80050ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	e008      	b.n	80050c8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	461a      	mov	r2, r3
 80050c4:	2300      	movs	r3, #0
 80050c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d4:	461a      	mov	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e6:	461a      	mov	r2, r3
 80050e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	3301      	adds	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3b7      	bcc.n	800506c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800510a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800510e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800511c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800511e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699a      	ldr	r2, [r3, #24]
 8005134:	4b0e      	ldr	r3, [pc, #56]	@ (8005170 <USB_DevInit+0x2b4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800513c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f043 0208 	orr.w	r2, r3, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800514e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699a      	ldr	r2, [r3, #24]
 8005158:	4b06      	ldr	r3, [pc, #24]	@ (8005174 <USB_DevInit+0x2b8>)
 800515a:	4313      	orrs	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005160:	7dfb      	ldrb	r3, [r7, #23]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800516c:	b004      	add	sp, #16
 800516e:	4770      	bx	lr
 8005170:	803c3800 	.word	0x803c3800
 8005174:	40000004 	.word	0x40000004

08005178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <USB_FlushTxFifo+0x60>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e01a      	b.n	80051cc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	daf3      	bge.n	8005186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	f043 0220 	orr.w	r2, r3, #32
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	4a08      	ldr	r2, [pc, #32]	@ (80051d8 <USB_FlushTxFifo+0x60>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e006      	b.n	80051cc <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d0f1      	beq.n	80051ae <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	00030d40 	.word	0x00030d40

080051dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3301      	adds	r3, #1
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	4a11      	ldr	r2, [pc, #68]	@ (8005234 <USB_FlushRxFifo+0x58>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e017      	b.n	8005228 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	daf3      	bge.n	80051e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2210      	movs	r2, #16
 8005208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3301      	adds	r3, #1
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	4a08      	ldr	r2, [pc, #32]	@ (8005234 <USB_FlushRxFifo+0x58>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e006      	b.n	8005228 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d0f1      	beq.n	800520a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	00030d40 	.word	0x00030d40

08005238 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005258:	4313      	orrs	r3, r2
 800525a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005284:	f023 0303 	bic.w	r3, r3, #3
 8005288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005298:	f043 0302 	orr.w	r3, r3, #2
 800529c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	f003 0301 	and.w	r3, r3, #1
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <USB_CoreReset+0x60>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d901      	bls.n	80052e4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e01a      	b.n	800531a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	daf3      	bge.n	80052d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f043 0201 	orr.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	4a09      	ldr	r2, [pc, #36]	@ (8005328 <USB_CoreReset+0x60>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d901      	bls.n	800530c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e006      	b.n	800531a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d0f1      	beq.n	80052fc <USB_CoreReset+0x34>

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	00030d40 	.word	0x00030d40

0800532c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005332:	4ba0      	ldr	r3, [pc, #640]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005334:	22c0      	movs	r2, #192	@ 0xc0
 8005336:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005338:	4b9e      	ldr	r3, [pc, #632]	@ (80055b4 <MX_LWIP_Init+0x288>)
 800533a:	22a8      	movs	r2, #168	@ 0xa8
 800533c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800533e:	4b9d      	ldr	r3, [pc, #628]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005340:	2200      	movs	r2, #0
 8005342:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 8005344:	4b9b      	ldr	r3, [pc, #620]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005346:	221c      	movs	r2, #28
 8005348:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800534a:	4b9b      	ldr	r3, [pc, #620]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800534c:	22ff      	movs	r2, #255	@ 0xff
 800534e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005350:	4b99      	ldr	r3, [pc, #612]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005352:	22ff      	movs	r2, #255	@ 0xff
 8005354:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005356:	4b98      	ldr	r3, [pc, #608]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005358:	22ff      	movs	r2, #255	@ 0xff
 800535a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800535c:	4b96      	ldr	r3, [pc, #600]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800535e:	2200      	movs	r2, #0
 8005360:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005362:	4b96      	ldr	r3, [pc, #600]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005368:	4b94      	ldr	r3, [pc, #592]	@ (80055bc <MX_LWIP_Init+0x290>)
 800536a:	2200      	movs	r2, #0
 800536c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800536e:	4b93      	ldr	r3, [pc, #588]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005370:	2200      	movs	r2, #0
 8005372:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005374:	4b91      	ldr	r3, [pc, #580]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005376:	2200      	movs	r2, #0
 8005378:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800537a:	2100      	movs	r1, #0
 800537c:	2000      	movs	r0, #0
 800537e:	f006 fff9 	bl	800c374 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005382:	4b8c      	ldr	r3, [pc, #560]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	061a      	lsls	r2, r3, #24
 8005388:	4b8a      	ldr	r3, [pc, #552]	@ (80055b4 <MX_LWIP_Init+0x288>)
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	4b88      	ldr	r3, [pc, #544]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005392:	789b      	ldrb	r3, [r3, #2]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	4313      	orrs	r3, r2
 8005398:	4a86      	ldr	r2, [pc, #536]	@ (80055b4 <MX_LWIP_Init+0x288>)
 800539a:	78d2      	ldrb	r2, [r2, #3]
 800539c:	4313      	orrs	r3, r2
 800539e:	061a      	lsls	r2, r3, #24
 80053a0:	4b84      	ldr	r3, [pc, #528]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	0619      	lsls	r1, r3, #24
 80053a6:	4b83      	ldr	r3, [pc, #524]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	4319      	orrs	r1, r3
 80053ae:	4b81      	ldr	r3, [pc, #516]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	430b      	orrs	r3, r1
 80053b6:	497f      	ldr	r1, [pc, #508]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053b8:	78c9      	ldrb	r1, [r1, #3]
 80053ba:	430b      	orrs	r3, r1
 80053bc:	021b      	lsls	r3, r3, #8
 80053be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80053c2:	431a      	orrs	r2, r3
 80053c4:	4b7b      	ldr	r3, [pc, #492]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	0619      	lsls	r1, r3, #24
 80053ca:	4b7a      	ldr	r3, [pc, #488]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	041b      	lsls	r3, r3, #16
 80053d0:	4319      	orrs	r1, r3
 80053d2:	4b78      	ldr	r3, [pc, #480]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053d4:	789b      	ldrb	r3, [r3, #2]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	430b      	orrs	r3, r1
 80053da:	4976      	ldr	r1, [pc, #472]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053dc:	78c9      	ldrb	r1, [r1, #3]
 80053de:	430b      	orrs	r3, r1
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80053e6:	431a      	orrs	r2, r3
 80053e8:	4b72      	ldr	r3, [pc, #456]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	0619      	lsls	r1, r3, #24
 80053ee:	4b71      	ldr	r3, [pc, #452]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053f0:	785b      	ldrb	r3, [r3, #1]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	4319      	orrs	r1, r3
 80053f6:	4b6f      	ldr	r3, [pc, #444]	@ (80055b4 <MX_LWIP_Init+0x288>)
 80053f8:	789b      	ldrb	r3, [r3, #2]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	430b      	orrs	r3, r1
 80053fe:	496d      	ldr	r1, [pc, #436]	@ (80055b4 <MX_LWIP_Init+0x288>)
 8005400:	78c9      	ldrb	r1, [r1, #3]
 8005402:	430b      	orrs	r3, r1
 8005404:	0e1b      	lsrs	r3, r3, #24
 8005406:	4313      	orrs	r3, r2
 8005408:	4a6d      	ldr	r2, [pc, #436]	@ (80055c0 <MX_LWIP_Init+0x294>)
 800540a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800540c:	4b6a      	ldr	r3, [pc, #424]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	061a      	lsls	r2, r3, #24
 8005412:	4b69      	ldr	r3, [pc, #420]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	4b67      	ldr	r3, [pc, #412]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800541c:	789b      	ldrb	r3, [r3, #2]
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	4313      	orrs	r3, r2
 8005422:	4a65      	ldr	r2, [pc, #404]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005424:	78d2      	ldrb	r2, [r2, #3]
 8005426:	4313      	orrs	r3, r2
 8005428:	061a      	lsls	r2, r3, #24
 800542a:	4b63      	ldr	r3, [pc, #396]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	0619      	lsls	r1, r3, #24
 8005430:	4b61      	ldr	r3, [pc, #388]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005432:	785b      	ldrb	r3, [r3, #1]
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	4319      	orrs	r1, r3
 8005438:	4b5f      	ldr	r3, [pc, #380]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800543a:	789b      	ldrb	r3, [r3, #2]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	430b      	orrs	r3, r1
 8005440:	495d      	ldr	r1, [pc, #372]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005442:	78c9      	ldrb	r1, [r1, #3]
 8005444:	430b      	orrs	r3, r1
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800544c:	431a      	orrs	r2, r3
 800544e:	4b5a      	ldr	r3, [pc, #360]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	0619      	lsls	r1, r3, #24
 8005454:	4b58      	ldr	r3, [pc, #352]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	041b      	lsls	r3, r3, #16
 800545a:	4319      	orrs	r1, r3
 800545c:	4b56      	ldr	r3, [pc, #344]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800545e:	789b      	ldrb	r3, [r3, #2]
 8005460:	021b      	lsls	r3, r3, #8
 8005462:	430b      	orrs	r3, r1
 8005464:	4954      	ldr	r1, [pc, #336]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005466:	78c9      	ldrb	r1, [r1, #3]
 8005468:	430b      	orrs	r3, r1
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005470:	431a      	orrs	r2, r3
 8005472:	4b51      	ldr	r3, [pc, #324]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	0619      	lsls	r1, r3, #24
 8005478:	4b4f      	ldr	r3, [pc, #316]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	041b      	lsls	r3, r3, #16
 800547e:	4319      	orrs	r1, r3
 8005480:	4b4d      	ldr	r3, [pc, #308]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 8005482:	789b      	ldrb	r3, [r3, #2]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	430b      	orrs	r3, r1
 8005488:	494b      	ldr	r1, [pc, #300]	@ (80055b8 <MX_LWIP_Init+0x28c>)
 800548a:	78c9      	ldrb	r1, [r1, #3]
 800548c:	430b      	orrs	r3, r1
 800548e:	0e1b      	lsrs	r3, r3, #24
 8005490:	4313      	orrs	r3, r2
 8005492:	4a4c      	ldr	r2, [pc, #304]	@ (80055c4 <MX_LWIP_Init+0x298>)
 8005494:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005496:	4b49      	ldr	r3, [pc, #292]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	061a      	lsls	r2, r3, #24
 800549c:	4b47      	ldr	r3, [pc, #284]	@ (80055bc <MX_LWIP_Init+0x290>)
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	431a      	orrs	r2, r3
 80054a4:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054a6:	789b      	ldrb	r3, [r3, #2]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	4313      	orrs	r3, r2
 80054ac:	4a43      	ldr	r2, [pc, #268]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054ae:	78d2      	ldrb	r2, [r2, #3]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	061a      	lsls	r2, r3, #24
 80054b4:	4b41      	ldr	r3, [pc, #260]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	0619      	lsls	r1, r3, #24
 80054ba:	4b40      	ldr	r3, [pc, #256]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	041b      	lsls	r3, r3, #16
 80054c0:	4319      	orrs	r1, r3
 80054c2:	4b3e      	ldr	r3, [pc, #248]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054c4:	789b      	ldrb	r3, [r3, #2]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	430b      	orrs	r3, r1
 80054ca:	493c      	ldr	r1, [pc, #240]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054cc:	78c9      	ldrb	r1, [r1, #3]
 80054ce:	430b      	orrs	r3, r1
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80054d6:	431a      	orrs	r2, r3
 80054d8:	4b38      	ldr	r3, [pc, #224]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	0619      	lsls	r1, r3, #24
 80054de:	4b37      	ldr	r3, [pc, #220]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	4319      	orrs	r1, r3
 80054e6:	4b35      	ldr	r3, [pc, #212]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	430b      	orrs	r3, r1
 80054ee:	4933      	ldr	r1, [pc, #204]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054f0:	78c9      	ldrb	r1, [r1, #3]
 80054f2:	430b      	orrs	r3, r1
 80054f4:	0a1b      	lsrs	r3, r3, #8
 80054f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80054fa:	431a      	orrs	r2, r3
 80054fc:	4b2f      	ldr	r3, [pc, #188]	@ (80055bc <MX_LWIP_Init+0x290>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	0619      	lsls	r1, r3, #24
 8005502:	4b2e      	ldr	r3, [pc, #184]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	041b      	lsls	r3, r3, #16
 8005508:	4319      	orrs	r1, r3
 800550a:	4b2c      	ldr	r3, [pc, #176]	@ (80055bc <MX_LWIP_Init+0x290>)
 800550c:	789b      	ldrb	r3, [r3, #2]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	430b      	orrs	r3, r1
 8005512:	492a      	ldr	r1, [pc, #168]	@ (80055bc <MX_LWIP_Init+0x290>)
 8005514:	78c9      	ldrb	r1, [r1, #3]
 8005516:	430b      	orrs	r3, r1
 8005518:	0e1b      	lsrs	r3, r3, #24
 800551a:	4313      	orrs	r3, r2
 800551c:	4a2a      	ldr	r2, [pc, #168]	@ (80055c8 <MX_LWIP_Init+0x29c>)
 800551e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005520:	4b2a      	ldr	r3, [pc, #168]	@ (80055cc <MX_LWIP_Init+0x2a0>)
 8005522:	9302      	str	r3, [sp, #8]
 8005524:	4b2a      	ldr	r3, [pc, #168]	@ (80055d0 <MX_LWIP_Init+0x2a4>)
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	2300      	movs	r3, #0
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4b26      	ldr	r3, [pc, #152]	@ (80055c8 <MX_LWIP_Init+0x29c>)
 800552e:	4a25      	ldr	r2, [pc, #148]	@ (80055c4 <MX_LWIP_Init+0x298>)
 8005530:	4923      	ldr	r1, [pc, #140]	@ (80055c0 <MX_LWIP_Init+0x294>)
 8005532:	4828      	ldr	r0, [pc, #160]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 8005534:	f007 fca2 	bl	800ce7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005538:	4826      	ldr	r0, [pc, #152]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 800553a:	f007 fe51 	bl	800d1e0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800553e:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 8005540:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005550:	4820      	ldr	r0, [pc, #128]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 8005552:	f007 fe55 	bl	800d200 <netif_set_up>
 8005556:	e002      	b.n	800555e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005558:	481e      	ldr	r0, [pc, #120]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 800555a:	f007 febd 	bl	800d2d8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800555e:	491e      	ldr	r1, [pc, #120]	@ (80055d8 <MX_LWIP_Init+0x2ac>)
 8005560:	481c      	ldr	r0, [pc, #112]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 8005562:	f007 ff4f 	bl	800d404 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8005566:	2200      	movs	r2, #0
 8005568:	2101      	movs	r1, #1
 800556a:	2001      	movs	r0, #1
 800556c:	f000 ff12 	bl	8006394 <osSemaphoreNew>
 8005570:	4603      	mov	r3, r0
 8005572:	4a1a      	ldr	r2, [pc, #104]	@ (80055dc <MX_LWIP_Init+0x2b0>)
 8005574:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8005576:	4b1a      	ldr	r3, [pc, #104]	@ (80055e0 <MX_LWIP_Init+0x2b4>)
 8005578:	4a16      	ldr	r2, [pc, #88]	@ (80055d4 <MX_LWIP_Init+0x2a8>)
 800557a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <MX_LWIP_Init+0x2b0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a17      	ldr	r2, [pc, #92]	@ (80055e0 <MX_LWIP_Init+0x2b4>)
 8005582:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005584:	2224      	movs	r2, #36	@ 0x24
 8005586:	2100      	movs	r1, #0
 8005588:	4816      	ldr	r0, [pc, #88]	@ (80055e4 <MX_LWIP_Init+0x2b8>)
 800558a:	f012 f953 	bl	8017834 <memset>
  attributes.name = "LinkThr";
 800558e:	4b15      	ldr	r3, [pc, #84]	@ (80055e4 <MX_LWIP_Init+0x2b8>)
 8005590:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <MX_LWIP_Init+0x2bc>)
 8005592:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005594:	4b13      	ldr	r3, [pc, #76]	@ (80055e4 <MX_LWIP_Init+0x2b8>)
 8005596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800559a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800559c:	4b11      	ldr	r3, [pc, #68]	@ (80055e4 <MX_LWIP_Init+0x2b8>)
 800559e:	2210      	movs	r2, #16
 80055a0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80055a2:	4a10      	ldr	r2, [pc, #64]	@ (80055e4 <MX_LWIP_Init+0x2b8>)
 80055a4:	490e      	ldr	r1, [pc, #56]	@ (80055e0 <MX_LWIP_Init+0x2b4>)
 80055a6:	4811      	ldr	r0, [pc, #68]	@ (80055ec <MX_LWIP_Init+0x2c0>)
 80055a8:	f000 fcd8 	bl	8005f5c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000bcc 	.word	0x20000bcc
 80055b8:	20000bd0 	.word	0x20000bd0
 80055bc:	20000bd4 	.word	0x20000bd4
 80055c0:	20000bc0 	.word	0x20000bc0
 80055c4:	20000bc4 	.word	0x20000bc4
 80055c8:	20000bc8 	.word	0x20000bc8
 80055cc:	0800c285 	.word	0x0800c285
 80055d0:	08005c39 	.word	0x08005c39
 80055d4:	20000b8c 	.word	0x20000b8c
 80055d8:	08005d1d 	.word	0x08005d1d
 80055dc:	20000b80 	.word	0x20000b80
 80055e0:	20000b84 	.word	0x20000b84
 80055e4:	20000bd8 	.word	0x20000bd8
 80055e8:	080186b4 	.word	0x080186b4
 80055ec:	08005ca5 	.word	0x08005ca5

080055f0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a52      	ldr	r2, [pc, #328]	@ (8005758 <HAL_ETH_MspInit+0x168>)
 800560e:	4293      	cmp	r3, r2
 8005610:	f040 809e 	bne.w	8005750 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005614:	4b51      	ldr	r3, [pc, #324]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	4a50      	ldr	r2, [pc, #320]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800561a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800561e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005620:	4b4e      	ldr	r3, [pc, #312]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	4b4b      	ldr	r3, [pc, #300]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800562e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005630:	4a4a      	ldr	r2, [pc, #296]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005636:	6313      	str	r3, [r2, #48]	@ 0x30
 8005638:	4b48      	ldr	r3, [pc, #288]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4b45      	ldr	r3, [pc, #276]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005648:	4a44      	ldr	r2, [pc, #272]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800564a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800564e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005650:	4b42      	ldr	r3, [pc, #264]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800565c:	4b3f      	ldr	r3, [pc, #252]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800565e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005660:	4a3e      	ldr	r2, [pc, #248]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	6313      	str	r3, [r2, #48]	@ 0x30
 8005668:	4b3c      	ldr	r3, [pc, #240]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005674:	4b39      	ldr	r3, [pc, #228]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005678:	4a38      	ldr	r2, [pc, #224]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005680:	4b36      	ldr	r3, [pc, #216]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800568c:	4b33      	ldr	r3, [pc, #204]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005690:	4a32      	ldr	r2, [pc, #200]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 8005692:	f043 0302 	orr.w	r3, r3, #2
 8005696:	6313      	str	r3, [r2, #48]	@ 0x30
 8005698:	4b30      	ldr	r3, [pc, #192]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80056a4:	4b2d      	ldr	r3, [pc, #180]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a8:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 80056aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80056b0:	4b2a      	ldr	r3, [pc, #168]	@ (800575c <HAL_ETH_MspInit+0x16c>)
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80056bc:	2332      	movs	r3, #50	@ 0x32
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c0:	2302      	movs	r3, #2
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c8:	2303      	movs	r3, #3
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056cc:	230b      	movs	r3, #11
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d4:	4619      	mov	r1, r3
 80056d6:	4822      	ldr	r0, [pc, #136]	@ (8005760 <HAL_ETH_MspInit+0x170>)
 80056d8:	f7fc ff42 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80056dc:	2386      	movs	r3, #134	@ 0x86
 80056de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e0:	2302      	movs	r3, #2
 80056e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e8:	2303      	movs	r3, #3
 80056ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056ec:	230b      	movs	r3, #11
 80056ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056f4:	4619      	mov	r1, r3
 80056f6:	481b      	ldr	r0, [pc, #108]	@ (8005764 <HAL_ETH_MspInit+0x174>)
 80056f8:	f7fc ff32 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80056fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	2300      	movs	r3, #0
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570a:	2303      	movs	r3, #3
 800570c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800570e:	230b      	movs	r3, #11
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005716:	4619      	mov	r1, r3
 8005718:	4813      	ldr	r0, [pc, #76]	@ (8005768 <HAL_ETH_MspInit+0x178>)
 800571a:	f7fc ff21 	bl	8002560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800571e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005724:	2302      	movs	r3, #2
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572c:	2303      	movs	r3, #3
 800572e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005730:	230b      	movs	r3, #11
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005738:	4619      	mov	r1, r3
 800573a:	480c      	ldr	r0, [pc, #48]	@ (800576c <HAL_ETH_MspInit+0x17c>)
 800573c:	f7fc ff10 	bl	8002560 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005740:	2200      	movs	r2, #0
 8005742:	2105      	movs	r1, #5
 8005744:	203d      	movs	r0, #61	@ 0x3d
 8005746:	f7fb fd75 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800574a:	203d      	movs	r0, #61	@ 0x3d
 800574c:	f7fb fd8e 	bl	800126c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005750:	bf00      	nop
 8005752:	3738      	adds	r7, #56	@ 0x38
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40028000 	.word	0x40028000
 800575c:	40023800 	.word	0x40023800
 8005760:	40020800 	.word	0x40020800
 8005764:	40020000 	.word	0x40020000
 8005768:	40020400 	.word	0x40020400
 800576c:	40021800 	.word	0x40021800

08005770 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_ETH_RxCpltCallback+0x1c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f000 ff0b 	bl	8006598 <osSemaphoreRelease>
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20003c9c 	.word	0x20003c9c

08005790 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b090      	sub	sp, #64	@ 0x40
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800579c:	4b5d      	ldr	r3, [pc, #372]	@ (8005914 <low_level_init+0x184>)
 800579e:	4a5e      	ldr	r2, [pc, #376]	@ (8005918 <low_level_init+0x188>)
 80057a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80057a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005914 <low_level_init+0x184>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80057a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005914 <low_level_init+0x184>)
 80057aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80057ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80057b0:	4b58      	ldr	r3, [pc, #352]	@ (8005914 <low_level_init+0x184>)
 80057b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80057b8:	4b56      	ldr	r3, [pc, #344]	@ (8005914 <low_level_init+0x184>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80057be:	2300      	movs	r3, #0
 80057c0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 80057c2:	2322      	movs	r3, #34	@ 0x22
 80057c4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 80057c6:	23c0      	movs	r3, #192	@ 0xc0
 80057c8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 80057ca:	23a8      	movs	r3, #168	@ 0xa8
 80057cc:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80057ce:	2300      	movs	r3, #0
 80057d0:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 80057d2:	231c      	movs	r3, #28
 80057d4:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80057d6:	4a4f      	ldr	r2, [pc, #316]	@ (8005914 <low_level_init+0x184>)
 80057d8:	f107 030c 	add.w	r3, r7, #12
 80057dc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80057de:	4b4d      	ldr	r3, [pc, #308]	@ (8005914 <low_level_init+0x184>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80057e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005914 <low_level_init+0x184>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80057ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005914 <low_level_init+0x184>)
 80057ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80057f0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80057f2:	4848      	ldr	r0, [pc, #288]	@ (8005914 <low_level_init+0x184>)
 80057f4:	f7fb fd48 	bl	8001288 <HAL_ETH_Init>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 80057fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	b2da      	uxtb	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005818:	2304      	movs	r3, #4
 800581a:	4a40      	ldr	r2, [pc, #256]	@ (800591c <low_level_init+0x18c>)
 800581c:	4940      	ldr	r1, [pc, #256]	@ (8005920 <low_level_init+0x190>)
 800581e:	483d      	ldr	r0, [pc, #244]	@ (8005914 <low_level_init+0x184>)
 8005820:	f7fb feca 	bl	80015b8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005824:	2304      	movs	r3, #4
 8005826:	4a3f      	ldr	r2, [pc, #252]	@ (8005924 <low_level_init+0x194>)
 8005828:	493f      	ldr	r1, [pc, #252]	@ (8005928 <low_level_init+0x198>)
 800582a:	483a      	ldr	r0, [pc, #232]	@ (8005914 <low_level_init+0x184>)
 800582c:	f7fb ff2c 	bl	8001688 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2206      	movs	r2, #6
 8005834:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005838:	4b36      	ldr	r3, [pc, #216]	@ (8005914 <low_level_init+0x184>)
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005844:	4b33      	ldr	r3, [pc, #204]	@ (8005914 <low_level_init+0x184>)
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	785a      	ldrb	r2, [r3, #1]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005850:	4b30      	ldr	r3, [pc, #192]	@ (8005914 <low_level_init+0x184>)
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	789a      	ldrb	r2, [r3, #2]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800585c:	4b2d      	ldr	r3, [pc, #180]	@ (8005914 <low_level_init+0x184>)
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	78da      	ldrb	r2, [r3, #3]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005868:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <low_level_init+0x184>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	791a      	ldrb	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005874:	4b27      	ldr	r3, [pc, #156]	@ (8005914 <low_level_init+0x184>)
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	795a      	ldrb	r2, [r3, #5]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005886:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800588e:	f043 030a 	orr.w	r3, r3, #10
 8005892:	b2da      	uxtb	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800589a:	2200      	movs	r2, #0
 800589c:	2101      	movs	r1, #1
 800589e:	2001      	movs	r0, #1
 80058a0:	f000 fd78 	bl	8006394 <osSemaphoreNew>
 80058a4:	4603      	mov	r3, r0
 80058a6:	4a21      	ldr	r2, [pc, #132]	@ (800592c <low_level_init+0x19c>)
 80058a8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80058aa:	f107 0314 	add.w	r3, r7, #20
 80058ae:	2224      	movs	r2, #36	@ 0x24
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f011 ffbe 	bl	8017834 <memset>
  attributes.name = "EthIf";
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <low_level_init+0x1a0>)
 80058ba:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80058bc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80058c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 80058c2:	2330      	movs	r3, #48	@ 0x30
 80058c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80058c6:	f107 0314 	add.w	r3, r7, #20
 80058ca:	461a      	mov	r2, r3
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4819      	ldr	r0, [pc, #100]	@ (8005934 <low_level_init+0x1a4>)
 80058d0:	f000 fb44 	bl	8005f5c <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80058d4:	480f      	ldr	r0, [pc, #60]	@ (8005914 <low_level_init+0x184>)
 80058d6:	f7fc f9fb 	bl	8001cd0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80058da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80058de:	461a      	mov	r2, r3
 80058e0:	211d      	movs	r1, #29
 80058e2:	480c      	ldr	r0, [pc, #48]	@ (8005914 <low_level_init+0x184>)
 80058e4:	f7fc f926 	bl	8001b34 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	f043 030b 	orr.w	r3, r3, #11
 80058ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	461a      	mov	r2, r3
 80058f4:	211d      	movs	r1, #29
 80058f6:	4807      	ldr	r0, [pc, #28]	@ (8005914 <low_level_init+0x184>)
 80058f8:	f7fc f984 	bl	8001c04 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80058fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005900:	461a      	mov	r2, r3
 8005902:	211d      	movs	r1, #29
 8005904:	4803      	ldr	r0, [pc, #12]	@ (8005914 <low_level_init+0x184>)
 8005906:	f7fc f915 	bl	8001b34 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800590a:	bf00      	nop
 800590c:	3740      	adds	r7, #64	@ 0x40
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20003ca0 	.word	0x20003ca0
 8005918:	40028000 	.word	0x40028000
 800591c:	200024cc 	.word	0x200024cc
 8005920:	20000c7c 	.word	0x20000c7c
 8005924:	20000cfc 	.word	0x20000cfc
 8005928:	20000bfc 	.word	0x20000bfc
 800592c:	20003c9c 	.word	0x20003c9c
 8005930:	080186bc 	.word	0x080186bc
 8005934:	08005bd9 	.word	0x08005bd9

08005938 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	@ 0x28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005942:	4b4b      	ldr	r3, [pc, #300]	@ (8005a70 <low_level_output+0x138>)
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800595a:	4b45      	ldr	r3, [pc, #276]	@ (8005a70 <low_level_output+0x138>)
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	623b      	str	r3, [r7, #32]
 8005968:	e05a      	b.n	8005a20 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	da03      	bge.n	800597a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005972:	23f8      	movs	r3, #248	@ 0xf8
 8005974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8005978:	e05c      	b.n	8005a34 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	895b      	ldrh	r3, [r3, #10]
 800597e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005984:	e02f      	b.n	80059e6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	18d0      	adds	r0, r2, r3
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	18d1      	adds	r1, r2, r3
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	461a      	mov	r2, r3
 800599e:	f011 fff0 	bl	8017982 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da03      	bge.n	80059b8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80059b0:	23f8      	movs	r3, #248	@ 0xf8
 80059b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 80059b6:	e03d      	b.n	8005a34 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80059c8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80059d4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80059e0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d8c8      	bhi.n	8005986 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	18d0      	adds	r0, r2, r3
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4619      	mov	r1, r3
 8005a06:	f011 ffbc 	bl	8017982 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1a1      	bne.n	800596a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	4811      	ldr	r0, [pc, #68]	@ (8005a70 <low_level_output+0x138>)
 8005a2a:	f7fb fe99 	bl	8001760 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005a34:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <low_level_output+0x138>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005a46:	4b0a      	ldr	r3, [pc, #40]	@ (8005a70 <low_level_output+0x138>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2320      	movs	r3, #32
 8005a52:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <low_level_output+0x138>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	2300      	movs	r3, #0
 8005a60:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8005a62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3728      	adds	r7, #40	@ 0x28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20003ca0 	.word	0x20003ca0

08005a74 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	@ 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005a98:	484e      	ldr	r0, [pc, #312]	@ (8005bd4 <low_level_input+0x160>)
 8005a9a:	f7fb ff4b 	bl	8001934 <HAL_ETH_GetReceivedFrame_IT>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <low_level_input+0x34>

    return NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e091      	b.n	8005bcc <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8005bd4 <low_level_input+0x160>)
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aac:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005aae:	4b49      	ldr	r3, [pc, #292]	@ (8005bd4 <low_level_input+0x160>)
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005aba:	89fb      	ldrh	r3, [r7, #14]
 8005abc:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f007 fd68 	bl	800d598 <pbuf_alloc>
 8005ac8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d04b      	beq.n	8005b68 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005ad0:	4b40      	ldr	r3, [pc, #256]	@ (8005bd4 <low_level_input+0x160>)
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ade:	e040      	b.n	8005b62 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	895b      	ldrh	r3, [r3, #10]
 8005ae4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005aea:	e021      	b.n	8005b30 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	18d0      	adds	r0, r2, r3
 8005af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	18d1      	adds	r1, r2, r3
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	461a      	mov	r2, r3
 8005b04:	f011 ff3d 	bl	8017982 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8005b1e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8005b2a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d8d6      	bhi.n	8005aec <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	18d0      	adds	r0, r2, r3
 8005b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f011 ff17 	bl	8017982 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1bb      	bne.n	8005ae0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <low_level_input+0x160>)
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	e00b      	b.n	8005b8c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <low_level_input+0x160>)
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d3ee      	bcc.n	8005b74 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005b96:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <low_level_input+0x160>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd4 <low_level_input+0x160>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00d      	beq.n	8005bca <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005bae:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <low_level_input+0x160>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <low_level_input+0x160>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6093      	str	r3, [r2, #8]
  }
  return p;
 8005bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3730      	adds	r7, #48	@ 0x30
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20003ca0 	.word	0x20003ca0

08005bd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005be4:	4b12      	ldr	r3, [pc, #72]	@ (8005c30 <ethernetif_input+0x58>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fc6d 	bl	80064cc <osSemaphoreAcquire>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f5      	bne.n	8005be4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005bf8:	480e      	ldr	r0, [pc, #56]	@ (8005c34 <ethernetif_input+0x5c>)
 8005bfa:	f011 fb69 	bl	80172d0 <sys_mutex_lock>
        p = low_level_input( netif );
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff38 	bl	8005a74 <low_level_input>
 8005c04:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	68f9      	ldr	r1, [r7, #12]
 8005c12:	68b8      	ldr	r0, [r7, #8]
 8005c14:	4798      	blx	r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f007 ff9f 	bl	800db60 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005c22:	4804      	ldr	r0, [pc, #16]	@ (8005c34 <ethernetif_input+0x5c>)
 8005c24:	f011 fb63 	bl	80172ee <sys_mutex_unlock>
      } while(p!=NULL);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e4      	bne.n	8005bf8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c2e:	e7d9      	b.n	8005be4 <ethernetif_input+0xc>
 8005c30:	20003c9c 	.word	0x20003c9c
 8005c34:	2000863c 	.word	0x2000863c

08005c38 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <ethernetif_init+0x1c>
 8005c46:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <ethernetif_init+0x48>)
 8005c48:	f240 223b 	movw	r2, #571	@ 0x23b
 8005c4c:	490d      	ldr	r1, [pc, #52]	@ (8005c84 <ethernetif_init+0x4c>)
 8005c4e:	480e      	ldr	r0, [pc, #56]	@ (8005c88 <ethernetif_init+0x50>)
 8005c50:	f011 fc98 	bl	8017584 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2273      	movs	r2, #115	@ 0x73
 8005c58:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2274      	movs	r2, #116	@ 0x74
 8005c60:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a09      	ldr	r2, [pc, #36]	@ (8005c8c <ethernetif_init+0x54>)
 8005c68:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a08      	ldr	r2, [pc, #32]	@ (8005c90 <ethernetif_init+0x58>)
 8005c6e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff fd8d 	bl	8005790 <low_level_init>

  return ERR_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	080186c4 	.word	0x080186c4
 8005c84:	080186e0 	.word	0x080186e0
 8005c88:	080186f0 	.word	0x080186f0
 8005c8c:	08015325 	.word	0x08015325
 8005c90:	08005939 	.word	0x08005939

08005c94 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005c98:	f7fb f9e4 	bl	8001064 <HAL_GetTick>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	bd80      	pop	{r7, pc}
	...

08005ca4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005cb4:	f107 0308 	add.w	r3, r7, #8
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4816      	ldr	r0, [pc, #88]	@ (8005d18 <ethernetif_set_link+0x74>)
 8005cbe:	f7fb ff39 	bl	8001b34 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d108      	bne.n	8005cec <ethernetif_set_link+0x48>
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f007 fb29 	bl	800d33c <netif_set_link_up>
 8005cea:	e011      	b.n	8005d10 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <ethernetif_set_link+0x6c>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d104      	bne.n	8005d10 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f007 fb4a 	bl	800d3a4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005d10:	20c8      	movs	r0, #200	@ 0xc8
 8005d12:	f000 f9c9 	bl	80060a8 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d16:	e7cd      	b.n	8005cb4 <ethernetif_set_link+0x10>
 8005d18:	20003ca0 	.word	0x20003ca0

08005d1c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d05d      	beq.n	8005dfa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005d3e:	4b34      	ldr	r3, [pc, #208]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d03f      	beq.n	8005dc6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005d46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	4830      	ldr	r0, [pc, #192]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005d4e:	f7fb ff59 	bl	8001c04 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005d52:	f7fb f987 	bl	8001064 <HAL_GetTick>
 8005d56:	4603      	mov	r3, r0
 8005d58:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2101      	movs	r1, #1
 8005d62:	482b      	ldr	r0, [pc, #172]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005d64:	f7fb fee6 	bl	8001b34 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005d68:	f7fb f97c 	bl	8001064 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d76:	d828      	bhi.n	8005dca <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0eb      	beq.n	8005d5a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	461a      	mov	r2, r3
 8005d88:	2110      	movs	r1, #16
 8005d8a:	4821      	ldr	r0, [pc, #132]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005d8c:	f7fb fed2 	bl	8001b34 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0304 	and.w	r3, r3, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e002      	b.n	8005daa <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005da4:	4b1a      	ldr	r3, [pc, #104]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005db4:	4b16      	ldr	r3, [pc, #88]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
 8005dba:	e016      	b.n	8005dea <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005dbc:	4b14      	ldr	r3, [pc, #80]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	e011      	b.n	8005dea <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <ethernetif_update_config+0xb0>
          goto error;
 8005dca:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005dcc:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	08db      	lsrs	r3, r3, #3
 8005dd2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	085b      	lsrs	r3, r3, #1
 8005dda:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	2100      	movs	r1, #0
 8005de4:	480a      	ldr	r0, [pc, #40]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005de6:	f7fb ff0d 	bl	8001c04 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005dea:	2100      	movs	r1, #0
 8005dec:	4808      	ldr	r0, [pc, #32]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005dee:	f7fb ffcd 	bl	8001d8c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005df2:	4807      	ldr	r0, [pc, #28]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005df4:	f7fb ff6c 	bl	8001cd0 <HAL_ETH_Start>
 8005df8:	e002      	b.n	8005e00 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005dfa:	4805      	ldr	r0, [pc, #20]	@ (8005e10 <ethernetif_update_config+0xf4>)
 8005dfc:	f7fb ff97 	bl	8001d2e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f807 	bl	8005e14 <ethernetif_notify_conn_changed>
}
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20003ca0 	.word	0x20003ca0

08005e14 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e3e:	f3ef 8305 	mrs	r3, IPSR
 8005e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10f      	bne.n	8005e6a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e4e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e56:	f3ef 8311 	mrs	r3, BASEPRI
 8005e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d007      	beq.n	8005e72 <osKernelInitialize+0x3a>
 8005e62:	4b0e      	ldr	r3, [pc, #56]	@ (8005e9c <osKernelInitialize+0x64>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d103      	bne.n	8005e72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e6a:	f06f 0305 	mvn.w	r3, #5
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e00c      	b.n	8005e8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <osKernelInitialize+0x64>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e7a:	4b08      	ldr	r3, [pc, #32]	@ (8005e9c <osKernelInitialize+0x64>)
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e002      	b.n	8005e8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20003ce8 	.word	0x20003ce8

08005ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea6:	f3ef 8305 	mrs	r3, IPSR
 8005eaa:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10f      	bne.n	8005ed2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb6:	607b      	str	r3, [r7, #4]
  return(result);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d105      	bne.n	8005eca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <osKernelStart+0x3a>
 8005eca:	4b0f      	ldr	r3, [pc, #60]	@ (8005f08 <osKernelStart+0x68>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d103      	bne.n	8005eda <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ed2:	f06f 0305 	mvn.w	r3, #5
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e010      	b.n	8005efc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eda:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <osKernelStart+0x68>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d109      	bne.n	8005ef6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ee2:	f7ff ffa1 	bl	8005e28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ee6:	4b08      	ldr	r3, [pc, #32]	@ (8005f08 <osKernelStart+0x68>)
 8005ee8:	2202      	movs	r2, #2
 8005eea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005eec:	f002 f9f6 	bl	80082dc <vTaskStartScheduler>
      stat = osOK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	e002      	b.n	8005efc <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8005efa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20003ce8 	.word	0x20003ce8

08005f0c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f12:	f3ef 8305 	mrs	r3, IPSR
 8005f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f18:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f22:	607b      	str	r3, [r7, #4]
  return(result);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d105      	bne.n	8005f36 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <osKernelGetTickCount+0x3a>
 8005f36:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <osKernelGetTickCount+0x4c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d103      	bne.n	8005f46 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005f3e:	f002 faf7 	bl	8008530 <xTaskGetTickCountFromISR>
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	e002      	b.n	8005f4c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005f46:	f002 fae3 	bl	8008510 <xTaskGetTickCount>
 8005f4a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20003ce8 	.word	0x20003ce8

08005f5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b090      	sub	sp, #64	@ 0x40
 8005f60:	af04      	add	r7, sp, #16
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f6c:	f3ef 8305 	mrs	r3, IPSR
 8005f70:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f72:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 808f 	bne.w	8006098 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f86:	f3ef 8311 	mrs	r3, BASEPRI
 8005f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <osThreadNew+0x3e>
 8005f92:	4b44      	ldr	r3, [pc, #272]	@ (80060a4 <osThreadNew+0x148>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d07e      	beq.n	8006098 <osThreadNew+0x13c>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d07b      	beq.n	8006098 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005fa0:	2380      	movs	r3, #128	@ 0x80
 8005fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005fa4:	2318      	movs	r3, #24
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d045      	beq.n	8006044 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <osThreadNew+0x6a>
        name = attr->name;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d008      	beq.n	8005fec <osThreadNew+0x90>
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	2b38      	cmp	r3, #56	@ 0x38
 8005fde:	d805      	bhi.n	8005fec <osThreadNew+0x90>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <osThreadNew+0x94>
        return (NULL);
 8005fec:	2300      	movs	r3, #0
 8005fee:	e054      	b.n	800609a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	089b      	lsrs	r3, r3, #2
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00e      	beq.n	8006026 <osThreadNew+0xca>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	2b5b      	cmp	r3, #91	@ 0x5b
 800600e:	d90a      	bls.n	8006026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <osThreadNew+0xca>
        mem = 1;
 8006020:	2301      	movs	r3, #1
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	e010      	b.n	8006048 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <osThreadNew+0xec>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d108      	bne.n	8006048 <osThreadNew+0xec>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <osThreadNew+0xec>
          mem = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	e001      	b.n	8006048 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d110      	bne.n	8006070 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006056:	9202      	str	r2, [sp, #8]
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 ff53 	bl	8007f10 <xTaskCreateStatic>
 800606a:	4603      	mov	r3, r0
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	e013      	b.n	8006098 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006078:	b29a      	uxth	r2, r3
 800607a:	f107 0310 	add.w	r3, r7, #16
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 ffa7 	bl	8007fdc <xTaskCreate>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d001      	beq.n	8006098 <osThreadNew+0x13c>
          hTask = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006098:	693b      	ldr	r3, [r7, #16]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3730      	adds	r7, #48	@ 0x30
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20003ce8 	.word	0x20003ce8

080060a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060b0:	f3ef 8305 	mrs	r3, IPSR
 80060b4:	613b      	str	r3, [r7, #16]
  return(result);
 80060b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10f      	bne.n	80060dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060bc:	f3ef 8310 	mrs	r3, PRIMASK
 80060c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d105      	bne.n	80060d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060c8:	f3ef 8311 	mrs	r3, BASEPRI
 80060cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <osDelay+0x3c>
 80060d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006100 <osDelay+0x58>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d103      	bne.n	80060e4 <osDelay+0x3c>
    stat = osErrorISR;
 80060dc:	f06f 0305 	mvn.w	r3, #5
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e007      	b.n	80060f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f002 f8bc 	bl	800826c <vTaskDelay>
    }
  }

  return (stat);
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20003ce8 	.word	0x20003ce8

08006104 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	@ 0x28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006110:	f3ef 8305 	mrs	r3, IPSR
 8006114:	613b      	str	r3, [r7, #16]
  return(result);
 8006116:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8085 	bne.w	8006228 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611e:	f3ef 8310 	mrs	r3, PRIMASK
 8006122:	60fb      	str	r3, [r7, #12]
  return(result);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d105      	bne.n	8006136 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800612a:	f3ef 8311 	mrs	r3, BASEPRI
 800612e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <osMutexNew+0x3a>
 8006136:	4b3f      	ldr	r3, [pc, #252]	@ (8006234 <osMutexNew+0x130>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d074      	beq.n	8006228 <osMutexNew+0x124>
    if (attr != NULL) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	623b      	str	r3, [r7, #32]
 800614a:	e001      	b.n	8006150 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <osMutexNew+0x5c>
      rmtx = 1U;
 800615a:	2301      	movs	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e001      	b.n	8006164 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d15c      	bne.n	8006228 <osMutexNew+0x124>
      mem = -1;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295
 8006172:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d015      	beq.n	80061a6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d006      	beq.n	8006190 <osMutexNew+0x8c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b4f      	cmp	r3, #79	@ 0x4f
 8006188:	d902      	bls.n	8006190 <osMutexNew+0x8c>
          mem = 1;
 800618a:	2301      	movs	r3, #1
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e00c      	b.n	80061aa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <osMutexNew+0xa6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <osMutexNew+0xa6>
            mem = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
 80061a4:	e001      	b.n	80061aa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d112      	bne.n	80061d6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	4619      	mov	r1, r3
 80061bc:	2004      	movs	r0, #4
 80061be:	f000 fec0 	bl	8006f42 <xQueueCreateMutexStatic>
 80061c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80061c4:	e016      	b.n	80061f4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	4619      	mov	r1, r3
 80061cc:	2001      	movs	r0, #1
 80061ce:	f000 feb8 	bl	8006f42 <xQueueCreateMutexStatic>
 80061d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80061d4:	e00e      	b.n	80061f4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80061e2:	2004      	movs	r0, #4
 80061e4:	f000 fe95 	bl	8006f12 <xQueueCreateMutex>
 80061e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80061ea:	e003      	b.n	80061f4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80061ec:	2001      	movs	r0, #1
 80061ee:	f000 fe90 	bl	8006f12 <xQueueCreateMutex>
 80061f2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <osMutexNew+0x110>
        if (attr != NULL) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <osMutexNew+0x104>
          name = attr->name;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e001      	b.n	800620c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800620c:	6979      	ldr	r1, [r7, #20]
 800620e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006210:	f001 fdf6 	bl	8007e00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <osMutexNew+0x124>
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800622a:	4618      	mov	r0, r3
 800622c:	3728      	adds	r7, #40	@ 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20003ce8 	.word	0x20003ce8

08006238 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006256:	f3ef 8305 	mrs	r3, IPSR
 800625a:	613b      	str	r3, [r7, #16]
  return(result);
 800625c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10f      	bne.n	8006282 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006262:	f3ef 8310 	mrs	r3, PRIMASK
 8006266:	60fb      	str	r3, [r7, #12]
  return(result);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800626e:	f3ef 8311 	mrs	r3, BASEPRI
 8006272:	60bb      	str	r3, [r7, #8]
  return(result);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <osMutexAcquire+0x52>
 800627a:	4b1d      	ldr	r3, [pc, #116]	@ (80062f0 <osMutexAcquire+0xb8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d103      	bne.n	800628a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006282:	f06f 0305 	mvn.w	r3, #5
 8006286:	61fb      	str	r3, [r7, #28]
 8006288:	e02c      	b.n	80062e4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006290:	f06f 0303 	mvn.w	r3, #3
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	e025      	b.n	80062e4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d011      	beq.n	80062c2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	69b8      	ldr	r0, [r7, #24]
 80062a2:	f000 fea0 	bl	8006fe6 <xQueueTakeMutexRecursive>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d01b      	beq.n	80062e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80062b2:	f06f 0301 	mvn.w	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	e014      	b.n	80062e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80062ba:	f06f 0302 	mvn.w	r3, #2
 80062be:	61fb      	str	r3, [r7, #28]
 80062c0:	e010      	b.n	80062e4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	69b8      	ldr	r0, [r7, #24]
 80062c6:	f001 fa6b 	bl	80077a0 <xQueueSemaphoreTake>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d009      	beq.n	80062e4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80062d6:	f06f 0301 	mvn.w	r3, #1
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e002      	b.n	80062e4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80062de:	f06f 0302 	mvn.w	r3, #2
 80062e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80062e4:	69fb      	ldr	r3, [r7, #28]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20003ce8 	.word	0x20003ce8

080062f4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800630c:	2300      	movs	r3, #0
 800630e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006310:	f3ef 8305 	mrs	r3, IPSR
 8006314:	613b      	str	r3, [r7, #16]
  return(result);
 8006316:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10f      	bne.n	800633c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800631c:	f3ef 8310 	mrs	r3, PRIMASK
 8006320:	60fb      	str	r3, [r7, #12]
  return(result);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006328:	f3ef 8311 	mrs	r3, BASEPRI
 800632c:	60bb      	str	r3, [r7, #8]
  return(result);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d007      	beq.n	8006344 <osMutexRelease+0x50>
 8006334:	4b16      	ldr	r3, [pc, #88]	@ (8006390 <osMutexRelease+0x9c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d103      	bne.n	8006344 <osMutexRelease+0x50>
    stat = osErrorISR;
 800633c:	f06f 0305 	mvn.w	r3, #5
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	e01f      	b.n	8006384 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d103      	bne.n	8006352 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800634a:	f06f 0303 	mvn.w	r3, #3
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e018      	b.n	8006384 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006358:	69b8      	ldr	r0, [r7, #24]
 800635a:	f000 fe0d 	bl	8006f78 <xQueueGiveMutexRecursive>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d00f      	beq.n	8006384 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006364:	f06f 0302 	mvn.w	r3, #2
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	e00b      	b.n	8006384 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800636c:	2300      	movs	r3, #0
 800636e:	2200      	movs	r2, #0
 8006370:	2100      	movs	r1, #0
 8006372:	69b8      	ldr	r0, [r7, #24]
 8006374:	f000 fee6 	bl	8007144 <xQueueGenericSend>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d002      	beq.n	8006384 <osMutexRelease+0x90>
        stat = osErrorResource;
 800637e:	f06f 0302 	mvn.w	r3, #2
 8006382:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006384:	69fb      	ldr	r3, [r7, #28]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20003ce8 	.word	0x20003ce8

08006394 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b08c      	sub	sp, #48	@ 0x30
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a4:	f3ef 8305 	mrs	r3, IPSR
 80063a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80063aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 8086 	bne.w	80064be <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b2:	f3ef 8310 	mrs	r3, PRIMASK
 80063b6:	617b      	str	r3, [r7, #20]
  return(result);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063be:	f3ef 8311 	mrs	r3, BASEPRI
 80063c2:	613b      	str	r3, [r7, #16]
  return(result);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <osSemaphoreNew+0x3e>
 80063ca:	4b3f      	ldr	r3, [pc, #252]	@ (80064c8 <osSemaphoreNew+0x134>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d075      	beq.n	80064be <osSemaphoreNew+0x12a>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d072      	beq.n	80064be <osSemaphoreNew+0x12a>
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d86e      	bhi.n	80064be <osSemaphoreNew+0x12a>
    mem = -1;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d015      	beq.n	8006418 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <osSemaphoreNew+0x6e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80063fa:	d902      	bls.n	8006402 <osSemaphoreNew+0x6e>
        mem = 1;
 80063fc:	2301      	movs	r3, #1
 80063fe:	623b      	str	r3, [r7, #32]
 8006400:	e00c      	b.n	800641c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d108      	bne.n	800641c <osSemaphoreNew+0x88>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d104      	bne.n	800641c <osSemaphoreNew+0x88>
          mem = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e001      	b.n	800641c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006422:	d04c      	beq.n	80064be <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d128      	bne.n	800647c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10a      	bne.n	8006446 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2203      	movs	r2, #3
 8006436:	9200      	str	r2, [sp, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	2100      	movs	r1, #0
 800643c:	2001      	movs	r0, #1
 800643e:	f000 fc61 	bl	8006d04 <xQueueGenericCreateStatic>
 8006442:	6278      	str	r0, [r7, #36]	@ 0x24
 8006444:	e005      	b.n	8006452 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006446:	2203      	movs	r2, #3
 8006448:	2100      	movs	r1, #0
 800644a:	2001      	movs	r0, #1
 800644c:	f000 fce1 	bl	8006e12 <xQueueGenericCreate>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d022      	beq.n	800649e <osSemaphoreNew+0x10a>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d01f      	beq.n	800649e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800645e:	2300      	movs	r3, #0
 8006460:	2200      	movs	r2, #0
 8006462:	2100      	movs	r1, #0
 8006464:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006466:	f000 fe6d 	bl	8007144 <xQueueGenericSend>
 800646a:	4603      	mov	r3, r0
 800646c:	2b01      	cmp	r3, #1
 800646e:	d016      	beq.n	800649e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006470:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006472:	f001 fb77 	bl	8007b64 <vQueueDelete>
            hSemaphore = NULL;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
 800647a:	e010      	b.n	800649e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d108      	bne.n	8006494 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	461a      	mov	r2, r3
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fde4 	bl	8007058 <xQueueCreateCountingSemaphoreStatic>
 8006490:	6278      	str	r0, [r7, #36]	@ 0x24
 8006492:	e004      	b.n	800649e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fe1b 	bl	80070d2 <xQueueCreateCountingSemaphore>
 800649c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00c      	beq.n	80064be <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e001      	b.n	80064b6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80064b6:	69f9      	ldr	r1, [r7, #28]
 80064b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064ba:	f001 fca1 	bl	8007e00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80064be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3728      	adds	r7, #40	@ 0x28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	20003ce8 	.word	0x20003ce8

080064cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80064e4:	f06f 0303 	mvn.w	r3, #3
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e04b      	b.n	8006584 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ec:	f3ef 8305 	mrs	r3, IPSR
 80064f0:	617b      	str	r3, [r7, #20]
  return(result);
 80064f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10f      	bne.n	8006518 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064f8:	f3ef 8310 	mrs	r3, PRIMASK
 80064fc:	613b      	str	r3, [r7, #16]
  return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006504:	f3ef 8311 	mrs	r3, BASEPRI
 8006508:	60fb      	str	r3, [r7, #12]
  return(result);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d026      	beq.n	800655e <osSemaphoreAcquire+0x92>
 8006510:	4b1f      	ldr	r3, [pc, #124]	@ (8006590 <osSemaphoreAcquire+0xc4>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d122      	bne.n	800655e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800651e:	f06f 0303 	mvn.w	r3, #3
 8006522:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006524:	e02d      	b.n	8006582 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	461a      	mov	r2, r3
 8006530:	2100      	movs	r1, #0
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f001 fa4c 	bl	80079d0 <xQueueReceiveFromISR>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d003      	beq.n	8006546 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800653e:	f06f 0302 	mvn.w	r3, #2
 8006542:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006544:	e01d      	b.n	8006582 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d01a      	beq.n	8006582 <osSemaphoreAcquire+0xb6>
 800654c:	4b11      	ldr	r3, [pc, #68]	@ (8006594 <osSemaphoreAcquire+0xc8>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800655c:	e011      	b.n	8006582 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	69b8      	ldr	r0, [r7, #24]
 8006562:	f001 f91d 	bl	80077a0 <xQueueSemaphoreTake>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d00b      	beq.n	8006584 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006572:	f06f 0301 	mvn.w	r3, #1
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e004      	b.n	8006584 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800657a:	f06f 0302 	mvn.w	r3, #2
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	e000      	b.n	8006584 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006582:	bf00      	nop
      }
    }
  }

  return (stat);
 8006584:	69fb      	ldr	r3, [r7, #28]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20003ce8 	.word	0x20003ce8
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80065ae:	f06f 0303 	mvn.w	r3, #3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e03e      	b.n	8006634 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b6:	f3ef 8305 	mrs	r3, IPSR
 80065ba:	617b      	str	r3, [r7, #20]
  return(result);
 80065bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c2:	f3ef 8310 	mrs	r3, PRIMASK
 80065c6:	613b      	str	r3, [r7, #16]
  return(result);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d105      	bne.n	80065da <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ce:	f3ef 8311 	mrs	r3, BASEPRI
 80065d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d01e      	beq.n	8006618 <osSemaphoreRelease+0x80>
 80065da:	4b19      	ldr	r3, [pc, #100]	@ (8006640 <osSemaphoreRelease+0xa8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d11a      	bne.n	8006618 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065e6:	f107 0308 	add.w	r3, r7, #8
 80065ea:	4619      	mov	r1, r3
 80065ec:	69b8      	ldr	r0, [r7, #24]
 80065ee:	f000 ff56 	bl	800749e <xQueueGiveFromISR>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d003      	beq.n	8006600 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80065f8:	f06f 0302 	mvn.w	r3, #2
 80065fc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80065fe:	e018      	b.n	8006632 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d015      	beq.n	8006632 <osSemaphoreRelease+0x9a>
 8006606:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <osSemaphoreRelease+0xac>)
 8006608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006616:	e00c      	b.n	8006632 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006618:	2300      	movs	r3, #0
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	69b8      	ldr	r0, [r7, #24]
 8006620:	f000 fd90 	bl	8007144 <xQueueGenericSend>
 8006624:	4603      	mov	r3, r0
 8006626:	2b01      	cmp	r3, #1
 8006628:	d004      	beq.n	8006634 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800662a:	f06f 0302 	mvn.w	r3, #2
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e000      	b.n	8006634 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006632:	bf00      	nop
    }
  }

  return (stat);
 8006634:	69fb      	ldr	r3, [r7, #28]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3720      	adds	r7, #32
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20003ce8 	.word	0x20003ce8
 8006644:	e000ed04 	.word	0xe000ed04

08006648 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006654:	f3ef 8305 	mrs	r3, IPSR
 8006658:	617b      	str	r3, [r7, #20]
  return(result);
 800665a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10f      	bne.n	8006680 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006660:	f3ef 8310 	mrs	r3, PRIMASK
 8006664:	613b      	str	r3, [r7, #16]
  return(result);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800666c:	f3ef 8311 	mrs	r3, BASEPRI
 8006670:	60fb      	str	r3, [r7, #12]
  return(result);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <osSemaphoreDelete+0x40>
 8006678:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <osSemaphoreDelete+0x68>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d103      	bne.n	8006688 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006680:	f06f 0305 	mvn.w	r3, #5
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e00e      	b.n	80066a6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800668e:	f06f 0303 	mvn.w	r3, #3
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	e007      	b.n	80066a6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8006696:	69b8      	ldr	r0, [r7, #24]
 8006698:	f001 fbdc 	bl	8007e54 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80066a0:	69b8      	ldr	r0, [r7, #24]
 80066a2:	f001 fa5f 	bl	8007b64 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80066a6:	69fb      	ldr	r3, [r7, #28]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20003ce8 	.word	0x20003ce8

080066b4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	@ 0x30
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c4:	f3ef 8305 	mrs	r3, IPSR
 80066c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80066ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d16f      	bne.n	80067b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d0:	f3ef 8310 	mrs	r3, PRIMASK
 80066d4:	617b      	str	r3, [r7, #20]
  return(result);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066dc:	f3ef 8311 	mrs	r3, BASEPRI
 80066e0:	613b      	str	r3, [r7, #16]
  return(result);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <osMessageQueueNew+0x3c>
 80066e8:	4b34      	ldr	r3, [pc, #208]	@ (80067bc <osMessageQueueNew+0x108>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d05f      	beq.n	80067b0 <osMessageQueueNew+0xfc>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d05c      	beq.n	80067b0 <osMessageQueueNew+0xfc>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d059      	beq.n	80067b0 <osMessageQueueNew+0xfc>
    mem = -1;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d029      	beq.n	800675c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <osMessageQueueNew+0x82>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b4f      	cmp	r3, #79	@ 0x4f
 8006716:	d90e      	bls.n	8006736 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <osMessageQueueNew+0x82>
        mem = 1;
 8006730:	2301      	movs	r3, #1
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	e014      	b.n	8006760 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d110      	bne.n	8006760 <osMessageQueueNew+0xac>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10c      	bne.n	8006760 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800674a:	2b00      	cmp	r3, #0
 800674c:	d108      	bne.n	8006760 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d104      	bne.n	8006760 <osMessageQueueNew+0xac>
          mem = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	e001      	b.n	8006760 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d10b      	bne.n	800677e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2100      	movs	r1, #0
 8006770:	9100      	str	r1, [sp, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fac5 	bl	8006d04 <xQueueGenericCreateStatic>
 800677a:	6278      	str	r0, [r7, #36]	@ 0x24
 800677c:	e008      	b.n	8006790 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006784:	2200      	movs	r2, #0
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fb42 	bl	8006e12 <xQueueGenericCreate>
 800678e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00c      	beq.n	80067b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	e001      	b.n	80067a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80067a8:	69f9      	ldr	r1, [r7, #28]
 80067aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067ac:	f001 fb28 	bl	8007e00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3728      	adds	r7, #40	@ 0x28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20003ce8 	.word	0x20003ce8

080067c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	@ 0x28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	4613      	mov	r3, r2
 80067ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067d8:	f3ef 8305 	mrs	r3, IPSR
 80067dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80067de:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e4:	f3ef 8310 	mrs	r3, PRIMASK
 80067e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d105      	bne.n	80067fc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067f0:	f3ef 8311 	mrs	r3, BASEPRI
 80067f4:	617b      	str	r3, [r7, #20]
  return(result);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02c      	beq.n	8006856 <osMessageQueuePut+0x96>
 80067fc:	4b28      	ldr	r3, [pc, #160]	@ (80068a0 <osMessageQueuePut+0xe0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d128      	bne.n	8006856 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d005      	beq.n	8006816 <osMessageQueuePut+0x56>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <osMessageQueuePut+0x56>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006816:	f06f 0303 	mvn.w	r3, #3
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800681c:	e039      	b.n	8006892 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006822:	f107 0210 	add.w	r2, r7, #16
 8006826:	2300      	movs	r3, #0
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	6a38      	ldr	r0, [r7, #32]
 800682c:	f000 fd94 	bl	8007358 <xQueueGenericSendFromISR>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d003      	beq.n	800683e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006836:	f06f 0302 	mvn.w	r3, #2
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800683c:	e029      	b.n	8006892 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d026      	beq.n	8006892 <osMessageQueuePut+0xd2>
 8006844:	4b17      	ldr	r3, [pc, #92]	@ (80068a4 <osMessageQueuePut+0xe4>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006854:	e01d      	b.n	8006892 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <osMessageQueuePut+0xa2>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d103      	bne.n	800686a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006862:	f06f 0303 	mvn.w	r3, #3
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
 8006868:	e014      	b.n	8006894 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800686a:	2300      	movs	r3, #0
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	6a38      	ldr	r0, [r7, #32]
 8006872:	f000 fc67 	bl	8007144 <xQueueGenericSend>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d00b      	beq.n	8006894 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006882:	f06f 0301 	mvn.w	r3, #1
 8006886:	627b      	str	r3, [r7, #36]	@ 0x24
 8006888:	e004      	b.n	8006894 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800688a:	f06f 0302 	mvn.w	r3, #2
 800688e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006890:	e000      	b.n	8006894 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006892:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006896:	4618      	mov	r0, r3
 8006898:	3728      	adds	r7, #40	@ 0x28
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20003ce8 	.word	0x20003ce8
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	@ 0x28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80068c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10f      	bne.n	80068ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ca:	f3ef 8310 	mrs	r3, PRIMASK
 80068ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d105      	bne.n	80068e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d6:	f3ef 8311 	mrs	r3, BASEPRI
 80068da:	617b      	str	r3, [r7, #20]
  return(result);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02c      	beq.n	800693c <osMessageQueueGet+0x94>
 80068e2:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <osMessageQueueGet+0xdc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d128      	bne.n	800693c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <osMessageQueueGet+0x54>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <osMessageQueueGet+0x54>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80068fc:	f06f 0303 	mvn.w	r3, #3
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006902:	e038      	b.n	8006976 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006908:	f107 0310 	add.w	r3, r7, #16
 800690c:	461a      	mov	r2, r3
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	6a38      	ldr	r0, [r7, #32]
 8006912:	f001 f85d 	bl	80079d0 <xQueueReceiveFromISR>
 8006916:	4603      	mov	r3, r0
 8006918:	2b01      	cmp	r3, #1
 800691a:	d003      	beq.n	8006924 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800691c:	f06f 0302 	mvn.w	r3, #2
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006922:	e028      	b.n	8006976 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d025      	beq.n	8006976 <osMessageQueueGet+0xce>
 800692a:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <osMessageQueueGet+0xe0>)
 800692c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800693a:	e01c      	b.n	8006976 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <osMessageQueueGet+0xa0>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006948:	f06f 0303 	mvn.w	r3, #3
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
 800694e:	e013      	b.n	8006978 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	6a38      	ldr	r0, [r7, #32]
 8006956:	f000 fe3b 	bl	80075d0 <xQueueReceive>
 800695a:	4603      	mov	r3, r0
 800695c:	2b01      	cmp	r3, #1
 800695e:	d00b      	beq.n	8006978 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006966:	f06f 0301 	mvn.w	r3, #1
 800696a:	627b      	str	r3, [r7, #36]	@ 0x24
 800696c:	e004      	b.n	8006978 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800696e:	f06f 0302 	mvn.w	r3, #2
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
 8006974:	e000      	b.n	8006978 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006976:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800697a:	4618      	mov	r0, r3
 800697c:	3728      	adds	r7, #40	@ 0x28
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20003ce8 	.word	0x20003ce8
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e01e      	b.n	80069e2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a4:	f3ef 8305 	mrs	r3, IPSR
 80069a8:	617b      	str	r3, [r7, #20]
  return(result);
 80069aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10f      	bne.n	80069d0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b0:	f3ef 8310 	mrs	r3, PRIMASK
 80069b4:	613b      	str	r3, [r7, #16]
  return(result);
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <osMessageQueueGetCount+0x4e>
 80069c8:	4b08      	ldr	r3, [pc, #32]	@ (80069ec <osMessageQueueGetCount+0x60>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d104      	bne.n	80069da <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80069d0:	69b8      	ldr	r0, [r7, #24]
 80069d2:	f001 f8a6 	bl	8007b22 <uxQueueMessagesWaitingFromISR>
 80069d6:	61f8      	str	r0, [r7, #28]
 80069d8:	e003      	b.n	80069e2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80069da:	69b8      	ldr	r0, [r7, #24]
 80069dc:	f001 f880 	bl	8007ae0 <uxQueueMessagesWaiting>
 80069e0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80069e2:	69fb      	ldr	r3, [r7, #28]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3720      	adds	r7, #32
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20003ce8 	.word	0x20003ce8

080069f0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069fc:	f3ef 8305 	mrs	r3, IPSR
 8006a00:	617b      	str	r3, [r7, #20]
  return(result);
 8006a02:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10f      	bne.n	8006a28 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a08:	f3ef 8310 	mrs	r3, PRIMASK
 8006a0c:	613b      	str	r3, [r7, #16]
  return(result);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d105      	bne.n	8006a20 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a14:	f3ef 8311 	mrs	r3, BASEPRI
 8006a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <osMessageQueueDelete+0x40>
 8006a20:	4b0d      	ldr	r3, [pc, #52]	@ (8006a58 <osMessageQueueDelete+0x68>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d103      	bne.n	8006a30 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006a28:	f06f 0305 	mvn.w	r3, #5
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	e00e      	b.n	8006a4e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d103      	bne.n	8006a3e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006a36:	f06f 0303 	mvn.w	r3, #3
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e007      	b.n	8006a4e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006a3e:	69b8      	ldr	r0, [r7, #24]
 8006a40:	f001 fa08 	bl	8007e54 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006a48:	69b8      	ldr	r0, [r7, #24]
 8006a4a:	f001 f88b 	bl	8007b64 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006a4e:	69fb      	ldr	r3, [r7, #28]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20003ce8 	.word	0x20003ce8

08006a5c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4a07      	ldr	r2, [pc, #28]	@ (8006a88 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a6c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4a06      	ldr	r2, [pc, #24]	@ (8006a8c <vApplicationGetIdleTaskMemory+0x30>)
 8006a72:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2280      	movs	r2, #128	@ 0x80
 8006a78:	601a      	str	r2, [r3, #0]
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20003cec 	.word	0x20003cec
 8006a8c:	20003d48 	.word	0x20003d48

08006a90 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a07      	ldr	r2, [pc, #28]	@ (8006abc <vApplicationGetTimerTaskMemory+0x2c>)
 8006aa0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4a06      	ldr	r2, [pc, #24]	@ (8006ac0 <vApplicationGetTimerTaskMemory+0x30>)
 8006aa6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aae:	601a      	str	r2, [r3, #0]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20003f48 	.word	0x20003f48
 8006ac0:	20003fa4 	.word	0x20003fa4

08006ac4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f103 0208 	add.w	r2, r3, #8
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8006adc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f103 0208 	add.w	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f103 0208 	add.w	r2, r3, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
 8006b26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
}
 8006b5a:	bf00      	nop
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d103      	bne.n	8006b86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	e00c      	b.n	8006ba0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	60fb      	str	r3, [r7, #12]
 8006b8c:	e002      	b.n	8006b94 <vListInsert+0x2e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d2f6      	bcs.n	8006b8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	601a      	str	r2, [r3, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6892      	ldr	r2, [r2, #8]
 8006bee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6852      	ldr	r2, [r2, #4]
 8006bf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d103      	bne.n	8006c0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	1e5a      	subs	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10d      	bne.n	8006c5c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c5c:	f002 fe26 	bl	80098ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c6c:	fb01 f303 	mul.w	r3, r1, r3
 8006c70:	441a      	add	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	441a      	add	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	22ff      	movs	r2, #255	@ 0xff
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	@ 0xff
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d114      	bne.n	8006cdc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01a      	beq.n	8006cf0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fdba 	bl	8008838 <xTaskRemoveFromEventList>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cca:	4b0d      	ldr	r3, [pc, #52]	@ (8006d00 <xQueueGenericReset+0xd4>)
 8006ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	e009      	b.n	8006cf0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3310      	adds	r3, #16
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff feef 	bl	8006ac4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3324      	adds	r3, #36	@ 0x24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff feea 	bl	8006ac4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cf0:	f002 fe12 	bl	8009918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cf4:	2301      	movs	r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	@ 0x38
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10d      	bne.n	8006d34 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	b672      	cpsid	i
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	b662      	cpsie	i
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <xQueueGenericCreateStatic+0x5e>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <xQueueGenericCreateStatic+0x62>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueGenericCreateStatic+0x64>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10d      	bne.n	8006d88 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d70:	b672      	cpsid	i
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	b662      	cpsie	i
 8006d80:	623b      	str	r3, [r7, #32]
}
 8006d82:	bf00      	nop
 8006d84:	bf00      	nop
 8006d86:	e7fd      	b.n	8006d84 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <xQueueGenericCreateStatic+0x90>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <xQueueGenericCreateStatic+0x94>
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <xQueueGenericCreateStatic+0x96>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10d      	bne.n	8006dba <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	b672      	cpsid	i
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	b662      	cpsie	i
 8006db2:	61fb      	str	r3, [r7, #28]
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop
 8006db8:	e7fd      	b.n	8006db6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dba:	2350      	movs	r3, #80	@ 0x50
 8006dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b50      	cmp	r3, #80	@ 0x50
 8006dc2:	d00d      	beq.n	8006de0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	61bb      	str	r3, [r7, #24]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006de0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00d      	beq.n	8006e08 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006df4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	68b9      	ldr	r1, [r7, #8]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f848 	bl	8006e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3730      	adds	r7, #48	@ 0x30
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b08a      	sub	sp, #40	@ 0x28
 8006e16:	af02      	add	r7, sp, #8
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10d      	bne.n	8006e42 <xQueueGenericCreate+0x30>
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2a:	b672      	cpsid	i
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	b662      	cpsie	i
 8006e3a:	613b      	str	r3, [r7, #16]
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e004      	b.n	8006e58 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3350      	adds	r3, #80	@ 0x50
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f002 fe53 	bl	8009b08 <pvPortMalloc>
 8006e62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	3350      	adds	r3, #80	@ 0x50
 8006e72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e7c:	79fa      	ldrb	r2, [r7, #7]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	4613      	mov	r3, r2
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 f805 	bl	8006e98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3720      	adds	r7, #32
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d103      	bne.n	8006eb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e002      	b.n	8006eba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	69b8      	ldr	r0, [r7, #24]
 8006eca:	f7ff feaf 	bl	8006c2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	78fa      	ldrb	r2, [r7, #3]
 8006ed2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00e      	beq.n	8006f0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006efe:	2300      	movs	r3, #0
 8006f00:	2200      	movs	r2, #0
 8006f02:	2100      	movs	r1, #0
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f91d 	bl	8007144 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	4603      	mov	r3, r0
 8006f1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f24:	79fb      	ldrb	r3, [r7, #7]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6939      	ldr	r1, [r7, #16]
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	f7ff ff71 	bl	8006e12 <xQueueGenericCreate>
 8006f30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff ffd3 	bl	8006ede <prvInitialiseMutex>

		return xNewQueue;
 8006f38:	68fb      	ldr	r3, [r7, #12]
	}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b088      	sub	sp, #32
 8006f46:	af02      	add	r7, sp, #8
 8006f48:	4603      	mov	r3, r0
 8006f4a:	6039      	str	r1, [r7, #0]
 8006f4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	2300      	movs	r3, #0
 8006f54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f56:	79fb      	ldrb	r3, [r7, #7]
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6939      	ldr	r1, [r7, #16]
 8006f60:	6978      	ldr	r0, [r7, #20]
 8006f62:	f7ff fecf 	bl	8006d04 <xQueueGenericCreateStatic>
 8006f66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f7ff ffb8 	bl	8006ede <prvInitialiseMutex>

		return xNewQueue;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
	}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10d      	bne.n	8006fa6 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	b672      	cpsid	i
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	b662      	cpsie	i
 8006f9e:	60fb      	str	r3, [r7, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	bf00      	nop
 8006fa4:	e7fd      	b.n	8006fa2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	689c      	ldr	r4, [r3, #8]
 8006faa:	f001 fe0d 	bl	8008bc8 <xTaskGetCurrentTaskHandle>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	d111      	bne.n	8006fd8 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d105      	bne.n	8006fd2 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6938      	ldr	r0, [r7, #16]
 8006fce:	f000 f8b9 	bl	8007144 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e001      	b.n	8006fdc <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006fdc:	697b      	ldr	r3, [r7, #20]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd90      	pop	{r4, r7, pc}

08006fe6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006fe6:	b590      	push	{r4, r7, lr}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffe:	b672      	cpsid	i
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	b662      	cpsie	i
 800700e:	60fb      	str	r3, [r7, #12]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	689c      	ldr	r4, [r3, #8]
 800701a:	f001 fdd5 	bl	8008bc8 <xTaskGetCurrentTaskHandle>
 800701e:	4603      	mov	r3, r0
 8007020:	429c      	cmp	r4, r3
 8007022:	d107      	bne.n	8007034 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	1c5a      	adds	r2, r3, #1
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e00c      	b.n	800704e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6938      	ldr	r0, [r7, #16]
 8007038:	f000 fbb2 	bl	80077a0 <xQueueSemaphoreTake>
 800703c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800704e:	697b      	ldr	r3, [r7, #20]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	bd90      	pop	{r4, r7, pc}

08007058 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706e:	b672      	cpsid	i
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	b662      	cpsie	i
 800707e:	61bb      	str	r3, [r7, #24]
}
 8007080:	bf00      	nop
 8007082:	bf00      	nop
 8007084:	e7fd      	b.n	8007082 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d90d      	bls.n	80070aa <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007092:	b672      	cpsid	i
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	b662      	cpsie	i
 80070a2:	617b      	str	r3, [r7, #20]
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070aa:	2302      	movs	r3, #2
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fe25 	bl	8006d04 <xQueueGenericCreateStatic>
 80070ba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070c8:	69fb      	ldr	r3, [r7, #28]
	}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b086      	sub	sp, #24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	613b      	str	r3, [r7, #16]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d90d      	bls.n	8007122 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	b672      	cpsid	i
 800710c:	f383 8811 	msr	BASEPRI, r3
 8007110:	f3bf 8f6f 	isb	sy
 8007114:	f3bf 8f4f 	dsb	sy
 8007118:	b662      	cpsie	i
 800711a:	60fb      	str	r3, [r7, #12]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007122:	2202      	movs	r2, #2
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fe73 	bl	8006e12 <xQueueGenericCreate>
 800712c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800713a:	697b      	ldr	r3, [r7, #20]
	}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08e      	sub	sp, #56	@ 0x38
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007152:	2300      	movs	r3, #0
 8007154:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10d      	bne.n	800717c <xQueueGenericSend+0x38>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	b672      	cpsid	i
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	b662      	cpsie	i
 8007174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x46>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueGenericSend+0x4a>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueGenericSend+0x4c>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <xQueueGenericSend+0x6c>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	b672      	cpsid	i
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	b662      	cpsie	i
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	e7fd      	b.n	80071ac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0x7a>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <xQueueGenericSend+0x7e>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueGenericSend+0x80>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <xQueueGenericSend+0xa0>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	b672      	cpsid	i
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	b662      	cpsie	i
 80071dc:	623b      	str	r3, [r7, #32]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071e4:	f001 fd00 	bl	8008be8 <xTaskGetSchedulerState>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <xQueueGenericSend+0xb0>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d101      	bne.n	80071f8 <xQueueGenericSend+0xb4>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <xQueueGenericSend+0xb6>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10d      	bne.n	800721a <xQueueGenericSend+0xd6>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	b672      	cpsid	i
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	b662      	cpsie	i
 8007212:	61fb      	str	r3, [r7, #28]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800721a:	f002 fb47 	bl	80098ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007226:	429a      	cmp	r2, r3
 8007228:	d302      	bcc.n	8007230 <xQueueGenericSend+0xec>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d129      	bne.n	8007284 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007236:	f000 fcd3 	bl	8007be0 <prvCopyDataToQueue>
 800723a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	d010      	beq.n	8007266 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007246:	3324      	adds	r3, #36	@ 0x24
 8007248:	4618      	mov	r0, r3
 800724a:	f001 faf5 	bl	8008838 <xTaskRemoveFromEventList>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d013      	beq.n	800727c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007254:	4b3f      	ldr	r3, [pc, #252]	@ (8007354 <xQueueGenericSend+0x210>)
 8007256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	e00a      	b.n	800727c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800726c:	4b39      	ldr	r3, [pc, #228]	@ (8007354 <xQueueGenericSend+0x210>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800727c:	f002 fb4c 	bl	8009918 <vPortExitCritical>
				return pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	e063      	b.n	800734c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800728a:	f002 fb45 	bl	8009918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800728e:	2300      	movs	r3, #0
 8007290:	e05c      	b.n	800734c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fb31 	bl	8008904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a2:	2301      	movs	r3, #1
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072a6:	f002 fb37 	bl	8009918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072aa:	f001 f883 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ae:	f002 fafd 	bl	80098ac <vPortEnterCritical>
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072be:	d103      	bne.n	80072c8 <xQueueGenericSend+0x184>
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072ce:	b25b      	sxtb	r3, r3
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d103      	bne.n	80072de <xQueueGenericSend+0x19a>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072de:	f002 fb1b 	bl	8009918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e2:	1d3a      	adds	r2, r7, #4
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	4611      	mov	r1, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fb20 	bl	8008930 <xTaskCheckForTimeOut>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d124      	bne.n	8007340 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072f8:	f000 fd6a 	bl	8007dd0 <prvIsQueueFull>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d018      	beq.n	8007334 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	3310      	adds	r3, #16
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f001 fa3e 	bl	800878c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007312:	f000 fcf5 	bl	8007d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007316:	f001 f85b 	bl	80083d0 <xTaskResumeAll>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	f47f af7c 	bne.w	800721a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007322:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <xQueueGenericSend+0x210>)
 8007324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	e772      	b.n	800721a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007336:	f000 fce3 	bl	8007d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800733a:	f001 f849 	bl	80083d0 <xTaskResumeAll>
 800733e:	e76c      	b.n	800721a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007342:	f000 fcdd 	bl	8007d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007346:	f001 f843 	bl	80083d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800734a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800734c:	4618      	mov	r0, r3
 800734e:	3738      	adds	r7, #56	@ 0x38
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	@ 0x38
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
 8007364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	b672      	cpsid	i
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	b662      	cpsie	i
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007386:	bf00      	nop
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <xQueueGenericSendFromISR+0x42>
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <xQueueGenericSendFromISR+0x46>
 800739a:	2301      	movs	r3, #1
 800739c:	e000      	b.n	80073a0 <xQueueGenericSendFromISR+0x48>
 800739e:	2300      	movs	r3, #0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a8:	b672      	cpsid	i
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	b662      	cpsie	i
 80073b8:	623b      	str	r3, [r7, #32]
}
 80073ba:	bf00      	nop
 80073bc:	bf00      	nop
 80073be:	e7fd      	b.n	80073bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d103      	bne.n	80073ce <xQueueGenericSendFromISR+0x76>
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <xQueueGenericSendFromISR+0x7a>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <xQueueGenericSendFromISR+0x7c>
 80073d2:	2300      	movs	r3, #0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10d      	bne.n	80073f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	61fb      	str	r3, [r7, #28]
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073f4:	f002 fb42 	bl	8009a7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073f8:	f3ef 8211 	mrs	r2, BASEPRI
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	b672      	cpsid	i
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	b662      	cpsie	i
 8007410:	61ba      	str	r2, [r7, #24]
 8007412:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007414:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007416:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <xQueueGenericSendFromISR+0xd2>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d12c      	bne.n	8007484 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007430:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800743a:	f000 fbd1 	bl	8007be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800743e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8007442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007446:	d112      	bne.n	800746e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d016      	beq.n	800747e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	3324      	adds	r3, #36	@ 0x24
 8007454:	4618      	mov	r0, r3
 8007456:	f001 f9ef 	bl	8008838 <xTaskRemoveFromEventList>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00b      	beq.n	800747e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	e007      	b.n	800747e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800746e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007472:	3301      	adds	r3, #1
 8007474:	b2db      	uxtb	r3, r3
 8007476:	b25a      	sxtb	r2, r3
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800747e:	2301      	movs	r3, #1
 8007480:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007482:	e001      	b.n	8007488 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007484:	2300      	movs	r3, #0
 8007486:	637b      	str	r3, [r7, #52]	@ 0x34
 8007488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007492:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007496:	4618      	mov	r0, r3
 8007498:	3738      	adds	r7, #56	@ 0x38
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b08e      	sub	sp, #56	@ 0x38
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10d      	bne.n	80074ce <xQueueGiveFromISR+0x30>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	b672      	cpsid	i
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	b662      	cpsie	i
 80074c6:	623b      	str	r3, [r7, #32]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <xQueueGiveFromISR+0x54>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	b672      	cpsid	i
 80074dc:	f383 8811 	msr	BASEPRI, r3
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	b662      	cpsie	i
 80074ea:	61fb      	str	r3, [r7, #28]
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	e7fd      	b.n	80074ee <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <xQueueGiveFromISR+0x64>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <xQueueGiveFromISR+0x68>
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <xQueueGiveFromISR+0x6a>
 8007506:	2300      	movs	r3, #0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10d      	bne.n	8007528 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	b672      	cpsid	i
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	b662      	cpsie	i
 8007520:	61bb      	str	r3, [r7, #24]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007528:	f002 faa8 	bl	8009a7c <vPortValidateInterruptPriority>
	__asm volatile
 800752c:	f3ef 8211 	mrs	r2, BASEPRI
 8007530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007534:	b672      	cpsid	i
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	b662      	cpsie	i
 8007544:	617a      	str	r2, [r7, #20]
 8007546:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007548:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800754c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007558:	429a      	cmp	r2, r3
 800755a:	d22b      	bcs.n	80075b4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800756e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007576:	d112      	bne.n	800759e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	d016      	beq.n	80075ae <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	3324      	adds	r3, #36	@ 0x24
 8007584:	4618      	mov	r0, r3
 8007586:	f001 f957 	bl	8008838 <xTaskRemoveFromEventList>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e007      	b.n	80075ae <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800759e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075a2:	3301      	adds	r3, #1
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	b25a      	sxtb	r2, r3
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075ae:	2301      	movs	r3, #1
 80075b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b2:	e001      	b.n	80075b8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f383 8811 	msr	BASEPRI, r3
}
 80075c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3738      	adds	r7, #56	@ 0x38
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08c      	sub	sp, #48	@ 0x30
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075dc:	2300      	movs	r3, #0
 80075de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10d      	bne.n	8007606 <xQueueReceive+0x36>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ee:	b672      	cpsid	i
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	b662      	cpsie	i
 80075fe:	623b      	str	r3, [r7, #32]
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	e7fd      	b.n	8007602 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d103      	bne.n	8007614 <xQueueReceive+0x44>
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <xQueueReceive+0x48>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <xQueueReceive+0x4a>
 8007618:	2300      	movs	r3, #0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <xQueueReceive+0x6a>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	b672      	cpsid	i
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	b662      	cpsie	i
 8007632:	61fb      	str	r3, [r7, #28]
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop
 8007638:	e7fd      	b.n	8007636 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800763a:	f001 fad5 	bl	8008be8 <xTaskGetSchedulerState>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <xQueueReceive+0x7a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <xQueueReceive+0x7e>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <xQueueReceive+0x80>
 800764e:	2300      	movs	r3, #0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10d      	bne.n	8007670 <xQueueReceive+0xa0>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007658:	b672      	cpsid	i
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	b662      	cpsie	i
 8007668:	61bb      	str	r3, [r7, #24]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007670:	f002 f91c 	bl	80098ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01f      	beq.n	80076c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007684:	f000 fb16 	bl	8007cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	1e5a      	subs	r2, r3, #1
 800768c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	3310      	adds	r3, #16
 800769c:	4618      	mov	r0, r3
 800769e:	f001 f8cb 	bl	8008838 <xTaskRemoveFromEventList>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076a8:	4b3c      	ldr	r3, [pc, #240]	@ (800779c <xQueueReceive+0x1cc>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076b8:	f002 f92e 	bl	8009918 <vPortExitCritical>
				return pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	e069      	b.n	8007794 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076c6:	f002 f927 	bl	8009918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e062      	b.n	8007794 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076d4:	f107 0310 	add.w	r3, r7, #16
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f913 	bl	8008904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076e2:	f002 f919 	bl	8009918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076e6:	f000 fe65 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ea:	f002 f8df 	bl	80098ac <vPortEnterCritical>
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076f4:	b25b      	sxtb	r3, r3
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d103      	bne.n	8007704 <xQueueReceive+0x134>
 80076fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800770a:	b25b      	sxtb	r3, r3
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d103      	bne.n	800771a <xQueueReceive+0x14a>
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800771a:	f002 f8fd 	bl	8009918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800771e:	1d3a      	adds	r2, r7, #4
 8007720:	f107 0310 	add.w	r3, r7, #16
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f902 	bl	8008930 <xTaskCheckForTimeOut>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d123      	bne.n	800777a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007734:	f000 fb36 	bl	8007da4 <prvIsQueueEmpty>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d017      	beq.n	800776e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800773e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007740:	3324      	adds	r3, #36	@ 0x24
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f820 	bl	800878c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800774c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800774e:	f000 fad7 	bl	8007d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007752:	f000 fe3d 	bl	80083d0 <xTaskResumeAll>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d189      	bne.n	8007670 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800775c:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <xQueueReceive+0x1cc>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	e780      	b.n	8007670 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800776e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007770:	f000 fac6 	bl	8007d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007774:	f000 fe2c 	bl	80083d0 <xTaskResumeAll>
 8007778:	e77a      	b.n	8007670 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800777a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800777c:	f000 fac0 	bl	8007d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007780:	f000 fe26 	bl	80083d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007786:	f000 fb0d 	bl	8007da4 <prvIsQueueEmpty>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	f43f af6f 	beq.w	8007670 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007794:	4618      	mov	r0, r3
 8007796:	3730      	adds	r7, #48	@ 0x30
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08e      	sub	sp, #56	@ 0x38
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80077aa:	2300      	movs	r3, #0
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10d      	bne.n	80077d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c0:	b672      	cpsid	i
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	b662      	cpsie	i
 80077d0:	623b      	str	r3, [r7, #32]
}
 80077d2:	bf00      	nop
 80077d4:	bf00      	nop
 80077d6:	e7fd      	b.n	80077d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00d      	beq.n	80077fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	b672      	cpsid	i
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	b662      	cpsie	i
 80077f4:	61fb      	str	r3, [r7, #28]
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	e7fd      	b.n	80077f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077fc:	f001 f9f4 	bl	8008be8 <xTaskGetSchedulerState>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <xQueueSemaphoreTake+0x6c>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <xQueueSemaphoreTake+0x70>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <xQueueSemaphoreTake+0x72>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781a:	b672      	cpsid	i
 800781c:	f383 8811 	msr	BASEPRI, r3
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	b662      	cpsie	i
 800782a:	61bb      	str	r3, [r7, #24]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f002 f83b 	bl	80098ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	d024      	beq.n	800788c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007844:	1e5a      	subs	r2, r3, #1
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007852:	f001 fb4b 	bl	8008eec <pvTaskIncrementMutexHeldCount>
 8007856:	4602      	mov	r2, r0
 8007858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00f      	beq.n	8007884 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007866:	3310      	adds	r3, #16
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ffe5 	bl	8008838 <xTaskRemoveFromEventList>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007874:	4b55      	ldr	r3, [pc, #340]	@ (80079cc <xQueueSemaphoreTake+0x22c>)
 8007876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007884:	f002 f848 	bl	8009918 <vPortExitCritical>
				return pdPASS;
 8007888:	2301      	movs	r3, #1
 800788a:	e09a      	b.n	80079c2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d114      	bne.n	80078bc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	b672      	cpsid	i
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	b662      	cpsie	i
 80078ac:	617b      	str	r3, [r7, #20]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80078b4:	f002 f830 	bl	8009918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80078b8:	2300      	movs	r3, #0
 80078ba:	e082      	b.n	80079c2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078c2:	f107 030c 	add.w	r3, r7, #12
 80078c6:	4618      	mov	r0, r3
 80078c8:	f001 f81c 	bl	8008904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078cc:	2301      	movs	r3, #1
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078d0:	f002 f822 	bl	8009918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078d4:	f000 fd6e 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078d8:	f001 ffe8 	bl	80098ac <vPortEnterCritical>
 80078dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078e2:	b25b      	sxtb	r3, r3
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e8:	d103      	bne.n	80078f2 <xQueueSemaphoreTake+0x152>
 80078ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f8:	b25b      	sxtb	r3, r3
 80078fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fe:	d103      	bne.n	8007908 <xQueueSemaphoreTake+0x168>
 8007900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007908:	f002 f806 	bl	8009918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800790c:	463a      	mov	r2, r7
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	4611      	mov	r1, r2
 8007914:	4618      	mov	r0, r3
 8007916:	f001 f80b 	bl	8008930 <xTaskCheckForTimeOut>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d132      	bne.n	8007986 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007922:	f000 fa3f 	bl	8007da4 <prvIsQueueEmpty>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d026      	beq.n	800797a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800792c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007934:	f001 ffba 	bl	80098ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f971 	bl	8008c24 <xTaskPriorityInherit>
 8007942:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007944:	f001 ffe8 	bl	8009918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	3324      	adds	r3, #36	@ 0x24
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f000 ff1b 	bl	800878c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007958:	f000 f9d2 	bl	8007d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800795c:	f000 fd38 	bl	80083d0 <xTaskResumeAll>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	f47f af65 	bne.w	8007832 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007968:	4b18      	ldr	r3, [pc, #96]	@ (80079cc <xQueueSemaphoreTake+0x22c>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	e75b      	b.n	8007832 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800797a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800797c:	f000 f9c0 	bl	8007d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007980:	f000 fd26 	bl	80083d0 <xTaskResumeAll>
 8007984:	e755      	b.n	8007832 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007988:	f000 f9ba 	bl	8007d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800798c:	f000 fd20 	bl	80083d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007992:	f000 fa07 	bl	8007da4 <prvIsQueueEmpty>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	f43f af4a 	beq.w	8007832 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80079a4:	f001 ff82 	bl	80098ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80079a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079aa:	f000 f901 	bl	8007bb0 <prvGetDisinheritPriorityAfterTimeout>
 80079ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80079b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 fa10 	bl	8008ddc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80079bc:	f001 ffac 	bl	8009918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3738      	adds	r7, #56	@ 0x38
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08e      	sub	sp, #56	@ 0x38
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10d      	bne.n	8007a02 <xQueueReceiveFromISR+0x32>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	b672      	cpsid	i
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	b662      	cpsie	i
 80079fa:	623b      	str	r3, [r7, #32]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d103      	bne.n	8007a10 <xQueueReceiveFromISR+0x40>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <xQueueReceiveFromISR+0x44>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <xQueueReceiveFromISR+0x46>
 8007a14:	2300      	movs	r3, #0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10d      	bne.n	8007a36 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1e:	b672      	cpsid	i
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	b662      	cpsie	i
 8007a2e:	61fb      	str	r3, [r7, #28]
}
 8007a30:	bf00      	nop
 8007a32:	bf00      	nop
 8007a34:	e7fd      	b.n	8007a32 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a36:	f002 f821 	bl	8009a7c <vPortValidateInterruptPriority>
	__asm volatile
 8007a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	b672      	cpsid	i
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	b662      	cpsie	i
 8007a52:	61ba      	str	r2, [r7, #24]
 8007a54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02f      	beq.n	8007ac6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a74:	f000 f91e 	bl	8007cb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	1e5a      	subs	r2, r3, #1
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d112      	bne.n	8007ab0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d016      	beq.n	8007ac0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	3310      	adds	r3, #16
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fece 	bl	8008838 <xTaskRemoveFromEventList>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00e      	beq.n	8007ac0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	e007      	b.n	8007ac0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	b25a      	sxtb	r2, r3
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	e001      	b.n	8007aca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f383 8811 	msr	BASEPRI, r3
}
 8007ad4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3738      	adds	r7, #56	@ 0x38
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	60bb      	str	r3, [r7, #8]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007b0a:	f001 fecf 	bl	80098ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007b14:	f001 ff00 	bl	8009918 <vPortExitCritical>

	return uxReturn;
 8007b18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007b22:	b480      	push	{r7}
 8007b24:	b087      	sub	sp, #28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10d      	bne.n	8007b50 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	b672      	cpsid	i
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	b662      	cpsie	i
 8007b48:	60fb      	str	r3, [r7, #12]
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	e7fd      	b.n	8007b4c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007b56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007b58:	4618      	mov	r0, r3
 8007b5a:	371c      	adds	r7, #28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10d      	bne.n	8007b92 <vQueueDelete+0x2e>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	b672      	cpsid	i
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	b662      	cpsie	i
 8007b8a:	60bb      	str	r3, [r7, #8]
}
 8007b8c:	bf00      	nop
 8007b8e:	bf00      	nop
 8007b90:	e7fd      	b.n	8007b8e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f95e 	bl	8007e54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f002 f87e 	bl	8009ca4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007ba8:	bf00      	nop
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e001      	b.n	8007bd2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
	}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d14d      	bne.n	8007ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 f872 	bl	8008cf4 <xTaskPriorityDisinherit>
 8007c10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	609a      	str	r2, [r3, #8]
 8007c18:	e043      	b.n	8007ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d119      	bne.n	8007c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6858      	ldr	r0, [r3, #4]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c28:	461a      	mov	r2, r3
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	f00f fea9 	bl	8017982 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	441a      	add	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d32b      	bcc.n	8007ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	e026      	b.n	8007ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	68d8      	ldr	r0, [r3, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	f00f fe8f 	bl	8017982 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6c:	425b      	negs	r3, r3
 8007c6e:	441a      	add	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d207      	bcs.n	8007c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c88:	425b      	negs	r3, r3
 8007c8a:	441a      	add	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d105      	bne.n	8007ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007caa:	697b      	ldr	r3, [r7, #20]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d018      	beq.n	8007cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	441a      	add	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68da      	ldr	r2, [r3, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d303      	bcc.n	8007ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68d9      	ldr	r1, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	6838      	ldr	r0, [r7, #0]
 8007cf4:	f00f fe45 	bl	8017982 <memcpy>
	}
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d08:	f001 fdd0 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d14:	e011      	b.n	8007d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d012      	beq.n	8007d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3324      	adds	r3, #36	@ 0x24
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 fd88 	bl	8008838 <xTaskRemoveFromEventList>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d2e:	f000 fe67 	bl	8008a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dce9      	bgt.n	8007d16 <prvUnlockQueue+0x16>
 8007d42:	e000      	b.n	8007d46 <prvUnlockQueue+0x46>
					break;
 8007d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	22ff      	movs	r2, #255	@ 0xff
 8007d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d4e:	f001 fde3 	bl	8009918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d52:	f001 fdab 	bl	80098ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d5e:	e011      	b.n	8007d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	691b      	ldr	r3, [r3, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d012      	beq.n	8007d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3310      	adds	r3, #16
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fd63 	bl	8008838 <xTaskRemoveFromEventList>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d78:	f000 fe42 	bl	8008a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dce9      	bgt.n	8007d60 <prvUnlockQueue+0x60>
 8007d8c:	e000      	b.n	8007d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	22ff      	movs	r2, #255	@ 0xff
 8007d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d98:	f001 fdbe 	bl	8009918 <vPortExitCritical>
}
 8007d9c:	bf00      	nop
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dac:	f001 fd7e 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007db8:	2301      	movs	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e001      	b.n	8007dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dc2:	f001 fda9 	bl	8009918 <vPortExitCritical>

	return xReturn;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd8:	f001 fd68 	bl	80098ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d102      	bne.n	8007dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e001      	b.n	8007df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007df2:	f001 fd91 	bl	8009918 <vPortExitCritical>

	return xReturn;
 8007df6:	68fb      	ldr	r3, [r7, #12]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	e014      	b.n	8007e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e10:	4a0f      	ldr	r2, [pc, #60]	@ (8007e50 <vQueueAddToRegistry+0x50>)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10b      	bne.n	8007e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e1c:	490c      	ldr	r1, [pc, #48]	@ (8007e50 <vQueueAddToRegistry+0x50>)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e26:	4a0a      	ldr	r2, [pc, #40]	@ (8007e50 <vQueueAddToRegistry+0x50>)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e32:	e006      	b.n	8007e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3301      	adds	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b07      	cmp	r3, #7
 8007e3e:	d9e7      	bls.n	8007e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e40:	bf00      	nop
 8007e42:	bf00      	nop
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	200043a4 	.word	0x200043a4

08007e54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e016      	b.n	8007e90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e62:	4a10      	ldr	r2, [pc, #64]	@ (8007ea4 <vQueueUnregisterQueue+0x50>)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	4413      	add	r3, r2
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d10b      	bne.n	8007e8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea4 <vQueueUnregisterQueue+0x50>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2100      	movs	r1, #0
 8007e78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e7c:	4a09      	ldr	r2, [pc, #36]	@ (8007ea4 <vQueueUnregisterQueue+0x50>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4413      	add	r3, r2
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]
				break;
 8007e88:	e006      	b.n	8007e98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b07      	cmp	r3, #7
 8007e94:	d9e5      	bls.n	8007e62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	200043a4 	.word	0x200043a4

08007ea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eb8:	f001 fcf8 	bl	80098ac <vPortEnterCritical>
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ec2:	b25b      	sxtb	r3, r3
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d103      	bne.n	8007ed2 <vQueueWaitForMessageRestricted+0x2a>
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ed8:	b25b      	sxtb	r3, r3
 8007eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ede:	d103      	bne.n	8007ee8 <vQueueWaitForMessageRestricted+0x40>
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ee8:	f001 fd16 	bl	8009918 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	3324      	adds	r3, #36	@ 0x24
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fc6d 	bl	80087dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	f7ff fefc 	bl	8007d00 <prvUnlockQueue>
	}
 8007f08:	bf00      	nop
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	@ 0x38
 8007f14:	af04      	add	r7, sp, #16
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10d      	bne.n	8007f40 <xTaskCreateStatic+0x30>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	623b      	str	r3, [r7, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <xTaskCreateStatic+0x52>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f4a:	b672      	cpsid	i
 8007f4c:	f383 8811 	msr	BASEPRI, r3
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	b662      	cpsie	i
 8007f5a:	61fb      	str	r3, [r7, #28]
}
 8007f5c:	bf00      	nop
 8007f5e:	bf00      	nop
 8007f60:	e7fd      	b.n	8007f5e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f62:	235c      	movs	r3, #92	@ 0x5c
 8007f64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b5c      	cmp	r3, #92	@ 0x5c
 8007f6a:	d00d      	beq.n	8007f88 <xTaskCreateStatic+0x78>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	61bb      	str	r3, [r7, #24]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01e      	beq.n	8007fce <xTaskCreateStatic+0xbe>
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d01b      	beq.n	8007fce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9303      	str	r3, [sp, #12]
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	9302      	str	r3, [sp, #8]
 8007fb0:	f107 0314 	add.w	r3, r7, #20
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f850 	bl	8008066 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fc8:	f000 f8e0 	bl	800818c <prvAddNewTaskToReadyList>
 8007fcc:	e001      	b.n	8007fd2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fd2:	697b      	ldr	r3, [r7, #20]
	}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3728      	adds	r7, #40	@ 0x28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08c      	sub	sp, #48	@ 0x30
 8007fe0:	af04      	add	r7, sp, #16
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f001 fd89 	bl	8009b08 <pvPortMalloc>
 8007ff6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00e      	beq.n	800801c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ffe:	205c      	movs	r0, #92	@ 0x5c
 8008000:	f001 fd82 	bl	8009b08 <pvPortMalloc>
 8008004:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	631a      	str	r2, [r3, #48]	@ 0x30
 8008012:	e005      	b.n	8008020 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008014:	6978      	ldr	r0, [r7, #20]
 8008016:	f001 fe45 	bl	8009ca4 <vPortFree>
 800801a:	e001      	b.n	8008020 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d017      	beq.n	8008056 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800802e:	88fa      	ldrh	r2, [r7, #6]
 8008030:	2300      	movs	r3, #0
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	9302      	str	r3, [sp, #8]
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	68b9      	ldr	r1, [r7, #8]
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f80e 	bl	8008066 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800804a:	69f8      	ldr	r0, [r7, #28]
 800804c:	f000 f89e 	bl	800818c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008050:	2301      	movs	r3, #1
 8008052:	61bb      	str	r3, [r7, #24]
 8008054:	e002      	b.n	800805c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008056:	f04f 33ff 	mov.w	r3, #4294967295
 800805a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800805c:	69bb      	ldr	r3, [r7, #24]
	}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b088      	sub	sp, #32
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008076:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	461a      	mov	r2, r3
 800807e:	21a5      	movs	r1, #165	@ 0xa5
 8008080:	f00f fbd8 	bl	8017834 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800808e:	440b      	add	r3, r1
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	f023 0307 	bic.w	r3, r3, #7
 800809c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00d      	beq.n	80080c4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	b672      	cpsid	i
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	b662      	cpsie	i
 80080bc:	617b      	str	r3, [r7, #20]
}
 80080be:	bf00      	nop
 80080c0:	bf00      	nop
 80080c2:	e7fd      	b.n	80080c0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01f      	beq.n	800810a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	e012      	b.n	80080f6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	4413      	add	r3, r2
 80080d6:	7819      	ldrb	r1, [r3, #0]
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	3334      	adds	r3, #52	@ 0x34
 80080e0:	460a      	mov	r2, r1
 80080e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d006      	beq.n	80080fe <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3301      	adds	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	2b0f      	cmp	r3, #15
 80080fa:	d9e9      	bls.n	80080d0 <prvInitialiseNewTask+0x6a>
 80080fc:	e000      	b.n	8008100 <prvInitialiseNewTask+0x9a>
			{
				break;
 80080fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008108:	e003      	b.n	8008112 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800810a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008114:	2b37      	cmp	r3, #55	@ 0x37
 8008116:	d901      	bls.n	800811c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008118:	2337      	movs	r3, #55	@ 0x37
 800811a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008120:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008126:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	2200      	movs	r2, #0
 800812c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800812e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fe fce6 	bl	8006b04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	3318      	adds	r3, #24
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fce1 	bl	8006b04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008156:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815a:	2200      	movs	r2, #0
 800815c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	69b8      	ldr	r0, [r7, #24]
 800816c:	f001 fa8e 	bl	800968c <pxPortInitialiseStack>
 8008170:	4602      	mov	r2, r0
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008182:	bf00      	nop
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008194:	f001 fb8a 	bl	80098ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008198:	4b2d      	ldr	r3, [pc, #180]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3301      	adds	r3, #1
 800819e:	4a2c      	ldr	r2, [pc, #176]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 80081a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081a2:	4b2c      	ldr	r3, [pc, #176]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d109      	bne.n	80081be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081b0:	4b27      	ldr	r3, [pc, #156]	@ (8008250 <prvAddNewTaskToReadyList+0xc4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d110      	bne.n	80081da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081b8:	f000 fc46 	bl	8008a48 <prvInitialiseTaskLists>
 80081bc:	e00d      	b.n	80081da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081be:	4b26      	ldr	r3, [pc, #152]	@ (8008258 <prvAddNewTaskToReadyList+0xcc>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081c6:	4b23      	ldr	r3, [pc, #140]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d802      	bhi.n	80081da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081d4:	4a1f      	ldr	r2, [pc, #124]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081da:	4b20      	ldr	r3, [pc, #128]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3301      	adds	r3, #1
 80081e0:	4a1e      	ldr	r2, [pc, #120]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081e4:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <prvAddNewTaskToReadyList+0xd0>)
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008260 <prvAddNewTaskToReadyList+0xd4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d903      	bls.n	8008200 <prvAddNewTaskToReadyList+0x74>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fc:	4a18      	ldr	r2, [pc, #96]	@ (8008260 <prvAddNewTaskToReadyList+0xd4>)
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <prvAddNewTaskToReadyList+0xd8>)
 800820e:	441a      	add	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	3304      	adds	r3, #4
 8008214:	4619      	mov	r1, r3
 8008216:	4610      	mov	r0, r2
 8008218:	f7fe fc81 	bl	8006b1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800821c:	f001 fb7c 	bl	8009918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008220:	4b0d      	ldr	r3, [pc, #52]	@ (8008258 <prvAddNewTaskToReadyList+0xcc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00e      	beq.n	8008246 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008228:	4b0a      	ldr	r3, [pc, #40]	@ (8008254 <prvAddNewTaskToReadyList+0xc8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008232:	429a      	cmp	r2, r3
 8008234:	d207      	bcs.n	8008246 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008236:	4b0c      	ldr	r3, [pc, #48]	@ (8008268 <prvAddNewTaskToReadyList+0xdc>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	200048b8 	.word	0x200048b8
 8008254:	200043e4 	.word	0x200043e4
 8008258:	200048c4 	.word	0x200048c4
 800825c:	200048d4 	.word	0x200048d4
 8008260:	200048c0 	.word	0x200048c0
 8008264:	200043e8 	.word	0x200043e8
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008274:	2300      	movs	r3, #0
 8008276:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01a      	beq.n	80082b4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800827e:	4b15      	ldr	r3, [pc, #84]	@ (80082d4 <vTaskDelay+0x68>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00d      	beq.n	80082a2 <vTaskDelay+0x36>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	60bb      	str	r3, [r7, #8]
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	e7fd      	b.n	800829e <vTaskDelay+0x32>
			vTaskSuspendAll();
 80082a2:	f000 f887 	bl	80083b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fe33 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082ae:	f000 f88f 	bl	80083d0 <xTaskResumeAll>
 80082b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d107      	bne.n	80082ca <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <vTaskDelay+0x6c>)
 80082bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200048e0 	.word	0x200048e0
 80082d8:	e000ed04 	.word	0xe000ed04

080082dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b08a      	sub	sp, #40	@ 0x28
 80082e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ea:	463a      	mov	r2, r7
 80082ec:	1d39      	adds	r1, r7, #4
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fe fbb2 	bl	8006a5c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	9202      	str	r2, [sp, #8]
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	2300      	movs	r3, #0
 8008304:	9300      	str	r3, [sp, #0]
 8008306:	2300      	movs	r3, #0
 8008308:	460a      	mov	r2, r1
 800830a:	4924      	ldr	r1, [pc, #144]	@ (800839c <vTaskStartScheduler+0xc0>)
 800830c:	4824      	ldr	r0, [pc, #144]	@ (80083a0 <vTaskStartScheduler+0xc4>)
 800830e:	f7ff fdff 	bl	8007f10 <xTaskCreateStatic>
 8008312:	4603      	mov	r3, r0
 8008314:	4a23      	ldr	r2, [pc, #140]	@ (80083a4 <vTaskStartScheduler+0xc8>)
 8008316:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008318:	4b22      	ldr	r3, [pc, #136]	@ (80083a4 <vTaskStartScheduler+0xc8>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008320:	2301      	movs	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	e001      	b.n	800832a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d102      	bne.n	8008336 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008330:	f000 fe44 	bl	8008fbc <xTimerCreateTimerTask>
 8008334:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d118      	bne.n	800836e <vTaskStartScheduler+0x92>
	__asm volatile
 800833c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008340:	b672      	cpsid	i
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	b662      	cpsie	i
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008354:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <vTaskStartScheduler+0xcc>)
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800835c:	4b13      	ldr	r3, [pc, #76]	@ (80083ac <vTaskStartScheduler+0xd0>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008362:	4b13      	ldr	r3, [pc, #76]	@ (80083b0 <vTaskStartScheduler+0xd4>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008368:	f001 fa22 	bl	80097b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800836c:	e011      	b.n	8008392 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d10d      	bne.n	8008392 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	60fb      	str	r3, [r7, #12]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <vTaskStartScheduler+0xb2>
}
 8008392:	bf00      	nop
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	08018718 	.word	0x08018718
 80083a0:	08008a19 	.word	0x08008a19
 80083a4:	200048dc 	.word	0x200048dc
 80083a8:	200048d8 	.word	0x200048d8
 80083ac:	200048c4 	.word	0x200048c4
 80083b0:	200048bc 	.word	0x200048bc

080083b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083b8:	4b04      	ldr	r3, [pc, #16]	@ (80083cc <vTaskSuspendAll+0x18>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	4a03      	ldr	r2, [pc, #12]	@ (80083cc <vTaskSuspendAll+0x18>)
 80083c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083c2:	bf00      	nop
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	200048e0 	.word	0x200048e0

080083d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083de:	4b43      	ldr	r3, [pc, #268]	@ (80084ec <xTaskResumeAll+0x11c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <xTaskResumeAll+0x32>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008402:	f001 fa53 	bl	80098ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008406:	4b39      	ldr	r3, [pc, #228]	@ (80084ec <xTaskResumeAll+0x11c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a37      	ldr	r2, [pc, #220]	@ (80084ec <xTaskResumeAll+0x11c>)
 800840e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008410:	4b36      	ldr	r3, [pc, #216]	@ (80084ec <xTaskResumeAll+0x11c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d162      	bne.n	80084de <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008418:	4b35      	ldr	r3, [pc, #212]	@ (80084f0 <xTaskResumeAll+0x120>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05e      	beq.n	80084de <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008420:	e02f      	b.n	8008482 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008422:	4b34      	ldr	r3, [pc, #208]	@ (80084f4 <xTaskResumeAll+0x124>)
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3318      	adds	r3, #24
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fbd2 	bl	8006bd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3304      	adds	r3, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe fbcd 	bl	8006bd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008442:	4b2d      	ldr	r3, [pc, #180]	@ (80084f8 <xTaskResumeAll+0x128>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d903      	bls.n	8008452 <xTaskResumeAll+0x82>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844e:	4a2a      	ldr	r2, [pc, #168]	@ (80084f8 <xTaskResumeAll+0x128>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a27      	ldr	r2, [pc, #156]	@ (80084fc <xTaskResumeAll+0x12c>)
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f7fe fb58 	bl	8006b1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008472:	4b23      	ldr	r3, [pc, #140]	@ (8008500 <xTaskResumeAll+0x130>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	429a      	cmp	r2, r3
 800847a:	d302      	bcc.n	8008482 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800847c:	4b21      	ldr	r3, [pc, #132]	@ (8008504 <xTaskResumeAll+0x134>)
 800847e:	2201      	movs	r2, #1
 8008480:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008482:	4b1c      	ldr	r3, [pc, #112]	@ (80084f4 <xTaskResumeAll+0x124>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1cb      	bne.n	8008422 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008490:	f000 fb7a 	bl	8008b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008494:	4b1c      	ldr	r3, [pc, #112]	@ (8008508 <xTaskResumeAll+0x138>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d010      	beq.n	80084c2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084a0:	f000 f858 	bl	8008554 <xTaskIncrementTick>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80084aa:	4b16      	ldr	r3, [pc, #88]	@ (8008504 <xTaskResumeAll+0x134>)
 80084ac:	2201      	movs	r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1f1      	bne.n	80084a0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80084bc:	4b12      	ldr	r3, [pc, #72]	@ (8008508 <xTaskResumeAll+0x138>)
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084c2:	4b10      	ldr	r3, [pc, #64]	@ (8008504 <xTaskResumeAll+0x134>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ca:	2301      	movs	r3, #1
 80084cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ce:	4b0f      	ldr	r3, [pc, #60]	@ (800850c <xTaskResumeAll+0x13c>)
 80084d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084de:	f001 fa1b 	bl	8009918 <vPortExitCritical>

	return xAlreadyYielded;
 80084e2:	68bb      	ldr	r3, [r7, #8]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	200048e0 	.word	0x200048e0
 80084f0:	200048b8 	.word	0x200048b8
 80084f4:	20004878 	.word	0x20004878
 80084f8:	200048c0 	.word	0x200048c0
 80084fc:	200043e8 	.word	0x200043e8
 8008500:	200043e4 	.word	0x200043e4
 8008504:	200048cc 	.word	0x200048cc
 8008508:	200048c8 	.word	0x200048c8
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008516:	4b05      	ldr	r3, [pc, #20]	@ (800852c <xTaskGetTickCount+0x1c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800851c:	687b      	ldr	r3, [r7, #4]
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	200048bc 	.word	0x200048bc

08008530 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008536:	f001 faa1 	bl	8009a7c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800853a:	2300      	movs	r3, #0
 800853c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800853e:	4b04      	ldr	r3, [pc, #16]	@ (8008550 <xTaskGetTickCountFromISR+0x20>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008544:	683b      	ldr	r3, [r7, #0]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	200048bc 	.word	0x200048bc

08008554 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855e:	4b50      	ldr	r3, [pc, #320]	@ (80086a0 <xTaskIncrementTick+0x14c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f040 808c 	bne.w	8008680 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008568:	4b4e      	ldr	r3, [pc, #312]	@ (80086a4 <xTaskIncrementTick+0x150>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008570:	4a4c      	ldr	r2, [pc, #304]	@ (80086a4 <xTaskIncrementTick+0x150>)
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d123      	bne.n	80085c4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800857c:	4b4a      	ldr	r3, [pc, #296]	@ (80086a8 <xTaskIncrementTick+0x154>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	603b      	str	r3, [r7, #0]
}
 800859c:	bf00      	nop
 800859e:	bf00      	nop
 80085a0:	e7fd      	b.n	800859e <xTaskIncrementTick+0x4a>
 80085a2:	4b41      	ldr	r3, [pc, #260]	@ (80086a8 <xTaskIncrementTick+0x154>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	4b40      	ldr	r3, [pc, #256]	@ (80086ac <xTaskIncrementTick+0x158>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a3e      	ldr	r2, [pc, #248]	@ (80086a8 <xTaskIncrementTick+0x154>)
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4a3e      	ldr	r2, [pc, #248]	@ (80086ac <xTaskIncrementTick+0x158>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4b3e      	ldr	r3, [pc, #248]	@ (80086b0 <xTaskIncrementTick+0x15c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	4a3c      	ldr	r2, [pc, #240]	@ (80086b0 <xTaskIncrementTick+0x15c>)
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	f000 fae2 	bl	8008b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085c4:	4b3b      	ldr	r3, [pc, #236]	@ (80086b4 <xTaskIncrementTick+0x160>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d349      	bcc.n	8008662 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ce:	4b36      	ldr	r3, [pc, #216]	@ (80086a8 <xTaskIncrementTick+0x154>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d104      	bne.n	80085e2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085d8:	4b36      	ldr	r3, [pc, #216]	@ (80086b4 <xTaskIncrementTick+0x160>)
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	601a      	str	r2, [r3, #0]
					break;
 80085e0:	e03f      	b.n	8008662 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e2:	4b31      	ldr	r3, [pc, #196]	@ (80086a8 <xTaskIncrementTick+0x154>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d203      	bcs.n	8008602 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085fa:	4a2e      	ldr	r2, [pc, #184]	@ (80086b4 <xTaskIncrementTick+0x160>)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008600:	e02f      	b.n	8008662 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	3304      	adds	r3, #4
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe fae6 	bl	8006bd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3318      	adds	r3, #24
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fadd 	bl	8006bd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008622:	4b25      	ldr	r3, [pc, #148]	@ (80086b8 <xTaskIncrementTick+0x164>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <xTaskIncrementTick+0xde>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862e:	4a22      	ldr	r2, [pc, #136]	@ (80086b8 <xTaskIncrementTick+0x164>)
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4a1f      	ldr	r2, [pc, #124]	@ (80086bc <xTaskIncrementTick+0x168>)
 8008640:	441a      	add	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	3304      	adds	r3, #4
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f7fe fa68 	bl	8006b1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008652:	4b1b      	ldr	r3, [pc, #108]	@ (80086c0 <xTaskIncrementTick+0x16c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008658:	429a      	cmp	r2, r3
 800865a:	d3b8      	bcc.n	80085ce <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800865c:	2301      	movs	r3, #1
 800865e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008660:	e7b5      	b.n	80085ce <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008662:	4b17      	ldr	r3, [pc, #92]	@ (80086c0 <xTaskIncrementTick+0x16c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008668:	4914      	ldr	r1, [pc, #80]	@ (80086bc <xTaskIncrementTick+0x168>)
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	440b      	add	r3, r1
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d907      	bls.n	800868a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800867a:	2301      	movs	r3, #1
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e004      	b.n	800868a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008680:	4b10      	ldr	r3, [pc, #64]	@ (80086c4 <xTaskIncrementTick+0x170>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	4a0f      	ldr	r2, [pc, #60]	@ (80086c4 <xTaskIncrementTick+0x170>)
 8008688:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800868a:	4b0f      	ldr	r3, [pc, #60]	@ (80086c8 <xTaskIncrementTick+0x174>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008696:	697b      	ldr	r3, [r7, #20]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	200048e0 	.word	0x200048e0
 80086a4:	200048bc 	.word	0x200048bc
 80086a8:	20004870 	.word	0x20004870
 80086ac:	20004874 	.word	0x20004874
 80086b0:	200048d0 	.word	0x200048d0
 80086b4:	200048d8 	.word	0x200048d8
 80086b8:	200048c0 	.word	0x200048c0
 80086bc:	200043e8 	.word	0x200043e8
 80086c0:	200043e4 	.word	0x200043e4
 80086c4:	200048c8 	.word	0x200048c8
 80086c8:	200048cc 	.word	0x200048cc

080086cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086d2:	4b29      	ldr	r3, [pc, #164]	@ (8008778 <vTaskSwitchContext+0xac>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086da:	4b28      	ldr	r3, [pc, #160]	@ (800877c <vTaskSwitchContext+0xb0>)
 80086dc:	2201      	movs	r2, #1
 80086de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086e0:	e044      	b.n	800876c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80086e2:	4b26      	ldr	r3, [pc, #152]	@ (800877c <vTaskSwitchContext+0xb0>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086e8:	4b25      	ldr	r3, [pc, #148]	@ (8008780 <vTaskSwitchContext+0xb4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	e013      	b.n	8008718 <vTaskSwitchContext+0x4c>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10d      	bne.n	8008712 <vTaskSwitchContext+0x46>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	b672      	cpsid	i
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	b662      	cpsie	i
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <vTaskSwitchContext+0x42>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3b01      	subs	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
 8008718:	491a      	ldr	r1, [pc, #104]	@ (8008784 <vTaskSwitchContext+0xb8>)
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0e1      	beq.n	80086f0 <vTaskSwitchContext+0x24>
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4613      	mov	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4413      	add	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4a13      	ldr	r2, [pc, #76]	@ (8008784 <vTaskSwitchContext+0xb8>)
 8008738:	4413      	add	r3, r2
 800873a:	60bb      	str	r3, [r7, #8]
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	605a      	str	r2, [r3, #4]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3308      	adds	r3, #8
 800874e:	429a      	cmp	r2, r3
 8008750:	d104      	bne.n	800875c <vTaskSwitchContext+0x90>
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	605a      	str	r2, [r3, #4]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	4a09      	ldr	r2, [pc, #36]	@ (8008788 <vTaskSwitchContext+0xbc>)
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	4a06      	ldr	r2, [pc, #24]	@ (8008780 <vTaskSwitchContext+0xb4>)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6013      	str	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	3714      	adds	r7, #20
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	200048e0 	.word	0x200048e0
 800877c:	200048cc 	.word	0x200048cc
 8008780:	200048c0 	.word	0x200048c0
 8008784:	200043e8 	.word	0x200043e8
 8008788:	200043e4 	.word	0x200043e4

0800878c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10d      	bne.n	80087b8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800879c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a0:	b672      	cpsid	i
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	b662      	cpsie	i
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087b8:	4b07      	ldr	r3, [pc, #28]	@ (80087d8 <vTaskPlaceOnEventList+0x4c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3318      	adds	r3, #24
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7fe f9d0 	bl	8006b66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087c6:	2101      	movs	r1, #1
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f000 fba3 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	200043e4 	.word	0x200043e4

080087dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10d      	bne.n	800880a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	617b      	str	r3, [r7, #20]
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop
 8008808:	e7fd      	b.n	8008806 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800880a:	4b0a      	ldr	r3, [pc, #40]	@ (8008834 <vTaskPlaceOnEventListRestricted+0x58>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3318      	adds	r3, #24
 8008810:	4619      	mov	r1, r3
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f7fe f983 	bl	8006b1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	68b8      	ldr	r0, [r7, #8]
 8008828:	f000 fb74 	bl	8008f14 <prvAddCurrentTaskToDelayedList>
	}
 800882c:	bf00      	nop
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	200043e4 	.word	0x200043e4

08008838 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10d      	bne.n	800886a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008852:	b672      	cpsid	i
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	b662      	cpsie	i
 8008862:	60fb      	str	r3, [r7, #12]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3318      	adds	r3, #24
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe f9b2 	bl	8006bd8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008874:	4b1d      	ldr	r3, [pc, #116]	@ (80088ec <xTaskRemoveFromEventList+0xb4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11d      	bne.n	80088b8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	3304      	adds	r3, #4
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe f9a9 	bl	8006bd8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800888a:	4b19      	ldr	r3, [pc, #100]	@ (80088f0 <xTaskRemoveFromEventList+0xb8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d903      	bls.n	800889a <xTaskRemoveFromEventList+0x62>
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	4a16      	ldr	r2, [pc, #88]	@ (80088f0 <xTaskRemoveFromEventList+0xb8>)
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889e:	4613      	mov	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4a13      	ldr	r2, [pc, #76]	@ (80088f4 <xTaskRemoveFromEventList+0xbc>)
 80088a8:	441a      	add	r2, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3304      	adds	r3, #4
 80088ae:	4619      	mov	r1, r3
 80088b0:	4610      	mov	r0, r2
 80088b2:	f7fe f934 	bl	8006b1e <vListInsertEnd>
 80088b6:	e005      	b.n	80088c4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	3318      	adds	r3, #24
 80088bc:	4619      	mov	r1, r3
 80088be:	480e      	ldr	r0, [pc, #56]	@ (80088f8 <xTaskRemoveFromEventList+0xc0>)
 80088c0:	f7fe f92d 	bl	8006b1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c8:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <xTaskRemoveFromEventList+0xc4>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d905      	bls.n	80088de <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088d2:	2301      	movs	r3, #1
 80088d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008900 <xTaskRemoveFromEventList+0xc8>)
 80088d8:	2201      	movs	r2, #1
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e001      	b.n	80088e2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088e2:	697b      	ldr	r3, [r7, #20]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	200048e0 	.word	0x200048e0
 80088f0:	200048c0 	.word	0x200048c0
 80088f4:	200043e8 	.word	0x200043e8
 80088f8:	20004878 	.word	0x20004878
 80088fc:	200043e4 	.word	0x200043e4
 8008900:	200048cc 	.word	0x200048cc

08008904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <vTaskInternalSetTimeOutState+0x24>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008914:	4b05      	ldr	r3, [pc, #20]	@ (800892c <vTaskInternalSetTimeOutState+0x28>)
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	605a      	str	r2, [r3, #4]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	200048d0 	.word	0x200048d0
 800892c:	200048bc 	.word	0x200048bc

08008930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10d      	bne.n	800895c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008944:	b672      	cpsid	i
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	b662      	cpsie	i
 8008954:	613b      	str	r3, [r7, #16]
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10d      	bne.n	800897e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008966:	b672      	cpsid	i
 8008968:	f383 8811 	msr	BASEPRI, r3
 800896c:	f3bf 8f6f 	isb	sy
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	b662      	cpsie	i
 8008976:	60fb      	str	r3, [r7, #12]
}
 8008978:	bf00      	nop
 800897a:	bf00      	nop
 800897c:	e7fd      	b.n	800897a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800897e:	f000 ff95 	bl	80098ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008982:	4b1d      	ldr	r3, [pc, #116]	@ (80089f8 <xTaskCheckForTimeOut+0xc8>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	69ba      	ldr	r2, [r7, #24]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899a:	d102      	bne.n	80089a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	61fb      	str	r3, [r7, #28]
 80089a0:	e023      	b.n	80089ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4b15      	ldr	r3, [pc, #84]	@ (80089fc <xTaskCheckForTimeOut+0xcc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d007      	beq.n	80089be <xTaskCheckForTimeOut+0x8e>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d302      	bcc.n	80089be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e015      	b.n	80089ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d20b      	bcs.n	80089e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f7ff ff95 	bl	8008904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089da:	2300      	movs	r3, #0
 80089dc:	61fb      	str	r3, [r7, #28]
 80089de:	e004      	b.n	80089ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089ea:	f000 ff95 	bl	8009918 <vPortExitCritical>

	return xReturn;
 80089ee:	69fb      	ldr	r3, [r7, #28]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3720      	adds	r7, #32
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	200048bc 	.word	0x200048bc
 80089fc:	200048d0 	.word	0x200048d0

08008a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a04:	4b03      	ldr	r3, [pc, #12]	@ (8008a14 <vTaskMissedYield+0x14>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
}
 8008a0a:	bf00      	nop
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	200048cc 	.word	0x200048cc

08008a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a20:	f000 f852 	bl	8008ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <prvIdleTask+0x28>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d9f9      	bls.n	8008a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a2c:	4b05      	ldr	r3, [pc, #20]	@ (8008a44 <prvIdleTask+0x2c>)
 8008a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a32:	601a      	str	r2, [r3, #0]
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a3c:	e7f0      	b.n	8008a20 <prvIdleTask+0x8>
 8008a3e:	bf00      	nop
 8008a40:	200043e8 	.word	0x200043e8
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	e00c      	b.n	8008a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4613      	mov	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4a12      	ldr	r2, [pc, #72]	@ (8008aa8 <prvInitialiseTaskLists+0x60>)
 8008a60:	4413      	add	r3, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe f82e 	bl	8006ac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	607b      	str	r3, [r7, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b37      	cmp	r3, #55	@ 0x37
 8008a72:	d9ef      	bls.n	8008a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a74:	480d      	ldr	r0, [pc, #52]	@ (8008aac <prvInitialiseTaskLists+0x64>)
 8008a76:	f7fe f825 	bl	8006ac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a7a:	480d      	ldr	r0, [pc, #52]	@ (8008ab0 <prvInitialiseTaskLists+0x68>)
 8008a7c:	f7fe f822 	bl	8006ac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a80:	480c      	ldr	r0, [pc, #48]	@ (8008ab4 <prvInitialiseTaskLists+0x6c>)
 8008a82:	f7fe f81f 	bl	8006ac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a86:	480c      	ldr	r0, [pc, #48]	@ (8008ab8 <prvInitialiseTaskLists+0x70>)
 8008a88:	f7fe f81c 	bl	8006ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a8c:	480b      	ldr	r0, [pc, #44]	@ (8008abc <prvInitialiseTaskLists+0x74>)
 8008a8e:	f7fe f819 	bl	8006ac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <prvInitialiseTaskLists+0x78>)
 8008a94:	4a05      	ldr	r2, [pc, #20]	@ (8008aac <prvInitialiseTaskLists+0x64>)
 8008a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <prvInitialiseTaskLists+0x7c>)
 8008a9a:	4a05      	ldr	r2, [pc, #20]	@ (8008ab0 <prvInitialiseTaskLists+0x68>)
 8008a9c:	601a      	str	r2, [r3, #0]
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200043e8 	.word	0x200043e8
 8008aac:	20004848 	.word	0x20004848
 8008ab0:	2000485c 	.word	0x2000485c
 8008ab4:	20004878 	.word	0x20004878
 8008ab8:	2000488c 	.word	0x2000488c
 8008abc:	200048a4 	.word	0x200048a4
 8008ac0:	20004870 	.word	0x20004870
 8008ac4:	20004874 	.word	0x20004874

08008ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ace:	e019      	b.n	8008b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ad0:	f000 feec 	bl	80098ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad4:	4b10      	ldr	r3, [pc, #64]	@ (8008b18 <prvCheckTasksWaitingTermination+0x50>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe f879 	bl	8006bd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <prvCheckTasksWaitingTermination+0x54>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	4a0b      	ldr	r2, [pc, #44]	@ (8008b1c <prvCheckTasksWaitingTermination+0x54>)
 8008aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008af0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <prvCheckTasksWaitingTermination+0x58>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4a0a      	ldr	r2, [pc, #40]	@ (8008b20 <prvCheckTasksWaitingTermination+0x58>)
 8008af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008afa:	f000 ff0d 	bl	8009918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f810 	bl	8008b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b04:	4b06      	ldr	r3, [pc, #24]	@ (8008b20 <prvCheckTasksWaitingTermination+0x58>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e1      	bne.n	8008ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	2000488c 	.word	0x2000488c
 8008b1c:	200048b8 	.word	0x200048b8
 8008b20:	200048a0 	.word	0x200048a0

08008b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d108      	bne.n	8008b48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f8b2 	bl	8009ca4 <vPortFree>
				vPortFree( pxTCB );
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f8af 	bl	8009ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b46:	e01b      	b.n	8008b80 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d103      	bne.n	8008b5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 f8a6 	bl	8009ca4 <vPortFree>
	}
 8008b58:	e012      	b.n	8008b80 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d00d      	beq.n	8008b80 <prvDeleteTCB+0x5c>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b68:	b672      	cpsid	i
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	b662      	cpsie	i
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	bf00      	nop
 8008b7e:	e7fd      	b.n	8008b7c <prvDeleteTCB+0x58>
	}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc0 <prvResetNextTaskUnblockTime+0x38>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d104      	bne.n	8008ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b98:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ba0:	e008      	b.n	8008bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba2:	4b07      	ldr	r3, [pc, #28]	@ (8008bc0 <prvResetNextTaskUnblockTime+0x38>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	4a04      	ldr	r2, [pc, #16]	@ (8008bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008bb2:	6013      	str	r3, [r2, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20004870 	.word	0x20004870
 8008bc4:	200048d8 	.word	0x200048d8

08008bc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008bce:	4b05      	ldr	r3, [pc, #20]	@ (8008be4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008bd4:	687b      	ldr	r3, [r7, #4]
	}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	200043e4 	.word	0x200043e4

08008be8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bee:	4b0b      	ldr	r3, [pc, #44]	@ (8008c1c <xTaskGetSchedulerState+0x34>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d102      	bne.n	8008bfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	607b      	str	r3, [r7, #4]
 8008bfa:	e008      	b.n	8008c0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bfc:	4b08      	ldr	r3, [pc, #32]	@ (8008c20 <xTaskGetSchedulerState+0x38>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c04:	2302      	movs	r3, #2
 8008c06:	607b      	str	r3, [r7, #4]
 8008c08:	e001      	b.n	8008c0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c0e:	687b      	ldr	r3, [r7, #4]
	}
 8008c10:	4618      	mov	r0, r3
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	200048c4 	.word	0x200048c4
 8008c20:	200048e0 	.word	0x200048e0

08008c24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c30:	2300      	movs	r3, #0
 8008c32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d051      	beq.n	8008cde <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ce8 <xTaskPriorityInherit+0xc4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d241      	bcs.n	8008ccc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	db06      	blt.n	8008c5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c50:	4b25      	ldr	r3, [pc, #148]	@ (8008ce8 <xTaskPriorityInherit+0xc4>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6959      	ldr	r1, [r3, #20]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c66:	4613      	mov	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cec <xTaskPriorityInherit+0xc8>)
 8008c70:	4413      	add	r3, r2
 8008c72:	4299      	cmp	r1, r3
 8008c74:	d122      	bne.n	8008cbc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd ffac 	bl	8006bd8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c80:	4b19      	ldr	r3, [pc, #100]	@ (8008ce8 <xTaskPriorityInherit+0xc4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8e:	4b18      	ldr	r3, [pc, #96]	@ (8008cf0 <xTaskPriorityInherit+0xcc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d903      	bls.n	8008c9e <xTaskPriorityInherit+0x7a>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <xTaskPriorityInherit+0xcc>)
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4a10      	ldr	r2, [pc, #64]	@ (8008cec <xTaskPriorityInherit+0xc8>)
 8008cac:	441a      	add	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	f7fd ff32 	bl	8006b1e <vListInsertEnd>
 8008cba:	e004      	b.n	8008cc6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <xTaskPriorityInherit+0xc4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	e008      	b.n	8008cde <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cd0:	4b05      	ldr	r3, [pc, #20]	@ (8008ce8 <xTaskPriorityInherit+0xc4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d201      	bcs.n	8008cde <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cde:	68fb      	ldr	r3, [r7, #12]
	}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	200043e4 	.word	0x200043e4
 8008cec:	200043e8 	.word	0x200043e8
 8008cf0:	200048c0 	.word	0x200048c0

08008cf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d00:	2300      	movs	r3, #0
 8008d02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d05c      	beq.n	8008dc4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d0a:	4b31      	ldr	r3, [pc, #196]	@ (8008dd0 <xTaskPriorityDisinherit+0xdc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	693a      	ldr	r2, [r7, #16]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d00d      	beq.n	8008d30 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	b672      	cpsid	i
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	b662      	cpsie	i
 8008d28:	60fb      	str	r3, [r7, #12]
}
 8008d2a:	bf00      	nop
 8008d2c:	bf00      	nop
 8008d2e:	e7fd      	b.n	8008d2c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10d      	bne.n	8008d54 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3c:	b672      	cpsid	i
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	b662      	cpsie	i
 8008d4c:	60bb      	str	r3, [r7, #8]
}
 8008d4e:	bf00      	nop
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d58:	1e5a      	subs	r2, r3, #1
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d02c      	beq.n	8008dc4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d128      	bne.n	8008dc4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fd ff2e 	bl	8006bd8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d94:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <xTaskPriorityDisinherit+0xe0>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d903      	bls.n	8008da4 <xTaskPriorityDisinherit+0xb0>
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	4a0c      	ldr	r2, [pc, #48]	@ (8008dd4 <xTaskPriorityDisinherit+0xe0>)
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4a09      	ldr	r2, [pc, #36]	@ (8008dd8 <xTaskPriorityDisinherit+0xe4>)
 8008db2:	441a      	add	r2, r3
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f7fd feaf 	bl	8006b1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008dc4:	697b      	ldr	r3, [r7, #20]
	}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	200043e4 	.word	0x200043e4
 8008dd4:	200048c0 	.word	0x200048c0
 8008dd8:	200043e8 	.word	0x200043e8

08008ddc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d070      	beq.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10d      	bne.n	8008e18 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e00:	b672      	cpsid	i
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	b662      	cpsie	i
 8008e10:	60fb      	str	r3, [r7, #12]
}
 8008e12:	bf00      	nop
 8008e14:	bf00      	nop
 8008e16:	e7fd      	b.n	8008e14 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d902      	bls.n	8008e28 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	61fb      	str	r3, [r7, #28]
 8008e26:	e002      	b.n	8008e2e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	69fa      	ldr	r2, [r7, #28]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d04e      	beq.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d149      	bne.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e42:	4b27      	ldr	r3, [pc, #156]	@ (8008ee0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d10d      	bne.n	8008e68 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	b672      	cpsid	i
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	b662      	cpsie	i
 8008e60:	60bb      	str	r3, [r7, #8]
}
 8008e62:	bf00      	nop
 8008e64:	bf00      	nop
 8008e66:	e7fd      	b.n	8008e64 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	db04      	blt.n	8008e86 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	6959      	ldr	r1, [r3, #20]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4a13      	ldr	r2, [pc, #76]	@ (8008ee4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008e96:	4413      	add	r3, r2
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d11c      	bne.n	8008ed6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fe99 	bl	8006bd8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d903      	bls.n	8008eba <vTaskPriorityDisinheritAfterTimeout+0xde>
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a07      	ldr	r2, [pc, #28]	@ (8008ee4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008ec8:	441a      	add	r2, r3
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4619      	mov	r1, r3
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	f7fd fe24 	bl	8006b1e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ed6:	bf00      	nop
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200043e4 	.word	0x200043e4
 8008ee4:	200043e8 	.word	0x200043e8
 8008ee8:	200048c0 	.word	0x200048c0

08008eec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ef0:	4b07      	ldr	r3, [pc, #28]	@ (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	@ (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008efe:	3201      	adds	r2, #1
 8008f00:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008f02:	4b03      	ldr	r3, [pc, #12]	@ (8008f10 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f04:	681b      	ldr	r3, [r3, #0]
	}
 8008f06:	4618      	mov	r0, r3
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	200043e4 	.word	0x200043e4

08008f14 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f1e:	4b21      	ldr	r3, [pc, #132]	@ (8008fa4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f24:	4b20      	ldr	r3, [pc, #128]	@ (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fd fe54 	bl	8006bd8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d10a      	bne.n	8008f4e <prvAddCurrentTaskToDelayedList+0x3a>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d007      	beq.n	8008f4e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4619      	mov	r1, r3
 8008f46:	4819      	ldr	r0, [pc, #100]	@ (8008fac <prvAddCurrentTaskToDelayedList+0x98>)
 8008f48:	f7fd fde9 	bl	8006b1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f4c:	e026      	b.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4413      	add	r3, r2
 8008f54:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f56:	4b14      	ldr	r3, [pc, #80]	@ (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d209      	bcs.n	8008f7a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f66:	4b12      	ldr	r3, [pc, #72]	@ (8008fb0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	4619      	mov	r1, r3
 8008f72:	4610      	mov	r0, r2
 8008f74:	f7fd fdf7 	bl	8006b66 <vListInsert>
}
 8008f78:	e010      	b.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008fb4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008fa8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f7fd fded 	bl	8006b66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d202      	bcs.n	8008f9c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f96:	4a08      	ldr	r2, [pc, #32]	@ (8008fb8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6013      	str	r3, [r2, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200048bc 	.word	0x200048bc
 8008fa8:	200043e4 	.word	0x200043e4
 8008fac:	200048a4 	.word	0x200048a4
 8008fb0:	20004874 	.word	0x20004874
 8008fb4:	20004870 	.word	0x20004870
 8008fb8:	200048d8 	.word	0x200048d8

08008fbc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08a      	sub	sp, #40	@ 0x28
 8008fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008fc6:	f000 fb21 	bl	800960c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008fca:	4b1e      	ldr	r3, [pc, #120]	@ (8009044 <xTimerCreateTimerTask+0x88>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d021      	beq.n	8009016 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008fda:	1d3a      	adds	r2, r7, #4
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fd fd53 	bl	8006a90 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	9202      	str	r2, [sp, #8]
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	460a      	mov	r2, r1
 8008ffc:	4912      	ldr	r1, [pc, #72]	@ (8009048 <xTimerCreateTimerTask+0x8c>)
 8008ffe:	4813      	ldr	r0, [pc, #76]	@ (800904c <xTimerCreateTimerTask+0x90>)
 8009000:	f7fe ff86 	bl	8007f10 <xTaskCreateStatic>
 8009004:	4603      	mov	r3, r0
 8009006:	4a12      	ldr	r2, [pc, #72]	@ (8009050 <xTimerCreateTimerTask+0x94>)
 8009008:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800900a:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <xTimerCreateTimerTask+0x94>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009012:	2301      	movs	r3, #1
 8009014:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10d      	bne.n	8009038 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800901c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009020:	b672      	cpsid	i
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	b662      	cpsie	i
 8009030:	613b      	str	r3, [r7, #16]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009038:	697b      	ldr	r3, [r7, #20]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3718      	adds	r7, #24
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20004914 	.word	0x20004914
 8009048:	08018720 	.word	0x08018720
 800904c:	08009195 	.word	0x08009195
 8009050:	20004918 	.word	0x20004918

08009054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	@ 0x28
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009062:	2300      	movs	r3, #0
 8009064:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <xTimerGenericCommand+0x34>
	__asm volatile
 800906c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009070:	b672      	cpsid	i
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	b662      	cpsie	i
 8009080:	623b      	str	r3, [r7, #32]
}
 8009082:	bf00      	nop
 8009084:	bf00      	nop
 8009086:	e7fd      	b.n	8009084 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009088:	4b19      	ldr	r3, [pc, #100]	@ (80090f0 <xTimerGenericCommand+0x9c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d02a      	beq.n	80090e6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	2b05      	cmp	r3, #5
 80090a0:	dc18      	bgt.n	80090d4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090a2:	f7ff fda1 	bl	8008be8 <xTaskGetSchedulerState>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d109      	bne.n	80090c0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090ac:	4b10      	ldr	r3, [pc, #64]	@ (80090f0 <xTimerGenericCommand+0x9c>)
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	f107 0110 	add.w	r1, r7, #16
 80090b4:	2300      	movs	r3, #0
 80090b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b8:	f7fe f844 	bl	8007144 <xQueueGenericSend>
 80090bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80090be:	e012      	b.n	80090e6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090c0:	4b0b      	ldr	r3, [pc, #44]	@ (80090f0 <xTimerGenericCommand+0x9c>)
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	f107 0110 	add.w	r1, r7, #16
 80090c8:	2300      	movs	r3, #0
 80090ca:	2200      	movs	r2, #0
 80090cc:	f7fe f83a 	bl	8007144 <xQueueGenericSend>
 80090d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80090d2:	e008      	b.n	80090e6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80090d4:	4b06      	ldr	r3, [pc, #24]	@ (80090f0 <xTimerGenericCommand+0x9c>)
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	f107 0110 	add.w	r1, r7, #16
 80090dc:	2300      	movs	r3, #0
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	f7fe f93a 	bl	8007358 <xQueueGenericSendFromISR>
 80090e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3728      	adds	r7, #40	@ 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20004914 	.word	0x20004914

080090f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fe:	4b24      	ldr	r3, [pc, #144]	@ (8009190 <prvProcessExpiredTimer+0x9c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	3304      	adds	r3, #4
 800910c:	4618      	mov	r0, r3
 800910e:	f7fd fd63 	bl	8006bd8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d025      	beq.n	800916c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	699a      	ldr	r2, [r3, #24]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	18d1      	adds	r1, r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	6978      	ldr	r0, [r7, #20]
 800912e:	f000 f8d7 	bl	80092e0 <prvInsertTimerInActiveList>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d022      	beq.n	800917e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009138:	2300      	movs	r3, #0
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	2300      	movs	r3, #0
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	2100      	movs	r1, #0
 8009142:	6978      	ldr	r0, [r7, #20]
 8009144:	f7ff ff86 	bl	8009054 <xTimerGenericCommand>
 8009148:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d116      	bne.n	800917e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009154:	b672      	cpsid	i
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	b662      	cpsie	i
 8009164:	60fb      	str	r3, [r7, #12]
}
 8009166:	bf00      	nop
 8009168:	bf00      	nop
 800916a:	e7fd      	b.n	8009168 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	b2da      	uxtb	r2, r3
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	4798      	blx	r3
}
 8009186:	bf00      	nop
 8009188:	3718      	adds	r7, #24
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	2000490c 	.word	0x2000490c

08009194 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800919c:	f107 0308 	add.w	r3, r7, #8
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 f859 	bl	8009258 <prvGetNextExpireTime>
 80091a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	4619      	mov	r1, r3
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 f805 	bl	80091bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091b2:	f000 f8d7 	bl	8009364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091b6:	bf00      	nop
 80091b8:	e7f0      	b.n	800919c <prvTimerTask+0x8>
	...

080091bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091c6:	f7ff f8f5 	bl	80083b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091ca:	f107 0308 	add.w	r3, r7, #8
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f866 	bl	80092a0 <prvSampleTimeNow>
 80091d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d130      	bne.n	800923e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10a      	bne.n	80091f8 <prvProcessTimerOrBlockTask+0x3c>
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d806      	bhi.n	80091f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80091ea:	f7ff f8f1 	bl	80083d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff7f 	bl	80090f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091f6:	e024      	b.n	8009242 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091fe:	4b13      	ldr	r3, [pc, #76]	@ (800924c <prvProcessTimerOrBlockTask+0x90>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <prvProcessTimerOrBlockTask+0x50>
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <prvProcessTimerOrBlockTask+0x52>
 800920c:	2300      	movs	r3, #0
 800920e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009210:	4b0f      	ldr	r3, [pc, #60]	@ (8009250 <prvProcessTimerOrBlockTask+0x94>)
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	4619      	mov	r1, r3
 800921e:	f7fe fe43 	bl	8007ea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009222:	f7ff f8d5 	bl	80083d0 <xTaskResumeAll>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800922c:	4b09      	ldr	r3, [pc, #36]	@ (8009254 <prvProcessTimerOrBlockTask+0x98>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	f3bf 8f6f 	isb	sy
}
 800923c:	e001      	b.n	8009242 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800923e:	f7ff f8c7 	bl	80083d0 <xTaskResumeAll>
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20004910 	.word	0x20004910
 8009250:	20004914 	.word	0x20004914
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009260:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <prvGetNextExpireTime+0x44>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <prvGetNextExpireTime+0x16>
 800926a:	2201      	movs	r2, #1
 800926c:	e000      	b.n	8009270 <prvGetNextExpireTime+0x18>
 800926e:	2200      	movs	r2, #0
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d105      	bne.n	8009288 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800927c:	4b07      	ldr	r3, [pc, #28]	@ (800929c <prvGetNextExpireTime+0x44>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	e001      	b.n	800928c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800928c:	68fb      	ldr	r3, [r7, #12]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	2000490c 	.word	0x2000490c

080092a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092a8:	f7ff f932 	bl	8008510 <xTaskGetTickCount>
 80092ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092ae:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <prvSampleTimeNow+0x3c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d205      	bcs.n	80092c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092b8:	f000 f940 	bl	800953c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	e002      	b.n	80092ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092ca:	4a04      	ldr	r2, [pc, #16]	@ (80092dc <prvSampleTimeNow+0x3c>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092d0:	68fb      	ldr	r3, [r7, #12]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	2000491c 	.word	0x2000491c

080092e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	429a      	cmp	r2, r3
 8009304:	d812      	bhi.n	800932c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	1ad2      	subs	r2, r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	429a      	cmp	r2, r3
 8009312:	d302      	bcc.n	800931a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009314:	2301      	movs	r3, #1
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e01b      	b.n	8009352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800931a:	4b10      	ldr	r3, [pc, #64]	@ (800935c <prvInsertTimerInActiveList+0x7c>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3304      	adds	r3, #4
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f7fd fc1e 	bl	8006b66 <vListInsert>
 800932a:	e012      	b.n	8009352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d206      	bcs.n	8009342 <prvInsertTimerInActiveList+0x62>
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e007      	b.n	8009352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009342:	4b07      	ldr	r3, [pc, #28]	@ (8009360 <prvInsertTimerInActiveList+0x80>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fd fc0a 	bl	8006b66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009352:	697b      	ldr	r3, [r7, #20]
}
 8009354:	4618      	mov	r0, r3
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20004910 	.word	0x20004910
 8009360:	2000490c 	.word	0x2000490c

08009364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	@ 0x38
 8009368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800936a:	e0d4      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da1b      	bge.n	80093aa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009372:	1d3b      	adds	r3, r7, #4
 8009374:	3304      	adds	r3, #4
 8009376:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10d      	bne.n	800939a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	b672      	cpsid	i
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	b662      	cpsie	i
 8009392:	61fb      	str	r3, [r7, #28]
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	e7fd      	b.n	8009396 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800939a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a0:	6850      	ldr	r0, [r2, #4]
 80093a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093a4:	6892      	ldr	r2, [r2, #8]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f2c0 80b2 	blt.w	8009516 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c0:	3304      	adds	r3, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fd fc08 	bl	8006bd8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093c8:	463b      	mov	r3, r7
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7ff ff68 	bl	80092a0 <prvSampleTimeNow>
 80093d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b09      	cmp	r3, #9
 80093d6:	f200 809b 	bhi.w	8009510 <prvProcessReceivedCommands+0x1ac>
 80093da:	a201      	add	r2, pc, #4	@ (adr r2, 80093e0 <prvProcessReceivedCommands+0x7c>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	08009409 	.word	0x08009409
 80093e4:	08009409 	.word	0x08009409
 80093e8:	08009409 	.word	0x08009409
 80093ec:	08009483 	.word	0x08009483
 80093f0:	08009497 	.word	0x08009497
 80093f4:	080094e7 	.word	0x080094e7
 80093f8:	08009409 	.word	0x08009409
 80093fc:	08009409 	.word	0x08009409
 8009400:	08009483 	.word	0x08009483
 8009404:	08009497 	.word	0x08009497
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	b2da      	uxtb	r2, r3
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	18d1      	adds	r1, r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009426:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009428:	f7ff ff5a 	bl	80092e0 <prvInsertTimerInActiveList>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d070      	beq.n	8009514 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009438:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d065      	beq.n	8009514 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	441a      	add	r2, r3
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	2100      	movs	r1, #0
 8009458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800945a:	f7ff fdfb 	bl	8009054 <xTimerGenericCommand>
 800945e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d156      	bne.n	8009514 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	b672      	cpsid	i
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	b662      	cpsie	i
 800947a:	61bb      	str	r3, [r7, #24]
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	e7fd      	b.n	800947e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	b2da      	uxtb	r2, r3
 800948e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009490:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009494:	e03f      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800949c:	f043 0301 	orr.w	r3, r3, #1
 80094a0:	b2da      	uxtb	r2, r3
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094a8:	68ba      	ldr	r2, [r7, #8]
 80094aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10d      	bne.n	80094d2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	b672      	cpsid	i
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	b662      	cpsie	i
 80094ca:	617b      	str	r3, [r7, #20]
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	e7fd      	b.n	80094ce <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	18d1      	adds	r1, r2, r3
 80094da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094e0:	f7ff fefe 	bl	80092e0 <prvInsertTimerInActiveList>
					break;
 80094e4:	e017      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80094e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80094f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094f6:	f000 fbd5 	bl	8009ca4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80094fa:	e00c      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	b2da      	uxtb	r2, r3
 8009508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800950e:	e002      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8009510:	bf00      	nop
 8009512:	e000      	b.n	8009516 <prvProcessReceivedCommands+0x1b2>
					break;
 8009514:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009516:	4b08      	ldr	r3, [pc, #32]	@ (8009538 <prvProcessReceivedCommands+0x1d4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	1d39      	adds	r1, r7, #4
 800951c:	2200      	movs	r2, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f7fe f856 	bl	80075d0 <xQueueReceive>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	f47f af20 	bne.w	800936c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	3730      	adds	r7, #48	@ 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20004914 	.word	0x20004914

0800953c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009542:	e04b      	b.n	80095dc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009544:	4b2f      	ldr	r3, [pc, #188]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800954e:	4b2d      	ldr	r3, [pc, #180]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3304      	adds	r3, #4
 800955c:	4618      	mov	r0, r3
 800955e:	f7fd fb3b 	bl	8006bd8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	d031      	beq.n	80095dc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	699b      	ldr	r3, [r3, #24]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4413      	add	r3, r2
 8009580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	429a      	cmp	r2, r3
 8009588:	d90e      	bls.n	80095a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009596:	4b1b      	ldr	r3, [pc, #108]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3304      	adds	r3, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f7fd fae0 	bl	8006b66 <vListInsert>
 80095a6:	e019      	b.n	80095dc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095a8:	2300      	movs	r3, #0
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	2300      	movs	r3, #0
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	2100      	movs	r1, #0
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff fd4e 	bl	8009054 <xTimerGenericCommand>
 80095b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <prvSwitchTimerLists+0xa0>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	b672      	cpsid	i
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	b662      	cpsie	i
 80095d4:	603b      	str	r3, [r7, #0]
}
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
 80095da:	e7fd      	b.n	80095d8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095dc:	4b09      	ldr	r3, [pc, #36]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1ae      	bne.n	8009544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095e6:	4b07      	ldr	r3, [pc, #28]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80095ec:	4b06      	ldr	r3, [pc, #24]	@ (8009608 <prvSwitchTimerLists+0xcc>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a04      	ldr	r2, [pc, #16]	@ (8009604 <prvSwitchTimerLists+0xc8>)
 80095f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80095f4:	4a04      	ldr	r2, [pc, #16]	@ (8009608 <prvSwitchTimerLists+0xcc>)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	6013      	str	r3, [r2, #0]
}
 80095fa:	bf00      	nop
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	2000490c 	.word	0x2000490c
 8009608:	20004910 	.word	0x20004910

0800960c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009612:	f000 f94b 	bl	80098ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009616:	4b15      	ldr	r3, [pc, #84]	@ (800966c <prvCheckForValidListAndQueue+0x60>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d120      	bne.n	8009660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800961e:	4814      	ldr	r0, [pc, #80]	@ (8009670 <prvCheckForValidListAndQueue+0x64>)
 8009620:	f7fd fa50 	bl	8006ac4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009624:	4813      	ldr	r0, [pc, #76]	@ (8009674 <prvCheckForValidListAndQueue+0x68>)
 8009626:	f7fd fa4d 	bl	8006ac4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800962a:	4b13      	ldr	r3, [pc, #76]	@ (8009678 <prvCheckForValidListAndQueue+0x6c>)
 800962c:	4a10      	ldr	r2, [pc, #64]	@ (8009670 <prvCheckForValidListAndQueue+0x64>)
 800962e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009630:	4b12      	ldr	r3, [pc, #72]	@ (800967c <prvCheckForValidListAndQueue+0x70>)
 8009632:	4a10      	ldr	r2, [pc, #64]	@ (8009674 <prvCheckForValidListAndQueue+0x68>)
 8009634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009636:	2300      	movs	r3, #0
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <prvCheckForValidListAndQueue+0x74>)
 800963c:	4a11      	ldr	r2, [pc, #68]	@ (8009684 <prvCheckForValidListAndQueue+0x78>)
 800963e:	2110      	movs	r1, #16
 8009640:	200a      	movs	r0, #10
 8009642:	f7fd fb5f 	bl	8006d04 <xQueueGenericCreateStatic>
 8009646:	4603      	mov	r3, r0
 8009648:	4a08      	ldr	r2, [pc, #32]	@ (800966c <prvCheckForValidListAndQueue+0x60>)
 800964a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800964c:	4b07      	ldr	r3, [pc, #28]	@ (800966c <prvCheckForValidListAndQueue+0x60>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d005      	beq.n	8009660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009654:	4b05      	ldr	r3, [pc, #20]	@ (800966c <prvCheckForValidListAndQueue+0x60>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	490b      	ldr	r1, [pc, #44]	@ (8009688 <prvCheckForValidListAndQueue+0x7c>)
 800965a:	4618      	mov	r0, r3
 800965c:	f7fe fbd0 	bl	8007e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009660:	f000 f95a 	bl	8009918 <vPortExitCritical>
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20004914 	.word	0x20004914
 8009670:	200048e4 	.word	0x200048e4
 8009674:	200048f8 	.word	0x200048f8
 8009678:	2000490c 	.word	0x2000490c
 800967c:	20004910 	.word	0x20004910
 8009680:	200049c0 	.word	0x200049c0
 8009684:	20004920 	.word	0x20004920
 8009688:	08018728 	.word	0x08018728

0800968c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3b04      	subs	r3, #4
 800969c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80096a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3b04      	subs	r3, #4
 80096aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f023 0201 	bic.w	r2, r3, #1
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096bc:	4a0c      	ldr	r2, [pc, #48]	@ (80096f0 <pxPortInitialiseStack+0x64>)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	3b14      	subs	r3, #20
 80096c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b04      	subs	r3, #4
 80096d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f06f 0202 	mvn.w	r2, #2
 80096da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3b20      	subs	r3, #32
 80096e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096e2:	68fb      	ldr	r3, [r7, #12]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	080096f5 	.word	0x080096f5

080096f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <prvTaskExitError+0x60>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d00d      	beq.n	8009724 <prvTaskExitError+0x30>
	__asm volatile
 8009708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800970c:	b672      	cpsid	i
 800970e:	f383 8811 	msr	BASEPRI, r3
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	f3bf 8f4f 	dsb	sy
 800971a:	b662      	cpsie	i
 800971c:	60fb      	str	r3, [r7, #12]
}
 800971e:	bf00      	nop
 8009720:	bf00      	nop
 8009722:	e7fd      	b.n	8009720 <prvTaskExitError+0x2c>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009728:	b672      	cpsid	i
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	b662      	cpsie	i
 8009738:	60bb      	str	r3, [r7, #8]
}
 800973a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800973c:	bf00      	nop
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0fc      	beq.n	800973e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	2000000c 	.word	0x2000000c
	...

08009760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009760:	4b07      	ldr	r3, [pc, #28]	@ (8009780 <pxCurrentTCBConst2>)
 8009762:	6819      	ldr	r1, [r3, #0]
 8009764:	6808      	ldr	r0, [r1, #0]
 8009766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	f380 8809 	msr	PSP, r0
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f04f 0000 	mov.w	r0, #0
 8009776:	f380 8811 	msr	BASEPRI, r0
 800977a:	4770      	bx	lr
 800977c:	f3af 8000 	nop.w

08009780 <pxCurrentTCBConst2>:
 8009780:	200043e4 	.word	0x200043e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop

08009788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009788:	4808      	ldr	r0, [pc, #32]	@ (80097ac <prvPortStartFirstTask+0x24>)
 800978a:	6800      	ldr	r0, [r0, #0]
 800978c:	6800      	ldr	r0, [r0, #0]
 800978e:	f380 8808 	msr	MSP, r0
 8009792:	f04f 0000 	mov.w	r0, #0
 8009796:	f380 8814 	msr	CONTROL, r0
 800979a:	b662      	cpsie	i
 800979c:	b661      	cpsie	f
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	df00      	svc	0
 80097a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097aa:	bf00      	nop
 80097ac:	e000ed08 	.word	0xe000ed08

080097b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097b6:	4b37      	ldr	r3, [pc, #220]	@ (8009894 <xPortStartScheduler+0xe4>)
 80097b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	22ff      	movs	r2, #255	@ 0xff
 80097c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	4b2f      	ldr	r3, [pc, #188]	@ (8009898 <xPortStartScheduler+0xe8>)
 80097dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097de:	4b2f      	ldr	r3, [pc, #188]	@ (800989c <xPortStartScheduler+0xec>)
 80097e0:	2207      	movs	r2, #7
 80097e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097e4:	e009      	b.n	80097fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097e6:	4b2d      	ldr	r3, [pc, #180]	@ (800989c <xPortStartScheduler+0xec>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a2b      	ldr	r2, [pc, #172]	@ (800989c <xPortStartScheduler+0xec>)
 80097ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009802:	2b80      	cmp	r3, #128	@ 0x80
 8009804:	d0ef      	beq.n	80097e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009806:	4b25      	ldr	r3, [pc, #148]	@ (800989c <xPortStartScheduler+0xec>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1c3 0307 	rsb	r3, r3, #7
 800980e:	2b04      	cmp	r3, #4
 8009810:	d00d      	beq.n	800982e <xPortStartScheduler+0x7e>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009816:	b672      	cpsid	i
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	b662      	cpsie	i
 8009826:	60bb      	str	r3, [r7, #8]
}
 8009828:	bf00      	nop
 800982a:	bf00      	nop
 800982c:	e7fd      	b.n	800982a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800982e:	4b1b      	ldr	r3, [pc, #108]	@ (800989c <xPortStartScheduler+0xec>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	4a19      	ldr	r2, [pc, #100]	@ (800989c <xPortStartScheduler+0xec>)
 8009836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009838:	4b18      	ldr	r3, [pc, #96]	@ (800989c <xPortStartScheduler+0xec>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009840:	4a16      	ldr	r2, [pc, #88]	@ (800989c <xPortStartScheduler+0xec>)
 8009842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	b2da      	uxtb	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800984c:	4b14      	ldr	r3, [pc, #80]	@ (80098a0 <xPortStartScheduler+0xf0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a13      	ldr	r2, [pc, #76]	@ (80098a0 <xPortStartScheduler+0xf0>)
 8009852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009858:	4b11      	ldr	r3, [pc, #68]	@ (80098a0 <xPortStartScheduler+0xf0>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a10      	ldr	r2, [pc, #64]	@ (80098a0 <xPortStartScheduler+0xf0>)
 800985e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009864:	f000 f8dc 	bl	8009a20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009868:	4b0e      	ldr	r3, [pc, #56]	@ (80098a4 <xPortStartScheduler+0xf4>)
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800986e:	f000 f8fb 	bl	8009a68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <xPortStartScheduler+0xf8>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a0c      	ldr	r2, [pc, #48]	@ (80098a8 <xPortStartScheduler+0xf8>)
 8009878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800987c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800987e:	f7ff ff83 	bl	8009788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009882:	f7fe ff23 	bl	80086cc <vTaskSwitchContext>
	prvTaskExitError();
 8009886:	f7ff ff35 	bl	80096f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	e000e400 	.word	0xe000e400
 8009898:	20004a10 	.word	0x20004a10
 800989c:	20004a14 	.word	0x20004a14
 80098a0:	e000ed20 	.word	0xe000ed20
 80098a4:	2000000c 	.word	0x2000000c
 80098a8:	e000ef34 	.word	0xe000ef34

080098ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b6:	b672      	cpsid	i
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	b662      	cpsie	i
 80098c6:	607b      	str	r3, [r7, #4]
}
 80098c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098ca:	4b11      	ldr	r3, [pc, #68]	@ (8009910 <vPortEnterCritical+0x64>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3301      	adds	r3, #1
 80098d0:	4a0f      	ldr	r2, [pc, #60]	@ (8009910 <vPortEnterCritical+0x64>)
 80098d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <vPortEnterCritical+0x64>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d112      	bne.n	8009902 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <vPortEnterCritical+0x68>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00d      	beq.n	8009902 <vPortEnterCritical+0x56>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ea:	b672      	cpsid	i
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	b662      	cpsie	i
 80098fa:	603b      	str	r3, [r7, #0]
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	e7fd      	b.n	80098fe <vPortEnterCritical+0x52>
	}
}
 8009902:	bf00      	nop
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
 800990e:	bf00      	nop
 8009910:	2000000c 	.word	0x2000000c
 8009914:	e000ed04 	.word	0xe000ed04

08009918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800991e:	4b13      	ldr	r3, [pc, #76]	@ (800996c <vPortExitCritical+0x54>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10d      	bne.n	8009942 <vPortExitCritical+0x2a>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	b672      	cpsid	i
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	b662      	cpsie	i
 800993a:	607b      	str	r3, [r7, #4]
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	e7fd      	b.n	800993e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009942:	4b0a      	ldr	r3, [pc, #40]	@ (800996c <vPortExitCritical+0x54>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3b01      	subs	r3, #1
 8009948:	4a08      	ldr	r2, [pc, #32]	@ (800996c <vPortExitCritical+0x54>)
 800994a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800994c:	4b07      	ldr	r3, [pc, #28]	@ (800996c <vPortExitCritical+0x54>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <vPortExitCritical+0x48>
 8009954:	2300      	movs	r3, #0
 8009956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f383 8811 	msr	BASEPRI, r3
}
 800995e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	2000000c 	.word	0x2000000c

08009970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009970:	f3ef 8009 	mrs	r0, PSP
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	4b15      	ldr	r3, [pc, #84]	@ (80099d0 <pxCurrentTCBConst>)
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	f01e 0f10 	tst.w	lr, #16
 8009980:	bf08      	it	eq
 8009982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998a:	6010      	str	r0, [r2, #0]
 800998c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009994:	b672      	cpsid	i
 8009996:	f380 8811 	msr	BASEPRI, r0
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	b662      	cpsie	i
 80099a4:	f7fe fe92 	bl	80086cc <vTaskSwitchContext>
 80099a8:	f04f 0000 	mov.w	r0, #0
 80099ac:	f380 8811 	msr	BASEPRI, r0
 80099b0:	bc09      	pop	{r0, r3}
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f01e 0f10 	tst.w	lr, #16
 80099be:	bf08      	it	eq
 80099c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099c4:	f380 8809 	msr	PSP, r0
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop

080099d0 <pxCurrentTCBConst>:
 80099d0:	200043e4 	.word	0x200043e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	b672      	cpsid	i
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	b662      	cpsie	i
 80099f2:	607b      	str	r3, [r7, #4]
}
 80099f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099f6:	f7fe fdad 	bl	8008554 <xTaskIncrementTick>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d003      	beq.n	8009a08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a00:	4b06      	ldr	r3, [pc, #24]	@ (8009a1c <SysTick_Handler+0x44>)
 8009a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	f383 8811 	msr	BASEPRI, r3
}
 8009a12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a20:	b480      	push	{r7}
 8009a22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a24:	4b0b      	ldr	r3, [pc, #44]	@ (8009a54 <vPortSetupTimerInterrupt+0x34>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a58 <vPortSetupTimerInterrupt+0x38>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a30:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <vPortSetupTimerInterrupt+0x3c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a0a      	ldr	r2, [pc, #40]	@ (8009a60 <vPortSetupTimerInterrupt+0x40>)
 8009a36:	fba2 2303 	umull	r2, r3, r2, r3
 8009a3a:	099b      	lsrs	r3, r3, #6
 8009a3c:	4a09      	ldr	r2, [pc, #36]	@ (8009a64 <vPortSetupTimerInterrupt+0x44>)
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a42:	4b04      	ldr	r3, [pc, #16]	@ (8009a54 <vPortSetupTimerInterrupt+0x34>)
 8009a44:	2207      	movs	r2, #7
 8009a46:	601a      	str	r2, [r3, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	e000e010 	.word	0xe000e010
 8009a58:	e000e018 	.word	0xe000e018
 8009a5c:	20000000 	.word	0x20000000
 8009a60:	10624dd3 	.word	0x10624dd3
 8009a64:	e000e014 	.word	0xe000e014

08009a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a78 <vPortEnableVFP+0x10>
 8009a6c:	6801      	ldr	r1, [r0, #0]
 8009a6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a72:	6001      	str	r1, [r0, #0]
 8009a74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a76:	bf00      	nop
 8009a78:	e000ed88 	.word	0xe000ed88

08009a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a82:	f3ef 8305 	mrs	r3, IPSR
 8009a86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2b0f      	cmp	r3, #15
 8009a8c:	d917      	bls.n	8009abe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8009af8 <vPortValidateInterruptPriority+0x7c>)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a98:	4b18      	ldr	r3, [pc, #96]	@ (8009afc <vPortValidateInterruptPriority+0x80>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	7afa      	ldrb	r2, [r7, #11]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d20d      	bcs.n	8009abe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	607b      	str	r3, [r7, #4]
}
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	e7fd      	b.n	8009aba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009abe:	4b10      	ldr	r3, [pc, #64]	@ (8009b00 <vPortValidateInterruptPriority+0x84>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8009b04 <vPortValidateInterruptPriority+0x88>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d90d      	bls.n	8009aea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	b672      	cpsid	i
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	b662      	cpsie	i
 8009ae2:	603b      	str	r3, [r7, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	e7fd      	b.n	8009ae6 <vPortValidateInterruptPriority+0x6a>
	}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	e000e3f0 	.word	0xe000e3f0
 8009afc:	20004a10 	.word	0x20004a10
 8009b00:	e000ed0c 	.word	0xe000ed0c
 8009b04:	20004a14 	.word	0x20004a14

08009b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	@ 0x28
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b14:	f7fe fc4e 	bl	80083b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b18:	4b5d      	ldr	r3, [pc, #372]	@ (8009c90 <pvPortMalloc+0x188>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b20:	f000 f920 	bl	8009d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b24:	4b5b      	ldr	r3, [pc, #364]	@ (8009c94 <pvPortMalloc+0x18c>)
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 8094 	bne.w	8009c5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d020      	beq.n	8009b7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009b38:	2208      	movs	r2, #8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d017      	beq.n	8009b7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	3308      	adds	r3, #8
 8009b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f003 0307 	and.w	r3, r3, #7
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00d      	beq.n	8009b7a <pvPortMalloc+0x72>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	b672      	cpsid	i
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	b662      	cpsie	i
 8009b72:	617b      	str	r3, [r7, #20]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d06c      	beq.n	8009c5a <pvPortMalloc+0x152>
 8009b80:	4b45      	ldr	r3, [pc, #276]	@ (8009c98 <pvPortMalloc+0x190>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d867      	bhi.n	8009c5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b8a:	4b44      	ldr	r3, [pc, #272]	@ (8009c9c <pvPortMalloc+0x194>)
 8009b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b8e:	4b43      	ldr	r3, [pc, #268]	@ (8009c9c <pvPortMalloc+0x194>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b94:	e004      	b.n	8009ba0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d903      	bls.n	8009bb2 <pvPortMalloc+0xaa>
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1f1      	bne.n	8009b96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <pvPortMalloc+0x188>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d04e      	beq.n	8009c5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	4413      	add	r3, r2
 8009bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	6a3b      	ldr	r3, [r7, #32]
 8009bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	1ad2      	subs	r2, r2, r3
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d922      	bls.n	8009c24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	f003 0307 	and.w	r3, r3, #7
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00d      	beq.n	8009c0c <pvPortMalloc+0x104>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	b672      	cpsid	i
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	b662      	cpsie	i
 8009c04:	613b      	str	r3, [r7, #16]
}
 8009c06:	bf00      	nop
 8009c08:	bf00      	nop
 8009c0a:	e7fd      	b.n	8009c08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	1ad2      	subs	r2, r2, r3
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c1e:	69b8      	ldr	r0, [r7, #24]
 8009c20:	f000 f902 	bl	8009e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c24:	4b1c      	ldr	r3, [pc, #112]	@ (8009c98 <pvPortMalloc+0x190>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	1ad3      	subs	r3, r2, r3
 8009c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c98 <pvPortMalloc+0x190>)
 8009c30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c32:	4b19      	ldr	r3, [pc, #100]	@ (8009c98 <pvPortMalloc+0x190>)
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	4b1a      	ldr	r3, [pc, #104]	@ (8009ca0 <pvPortMalloc+0x198>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d203      	bcs.n	8009c46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c3e:	4b16      	ldr	r3, [pc, #88]	@ (8009c98 <pvPortMalloc+0x190>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a17      	ldr	r2, [pc, #92]	@ (8009ca0 <pvPortMalloc+0x198>)
 8009c44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	4b12      	ldr	r3, [pc, #72]	@ (8009c94 <pvPortMalloc+0x18c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c5a:	f7fe fbb9 	bl	80083d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f003 0307 	and.w	r3, r3, #7
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00d      	beq.n	8009c84 <pvPortMalloc+0x17c>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	b672      	cpsid	i
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	b662      	cpsie	i
 8009c7c:	60fb      	str	r3, [r7, #12]
}
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	e7fd      	b.n	8009c80 <pvPortMalloc+0x178>
	return pvReturn;
 8009c84:	69fb      	ldr	r3, [r7, #28]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3728      	adds	r7, #40	@ 0x28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20008620 	.word	0x20008620
 8009c94:	2000862c 	.word	0x2000862c
 8009c98:	20008624 	.word	0x20008624
 8009c9c:	20008618 	.word	0x20008618
 8009ca0:	20008628 	.word	0x20008628

08009ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d04e      	beq.n	8009d54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	425b      	negs	r3, r3
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	4b24      	ldr	r3, [pc, #144]	@ (8009d5c <vPortFree+0xb8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10d      	bne.n	8009cee <vPortFree+0x4a>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd6:	b672      	cpsid	i
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	b662      	cpsie	i
 8009ce6:	60fb      	str	r3, [r7, #12]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00d      	beq.n	8009d12 <vPortFree+0x6e>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	b672      	cpsid	i
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	b662      	cpsie	i
 8009d0a:	60bb      	str	r3, [r7, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	bf00      	nop
 8009d10:	e7fd      	b.n	8009d0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	4b11      	ldr	r3, [pc, #68]	@ (8009d5c <vPortFree+0xb8>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d019      	beq.n	8009d54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d115      	bne.n	8009d54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d5c <vPortFree+0xb8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	43db      	mvns	r3, r3
 8009d32:	401a      	ands	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d38:	f7fe fb3c 	bl	80083b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	4b07      	ldr	r3, [pc, #28]	@ (8009d60 <vPortFree+0xbc>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4413      	add	r3, r2
 8009d46:	4a06      	ldr	r2, [pc, #24]	@ (8009d60 <vPortFree+0xbc>)
 8009d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d4a:	6938      	ldr	r0, [r7, #16]
 8009d4c:	f000 f86c 	bl	8009e28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009d50:	f7fe fb3e 	bl	80083d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d54:	bf00      	nop
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	2000862c 	.word	0x2000862c
 8009d60:	20008624 	.word	0x20008624

08009d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d70:	4b27      	ldr	r3, [pc, #156]	@ (8009e10 <prvHeapInit+0xac>)
 8009d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00c      	beq.n	8009d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	3307      	adds	r3, #7
 8009d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0307 	bic.w	r3, r3, #7
 8009d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	4a1f      	ldr	r2, [pc, #124]	@ (8009e10 <prvHeapInit+0xac>)
 8009d94:	4413      	add	r3, r2
 8009d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e14 <prvHeapInit+0xb0>)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009da2:	4b1c      	ldr	r3, [pc, #112]	@ (8009e14 <prvHeapInit+0xb0>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	4413      	add	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009db0:	2208      	movs	r2, #8
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	1a9b      	subs	r3, r3, r2
 8009db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0307 	bic.w	r3, r3, #7
 8009dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a15      	ldr	r2, [pc, #84]	@ (8009e18 <prvHeapInit+0xb4>)
 8009dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009dc6:	4b14      	ldr	r3, [pc, #80]	@ (8009e18 <prvHeapInit+0xb4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dce:	4b12      	ldr	r3, [pc, #72]	@ (8009e18 <prvHeapInit+0xb4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	1ad2      	subs	r2, r2, r3
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009de4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e18 <prvHeapInit+0xb4>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	4a0a      	ldr	r2, [pc, #40]	@ (8009e1c <prvHeapInit+0xb8>)
 8009df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a09      	ldr	r2, [pc, #36]	@ (8009e20 <prvHeapInit+0xbc>)
 8009dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dfc:	4b09      	ldr	r3, [pc, #36]	@ (8009e24 <prvHeapInit+0xc0>)
 8009dfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e02:	601a      	str	r2, [r3, #0]
}
 8009e04:	bf00      	nop
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	20004a18 	.word	0x20004a18
 8009e14:	20008618 	.word	0x20008618
 8009e18:	20008620 	.word	0x20008620
 8009e1c:	20008628 	.word	0x20008628
 8009e20:	20008624 	.word	0x20008624
 8009e24:	2000862c 	.word	0x2000862c

08009e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e30:	4b28      	ldr	r3, [pc, #160]	@ (8009ed4 <prvInsertBlockIntoFreeList+0xac>)
 8009e32:	60fb      	str	r3, [r7, #12]
 8009e34:	e002      	b.n	8009e3c <prvInsertBlockIntoFreeList+0x14>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d8f7      	bhi.n	8009e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	68ba      	ldr	r2, [r7, #8]
 8009e50:	4413      	add	r3, r2
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d108      	bne.n	8009e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685a      	ldr	r2, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	441a      	add	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d118      	bne.n	8009eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	4b15      	ldr	r3, [pc, #84]	@ (8009ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d00d      	beq.n	8009ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	441a      	add	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	e008      	b.n	8009eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	601a      	str	r2, [r3, #0]
 8009eae:	e003      	b.n	8009eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d002      	beq.n	8009ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ec6:	bf00      	nop
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20008618 	.word	0x20008618
 8009ed8:	20008620 	.word	0x20008620

08009edc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	330c      	adds	r3, #12
 8009eec:	461a      	mov	r2, r3
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f002 fa29 	bl	800c348 <tcpip_send_msg_wait_sem>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d103      	bne.n	8009f0a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009f08:	e001      	b.n	8009f0e <netconn_apimsg+0x32>
  }
  return err;
 8009f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b08c      	sub	sp, #48	@ 0x30
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	603a      	str	r2, [r7, #0]
 8009f22:	71fb      	strb	r3, [r7, #7]
 8009f24:	460b      	mov	r3, r1
 8009f26:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f001 f923 	bl	800b178 <netconn_alloc>
 8009f32:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d054      	beq.n	8009fe4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009f3a:	79bb      	ldrb	r3, [r7, #6]
 8009f3c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8009f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f40:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	4829      	ldr	r0, [pc, #164]	@ (8009ff0 <netconn_new_with_proto_and_callback+0xd8>)
 8009f4a:	f7ff ffc7 	bl	8009edc <netconn_apimsg>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009f54:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d043      	beq.n	8009fe4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <netconn_new_with_proto_and_callback+0x58>
 8009f64:	4b23      	ldr	r3, [pc, #140]	@ (8009ff4 <netconn_new_with_proto_and_callback+0xdc>)
 8009f66:	22a3      	movs	r2, #163	@ 0xa3
 8009f68:	4923      	ldr	r1, [pc, #140]	@ (8009ff8 <netconn_new_with_proto_and_callback+0xe0>)
 8009f6a:	4824      	ldr	r0, [pc, #144]	@ (8009ffc <netconn_new_with_proto_and_callback+0xe4>)
 8009f6c:	f00d fb0a 	bl	8017584 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f72:	3310      	adds	r3, #16
 8009f74:	4618      	mov	r0, r3
 8009f76:	f00d f8dd 	bl	8017134 <sys_mbox_valid>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d105      	bne.n	8009f8c <netconn_new_with_proto_and_callback+0x74>
 8009f80:	4b1c      	ldr	r3, [pc, #112]	@ (8009ff4 <netconn_new_with_proto_and_callback+0xdc>)
 8009f82:	22a4      	movs	r2, #164	@ 0xa4
 8009f84:	491e      	ldr	r1, [pc, #120]	@ (800a000 <netconn_new_with_proto_and_callback+0xe8>)
 8009f86:	481d      	ldr	r0, [pc, #116]	@ (8009ffc <netconn_new_with_proto_and_callback+0xe4>)
 8009f88:	f00d fafc 	bl	8017584 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8e:	3314      	adds	r3, #20
 8009f90:	4618      	mov	r0, r3
 8009f92:	f00d f8cf 	bl	8017134 <sys_mbox_valid>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <netconn_new_with_proto_and_callback+0x90>
 8009f9c:	4b15      	ldr	r3, [pc, #84]	@ (8009ff4 <netconn_new_with_proto_and_callback+0xdc>)
 8009f9e:	22a6      	movs	r2, #166	@ 0xa6
 8009fa0:	4918      	ldr	r1, [pc, #96]	@ (800a004 <netconn_new_with_proto_and_callback+0xec>)
 8009fa2:	4816      	ldr	r0, [pc, #88]	@ (8009ffc <netconn_new_with_proto_and_callback+0xe4>)
 8009fa4:	f00d faee 	bl	8017584 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009faa:	330c      	adds	r3, #12
 8009fac:	4618      	mov	r0, r3
 8009fae:	f00d f94f 	bl	8017250 <sys_sem_valid>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d105      	bne.n	8009fc4 <netconn_new_with_proto_and_callback+0xac>
 8009fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff4 <netconn_new_with_proto_and_callback+0xdc>)
 8009fba:	22a9      	movs	r2, #169	@ 0xa9
 8009fbc:	4912      	ldr	r1, [pc, #72]	@ (800a008 <netconn_new_with_proto_and_callback+0xf0>)
 8009fbe:	480f      	ldr	r0, [pc, #60]	@ (8009ffc <netconn_new_with_proto_and_callback+0xe4>)
 8009fc0:	f00d fae0 	bl	8017584 <iprintf>
      sys_sem_free(&conn->op_completed);
 8009fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc6:	330c      	adds	r3, #12
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00d f934 	bl	8017236 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8009fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd0:	3310      	adds	r3, #16
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f00d f83a 	bl	801704c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009fd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fda:	2007      	movs	r0, #7
 8009fdc:	f002 ff1c 	bl	800ce18 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	e000      	b.n	8009fe6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3730      	adds	r7, #48	@ 0x30
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	0800b14d 	.word	0x0800b14d
 8009ff4:	08018730 	.word	0x08018730
 8009ff8:	08018764 	.word	0x08018764
 8009ffc:	08018788 	.word	0x08018788
 800a000:	080187b0 	.word	0x080187b0
 800a004:	080187c8 	.word	0x080187c8
 800a008:	080187ec 	.word	0x080187ec

0800a00c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	@ 0x30
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e014      	b.n	800a048 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a022:	2329      	movs	r3, #41	@ 0x29
 800a024:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a026:	f107 030c 	add.w	r3, r7, #12
 800a02a:	4619      	mov	r1, r3
 800a02c:	4808      	ldr	r0, [pc, #32]	@ (800a050 <netconn_prepare_delete+0x44>)
 800a02e:	f7ff ff55 	bl	8009edc <netconn_apimsg>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a038:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <netconn_prepare_delete+0x3a>
    return err;
 800a040:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a044:	e000      	b.n	800a048 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3730      	adds	r7, #48	@ 0x30
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}
 800a050:	0800b6b9 	.word	0x0800b6b9

0800a054 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <netconn_delete+0x12>
    return ERR_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	e00d      	b.n	800a082 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff ffd0 	bl	800a00c <netconn_prepare_delete>
 800a06c:	4603      	mov	r3, r0
 800a06e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <netconn_delete+0x2a>
    netconn_free(conn);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f001 f8eb 	bl	800b254 <netconn_free>
  }
  return err;
 800a07e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08e      	sub	sp, #56	@ 0x38
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <netconn_bind+0x28>
 800a0a0:	4b11      	ldr	r3, [pc, #68]	@ (800a0e8 <netconn_bind+0x5c>)
 800a0a2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800a0a6:	4911      	ldr	r1, [pc, #68]	@ (800a0ec <netconn_bind+0x60>)
 800a0a8:	4811      	ldr	r0, [pc, #68]	@ (800a0f0 <netconn_bind+0x64>)
 800a0aa:	f00d fa6b 	bl	8017584 <iprintf>
 800a0ae:	f06f 030f 	mvn.w	r3, #15
 800a0b2:	e015      	b.n	800a0e0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a0f4 <netconn_bind+0x68>)
 800a0bc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a0c6:	88fb      	ldrh	r3, [r7, #6]
 800a0c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a0ca:	f107 0314 	add.w	r3, r7, #20
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4809      	ldr	r0, [pc, #36]	@ (800a0f8 <netconn_bind+0x6c>)
 800a0d2:	f7ff ff03 	bl	8009edc <netconn_apimsg>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a0dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3738      	adds	r7, #56	@ 0x38
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	08018730 	.word	0x08018730
 800a0ec:	08018868 	.word	0x08018868
 800a0f0:	08018788 	.word	0x08018788
 800a0f4:	0801bbb8 	.word	0x0801bbb8
 800a0f8:	0800b881 	.word	0x0800b881

0800a0fc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08c      	sub	sp, #48	@ 0x30
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d109      	bne.n	800a122 <netconn_listen_with_backlog+0x26>
 800a10e:	4b0d      	ldr	r3, [pc, #52]	@ (800a144 <netconn_listen_with_backlog+0x48>)
 800a110:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800a114:	490c      	ldr	r1, [pc, #48]	@ (800a148 <netconn_listen_with_backlog+0x4c>)
 800a116:	480d      	ldr	r0, [pc, #52]	@ (800a14c <netconn_listen_with_backlog+0x50>)
 800a118:	f00d fa34 	bl	8017584 <iprintf>
 800a11c:	f06f 030f 	mvn.w	r3, #15
 800a120:	e00c      	b.n	800a13c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a126:	f107 030c 	add.w	r3, r7, #12
 800a12a:	4619      	mov	r1, r3
 800a12c:	4808      	ldr	r0, [pc, #32]	@ (800a150 <netconn_listen_with_backlog+0x54>)
 800a12e:	f7ff fed5 	bl	8009edc <netconn_apimsg>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a138:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3730      	adds	r7, #48	@ 0x30
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	08018730 	.word	0x08018730
 800a148:	080188e8 	.word	0x080188e8
 800a14c:	08018788 	.word	0x08018788
 800a150:	0800b8f5 	.word	0x0800b8f5

0800a154 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d109      	bne.n	800a178 <netconn_accept+0x24>
 800a164:	4b3d      	ldr	r3, [pc, #244]	@ (800a25c <netconn_accept+0x108>)
 800a166:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a16a:	493d      	ldr	r1, [pc, #244]	@ (800a260 <netconn_accept+0x10c>)
 800a16c:	483d      	ldr	r0, [pc, #244]	@ (800a264 <netconn_accept+0x110>)
 800a16e:	f00d fa09 	bl	8017584 <iprintf>
 800a172:	f06f 030f 	mvn.w	r3, #15
 800a176:	e06c      	b.n	800a252 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <netconn_accept+0x44>
 800a184:	4b35      	ldr	r3, [pc, #212]	@ (800a25c <netconn_accept+0x108>)
 800a186:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800a18a:	4937      	ldr	r1, [pc, #220]	@ (800a268 <netconn_accept+0x114>)
 800a18c:	4835      	ldr	r0, [pc, #212]	@ (800a264 <netconn_accept+0x110>)
 800a18e:	f00d f9f9 	bl	8017584 <iprintf>
 800a192:	f06f 030f 	mvn.w	r3, #15
 800a196:	e05c      	b.n	800a252 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fb6c 	bl	800a876 <netconn_err>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a1a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a1aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1ae:	e050      	b.n	800a252 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3314      	adds	r3, #20
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f00c ffbd 	bl	8017134 <sys_mbox_valid>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <netconn_accept+0x78>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	7f1b      	ldrb	r3, [r3, #28]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a1cc:	f06f 030e 	mvn.w	r3, #14
 800a1d0:	e03f      	b.n	800a252 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	7f1b      	ldrb	r3, [r3, #28]
 800a1d6:	f003 0302 	and.w	r3, r3, #2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00e      	beq.n	800a1fc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3314      	adds	r3, #20
 800a1e2:	f107 020c 	add.w	r2, r7, #12
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f00c ff8c 	bl	8017106 <sys_arch_mbox_tryfetch>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f4:	d10a      	bne.n	800a20c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a1f6:	f06f 0306 	mvn.w	r3, #6
 800a1fa:	e02a      	b.n	800a252 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3314      	adds	r3, #20
 800a200:	f107 010c 	add.w	r1, r7, #12
 800a204:	2200      	movs	r2, #0
 800a206:	4618      	mov	r0, r3
 800a208:	f00c ff4c 	bl	80170a4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <netconn_accept+0xcc>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a218:	2200      	movs	r2, #0
 800a21a:	2101      	movs	r1, #1
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f107 0213 	add.w	r2, r7, #19
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f000 fb75 	bl	800a918 <lwip_netconn_is_err_msg>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a234:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a238:	e00b      	b.n	800a252 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a240:	f06f 030e 	mvn.w	r3, #14
 800a244:	e005      	b.n	800a252 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a250:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	08018730 	.word	0x08018730
 800a260:	08018908 	.word	0x08018908
 800a264:	08018788 	.word	0x08018788
 800a268:	08018928 	.word	0x08018928

0800a26c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d109      	bne.n	800a298 <netconn_recv_data+0x2c>
 800a284:	4b58      	ldr	r3, [pc, #352]	@ (800a3e8 <netconn_recv_data+0x17c>)
 800a286:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800a28a:	4958      	ldr	r1, [pc, #352]	@ (800a3ec <netconn_recv_data+0x180>)
 800a28c:	4858      	ldr	r0, [pc, #352]	@ (800a3f0 <netconn_recv_data+0x184>)
 800a28e:	f00d f979 	bl	8017584 <iprintf>
 800a292:	f06f 030f 	mvn.w	r3, #15
 800a296:	e0a2      	b.n	800a3de <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d109      	bne.n	800a2b8 <netconn_recv_data+0x4c>
 800a2a4:	4b50      	ldr	r3, [pc, #320]	@ (800a3e8 <netconn_recv_data+0x17c>)
 800a2a6:	f240 224a 	movw	r2, #586	@ 0x24a
 800a2aa:	4952      	ldr	r1, [pc, #328]	@ (800a3f4 <netconn_recv_data+0x188>)
 800a2ac:	4850      	ldr	r0, [pc, #320]	@ (800a3f0 <netconn_recv_data+0x184>)
 800a2ae:	f00d f969 	bl	8017584 <iprintf>
 800a2b2:	f06f 030f 	mvn.w	r3, #15
 800a2b6:	e092      	b.n	800a3de <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3310      	adds	r3, #16
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f00c ff39 	bl	8017134 <sys_mbox_valid>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10e      	bne.n	800a2e6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fad4 	bl	800a876 <netconn_err>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a2d2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a2da:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a2de:	e07e      	b.n	800a3de <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a2e0:	f06f 030a 	mvn.w	r3, #10
 800a2e4:	e07b      	b.n	800a3de <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	7f1b      	ldrb	r3, [r3, #28]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10f      	bne.n	800a312 <netconn_recv_data+0xa6>
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d10a      	bne.n	800a312 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	7f1b      	ldrb	r3, [r3, #28]
 800a300:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d023      	beq.n	800a35a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3310      	adds	r3, #16
 800a316:	f107 0218 	add.w	r2, r7, #24
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f00c fef2 	bl	8017106 <sys_arch_mbox_tryfetch>
 800a322:	4603      	mov	r3, r0
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d11f      	bne.n	800a36a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 faa3 	bl	800a876 <netconn_err>
 800a330:	4603      	mov	r3, r0
 800a332:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a334:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a33c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a340:	e04d      	b.n	800a3de <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	7f1b      	ldrb	r3, [r3, #28]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a34e:	f06f 030a 	mvn.w	r3, #10
 800a352:	e044      	b.n	800a3de <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a354:	f06f 0306 	mvn.w	r3, #6
 800a358:	e041      	b.n	800a3de <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3310      	adds	r3, #16
 800a35e:	f107 0118 	add.w	r1, r7, #24
 800a362:	2200      	movs	r2, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f00c fe9d 	bl	80170a4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a372:	2b10      	cmp	r3, #16
 800a374:	d117      	bne.n	800a3a6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	f107 0217 	add.w	r2, r7, #23
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 faca 	bl	800a918 <lwip_netconn_is_err_msg>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a38e:	f113 0f0f 	cmn.w	r3, #15
 800a392:	d101      	bne.n	800a398 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	e022      	b.n	800a3de <netconn_recv_data+0x172>
      }
      return err;
 800a398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a39c:	e01f      	b.n	800a3de <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	891b      	ldrh	r3, [r3, #8]
 800a3a2:	83fb      	strh	r3, [r7, #30]
 800a3a4:	e00d      	b.n	800a3c2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d106      	bne.n	800a3ba <netconn_recv_data+0x14e>
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e8 <netconn_recv_data+0x17c>)
 800a3ae:	f240 2291 	movw	r2, #657	@ 0x291
 800a3b2:	4911      	ldr	r1, [pc, #68]	@ (800a3f8 <netconn_recv_data+0x18c>)
 800a3b4:	480e      	ldr	r0, [pc, #56]	@ (800a3f0 <netconn_recv_data+0x184>)
 800a3b6:	f00d f8e5 	bl	8017584 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	891b      	ldrh	r3, [r3, #8]
 800a3c0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d005      	beq.n	800a3d6 <netconn_recv_data+0x16a>
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ce:	8bfa      	ldrh	r2, [r7, #30]
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3720      	adds	r7, #32
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	08018730 	.word	0x08018730
 800a3ec:	08018948 	.word	0x08018948
 800a3f0:	08018788 	.word	0x08018788
 800a3f4:	08018968 	.word	0x08018968
 800a3f8:	08018984 	.word	0x08018984

0800a3fc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <netconn_tcp_recvd_msg+0x1e>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a416:	2b10      	cmp	r3, #16
 800a418:	d009      	beq.n	800a42e <netconn_tcp_recvd_msg+0x32>
 800a41a:	4b0c      	ldr	r3, [pc, #48]	@ (800a44c <netconn_tcp_recvd_msg+0x50>)
 800a41c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800a420:	490b      	ldr	r1, [pc, #44]	@ (800a450 <netconn_tcp_recvd_msg+0x54>)
 800a422:	480c      	ldr	r0, [pc, #48]	@ (800a454 <netconn_tcp_recvd_msg+0x58>)
 800a424:	f00d f8ae 	bl	8017584 <iprintf>
 800a428:	f06f 030f 	mvn.w	r3, #15
 800a42c:	e00a      	b.n	800a444 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	4806      	ldr	r0, [pc, #24]	@ (800a458 <netconn_tcp_recvd_msg+0x5c>)
 800a43e:	f7ff fd4d 	bl	8009edc <netconn_apimsg>
 800a442:	4603      	mov	r3, r0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	08018730 	.word	0x08018730
 800a450:	08018990 	.word	0x08018990
 800a454:	08018788 	.word	0x08018788
 800a458:	0800ba25 	.word	0x0800ba25

0800a45c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b090      	sub	sp, #64	@ 0x40
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	4613      	mov	r3, r2
 800a468:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3310      	adds	r3, #16
 800a46e:	4618      	mov	r0, r3
 800a470:	f00c fe60 	bl	8017134 <sys_mbox_valid>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a47a:	f06f 030a 	mvn.w	r3, #10
 800a47e:	e06d      	b.n	800a55c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	7f1b      	ldrb	r3, [r3, #28]
 800a484:	b25b      	sxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	da07      	bge.n	800a49a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	7f1b      	ldrb	r3, [r3, #28]
 800a48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a492:	b2da      	uxtb	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a498:	e039      	b.n	800a50e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	461a      	mov	r2, r3
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fee3 	bl	800a26c <netconn_recv_data>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800a4ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a4b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a4b8:	e050      	b.n	800a55c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	f003 0308 	and.w	r3, r3, #8
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10e      	bne.n	800a4e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <netconn_recv_data_tcp+0x7a>
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	891b      	ldrh	r3, [r3, #8]
 800a4d4:	e000      	b.n	800a4d8 <netconn_recv_data_tcp+0x7c>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a4da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a4dc:	f107 0214 	add.w	r2, r7, #20
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f7ff ff8a 	bl	800a3fc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d134      	bne.n	800a558 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	7f1b      	ldrb	r3, [r3, #28]
 800a4fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a500:	b2da      	uxtb	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a506:	f06f 0306 	mvn.w	r3, #6
 800a50a:	e027      	b.n	800a55c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a50c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <netconn_recv_data_tcp+0xc6>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a51a:	2200      	movs	r2, #0
 800a51c:	2101      	movs	r1, #1
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10f      	bne.n	800a54a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f9a3 	bl	800a876 <netconn_err>
 800a530:	4603      	mov	r3, r0
 800a532:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800a536:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <netconn_recv_data_tcp+0xe8>
          return err;
 800a53e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a542:	e00b      	b.n	800a55c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a544:	f06f 030d 	mvn.w	r3, #13
 800a548:	e008      	b.n	800a55c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a54a:	2101      	movs	r1, #1
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f955 	bl	800a7fc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a552:	f06f 030e 	mvn.w	r3, #14
 800a556:	e001      	b.n	800a55c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a558:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3740      	adds	r7, #64	@ 0x40
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d109      	bne.n	800a58c <netconn_recv+0x28>
 800a578:	4b32      	ldr	r3, [pc, #200]	@ (800a644 <netconn_recv+0xe0>)
 800a57a:	f240 3263 	movw	r2, #867	@ 0x363
 800a57e:	4932      	ldr	r1, [pc, #200]	@ (800a648 <netconn_recv+0xe4>)
 800a580:	4832      	ldr	r0, [pc, #200]	@ (800a64c <netconn_recv+0xe8>)
 800a582:	f00c ffff 	bl	8017584 <iprintf>
 800a586:	f06f 030f 	mvn.w	r3, #15
 800a58a:	e056      	b.n	800a63a <netconn_recv+0xd6>
  *new_buf = NULL;
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d109      	bne.n	800a5ac <netconn_recv+0x48>
 800a598:	4b2a      	ldr	r3, [pc, #168]	@ (800a644 <netconn_recv+0xe0>)
 800a59a:	f240 3265 	movw	r2, #869	@ 0x365
 800a59e:	492c      	ldr	r1, [pc, #176]	@ (800a650 <netconn_recv+0xec>)
 800a5a0:	482a      	ldr	r0, [pc, #168]	@ (800a64c <netconn_recv+0xe8>)
 800a5a2:	f00c ffef 	bl	8017584 <iprintf>
 800a5a6:	f06f 030f 	mvn.w	r3, #15
 800a5aa:	e046      	b.n	800a63a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5b4:	2b10      	cmp	r3, #16
 800a5b6:	d13a      	bne.n	800a62e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a5bc:	2006      	movs	r0, #6
 800a5be:	f002 fbd9 	bl	800cd74 <memp_malloc>
 800a5c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d102      	bne.n	800a5d0 <netconn_recv+0x6c>
      return ERR_MEM;
 800a5ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a5ce:	e034      	b.n	800a63a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a5d0:	f107 030c 	add.w	r3, r7, #12
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff ff3f 	bl	800a45c <netconn_recv_data_tcp>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a5e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a5ea:	6979      	ldr	r1, [r7, #20]
 800a5ec:	2006      	movs	r0, #6
 800a5ee:	f002 fc13 	bl	800ce18 <memp_free>
      return err;
 800a5f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a5f6:	e020      	b.n	800a63a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d106      	bne.n	800a60c <netconn_recv+0xa8>
 800a5fe:	4b11      	ldr	r3, [pc, #68]	@ (800a644 <netconn_recv+0xe0>)
 800a600:	f240 3279 	movw	r2, #889	@ 0x379
 800a604:	4913      	ldr	r1, [pc, #76]	@ (800a654 <netconn_recv+0xf0>)
 800a606:	4811      	ldr	r0, [pc, #68]	@ (800a64c <netconn_recv+0xe8>)
 800a608:	f00c ffbc 	bl	8017584 <iprintf>

    buf->p = p;
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2200      	movs	r2, #0
 800a61c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	2200      	movs	r2, #0
 800a622:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	e005      	b.n	800a63a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a62e:	2200      	movs	r2, #0
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7ff fe1a 	bl	800a26c <netconn_recv_data>
 800a638:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	08018730 	.word	0x08018730
 800a648:	08018948 	.word	0x08018948
 800a64c:	08018788 	.word	0x08018788
 800a650:	08018968 	.word	0x08018968
 800a654:	080189e0 	.word	0x080189e0

0800a658 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a66e:	78fa      	ldrb	r2, [r7, #3]
 800a670:	f107 0110 	add.w	r1, r7, #16
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	4613      	mov	r3, r2
 800a67a:	2201      	movs	r2, #1
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f805 	bl	800a68c <netconn_write_vectors_partly>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3718      	adds	r7, #24
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b092      	sub	sp, #72	@ 0x48
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	4611      	mov	r1, r2
 800a698:	461a      	mov	r2, r3
 800a69a:	460b      	mov	r3, r1
 800a69c:	80fb      	strh	r3, [r7, #6]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d109      	bne.n	800a6bc <netconn_write_vectors_partly+0x30>
 800a6a8:	4b4e      	ldr	r3, [pc, #312]	@ (800a7e4 <netconn_write_vectors_partly+0x158>)
 800a6aa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a6ae:	494e      	ldr	r1, [pc, #312]	@ (800a7e8 <netconn_write_vectors_partly+0x15c>)
 800a6b0:	484e      	ldr	r0, [pc, #312]	@ (800a7ec <netconn_write_vectors_partly+0x160>)
 800a6b2:	f00c ff67 	bl	8017584 <iprintf>
 800a6b6:	f06f 030f 	mvn.w	r3, #15
 800a6ba:	e08e      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	781b      	ldrb	r3, [r3, #0]
 800a6c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6c4:	2b10      	cmp	r3, #16
 800a6c6:	d009      	beq.n	800a6dc <netconn_write_vectors_partly+0x50>
 800a6c8:	4b46      	ldr	r3, [pc, #280]	@ (800a7e4 <netconn_write_vectors_partly+0x158>)
 800a6ca:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800a6ce:	4948      	ldr	r1, [pc, #288]	@ (800a7f0 <netconn_write_vectors_partly+0x164>)
 800a6d0:	4846      	ldr	r0, [pc, #280]	@ (800a7ec <netconn_write_vectors_partly+0x160>)
 800a6d2:	f00c ff57 	bl	8017584 <iprintf>
 800a6d6:	f06f 0305 	mvn.w	r3, #5
 800a6da:	e07e      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	7f1b      	ldrb	r3, [r3, #28]
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d104      	bne.n	800a6f2 <netconn_write_vectors_partly+0x66>
 800a6e8:	797b      	ldrb	r3, [r7, #5]
 800a6ea:	f003 0304 	and.w	r3, r3, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <netconn_write_vectors_partly+0x6a>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e000      	b.n	800a6f8 <netconn_write_vectors_partly+0x6c>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a6fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <netconn_write_vectors_partly+0x84>
 800a704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a70a:	f06f 0305 	mvn.w	r3, #5
 800a70e:	e064      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a710:	2300      	movs	r3, #0
 800a712:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a714:	2300      	movs	r3, #0
 800a716:	643b      	str	r3, [r7, #64]	@ 0x40
 800a718:	e015      	b.n	800a746 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a71a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a71c:	00db      	lsls	r3, r3, #3
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	4413      	add	r3, r2
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a726:	4413      	add	r3, r2
 800a728:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800a72a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	4413      	add	r3, r2
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a736:	429a      	cmp	r2, r3
 800a738:	d202      	bcs.n	800a740 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a73a:	f06f 0305 	mvn.w	r3, #5
 800a73e:	e04c      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a742:	3301      	adds	r3, #1
 800a744:	643b      	str	r3, [r7, #64]	@ 0x40
 800a746:	88fb      	ldrh	r3, [r7, #6]
 800a748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a74a:	429a      	cmp	r2, r3
 800a74c:	dbe5      	blt.n	800a71a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a74e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	e040      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da0a      	bge.n	800a774 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a75e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a760:	2b00      	cmp	r3, #0
 800a762:	d102      	bne.n	800a76a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a764:	f06f 0305 	mvn.w	r3, #5
 800a768:	e037      	b.n	800a7da <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a76a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a76e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800a770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a772:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a77c:	88fb      	ldrh	r3, [r7, #6]
 800a77e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a780:	2300      	movs	r3, #0
 800a782:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a784:	797b      	ldrb	r3, [r7, #5]
 800a786:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a78a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a78e:	2300      	movs	r3, #0
 800a790:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a792:	f107 0314 	add.w	r3, r7, #20
 800a796:	4619      	mov	r1, r3
 800a798:	4816      	ldr	r0, [pc, #88]	@ (800a7f4 <netconn_write_vectors_partly+0x168>)
 800a79a:	f7ff fb9f 	bl	8009edc <netconn_apimsg>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800a7a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d114      	bne.n	800a7d6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a7ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a7b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a7b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d006      	beq.n	800a7d6 <netconn_write_vectors_partly+0x14a>
 800a7c8:	4b06      	ldr	r3, [pc, #24]	@ (800a7e4 <netconn_write_vectors_partly+0x158>)
 800a7ca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a7ce:	490a      	ldr	r1, [pc, #40]	@ (800a7f8 <netconn_write_vectors_partly+0x16c>)
 800a7d0:	4806      	ldr	r0, [pc, #24]	@ (800a7ec <netconn_write_vectors_partly+0x160>)
 800a7d2:	f00c fed7 	bl	8017584 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a7d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3748      	adds	r7, #72	@ 0x48
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	08018730 	.word	0x08018730
 800a7e8:	08018a08 	.word	0x08018a08
 800a7ec:	08018788 	.word	0x08018788
 800a7f0:	08018a24 	.word	0x08018a24
 800a7f4:	0800be29 	.word	0x0800be29
 800a7f8:	08018a48 	.word	0x08018a48

0800a7fc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08c      	sub	sp, #48	@ 0x30
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <netconn_close_shutdown+0x26>
 800a80e:	4b0f      	ldr	r3, [pc, #60]	@ (800a84c <netconn_close_shutdown+0x50>)
 800a810:	f240 4247 	movw	r2, #1095	@ 0x447
 800a814:	490e      	ldr	r1, [pc, #56]	@ (800a850 <netconn_close_shutdown+0x54>)
 800a816:	480f      	ldr	r0, [pc, #60]	@ (800a854 <netconn_close_shutdown+0x58>)
 800a818:	f00c feb4 	bl	8017584 <iprintf>
 800a81c:	f06f 030f 	mvn.w	r3, #15
 800a820:	e010      	b.n	800a844 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a826:	78fb      	ldrb	r3, [r7, #3]
 800a828:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a82a:	2329      	movs	r3, #41	@ 0x29
 800a82c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4619      	mov	r1, r3
 800a834:	4808      	ldr	r0, [pc, #32]	@ (800a858 <netconn_close_shutdown+0x5c>)
 800a836:	f7ff fb51 	bl	8009edc <netconn_apimsg>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a840:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a844:	4618      	mov	r0, r3
 800a846:	3730      	adds	r7, #48	@ 0x30
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	08018730 	.word	0x08018730
 800a850:	08018a6c 	.word	0x08018a6c
 800a854:	08018788 	.word	0x08018788
 800a858:	0800bf41 	.word	0x0800bf41

0800a85c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a864:	2103      	movs	r1, #3
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff ffc8 	bl	800a7fc <netconn_close_shutdown>
 800a86c:	4603      	mov	r3, r0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <netconn_err+0x12>
    return ERR_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	e00d      	b.n	800a8a4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a888:	f00c fd5e 	bl	8017348 <sys_arch_protect>
 800a88c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	7a1b      	ldrb	r3, [r3, #8]
 800a892:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f00c fd62 	bl	8017364 <sys_arch_unprotect>
  return err;
 800a8a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800a8b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ba:	f113 0f0d 	cmn.w	r3, #13
 800a8be:	d009      	beq.n	800a8d4 <lwip_netconn_err_to_msg+0x28>
 800a8c0:	f113 0f0d 	cmn.w	r3, #13
 800a8c4:	dc0c      	bgt.n	800a8e0 <lwip_netconn_err_to_msg+0x34>
 800a8c6:	f113 0f0f 	cmn.w	r3, #15
 800a8ca:	d007      	beq.n	800a8dc <lwip_netconn_err_to_msg+0x30>
 800a8cc:	f113 0f0e 	cmn.w	r3, #14
 800a8d0:	d002      	beq.n	800a8d8 <lwip_netconn_err_to_msg+0x2c>
 800a8d2:	e005      	b.n	800a8e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a900 <lwip_netconn_err_to_msg+0x54>)
 800a8d6:	e00e      	b.n	800a8f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <lwip_netconn_err_to_msg+0x58>)
 800a8da:	e00c      	b.n	800a8f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a908 <lwip_netconn_err_to_msg+0x5c>)
 800a8de:	e00a      	b.n	800a8f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800a8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <lwip_netconn_err_to_msg+0x48>
 800a8e8:	4b08      	ldr	r3, [pc, #32]	@ (800a90c <lwip_netconn_err_to_msg+0x60>)
 800a8ea:	227d      	movs	r2, #125	@ 0x7d
 800a8ec:	4908      	ldr	r1, [pc, #32]	@ (800a910 <lwip_netconn_err_to_msg+0x64>)
 800a8ee:	4809      	ldr	r0, [pc, #36]	@ (800a914 <lwip_netconn_err_to_msg+0x68>)
 800a8f0:	f00c fe48 	bl	8017584 <iprintf>
      return NULL;
 800a8f4:	2300      	movs	r3, #0
  }
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	0801baa4 	.word	0x0801baa4
 800a904:	0801baa5 	.word	0x0801baa5
 800a908:	0801baa6 	.word	0x0801baa6
 800a90c:	08018a88 	.word	0x08018a88
 800a910:	08018abc 	.word	0x08018abc
 800a914:	08018acc 	.word	0x08018acc

0800a918 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d105      	bne.n	800a934 <lwip_netconn_is_err_msg+0x1c>
 800a928:	4b12      	ldr	r3, [pc, #72]	@ (800a974 <lwip_netconn_is_err_msg+0x5c>)
 800a92a:	2285      	movs	r2, #133	@ 0x85
 800a92c:	4912      	ldr	r1, [pc, #72]	@ (800a978 <lwip_netconn_is_err_msg+0x60>)
 800a92e:	4813      	ldr	r0, [pc, #76]	@ (800a97c <lwip_netconn_is_err_msg+0x64>)
 800a930:	f00c fe28 	bl	8017584 <iprintf>

  if (msg == &netconn_aborted) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a12      	ldr	r2, [pc, #72]	@ (800a980 <lwip_netconn_is_err_msg+0x68>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d104      	bne.n	800a946 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	22f3      	movs	r2, #243	@ 0xf3
 800a940:	701a      	strb	r2, [r3, #0]
    return 1;
 800a942:	2301      	movs	r3, #1
 800a944:	e012      	b.n	800a96c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a0e      	ldr	r2, [pc, #56]	@ (800a984 <lwip_netconn_is_err_msg+0x6c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d104      	bne.n	800a958 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	22f2      	movs	r2, #242	@ 0xf2
 800a952:	701a      	strb	r2, [r3, #0]
    return 1;
 800a954:	2301      	movs	r3, #1
 800a956:	e009      	b.n	800a96c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a0b      	ldr	r2, [pc, #44]	@ (800a988 <lwip_netconn_is_err_msg+0x70>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d104      	bne.n	800a96a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	22f1      	movs	r2, #241	@ 0xf1
 800a964:	701a      	strb	r2, [r3, #0]
    return 1;
 800a966:	2301      	movs	r3, #1
 800a968:	e000      	b.n	800a96c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	08018a88 	.word	0x08018a88
 800a978:	08018af4 	.word	0x08018af4
 800a97c:	08018acc 	.word	0x08018acc
 800a980:	0801baa4 	.word	0x0801baa4
 800a984:	0801baa5 	.word	0x0801baa5
 800a988:	0801baa6 	.word	0x0801baa6

0800a98c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b088      	sub	sp, #32
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <recv_udp+0x20>
 800a9a0:	4b34      	ldr	r3, [pc, #208]	@ (800aa74 <recv_udp+0xe8>)
 800a9a2:	22e5      	movs	r2, #229	@ 0xe5
 800a9a4:	4934      	ldr	r1, [pc, #208]	@ (800aa78 <recv_udp+0xec>)
 800a9a6:	4835      	ldr	r0, [pc, #212]	@ (800aa7c <recv_udp+0xf0>)
 800a9a8:	f00c fdec 	bl	8017584 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d105      	bne.n	800a9be <recv_udp+0x32>
 800a9b2:	4b30      	ldr	r3, [pc, #192]	@ (800aa74 <recv_udp+0xe8>)
 800a9b4:	22e6      	movs	r2, #230	@ 0xe6
 800a9b6:	4932      	ldr	r1, [pc, #200]	@ (800aa80 <recv_udp+0xf4>)
 800a9b8:	4830      	ldr	r0, [pc, #192]	@ (800aa7c <recv_udp+0xf0>)
 800a9ba:	f00c fde3 	bl	8017584 <iprintf>
  conn = (struct netconn *)arg;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d103      	bne.n	800a9d0 <recv_udp+0x44>
    pbuf_free(p);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f003 f8c9 	bl	800db60 <pbuf_free>
    return;
 800a9ce:	e04d      	b.n	800aa6c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d005      	beq.n	800a9e6 <recv_udp+0x5a>
 800a9da:	4b26      	ldr	r3, [pc, #152]	@ (800aa74 <recv_udp+0xe8>)
 800a9dc:	22ee      	movs	r2, #238	@ 0xee
 800a9de:	4929      	ldr	r1, [pc, #164]	@ (800aa84 <recv_udp+0xf8>)
 800a9e0:	4826      	ldr	r0, [pc, #152]	@ (800aa7c <recv_udp+0xf0>)
 800a9e2:	f00c fdcf 	bl	8017584 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	3310      	adds	r3, #16
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f00c fba2 	bl	8017134 <sys_mbox_valid>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d103      	bne.n	800a9fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f003 f8b2 	bl	800db60 <pbuf_free>
    return;
 800a9fc:	e036      	b.n	800aa6c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a9fe:	2006      	movs	r0, #6
 800aa00:	f002 f9b8 	bl	800cd74 <memp_malloc>
 800aa04:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <recv_udp+0x88>
    pbuf_free(p);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f003 f8a7 	bl	800db60 <pbuf_free>
    return;
 800aa12:	e02b      	b.n	800aa6c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d002      	beq.n	800aa2c <recv_udp+0xa0>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	e000      	b.n	800aa2e <recv_udp+0xa2>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	69ba      	ldr	r2, [r7, #24]
 800aa30:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa36:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	891b      	ldrh	r3, [r3, #8]
 800aa3c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	3310      	adds	r3, #16
 800aa42:	69b9      	ldr	r1, [r7, #24]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f00c fb13 	bl	8017070 <sys_mbox_trypost>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d003      	beq.n	800aa58 <recv_udp+0xcc>
    netbuf_delete(buf);
 800aa50:	69b8      	ldr	r0, [r7, #24]
 800aa52:	f001 fb01 	bl	800c058 <netbuf_delete>
    return;
 800aa56:	e009      	b.n	800aa6c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <recv_udp+0xe0>
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa64:	8afa      	ldrh	r2, [r7, #22]
 800aa66:	2100      	movs	r1, #0
 800aa68:	69f8      	ldr	r0, [r7, #28]
 800aa6a:	4798      	blx	r3
  }
}
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	08018a88 	.word	0x08018a88
 800aa78:	08018b00 	.word	0x08018b00
 800aa7c:	08018acc 	.word	0x08018acc
 800aa80:	08018b24 	.word	0x08018b24
 800aa84:	08018b44 	.word	0x08018b44

0800aa88 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b088      	sub	sp, #32
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d106      	bne.n	800aaaa <recv_tcp+0x22>
 800aa9c:	4b36      	ldr	r3, [pc, #216]	@ (800ab78 <recv_tcp+0xf0>)
 800aa9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aaa2:	4936      	ldr	r1, [pc, #216]	@ (800ab7c <recv_tcp+0xf4>)
 800aaa4:	4836      	ldr	r0, [pc, #216]	@ (800ab80 <recv_tcp+0xf8>)
 800aaa6:	f00c fd6d 	bl	8017584 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <recv_tcp+0x36>
 800aab0:	4b31      	ldr	r3, [pc, #196]	@ (800ab78 <recv_tcp+0xf0>)
 800aab2:	f240 122d 	movw	r2, #301	@ 0x12d
 800aab6:	4933      	ldr	r1, [pc, #204]	@ (800ab84 <recv_tcp+0xfc>)
 800aab8:	4831      	ldr	r0, [pc, #196]	@ (800ab80 <recv_tcp+0xf8>)
 800aaba:	f00c fd63 	bl	8017584 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800aabe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d006      	beq.n	800aad4 <recv_tcp+0x4c>
 800aac6:	4b2c      	ldr	r3, [pc, #176]	@ (800ab78 <recv_tcp+0xf0>)
 800aac8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800aacc:	492e      	ldr	r1, [pc, #184]	@ (800ab88 <recv_tcp+0x100>)
 800aace:	482c      	ldr	r0, [pc, #176]	@ (800ab80 <recv_tcp+0xf8>)
 800aad0:	f00c fd58 	bl	8017584 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <recv_tcp+0x5c>
    return ERR_VAL;
 800aade:	f06f 0305 	mvn.w	r3, #5
 800aae2:	e045      	b.n	800ab70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d006      	beq.n	800aafc <recv_tcp+0x74>
 800aaee:	4b22      	ldr	r3, [pc, #136]	@ (800ab78 <recv_tcp+0xf0>)
 800aaf0:	f240 1235 	movw	r2, #309	@ 0x135
 800aaf4:	4925      	ldr	r1, [pc, #148]	@ (800ab8c <recv_tcp+0x104>)
 800aaf6:	4822      	ldr	r0, [pc, #136]	@ (800ab80 <recv_tcp+0xf8>)
 800aaf8:	f00c fd44 	bl	8017584 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	3310      	adds	r3, #16
 800ab00:	4618      	mov	r0, r3
 800ab02:	f00c fb17 	bl	8017134 <sys_mbox_valid>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10d      	bne.n	800ab28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d008      	beq.n	800ab24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	891b      	ldrh	r3, [r3, #8]
 800ab16:	4619      	mov	r1, r3
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	f003 ffd9 	bl	800ead0 <tcp_recved>
      pbuf_free(p);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f003 f81e 	bl	800db60 <pbuf_free>
    }
    return ERR_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	e023      	b.n	800ab70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d005      	beq.n	800ab3a <recv_tcp+0xb2>
    msg = p;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	891b      	ldrh	r3, [r3, #8]
 800ab36:	83fb      	strh	r3, [r7, #30]
 800ab38:	e003      	b.n	800ab42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ab3a:	4b15      	ldr	r3, [pc, #84]	@ (800ab90 <recv_tcp+0x108>)
 800ab3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	3310      	adds	r3, #16
 800ab46:	69b9      	ldr	r1, [r7, #24]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f00c fa91 	bl	8017070 <sys_mbox_trypost>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295
 800ab58:	e00a      	b.n	800ab70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d005      	beq.n	800ab6e <recv_tcp+0xe6>
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab66:	8bfa      	ldrh	r2, [r7, #30]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6978      	ldr	r0, [r7, #20]
 800ab6c:	4798      	blx	r3
  }

  return ERR_OK;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3720      	adds	r7, #32
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	08018a88 	.word	0x08018a88
 800ab7c:	08018b64 	.word	0x08018b64
 800ab80:	08018acc 	.word	0x08018acc
 800ab84:	08018b88 	.word	0x08018b88
 800ab88:	08018ba8 	.word	0x08018ba8
 800ab8c:	08018bc0 	.word	0x08018bc0
 800ab90:	0801baa6 	.word	0x0801baa6

0800ab94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d106      	bne.n	800abb6 <poll_tcp+0x22>
 800aba8:	4b29      	ldr	r3, [pc, #164]	@ (800ac50 <poll_tcp+0xbc>)
 800abaa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800abae:	4929      	ldr	r1, [pc, #164]	@ (800ac54 <poll_tcp+0xc0>)
 800abb0:	4829      	ldr	r0, [pc, #164]	@ (800ac58 <poll_tcp+0xc4>)
 800abb2:	f00c fce7 	bl	8017584 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d104      	bne.n	800abc8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800abbe:	2101      	movs	r1, #1
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 ff65 	bl	800ba90 <lwip_netconn_do_writemore>
 800abc6:	e016      	b.n	800abf6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b04      	cmp	r3, #4
 800abce:	d112      	bne.n	800abf6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a1b      	ldr	r3, [r3, #32]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <poll_tcp+0x5a>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	7a5b      	ldrb	r3, [r3, #9]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	7a5a      	ldrb	r2, [r3, #9]
 800abe8:	3a01      	subs	r2, #1
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800abee:	2101      	movs	r1, #1
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fbf7 	bl	800b3e4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	7f1b      	ldrb	r3, [r3, #28]
 800abfa:	f003 0310 	and.w	r3, r3, #16
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d021      	beq.n	800ac46 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d01d      	beq.n	800ac46 <poll_tcp+0xb2>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ac12:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800ac16:	d316      	bcc.n	800ac46 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d810      	bhi.n	800ac46 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	7f1b      	ldrb	r3, [r3, #28]
 800ac28:	f023 0310 	bic.w	r3, r3, #16
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d005      	beq.n	800ac46 <poll_tcp+0xb2>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2102      	movs	r1, #2
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	08018a88 	.word	0x08018a88
 800ac54:	08018be0 	.word	0x08018be0
 800ac58:	08018acc 	.word	0x08018acc

0800ac5c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	4613      	mov	r3, r2
 800ac68:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <sent_tcp+0x26>
 800ac74:	4b20      	ldr	r3, [pc, #128]	@ (800acf8 <sent_tcp+0x9c>)
 800ac76:	f240 1293 	movw	r2, #403	@ 0x193
 800ac7a:	4920      	ldr	r1, [pc, #128]	@ (800acfc <sent_tcp+0xa0>)
 800ac7c:	4820      	ldr	r0, [pc, #128]	@ (800ad00 <sent_tcp+0xa4>)
 800ac7e:	f00c fc81 	bl	8017584 <iprintf>

  if (conn) {
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d032      	beq.n	800acee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	785b      	ldrb	r3, [r3, #1]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d104      	bne.n	800ac9a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ac90:	2101      	movs	r1, #1
 800ac92:	6978      	ldr	r0, [r7, #20]
 800ac94:	f000 fefc 	bl	800ba90 <lwip_netconn_do_writemore>
 800ac98:	e007      	b.n	800acaa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d103      	bne.n	800acaa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aca2:	2101      	movs	r1, #1
 800aca4:	6978      	ldr	r0, [r7, #20]
 800aca6:	f000 fb9d 	bl	800b3e4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d01d      	beq.n	800acee <sent_tcp+0x92>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800acba:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800acbe:	d316      	bcc.n	800acee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800acc8:	2b04      	cmp	r3, #4
 800acca:	d810      	bhi.n	800acee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	7f1b      	ldrb	r3, [r3, #28]
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <sent_tcp+0x92>
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace6:	88fa      	ldrh	r2, [r7, #6]
 800ace8:	2102      	movs	r1, #2
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	08018a88 	.word	0x08018a88
 800acfc:	08018be0 	.word	0x08018be0
 800ad00:	08018acc 	.word	0x08018acc

0800ad04 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b088      	sub	sp, #32
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <err_tcp+0x24>
 800ad1a:	4b5f      	ldr	r3, [pc, #380]	@ (800ae98 <err_tcp+0x194>)
 800ad1c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800ad20:	495e      	ldr	r1, [pc, #376]	@ (800ae9c <err_tcp+0x198>)
 800ad22:	485f      	ldr	r0, [pc, #380]	@ (800aea0 <err_tcp+0x19c>)
 800ad24:	f00c fc2e 	bl	8017584 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ad28:	f00c fb0e 	bl	8017348 <sys_arch_protect>
 800ad2c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	2200      	movs	r2, #0
 800ad32:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	78fa      	ldrb	r2, [r7, #3]
 800ad38:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	7f1b      	ldrb	r3, [r3, #28]
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	785b      	ldrb	r3, [r3, #1]
 800ad4c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	2200      	movs	r2, #0
 800ad52:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800ad54:	69b8      	ldr	r0, [r7, #24]
 800ad56:	f00c fb05 	bl	8017364 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <err_tcp+0x6a>
 800ad62:	69fb      	ldr	r3, [r7, #28]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2200      	movs	r2, #0
 800ad68:	2104      	movs	r1, #4
 800ad6a:	69f8      	ldr	r0, [r7, #28]
 800ad6c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d005      	beq.n	800ad82 <err_tcp+0x7e>
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	69f8      	ldr	r0, [r7, #28]
 800ad80:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <err_tcp+0x92>
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2102      	movs	r1, #2
 800ad92:	69f8      	ldr	r0, [r7, #28]
 800ad94:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800ad96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff fd86 	bl	800a8ac <lwip_netconn_err_to_msg>
 800ada0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	3310      	adds	r3, #16
 800ada6:	4618      	mov	r0, r3
 800ada8:	f00c f9c4 	bl	8017134 <sys_mbox_valid>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3310      	adds	r3, #16
 800adb6:	6939      	ldr	r1, [r7, #16]
 800adb8:	4618      	mov	r0, r3
 800adba:	f00c f959 	bl	8017070 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	3314      	adds	r3, #20
 800adc2:	4618      	mov	r0, r3
 800adc4:	f00c f9b6 	bl	8017134 <sys_mbox_valid>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	3314      	adds	r3, #20
 800add2:	6939      	ldr	r1, [r7, #16]
 800add4:	4618      	mov	r0, r3
 800add6:	f00c f94b 	bl	8017070 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d005      	beq.n	800adec <err_tcp+0xe8>
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	d002      	beq.n	800adec <err_tcp+0xe8>
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	d143      	bne.n	800ae74 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	7f1b      	ldrb	r3, [r3, #28]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bf14      	ite	ne
 800adf8:	2301      	movne	r3, #1
 800adfa:	2300      	moveq	r3, #0
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	7f1b      	ldrb	r3, [r3, #28]
 800ae04:	f023 0304 	bic.w	r3, r3, #4
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d13b      	bne.n	800ae8c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d106      	bne.n	800ae2a <err_tcp+0x126>
 800ae1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ae98 <err_tcp+0x194>)
 800ae1e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ae22:	4920      	ldr	r1, [pc, #128]	@ (800aea4 <err_tcp+0x1a0>)
 800ae24:	481e      	ldr	r0, [pc, #120]	@ (800aea0 <err_tcp+0x19c>)
 800ae26:	f00c fbad 	bl	8017584 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	2b04      	cmp	r3, #4
 800ae2e:	d104      	bne.n	800ae3a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	2200      	movs	r2, #0
 800ae36:	711a      	strb	r2, [r3, #4]
 800ae38:	e003      	b.n	800ae42 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	78fa      	ldrb	r2, [r7, #3]
 800ae40:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	6a1b      	ldr	r3, [r3, #32]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	330c      	adds	r3, #12
 800ae4a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ae4c:	68b8      	ldr	r0, [r7, #8]
 800ae4e:	f00c f9ff 	bl	8017250 <sys_sem_valid>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <err_tcp+0x162>
 800ae58:	4b0f      	ldr	r3, [pc, #60]	@ (800ae98 <err_tcp+0x194>)
 800ae5a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800ae5e:	4912      	ldr	r1, [pc, #72]	@ (800aea8 <err_tcp+0x1a4>)
 800ae60:	480f      	ldr	r0, [pc, #60]	@ (800aea0 <err_tcp+0x19c>)
 800ae62:	f00c fb8f 	bl	8017584 <iprintf>
      conn->current_msg = NULL;
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800ae6c:	68b8      	ldr	r0, [r7, #8]
 800ae6e:	f00c f9d5 	bl	801721c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ae72:	e00b      	b.n	800ae8c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d008      	beq.n	800ae8e <err_tcp+0x18a>
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <err_tcp+0x194>)
 800ae7e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800ae82:	490a      	ldr	r1, [pc, #40]	@ (800aeac <err_tcp+0x1a8>)
 800ae84:	4806      	ldr	r0, [pc, #24]	@ (800aea0 <err_tcp+0x19c>)
 800ae86:	f00c fb7d 	bl	8017584 <iprintf>
  }
}
 800ae8a:	e000      	b.n	800ae8e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ae8c:	bf00      	nop
}
 800ae8e:	bf00      	nop
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	08018a88 	.word	0x08018a88
 800ae9c:	08018be0 	.word	0x08018be0
 800aea0:	08018acc 	.word	0x08018acc
 800aea4:	08018bf0 	.word	0x08018bf0
 800aea8:	08018c0c 	.word	0x08018c0c
 800aeac:	08018c28 	.word	0x08018c28

0800aeb0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800aebe:	6879      	ldr	r1, [r7, #4]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f004 fccd 	bl	800f860 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800aec6:	490a      	ldr	r1, [pc, #40]	@ (800aef0 <setup_tcp+0x40>)
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f004 fcdb 	bl	800f884 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800aece:	4909      	ldr	r1, [pc, #36]	@ (800aef4 <setup_tcp+0x44>)
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f004 fcf9 	bl	800f8c8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800aed6:	2202      	movs	r2, #2
 800aed8:	4907      	ldr	r1, [pc, #28]	@ (800aef8 <setup_tcp+0x48>)
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f004 fd50 	bl	800f980 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800aee0:	4906      	ldr	r1, [pc, #24]	@ (800aefc <setup_tcp+0x4c>)
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f004 fd12 	bl	800f90c <tcp_err>
}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	0800aa89 	.word	0x0800aa89
 800aef4:	0800ac5d 	.word	0x0800ac5d
 800aef8:	0800ab95 	.word	0x0800ab95
 800aefc:	0800ad05 	.word	0x0800ad05

0800af00 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800af00:	b590      	push	{r4, r7, lr}
 800af02:	b089      	sub	sp, #36	@ 0x24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d102      	bne.n	800af1e <accept_function+0x1e>
    return ERR_VAL;
 800af18:	f06f 0305 	mvn.w	r3, #5
 800af1c:	e0a1      	b.n	800b062 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3314      	adds	r3, #20
 800af22:	4618      	mov	r0, r3
 800af24:	f00c f906 	bl	8017134 <sys_mbox_valid>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800af2e:	f06f 0305 	mvn.w	r3, #5
 800af32:	e096      	b.n	800b062 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d11b      	bne.n	800af72 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	f103 0414 	add.w	r4, r3, #20
 800af40:	f06f 000c 	mvn.w	r0, #12
 800af44:	f7ff fcb2 	bl	800a8ac <lwip_netconn_err_to_msg>
 800af48:	4603      	mov	r3, r0
 800af4a:	4619      	mov	r1, r3
 800af4c:	4620      	mov	r0, r4
 800af4e:	f00c f88f 	bl	8017070 <sys_mbox_trypost>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d109      	bne.n	800af6c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <accept_function+0x6c>
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af64:	2200      	movs	r2, #0
 800af66:	2100      	movs	r1, #0
 800af68:	69f8      	ldr	r0, [r7, #28]
 800af6a:	4798      	blx	r3
    }
    return ERR_VAL;
 800af6c:	f06f 0305 	mvn.w	r3, #5
 800af70:	e077      	b.n	800b062 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800af72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d006      	beq.n	800af88 <accept_function+0x88>
 800af7a:	4b3c      	ldr	r3, [pc, #240]	@ (800b06c <accept_function+0x16c>)
 800af7c:	f240 222a 	movw	r2, #554	@ 0x22a
 800af80:	493b      	ldr	r1, [pc, #236]	@ (800b070 <accept_function+0x170>)
 800af82:	483c      	ldr	r0, [pc, #240]	@ (800b074 <accept_function+0x174>)
 800af84:	f00c fafe 	bl	8017584 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f000 f8f0 	bl	800b178 <netconn_alloc>
 800af98:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d11b      	bne.n	800afd8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	f103 0414 	add.w	r4, r3, #20
 800afa6:	f06f 000c 	mvn.w	r0, #12
 800afaa:	f7ff fc7f 	bl	800a8ac <lwip_netconn_err_to_msg>
 800afae:	4603      	mov	r3, r0
 800afb0:	4619      	mov	r1, r3
 800afb2:	4620      	mov	r0, r4
 800afb4:	f00c f85c 	bl	8017070 <sys_mbox_trypost>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d109      	bne.n	800afd2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800afbe:	69fb      	ldr	r3, [r7, #28]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <accept_function+0xd2>
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afca:	2200      	movs	r2, #0
 800afcc:	2100      	movs	r1, #0
 800afce:	69f8      	ldr	r0, [r7, #28]
 800afd0:	4798      	blx	r3
    }
    return ERR_MEM;
 800afd2:	f04f 33ff 	mov.w	r3, #4294967295
 800afd6:	e044      	b.n	800b062 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800afde:	69b8      	ldr	r0, [r7, #24]
 800afe0:	f7ff ff66 	bl	800aeb0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	3314      	adds	r3, #20
 800afe8:	69b9      	ldr	r1, [r7, #24]
 800afea:	4618      	mov	r0, r3
 800afec:	f00c f840 	bl	8017070 <sys_mbox_trypost>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d02a      	beq.n	800b04c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800affc:	2100      	movs	r1, #0
 800affe:	6978      	ldr	r0, [r7, #20]
 800b000:	f004 fc2e 	bl	800f860 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b004:	2100      	movs	r1, #0
 800b006:	6978      	ldr	r0, [r7, #20]
 800b008:	f004 fc3c 	bl	800f884 <tcp_recv>
    tcp_sent(pcb, NULL);
 800b00c:	2100      	movs	r1, #0
 800b00e:	6978      	ldr	r0, [r7, #20]
 800b010:	f004 fc5a 	bl	800f8c8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b014:	2200      	movs	r2, #0
 800b016:	2100      	movs	r1, #0
 800b018:	6978      	ldr	r0, [r7, #20]
 800b01a:	f004 fcb1 	bl	800f980 <tcp_poll>
    tcp_err(pcb, NULL);
 800b01e:	2100      	movs	r1, #0
 800b020:	6978      	ldr	r0, [r7, #20]
 800b022:	f004 fc73 	bl	800f90c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	2200      	movs	r2, #0
 800b02a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	3310      	adds	r3, #16
 800b030:	4618      	mov	r0, r3
 800b032:	f00c f80b 	bl	801704c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	3310      	adds	r3, #16
 800b03a:	4618      	mov	r0, r3
 800b03c:	f00c f88b 	bl	8017156 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b040:	69b8      	ldr	r0, [r7, #24]
 800b042:	f000 f907 	bl	800b254 <netconn_free>
    return ERR_MEM;
 800b046:	f04f 33ff 	mov.w	r3, #4294967295
 800b04a:	e00a      	b.n	800b062 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <accept_function+0x160>
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	69f8      	ldr	r0, [r7, #28]
 800b05e:	4798      	blx	r3
  }

  return ERR_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3724      	adds	r7, #36	@ 0x24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd90      	pop	{r4, r7, pc}
 800b06a:	bf00      	nop
 800b06c:	08018a88 	.word	0x08018a88
 800b070:	08018c44 	.word	0x08018c44
 800b074:	08018acc 	.word	0x08018acc

0800b078 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b078:	b590      	push	{r4, r7, lr}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d006      	beq.n	800b09c <pcb_new+0x24>
 800b08e:	4b2b      	ldr	r3, [pc, #172]	@ (800b13c <pcb_new+0xc4>)
 800b090:	f240 2265 	movw	r2, #613	@ 0x265
 800b094:	492a      	ldr	r1, [pc, #168]	@ (800b140 <pcb_new+0xc8>)
 800b096:	482b      	ldr	r0, [pc, #172]	@ (800b144 <pcb_new+0xcc>)
 800b098:	f00c fa74 	bl	8017584 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	d022      	beq.n	800b0f0 <pcb_new+0x78>
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d133      	bne.n	800b116 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681c      	ldr	r4, [r3, #0]
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f009 fcac 	bl	8014a12 <udp_new_ip_type>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02a      	beq.n	800b11e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	2b22      	cmp	r3, #34	@ 0x22
 800b0d0:	d104      	bne.n	800b0dc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	4917      	ldr	r1, [pc, #92]	@ (800b148 <pcb_new+0xd0>)
 800b0ea:	f009 fc19 	bl	8014920 <udp_recv>
      }
      break;
 800b0ee:	e016      	b.n	800b11e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681c      	ldr	r4, [r3, #0]
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f004 fba4 	bl	800f844 <tcp_new_ip_type>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00b      	beq.n	800b122 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff fece 	bl	800aeb0 <setup_tcp>
      }
      break;
 800b114:	e005      	b.n	800b122 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	22fa      	movs	r2, #250	@ 0xfa
 800b11a:	711a      	strb	r2, [r3, #4]
      return;
 800b11c:	e00a      	b.n	800b134 <pcb_new+0xbc>
      break;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <pcb_new+0xac>
      break;
 800b122:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d102      	bne.n	800b134 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	22ff      	movs	r2, #255	@ 0xff
 800b132:	711a      	strb	r2, [r3, #4]
  }
}
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	bd90      	pop	{r4, r7, pc}
 800b13a:	bf00      	nop
 800b13c:	08018a88 	.word	0x08018a88
 800b140:	08018c6c 	.word	0x08018c6c
 800b144:	08018acc 	.word	0x08018acc
 800b148:	0800a98d 	.word	0x0800a98d

0800b14c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7ff ff85 	bl	800b078 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
	...

0800b178 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b184:	2300      	movs	r3, #0
 800b186:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b188:	2007      	movs	r0, #7
 800b18a:	f001 fdf3 	bl	800cd74 <memp_malloc>
 800b18e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <netconn_alloc+0x22>
    return NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	e052      	b.n	800b240 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	79fa      	ldrb	r2, [r7, #7]
 800b1a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b1ac:	79fb      	ldrb	r3, [r7, #7]
 800b1ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b1b2:	2b10      	cmp	r3, #16
 800b1b4:	d004      	beq.n	800b1c0 <netconn_alloc+0x48>
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d105      	bne.n	800b1c6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b1ba:	2306      	movs	r3, #6
 800b1bc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b1be:	e00a      	b.n	800b1d6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b1c0:	2306      	movs	r3, #6
 800b1c2:	617b      	str	r3, [r7, #20]
      break;
 800b1c4:	e007      	b.n	800b1d6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b1c6:	4b20      	ldr	r3, [pc, #128]	@ (800b248 <netconn_alloc+0xd0>)
 800b1c8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800b1cc:	491f      	ldr	r1, [pc, #124]	@ (800b24c <netconn_alloc+0xd4>)
 800b1ce:	4820      	ldr	r0, [pc, #128]	@ (800b250 <netconn_alloc+0xd8>)
 800b1d0:	f00c f9d8 	bl	8017584 <iprintf>
      goto free_and_return;
 800b1d4:	e02f      	b.n	800b236 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3310      	adds	r3, #16
 800b1da:	6979      	ldr	r1, [r7, #20]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f00b ff1b 	bl	8017018 <sys_mbox_new>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d125      	bne.n	800b234 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f00b ffbe 	bl	8017170 <sys_sem_new>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d005      	beq.n	800b206 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3310      	adds	r3, #16
 800b1fe:	4618      	mov	r0, r3
 800b200:	f00b ff24 	bl	801704c <sys_mbox_free>
    goto free_and_return;
 800b204:	e017      	b.n	800b236 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3314      	adds	r3, #20
 800b20a:	4618      	mov	r0, r3
 800b20c:	f00b ffa3 	bl	8017156 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	683a      	ldr	r2, [r7, #0]
 800b222:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	7cfa      	ldrb	r2, [r7, #19]
 800b22e:	771a      	strb	r2, [r3, #28]
  return conn;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e005      	b.n	800b240 <netconn_alloc+0xc8>
    goto free_and_return;
 800b234:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	2007      	movs	r0, #7
 800b23a:	f001 fded 	bl	800ce18 <memp_free>
  return NULL;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	08018a88 	.word	0x08018a88
 800b24c:	08018c8c 	.word	0x08018c8c
 800b250:	08018acc 	.word	0x08018acc

0800b254 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d006      	beq.n	800b272 <netconn_free+0x1e>
 800b264:	4b1b      	ldr	r3, [pc, #108]	@ (800b2d4 <netconn_free+0x80>)
 800b266:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b26a:	491b      	ldr	r1, [pc, #108]	@ (800b2d8 <netconn_free+0x84>)
 800b26c:	481b      	ldr	r0, [pc, #108]	@ (800b2dc <netconn_free+0x88>)
 800b26e:	f00c f989 	bl	8017584 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3310      	adds	r3, #16
 800b276:	4618      	mov	r0, r3
 800b278:	f00b ff5c 	bl	8017134 <sys_mbox_valid>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d006      	beq.n	800b290 <netconn_free+0x3c>
 800b282:	4b14      	ldr	r3, [pc, #80]	@ (800b2d4 <netconn_free+0x80>)
 800b284:	f240 3223 	movw	r2, #803	@ 0x323
 800b288:	4915      	ldr	r1, [pc, #84]	@ (800b2e0 <netconn_free+0x8c>)
 800b28a:	4814      	ldr	r0, [pc, #80]	@ (800b2dc <netconn_free+0x88>)
 800b28c:	f00c f97a 	bl	8017584 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3314      	adds	r3, #20
 800b294:	4618      	mov	r0, r3
 800b296:	f00b ff4d 	bl	8017134 <sys_mbox_valid>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <netconn_free+0x5a>
 800b2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d4 <netconn_free+0x80>)
 800b2a2:	f240 3226 	movw	r2, #806	@ 0x326
 800b2a6:	490f      	ldr	r1, [pc, #60]	@ (800b2e4 <netconn_free+0x90>)
 800b2a8:	480c      	ldr	r0, [pc, #48]	@ (800b2dc <netconn_free+0x88>)
 800b2aa:	f00c f96b 	bl	8017584 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f00b ffbf 	bl	8017236 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	330c      	adds	r3, #12
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f00b ffd8 	bl	8017272 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b2c2:	6879      	ldr	r1, [r7, #4]
 800b2c4:	2007      	movs	r0, #7
 800b2c6:	f001 fda7 	bl	800ce18 <memp_free>
}
 800b2ca:	bf00      	nop
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	08018a88 	.word	0x08018a88
 800b2d8:	08018cb4 	.word	0x08018cb4
 800b2dc:	08018acc 	.word	0x08018acc
 800b2e0:	08018ce4 	.word	0x08018ce4
 800b2e4:	08018d20 	.word	0x08018d20

0800b2e8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3310      	adds	r3, #16
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f00b ff1d 	bl	8017134 <sys_mbox_valid>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d02f      	beq.n	800b360 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b300:	e018      	b.n	800b334 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b30a:	2b10      	cmp	r3, #16
 800b30c:	d10e      	bne.n	800b32c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f107 020f 	add.w	r2, r7, #15
 800b314:	4611      	mov	r1, r2
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fafe 	bl	800a918 <lwip_netconn_is_err_msg>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d108      	bne.n	800b334 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	4618      	mov	r0, r3
 800b326:	f002 fc1b 	bl	800db60 <pbuf_free>
 800b32a:	e003      	b.n	800b334 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 fe92 	bl	800c058 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3310      	adds	r3, #16
 800b338:	f107 0210 	add.w	r2, r7, #16
 800b33c:	4611      	mov	r1, r2
 800b33e:	4618      	mov	r0, r3
 800b340:	f00b fee1 	bl	8017106 <sys_arch_mbox_tryfetch>
 800b344:	4603      	mov	r3, r0
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34a:	d1da      	bne.n	800b302 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	3310      	adds	r3, #16
 800b350:	4618      	mov	r0, r3
 800b352:	f00b fe7b 	bl	801704c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3310      	adds	r3, #16
 800b35a:	4618      	mov	r0, r3
 800b35c:	f00b fefb 	bl	8017156 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3314      	adds	r3, #20
 800b364:	4618      	mov	r0, r3
 800b366:	f00b fee5 	bl	8017134 <sys_mbox_valid>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d034      	beq.n	800b3da <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b370:	e01d      	b.n	800b3ae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f107 020e 	add.w	r2, r7, #14
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7ff facc 	bl	800a918 <lwip_netconn_is_err_msg>
 800b380:	4603      	mov	r3, r0
 800b382:	2b00      	cmp	r3, #0
 800b384:	d113      	bne.n	800b3ae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b38a:	6978      	ldr	r0, [r7, #20]
 800b38c:	f7ff ffac 	bl	800b2e8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d007      	beq.n	800b3a8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f003 f9cf 	bl	800e740 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b3a8:	6978      	ldr	r0, [r7, #20]
 800b3aa:	f7ff ff53 	bl	800b254 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3314      	adds	r3, #20
 800b3b2:	f107 0210 	add.w	r2, r7, #16
 800b3b6:	4611      	mov	r1, r2
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f00b fea4 	bl	8017106 <sys_arch_mbox_tryfetch>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c4:	d1d5      	bne.n	800b372 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3314      	adds	r3, #20
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f00b fe3e 	bl	801704c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3314      	adds	r3, #20
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f00b febe 	bl	8017156 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b3da:	bf00      	nop
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <lwip_netconn_do_close_internal+0x24>
 800b3fa:	4b87      	ldr	r3, [pc, #540]	@ (800b618 <lwip_netconn_do_close_internal+0x234>)
 800b3fc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800b400:	4986      	ldr	r1, [pc, #536]	@ (800b61c <lwip_netconn_do_close_internal+0x238>)
 800b402:	4887      	ldr	r0, [pc, #540]	@ (800b620 <lwip_netconn_do_close_internal+0x23c>)
 800b404:	f00c f8be 	bl	8017584 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b410:	2b10      	cmp	r3, #16
 800b412:	d006      	beq.n	800b422 <lwip_netconn_do_close_internal+0x3e>
 800b414:	4b80      	ldr	r3, [pc, #512]	@ (800b618 <lwip_netconn_do_close_internal+0x234>)
 800b416:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800b41a:	4982      	ldr	r1, [pc, #520]	@ (800b624 <lwip_netconn_do_close_internal+0x240>)
 800b41c:	4880      	ldr	r0, [pc, #512]	@ (800b620 <lwip_netconn_do_close_internal+0x23c>)
 800b41e:	f00c f8b1 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	785b      	ldrb	r3, [r3, #1]
 800b426:	2b04      	cmp	r3, #4
 800b428:	d006      	beq.n	800b438 <lwip_netconn_do_close_internal+0x54>
 800b42a:	4b7b      	ldr	r3, [pc, #492]	@ (800b618 <lwip_netconn_do_close_internal+0x234>)
 800b42c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800b430:	497d      	ldr	r1, [pc, #500]	@ (800b628 <lwip_netconn_do_close_internal+0x244>)
 800b432:	487b      	ldr	r0, [pc, #492]	@ (800b620 <lwip_netconn_do_close_internal+0x23c>)
 800b434:	f00c f8a6 	bl	8017584 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d106      	bne.n	800b44e <lwip_netconn_do_close_internal+0x6a>
 800b440:	4b75      	ldr	r3, [pc, #468]	@ (800b618 <lwip_netconn_do_close_internal+0x234>)
 800b442:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800b446:	4979      	ldr	r1, [pc, #484]	@ (800b62c <lwip_netconn_do_close_internal+0x248>)
 800b448:	4875      	ldr	r0, [pc, #468]	@ (800b620 <lwip_netconn_do_close_internal+0x23c>)
 800b44a:	f00c f89b 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d106      	bne.n	800b464 <lwip_netconn_do_close_internal+0x80>
 800b456:	4b70      	ldr	r3, [pc, #448]	@ (800b618 <lwip_netconn_do_close_internal+0x234>)
 800b458:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b45c:	4974      	ldr	r1, [pc, #464]	@ (800b630 <lwip_netconn_do_close_internal+0x24c>)
 800b45e:	4870      	ldr	r0, [pc, #448]	@ (800b620 <lwip_netconn_do_close_internal+0x23c>)
 800b460:	f00c f890 	bl	8017584 <iprintf>

  tpcb = conn->pcb.tcp;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	7a1b      	ldrb	r3, [r3, #8]
 800b470:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	f003 0302 	and.w	r3, r3, #2
 800b480:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d102      	bne.n	800b48e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b488:	2301      	movs	r3, #1
 800b48a:	75bb      	strb	r3, [r7, #22]
 800b48c:	e01f      	b.n	800b4ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00e      	beq.n	800b4b2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b498:	2b05      	cmp	r3, #5
 800b49a:	d007      	beq.n	800b4ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b4a0:	2b06      	cmp	r3, #6
 800b4a2:	d003      	beq.n	800b4ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b4a8:	2b08      	cmp	r3, #8
 800b4aa:	d102      	bne.n	800b4b2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	75bb      	strb	r3, [r7, #22]
 800b4b0:	e00d      	b.n	800b4ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b4b2:	7b7b      	ldrb	r3, [r7, #13]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <lwip_netconn_do_close_internal+0xe6>
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	8b5b      	ldrh	r3, [r3, #26]
 800b4bc:	f003 0310 	and.w	r3, r3, #16
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75bb      	strb	r3, [r7, #22]
 800b4c8:	e001      	b.n	800b4ce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b4ce:	7dbb      	ldrb	r3, [r7, #22]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6938      	ldr	r0, [r7, #16]
 800b4d8:	f004 f9c2 	bl	800f860 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	7d1b      	ldrb	r3, [r3, #20]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d104      	bne.n	800b4ee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	6938      	ldr	r0, [r7, #16]
 800b4e8:	f004 fa32 	bl	800f950 <tcp_accept>
 800b4ec:	e01d      	b.n	800b52a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6938      	ldr	r0, [r7, #16]
 800b4f8:	f004 f9c4 	bl	800f884 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6938      	ldr	r0, [r7, #16]
 800b500:	f004 fa26 	bl	800f950 <tcp_accept>
    }
    if (shut_tx) {
 800b504:	7b7b      	ldrb	r3, [r7, #13]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b50a:	2100      	movs	r1, #0
 800b50c:	6938      	ldr	r0, [r7, #16]
 800b50e:	f004 f9db 	bl	800f8c8 <tcp_sent>
    }
    if (shut_close) {
 800b512:	7dbb      	ldrb	r3, [r7, #22]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d008      	beq.n	800b52a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b518:	2200      	movs	r2, #0
 800b51a:	2100      	movs	r1, #0
 800b51c:	6938      	ldr	r0, [r7, #16]
 800b51e:	f004 fa2f 	bl	800f980 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b522:	2100      	movs	r1, #0
 800b524:	6938      	ldr	r0, [r7, #16]
 800b526:	f004 f9f1 	bl	800f90c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b52a:	7dbb      	ldrb	r3, [r7, #22]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d005      	beq.n	800b53c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b530:	6938      	ldr	r0, [r7, #16]
 800b532:	f002 ffbf 	bl	800e4b4 <tcp_close>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
 800b53a:	e007      	b.n	800b54c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b53c:	7bbb      	ldrb	r3, [r7, #14]
 800b53e:	7b7a      	ldrb	r2, [r7, #13]
 800b540:	4619      	mov	r1, r3
 800b542:	6938      	ldr	r0, [r7, #16]
 800b544:	f002 ffe2 	bl	800e50c <tcp_shutdown>
 800b548:	4603      	mov	r3, r0
 800b54a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b554:	2301      	movs	r3, #1
 800b556:	757b      	strb	r3, [r7, #21]
 800b558:	e016      	b.n	800b588 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d10f      	bne.n	800b584 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	7a5b      	ldrb	r3, [r3, #9]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10c      	bne.n	800b588 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b56e:	2301      	movs	r3, #1
 800b570:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b572:	7dbb      	ldrb	r3, [r7, #22]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d007      	beq.n	800b588 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b578:	6938      	ldr	r0, [r7, #16]
 800b57a:	f003 f8e1 	bl	800e740 <tcp_abort>
          err = ERR_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
 800b582:	e001      	b.n	800b588 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b584:	2301      	movs	r3, #1
 800b586:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b588:	7d7b      	ldrb	r3, [r7, #21]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d052      	beq.n	800b634 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	330c      	adds	r3, #12
 800b596:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a1b      	ldr	r3, [r3, #32]
 800b59c:	7dfa      	ldrb	r2, [r7, #23]
 800b59e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b5ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d129      	bne.n	800b608 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b5b4:	7dbb      	ldrb	r3, [r7, #22]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00c      	beq.n	800b5d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <lwip_netconn_do_close_internal+0x1f0>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2104      	movs	r1, #4
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	4798      	blx	r3
      }
      if (shut_rx) {
 800b5d4:	7bbb      	ldrb	r3, [r7, #14]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d005      	beq.n	800b5ee <lwip_netconn_do_close_internal+0x20a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
      }
      if (shut_tx) {
 800b5ee:	7b7b      	ldrb	r3, [r7, #13]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d009      	beq.n	800b608 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d005      	beq.n	800b608 <lwip_netconn_do_close_internal+0x224>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b600:	2200      	movs	r2, #0
 800b602:	2102      	movs	r1, #2
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b608:	78fb      	ldrb	r3, [r7, #3]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b60e:	68b8      	ldr	r0, [r7, #8]
 800b610:	f00b fe04 	bl	801721c <sys_sem_signal>
    }
    return ERR_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	e03c      	b.n	800b692 <lwip_netconn_do_close_internal+0x2ae>
 800b618:	08018a88 	.word	0x08018a88
 800b61c:	08018d5c 	.word	0x08018d5c
 800b620:	08018acc 	.word	0x08018acc
 800b624:	08018d6c 	.word	0x08018d6c
 800b628:	08018d8c 	.word	0x08018d8c
 800b62c:	08018db0 	.word	0x08018db0
 800b630:	08018bf0 	.word	0x08018bf0
  }
  if (!close_finished) {
 800b634:	7d7b      	ldrb	r3, [r7, #21]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d11e      	bne.n	800b678 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	7d1b      	ldrb	r3, [r3, #20]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d106      	bne.n	800b650 <lwip_netconn_do_close_internal+0x26c>
 800b642:	4b16      	ldr	r3, [pc, #88]	@ (800b69c <lwip_netconn_do_close_internal+0x2b8>)
 800b644:	f240 4241 	movw	r2, #1089	@ 0x441
 800b648:	4915      	ldr	r1, [pc, #84]	@ (800b6a0 <lwip_netconn_do_close_internal+0x2bc>)
 800b64a:	4816      	ldr	r0, [pc, #88]	@ (800b6a4 <lwip_netconn_do_close_internal+0x2c0>)
 800b64c:	f00b ff9a 	bl	8017584 <iprintf>
    if (shut_tx) {
 800b650:	7b7b      	ldrb	r3, [r7, #13]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b656:	4914      	ldr	r1, [pc, #80]	@ (800b6a8 <lwip_netconn_do_close_internal+0x2c4>)
 800b658:	6938      	ldr	r0, [r7, #16]
 800b65a:	f004 f935 	bl	800f8c8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b65e:	2201      	movs	r2, #1
 800b660:	4912      	ldr	r1, [pc, #72]	@ (800b6ac <lwip_netconn_do_close_internal+0x2c8>)
 800b662:	6938      	ldr	r0, [r7, #16]
 800b664:	f004 f98c 	bl	800f980 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b668:	4911      	ldr	r1, [pc, #68]	@ (800b6b0 <lwip_netconn_do_close_internal+0x2cc>)
 800b66a:	6938      	ldr	r0, [r7, #16]
 800b66c:	f004 f94e 	bl	800f90c <tcp_err>
    tcp_arg(tpcb, conn);
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	6938      	ldr	r0, [r7, #16]
 800b674:	f004 f8f4 	bl	800f860 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <lwip_netconn_do_close_internal+0x2aa>
 800b680:	4b06      	ldr	r3, [pc, #24]	@ (800b69c <lwip_netconn_do_close_internal+0x2b8>)
 800b682:	f240 424d 	movw	r2, #1101	@ 0x44d
 800b686:	490b      	ldr	r1, [pc, #44]	@ (800b6b4 <lwip_netconn_do_close_internal+0x2d0>)
 800b688:	4806      	ldr	r0, [pc, #24]	@ (800b6a4 <lwip_netconn_do_close_internal+0x2c0>)
 800b68a:	f00b ff7b 	bl	8017584 <iprintf>
  return err;
 800b68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	08018a88 	.word	0x08018a88
 800b6a0:	08018dc4 	.word	0x08018dc4
 800b6a4:	08018acc 	.word	0x08018acc
 800b6a8:	0800ac5d 	.word	0x0800ac5d
 800b6ac:	0800ab95 	.word	0x0800ab95
 800b6b0:	0800ad05 	.word	0x0800ad05
 800b6b4:	08018de8 	.word	0x08018de8

0800b6b8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00d      	beq.n	800b6ee <lwip_netconn_do_delconn+0x36>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b6dc:	2b10      	cmp	r3, #16
 800b6de:	d006      	beq.n	800b6ee <lwip_netconn_do_delconn+0x36>
 800b6e0:	4b60      	ldr	r3, [pc, #384]	@ (800b864 <lwip_netconn_do_delconn+0x1ac>)
 800b6e2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800b6e6:	4960      	ldr	r1, [pc, #384]	@ (800b868 <lwip_netconn_do_delconn+0x1b0>)
 800b6e8:	4860      	ldr	r0, [pc, #384]	@ (800b86c <lwip_netconn_do_delconn+0x1b4>)
 800b6ea:	f00b ff4b 	bl	8017584 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b6ee:	7afb      	ldrb	r3, [r7, #11]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <lwip_netconn_do_delconn+0x48>
 800b6f4:	7afb      	ldrb	r3, [r7, #11]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d002      	beq.n	800b700 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b6fa:	7afb      	ldrb	r3, [r7, #11]
 800b6fc:	2b03      	cmp	r3, #3
 800b6fe:	d109      	bne.n	800b714 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	2b03      	cmp	r3, #3
 800b704:	d10a      	bne.n	800b71c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	7f1b      	ldrb	r3, [r3, #28]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b00      	cmp	r3, #0
 800b712:	d103      	bne.n	800b71c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	22fb      	movs	r2, #251	@ 0xfb
 800b718:	711a      	strb	r2, [r3, #4]
 800b71a:	e097      	b.n	800b84c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b71c:	7afb      	ldrb	r3, [r7, #11]
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d10d      	bne.n	800b73e <lwip_netconn_do_delconn+0x86>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	7f1b      	ldrb	r3, [r3, #28]
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <lwip_netconn_do_delconn+0x86>
 800b730:	4b4c      	ldr	r3, [pc, #304]	@ (800b864 <lwip_netconn_do_delconn+0x1ac>)
 800b732:	f240 427a 	movw	r2, #1146	@ 0x47a
 800b736:	494e      	ldr	r1, [pc, #312]	@ (800b870 <lwip_netconn_do_delconn+0x1b8>)
 800b738:	484c      	ldr	r0, [pc, #304]	@ (800b86c <lwip_netconn_do_delconn+0x1b4>)
 800b73a:	f00b ff23 	bl	8017584 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fdcd 	bl	800b2e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d05f      	beq.n	800b818 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b762:	2b10      	cmp	r3, #16
 800b764:	d00d      	beq.n	800b782 <lwip_netconn_do_delconn+0xca>
 800b766:	2b20      	cmp	r3, #32
 800b768:	d151      	bne.n	800b80e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	2200      	movs	r2, #0
 800b772:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f009 f8f0 	bl	8014960 <udp_remove>
          break;
 800b780:	e046      	b.n	800b810 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6a1b      	ldr	r3, [r3, #32]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <lwip_netconn_do_delconn+0xe2>
 800b78c:	4b35      	ldr	r3, [pc, #212]	@ (800b864 <lwip_netconn_do_delconn+0x1ac>)
 800b78e:	f240 4294 	movw	r2, #1172	@ 0x494
 800b792:	4938      	ldr	r1, [pc, #224]	@ (800b874 <lwip_netconn_do_delconn+0x1bc>)
 800b794:	4835      	ldr	r0, [pc, #212]	@ (800b86c <lwip_netconn_do_delconn+0x1b4>)
 800b796:	f00b fef5 	bl	8017584 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	2204      	movs	r2, #4
 800b7a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2203      	movs	r2, #3
 800b7a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7ff fe14 	bl	800b3e4 <lwip_netconn_do_close_internal>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d04b      	beq.n	800b85a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	785b      	ldrb	r3, [r3, #1]
 800b7c8:	2b04      	cmp	r3, #4
 800b7ca:	d006      	beq.n	800b7da <lwip_netconn_do_delconn+0x122>
 800b7cc:	4b25      	ldr	r3, [pc, #148]	@ (800b864 <lwip_netconn_do_delconn+0x1ac>)
 800b7ce:	f240 429a 	movw	r2, #1178	@ 0x49a
 800b7d2:	4929      	ldr	r1, [pc, #164]	@ (800b878 <lwip_netconn_do_delconn+0x1c0>)
 800b7d4:	4825      	ldr	r0, [pc, #148]	@ (800b86c <lwip_netconn_do_delconn+0x1b4>)
 800b7d6:	f00b fed5 	bl	8017584 <iprintf>
            UNLOCK_TCPIP_CORE();
 800b7da:	4828      	ldr	r0, [pc, #160]	@ (800b87c <lwip_netconn_do_delconn+0x1c4>)
 800b7dc:	f00b fd87 	bl	80172ee <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f00b fce6 	bl	80171ba <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b7ee:	4823      	ldr	r0, [pc, #140]	@ (800b87c <lwip_netconn_do_delconn+0x1c4>)
 800b7f0:	f00b fd6e 	bl	80172d0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	785b      	ldrb	r3, [r3, #1]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d02d      	beq.n	800b85a <lwip_netconn_do_delconn+0x1a2>
 800b7fe:	4b19      	ldr	r3, [pc, #100]	@ (800b864 <lwip_netconn_do_delconn+0x1ac>)
 800b800:	f240 429e 	movw	r2, #1182	@ 0x49e
 800b804:	491c      	ldr	r1, [pc, #112]	@ (800b878 <lwip_netconn_do_delconn+0x1c0>)
 800b806:	4819      	ldr	r0, [pc, #100]	@ (800b86c <lwip_netconn_do_delconn+0x1b4>)
 800b808:	f00b febc 	bl	8017584 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b80c:	e025      	b.n	800b85a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b80e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2200      	movs	r2, #0
 800b816:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <lwip_netconn_do_delconn+0x17a>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	6810      	ldr	r0, [r2, #0]
 800b82c:	2200      	movs	r2, #0
 800b82e:	2100      	movs	r1, #0
 800b830:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <lwip_netconn_do_delconn+0x194>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	6810      	ldr	r0, [r2, #0]
 800b846:	2200      	movs	r2, #0
 800b848:	2102      	movs	r1, #2
 800b84a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	4618      	mov	r0, r3
 800b854:	f00b fcfc 	bl	8017250 <sys_sem_valid>
 800b858:	e000      	b.n	800b85c <lwip_netconn_do_delconn+0x1a4>
          return;
 800b85a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	08018a88 	.word	0x08018a88
 800b868:	08018df8 	.word	0x08018df8
 800b86c:	08018acc 	.word	0x08018acc
 800b870:	08018e0c 	.word	0x08018e0c
 800b874:	08018e2c 	.word	0x08018e2c
 800b878:	08018e48 	.word	0x08018e48
 800b87c:	2000863c 	.word	0x2000863c

0800b880 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d025      	beq.n	800b8e2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b8a0:	2b10      	cmp	r3, #16
 800b8a2:	d00e      	beq.n	800b8c2 <lwip_netconn_do_bind+0x42>
 800b8a4:	2b20      	cmp	r3, #32
 800b8a6:	d119      	bne.n	800b8dc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	6858      	ldr	r0, [r3, #4]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	6899      	ldr	r1, [r3, #8]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	899b      	ldrh	r3, [r3, #12]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f008 ffaa 	bl	8014810 <udp_bind>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]
        break;
 800b8c0:	e011      	b.n	800b8e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6858      	ldr	r0, [r3, #4]
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6899      	ldr	r1, [r3, #8]
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	899b      	ldrh	r3, [r3, #12]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	f002 ff41 	bl	800e758 <tcp_bind>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	73fb      	strb	r3, [r7, #15]
        break;
 800b8da:	e004      	b.n	800b8e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800b8dc:	23fa      	movs	r3, #250	@ 0xfa
 800b8de:	73fb      	strb	r3, [r7, #15]
        break;
 800b8e0:	e001      	b.n	800b8e6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800b8e2:	23fa      	movs	r3, #250	@ 0xfa
 800b8e4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	7bfa      	ldrb	r2, [r7, #15]
 800b8ea:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d07f      	beq.n	800ba0a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b914:	2b10      	cmp	r3, #16
 800b916:	d175      	bne.n	800ba04 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	785b      	ldrb	r3, [r3, #1]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d165      	bne.n	800b9ee <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	7d1b      	ldrb	r3, [r3, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d002      	beq.n	800b934 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800b92e:	23fa      	movs	r3, #250	@ 0xfa
 800b930:	72fb      	strb	r3, [r7, #11]
 800b932:	e06c      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800b934:	23ff      	movs	r3, #255	@ 0xff
 800b936:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f107 020b 	add.w	r2, r7, #11
 800b942:	7cf9      	ldrb	r1, [r7, #19]
 800b944:	4618      	mov	r0, r3
 800b946:	f002 ffbf 	bl	800e8c8 <tcp_listen_with_backlog_and_err>
 800b94a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d05d      	beq.n	800ba0e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3310      	adds	r3, #16
 800b958:	4618      	mov	r0, r3
 800b95a:	f00b fbeb 	bl	8017134 <sys_mbox_valid>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00b      	beq.n	800b97c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3310      	adds	r3, #16
 800b96a:	4618      	mov	r0, r3
 800b96c:	f00b fb6e 	bl	801704c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3310      	adds	r3, #16
 800b976:	4618      	mov	r0, r3
 800b978:	f00b fbed 	bl	8017156 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3314      	adds	r3, #20
 800b986:	4618      	mov	r0, r3
 800b988:	f00b fbd4 	bl	8017134 <sys_mbox_valid>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d108      	bne.n	800b9a4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3314      	adds	r3, #20
 800b998:	2106      	movs	r1, #6
 800b99a:	4618      	mov	r0, r3
 800b99c:	f00b fb3c 	bl	8017018 <sys_mbox_new>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b9a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d118      	bne.n	800b9de <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685a      	ldr	r2, [r3, #4]
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	f003 ff49 	bl	800f860 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	4912      	ldr	r1, [pc, #72]	@ (800ba20 <lwip_netconn_do_listen+0x12c>)
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f003 ffba 	bl	800f950 <tcp_accept>
 800b9dc:	e017      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f002 fd68 	bl	800e4b4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	605a      	str	r2, [r3, #4]
 800b9ec:	e00f      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	785b      	ldrb	r3, [r3, #1]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d102      	bne.n	800b9fe <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	72fb      	strb	r3, [r7, #11]
 800b9fc:	e007      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b9fe:	23f5      	movs	r3, #245	@ 0xf5
 800ba00:	72fb      	strb	r3, [r7, #11]
 800ba02:	e004      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ba04:	23f0      	movs	r3, #240	@ 0xf0
 800ba06:	72fb      	strb	r3, [r7, #11]
 800ba08:	e001      	b.n	800ba0e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ba0a:	23f5      	movs	r3, #245	@ 0xf5
 800ba0c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ba0e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ba16:	bf00      	nop
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	0800af01 	.word	0x0800af01

0800ba24 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	2200      	movs	r2, #0
 800ba34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d022      	beq.n	800ba86 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba4a:	2b10      	cmp	r3, #16
 800ba4c:	d11b      	bne.n	800ba86 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba5a:	d202      	bcs.n	800ba62 <lwip_netconn_do_recv+0x3e>
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	e001      	b.n	800ba66 <lwip_netconn_do_recv+0x42>
 800ba62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ba66:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	89fa      	ldrh	r2, [r7, #14]
 800ba70:	4611      	mov	r1, r2
 800ba72:	4618      	mov	r0, r3
 800ba74:	f003 f82c 	bl	800ead0 <tcp_recved>
        remaining -= recved;
 800ba78:	89fb      	ldrh	r3, [r7, #14]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e6      	bne.n	800ba54 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ba86:	bf00      	nop
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b088      	sub	sp, #32
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <lwip_netconn_do_writemore+0x24>
 800baa6:	4b96      	ldr	r3, [pc, #600]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800baa8:	f240 6273 	movw	r2, #1651	@ 0x673
 800baac:	4995      	ldr	r1, [pc, #596]	@ (800bd04 <lwip_netconn_do_writemore+0x274>)
 800baae:	4896      	ldr	r0, [pc, #600]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800bab0:	f00b fd68 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	785b      	ldrb	r3, [r3, #1]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d006      	beq.n	800baca <lwip_netconn_do_writemore+0x3a>
 800babc:	4b90      	ldr	r3, [pc, #576]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800babe:	f240 6274 	movw	r2, #1652	@ 0x674
 800bac2:	4992      	ldr	r1, [pc, #584]	@ (800bd0c <lwip_netconn_do_writemore+0x27c>)
 800bac4:	4890      	ldr	r0, [pc, #576]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800bac6:	f00b fd5d 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d106      	bne.n	800bae0 <lwip_netconn_do_writemore+0x50>
 800bad2:	4b8b      	ldr	r3, [pc, #556]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800bad4:	f240 6275 	movw	r2, #1653	@ 0x675
 800bad8:	498d      	ldr	r1, [pc, #564]	@ (800bd10 <lwip_netconn_do_writemore+0x280>)
 800bada:	488b      	ldr	r0, [pc, #556]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800badc:	f00b fd52 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d106      	bne.n	800baf6 <lwip_netconn_do_writemore+0x66>
 800bae8:	4b85      	ldr	r3, [pc, #532]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800baea:	f240 6276 	movw	r2, #1654	@ 0x676
 800baee:	4989      	ldr	r1, [pc, #548]	@ (800bd14 <lwip_netconn_do_writemore+0x284>)
 800baf0:	4885      	ldr	r0, [pc, #532]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800baf2:	f00b fd47 	bl	8017584 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	699a      	ldr	r2, [r3, #24]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	695b      	ldr	r3, [r3, #20]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d306      	bcc.n	800bb14 <lwip_netconn_do_writemore+0x84>
 800bb06:	4b7e      	ldr	r3, [pc, #504]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800bb08:	f240 6277 	movw	r2, #1655	@ 0x677
 800bb0c:	4982      	ldr	r1, [pc, #520]	@ (800bd18 <lwip_netconn_do_writemore+0x288>)
 800bb0e:	487e      	ldr	r0, [pc, #504]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800bb10:	f00b fd38 	bl	8017584 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a1b      	ldr	r3, [r3, #32]
 800bb18:	899b      	ldrh	r3, [r3, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d106      	bne.n	800bb2c <lwip_netconn_do_writemore+0x9c>
 800bb1e:	4b78      	ldr	r3, [pc, #480]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800bb20:	f240 6279 	movw	r2, #1657	@ 0x679
 800bb24:	497d      	ldr	r1, [pc, #500]	@ (800bd1c <lwip_netconn_do_writemore+0x28c>)
 800bb26:	4878      	ldr	r0, [pc, #480]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800bb28:	f00b fd2c 	bl	8017584 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	7f1b      	ldrb	r3, [r3, #28]
 800bb32:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7f1b      	ldrb	r3, [r3, #28]
 800bb38:	f003 0302 	and.w	r3, r3, #2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d104      	bne.n	800bb4a <lwip_netconn_do_writemore+0xba>
 800bb40:	7ebb      	ldrb	r3, [r7, #26]
 800bb42:	f003 0304 	and.w	r3, r3, #4
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d001      	beq.n	800bb4e <lwip_netconn_do_writemore+0xbe>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e000      	b.n	800bb50 <lwip_netconn_do_writemore+0xc0>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a1b      	ldr	r3, [r3, #32]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	4413      	add	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a1b      	ldr	r3, [r3, #32]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a1b      	ldr	r3, [r3, #32]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb7c:	d307      	bcc.n	800bb8e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bb7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb82:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bb84:	7ebb      	ldrb	r3, [r7, #26]
 800bb86:	f043 0302 	orr.w	r3, r3, #2
 800bb8a:	76bb      	strb	r3, [r7, #26]
 800bb8c:	e001      	b.n	800bb92 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bb9a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bb9c:	89fa      	ldrh	r2, [r7, #14]
 800bb9e:	8bbb      	ldrh	r3, [r7, #28]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d216      	bcs.n	800bbd2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bba8:	7e3b      	ldrb	r3, [r7, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00d      	beq.n	800bbca <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bbae:	8bbb      	ldrh	r3, [r7, #28]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10e      	bne.n	800bbd2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d102      	bne.n	800bbc4 <lwip_netconn_do_writemore+0x134>
 800bbbe:	f06f 0306 	mvn.w	r3, #6
 800bbc2:	e000      	b.n	800bbc6 <lwip_netconn_do_writemore+0x136>
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800bbc8:	e07d      	b.n	800bcc6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bbca:	7ebb      	ldrb	r3, [r7, #26]
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	691a      	ldr	r2, [r3, #16]
 800bbd8:	8bbb      	ldrh	r3, [r7, #28]
 800bbda:	441a      	add	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d906      	bls.n	800bbf6 <lwip_netconn_do_writemore+0x166>
 800bbe8:	4b45      	ldr	r3, [pc, #276]	@ (800bd00 <lwip_netconn_do_writemore+0x270>)
 800bbea:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800bbee:	494c      	ldr	r1, [pc, #304]	@ (800bd20 <lwip_netconn_do_writemore+0x290>)
 800bbf0:	4845      	ldr	r0, [pc, #276]	@ (800bd08 <lwip_netconn_do_writemore+0x278>)
 800bbf2:	f00b fcc7 	bl	8017584 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bbf6:	8bbb      	ldrh	r3, [r7, #28]
 800bbf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d103      	bne.n	800bc08 <lwip_netconn_do_writemore+0x178>
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc06:	d209      	bcs.n	800bc1c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bc0c:	8bba      	ldrh	r2, [r7, #28]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d10b      	bne.n	800bc2a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	899b      	ldrh	r3, [r3, #12]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d906      	bls.n	800bc2a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bc20:	7ebb      	ldrb	r3, [r7, #26]
 800bc22:	f043 0302 	orr.w	r3, r3, #2
 800bc26:	76bb      	strb	r3, [r7, #26]
 800bc28:	e001      	b.n	800bc2e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6858      	ldr	r0, [r3, #4]
 800bc32:	7ebb      	ldrb	r3, [r7, #26]
 800bc34:	8bba      	ldrh	r2, [r7, #28]
 800bc36:	6979      	ldr	r1, [r7, #20]
 800bc38:	f006 fd4e 	bl	80126d8 <tcp_write>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800bc40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d12c      	bne.n	800bca2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a1b      	ldr	r3, [r3, #32]
 800bc4c:	6999      	ldr	r1, [r3, #24]
 800bc4e:	8bba      	ldrh	r2, [r7, #28]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a1b      	ldr	r3, [r3, #32]
 800bc54:	440a      	add	r2, r1
 800bc56:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a1b      	ldr	r3, [r3, #32]
 800bc5c:	6919      	ldr	r1, [r3, #16]
 800bc5e:	8bba      	ldrh	r2, [r7, #28]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a1b      	ldr	r3, [r3, #32]
 800bc64:	440a      	add	r2, r1
 800bc66:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	691a      	ldr	r2, [r3, #16]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d113      	bne.n	800bca2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	899a      	ldrh	r2, [r3, #12]
 800bc80:	3a01      	subs	r2, #1
 800bc82:	b292      	uxth	r2, r2
 800bc84:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a1b      	ldr	r3, [r3, #32]
 800bc8a:	899b      	ldrh	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d008      	beq.n	800bca2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6a1b      	ldr	r3, [r3, #32]
 800bc94:	689a      	ldr	r2, [r3, #8]
 800bc96:	3208      	adds	r2, #8
 800bc98:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800bca2:	7e7b      	ldrb	r3, [r7, #25]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <lwip_netconn_do_writemore+0x222>
 800bca8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f43f af50 	beq.w	800bb52 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bcb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <lwip_netconn_do_writemore+0x234>
 800bcba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc2:	d146      	bne.n	800bd52 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800bcc4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bcc6:	7e3b      	ldrb	r3, [r7, #24]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d02b      	beq.n	800bd24 <lwip_netconn_do_writemore+0x294>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	699a      	ldr	r2, [r3, #24]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	695b      	ldr	r3, [r3, #20]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d223      	bcs.n	800bd24 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d005      	beq.n	800bcf0 <lwip_netconn_do_writemore+0x260>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce8:	2200      	movs	r2, #0
 800bcea:	2103      	movs	r1, #3
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	7f1b      	ldrb	r3, [r3, #28]
 800bcf4:	f043 0310 	orr.w	r3, r3, #16
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	771a      	strb	r2, [r3, #28]
 800bcfe:	e028      	b.n	800bd52 <lwip_netconn_do_writemore+0x2c2>
 800bd00:	08018a88 	.word	0x08018a88
 800bd04:	08018be0 	.word	0x08018be0
 800bd08:	08018acc 	.word	0x08018acc
 800bd0c:	08018ee8 	.word	0x08018ee8
 800bd10:	08018bf0 	.word	0x08018bf0
 800bd14:	08018f08 	.word	0x08018f08
 800bd18:	08018f20 	.word	0x08018f20
 800bd1c:	08018f60 	.word	0x08018f60
 800bd20:	08018f88 	.word	0x08018f88
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bd2c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800bd30:	d305      	bcc.n	800bd3e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d909      	bls.n	800bd52 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d005      	beq.n	800bd52 <lwip_netconn_do_writemore+0x2c2>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2103      	movs	r1, #3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800bd52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d11d      	bne.n	800bd96 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a1b      	ldr	r3, [r3, #32]
 800bd5e:	699a      	ldr	r2, [r3, #24]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a1b      	ldr	r3, [r3, #32]
 800bd64:	695b      	ldr	r3, [r3, #20]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d002      	beq.n	800bd70 <lwip_netconn_do_writemore+0x2e0>
 800bd6a:	7e3b      	ldrb	r3, [r7, #24]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d001      	beq.n	800bd74 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bd70:	2301      	movs	r3, #1
 800bd72:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f007 fa97 	bl	80132ac <tcp_output>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800bd82:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bd86:	f113 0f04 	cmn.w	r3, #4
 800bd8a:	d12c      	bne.n	800bde6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bd8c:	7b3b      	ldrb	r3, [r7, #12]
 800bd8e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bd90:	2301      	movs	r3, #1
 800bd92:	76fb      	strb	r3, [r7, #27]
 800bd94:	e027      	b.n	800bde6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800bd96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d120      	bne.n	800bde2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f007 fa81 	bl	80132ac <tcp_output>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bdae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bdb2:	f113 0f04 	cmn.w	r3, #4
 800bdb6:	d104      	bne.n	800bdc2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bdb8:	7b7b      	ldrb	r3, [r7, #13]
 800bdba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	76fb      	strb	r3, [r7, #27]
 800bdc0:	e011      	b.n	800bde6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bdc2:	7e3b      	ldrb	r3, [r7, #24]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00e      	beq.n	800bde6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6a1b      	ldr	r3, [r3, #32]
 800bdcc:	699b      	ldr	r3, [r3, #24]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d102      	bne.n	800bdd8 <lwip_netconn_do_writemore+0x348>
 800bdd2:	f06f 0306 	mvn.w	r3, #6
 800bdd6:	e000      	b.n	800bdda <lwip_netconn_do_writemore+0x34a>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bddc:	2301      	movs	r3, #1
 800bdde:	76fb      	strb	r3, [r7, #27]
 800bde0:	e001      	b.n	800bde6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bde2:	2301      	movs	r3, #1
 800bde4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bde6:	7efb      	ldrb	r3, [r7, #27]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d015      	beq.n	800be18 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	330c      	adds	r3, #12
 800bdf4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	7ffa      	ldrb	r2, [r7, #31]
 800bdfc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800be0a:	78fb      	ldrb	r3, [r7, #3]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d006      	beq.n	800be1e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800be10:	68b8      	ldr	r0, [r7, #8]
 800be12:	f00b fa03 	bl	801721c <sys_sem_signal>
 800be16:	e002      	b.n	800be1e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800be18:	f04f 33ff 	mov.w	r3, #4294967295
 800be1c:	e000      	b.n	800be20 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3720      	adds	r7, #32
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fd1c 	bl	800a876 <netconn_err>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800be42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d166      	bne.n	800bf18 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be54:	2b10      	cmp	r3, #16
 800be56:	d15d      	bne.n	800bf14 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	785b      	ldrb	r3, [r3, #1]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800be62:	23fb      	movs	r3, #251	@ 0xfb
 800be64:	73fb      	strb	r3, [r7, #15]
 800be66:	e057      	b.n	800bf18 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d04d      	beq.n	800bf0e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2201      	movs	r2, #1
 800be78:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d006      	beq.n	800be92 <lwip_netconn_do_write+0x6a>
 800be84:	4b28      	ldr	r3, [pc, #160]	@ (800bf28 <lwip_netconn_do_write+0x100>)
 800be86:	f240 7223 	movw	r2, #1827	@ 0x723
 800be8a:	4928      	ldr	r1, [pc, #160]	@ (800bf2c <lwip_netconn_do_write+0x104>)
 800be8c:	4828      	ldr	r0, [pc, #160]	@ (800bf30 <lwip_netconn_do_write+0x108>)
 800be8e:	f00b fb79 	bl	8017584 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <lwip_netconn_do_write+0x80>
 800be9a:	4b23      	ldr	r3, [pc, #140]	@ (800bf28 <lwip_netconn_do_write+0x100>)
 800be9c:	f240 7224 	movw	r2, #1828	@ 0x724
 800bea0:	4924      	ldr	r1, [pc, #144]	@ (800bf34 <lwip_netconn_do_write+0x10c>)
 800bea2:	4823      	ldr	r0, [pc, #140]	@ (800bf30 <lwip_netconn_do_write+0x108>)
 800bea4:	f00b fb6e 	bl	8017584 <iprintf>
        msg->conn->current_msg = msg;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2100      	movs	r1, #0
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7ff fdea 	bl	800ba90 <lwip_netconn_do_writemore>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d02e      	beq.n	800bf20 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d006      	beq.n	800beda <lwip_netconn_do_write+0xb2>
 800becc:	4b16      	ldr	r3, [pc, #88]	@ (800bf28 <lwip_netconn_do_write+0x100>)
 800bece:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800bed2:	4919      	ldr	r1, [pc, #100]	@ (800bf38 <lwip_netconn_do_write+0x110>)
 800bed4:	4816      	ldr	r0, [pc, #88]	@ (800bf30 <lwip_netconn_do_write+0x108>)
 800bed6:	f00b fb55 	bl	8017584 <iprintf>
          UNLOCK_TCPIP_CORE();
 800beda:	4818      	ldr	r0, [pc, #96]	@ (800bf3c <lwip_netconn_do_write+0x114>)
 800bedc:	f00b fa07 	bl	80172ee <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	330c      	adds	r3, #12
 800bee6:	2100      	movs	r1, #0
 800bee8:	4618      	mov	r0, r3
 800beea:	f00b f966 	bl	80171ba <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800beee:	4813      	ldr	r0, [pc, #76]	@ (800bf3c <lwip_netconn_do_write+0x114>)
 800bef0:	f00b f9ee 	bl	80172d0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	785b      	ldrb	r3, [r3, #1]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d110      	bne.n	800bf20 <lwip_netconn_do_write+0xf8>
 800befe:	4b0a      	ldr	r3, [pc, #40]	@ (800bf28 <lwip_netconn_do_write+0x100>)
 800bf00:	f240 722c 	movw	r2, #1836	@ 0x72c
 800bf04:	490c      	ldr	r1, [pc, #48]	@ (800bf38 <lwip_netconn_do_write+0x110>)
 800bf06:	480a      	ldr	r0, [pc, #40]	@ (800bf30 <lwip_netconn_do_write+0x108>)
 800bf08:	f00b fb3c 	bl	8017584 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800bf0c:	e008      	b.n	800bf20 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800bf0e:	23f5      	movs	r3, #245	@ 0xf5
 800bf10:	73fb      	strb	r3, [r7, #15]
 800bf12:	e001      	b.n	800bf18 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800bf14:	23fa      	movs	r3, #250	@ 0xfa
 800bf16:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	7bfa      	ldrb	r2, [r7, #15]
 800bf1c:	711a      	strb	r2, [r3, #4]
 800bf1e:	e000      	b.n	800bf22 <lwip_netconn_do_write+0xfa>
        return;
 800bf20:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	08018a88 	.word	0x08018a88
 800bf2c:	08018e2c 	.word	0x08018e2c
 800bf30:	08018acc 	.word	0x08018acc
 800bf34:	08018fb4 	.word	0x08018fb4
 800bf38:	08018e48 	.word	0x08018e48
 800bf3c:	2000863c 	.word	0x2000863c

0800bf40 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d069      	beq.n	800c032 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800bf68:	2b10      	cmp	r3, #16
 800bf6a:	d162      	bne.n	800c032 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d002      	beq.n	800bf7a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800bf74:	7afb      	ldrb	r3, [r7, #11]
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d05b      	beq.n	800c032 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800bf7a:	7afb      	ldrb	r3, [r7, #11]
 800bf7c:	2b03      	cmp	r3, #3
 800bf7e:	d103      	bne.n	800bf88 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	22f5      	movs	r2, #245	@ 0xf5
 800bf84:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bf86:	e059      	b.n	800c03c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d103      	bne.n	800bf96 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	22fb      	movs	r2, #251	@ 0xfb
 800bf92:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800bf94:	e052      	b.n	800c03c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	7a1b      	ldrb	r3, [r3, #8]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d004      	beq.n	800bfac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7ff f99e 	bl	800b2e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d006      	beq.n	800bfc4 <lwip_netconn_do_close+0x84>
 800bfb6:	4b23      	ldr	r3, [pc, #140]	@ (800c044 <lwip_netconn_do_close+0x104>)
 800bfb8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800bfbc:	4922      	ldr	r1, [pc, #136]	@ (800c048 <lwip_netconn_do_close+0x108>)
 800bfbe:	4823      	ldr	r0, [pc, #140]	@ (800c04c <lwip_netconn_do_close+0x10c>)
 800bfc0:	f00b fae0 	bl	8017584 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2204      	movs	r2, #4
 800bfca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fa02 	bl	800b3e4 <lwip_netconn_do_close_internal>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d029      	beq.n	800c03a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	785b      	ldrb	r3, [r3, #1]
 800bfec:	2b04      	cmp	r3, #4
 800bfee:	d006      	beq.n	800bffe <lwip_netconn_do_close+0xbe>
 800bff0:	4b14      	ldr	r3, [pc, #80]	@ (800c044 <lwip_netconn_do_close+0x104>)
 800bff2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800bff6:	4916      	ldr	r1, [pc, #88]	@ (800c050 <lwip_netconn_do_close+0x110>)
 800bff8:	4814      	ldr	r0, [pc, #80]	@ (800c04c <lwip_netconn_do_close+0x10c>)
 800bffa:	f00b fac3 	bl	8017584 <iprintf>
        UNLOCK_TCPIP_CORE();
 800bffe:	4815      	ldr	r0, [pc, #84]	@ (800c054 <lwip_netconn_do_close+0x114>)
 800c000:	f00b f975 	bl	80172ee <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	330c      	adds	r3, #12
 800c00a:	2100      	movs	r1, #0
 800c00c:	4618      	mov	r0, r3
 800c00e:	f00b f8d4 	bl	80171ba <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c012:	4810      	ldr	r0, [pc, #64]	@ (800c054 <lwip_netconn_do_close+0x114>)
 800c014:	f00b f95c 	bl	80172d0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	785b      	ldrb	r3, [r3, #1]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00b      	beq.n	800c03a <lwip_netconn_do_close+0xfa>
 800c022:	4b08      	ldr	r3, [pc, #32]	@ (800c044 <lwip_netconn_do_close+0x104>)
 800c024:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800c028:	4909      	ldr	r1, [pc, #36]	@ (800c050 <lwip_netconn_do_close+0x110>)
 800c02a:	4808      	ldr	r0, [pc, #32]	@ (800c04c <lwip_netconn_do_close+0x10c>)
 800c02c:	f00b faaa 	bl	8017584 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c030:	e003      	b.n	800c03a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	22f5      	movs	r2, #245	@ 0xf5
 800c036:	711a      	strb	r2, [r3, #4]
 800c038:	e000      	b.n	800c03c <lwip_netconn_do_close+0xfc>
      return;
 800c03a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	08018a88 	.word	0x08018a88
 800c048:	08018e2c 	.word	0x08018e2c
 800c04c:	08018acc 	.word	0x08018acc
 800c050:	08018e48 	.word	0x08018e48
 800c054:	2000863c 	.word	0x2000863c

0800c058 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d013      	beq.n	800c08e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00b      	beq.n	800c086 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4618      	mov	r0, r3
 800c074:	f001 fd74 	bl	800db60 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	605a      	str	r2, [r3, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	2006      	movs	r0, #6
 800c08a:	f000 fec5 	bl	800ce18 <memp_free>
  }
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c0a2:	f008 f9bb 	bl	801441c <sys_timeouts_sleeptime>
 800c0a6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ae:	d10b      	bne.n	800c0c8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c0b0:	4813      	ldr	r0, [pc, #76]	@ (800c100 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0b2:	f00b f91c 	bl	80172ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f00a fff2 	bl	80170a4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c0c0:	480f      	ldr	r0, [pc, #60]	@ (800c100 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0c2:	f00b f905 	bl	80172d0 <sys_mutex_lock>
    return;
 800c0c6:	e018      	b.n	800c0fa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c0ce:	f008 f96b 	bl	80143a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c0d2:	e7e6      	b.n	800c0a2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c0d4:	480a      	ldr	r0, [pc, #40]	@ (800c100 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0d6:	f00b f90a 	bl	80172ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f00a ffe0 	bl	80170a4 <sys_arch_mbox_fetch>
 800c0e4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c0e6:	4806      	ldr	r0, [pc, #24]	@ (800c100 <tcpip_timeouts_mbox_fetch+0x68>)
 800c0e8:	f00b f8f2 	bl	80172d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d102      	bne.n	800c0fa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c0f4:	f008 f958 	bl	80143a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c0f8:	e7d3      	b.n	800c0a2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	2000863c 	.word	0x2000863c

0800c104 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c10c:	4810      	ldr	r0, [pc, #64]	@ (800c150 <tcpip_thread+0x4c>)
 800c10e:	f00b f8df 	bl	80172d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c112:	4b10      	ldr	r3, [pc, #64]	@ (800c154 <tcpip_thread+0x50>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d005      	beq.n	800c126 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c11a:	4b0e      	ldr	r3, [pc, #56]	@ (800c154 <tcpip_thread+0x50>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a0e      	ldr	r2, [pc, #56]	@ (800c158 <tcpip_thread+0x54>)
 800c120:	6812      	ldr	r2, [r2, #0]
 800c122:	4610      	mov	r0, r2
 800c124:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c126:	f107 030c 	add.w	r3, r7, #12
 800c12a:	4619      	mov	r1, r3
 800c12c:	480b      	ldr	r0, [pc, #44]	@ (800c15c <tcpip_thread+0x58>)
 800c12e:	f7ff ffb3 	bl	800c098 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c138:	4b09      	ldr	r3, [pc, #36]	@ (800c160 <tcpip_thread+0x5c>)
 800c13a:	2291      	movs	r2, #145	@ 0x91
 800c13c:	4909      	ldr	r1, [pc, #36]	@ (800c164 <tcpip_thread+0x60>)
 800c13e:	480a      	ldr	r0, [pc, #40]	@ (800c168 <tcpip_thread+0x64>)
 800c140:	f00b fa20 	bl	8017584 <iprintf>
      continue;
 800c144:	e003      	b.n	800c14e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 f80f 	bl	800c16c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c14e:	e7ea      	b.n	800c126 <tcpip_thread+0x22>
 800c150:	2000863c 	.word	0x2000863c
 800c154:	20008630 	.word	0x20008630
 800c158:	20008634 	.word	0x20008634
 800c15c:	20008638 	.word	0x20008638
 800c160:	08018fe0 	.word	0x08018fe0
 800c164:	08019010 	.word	0x08019010
 800c168:	08019030 	.word	0x08019030

0800c16c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d026      	beq.n	800c1ca <tcpip_thread_handle_msg+0x5e>
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	dc2b      	bgt.n	800c1d8 <tcpip_thread_handle_msg+0x6c>
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <tcpip_thread_handle_msg+0x1e>
 800c184:	2b01      	cmp	r3, #1
 800c186:	d015      	beq.n	800c1b4 <tcpip_thread_handle_msg+0x48>
 800c188:	e026      	b.n	800c1d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	6850      	ldr	r0, [r2, #4]
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	6892      	ldr	r2, [r2, #8]
 800c196:	4611      	mov	r1, r2
 800c198:	4798      	blx	r3
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d004      	beq.n	800c1aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f001 fcdb 	bl	800db60 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	2009      	movs	r0, #9
 800c1ae:	f000 fe33 	bl	800ce18 <memp_free>
      break;
 800c1b2:	e018      	b.n	800c1e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	6892      	ldr	r2, [r2, #8]
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	2008      	movs	r0, #8
 800c1c4:	f000 fe28 	bl	800ce18 <memp_free>
      break;
 800c1c8:	e00d      	b.n	800c1e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	687a      	ldr	r2, [r7, #4]
 800c1d0:	6892      	ldr	r2, [r2, #8]
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	4798      	blx	r3
      break;
 800c1d6:	e006      	b.n	800c1e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1d8:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <tcpip_thread_handle_msg+0x84>)
 800c1da:	22cf      	movs	r2, #207	@ 0xcf
 800c1dc:	4905      	ldr	r1, [pc, #20]	@ (800c1f4 <tcpip_thread_handle_msg+0x88>)
 800c1de:	4806      	ldr	r0, [pc, #24]	@ (800c1f8 <tcpip_thread_handle_msg+0x8c>)
 800c1e0:	f00b f9d0 	bl	8017584 <iprintf>
      break;
 800c1e4:	bf00      	nop
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	08018fe0 	.word	0x08018fe0
 800c1f4:	08019010 	.word	0x08019010
 800c1f8:	08019030 	.word	0x08019030

0800c1fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c208:	481a      	ldr	r0, [pc, #104]	@ (800c274 <tcpip_inpkt+0x78>)
 800c20a:	f00a ff93 	bl	8017134 <sys_mbox_valid>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <tcpip_inpkt+0x24>
 800c214:	4b18      	ldr	r3, [pc, #96]	@ (800c278 <tcpip_inpkt+0x7c>)
 800c216:	22fc      	movs	r2, #252	@ 0xfc
 800c218:	4918      	ldr	r1, [pc, #96]	@ (800c27c <tcpip_inpkt+0x80>)
 800c21a:	4819      	ldr	r0, [pc, #100]	@ (800c280 <tcpip_inpkt+0x84>)
 800c21c:	f00b f9b2 	bl	8017584 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c220:	2009      	movs	r0, #9
 800c222:	f000 fda7 	bl	800cd74 <memp_malloc>
 800c226:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c228:	697b      	ldr	r3, [r7, #20]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d102      	bne.n	800c234 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c22e:	f04f 33ff 	mov.w	r3, #4294967295
 800c232:	e01a      	b.n	800c26a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c24c:	6979      	ldr	r1, [r7, #20]
 800c24e:	4809      	ldr	r0, [pc, #36]	@ (800c274 <tcpip_inpkt+0x78>)
 800c250:	f00a ff0e 	bl	8017070 <sys_mbox_trypost>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c25a:	6979      	ldr	r1, [r7, #20]
 800c25c:	2009      	movs	r0, #9
 800c25e:	f000 fddb 	bl	800ce18 <memp_free>
    return ERR_MEM;
 800c262:	f04f 33ff 	mov.w	r3, #4294967295
 800c266:	e000      	b.n	800c26a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c268:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3718      	adds	r7, #24
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20008638 	.word	0x20008638
 800c278:	08018fe0 	.word	0x08018fe0
 800c27c:	08019058 	.word	0x08019058
 800c280:	08019030 	.word	0x08019030

0800c284 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c294:	f003 0318 	and.w	r3, r3, #24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d006      	beq.n	800c2aa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c29c:	4a08      	ldr	r2, [pc, #32]	@ (800c2c0 <tcpip_input+0x3c>)
 800c29e:	6839      	ldr	r1, [r7, #0]
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff ffab 	bl	800c1fc <tcpip_inpkt>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	e005      	b.n	800c2b6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c2aa:	4a06      	ldr	r2, [pc, #24]	@ (800c2c4 <tcpip_input+0x40>)
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff ffa4 	bl	800c1fc <tcpip_inpkt>
 800c2b4:	4603      	mov	r3, r0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3708      	adds	r7, #8
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	08016e6d 	.word	0x08016e6d
 800c2c4:	08015d75 	.word	0x08015d75

0800c2c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c2d2:	4819      	ldr	r0, [pc, #100]	@ (800c338 <tcpip_try_callback+0x70>)
 800c2d4:	f00a ff2e 	bl	8017134 <sys_mbox_valid>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d106      	bne.n	800c2ec <tcpip_try_callback+0x24>
 800c2de:	4b17      	ldr	r3, [pc, #92]	@ (800c33c <tcpip_try_callback+0x74>)
 800c2e0:	f240 125d 	movw	r2, #349	@ 0x15d
 800c2e4:	4916      	ldr	r1, [pc, #88]	@ (800c340 <tcpip_try_callback+0x78>)
 800c2e6:	4817      	ldr	r0, [pc, #92]	@ (800c344 <tcpip_try_callback+0x7c>)
 800c2e8:	f00b f94c 	bl	8017584 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c2ec:	2008      	movs	r0, #8
 800c2ee:	f000 fd41 	bl	800cd74 <memp_malloc>
 800c2f2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d102      	bne.n	800c300 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2fe:	e017      	b.n	800c330 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	683a      	ldr	r2, [r7, #0]
 800c310:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c312:	68f9      	ldr	r1, [r7, #12]
 800c314:	4808      	ldr	r0, [pc, #32]	@ (800c338 <tcpip_try_callback+0x70>)
 800c316:	f00a feab 	bl	8017070 <sys_mbox_trypost>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d006      	beq.n	800c32e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c320:	68f9      	ldr	r1, [r7, #12]
 800c322:	2008      	movs	r0, #8
 800c324:	f000 fd78 	bl	800ce18 <memp_free>
    return ERR_MEM;
 800c328:	f04f 33ff 	mov.w	r3, #4294967295
 800c32c:	e000      	b.n	800c330 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c32e:	2300      	movs	r3, #0
}
 800c330:	4618      	mov	r0, r3
 800c332:	3710      	adds	r7, #16
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	20008638 	.word	0x20008638
 800c33c:	08018fe0 	.word	0x08018fe0
 800c340:	08019058 	.word	0x08019058
 800c344:	08019030 	.word	0x08019030

0800c348 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c354:	4806      	ldr	r0, [pc, #24]	@ (800c370 <tcpip_send_msg_wait_sem+0x28>)
 800c356:	f00a ffbb 	bl	80172d0 <sys_mutex_lock>
  fn(apimsg);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	68b8      	ldr	r0, [r7, #8]
 800c35e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c360:	4803      	ldr	r0, [pc, #12]	@ (800c370 <tcpip_send_msg_wait_sem+0x28>)
 800c362:	f00a ffc4 	bl	80172ee <sys_mutex_unlock>
  return ERR_OK;
 800c366:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	2000863c 	.word	0x2000863c

0800c374 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af02      	add	r7, sp, #8
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c37e:	f000 f871 	bl	800c464 <lwip_init>

  tcpip_init_done = initfunc;
 800c382:	4a17      	ldr	r2, [pc, #92]	@ (800c3e0 <tcpip_init+0x6c>)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c388:	4a16      	ldr	r2, [pc, #88]	@ (800c3e4 <tcpip_init+0x70>)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c38e:	2106      	movs	r1, #6
 800c390:	4815      	ldr	r0, [pc, #84]	@ (800c3e8 <tcpip_init+0x74>)
 800c392:	f00a fe41 	bl	8017018 <sys_mbox_new>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c39c:	4b13      	ldr	r3, [pc, #76]	@ (800c3ec <tcpip_init+0x78>)
 800c39e:	f240 2261 	movw	r2, #609	@ 0x261
 800c3a2:	4913      	ldr	r1, [pc, #76]	@ (800c3f0 <tcpip_init+0x7c>)
 800c3a4:	4813      	ldr	r0, [pc, #76]	@ (800c3f4 <tcpip_init+0x80>)
 800c3a6:	f00b f8ed 	bl	8017584 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c3aa:	4813      	ldr	r0, [pc, #76]	@ (800c3f8 <tcpip_init+0x84>)
 800c3ac:	f00a ff7a 	bl	80172a4 <sys_mutex_new>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d006      	beq.n	800c3c4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ec <tcpip_init+0x78>)
 800c3b8:	f240 2265 	movw	r2, #613	@ 0x265
 800c3bc:	490f      	ldr	r1, [pc, #60]	@ (800c3fc <tcpip_init+0x88>)
 800c3be:	480d      	ldr	r0, [pc, #52]	@ (800c3f4 <tcpip_init+0x80>)
 800c3c0:	f00b f8e0 	bl	8017584 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c3c4:	2318      	movs	r3, #24
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	490c      	ldr	r1, [pc, #48]	@ (800c400 <tcpip_init+0x8c>)
 800c3d0:	480c      	ldr	r0, [pc, #48]	@ (800c404 <tcpip_init+0x90>)
 800c3d2:	f00a ff99 	bl	8017308 <sys_thread_new>
}
 800c3d6:	bf00      	nop
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20008630 	.word	0x20008630
 800c3e4:	20008634 	.word	0x20008634
 800c3e8:	20008638 	.word	0x20008638
 800c3ec:	08018fe0 	.word	0x08018fe0
 800c3f0:	08019068 	.word	0x08019068
 800c3f4:	08019030 	.word	0x08019030
 800c3f8:	2000863c 	.word	0x2000863c
 800c3fc:	0801908c 	.word	0x0801908c
 800c400:	0800c105 	.word	0x0800c105
 800c404:	080190b0 	.word	0x080190b0

0800c408 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c408:	b480      	push	{r7}
 800c40a:	b083      	sub	sp, #12
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	b21a      	sxth	r2, r3
 800c418:	88fb      	ldrh	r3, [r7, #6]
 800c41a:	0a1b      	lsrs	r3, r3, #8
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	b21b      	sxth	r3, r3
 800c420:	4313      	orrs	r3, r2
 800c422:	b21b      	sxth	r3, r3
 800c424:	b29b      	uxth	r3, r3
}
 800c426:	4618      	mov	r0, r3
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	061a      	lsls	r2, r3, #24
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	021b      	lsls	r3, r3, #8
 800c442:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c446:	431a      	orrs	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	0a1b      	lsrs	r3, r3, #8
 800c44c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c450:	431a      	orrs	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	0e1b      	lsrs	r3, r3, #24
 800c456:	4313      	orrs	r3, r2
}
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c46e:	f00a ff0d 	bl	801728c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c472:	f000 f8d5 	bl	800c620 <mem_init>
  memp_init();
 800c476:	f000 fc31 	bl	800ccdc <memp_init>
  pbuf_init();
  netif_init();
 800c47a:	f000 fcf7 	bl	800ce6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c47e:	f008 f805 	bl	801448c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c482:	f001 fe07 	bl	800e094 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c486:	f007 ff47 	bl	8014318 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c48a:	bf00      	nop
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
	...

0800c494 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c49e:	4b05      	ldr	r3, [pc, #20]	@ (800c4b4 <ptr_to_mem+0x20>)
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	88fb      	ldrh	r3, [r7, #6]
 800c4a4:	4413      	add	r3, r2
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	2000ae6c 	.word	0x2000ae6c

0800c4b8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c4c0:	4b05      	ldr	r3, [pc, #20]	@ (800c4d8 <mem_to_ptr+0x20>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	b29b      	uxth	r3, r3
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	2000ae6c 	.word	0x2000ae6c

0800c4dc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c4e4:	4b45      	ldr	r3, [pc, #276]	@ (800c5fc <plug_holes+0x120>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d206      	bcs.n	800c4fc <plug_holes+0x20>
 800c4ee:	4b44      	ldr	r3, [pc, #272]	@ (800c600 <plug_holes+0x124>)
 800c4f0:	f240 12df 	movw	r2, #479	@ 0x1df
 800c4f4:	4943      	ldr	r1, [pc, #268]	@ (800c604 <plug_holes+0x128>)
 800c4f6:	4844      	ldr	r0, [pc, #272]	@ (800c608 <plug_holes+0x12c>)
 800c4f8:	f00b f844 	bl	8017584 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c4fc:	4b43      	ldr	r3, [pc, #268]	@ (800c60c <plug_holes+0x130>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	429a      	cmp	r2, r3
 800c504:	d306      	bcc.n	800c514 <plug_holes+0x38>
 800c506:	4b3e      	ldr	r3, [pc, #248]	@ (800c600 <plug_holes+0x124>)
 800c508:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c50c:	4940      	ldr	r1, [pc, #256]	@ (800c610 <plug_holes+0x134>)
 800c50e:	483e      	ldr	r0, [pc, #248]	@ (800c608 <plug_holes+0x12c>)
 800c510:	f00b f838 	bl	8017584 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	791b      	ldrb	r3, [r3, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d006      	beq.n	800c52a <plug_holes+0x4e>
 800c51c:	4b38      	ldr	r3, [pc, #224]	@ (800c600 <plug_holes+0x124>)
 800c51e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c522:	493c      	ldr	r1, [pc, #240]	@ (800c614 <plug_holes+0x138>)
 800c524:	4838      	ldr	r0, [pc, #224]	@ (800c608 <plug_holes+0x12c>)
 800c526:	f00b f82d 	bl	8017584 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c532:	d906      	bls.n	800c542 <plug_holes+0x66>
 800c534:	4b32      	ldr	r3, [pc, #200]	@ (800c600 <plug_holes+0x124>)
 800c536:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c53a:	4937      	ldr	r1, [pc, #220]	@ (800c618 <plug_holes+0x13c>)
 800c53c:	4832      	ldr	r0, [pc, #200]	@ (800c608 <plug_holes+0x12c>)
 800c53e:	f00b f821 	bl	8017584 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	4618      	mov	r0, r3
 800c548:	f7ff ffa4 	bl	800c494 <ptr_to_mem>
 800c54c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	429a      	cmp	r2, r3
 800c554:	d024      	beq.n	800c5a0 <plug_holes+0xc4>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	791b      	ldrb	r3, [r3, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d120      	bne.n	800c5a0 <plug_holes+0xc4>
 800c55e:	4b2b      	ldr	r3, [pc, #172]	@ (800c60c <plug_holes+0x130>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	429a      	cmp	r2, r3
 800c566:	d01b      	beq.n	800c5a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c568:	4b2c      	ldr	r3, [pc, #176]	@ (800c61c <plug_holes+0x140>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d102      	bne.n	800c578 <plug_holes+0x9c>
      lfree = mem;
 800c572:	4a2a      	ldr	r2, [pc, #168]	@ (800c61c <plug_holes+0x140>)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	881a      	ldrh	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c588:	d00a      	beq.n	800c5a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	4618      	mov	r0, r3
 800c590:	f7ff ff80 	bl	800c494 <ptr_to_mem>
 800c594:	4604      	mov	r4, r0
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f7ff ff8e 	bl	800c4b8 <mem_to_ptr>
 800c59c:	4603      	mov	r3, r0
 800c59e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	885b      	ldrh	r3, [r3, #2]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7ff ff75 	bl	800c494 <ptr_to_mem>
 800c5aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d01f      	beq.n	800c5f4 <plug_holes+0x118>
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	791b      	ldrb	r3, [r3, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d11b      	bne.n	800c5f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c5bc:	4b17      	ldr	r3, [pc, #92]	@ (800c61c <plug_holes+0x140>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d102      	bne.n	800c5cc <plug_holes+0xf0>
      lfree = pmem;
 800c5c6:	4a15      	ldr	r2, [pc, #84]	@ (800c61c <plug_holes+0x140>)
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	881a      	ldrh	r2, [r3, #0]
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c5dc:	d00a      	beq.n	800c5f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff ff56 	bl	800c494 <ptr_to_mem>
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	68b8      	ldr	r0, [r7, #8]
 800c5ec:	f7ff ff64 	bl	800c4b8 <mem_to_ptr>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd90      	pop	{r4, r7, pc}
 800c5fc:	2000ae6c 	.word	0x2000ae6c
 800c600:	080190c0 	.word	0x080190c0
 800c604:	080190f0 	.word	0x080190f0
 800c608:	08019108 	.word	0x08019108
 800c60c:	2000ae70 	.word	0x2000ae70
 800c610:	08019130 	.word	0x08019130
 800c614:	0801914c 	.word	0x0801914c
 800c618:	08019168 	.word	0x08019168
 800c61c:	2000ae78 	.word	0x2000ae78

0800c620 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c626:	4b1f      	ldr	r3, [pc, #124]	@ (800c6a4 <mem_init+0x84>)
 800c628:	3303      	adds	r3, #3
 800c62a:	f023 0303 	bic.w	r3, r3, #3
 800c62e:	461a      	mov	r2, r3
 800c630:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a8 <mem_init+0x88>)
 800c632:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c634:	4b1c      	ldr	r3, [pc, #112]	@ (800c6a8 <mem_init+0x88>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800c640:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c64e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800c652:	f7ff ff1f 	bl	800c494 <ptr_to_mem>
 800c656:	4603      	mov	r3, r0
 800c658:	4a14      	ldr	r2, [pc, #80]	@ (800c6ac <mem_init+0x8c>)
 800c65a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c65c:	4b13      	ldr	r3, [pc, #76]	@ (800c6ac <mem_init+0x8c>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2201      	movs	r2, #1
 800c662:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c664:	4b11      	ldr	r3, [pc, #68]	@ (800c6ac <mem_init+0x8c>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800c66c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c66e:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ac <mem_init+0x8c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800c676:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c678:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a8 <mem_init+0x88>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a0c      	ldr	r2, [pc, #48]	@ (800c6b0 <mem_init+0x90>)
 800c67e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c680:	480c      	ldr	r0, [pc, #48]	@ (800c6b4 <mem_init+0x94>)
 800c682:	f00a fe0f 	bl	80172a4 <sys_mutex_new>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d006      	beq.n	800c69a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c68c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b8 <mem_init+0x98>)
 800c68e:	f240 221f 	movw	r2, #543	@ 0x21f
 800c692:	490a      	ldr	r1, [pc, #40]	@ (800c6bc <mem_init+0x9c>)
 800c694:	480a      	ldr	r0, [pc, #40]	@ (800c6c0 <mem_init+0xa0>)
 800c696:	f00a ff75 	bl	8017584 <iprintf>
  }
}
 800c69a:	bf00      	nop
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20008658 	.word	0x20008658
 800c6a8:	2000ae6c 	.word	0x2000ae6c
 800c6ac:	2000ae70 	.word	0x2000ae70
 800c6b0:	2000ae78 	.word	0x2000ae78
 800c6b4:	2000ae74 	.word	0x2000ae74
 800c6b8:	080190c0 	.word	0x080190c0
 800c6bc:	08019194 	.word	0x08019194
 800c6c0:	08019108 	.word	0x08019108

0800c6c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff fef3 	bl	800c4b8 <mem_to_ptr>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff feda 	bl	800c494 <ptr_to_mem>
 800c6e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	885b      	ldrh	r3, [r3, #2]
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7ff fed4 	bl	800c494 <ptr_to_mem>
 800c6ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c6f6:	d818      	bhi.n	800c72a <mem_link_valid+0x66>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	885b      	ldrh	r3, [r3, #2]
 800c6fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c700:	d813      	bhi.n	800c72a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c706:	8afa      	ldrh	r2, [r7, #22]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d004      	beq.n	800c716 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	8afa      	ldrh	r2, [r7, #22]
 800c712:	429a      	cmp	r2, r3
 800c714:	d109      	bne.n	800c72a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c716:	4b08      	ldr	r3, [pc, #32]	@ (800c738 <mem_link_valid+0x74>)
 800c718:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d006      	beq.n	800c72e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	885b      	ldrh	r3, [r3, #2]
 800c724:	8afa      	ldrh	r2, [r7, #22]
 800c726:	429a      	cmp	r2, r3
 800c728:	d001      	beq.n	800c72e <mem_link_valid+0x6a>
    return 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e000      	b.n	800c730 <mem_link_valid+0x6c>
  }
  return 1;
 800c72e:	2301      	movs	r3, #1
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2000ae70 	.word	0x2000ae70

0800c73c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b088      	sub	sp, #32
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d070      	beq.n	800c82c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f003 0303 	and.w	r3, r3, #3
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00d      	beq.n	800c770 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c754:	4b37      	ldr	r3, [pc, #220]	@ (800c834 <mem_free+0xf8>)
 800c756:	f240 2273 	movw	r2, #627	@ 0x273
 800c75a:	4937      	ldr	r1, [pc, #220]	@ (800c838 <mem_free+0xfc>)
 800c75c:	4837      	ldr	r0, [pc, #220]	@ (800c83c <mem_free+0x100>)
 800c75e:	f00a ff11 	bl	8017584 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c762:	f00a fdf1 	bl	8017348 <sys_arch_protect>
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f00a fdfb 	bl	8017364 <sys_arch_unprotect>
    return;
 800c76e:	e05e      	b.n	800c82e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3b08      	subs	r3, #8
 800c774:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c776:	4b32      	ldr	r3, [pc, #200]	@ (800c840 <mem_free+0x104>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	69fa      	ldr	r2, [r7, #28]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d306      	bcc.n	800c78e <mem_free+0x52>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f103 020c 	add.w	r2, r3, #12
 800c786:	4b2f      	ldr	r3, [pc, #188]	@ (800c844 <mem_free+0x108>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d90d      	bls.n	800c7aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c78e:	4b29      	ldr	r3, [pc, #164]	@ (800c834 <mem_free+0xf8>)
 800c790:	f240 227f 	movw	r2, #639	@ 0x27f
 800c794:	492c      	ldr	r1, [pc, #176]	@ (800c848 <mem_free+0x10c>)
 800c796:	4829      	ldr	r0, [pc, #164]	@ (800c83c <mem_free+0x100>)
 800c798:	f00a fef4 	bl	8017584 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c79c:	f00a fdd4 	bl	8017348 <sys_arch_protect>
 800c7a0:	6138      	str	r0, [r7, #16]
 800c7a2:	6938      	ldr	r0, [r7, #16]
 800c7a4:	f00a fdde 	bl	8017364 <sys_arch_unprotect>
    return;
 800c7a8:	e041      	b.n	800c82e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c7aa:	4828      	ldr	r0, [pc, #160]	@ (800c84c <mem_free+0x110>)
 800c7ac:	f00a fd90 	bl	80172d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	791b      	ldrb	r3, [r3, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d110      	bne.n	800c7da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c7b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c834 <mem_free+0xf8>)
 800c7ba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c7be:	4924      	ldr	r1, [pc, #144]	@ (800c850 <mem_free+0x114>)
 800c7c0:	481e      	ldr	r0, [pc, #120]	@ (800c83c <mem_free+0x100>)
 800c7c2:	f00a fedf 	bl	8017584 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c7c6:	4821      	ldr	r0, [pc, #132]	@ (800c84c <mem_free+0x110>)
 800c7c8:	f00a fd91 	bl	80172ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c7cc:	f00a fdbc 	bl	8017348 <sys_arch_protect>
 800c7d0:	6178      	str	r0, [r7, #20]
 800c7d2:	6978      	ldr	r0, [r7, #20]
 800c7d4:	f00a fdc6 	bl	8017364 <sys_arch_unprotect>
    return;
 800c7d8:	e029      	b.n	800c82e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c7da:	69f8      	ldr	r0, [r7, #28]
 800c7dc:	f7ff ff72 	bl	800c6c4 <mem_link_valid>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d110      	bne.n	800c808 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c7e6:	4b13      	ldr	r3, [pc, #76]	@ (800c834 <mem_free+0xf8>)
 800c7e8:	f240 2295 	movw	r2, #661	@ 0x295
 800c7ec:	4919      	ldr	r1, [pc, #100]	@ (800c854 <mem_free+0x118>)
 800c7ee:	4813      	ldr	r0, [pc, #76]	@ (800c83c <mem_free+0x100>)
 800c7f0:	f00a fec8 	bl	8017584 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c7f4:	4815      	ldr	r0, [pc, #84]	@ (800c84c <mem_free+0x110>)
 800c7f6:	f00a fd7a 	bl	80172ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c7fa:	f00a fda5 	bl	8017348 <sys_arch_protect>
 800c7fe:	61b8      	str	r0, [r7, #24]
 800c800:	69b8      	ldr	r0, [r7, #24]
 800c802:	f00a fdaf 	bl	8017364 <sys_arch_unprotect>
    return;
 800c806:	e012      	b.n	800c82e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	2200      	movs	r2, #0
 800c80c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c80e:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <mem_free+0x11c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69fa      	ldr	r2, [r7, #28]
 800c814:	429a      	cmp	r2, r3
 800c816:	d202      	bcs.n	800c81e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c818:	4a0f      	ldr	r2, [pc, #60]	@ (800c858 <mem_free+0x11c>)
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c81e:	69f8      	ldr	r0, [r7, #28]
 800c820:	f7ff fe5c 	bl	800c4dc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c824:	4809      	ldr	r0, [pc, #36]	@ (800c84c <mem_free+0x110>)
 800c826:	f00a fd62 	bl	80172ee <sys_mutex_unlock>
 800c82a:	e000      	b.n	800c82e <mem_free+0xf2>
    return;
 800c82c:	bf00      	nop
}
 800c82e:	3720      	adds	r7, #32
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	080190c0 	.word	0x080190c0
 800c838:	080191b0 	.word	0x080191b0
 800c83c:	08019108 	.word	0x08019108
 800c840:	2000ae6c 	.word	0x2000ae6c
 800c844:	2000ae70 	.word	0x2000ae70
 800c848:	080191d4 	.word	0x080191d4
 800c84c:	2000ae74 	.word	0x2000ae74
 800c850:	080191f0 	.word	0x080191f0
 800c854:	08019218 	.word	0x08019218
 800c858:	2000ae78 	.word	0x2000ae78

0800c85c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	460b      	mov	r3, r1
 800c866:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c868:	887b      	ldrh	r3, [r7, #2]
 800c86a:	3303      	adds	r3, #3
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c874:	8bfb      	ldrh	r3, [r7, #30]
 800c876:	2b0b      	cmp	r3, #11
 800c878:	d801      	bhi.n	800c87e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c87a:	230c      	movs	r3, #12
 800c87c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c87e:	8bfb      	ldrh	r3, [r7, #30]
 800c880:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c884:	d803      	bhi.n	800c88e <mem_trim+0x32>
 800c886:	8bfa      	ldrh	r2, [r7, #30]
 800c888:	887b      	ldrh	r3, [r7, #2]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d201      	bcs.n	800c892 <mem_trim+0x36>
    return NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	e0d8      	b.n	800ca44 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c892:	4b6e      	ldr	r3, [pc, #440]	@ (800ca4c <mem_trim+0x1f0>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d304      	bcc.n	800c8a6 <mem_trim+0x4a>
 800c89c:	4b6c      	ldr	r3, [pc, #432]	@ (800ca50 <mem_trim+0x1f4>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d306      	bcc.n	800c8b4 <mem_trim+0x58>
 800c8a6:	4b6b      	ldr	r3, [pc, #428]	@ (800ca54 <mem_trim+0x1f8>)
 800c8a8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c8ac:	496a      	ldr	r1, [pc, #424]	@ (800ca58 <mem_trim+0x1fc>)
 800c8ae:	486b      	ldr	r0, [pc, #428]	@ (800ca5c <mem_trim+0x200>)
 800c8b0:	f00a fe68 	bl	8017584 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c8b4:	4b65      	ldr	r3, [pc, #404]	@ (800ca4c <mem_trim+0x1f0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d304      	bcc.n	800c8c8 <mem_trim+0x6c>
 800c8be:	4b64      	ldr	r3, [pc, #400]	@ (800ca50 <mem_trim+0x1f4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d307      	bcc.n	800c8d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c8c8:	f00a fd3e 	bl	8017348 <sys_arch_protect>
 800c8cc:	60b8      	str	r0, [r7, #8]
 800c8ce:	68b8      	ldr	r0, [r7, #8]
 800c8d0:	f00a fd48 	bl	8017364 <sys_arch_unprotect>
    return rmem;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	e0b5      	b.n	800ca44 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3b08      	subs	r3, #8
 800c8dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c8de:	69b8      	ldr	r0, [r7, #24]
 800c8e0:	f7ff fdea 	bl	800c4b8 <mem_to_ptr>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	881a      	ldrh	r2, [r3, #0]
 800c8ec:	8afb      	ldrh	r3, [r7, #22]
 800c8ee:	1ad3      	subs	r3, r2, r3
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3b08      	subs	r3, #8
 800c8f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c8f6:	8bfa      	ldrh	r2, [r7, #30]
 800c8f8:	8abb      	ldrh	r3, [r7, #20]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d906      	bls.n	800c90c <mem_trim+0xb0>
 800c8fe:	4b55      	ldr	r3, [pc, #340]	@ (800ca54 <mem_trim+0x1f8>)
 800c900:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c904:	4956      	ldr	r1, [pc, #344]	@ (800ca60 <mem_trim+0x204>)
 800c906:	4855      	ldr	r0, [pc, #340]	@ (800ca5c <mem_trim+0x200>)
 800c908:	f00a fe3c 	bl	8017584 <iprintf>
  if (newsize > size) {
 800c90c:	8bfa      	ldrh	r2, [r7, #30]
 800c90e:	8abb      	ldrh	r3, [r7, #20]
 800c910:	429a      	cmp	r2, r3
 800c912:	d901      	bls.n	800c918 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	e095      	b.n	800ca44 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c918:	8bfa      	ldrh	r2, [r7, #30]
 800c91a:	8abb      	ldrh	r3, [r7, #20]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d101      	bne.n	800c924 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	e08f      	b.n	800ca44 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c924:	484f      	ldr	r0, [pc, #316]	@ (800ca64 <mem_trim+0x208>)
 800c926:	f00a fcd3 	bl	80172d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	881b      	ldrh	r3, [r3, #0]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7ff fdb0 	bl	800c494 <ptr_to_mem>
 800c934:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	791b      	ldrb	r3, [r3, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d13f      	bne.n	800c9be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	881b      	ldrh	r3, [r3, #0]
 800c942:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c946:	d106      	bne.n	800c956 <mem_trim+0xfa>
 800c948:	4b42      	ldr	r3, [pc, #264]	@ (800ca54 <mem_trim+0x1f8>)
 800c94a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c94e:	4946      	ldr	r1, [pc, #280]	@ (800ca68 <mem_trim+0x20c>)
 800c950:	4842      	ldr	r0, [pc, #264]	@ (800ca5c <mem_trim+0x200>)
 800c952:	f00a fe17 	bl	8017584 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c95c:	8afa      	ldrh	r2, [r7, #22]
 800c95e:	8bfb      	ldrh	r3, [r7, #30]
 800c960:	4413      	add	r3, r2
 800c962:	b29b      	uxth	r3, r3
 800c964:	3308      	adds	r3, #8
 800c966:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c968:	4b40      	ldr	r3, [pc, #256]	@ (800ca6c <mem_trim+0x210>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d106      	bne.n	800c980 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c972:	89fb      	ldrh	r3, [r7, #14]
 800c974:	4618      	mov	r0, r3
 800c976:	f7ff fd8d 	bl	800c494 <ptr_to_mem>
 800c97a:	4603      	mov	r3, r0
 800c97c:	4a3b      	ldr	r2, [pc, #236]	@ (800ca6c <mem_trim+0x210>)
 800c97e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff fd86 	bl	800c494 <ptr_to_mem>
 800c988:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2200      	movs	r2, #0
 800c98e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	89ba      	ldrh	r2, [r7, #12]
 800c994:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	8afa      	ldrh	r2, [r7, #22]
 800c99a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	89fa      	ldrh	r2, [r7, #14]
 800c9a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c9aa:	d047      	beq.n	800ca3c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff fd6f 	bl	800c494 <ptr_to_mem>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	8053      	strh	r3, [r2, #2]
 800c9bc:	e03e      	b.n	800ca3c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c9be:	8bfb      	ldrh	r3, [r7, #30]
 800c9c0:	f103 0214 	add.w	r2, r3, #20
 800c9c4:	8abb      	ldrh	r3, [r7, #20]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d838      	bhi.n	800ca3c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c9ca:	8afa      	ldrh	r2, [r7, #22]
 800c9cc:	8bfb      	ldrh	r3, [r7, #30]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c9de:	d106      	bne.n	800c9ee <mem_trim+0x192>
 800c9e0:	4b1c      	ldr	r3, [pc, #112]	@ (800ca54 <mem_trim+0x1f8>)
 800c9e2:	f240 3216 	movw	r2, #790	@ 0x316
 800c9e6:	4920      	ldr	r1, [pc, #128]	@ (800ca68 <mem_trim+0x20c>)
 800c9e8:	481c      	ldr	r0, [pc, #112]	@ (800ca5c <mem_trim+0x200>)
 800c9ea:	f00a fdcb 	bl	8017584 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c9ee:	89fb      	ldrh	r3, [r7, #14]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7ff fd4f 	bl	800c494 <ptr_to_mem>
 800c9f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c9f8:	4b1c      	ldr	r3, [pc, #112]	@ (800ca6c <mem_trim+0x210>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d202      	bcs.n	800ca08 <mem_trim+0x1ac>
      lfree = mem2;
 800ca02:	4a1a      	ldr	r2, [pc, #104]	@ (800ca6c <mem_trim+0x210>)
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	881a      	ldrh	r2, [r3, #0]
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	8afa      	ldrh	r2, [r7, #22]
 800ca1a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	89fa      	ldrh	r2, [r7, #14]
 800ca20:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ca2a:	d007      	beq.n	800ca3c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	881b      	ldrh	r3, [r3, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff fd2f 	bl	800c494 <ptr_to_mem>
 800ca36:	4602      	mov	r2, r0
 800ca38:	89fb      	ldrh	r3, [r7, #14]
 800ca3a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca3c:	4809      	ldr	r0, [pc, #36]	@ (800ca64 <mem_trim+0x208>)
 800ca3e:	f00a fc56 	bl	80172ee <sys_mutex_unlock>
  return rmem;
 800ca42:	687b      	ldr	r3, [r7, #4]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3720      	adds	r7, #32
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	2000ae6c 	.word	0x2000ae6c
 800ca50:	2000ae70 	.word	0x2000ae70
 800ca54:	080190c0 	.word	0x080190c0
 800ca58:	0801924c 	.word	0x0801924c
 800ca5c:	08019108 	.word	0x08019108
 800ca60:	08019264 	.word	0x08019264
 800ca64:	2000ae74 	.word	0x2000ae74
 800ca68:	08019284 	.word	0x08019284
 800ca6c:	2000ae78 	.word	0x2000ae78

0800ca70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ca7a:	88fb      	ldrh	r3, [r7, #6]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <mem_malloc+0x14>
    return NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	e0e2      	b.n	800cc4a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ca84:	88fb      	ldrh	r3, [r7, #6]
 800ca86:	3303      	adds	r3, #3
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	f023 0303 	bic.w	r3, r3, #3
 800ca8e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ca90:	8bbb      	ldrh	r3, [r7, #28]
 800ca92:	2b0b      	cmp	r3, #11
 800ca94:	d801      	bhi.n	800ca9a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ca96:	230c      	movs	r3, #12
 800ca98:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ca9a:	8bbb      	ldrh	r3, [r7, #28]
 800ca9c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800caa0:	d803      	bhi.n	800caaa <mem_malloc+0x3a>
 800caa2:	8bba      	ldrh	r2, [r7, #28]
 800caa4:	88fb      	ldrh	r3, [r7, #6]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d201      	bcs.n	800caae <mem_malloc+0x3e>
    return NULL;
 800caaa:	2300      	movs	r3, #0
 800caac:	e0cd      	b.n	800cc4a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800caae:	4869      	ldr	r0, [pc, #420]	@ (800cc54 <mem_malloc+0x1e4>)
 800cab0:	f00a fc0e 	bl	80172d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cab4:	4b68      	ldr	r3, [pc, #416]	@ (800cc58 <mem_malloc+0x1e8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fcfd 	bl	800c4b8 <mem_to_ptr>
 800cabe:	4603      	mov	r3, r0
 800cac0:	83fb      	strh	r3, [r7, #30]
 800cac2:	e0b7      	b.n	800cc34 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cac4:	8bfb      	ldrh	r3, [r7, #30]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7ff fce4 	bl	800c494 <ptr_to_mem>
 800cacc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	791b      	ldrb	r3, [r3, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f040 80a7 	bne.w	800cc26 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	461a      	mov	r2, r3
 800cade:	8bfb      	ldrh	r3, [r7, #30]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	f1a3 0208 	sub.w	r2, r3, #8
 800cae6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cae8:	429a      	cmp	r2, r3
 800caea:	f0c0 809c 	bcc.w	800cc26 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	8bfb      	ldrh	r3, [r7, #30]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f1a3 0208 	sub.w	r2, r3, #8
 800cafc:	8bbb      	ldrh	r3, [r7, #28]
 800cafe:	3314      	adds	r3, #20
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d333      	bcc.n	800cb6c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cb04:	8bfa      	ldrh	r2, [r7, #30]
 800cb06:	8bbb      	ldrh	r3, [r7, #28]
 800cb08:	4413      	add	r3, r2
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cb10:	8a7b      	ldrh	r3, [r7, #18]
 800cb12:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb16:	d106      	bne.n	800cb26 <mem_malloc+0xb6>
 800cb18:	4b50      	ldr	r3, [pc, #320]	@ (800cc5c <mem_malloc+0x1ec>)
 800cb1a:	f240 3287 	movw	r2, #903	@ 0x387
 800cb1e:	4950      	ldr	r1, [pc, #320]	@ (800cc60 <mem_malloc+0x1f0>)
 800cb20:	4850      	ldr	r0, [pc, #320]	@ (800cc64 <mem_malloc+0x1f4>)
 800cb22:	f00a fd2f 	bl	8017584 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cb26:	8a7b      	ldrh	r3, [r7, #18]
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff fcb3 	bl	800c494 <ptr_to_mem>
 800cb2e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	881a      	ldrh	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	8bfa      	ldrh	r2, [r7, #30]
 800cb42:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	8a7a      	ldrh	r2, [r7, #18]
 800cb48:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb58:	d00b      	beq.n	800cb72 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7ff fc98 	bl	800c494 <ptr_to_mem>
 800cb64:	4602      	mov	r2, r0
 800cb66:	8a7b      	ldrh	r3, [r7, #18]
 800cb68:	8053      	strh	r3, [r2, #2]
 800cb6a:	e002      	b.n	800cb72 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cb72:	4b39      	ldr	r3, [pc, #228]	@ (800cc58 <mem_malloc+0x1e8>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d127      	bne.n	800cbcc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cb7c:	4b36      	ldr	r3, [pc, #216]	@ (800cc58 <mem_malloc+0x1e8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cb82:	e005      	b.n	800cb90 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	881b      	ldrh	r3, [r3, #0]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff fc83 	bl	800c494 <ptr_to_mem>
 800cb8e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	791b      	ldrb	r3, [r3, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d004      	beq.n	800cba2 <mem_malloc+0x132>
 800cb98:	4b33      	ldr	r3, [pc, #204]	@ (800cc68 <mem_malloc+0x1f8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	69ba      	ldr	r2, [r7, #24]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d1f0      	bne.n	800cb84 <mem_malloc+0x114>
          }
          lfree = cur;
 800cba2:	4a2d      	ldr	r2, [pc, #180]	@ (800cc58 <mem_malloc+0x1e8>)
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cba8:	4b2b      	ldr	r3, [pc, #172]	@ (800cc58 <mem_malloc+0x1e8>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	4b2e      	ldr	r3, [pc, #184]	@ (800cc68 <mem_malloc+0x1f8>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d00b      	beq.n	800cbcc <mem_malloc+0x15c>
 800cbb4:	4b28      	ldr	r3, [pc, #160]	@ (800cc58 <mem_malloc+0x1e8>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	791b      	ldrb	r3, [r3, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d006      	beq.n	800cbcc <mem_malloc+0x15c>
 800cbbe:	4b27      	ldr	r3, [pc, #156]	@ (800cc5c <mem_malloc+0x1ec>)
 800cbc0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cbc4:	4929      	ldr	r1, [pc, #164]	@ (800cc6c <mem_malloc+0x1fc>)
 800cbc6:	4827      	ldr	r0, [pc, #156]	@ (800cc64 <mem_malloc+0x1f4>)
 800cbc8:	f00a fcdc 	bl	8017584 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cbcc:	4821      	ldr	r0, [pc, #132]	@ (800cc54 <mem_malloc+0x1e4>)
 800cbce:	f00a fb8e 	bl	80172ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cbd2:	8bba      	ldrh	r2, [r7, #28]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3308      	adds	r3, #8
 800cbda:	4a23      	ldr	r2, [pc, #140]	@ (800cc68 <mem_malloc+0x1f8>)
 800cbdc:	6812      	ldr	r2, [r2, #0]
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d906      	bls.n	800cbf0 <mem_malloc+0x180>
 800cbe2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc5c <mem_malloc+0x1ec>)
 800cbe4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cbe8:	4921      	ldr	r1, [pc, #132]	@ (800cc70 <mem_malloc+0x200>)
 800cbea:	481e      	ldr	r0, [pc, #120]	@ (800cc64 <mem_malloc+0x1f4>)
 800cbec:	f00a fcca 	bl	8017584 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d006      	beq.n	800cc08 <mem_malloc+0x198>
 800cbfa:	4b18      	ldr	r3, [pc, #96]	@ (800cc5c <mem_malloc+0x1ec>)
 800cbfc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cc00:	491c      	ldr	r1, [pc, #112]	@ (800cc74 <mem_malloc+0x204>)
 800cc02:	4818      	ldr	r0, [pc, #96]	@ (800cc64 <mem_malloc+0x1f4>)
 800cc04:	f00a fcbe 	bl	8017584 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	f003 0303 	and.w	r3, r3, #3
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d006      	beq.n	800cc20 <mem_malloc+0x1b0>
 800cc12:	4b12      	ldr	r3, [pc, #72]	@ (800cc5c <mem_malloc+0x1ec>)
 800cc14:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800cc18:	4917      	ldr	r1, [pc, #92]	@ (800cc78 <mem_malloc+0x208>)
 800cc1a:	4812      	ldr	r0, [pc, #72]	@ (800cc64 <mem_malloc+0x1f4>)
 800cc1c:	f00a fcb2 	bl	8017584 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	3308      	adds	r3, #8
 800cc24:	e011      	b.n	800cc4a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cc26:	8bfb      	ldrh	r3, [r7, #30]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff fc33 	bl	800c494 <ptr_to_mem>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cc34:	8bfa      	ldrh	r2, [r7, #30]
 800cc36:	8bbb      	ldrh	r3, [r7, #28]
 800cc38:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	f4ff af41 	bcc.w	800cac4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cc42:	4804      	ldr	r0, [pc, #16]	@ (800cc54 <mem_malloc+0x1e4>)
 800cc44:	f00a fb53 	bl	80172ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3720      	adds	r7, #32
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	2000ae74 	.word	0x2000ae74
 800cc58:	2000ae78 	.word	0x2000ae78
 800cc5c:	080190c0 	.word	0x080190c0
 800cc60:	08019284 	.word	0x08019284
 800cc64:	08019108 	.word	0x08019108
 800cc68:	2000ae70 	.word	0x2000ae70
 800cc6c:	08019298 	.word	0x08019298
 800cc70:	080192b4 	.word	0x080192b4
 800cc74:	080192e4 	.word	0x080192e4
 800cc78:	08019314 	.word	0x08019314

0800cc7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	3303      	adds	r3, #3
 800cc92:	f023 0303 	bic.w	r3, r3, #3
 800cc96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cc98:	2300      	movs	r3, #0
 800cc9a:	60fb      	str	r3, [r7, #12]
 800cc9c:	e011      	b.n	800ccc2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	689b      	ldr	r3, [r3, #8]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	4413      	add	r3, r2
 800ccba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	885b      	ldrh	r3, [r3, #2]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4293      	cmp	r3, r2
 800cccc:	dbe7      	blt.n	800cc9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	3714      	adds	r7, #20
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cce2:	2300      	movs	r3, #0
 800cce4:	80fb      	strh	r3, [r7, #6]
 800cce6:	e009      	b.n	800ccfc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cce8:	88fb      	ldrh	r3, [r7, #6]
 800ccea:	4a08      	ldr	r2, [pc, #32]	@ (800cd0c <memp_init+0x30>)
 800ccec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff ffc3 	bl	800cc7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ccf6:	88fb      	ldrh	r3, [r7, #6]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	80fb      	strh	r3, [r7, #6]
 800ccfc:	88fb      	ldrh	r3, [r7, #6]
 800ccfe:	2b0c      	cmp	r3, #12
 800cd00:	d9f2      	bls.n	800cce8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cd02:	bf00      	nop
 800cd04:	bf00      	nop
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	0801bb44 	.word	0x0801bb44

0800cd10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cd18:	f00a fb16 	bl	8017348 <sys_arch_protect>
 800cd1c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d015      	beq.n	800cd58 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	68ba      	ldr	r2, [r7, #8]
 800cd32:	6812      	ldr	r2, [r2, #0]
 800cd34:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f003 0303 	and.w	r3, r3, #3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d006      	beq.n	800cd4e <do_memp_malloc_pool+0x3e>
 800cd40:	4b09      	ldr	r3, [pc, #36]	@ (800cd68 <do_memp_malloc_pool+0x58>)
 800cd42:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cd46:	4909      	ldr	r1, [pc, #36]	@ (800cd6c <do_memp_malloc_pool+0x5c>)
 800cd48:	4809      	ldr	r0, [pc, #36]	@ (800cd70 <do_memp_malloc_pool+0x60>)
 800cd4a:	f00a fc1b 	bl	8017584 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cd4e:	68f8      	ldr	r0, [r7, #12]
 800cd50:	f00a fb08 	bl	8017364 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	e003      	b.n	800cd60 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f00a fb03 	bl	8017364 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	08019338 	.word	0x08019338
 800cd6c:	08019368 	.word	0x08019368
 800cd70:	0801938c 	.word	0x0801938c

0800cd74 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	2b0c      	cmp	r3, #12
 800cd82:	d908      	bls.n	800cd96 <memp_malloc+0x22>
 800cd84:	4b0a      	ldr	r3, [pc, #40]	@ (800cdb0 <memp_malloc+0x3c>)
 800cd86:	f240 1257 	movw	r2, #343	@ 0x157
 800cd8a:	490a      	ldr	r1, [pc, #40]	@ (800cdb4 <memp_malloc+0x40>)
 800cd8c:	480a      	ldr	r0, [pc, #40]	@ (800cdb8 <memp_malloc+0x44>)
 800cd8e:	f00a fbf9 	bl	8017584 <iprintf>
 800cd92:	2300      	movs	r3, #0
 800cd94:	e008      	b.n	800cda8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cd96:	79fb      	ldrb	r3, [r7, #7]
 800cd98:	4a08      	ldr	r2, [pc, #32]	@ (800cdbc <memp_malloc+0x48>)
 800cd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ffb6 	bl	800cd10 <do_memp_malloc_pool>
 800cda4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cda6:	68fb      	ldr	r3, [r7, #12]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	08019338 	.word	0x08019338
 800cdb4:	080193c8 	.word	0x080193c8
 800cdb8:	0801938c 	.word	0x0801938c
 800cdbc:	0801bb44 	.word	0x0801bb44

0800cdc0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	f003 0303 	and.w	r3, r3, #3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d006      	beq.n	800cde2 <do_memp_free_pool+0x22>
 800cdd4:	4b0d      	ldr	r3, [pc, #52]	@ (800ce0c <do_memp_free_pool+0x4c>)
 800cdd6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cdda:	490d      	ldr	r1, [pc, #52]	@ (800ce10 <do_memp_free_pool+0x50>)
 800cddc:	480d      	ldr	r0, [pc, #52]	@ (800ce14 <do_memp_free_pool+0x54>)
 800cdde:	f00a fbd1 	bl	8017584 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cde6:	f00a faaf 	bl	8017348 <sys_arch_protect>
 800cdea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	689b      	ldr	r3, [r3, #8]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cdfe:	68b8      	ldr	r0, [r7, #8]
 800ce00:	f00a fab0 	bl	8017364 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ce04:	bf00      	nop
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	08019338 	.word	0x08019338
 800ce10:	080193e8 	.word	0x080193e8
 800ce14:	0801938c 	.word	0x0801938c

0800ce18 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	4603      	mov	r3, r0
 800ce20:	6039      	str	r1, [r7, #0]
 800ce22:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	2b0c      	cmp	r3, #12
 800ce28:	d907      	bls.n	800ce3a <memp_free+0x22>
 800ce2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ce5c <memp_free+0x44>)
 800ce2c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800ce30:	490b      	ldr	r1, [pc, #44]	@ (800ce60 <memp_free+0x48>)
 800ce32:	480c      	ldr	r0, [pc, #48]	@ (800ce64 <memp_free+0x4c>)
 800ce34:	f00a fba6 	bl	8017584 <iprintf>
 800ce38:	e00c      	b.n	800ce54 <memp_free+0x3c>

  if (mem == NULL) {
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d008      	beq.n	800ce52 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	4a09      	ldr	r2, [pc, #36]	@ (800ce68 <memp_free+0x50>)
 800ce44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7ff ffb8 	bl	800cdc0 <do_memp_free_pool>
 800ce50:	e000      	b.n	800ce54 <memp_free+0x3c>
    return;
 800ce52:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	08019338 	.word	0x08019338
 800ce60:	08019408 	.word	0x08019408
 800ce64:	0801938c 	.word	0x0801938c
 800ce68:	0801bb44 	.word	0x0801bb44

0800ce6c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ce70:	bf00      	nop
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
	...

0800ce7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b086      	sub	sp, #24
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
 800ce88:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d108      	bne.n	800cea2 <netif_add+0x26>
 800ce90:	4b57      	ldr	r3, [pc, #348]	@ (800cff0 <netif_add+0x174>)
 800ce92:	f240 1227 	movw	r2, #295	@ 0x127
 800ce96:	4957      	ldr	r1, [pc, #348]	@ (800cff4 <netif_add+0x178>)
 800ce98:	4857      	ldr	r0, [pc, #348]	@ (800cff8 <netif_add+0x17c>)
 800ce9a:	f00a fb73 	bl	8017584 <iprintf>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e0a2      	b.n	800cfe8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d108      	bne.n	800ceba <netif_add+0x3e>
 800cea8:	4b51      	ldr	r3, [pc, #324]	@ (800cff0 <netif_add+0x174>)
 800ceaa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ceae:	4953      	ldr	r1, [pc, #332]	@ (800cffc <netif_add+0x180>)
 800ceb0:	4851      	ldr	r0, [pc, #324]	@ (800cff8 <netif_add+0x17c>)
 800ceb2:	f00a fb67 	bl	8017584 <iprintf>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e096      	b.n	800cfe8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cec0:	4b4f      	ldr	r3, [pc, #316]	@ (800d000 <netif_add+0x184>)
 800cec2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ceca:	4b4d      	ldr	r3, [pc, #308]	@ (800d000 <netif_add+0x184>)
 800cecc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ced4:	4b4a      	ldr	r3, [pc, #296]	@ (800d000 <netif_add+0x184>)
 800ced6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	4a45      	ldr	r2, [pc, #276]	@ (800d004 <netif_add+0x188>)
 800ceee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6a3a      	ldr	r2, [r7, #32]
 800cf08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cf0a:	4b3f      	ldr	r3, [pc, #252]	@ (800d008 <netif_add+0x18c>)
 800cf0c:	781a      	ldrb	r2, [r3, #0]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf18:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	68b9      	ldr	r1, [r7, #8]
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 f913 	bl	800d14c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cf26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	4798      	blx	r3
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <netif_add+0xba>
    return NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e058      	b.n	800cfe8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf3c:	2bff      	cmp	r3, #255	@ 0xff
 800cf3e:	d103      	bne.n	800cf48 <netif_add+0xcc>
        netif->num = 0;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf4c:	4b2f      	ldr	r3, [pc, #188]	@ (800d00c <netif_add+0x190>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	617b      	str	r3, [r7, #20]
 800cf52:	e02b      	b.n	800cfac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d106      	bne.n	800cf6a <netif_add+0xee>
 800cf5c:	4b24      	ldr	r3, [pc, #144]	@ (800cff0 <netif_add+0x174>)
 800cf5e:	f240 128b 	movw	r2, #395	@ 0x18b
 800cf62:	492b      	ldr	r1, [pc, #172]	@ (800d010 <netif_add+0x194>)
 800cf64:	4824      	ldr	r0, [pc, #144]	@ (800cff8 <netif_add+0x17c>)
 800cf66:	f00a fb0d 	bl	8017584 <iprintf>
        num_netifs++;
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	2bff      	cmp	r3, #255	@ 0xff
 800cf74:	dd06      	ble.n	800cf84 <netif_add+0x108>
 800cf76:	4b1e      	ldr	r3, [pc, #120]	@ (800cff0 <netif_add+0x174>)
 800cf78:	f240 128d 	movw	r2, #397	@ 0x18d
 800cf7c:	4925      	ldr	r1, [pc, #148]	@ (800d014 <netif_add+0x198>)
 800cf7e:	481e      	ldr	r0, [pc, #120]	@ (800cff8 <netif_add+0x17c>)
 800cf80:	f00a fb00 	bl	8017584 <iprintf>
        if (netif2->num == netif->num) {
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d108      	bne.n	800cfa6 <netif_add+0x12a>
          netif->num++;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800cfa4:	e005      	b.n	800cfb2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1d0      	bne.n	800cf54 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d1be      	bne.n	800cf36 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfbe:	2bfe      	cmp	r3, #254	@ 0xfe
 800cfc0:	d103      	bne.n	800cfca <netif_add+0x14e>
    netif_num = 0;
 800cfc2:	4b11      	ldr	r3, [pc, #68]	@ (800d008 <netif_add+0x18c>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
 800cfc8:	e006      	b.n	800cfd8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	4b0c      	ldr	r3, [pc, #48]	@ (800d008 <netif_add+0x18c>)
 800cfd6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cfd8:	4b0c      	ldr	r3, [pc, #48]	@ (800d00c <netif_add+0x190>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cfe0:	4a0a      	ldr	r2, [pc, #40]	@ (800d00c <netif_add+0x190>)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3718      	adds	r7, #24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	08019424 	.word	0x08019424
 800cff4:	080194b8 	.word	0x080194b8
 800cff8:	08019474 	.word	0x08019474
 800cffc:	080194d4 	.word	0x080194d4
 800d000:	0801bbb8 	.word	0x0801bbb8
 800d004:	0800d427 	.word	0x0800d427
 800d008:	2000df50 	.word	0x2000df50
 800d00c:	2000df48 	.word	0x2000df48
 800d010:	080194f8 	.word	0x080194f8
 800d014:	0801950c 	.word	0x0801950c

0800d018 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d022:	6839      	ldr	r1, [r7, #0]
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f002 fe51 	bl	800fccc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f007 fcfd 	bl	8014a2c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d032:	bf00      	nop
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
	...

0800d03c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b086      	sub	sp, #24
 800d040:	af00      	add	r7, sp, #0
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <netif_do_set_ipaddr+0x20>
 800d04e:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c4 <netif_do_set_ipaddr+0x88>)
 800d050:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d054:	491c      	ldr	r1, [pc, #112]	@ (800d0c8 <netif_do_set_ipaddr+0x8c>)
 800d056:	481d      	ldr	r0, [pc, #116]	@ (800d0cc <netif_do_set_ipaddr+0x90>)
 800d058:	f00a fa94 	bl	8017584 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d106      	bne.n	800d070 <netif_do_set_ipaddr+0x34>
 800d062:	4b18      	ldr	r3, [pc, #96]	@ (800d0c4 <netif_do_set_ipaddr+0x88>)
 800d064:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d068:	4917      	ldr	r1, [pc, #92]	@ (800d0c8 <netif_do_set_ipaddr+0x8c>)
 800d06a:	4818      	ldr	r0, [pc, #96]	@ (800d0cc <netif_do_set_ipaddr+0x90>)
 800d06c:	f00a fa8a 	bl	8017584 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3304      	adds	r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d01c      	beq.n	800d0b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3304      	adds	r3, #4
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d08e:	f107 0314 	add.w	r3, r7, #20
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff ffbf 	bl	800d018 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <netif_do_set_ipaddr+0x6a>
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	e000      	b.n	800d0a8 <netif_do_set_ipaddr+0x6c>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	68f8      	ldr	r0, [r7, #12]
 800d0b0:	f000 f8d2 	bl	800d258 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e000      	b.n	800d0ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3718      	adds	r7, #24
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	08019424 	.word	0x08019424
 800d0c8:	0801953c 	.word	0x0801953c
 800d0cc:	08019474 	.word	0x08019474

0800d0d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d00a      	beq.n	800d100 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d002      	beq.n	800d0f6 <netif_do_set_netmask+0x26>
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	e000      	b.n	800d0f8 <netif_do_set_netmask+0x28>
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e000      	b.n	800d102 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d100:	2300      	movs	r3, #0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d10e:	b480      	push	{r7}
 800d110:	b085      	sub	sp, #20
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	330c      	adds	r3, #12
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	429a      	cmp	r2, r3
 800d126:	d00a      	beq.n	800d13e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <netif_do_set_gw+0x26>
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	e000      	b.n	800d136 <netif_do_set_gw+0x28>
 800d134:	2300      	movs	r3, #0
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d15e:	2300      	movs	r3, #0
 800d160:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d168:	4b1c      	ldr	r3, [pc, #112]	@ (800d1dc <netif_set_addr+0x90>)
 800d16a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d172:	4b1a      	ldr	r3, [pc, #104]	@ (800d1dc <netif_set_addr+0x90>)
 800d174:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d101      	bne.n	800d180 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d17c:	4b17      	ldr	r3, [pc, #92]	@ (800d1dc <netif_set_addr+0x90>)
 800d17e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <netif_set_addr+0x42>
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <netif_set_addr+0x46>
 800d18e:	2301      	movs	r3, #1
 800d190:	e000      	b.n	800d194 <netif_set_addr+0x48>
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d006      	beq.n	800d1aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d19c:	f107 0310 	add.w	r3, r7, #16
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f7ff ff49 	bl	800d03c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d1aa:	69fa      	ldr	r2, [r7, #28]
 800d1ac:	6879      	ldr	r1, [r7, #4]
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f7ff ff8e 	bl	800d0d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d1b4:	69ba      	ldr	r2, [r7, #24]
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f7ff ffa8 	bl	800d10e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d106      	bne.n	800d1d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d1c4:	f107 0310 	add.w	r3, r7, #16
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	68b9      	ldr	r1, [r7, #8]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7ff ff35 	bl	800d03c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d1d2:	bf00      	nop
 800d1d4:	3720      	adds	r7, #32
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	0801bbb8 	.word	0x0801bbb8

0800d1e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d1e8:	4a04      	ldr	r2, [pc, #16]	@ (800d1fc <netif_set_default+0x1c>)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d1ee:	bf00      	nop
 800d1f0:	370c      	adds	r7, #12
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	2000df4c 	.word	0x2000df4c

0800d200 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d107      	bne.n	800d21e <netif_set_up+0x1e>
 800d20e:	4b0f      	ldr	r3, [pc, #60]	@ (800d24c <netif_set_up+0x4c>)
 800d210:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d214:	490e      	ldr	r1, [pc, #56]	@ (800d250 <netif_set_up+0x50>)
 800d216:	480f      	ldr	r0, [pc, #60]	@ (800d254 <netif_set_up+0x54>)
 800d218:	f00a f9b4 	bl	8017584 <iprintf>
 800d21c:	e013      	b.n	800d246 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d224:	f003 0301 	and.w	r3, r3, #1
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10c      	bne.n	800d246 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d232:	f043 0301 	orr.w	r3, r3, #1
 800d236:	b2da      	uxtb	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d23e:	2103      	movs	r1, #3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f809 	bl	800d258 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	08019424 	.word	0x08019424
 800d250:	080195ac 	.word	0x080195ac
 800d254:	08019474 	.word	0x08019474

0800d258 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d106      	bne.n	800d278 <netif_issue_reports+0x20>
 800d26a:	4b18      	ldr	r3, [pc, #96]	@ (800d2cc <netif_issue_reports+0x74>)
 800d26c:	f240 326d 	movw	r2, #877	@ 0x36d
 800d270:	4917      	ldr	r1, [pc, #92]	@ (800d2d0 <netif_issue_reports+0x78>)
 800d272:	4818      	ldr	r0, [pc, #96]	@ (800d2d4 <netif_issue_reports+0x7c>)
 800d274:	f00a f986 	bl	8017584 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d27e:	f003 0304 	and.w	r3, r3, #4
 800d282:	2b00      	cmp	r3, #0
 800d284:	d01e      	beq.n	800d2c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d28c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d290:	2b00      	cmp	r3, #0
 800d292:	d017      	beq.n	800d2c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d294:	78fb      	ldrb	r3, [r7, #3]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d013      	beq.n	800d2c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00e      	beq.n	800d2c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2ae:	f003 0308 	and.w	r3, r3, #8
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d007      	beq.n	800d2c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f008 fb1f 	bl	8015900 <etharp_request>
 800d2c2:	e000      	b.n	800d2c6 <netif_issue_reports+0x6e>
    return;
 800d2c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	08019424 	.word	0x08019424
 800d2d0:	080195c8 	.word	0x080195c8
 800d2d4:	08019474 	.word	0x08019474

0800d2d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d107      	bne.n	800d2f6 <netif_set_down+0x1e>
 800d2e6:	4b12      	ldr	r3, [pc, #72]	@ (800d330 <netif_set_down+0x58>)
 800d2e8:	f240 329b 	movw	r2, #923	@ 0x39b
 800d2ec:	4911      	ldr	r1, [pc, #68]	@ (800d334 <netif_set_down+0x5c>)
 800d2ee:	4812      	ldr	r0, [pc, #72]	@ (800d338 <netif_set_down+0x60>)
 800d2f0:	f00a f948 	bl	8017584 <iprintf>
 800d2f4:	e019      	b.n	800d32a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	d012      	beq.n	800d32a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d30a:	f023 0301 	bic.w	r3, r3, #1
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d31c:	f003 0308 	and.w	r3, r3, #8
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f007 fea9 	bl	801507c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	08019424 	.word	0x08019424
 800d334:	080195ec 	.word	0x080195ec
 800d338:	08019474 	.word	0x08019474

0800d33c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d107      	bne.n	800d35a <netif_set_link_up+0x1e>
 800d34a:	4b13      	ldr	r3, [pc, #76]	@ (800d398 <netif_set_link_up+0x5c>)
 800d34c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d350:	4912      	ldr	r1, [pc, #72]	@ (800d39c <netif_set_link_up+0x60>)
 800d352:	4813      	ldr	r0, [pc, #76]	@ (800d3a0 <netif_set_link_up+0x64>)
 800d354:	f00a f916 	bl	8017584 <iprintf>
 800d358:	e01b      	b.n	800d392 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d114      	bne.n	800d392 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d36e:	f043 0304 	orr.w	r3, r3, #4
 800d372:	b2da      	uxtb	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d37a:	2103      	movs	r1, #3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f7ff ff6b 	bl	800d258 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d003      	beq.n	800d392 <netif_set_link_up+0x56>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	69db      	ldr	r3, [r3, #28]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	08019424 	.word	0x08019424
 800d39c:	0801960c 	.word	0x0801960c
 800d3a0:	08019474 	.word	0x08019474

0800d3a4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d107      	bne.n	800d3c2 <netif_set_link_down+0x1e>
 800d3b2:	4b11      	ldr	r3, [pc, #68]	@ (800d3f8 <netif_set_link_down+0x54>)
 800d3b4:	f240 4206 	movw	r2, #1030	@ 0x406
 800d3b8:	4910      	ldr	r1, [pc, #64]	@ (800d3fc <netif_set_link_down+0x58>)
 800d3ba:	4811      	ldr	r0, [pc, #68]	@ (800d400 <netif_set_link_down+0x5c>)
 800d3bc:	f00a f8e2 	bl	8017584 <iprintf>
 800d3c0:	e017      	b.n	800d3f2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d3c8:	f003 0304 	and.w	r3, r3, #4
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d010      	beq.n	800d3f2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d3d6:	f023 0304 	bic.w	r3, r3, #4
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	69db      	ldr	r3, [r3, #28]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d003      	beq.n	800d3f2 <netif_set_link_down+0x4e>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	08019424 	.word	0x08019424
 800d3fc:	08019630 	.word	0x08019630
 800d400:	08019474 	.word	0x08019474

0800d404 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d002      	beq.n	800d41a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	61da      	str	r2, [r3, #28]
  }
}
 800d41a:	bf00      	nop
 800d41c:	370c      	adds	r7, #12
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d426:	b480      	push	{r7}
 800d428:	b085      	sub	sp, #20
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	60f8      	str	r0, [r7, #12]
 800d42e:	60b9      	str	r1, [r7, #8]
 800d430:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d432:	f06f 030b 	mvn.w	r3, #11
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr
	...

0800d444 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d44e:	79fb      	ldrb	r3, [r7, #7]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d013      	beq.n	800d47c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d454:	4b0d      	ldr	r3, [pc, #52]	@ (800d48c <netif_get_by_index+0x48>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	60fb      	str	r3, [r7, #12]
 800d45a:	e00c      	b.n	800d476 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d462:	3301      	adds	r3, #1
 800d464:	b2db      	uxtb	r3, r3
 800d466:	79fa      	ldrb	r2, [r7, #7]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d101      	bne.n	800d470 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	e006      	b.n	800d47e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d1ef      	bne.n	800d45c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	2000df48 	.word	0x2000df48

0800d490 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d496:	f009 ff57 	bl	8017348 <sys_arch_protect>
 800d49a:	6038      	str	r0, [r7, #0]
 800d49c:	4b0d      	ldr	r3, [pc, #52]	@ (800d4d4 <pbuf_free_ooseq+0x44>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f009 ff5e 	bl	8017364 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d8 <pbuf_free_ooseq+0x48>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	607b      	str	r3, [r7, #4]
 800d4ae:	e00a      	b.n	800d4c6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f002 fc45 	bl	800fd48 <tcp_free_ooseq>
      return;
 800d4be:	e005      	b.n	800d4cc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	607b      	str	r3, [r7, #4]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1f1      	bne.n	800d4b0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	2000df51 	.word	0x2000df51
 800d4d8:	2000df60 	.word	0x2000df60

0800d4dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d4e4:	f7ff ffd4 	bl	800d490 <pbuf_free_ooseq>
}
 800d4e8:	bf00      	nop
 800d4ea:	3708      	adds	r7, #8
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d4f6:	f009 ff27 	bl	8017348 <sys_arch_protect>
 800d4fa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d4fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d53c <pbuf_pool_is_empty+0x4c>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d502:	4b0e      	ldr	r3, [pc, #56]	@ (800d53c <pbuf_pool_is_empty+0x4c>)
 800d504:	2201      	movs	r2, #1
 800d506:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f009 ff2b 	bl	8017364 <sys_arch_unprotect>

  if (!queued) {
 800d50e:	78fb      	ldrb	r3, [r7, #3]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10f      	bne.n	800d534 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d514:	2100      	movs	r1, #0
 800d516:	480a      	ldr	r0, [pc, #40]	@ (800d540 <pbuf_pool_is_empty+0x50>)
 800d518:	f7fe fed6 	bl	800c2c8 <tcpip_try_callback>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d008      	beq.n	800d534 <pbuf_pool_is_empty+0x44>
 800d522:	f009 ff11 	bl	8017348 <sys_arch_protect>
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	4b04      	ldr	r3, [pc, #16]	@ (800d53c <pbuf_pool_is_empty+0x4c>)
 800d52a:	2200      	movs	r2, #0
 800d52c:	701a      	strb	r2, [r3, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f009 ff18 	bl	8017364 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	2000df51 	.word	0x2000df51
 800d540:	0800d4dd 	.word	0x0800d4dd

0800d544 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4611      	mov	r1, r2
 800d550:	461a      	mov	r2, r3
 800d552:	460b      	mov	r3, r1
 800d554:	80fb      	strh	r3, [r7, #6]
 800d556:	4613      	mov	r3, r2
 800d558:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	88fa      	ldrh	r2, [r7, #6]
 800d56a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	88ba      	ldrh	r2, [r7, #4]
 800d570:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d572:	8b3b      	ldrh	r3, [r7, #24]
 800d574:	b2da      	uxtb	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	7f3a      	ldrb	r2, [r7, #28]
 800d57e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2201      	movs	r2, #1
 800d584:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2200      	movs	r2, #0
 800d58a:	73da      	strb	r2, [r3, #15]
}
 800d58c:	bf00      	nop
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08c      	sub	sp, #48	@ 0x30
 800d59c:	af02      	add	r7, sp, #8
 800d59e:	4603      	mov	r3, r0
 800d5a0:	71fb      	strb	r3, [r7, #7]
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	80bb      	strh	r3, [r7, #4]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d5aa:	79fb      	ldrb	r3, [r7, #7]
 800d5ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d5ae:	887b      	ldrh	r3, [r7, #2]
 800d5b0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d5b4:	d07f      	beq.n	800d6b6 <pbuf_alloc+0x11e>
 800d5b6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d5ba:	f300 80c8 	bgt.w	800d74e <pbuf_alloc+0x1b6>
 800d5be:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d5c2:	d010      	beq.n	800d5e6 <pbuf_alloc+0x4e>
 800d5c4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d5c8:	f300 80c1 	bgt.w	800d74e <pbuf_alloc+0x1b6>
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d002      	beq.n	800d5d6 <pbuf_alloc+0x3e>
 800d5d0:	2b41      	cmp	r3, #65	@ 0x41
 800d5d2:	f040 80bc 	bne.w	800d74e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d5d6:	887a      	ldrh	r2, [r7, #2]
 800d5d8:	88bb      	ldrh	r3, [r7, #4]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	2000      	movs	r0, #0
 800d5de:	f000 f8d1 	bl	800d784 <pbuf_alloc_reference>
 800d5e2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d5e4:	e0bd      	b.n	800d762 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d5ee:	88bb      	ldrh	r3, [r7, #4]
 800d5f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d5f2:	200c      	movs	r0, #12
 800d5f4:	f7ff fbbe 	bl	800cd74 <memp_malloc>
 800d5f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d109      	bne.n	800d614 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d600:	f7ff ff76 	bl	800d4f0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d60a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d60c:	f000 faa8 	bl	800db60 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d610:	2300      	movs	r3, #0
 800d612:	e0a7      	b.n	800d764 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d614:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d616:	3303      	adds	r3, #3
 800d618:	b29b      	uxth	r3, r3
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	b29b      	uxth	r3, r3
 800d620:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d624:	b29b      	uxth	r3, r3
 800d626:	8b7a      	ldrh	r2, [r7, #26]
 800d628:	4293      	cmp	r3, r2
 800d62a:	bf28      	it	cs
 800d62c:	4613      	movcs	r3, r2
 800d62e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d630:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d632:	3310      	adds	r3, #16
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	4413      	add	r3, r2
 800d638:	3303      	adds	r3, #3
 800d63a:	f023 0303 	bic.w	r3, r3, #3
 800d63e:	4618      	mov	r0, r3
 800d640:	89f9      	ldrh	r1, [r7, #14]
 800d642:	8b7a      	ldrh	r2, [r7, #26]
 800d644:	2300      	movs	r3, #0
 800d646:	9301      	str	r3, [sp, #4]
 800d648:	887b      	ldrh	r3, [r7, #2]
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	460b      	mov	r3, r1
 800d64e:	4601      	mov	r1, r0
 800d650:	6938      	ldr	r0, [r7, #16]
 800d652:	f7ff ff77 	bl	800d544 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f003 0303 	and.w	r3, r3, #3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d006      	beq.n	800d670 <pbuf_alloc+0xd8>
 800d662:	4b42      	ldr	r3, [pc, #264]	@ (800d76c <pbuf_alloc+0x1d4>)
 800d664:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d668:	4941      	ldr	r1, [pc, #260]	@ (800d770 <pbuf_alloc+0x1d8>)
 800d66a:	4842      	ldr	r0, [pc, #264]	@ (800d774 <pbuf_alloc+0x1dc>)
 800d66c:	f009 ff8a 	bl	8017584 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d670:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d672:	3303      	adds	r3, #3
 800d674:	f023 0303 	bic.w	r3, r3, #3
 800d678:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d67c:	d106      	bne.n	800d68c <pbuf_alloc+0xf4>
 800d67e:	4b3b      	ldr	r3, [pc, #236]	@ (800d76c <pbuf_alloc+0x1d4>)
 800d680:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d684:	493c      	ldr	r1, [pc, #240]	@ (800d778 <pbuf_alloc+0x1e0>)
 800d686:	483b      	ldr	r0, [pc, #236]	@ (800d774 <pbuf_alloc+0x1dc>)
 800d688:	f009 ff7c 	bl	8017584 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	627b      	str	r3, [r7, #36]	@ 0x24
 800d696:	e002      	b.n	800d69e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	693a      	ldr	r2, [r7, #16]
 800d69c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d6a2:	8b7a      	ldrh	r2, [r7, #26]
 800d6a4:	89fb      	ldrh	r3, [r7, #14]
 800d6a6:	1ad3      	subs	r3, r2, r3
 800d6a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d6ae:	8b7b      	ldrh	r3, [r7, #26]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d19e      	bne.n	800d5f2 <pbuf_alloc+0x5a>
      break;
 800d6b4:	e055      	b.n	800d762 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d6b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d6b8:	3303      	adds	r3, #3
 800d6ba:	b29b      	uxth	r3, r3
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	88bb      	ldrh	r3, [r7, #4]
 800d6c4:	3303      	adds	r3, #3
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	f023 0303 	bic.w	r3, r3, #3
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4413      	add	r3, r2
 800d6d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d6d2:	8b3b      	ldrh	r3, [r7, #24]
 800d6d4:	3310      	adds	r3, #16
 800d6d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6d8:	8b3a      	ldrh	r2, [r7, #24]
 800d6da:	88bb      	ldrh	r3, [r7, #4]
 800d6dc:	3303      	adds	r3, #3
 800d6de:	f023 0303 	bic.w	r3, r3, #3
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d306      	bcc.n	800d6f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d6e6:	8afa      	ldrh	r2, [r7, #22]
 800d6e8:	88bb      	ldrh	r3, [r7, #4]
 800d6ea:	3303      	adds	r3, #3
 800d6ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d201      	bcs.n	800d6f8 <pbuf_alloc+0x160>
        return NULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	e035      	b.n	800d764 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d6f8:	8afb      	ldrh	r3, [r7, #22]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7ff f9b8 	bl	800ca70 <mem_malloc>
 800d700:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <pbuf_alloc+0x174>
        return NULL;
 800d708:	2300      	movs	r3, #0
 800d70a:	e02b      	b.n	800d764 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d70c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d70e:	3310      	adds	r3, #16
 800d710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d712:	4413      	add	r3, r2
 800d714:	3303      	adds	r3, #3
 800d716:	f023 0303 	bic.w	r3, r3, #3
 800d71a:	4618      	mov	r0, r3
 800d71c:	88b9      	ldrh	r1, [r7, #4]
 800d71e:	88ba      	ldrh	r2, [r7, #4]
 800d720:	2300      	movs	r3, #0
 800d722:	9301      	str	r3, [sp, #4]
 800d724:	887b      	ldrh	r3, [r7, #2]
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	460b      	mov	r3, r1
 800d72a:	4601      	mov	r1, r0
 800d72c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d72e:	f7ff ff09 	bl	800d544 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f003 0303 	and.w	r3, r3, #3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d010      	beq.n	800d760 <pbuf_alloc+0x1c8>
 800d73e:	4b0b      	ldr	r3, [pc, #44]	@ (800d76c <pbuf_alloc+0x1d4>)
 800d740:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d744:	490d      	ldr	r1, [pc, #52]	@ (800d77c <pbuf_alloc+0x1e4>)
 800d746:	480b      	ldr	r0, [pc, #44]	@ (800d774 <pbuf_alloc+0x1dc>)
 800d748:	f009 ff1c 	bl	8017584 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d74c:	e008      	b.n	800d760 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d74e:	4b07      	ldr	r3, [pc, #28]	@ (800d76c <pbuf_alloc+0x1d4>)
 800d750:	f240 1227 	movw	r2, #295	@ 0x127
 800d754:	490a      	ldr	r1, [pc, #40]	@ (800d780 <pbuf_alloc+0x1e8>)
 800d756:	4807      	ldr	r0, [pc, #28]	@ (800d774 <pbuf_alloc+0x1dc>)
 800d758:	f009 ff14 	bl	8017584 <iprintf>
      return NULL;
 800d75c:	2300      	movs	r3, #0
 800d75e:	e001      	b.n	800d764 <pbuf_alloc+0x1cc>
      break;
 800d760:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d764:	4618      	mov	r0, r3
 800d766:	3728      	adds	r7, #40	@ 0x28
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	08019654 	.word	0x08019654
 800d770:	08019684 	.word	0x08019684
 800d774:	080196b4 	.word	0x080196b4
 800d778:	080196dc 	.word	0x080196dc
 800d77c:	08019710 	.word	0x08019710
 800d780:	0801973c 	.word	0x0801973c

0800d784 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af02      	add	r7, sp, #8
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	460b      	mov	r3, r1
 800d78e:	807b      	strh	r3, [r7, #2]
 800d790:	4613      	mov	r3, r2
 800d792:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d794:	883b      	ldrh	r3, [r7, #0]
 800d796:	2b41      	cmp	r3, #65	@ 0x41
 800d798:	d009      	beq.n	800d7ae <pbuf_alloc_reference+0x2a>
 800d79a:	883b      	ldrh	r3, [r7, #0]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d006      	beq.n	800d7ae <pbuf_alloc_reference+0x2a>
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d7e0 <pbuf_alloc_reference+0x5c>)
 800d7a2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d7a6:	490f      	ldr	r1, [pc, #60]	@ (800d7e4 <pbuf_alloc_reference+0x60>)
 800d7a8:	480f      	ldr	r0, [pc, #60]	@ (800d7e8 <pbuf_alloc_reference+0x64>)
 800d7aa:	f009 feeb 	bl	8017584 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d7ae:	200b      	movs	r0, #11
 800d7b0:	f7ff fae0 	bl	800cd74 <memp_malloc>
 800d7b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d101      	bne.n	800d7c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	e00b      	b.n	800d7d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d7c0:	8879      	ldrh	r1, [r7, #2]
 800d7c2:	887a      	ldrh	r2, [r7, #2]
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	883b      	ldrh	r3, [r7, #0]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f7ff feb7 	bl	800d544 <pbuf_init_alloced_pbuf>
  return p;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	08019654 	.word	0x08019654
 800d7e4:	08019758 	.word	0x08019758
 800d7e8:	080196b4 	.word	0x080196b4

0800d7ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af02      	add	r7, sp, #8
 800d7f2:	607b      	str	r3, [r7, #4]
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73fb      	strb	r3, [r7, #15]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	81bb      	strh	r3, [r7, #12]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d804:	8a7b      	ldrh	r3, [r7, #18]
 800d806:	3303      	adds	r3, #3
 800d808:	f023 0203 	bic.w	r2, r3, #3
 800d80c:	89bb      	ldrh	r3, [r7, #12]
 800d80e:	441a      	add	r2, r3
 800d810:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d812:	429a      	cmp	r2, r3
 800d814:	d901      	bls.n	800d81a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d816:	2300      	movs	r3, #0
 800d818:	e018      	b.n	800d84c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d007      	beq.n	800d830 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d820:	8a7b      	ldrh	r3, [r7, #18]
 800d822:	3303      	adds	r3, #3
 800d824:	f023 0303 	bic.w	r3, r3, #3
 800d828:	6a3a      	ldr	r2, [r7, #32]
 800d82a:	4413      	add	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
 800d82e:	e001      	b.n	800d834 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	89b9      	ldrh	r1, [r7, #12]
 800d838:	89ba      	ldrh	r2, [r7, #12]
 800d83a:	2302      	movs	r3, #2
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	897b      	ldrh	r3, [r7, #10]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	460b      	mov	r3, r1
 800d844:	6979      	ldr	r1, [r7, #20]
 800d846:	f7ff fe7d 	bl	800d544 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d84a:	687b      	ldr	r3, [r7, #4]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d106      	bne.n	800d874 <pbuf_realloc+0x20>
 800d866:	4b3a      	ldr	r3, [pc, #232]	@ (800d950 <pbuf_realloc+0xfc>)
 800d868:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d86c:	4939      	ldr	r1, [pc, #228]	@ (800d954 <pbuf_realloc+0x100>)
 800d86e:	483a      	ldr	r0, [pc, #232]	@ (800d958 <pbuf_realloc+0x104>)
 800d870:	f009 fe88 	bl	8017584 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	891b      	ldrh	r3, [r3, #8]
 800d878:	887a      	ldrh	r2, [r7, #2]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d263      	bcs.n	800d946 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	891a      	ldrh	r2, [r3, #8]
 800d882:	887b      	ldrh	r3, [r7, #2]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d888:	887b      	ldrh	r3, [r7, #2]
 800d88a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d890:	e018      	b.n	800d8c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	895b      	ldrh	r3, [r3, #10]
 800d896:	897a      	ldrh	r2, [r7, #10]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	891a      	ldrh	r2, [r3, #8]
 800d8a0:	893b      	ldrh	r3, [r7, #8]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <pbuf_realloc+0x70>
 800d8b6:	4b26      	ldr	r3, [pc, #152]	@ (800d950 <pbuf_realloc+0xfc>)
 800d8b8:	f240 12af 	movw	r2, #431	@ 0x1af
 800d8bc:	4927      	ldr	r1, [pc, #156]	@ (800d95c <pbuf_realloc+0x108>)
 800d8be:	4826      	ldr	r0, [pc, #152]	@ (800d958 <pbuf_realloc+0x104>)
 800d8c0:	f009 fe60 	bl	8017584 <iprintf>
  while (rem_len > q->len) {
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	895b      	ldrh	r3, [r3, #10]
 800d8c8:	897a      	ldrh	r2, [r7, #10]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d8e1      	bhi.n	800d892 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	7b1b      	ldrb	r3, [r3, #12]
 800d8d2:	f003 030f 	and.w	r3, r3, #15
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d121      	bne.n	800d91e <pbuf_realloc+0xca>
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	895b      	ldrh	r3, [r3, #10]
 800d8de:	897a      	ldrh	r2, [r7, #10]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d01c      	beq.n	800d91e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	7b5b      	ldrb	r3, [r3, #13]
 800d8e8:	f003 0302 	and.w	r3, r3, #2
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d116      	bne.n	800d91e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	685a      	ldr	r2, [r3, #4]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	897b      	ldrh	r3, [r7, #10]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4619      	mov	r1, r3
 800d902:	68f8      	ldr	r0, [r7, #12]
 800d904:	f7fe ffaa 	bl	800c85c <mem_trim>
 800d908:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d106      	bne.n	800d91e <pbuf_realloc+0xca>
 800d910:	4b0f      	ldr	r3, [pc, #60]	@ (800d950 <pbuf_realloc+0xfc>)
 800d912:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d916:	4912      	ldr	r1, [pc, #72]	@ (800d960 <pbuf_realloc+0x10c>)
 800d918:	480f      	ldr	r0, [pc, #60]	@ (800d958 <pbuf_realloc+0x104>)
 800d91a:	f009 fe33 	bl	8017584 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	897a      	ldrh	r2, [r7, #10]
 800d922:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	895a      	ldrh	r2, [r3, #10]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d004      	beq.n	800d93e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 f911 	bl	800db60 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	e000      	b.n	800d948 <pbuf_realloc+0xf4>
    return;
 800d946:	bf00      	nop

}
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	08019654 	.word	0x08019654
 800d954:	0801976c 	.word	0x0801976c
 800d958:	080196b4 	.word	0x080196b4
 800d95c:	08019784 	.word	0x08019784
 800d960:	0801979c 	.word	0x0801979c

0800d964 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b086      	sub	sp, #24
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	4613      	mov	r3, r2
 800d970:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <pbuf_add_header_impl+0x22>
 800d978:	4b2b      	ldr	r3, [pc, #172]	@ (800da28 <pbuf_add_header_impl+0xc4>)
 800d97a:	f240 12df 	movw	r2, #479	@ 0x1df
 800d97e:	492b      	ldr	r1, [pc, #172]	@ (800da2c <pbuf_add_header_impl+0xc8>)
 800d980:	482b      	ldr	r0, [pc, #172]	@ (800da30 <pbuf_add_header_impl+0xcc>)
 800d982:	f009 fdff 	bl	8017584 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <pbuf_add_header_impl+0x30>
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d992:	d301      	bcc.n	800d998 <pbuf_add_header_impl+0x34>
    return 1;
 800d994:	2301      	movs	r3, #1
 800d996:	e043      	b.n	800da20 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e03e      	b.n	800da20 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	891a      	ldrh	r2, [r3, #8]
 800d9aa:	8a7b      	ldrh	r3, [r7, #18]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	8a7a      	ldrh	r2, [r7, #18]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d901      	bls.n	800d9ba <pbuf_add_header_impl+0x56>
    return 1;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e032      	b.n	800da20 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	7b1b      	ldrb	r3, [r3, #12]
 800d9be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d9c0:	8a3b      	ldrh	r3, [r7, #16]
 800d9c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00c      	beq.n	800d9e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	425b      	negs	r3, r3
 800d9d2:	4413      	add	r3, r2
 800d9d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	3310      	adds	r3, #16
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d20d      	bcs.n	800d9fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e01d      	b.n	800da20 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d006      	beq.n	800d9f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	425b      	negs	r3, r3
 800d9f2:	4413      	add	r3, r2
 800d9f4:	617b      	str	r3, [r7, #20]
 800d9f6:	e001      	b.n	800d9fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e011      	b.n	800da20 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	895a      	ldrh	r2, [r3, #10]
 800da06:	8a7b      	ldrh	r3, [r7, #18]
 800da08:	4413      	add	r3, r2
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	891a      	ldrh	r2, [r3, #8]
 800da14:	8a7b      	ldrh	r3, [r7, #18]
 800da16:	4413      	add	r3, r2
 800da18:	b29a      	uxth	r2, r3
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	811a      	strh	r2, [r3, #8]


  return 0;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3718      	adds	r7, #24
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	08019654 	.word	0x08019654
 800da2c:	080197b8 	.word	0x080197b8
 800da30:	080196b4 	.word	0x080196b4

0800da34 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800da3e:	2200      	movs	r2, #0
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ff8e 	bl	800d964 <pbuf_add_header_impl>
 800da48:	4603      	mov	r3, r0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d106      	bne.n	800da72 <pbuf_remove_header+0x1e>
 800da64:	4b20      	ldr	r3, [pc, #128]	@ (800dae8 <pbuf_remove_header+0x94>)
 800da66:	f240 224b 	movw	r2, #587	@ 0x24b
 800da6a:	4920      	ldr	r1, [pc, #128]	@ (800daec <pbuf_remove_header+0x98>)
 800da6c:	4820      	ldr	r0, [pc, #128]	@ (800daf0 <pbuf_remove_header+0x9c>)
 800da6e:	f009 fd89 	bl	8017584 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <pbuf_remove_header+0x2c>
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da7e:	d301      	bcc.n	800da84 <pbuf_remove_header+0x30>
    return 1;
 800da80:	2301      	movs	r3, #1
 800da82:	e02c      	b.n	800dade <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <pbuf_remove_header+0x3a>
    return 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	e027      	b.n	800dade <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	895b      	ldrh	r3, [r3, #10]
 800da96:	89fa      	ldrh	r2, [r7, #14]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d908      	bls.n	800daae <pbuf_remove_header+0x5a>
 800da9c:	4b12      	ldr	r3, [pc, #72]	@ (800dae8 <pbuf_remove_header+0x94>)
 800da9e:	f240 2255 	movw	r2, #597	@ 0x255
 800daa2:	4914      	ldr	r1, [pc, #80]	@ (800daf4 <pbuf_remove_header+0xa0>)
 800daa4:	4812      	ldr	r0, [pc, #72]	@ (800daf0 <pbuf_remove_header+0x9c>)
 800daa6:	f009 fd6d 	bl	8017584 <iprintf>
 800daaa:	2301      	movs	r3, #1
 800daac:	e017      	b.n	800dade <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	441a      	add	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	895a      	ldrh	r2, [r3, #10]
 800dac4:	89fb      	ldrh	r3, [r7, #14]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	b29a      	uxth	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	891a      	ldrh	r2, [r3, #8]
 800dad2:	89fb      	ldrh	r3, [r7, #14]
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	08019654 	.word	0x08019654
 800daec:	080197b8 	.word	0x080197b8
 800daf0:	080196b4 	.word	0x080196b4
 800daf4:	080197c4 	.word	0x080197c4

0800daf8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
 800db00:	460b      	mov	r3, r1
 800db02:	807b      	strh	r3, [r7, #2]
 800db04:	4613      	mov	r3, r2
 800db06:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800db08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	da08      	bge.n	800db22 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800db10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db14:	425b      	negs	r3, r3
 800db16:	4619      	mov	r1, r3
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f7ff ff9b 	bl	800da54 <pbuf_remove_header>
 800db1e:	4603      	mov	r3, r0
 800db20:	e007      	b.n	800db32 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800db22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db26:	787a      	ldrb	r2, [r7, #1]
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff ff1a 	bl	800d964 <pbuf_add_header_impl>
 800db30:	4603      	mov	r3, r0
  }
}
 800db32:	4618      	mov	r0, r3
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b082      	sub	sp, #8
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	460b      	mov	r3, r1
 800db44:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800db46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db4a:	2201      	movs	r2, #1
 800db4c:	4619      	mov	r1, r3
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff ffd2 	bl	800daf8 <pbuf_header_impl>
 800db54:	4603      	mov	r3, r0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3708      	adds	r7, #8
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
	...

0800db60 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d10b      	bne.n	800db86 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d106      	bne.n	800db82 <pbuf_free+0x22>
 800db74:	4b3b      	ldr	r3, [pc, #236]	@ (800dc64 <pbuf_free+0x104>)
 800db76:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800db7a:	493b      	ldr	r1, [pc, #236]	@ (800dc68 <pbuf_free+0x108>)
 800db7c:	483b      	ldr	r0, [pc, #236]	@ (800dc6c <pbuf_free+0x10c>)
 800db7e:	f009 fd01 	bl	8017584 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800db82:	2300      	movs	r3, #0
 800db84:	e069      	b.n	800dc5a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800db8a:	e062      	b.n	800dc52 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800db8c:	f009 fbdc 	bl	8017348 <sys_arch_protect>
 800db90:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7b9b      	ldrb	r3, [r3, #14]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <pbuf_free+0x48>
 800db9a:	4b32      	ldr	r3, [pc, #200]	@ (800dc64 <pbuf_free+0x104>)
 800db9c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800dba0:	4933      	ldr	r1, [pc, #204]	@ (800dc70 <pbuf_free+0x110>)
 800dba2:	4832      	ldr	r0, [pc, #200]	@ (800dc6c <pbuf_free+0x10c>)
 800dba4:	f009 fcee 	bl	8017584 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	7b9b      	ldrb	r3, [r3, #14]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	739a      	strb	r2, [r3, #14]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7b9b      	ldrb	r3, [r3, #14]
 800dbb8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dbba:	69b8      	ldr	r0, [r7, #24]
 800dbbc:	f009 fbd2 	bl	8017364 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d143      	bne.n	800dc4e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	7b1b      	ldrb	r3, [r3, #12]
 800dbd0:	f003 030f 	and.w	r3, r3, #15
 800dbd4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7b5b      	ldrb	r3, [r3, #13]
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d011      	beq.n	800dc06 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d106      	bne.n	800dbfc <pbuf_free+0x9c>
 800dbee:	4b1d      	ldr	r3, [pc, #116]	@ (800dc64 <pbuf_free+0x104>)
 800dbf0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800dbf4:	491f      	ldr	r1, [pc, #124]	@ (800dc74 <pbuf_free+0x114>)
 800dbf6:	481d      	ldr	r0, [pc, #116]	@ (800dc6c <pbuf_free+0x10c>)
 800dbf8:	f009 fcc4 	bl	8017584 <iprintf>
        pc->custom_free_function(p);
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	691b      	ldr	r3, [r3, #16]
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	4798      	blx	r3
 800dc04:	e01d      	b.n	800dc42 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d104      	bne.n	800dc16 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dc0c:	6879      	ldr	r1, [r7, #4]
 800dc0e:	200c      	movs	r0, #12
 800dc10:	f7ff f902 	bl	800ce18 <memp_free>
 800dc14:	e015      	b.n	800dc42 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dc16:	7bfb      	ldrb	r3, [r7, #15]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d104      	bne.n	800dc26 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	200b      	movs	r0, #11
 800dc20:	f7ff f8fa 	bl	800ce18 <memp_free>
 800dc24:	e00d      	b.n	800dc42 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d103      	bne.n	800dc34 <pbuf_free+0xd4>
          mem_free(p);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f7fe fd85 	bl	800c73c <mem_free>
 800dc32:	e006      	b.n	800dc42 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dc34:	4b0b      	ldr	r3, [pc, #44]	@ (800dc64 <pbuf_free+0x104>)
 800dc36:	f240 320f 	movw	r2, #783	@ 0x30f
 800dc3a:	490f      	ldr	r1, [pc, #60]	@ (800dc78 <pbuf_free+0x118>)
 800dc3c:	480b      	ldr	r0, [pc, #44]	@ (800dc6c <pbuf_free+0x10c>)
 800dc3e:	f009 fca1 	bl	8017584 <iprintf>
        }
      }
      count++;
 800dc42:	7ffb      	ldrb	r3, [r7, #31]
 800dc44:	3301      	adds	r3, #1
 800dc46:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	607b      	str	r3, [r7, #4]
 800dc4c:	e001      	b.n	800dc52 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d199      	bne.n	800db8c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dc58:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3720      	adds	r7, #32
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	08019654 	.word	0x08019654
 800dc68:	080197b8 	.word	0x080197b8
 800dc6c:	080196b4 	.word	0x080196b4
 800dc70:	080197e4 	.word	0x080197e4
 800dc74:	080197fc 	.word	0x080197fc
 800dc78:	08019820 	.word	0x08019820

0800dc7c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dc88:	e005      	b.n	800dc96 <pbuf_clen+0x1a>
    ++len;
 800dc8a:	89fb      	ldrh	r3, [r7, #14]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1f6      	bne.n	800dc8a <pbuf_clen+0xe>
  }
  return len;
 800dc9c:	89fb      	ldrh	r3, [r7, #14]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
	...

0800dcac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d016      	beq.n	800dce8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dcba:	f009 fb45 	bl	8017348 <sys_arch_protect>
 800dcbe:	60f8      	str	r0, [r7, #12]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7b9b      	ldrb	r3, [r3, #14]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	739a      	strb	r2, [r3, #14]
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f009 fb49 	bl	8017364 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7b9b      	ldrb	r3, [r3, #14]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <pbuf_ref+0x3c>
 800dcda:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <pbuf_ref+0x44>)
 800dcdc:	f240 3242 	movw	r2, #834	@ 0x342
 800dce0:	4904      	ldr	r1, [pc, #16]	@ (800dcf4 <pbuf_ref+0x48>)
 800dce2:	4805      	ldr	r0, [pc, #20]	@ (800dcf8 <pbuf_ref+0x4c>)
 800dce4:	f009 fc4e 	bl	8017584 <iprintf>
  }
}
 800dce8:	bf00      	nop
 800dcea:	3710      	adds	r7, #16
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08019654 	.word	0x08019654
 800dcf4:	08019834 	.word	0x08019834
 800dcf8:	080196b4 	.word	0x080196b4

0800dcfc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <pbuf_cat+0x16>
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d107      	bne.n	800dd22 <pbuf_cat+0x26>
 800dd12:	4b20      	ldr	r3, [pc, #128]	@ (800dd94 <pbuf_cat+0x98>)
 800dd14:	f240 3259 	movw	r2, #857	@ 0x359
 800dd18:	491f      	ldr	r1, [pc, #124]	@ (800dd98 <pbuf_cat+0x9c>)
 800dd1a:	4820      	ldr	r0, [pc, #128]	@ (800dd9c <pbuf_cat+0xa0>)
 800dd1c:	f009 fc32 	bl	8017584 <iprintf>
 800dd20:	e034      	b.n	800dd8c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	60fb      	str	r3, [r7, #12]
 800dd26:	e00a      	b.n	800dd3e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	891a      	ldrh	r2, [r3, #8]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	891b      	ldrh	r3, [r3, #8]
 800dd30:	4413      	add	r3, r2
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	60fb      	str	r3, [r7, #12]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1f0      	bne.n	800dd28 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	891a      	ldrh	r2, [r3, #8]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	895b      	ldrh	r3, [r3, #10]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d006      	beq.n	800dd60 <pbuf_cat+0x64>
 800dd52:	4b10      	ldr	r3, [pc, #64]	@ (800dd94 <pbuf_cat+0x98>)
 800dd54:	f240 3262 	movw	r2, #866	@ 0x362
 800dd58:	4911      	ldr	r1, [pc, #68]	@ (800dda0 <pbuf_cat+0xa4>)
 800dd5a:	4810      	ldr	r0, [pc, #64]	@ (800dd9c <pbuf_cat+0xa0>)
 800dd5c:	f009 fc12 	bl	8017584 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d006      	beq.n	800dd76 <pbuf_cat+0x7a>
 800dd68:	4b0a      	ldr	r3, [pc, #40]	@ (800dd94 <pbuf_cat+0x98>)
 800dd6a:	f240 3263 	movw	r2, #867	@ 0x363
 800dd6e:	490d      	ldr	r1, [pc, #52]	@ (800dda4 <pbuf_cat+0xa8>)
 800dd70:	480a      	ldr	r0, [pc, #40]	@ (800dd9c <pbuf_cat+0xa0>)
 800dd72:	f009 fc07 	bl	8017584 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	891a      	ldrh	r2, [r3, #8]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	4413      	add	r3, r2
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	08019654 	.word	0x08019654
 800dd98:	08019848 	.word	0x08019848
 800dd9c:	080196b4 	.word	0x080196b4
 800dda0:	08019880 	.word	0x08019880
 800dda4:	080198b0 	.word	0x080198b0

0800dda8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b086      	sub	sp, #24
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d008      	beq.n	800ddd2 <pbuf_copy+0x2a>
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d005      	beq.n	800ddd2 <pbuf_copy+0x2a>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	891a      	ldrh	r2, [r3, #8]
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	891b      	ldrh	r3, [r3, #8]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d209      	bcs.n	800dde6 <pbuf_copy+0x3e>
 800ddd2:	4b57      	ldr	r3, [pc, #348]	@ (800df30 <pbuf_copy+0x188>)
 800ddd4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800ddd8:	4956      	ldr	r1, [pc, #344]	@ (800df34 <pbuf_copy+0x18c>)
 800ddda:	4857      	ldr	r0, [pc, #348]	@ (800df38 <pbuf_copy+0x190>)
 800dddc:	f009 fbd2 	bl	8017584 <iprintf>
 800dde0:	f06f 030f 	mvn.w	r3, #15
 800dde4:	e09f      	b.n	800df26 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	895b      	ldrh	r3, [r3, #10]
 800ddea:	461a      	mov	r2, r3
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	1ad2      	subs	r2, r2, r3
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	895b      	ldrh	r3, [r3, #10]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	1acb      	subs	r3, r1, r3
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d306      	bcc.n	800de0c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	895b      	ldrh	r3, [r3, #10]
 800de02:	461a      	mov	r2, r3
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	60fb      	str	r3, [r7, #12]
 800de0a:	e005      	b.n	800de18 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	895b      	ldrh	r3, [r3, #10]
 800de10:	461a      	mov	r2, r3
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	18d0      	adds	r0, r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	685a      	ldr	r2, [r3, #4]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	4413      	add	r3, r2
 800de28:	68fa      	ldr	r2, [r7, #12]
 800de2a:	4619      	mov	r1, r3
 800de2c:	f009 fda9 	bl	8017982 <memcpy>
    offset_to += len;
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4413      	add	r3, r2
 800de36:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	4413      	add	r3, r2
 800de3e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	895b      	ldrh	r3, [r3, #10]
 800de44:	461a      	mov	r2, r3
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	4293      	cmp	r3, r2
 800de4a:	d906      	bls.n	800de5a <pbuf_copy+0xb2>
 800de4c:	4b38      	ldr	r3, [pc, #224]	@ (800df30 <pbuf_copy+0x188>)
 800de4e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800de52:	493a      	ldr	r1, [pc, #232]	@ (800df3c <pbuf_copy+0x194>)
 800de54:	4838      	ldr	r0, [pc, #224]	@ (800df38 <pbuf_copy+0x190>)
 800de56:	f009 fb95 	bl	8017584 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	895b      	ldrh	r3, [r3, #10]
 800de5e:	461a      	mov	r2, r3
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	4293      	cmp	r3, r2
 800de64:	d906      	bls.n	800de74 <pbuf_copy+0xcc>
 800de66:	4b32      	ldr	r3, [pc, #200]	@ (800df30 <pbuf_copy+0x188>)
 800de68:	f240 32da 	movw	r2, #986	@ 0x3da
 800de6c:	4934      	ldr	r1, [pc, #208]	@ (800df40 <pbuf_copy+0x198>)
 800de6e:	4832      	ldr	r0, [pc, #200]	@ (800df38 <pbuf_copy+0x190>)
 800de70:	f009 fb88 	bl	8017584 <iprintf>
    if (offset_from >= p_from->len) {
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	895b      	ldrh	r3, [r3, #10]
 800de78:	461a      	mov	r2, r3
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d304      	bcc.n	800de8a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800de80:	2300      	movs	r3, #0
 800de82:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	895b      	ldrh	r3, [r3, #10]
 800de8e:	461a      	mov	r2, r3
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	4293      	cmp	r3, r2
 800de94:	d114      	bne.n	800dec0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d10c      	bne.n	800dec0 <pbuf_copy+0x118>
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d009      	beq.n	800dec0 <pbuf_copy+0x118>
 800deac:	4b20      	ldr	r3, [pc, #128]	@ (800df30 <pbuf_copy+0x188>)
 800deae:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800deb2:	4924      	ldr	r1, [pc, #144]	@ (800df44 <pbuf_copy+0x19c>)
 800deb4:	4820      	ldr	r0, [pc, #128]	@ (800df38 <pbuf_copy+0x190>)
 800deb6:	f009 fb65 	bl	8017584 <iprintf>
 800deba:	f06f 030f 	mvn.w	r3, #15
 800debe:	e032      	b.n	800df26 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d013      	beq.n	800deee <pbuf_copy+0x146>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	895a      	ldrh	r2, [r3, #10]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	891b      	ldrh	r3, [r3, #8]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d10d      	bne.n	800deee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d009      	beq.n	800deee <pbuf_copy+0x146>
 800deda:	4b15      	ldr	r3, [pc, #84]	@ (800df30 <pbuf_copy+0x188>)
 800dedc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800dee0:	4919      	ldr	r1, [pc, #100]	@ (800df48 <pbuf_copy+0x1a0>)
 800dee2:	4815      	ldr	r0, [pc, #84]	@ (800df38 <pbuf_copy+0x190>)
 800dee4:	f009 fb4e 	bl	8017584 <iprintf>
 800dee8:	f06f 0305 	mvn.w	r3, #5
 800deec:	e01b      	b.n	800df26 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d013      	beq.n	800df1c <pbuf_copy+0x174>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	895a      	ldrh	r2, [r3, #10]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	891b      	ldrh	r3, [r3, #8]
 800defc:	429a      	cmp	r2, r3
 800defe:	d10d      	bne.n	800df1c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d009      	beq.n	800df1c <pbuf_copy+0x174>
 800df08:	4b09      	ldr	r3, [pc, #36]	@ (800df30 <pbuf_copy+0x188>)
 800df0a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800df0e:	490e      	ldr	r1, [pc, #56]	@ (800df48 <pbuf_copy+0x1a0>)
 800df10:	4809      	ldr	r0, [pc, #36]	@ (800df38 <pbuf_copy+0x190>)
 800df12:	f009 fb37 	bl	8017584 <iprintf>
 800df16:	f06f 0305 	mvn.w	r3, #5
 800df1a:	e004      	b.n	800df26 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f47f af61 	bne.w	800dde6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3718      	adds	r7, #24
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	08019654 	.word	0x08019654
 800df34:	080198fc 	.word	0x080198fc
 800df38:	080196b4 	.word	0x080196b4
 800df3c:	0801992c 	.word	0x0801992c
 800df40:	08019944 	.word	0x08019944
 800df44:	08019960 	.word	0x08019960
 800df48:	08019970 	.word	0x08019970

0800df4c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4611      	mov	r1, r2
 800df58:	461a      	mov	r2, r3
 800df5a:	460b      	mov	r3, r1
 800df5c:	80fb      	strh	r3, [r7, #6]
 800df5e:	4613      	mov	r3, r2
 800df60:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d108      	bne.n	800df82 <pbuf_copy_partial+0x36>
 800df70:	4b2b      	ldr	r3, [pc, #172]	@ (800e020 <pbuf_copy_partial+0xd4>)
 800df72:	f240 420a 	movw	r2, #1034	@ 0x40a
 800df76:	492b      	ldr	r1, [pc, #172]	@ (800e024 <pbuf_copy_partial+0xd8>)
 800df78:	482b      	ldr	r0, [pc, #172]	@ (800e028 <pbuf_copy_partial+0xdc>)
 800df7a:	f009 fb03 	bl	8017584 <iprintf>
 800df7e:	2300      	movs	r3, #0
 800df80:	e04a      	b.n	800e018 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d108      	bne.n	800df9a <pbuf_copy_partial+0x4e>
 800df88:	4b25      	ldr	r3, [pc, #148]	@ (800e020 <pbuf_copy_partial+0xd4>)
 800df8a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800df8e:	4927      	ldr	r1, [pc, #156]	@ (800e02c <pbuf_copy_partial+0xe0>)
 800df90:	4825      	ldr	r0, [pc, #148]	@ (800e028 <pbuf_copy_partial+0xdc>)
 800df92:	f009 faf7 	bl	8017584 <iprintf>
 800df96:	2300      	movs	r3, #0
 800df98:	e03e      	b.n	800e018 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	61fb      	str	r3, [r7, #28]
 800df9e:	e034      	b.n	800e00a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dfa0:	88bb      	ldrh	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00a      	beq.n	800dfbc <pbuf_copy_partial+0x70>
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	895b      	ldrh	r3, [r3, #10]
 800dfaa:	88ba      	ldrh	r2, [r7, #4]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d305      	bcc.n	800dfbc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	895b      	ldrh	r3, [r3, #10]
 800dfb4:	88ba      	ldrh	r2, [r7, #4]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	80bb      	strh	r3, [r7, #4]
 800dfba:	e023      	b.n	800e004 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	895a      	ldrh	r2, [r3, #10]
 800dfc0:	88bb      	ldrh	r3, [r7, #4]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dfc6:	8b3a      	ldrh	r2, [r7, #24]
 800dfc8:	88fb      	ldrh	r3, [r7, #6]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d901      	bls.n	800dfd2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dfce:	88fb      	ldrh	r3, [r7, #6]
 800dfd0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dfd2:	8b7b      	ldrh	r3, [r7, #26]
 800dfd4:	68ba      	ldr	r2, [r7, #8]
 800dfd6:	18d0      	adds	r0, r2, r3
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	685a      	ldr	r2, [r3, #4]
 800dfdc:	88bb      	ldrh	r3, [r7, #4]
 800dfde:	4413      	add	r3, r2
 800dfe0:	8b3a      	ldrh	r2, [r7, #24]
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	f009 fccd 	bl	8017982 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dfe8:	8afa      	ldrh	r2, [r7, #22]
 800dfea:	8b3b      	ldrh	r3, [r7, #24]
 800dfec:	4413      	add	r3, r2
 800dfee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dff0:	8b7a      	ldrh	r2, [r7, #26]
 800dff2:	8b3b      	ldrh	r3, [r7, #24]
 800dff4:	4413      	add	r3, r2
 800dff6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dff8:	88fa      	ldrh	r2, [r7, #6]
 800dffa:	8b3b      	ldrh	r3, [r7, #24]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	88fb      	ldrh	r3, [r7, #6]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <pbuf_copy_partial+0xca>
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1c4      	bne.n	800dfa0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e016:	8afb      	ldrh	r3, [r7, #22]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3720      	adds	r7, #32
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	08019654 	.word	0x08019654
 800e024:	0801999c 	.word	0x0801999c
 800e028:	080196b4 	.word	0x080196b4
 800e02c:	080199bc 	.word	0x080199bc

0800e030 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	603a      	str	r2, [r7, #0]
 800e03a:	71fb      	strb	r3, [r7, #7]
 800e03c:	460b      	mov	r3, r1
 800e03e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	8919      	ldrh	r1, [r3, #8]
 800e044:	88ba      	ldrh	r2, [r7, #4]
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7ff faa5 	bl	800d598 <pbuf_alloc>
 800e04e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <pbuf_clone+0x2a>
    return NULL;
 800e056:	2300      	movs	r3, #0
 800e058:	e011      	b.n	800e07e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e05a:	6839      	ldr	r1, [r7, #0]
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff fea3 	bl	800dda8 <pbuf_copy>
 800e062:	4603      	mov	r3, r0
 800e064:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e066:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d006      	beq.n	800e07c <pbuf_clone+0x4c>
 800e06e:	4b06      	ldr	r3, [pc, #24]	@ (800e088 <pbuf_clone+0x58>)
 800e070:	f240 5224 	movw	r2, #1316	@ 0x524
 800e074:	4905      	ldr	r1, [pc, #20]	@ (800e08c <pbuf_clone+0x5c>)
 800e076:	4806      	ldr	r0, [pc, #24]	@ (800e090 <pbuf_clone+0x60>)
 800e078:	f009 fa84 	bl	8017584 <iprintf>
  return q;
 800e07c:	68fb      	ldr	r3, [r7, #12]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	08019654 	.word	0x08019654
 800e08c:	08019ac8 	.word	0x08019ac8
 800e090:	080196b4 	.word	0x080196b4

0800e094 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e098:	f009 f974 	bl	8017384 <rand>
 800e09c:	4603      	mov	r3, r0
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	4b01      	ldr	r3, [pc, #4]	@ (800e0b4 <tcp_init+0x20>)
 800e0ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0b0:	bf00      	nop
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	20000010 	.word	0x20000010

0800e0b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	7d1b      	ldrb	r3, [r3, #20]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d105      	bne.n	800e0d4 <tcp_free+0x1c>
 800e0c8:	4b06      	ldr	r3, [pc, #24]	@ (800e0e4 <tcp_free+0x2c>)
 800e0ca:	22d4      	movs	r2, #212	@ 0xd4
 800e0cc:	4906      	ldr	r1, [pc, #24]	@ (800e0e8 <tcp_free+0x30>)
 800e0ce:	4807      	ldr	r0, [pc, #28]	@ (800e0ec <tcp_free+0x34>)
 800e0d0:	f009 fa58 	bl	8017584 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e0d4:	6879      	ldr	r1, [r7, #4]
 800e0d6:	2001      	movs	r0, #1
 800e0d8:	f7fe fe9e 	bl	800ce18 <memp_free>
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	08019b54 	.word	0x08019b54
 800e0e8:	08019b84 	.word	0x08019b84
 800e0ec:	08019b98 	.word	0x08019b98

0800e0f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d105      	bne.n	800e10c <tcp_free_listen+0x1c>
 800e100:	4b06      	ldr	r3, [pc, #24]	@ (800e11c <tcp_free_listen+0x2c>)
 800e102:	22df      	movs	r2, #223	@ 0xdf
 800e104:	4906      	ldr	r1, [pc, #24]	@ (800e120 <tcp_free_listen+0x30>)
 800e106:	4807      	ldr	r0, [pc, #28]	@ (800e124 <tcp_free_listen+0x34>)
 800e108:	f009 fa3c 	bl	8017584 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e10c:	6879      	ldr	r1, [r7, #4]
 800e10e:	2002      	movs	r0, #2
 800e110:	f7fe fe82 	bl	800ce18 <memp_free>
}
 800e114:	bf00      	nop
 800e116:	3708      	adds	r7, #8
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}
 800e11c:	08019b54 	.word	0x08019b54
 800e120:	08019bc0 	.word	0x08019bc0
 800e124:	08019b98 	.word	0x08019b98

0800e128 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e12c:	f001 f8a8 	bl	800f280 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e130:	4b07      	ldr	r3, [pc, #28]	@ (800e150 <tcp_tmr+0x28>)
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	4b05      	ldr	r3, [pc, #20]	@ (800e150 <tcp_tmr+0x28>)
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	4b04      	ldr	r3, [pc, #16]	@ (800e150 <tcp_tmr+0x28>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 0301 	and.w	r3, r3, #1
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e148:	f000 fd58 	bl	800ebfc <tcp_slowtmr>
  }
}
 800e14c:	bf00      	nop
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	2000df69 	.word	0x2000df69

0800e154 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d105      	bne.n	800e170 <tcp_remove_listener+0x1c>
 800e164:	4b0d      	ldr	r3, [pc, #52]	@ (800e19c <tcp_remove_listener+0x48>)
 800e166:	22ff      	movs	r2, #255	@ 0xff
 800e168:	490d      	ldr	r1, [pc, #52]	@ (800e1a0 <tcp_remove_listener+0x4c>)
 800e16a:	480e      	ldr	r0, [pc, #56]	@ (800e1a4 <tcp_remove_listener+0x50>)
 800e16c:	f009 fa0a 	bl	8017584 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	60fb      	str	r3, [r7, #12]
 800e174:	e00a      	b.n	800e18c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d102      	bne.n	800e186 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1f1      	bne.n	800e176 <tcp_remove_listener+0x22>
    }
  }
}
 800e192:	bf00      	nop
 800e194:	bf00      	nop
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	08019b54 	.word	0x08019b54
 800e1a0:	08019bdc 	.word	0x08019bdc
 800e1a4:	08019b98 	.word	0x08019b98

0800e1a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d106      	bne.n	800e1c4 <tcp_listen_closed+0x1c>
 800e1b6:	4b14      	ldr	r3, [pc, #80]	@ (800e208 <tcp_listen_closed+0x60>)
 800e1b8:	f240 1211 	movw	r2, #273	@ 0x111
 800e1bc:	4913      	ldr	r1, [pc, #76]	@ (800e20c <tcp_listen_closed+0x64>)
 800e1be:	4814      	ldr	r0, [pc, #80]	@ (800e210 <tcp_listen_closed+0x68>)
 800e1c0:	f009 f9e0 	bl	8017584 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d006      	beq.n	800e1da <tcp_listen_closed+0x32>
 800e1cc:	4b0e      	ldr	r3, [pc, #56]	@ (800e208 <tcp_listen_closed+0x60>)
 800e1ce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e1d2:	4910      	ldr	r1, [pc, #64]	@ (800e214 <tcp_listen_closed+0x6c>)
 800e1d4:	480e      	ldr	r0, [pc, #56]	@ (800e210 <tcp_listen_closed+0x68>)
 800e1d6:	f009 f9d5 	bl	8017584 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1da:	2301      	movs	r3, #1
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e00b      	b.n	800e1f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e1e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e218 <tcp_listen_closed+0x70>)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7ff ffb1 	bl	800e154 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	60fb      	str	r3, [r7, #12]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2b03      	cmp	r3, #3
 800e1fc:	d9f0      	bls.n	800e1e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e1fe:	bf00      	nop
 800e200:	bf00      	nop
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	08019b54 	.word	0x08019b54
 800e20c:	08019c04 	.word	0x08019c04
 800e210:	08019b98 	.word	0x08019b98
 800e214:	08019c10 	.word	0x08019c10
 800e218:	0801bb90 	.word	0x0801bb90

0800e21c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e21c:	b5b0      	push	{r4, r5, r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af04      	add	r7, sp, #16
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <tcp_close_shutdown+0x20>
 800e22e:	4b63      	ldr	r3, [pc, #396]	@ (800e3bc <tcp_close_shutdown+0x1a0>)
 800e230:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e234:	4962      	ldr	r1, [pc, #392]	@ (800e3c0 <tcp_close_shutdown+0x1a4>)
 800e236:	4863      	ldr	r0, [pc, #396]	@ (800e3c4 <tcp_close_shutdown+0x1a8>)
 800e238:	f009 f9a4 	bl	8017584 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e23c:	78fb      	ldrb	r3, [r7, #3]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d066      	beq.n	800e310 <tcp_close_shutdown+0xf4>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	2b04      	cmp	r3, #4
 800e248:	d003      	beq.n	800e252 <tcp_close_shutdown+0x36>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	7d1b      	ldrb	r3, [r3, #20]
 800e24e:	2b07      	cmp	r3, #7
 800e250:	d15e      	bne.n	800e310 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e256:	2b00      	cmp	r3, #0
 800e258:	d104      	bne.n	800e264 <tcp_close_shutdown+0x48>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e25e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e262:	d055      	beq.n	800e310 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	8b5b      	ldrh	r3, [r3, #26]
 800e268:	f003 0310 	and.w	r3, r3, #16
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d106      	bne.n	800e27e <tcp_close_shutdown+0x62>
 800e270:	4b52      	ldr	r3, [pc, #328]	@ (800e3bc <tcp_close_shutdown+0x1a0>)
 800e272:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e276:	4954      	ldr	r1, [pc, #336]	@ (800e3c8 <tcp_close_shutdown+0x1ac>)
 800e278:	4852      	ldr	r0, [pc, #328]	@ (800e3c4 <tcp_close_shutdown+0x1a8>)
 800e27a:	f009 f983 	bl	8017584 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e286:	687d      	ldr	r5, [r7, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	3304      	adds	r3, #4
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	8ad2      	ldrh	r2, [r2, #22]
 800e290:	6879      	ldr	r1, [r7, #4]
 800e292:	8b09      	ldrh	r1, [r1, #24]
 800e294:	9102      	str	r1, [sp, #8]
 800e296:	9201      	str	r2, [sp, #4]
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	462b      	mov	r3, r5
 800e29c:	4622      	mov	r2, r4
 800e29e:	4601      	mov	r1, r0
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f005 fdb7 	bl	8013e14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f001 fb9a 	bl	800f9e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2ac:	4b47      	ldr	r3, [pc, #284]	@ (800e3cc <tcp_close_shutdown+0x1b0>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d105      	bne.n	800e2c2 <tcp_close_shutdown+0xa6>
 800e2b6:	4b45      	ldr	r3, [pc, #276]	@ (800e3cc <tcp_close_shutdown+0x1b0>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	4a43      	ldr	r2, [pc, #268]	@ (800e3cc <tcp_close_shutdown+0x1b0>)
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	e013      	b.n	800e2ea <tcp_close_shutdown+0xce>
 800e2c2:	4b42      	ldr	r3, [pc, #264]	@ (800e3cc <tcp_close_shutdown+0x1b0>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	60fb      	str	r3, [r7, #12]
 800e2c8:	e00c      	b.n	800e2e4 <tcp_close_shutdown+0xc8>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d104      	bne.n	800e2de <tcp_close_shutdown+0xc2>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	68da      	ldr	r2, [r3, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	60da      	str	r2, [r3, #12]
 800e2dc:	e005      	b.n	800e2ea <tcp_close_shutdown+0xce>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1ef      	bne.n	800e2ca <tcp_close_shutdown+0xae>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	60da      	str	r2, [r3, #12]
 800e2f0:	4b37      	ldr	r3, [pc, #220]	@ (800e3d0 <tcp_close_shutdown+0x1b4>)
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e2f6:	4b37      	ldr	r3, [pc, #220]	@ (800e3d4 <tcp_close_shutdown+0x1b8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d102      	bne.n	800e306 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e300:	f004 f82e 	bl	8012360 <tcp_trigger_input_pcb_close>
 800e304:	e002      	b.n	800e30c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff fed6 	bl	800e0b8 <tcp_free>
      }
      return ERR_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	e050      	b.n	800e3b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	7d1b      	ldrb	r3, [r3, #20]
 800e314:	2b02      	cmp	r3, #2
 800e316:	d03b      	beq.n	800e390 <tcp_close_shutdown+0x174>
 800e318:	2b02      	cmp	r3, #2
 800e31a:	dc44      	bgt.n	800e3a6 <tcp_close_shutdown+0x18a>
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d002      	beq.n	800e326 <tcp_close_shutdown+0x10a>
 800e320:	2b01      	cmp	r3, #1
 800e322:	d02a      	beq.n	800e37a <tcp_close_shutdown+0x15e>
 800e324:	e03f      	b.n	800e3a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	8adb      	ldrh	r3, [r3, #22]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d021      	beq.n	800e372 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e32e:	4b2a      	ldr	r3, [pc, #168]	@ (800e3d8 <tcp_close_shutdown+0x1bc>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	429a      	cmp	r2, r3
 800e336:	d105      	bne.n	800e344 <tcp_close_shutdown+0x128>
 800e338:	4b27      	ldr	r3, [pc, #156]	@ (800e3d8 <tcp_close_shutdown+0x1bc>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	4a26      	ldr	r2, [pc, #152]	@ (800e3d8 <tcp_close_shutdown+0x1bc>)
 800e340:	6013      	str	r3, [r2, #0]
 800e342:	e013      	b.n	800e36c <tcp_close_shutdown+0x150>
 800e344:	4b24      	ldr	r3, [pc, #144]	@ (800e3d8 <tcp_close_shutdown+0x1bc>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	60bb      	str	r3, [r7, #8]
 800e34a:	e00c      	b.n	800e366 <tcp_close_shutdown+0x14a>
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	429a      	cmp	r2, r3
 800e354:	d104      	bne.n	800e360 <tcp_close_shutdown+0x144>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	60da      	str	r2, [r3, #12]
 800e35e:	e005      	b.n	800e36c <tcp_close_shutdown+0x150>
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	60bb      	str	r3, [r7, #8]
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1ef      	bne.n	800e34c <tcp_close_shutdown+0x130>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff fea0 	bl	800e0b8 <tcp_free>
      break;
 800e378:	e01a      	b.n	800e3b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff ff14 	bl	800e1a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e380:	6879      	ldr	r1, [r7, #4]
 800e382:	4816      	ldr	r0, [pc, #88]	@ (800e3dc <tcp_close_shutdown+0x1c0>)
 800e384:	f001 fb7c 	bl	800fa80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff feb1 	bl	800e0f0 <tcp_free_listen>
      break;
 800e38e:	e00f      	b.n	800e3b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e390:	6879      	ldr	r1, [r7, #4]
 800e392:	480e      	ldr	r0, [pc, #56]	@ (800e3cc <tcp_close_shutdown+0x1b0>)
 800e394:	f001 fb74 	bl	800fa80 <tcp_pcb_remove>
 800e398:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d0 <tcp_close_shutdown+0x1b4>)
 800e39a:	2201      	movs	r2, #1
 800e39c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff fe8a 	bl	800e0b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e3a4:	e004      	b.n	800e3b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f81a 	bl	800e3e0 <tcp_close_shutdown_fin>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	e000      	b.n	800e3b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08019b54 	.word	0x08019b54
 800e3c0:	08019c28 	.word	0x08019c28
 800e3c4:	08019b98 	.word	0x08019b98
 800e3c8:	08019c48 	.word	0x08019c48
 800e3cc:	2000df60 	.word	0x2000df60
 800e3d0:	2000df68 	.word	0x2000df68
 800e3d4:	2000dfa0 	.word	0x2000dfa0
 800e3d8:	2000df58 	.word	0x2000df58
 800e3dc:	2000df5c 	.word	0x2000df5c

0800e3e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d106      	bne.n	800e3fc <tcp_close_shutdown_fin+0x1c>
 800e3ee:	4b2e      	ldr	r3, [pc, #184]	@ (800e4a8 <tcp_close_shutdown_fin+0xc8>)
 800e3f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e3f4:	492d      	ldr	r1, [pc, #180]	@ (800e4ac <tcp_close_shutdown_fin+0xcc>)
 800e3f6:	482e      	ldr	r0, [pc, #184]	@ (800e4b0 <tcp_close_shutdown_fin+0xd0>)
 800e3f8:	f009 f8c4 	bl	8017584 <iprintf>

  switch (pcb->state) {
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	7d1b      	ldrb	r3, [r3, #20]
 800e400:	2b07      	cmp	r3, #7
 800e402:	d020      	beq.n	800e446 <tcp_close_shutdown_fin+0x66>
 800e404:	2b07      	cmp	r3, #7
 800e406:	dc2b      	bgt.n	800e460 <tcp_close_shutdown_fin+0x80>
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d002      	beq.n	800e412 <tcp_close_shutdown_fin+0x32>
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	d00d      	beq.n	800e42c <tcp_close_shutdown_fin+0x4c>
 800e410:	e026      	b.n	800e460 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f004 fe0c 	bl	8013030 <tcp_send_fin>
 800e418:	4603      	mov	r3, r0
 800e41a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d11f      	bne.n	800e464 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2205      	movs	r2, #5
 800e428:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e42a:	e01b      	b.n	800e464 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f004 fdff 	bl	8013030 <tcp_send_fin>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d114      	bne.n	800e468 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e444:	e010      	b.n	800e468 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f004 fdf2 	bl	8013030 <tcp_send_fin>
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d109      	bne.n	800e46c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2209      	movs	r2, #9
 800e45c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e45e:	e005      	b.n	800e46c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	e01c      	b.n	800e49e <tcp_close_shutdown_fin+0xbe>
      break;
 800e464:	bf00      	nop
 800e466:	e002      	b.n	800e46e <tcp_close_shutdown_fin+0x8e>
      break;
 800e468:	bf00      	nop
 800e46a:	e000      	b.n	800e46e <tcp_close_shutdown_fin+0x8e>
      break;
 800e46c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d103      	bne.n	800e47e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f004 ff18 	bl	80132ac <tcp_output>
 800e47c:	e00d      	b.n	800e49a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e486:	d108      	bne.n	800e49a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8b5b      	ldrh	r3, [r3, #26]
 800e48c:	f043 0308 	orr.w	r3, r3, #8
 800e490:	b29a      	uxth	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e496:	2300      	movs	r3, #0
 800e498:	e001      	b.n	800e49e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	08019b54 	.word	0x08019b54
 800e4ac:	08019c04 	.word	0x08019c04
 800e4b0:	08019b98 	.word	0x08019b98

0800e4b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b082      	sub	sp, #8
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d109      	bne.n	800e4d6 <tcp_close+0x22>
 800e4c2:	4b0f      	ldr	r3, [pc, #60]	@ (800e500 <tcp_close+0x4c>)
 800e4c4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e4c8:	490e      	ldr	r1, [pc, #56]	@ (800e504 <tcp_close+0x50>)
 800e4ca:	480f      	ldr	r0, [pc, #60]	@ (800e508 <tcp_close+0x54>)
 800e4cc:	f009 f85a 	bl	8017584 <iprintf>
 800e4d0:	f06f 030f 	mvn.w	r3, #15
 800e4d4:	e00f      	b.n	800e4f6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	7d1b      	ldrb	r3, [r3, #20]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d006      	beq.n	800e4ec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8b5b      	ldrh	r3, [r3, #26]
 800e4e2:	f043 0310 	orr.w	r3, r3, #16
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fe94 	bl	800e21c <tcp_close_shutdown>
 800e4f4:	4603      	mov	r3, r0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	08019b54 	.word	0x08019b54
 800e504:	08019c64 	.word	0x08019c64
 800e508:	08019b98 	.word	0x08019b98

0800e50c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d109      	bne.n	800e532 <tcp_shutdown+0x26>
 800e51e:	4b26      	ldr	r3, [pc, #152]	@ (800e5b8 <tcp_shutdown+0xac>)
 800e520:	f240 2207 	movw	r2, #519	@ 0x207
 800e524:	4925      	ldr	r1, [pc, #148]	@ (800e5bc <tcp_shutdown+0xb0>)
 800e526:	4826      	ldr	r0, [pc, #152]	@ (800e5c0 <tcp_shutdown+0xb4>)
 800e528:	f009 f82c 	bl	8017584 <iprintf>
 800e52c:	f06f 030f 	mvn.w	r3, #15
 800e530:	e03d      	b.n	800e5ae <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	7d1b      	ldrb	r3, [r3, #20]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d102      	bne.n	800e540 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e53a:	f06f 030a 	mvn.w	r3, #10
 800e53e:	e036      	b.n	800e5ae <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d01b      	beq.n	800e57e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8b5b      	ldrh	r3, [r3, #26]
 800e54a:	f043 0310 	orr.w	r3, r3, #16
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d005      	beq.n	800e566 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e55a:	2101      	movs	r1, #1
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7ff fe5d 	bl	800e21c <tcp_close_shutdown>
 800e562:	4603      	mov	r3, r0
 800e564:	e023      	b.n	800e5ae <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d007      	beq.n	800e57e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e572:	4618      	mov	r0, r3
 800e574:	f7ff faf4 	bl	800db60 <pbuf_free>
      pcb->refused_data = NULL;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2200      	movs	r2, #0
 800e57c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d013      	beq.n	800e5ac <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	2b04      	cmp	r3, #4
 800e58a:	dc02      	bgt.n	800e592 <tcp_shutdown+0x86>
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	da02      	bge.n	800e596 <tcp_shutdown+0x8a>
 800e590:	e009      	b.n	800e5a6 <tcp_shutdown+0x9a>
 800e592:	2b07      	cmp	r3, #7
 800e594:	d107      	bne.n	800e5a6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff fe3d 	bl	800e21c <tcp_close_shutdown>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	e003      	b.n	800e5ae <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e5a6:	f06f 030a 	mvn.w	r3, #10
 800e5aa:	e000      	b.n	800e5ae <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e5ac:	2300      	movs	r3, #0
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	08019b54 	.word	0x08019b54
 800e5bc:	08019c7c 	.word	0x08019c7c
 800e5c0:	08019b98 	.word	0x08019b98

0800e5c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b08e      	sub	sp, #56	@ 0x38
 800e5c8:	af04      	add	r7, sp, #16
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d107      	bne.n	800e5e4 <tcp_abandon+0x20>
 800e5d4:	4b52      	ldr	r3, [pc, #328]	@ (800e720 <tcp_abandon+0x15c>)
 800e5d6:	f240 223d 	movw	r2, #573	@ 0x23d
 800e5da:	4952      	ldr	r1, [pc, #328]	@ (800e724 <tcp_abandon+0x160>)
 800e5dc:	4852      	ldr	r0, [pc, #328]	@ (800e728 <tcp_abandon+0x164>)
 800e5de:	f008 ffd1 	bl	8017584 <iprintf>
 800e5e2:	e099      	b.n	800e718 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d106      	bne.n	800e5fa <tcp_abandon+0x36>
 800e5ec:	4b4c      	ldr	r3, [pc, #304]	@ (800e720 <tcp_abandon+0x15c>)
 800e5ee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e5f2:	494e      	ldr	r1, [pc, #312]	@ (800e72c <tcp_abandon+0x168>)
 800e5f4:	484c      	ldr	r0, [pc, #304]	@ (800e728 <tcp_abandon+0x164>)
 800e5f6:	f008 ffc5 	bl	8017584 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	7d1b      	ldrb	r3, [r3, #20]
 800e5fe:	2b0a      	cmp	r3, #10
 800e600:	d107      	bne.n	800e612 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e602:	6879      	ldr	r1, [r7, #4]
 800e604:	484a      	ldr	r0, [pc, #296]	@ (800e730 <tcp_abandon+0x16c>)
 800e606:	f001 fa3b 	bl	800fa80 <tcp_pcb_remove>
    tcp_free(pcb);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fd54 	bl	800e0b8 <tcp_free>
 800e610:	e082      	b.n	800e718 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e616:	2300      	movs	r3, #0
 800e618:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e61e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e624:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e62c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	7d1b      	ldrb	r3, [r3, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d126      	bne.n	800e68a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	8adb      	ldrh	r3, [r3, #22]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d02e      	beq.n	800e6a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e644:	4b3b      	ldr	r3, [pc, #236]	@ (800e734 <tcp_abandon+0x170>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d105      	bne.n	800e65a <tcp_abandon+0x96>
 800e64e:	4b39      	ldr	r3, [pc, #228]	@ (800e734 <tcp_abandon+0x170>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	4a37      	ldr	r2, [pc, #220]	@ (800e734 <tcp_abandon+0x170>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	e013      	b.n	800e682 <tcp_abandon+0xbe>
 800e65a:	4b36      	ldr	r3, [pc, #216]	@ (800e734 <tcp_abandon+0x170>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	61fb      	str	r3, [r7, #28]
 800e660:	e00c      	b.n	800e67c <tcp_abandon+0xb8>
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d104      	bne.n	800e676 <tcp_abandon+0xb2>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	60da      	str	r2, [r3, #12]
 800e674:	e005      	b.n	800e682 <tcp_abandon+0xbe>
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	61fb      	str	r3, [r7, #28]
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1ef      	bne.n	800e662 <tcp_abandon+0x9e>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	60da      	str	r2, [r3, #12]
 800e688:	e00b      	b.n	800e6a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	8adb      	ldrh	r3, [r3, #22]
 800e692:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e694:	6879      	ldr	r1, [r7, #4]
 800e696:	4828      	ldr	r0, [pc, #160]	@ (800e738 <tcp_abandon+0x174>)
 800e698:	f001 f9f2 	bl	800fa80 <tcp_pcb_remove>
 800e69c:	4b27      	ldr	r3, [pc, #156]	@ (800e73c <tcp_abandon+0x178>)
 800e69e:	2201      	movs	r2, #1
 800e6a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f000 fec6 	bl	800f440 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d004      	beq.n	800e6c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f000 febd 	bl	800f440 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d004      	beq.n	800e6d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 feb4 	bl	800f440 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00e      	beq.n	800e6fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3304      	adds	r3, #4
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	8b12      	ldrh	r2, [r2, #24]
 800e6e8:	9202      	str	r2, [sp, #8]
 800e6ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e6ec:	9201      	str	r2, [sp, #4]
 800e6ee:	9300      	str	r3, [sp, #0]
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	69b9      	ldr	r1, [r7, #24]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f005 fb8c 	bl	8013e14 <tcp_rst>
    }
    last_state = pcb->state;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7d1b      	ldrb	r3, [r3, #20]
 800e700:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff fcd8 	bl	800e0b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d004      	beq.n	800e718 <tcp_abandon+0x154>
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f06f 010c 	mvn.w	r1, #12
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	4798      	blx	r3
  }
}
 800e718:	3728      	adds	r7, #40	@ 0x28
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	08019b54 	.word	0x08019b54
 800e724:	08019c98 	.word	0x08019c98
 800e728:	08019b98 	.word	0x08019b98
 800e72c:	08019cb4 	.word	0x08019cb4
 800e730:	2000df64 	.word	0x2000df64
 800e734:	2000df58 	.word	0x2000df58
 800e738:	2000df60 	.word	0x2000df60
 800e73c:	2000df68 	.word	0x2000df68

0800e740 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e748:	2101      	movs	r1, #1
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff ff3a 	bl	800e5c4 <tcp_abandon>
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	4613      	mov	r3, r2
 800e764:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e766:	2304      	movs	r3, #4
 800e768:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e770:	4b3e      	ldr	r3, [pc, #248]	@ (800e86c <tcp_bind+0x114>)
 800e772:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d109      	bne.n	800e78e <tcp_bind+0x36>
 800e77a:	4b3d      	ldr	r3, [pc, #244]	@ (800e870 <tcp_bind+0x118>)
 800e77c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800e780:	493c      	ldr	r1, [pc, #240]	@ (800e874 <tcp_bind+0x11c>)
 800e782:	483d      	ldr	r0, [pc, #244]	@ (800e878 <tcp_bind+0x120>)
 800e784:	f008 fefe 	bl	8017584 <iprintf>
 800e788:	f06f 030f 	mvn.w	r3, #15
 800e78c:	e06a      	b.n	800e864 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d009      	beq.n	800e7aa <tcp_bind+0x52>
 800e796:	4b36      	ldr	r3, [pc, #216]	@ (800e870 <tcp_bind+0x118>)
 800e798:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800e79c:	4937      	ldr	r1, [pc, #220]	@ (800e87c <tcp_bind+0x124>)
 800e79e:	4836      	ldr	r0, [pc, #216]	@ (800e878 <tcp_bind+0x120>)
 800e7a0:	f008 fef0 	bl	8017584 <iprintf>
 800e7a4:	f06f 0305 	mvn.w	r3, #5
 800e7a8:	e05c      	b.n	800e864 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e7aa:	88fb      	ldrh	r3, [r7, #6]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d109      	bne.n	800e7c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e7b0:	f000 f9de 	bl	800eb70 <tcp_new_port>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e7b8:	88fb      	ldrh	r3, [r7, #6]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d135      	bne.n	800e82a <tcp_bind+0xd2>
      return ERR_BUF;
 800e7be:	f06f 0301 	mvn.w	r3, #1
 800e7c2:	e04f      	b.n	800e864 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	61fb      	str	r3, [r7, #28]
 800e7c8:	e02b      	b.n	800e822 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e7ca:	4a2d      	ldr	r2, [pc, #180]	@ (800e880 <tcp_bind+0x128>)
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	61bb      	str	r3, [r7, #24]
 800e7d6:	e01e      	b.n	800e816 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	8adb      	ldrh	r3, [r3, #22]
 800e7dc:	88fa      	ldrh	r2, [r7, #6]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d116      	bne.n	800e810 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e7e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d010      	beq.n	800e80a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d00c      	beq.n	800e80a <tcp_bind+0xb2>
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d009      	beq.n	800e80a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d005      	beq.n	800e80a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e806:	429a      	cmp	r2, r3
 800e808:	d102      	bne.n	800e810 <tcp_bind+0xb8>
              return ERR_USE;
 800e80a:	f06f 0307 	mvn.w	r3, #7
 800e80e:	e029      	b.n	800e864 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	61bb      	str	r3, [r7, #24]
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1dd      	bne.n	800e7d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e81c:	69fb      	ldr	r3, [r7, #28]
 800e81e:	3301      	adds	r3, #1
 800e820:	61fb      	str	r3, [r7, #28]
 800e822:	69fa      	ldr	r2, [r7, #28]
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	429a      	cmp	r2, r3
 800e828:	dbcf      	blt.n	800e7ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00c      	beq.n	800e84a <tcp_bind+0xf2>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d008      	beq.n	800e84a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <tcp_bind+0xec>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	e000      	b.n	800e846 <tcp_bind+0xee>
 800e844:	2300      	movs	r3, #0
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	88fa      	ldrh	r2, [r7, #6]
 800e84e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e850:	4b0c      	ldr	r3, [pc, #48]	@ (800e884 <tcp_bind+0x12c>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	60da      	str	r2, [r3, #12]
 800e858:	4a0a      	ldr	r2, [pc, #40]	@ (800e884 <tcp_bind+0x12c>)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	f005 fc9b 	bl	8014198 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3720      	adds	r7, #32
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	0801bbb8 	.word	0x0801bbb8
 800e870:	08019b54 	.word	0x08019b54
 800e874:	08019ce8 	.word	0x08019ce8
 800e878:	08019b98 	.word	0x08019b98
 800e87c:	08019d00 	.word	0x08019d00
 800e880:	0801bb90 	.word	0x0801bb90
 800e884:	2000df58 	.word	0x2000df58

0800e888 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	4613      	mov	r3, r2
 800e894:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <tcp_accept_null+0x22>
 800e89c:	4b07      	ldr	r3, [pc, #28]	@ (800e8bc <tcp_accept_null+0x34>)
 800e89e:	f240 320f 	movw	r2, #783	@ 0x30f
 800e8a2:	4907      	ldr	r1, [pc, #28]	@ (800e8c0 <tcp_accept_null+0x38>)
 800e8a4:	4807      	ldr	r0, [pc, #28]	@ (800e8c4 <tcp_accept_null+0x3c>)
 800e8a6:	f008 fe6d 	bl	8017584 <iprintf>

  tcp_abort(pcb);
 800e8aa:	68b8      	ldr	r0, [r7, #8]
 800e8ac:	f7ff ff48 	bl	800e740 <tcp_abort>

  return ERR_ABRT;
 800e8b0:	f06f 030c 	mvn.w	r3, #12
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	08019b54 	.word	0x08019b54
 800e8c0:	08019d28 	.word	0x08019d28
 800e8c4:	08019b98 	.word	0x08019b98

0800e8c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b088      	sub	sp, #32
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	607a      	str	r2, [r7, #4]
 800e8d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d109      	bne.n	800e8f4 <tcp_listen_with_backlog_and_err+0x2c>
 800e8e0:	4b47      	ldr	r3, [pc, #284]	@ (800ea00 <tcp_listen_with_backlog_and_err+0x138>)
 800e8e2:	f240 3259 	movw	r2, #857	@ 0x359
 800e8e6:	4947      	ldr	r1, [pc, #284]	@ (800ea04 <tcp_listen_with_backlog_and_err+0x13c>)
 800e8e8:	4847      	ldr	r0, [pc, #284]	@ (800ea08 <tcp_listen_with_backlog_and_err+0x140>)
 800e8ea:	f008 fe4b 	bl	8017584 <iprintf>
 800e8ee:	23f0      	movs	r3, #240	@ 0xf0
 800e8f0:	76fb      	strb	r3, [r7, #27]
 800e8f2:	e079      	b.n	800e9e8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	7d1b      	ldrb	r3, [r3, #20]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d009      	beq.n	800e910 <tcp_listen_with_backlog_and_err+0x48>
 800e8fc:	4b40      	ldr	r3, [pc, #256]	@ (800ea00 <tcp_listen_with_backlog_and_err+0x138>)
 800e8fe:	f240 325a 	movw	r2, #858	@ 0x35a
 800e902:	4942      	ldr	r1, [pc, #264]	@ (800ea0c <tcp_listen_with_backlog_and_err+0x144>)
 800e904:	4840      	ldr	r0, [pc, #256]	@ (800ea08 <tcp_listen_with_backlog_and_err+0x140>)
 800e906:	f008 fe3d 	bl	8017584 <iprintf>
 800e90a:	23f1      	movs	r3, #241	@ 0xf1
 800e90c:	76fb      	strb	r3, [r7, #27]
 800e90e:	e06b      	b.n	800e9e8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	7d1b      	ldrb	r3, [r3, #20]
 800e914:	2b01      	cmp	r3, #1
 800e916:	d104      	bne.n	800e922 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e91c:	23f7      	movs	r3, #247	@ 0xf7
 800e91e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e920:	e062      	b.n	800e9e8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e922:	2002      	movs	r0, #2
 800e924:	f7fe fa26 	bl	800cd74 <memp_malloc>
 800e928:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e92a:	69fb      	ldr	r3, [r7, #28]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d102      	bne.n	800e936 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e930:	23ff      	movs	r3, #255	@ 0xff
 800e932:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e934:	e058      	b.n	800e9e8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	8ada      	ldrh	r2, [r3, #22]
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2201      	movs	r2, #1
 800e94a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	7d5a      	ldrb	r2, [r3, #21]
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	7a5a      	ldrb	r2, [r3, #9]
 800e958:	69fb      	ldr	r3, [r7, #28]
 800e95a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	2200      	movs	r2, #0
 800e960:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	7ada      	ldrb	r2, [r3, #11]
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	7a9a      	ldrb	r2, [r3, #10]
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	8adb      	ldrh	r3, [r3, #22]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d021      	beq.n	800e9c6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e982:	4b23      	ldr	r3, [pc, #140]	@ (800ea10 <tcp_listen_with_backlog_and_err+0x148>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d105      	bne.n	800e998 <tcp_listen_with_backlog_and_err+0xd0>
 800e98c:	4b20      	ldr	r3, [pc, #128]	@ (800ea10 <tcp_listen_with_backlog_and_err+0x148>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	4a1f      	ldr	r2, [pc, #124]	@ (800ea10 <tcp_listen_with_backlog_and_err+0x148>)
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	e013      	b.n	800e9c0 <tcp_listen_with_backlog_and_err+0xf8>
 800e998:	4b1d      	ldr	r3, [pc, #116]	@ (800ea10 <tcp_listen_with_backlog_and_err+0x148>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	617b      	str	r3, [r7, #20]
 800e99e:	e00c      	b.n	800e9ba <tcp_listen_with_backlog_and_err+0xf2>
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d104      	bne.n	800e9b4 <tcp_listen_with_backlog_and_err+0xec>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	60da      	str	r2, [r3, #12]
 800e9b2:	e005      	b.n	800e9c0 <tcp_listen_with_backlog_and_err+0xf8>
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	617b      	str	r3, [r7, #20]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d1ef      	bne.n	800e9a0 <tcp_listen_with_backlog_and_err+0xd8>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e9c6:	68f8      	ldr	r0, [r7, #12]
 800e9c8:	f7ff fb76 	bl	800e0b8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	4a11      	ldr	r2, [pc, #68]	@ (800ea14 <tcp_listen_with_backlog_and_err+0x14c>)
 800e9d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e9d2:	4b11      	ldr	r3, [pc, #68]	@ (800ea18 <tcp_listen_with_backlog_and_err+0x150>)
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	60da      	str	r2, [r3, #12]
 800e9da:	4a0f      	ldr	r2, [pc, #60]	@ (800ea18 <tcp_listen_with_backlog_and_err+0x150>)
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	f005 fbda 	bl	8014198 <tcp_timer_needed>
  res = ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d002      	beq.n	800e9f4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	7efa      	ldrb	r2, [r7, #27]
 800e9f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3720      	adds	r7, #32
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	08019b54 	.word	0x08019b54
 800ea04:	08019d48 	.word	0x08019d48
 800ea08:	08019b98 	.word	0x08019b98
 800ea0c:	08019d78 	.word	0x08019d78
 800ea10:	2000df58 	.word	0x2000df58
 800ea14:	0800e889 	.word	0x0800e889
 800ea18:	2000df5c 	.word	0x2000df5c

0800ea1c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <tcp_update_rcv_ann_wnd+0x1c>
 800ea2a:	4b25      	ldr	r3, [pc, #148]	@ (800eac0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea2c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ea30:	4924      	ldr	r1, [pc, #144]	@ (800eac4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ea32:	4825      	ldr	r0, [pc, #148]	@ (800eac8 <tcp_update_rcv_ann_wnd+0xac>)
 800ea34:	f008 fda6 	bl	8017584 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ea40:	4413      	add	r3, r2
 800ea42:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ea4c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ea50:	bf28      	it	cs
 800ea52:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ea56:	b292      	uxth	r2, r2
 800ea58:	4413      	add	r3, r2
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	db08      	blt.n	800ea74 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea6e:	68fa      	ldr	r2, [r7, #12]
 800ea70:	1ad3      	subs	r3, r2, r3
 800ea72:	e020      	b.n	800eab6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	dd03      	ble.n	800ea8a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ea88:	e014      	b.n	800eab4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea9c:	d306      	bcc.n	800eaac <tcp_update_rcv_ann_wnd+0x90>
 800ea9e:	4b08      	ldr	r3, [pc, #32]	@ (800eac0 <tcp_update_rcv_ann_wnd+0xa4>)
 800eaa0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800eaa4:	4909      	ldr	r1, [pc, #36]	@ (800eacc <tcp_update_rcv_ann_wnd+0xb0>)
 800eaa6:	4808      	ldr	r0, [pc, #32]	@ (800eac8 <tcp_update_rcv_ann_wnd+0xac>)
 800eaa8:	f008 fd6c 	bl	8017584 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800eab4:	2300      	movs	r3, #0
  }
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	08019b54 	.word	0x08019b54
 800eac4:	08019db0 	.word	0x08019db0
 800eac8:	08019b98 	.word	0x08019b98
 800eacc:	08019dd4 	.word	0x08019dd4

0800ead0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d107      	bne.n	800eaf2 <tcp_recved+0x22>
 800eae2:	4b1f      	ldr	r3, [pc, #124]	@ (800eb60 <tcp_recved+0x90>)
 800eae4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800eae8:	491e      	ldr	r1, [pc, #120]	@ (800eb64 <tcp_recved+0x94>)
 800eaea:	481f      	ldr	r0, [pc, #124]	@ (800eb68 <tcp_recved+0x98>)
 800eaec:	f008 fd4a 	bl	8017584 <iprintf>
 800eaf0:	e032      	b.n	800eb58 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7d1b      	ldrb	r3, [r3, #20]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d106      	bne.n	800eb08 <tcp_recved+0x38>
 800eafa:	4b19      	ldr	r3, [pc, #100]	@ (800eb60 <tcp_recved+0x90>)
 800eafc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800eb00:	491a      	ldr	r1, [pc, #104]	@ (800eb6c <tcp_recved+0x9c>)
 800eb02:	4819      	ldr	r0, [pc, #100]	@ (800eb68 <tcp_recved+0x98>)
 800eb04:	f008 fd3e 	bl	8017584 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eb0c:	887b      	ldrh	r3, [r7, #2]
 800eb0e:	4413      	add	r3, r2
 800eb10:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eb12:	89fb      	ldrh	r3, [r7, #14]
 800eb14:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800eb18:	d804      	bhi.n	800eb24 <tcp_recved+0x54>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb1e:	89fa      	ldrh	r2, [r7, #14]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d204      	bcs.n	800eb2e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800eb2a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800eb2c:	e002      	b.n	800eb34 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	89fa      	ldrh	r2, [r7, #14]
 800eb32:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ff71 	bl	800ea1c <tcp_update_rcv_ann_wnd>
 800eb3a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800eb42:	d309      	bcc.n	800eb58 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	8b5b      	ldrh	r3, [r3, #26]
 800eb48:	f043 0302 	orr.w	r3, r3, #2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f004 fbaa 	bl	80132ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eb58:	3710      	adds	r7, #16
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	08019b54 	.word	0x08019b54
 800eb64:	08019df0 	.word	0x08019df0
 800eb68:	08019b98 	.word	0x08019b98
 800eb6c:	08019e08 	.word	0x08019e08

0800eb70 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb7a:	4b1e      	ldr	r3, [pc, #120]	@ (800ebf4 <tcp_new_port+0x84>)
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	4b1c      	ldr	r3, [pc, #112]	@ (800ebf4 <tcp_new_port+0x84>)
 800eb84:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb86:	4b1b      	ldr	r3, [pc, #108]	@ (800ebf4 <tcp_new_port+0x84>)
 800eb88:	881b      	ldrh	r3, [r3, #0]
 800eb8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d103      	bne.n	800eb9a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eb92:	4b18      	ldr	r3, [pc, #96]	@ (800ebf4 <tcp_new_port+0x84>)
 800eb94:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800eb98:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	71fb      	strb	r3, [r7, #7]
 800eb9e:	e01e      	b.n	800ebde <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	4a15      	ldr	r2, [pc, #84]	@ (800ebf8 <tcp_new_port+0x88>)
 800eba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	e011      	b.n	800ebd2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	8ada      	ldrh	r2, [r3, #22]
 800ebb2:	4b10      	ldr	r3, [pc, #64]	@ (800ebf4 <tcp_new_port+0x84>)
 800ebb4:	881b      	ldrh	r3, [r3, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d108      	bne.n	800ebcc <tcp_new_port+0x5c>
        n++;
 800ebba:	88bb      	ldrh	r3, [r7, #4]
 800ebbc:	3301      	adds	r3, #1
 800ebbe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ebc0:	88bb      	ldrh	r3, [r7, #4]
 800ebc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ebc6:	d3d8      	bcc.n	800eb7a <tcp_new_port+0xa>
          return 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	e00d      	b.n	800ebe8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	603b      	str	r3, [r7, #0]
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1ea      	bne.n	800ebae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ebd8:	79fb      	ldrb	r3, [r7, #7]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	71fb      	strb	r3, [r7, #7]
 800ebde:	79fb      	ldrb	r3, [r7, #7]
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d9dd      	bls.n	800eba0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ebe4:	4b03      	ldr	r3, [pc, #12]	@ (800ebf4 <tcp_new_port+0x84>)
 800ebe6:	881b      	ldrh	r3, [r3, #0]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20000010 	.word	0x20000010
 800ebf8:	0801bb90 	.word	0x0801bb90

0800ebfc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ebfc:	b5b0      	push	{r4, r5, r7, lr}
 800ebfe:	b090      	sub	sp, #64	@ 0x40
 800ec00:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ec08:	4b95      	ldr	r3, [pc, #596]	@ (800ee60 <tcp_slowtmr+0x264>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	4a94      	ldr	r2, [pc, #592]	@ (800ee60 <tcp_slowtmr+0x264>)
 800ec10:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ec12:	4b94      	ldr	r3, [pc, #592]	@ (800ee64 <tcp_slowtmr+0x268>)
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	3301      	adds	r3, #1
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b92      	ldr	r3, [pc, #584]	@ (800ee64 <tcp_slowtmr+0x268>)
 800ec1c:	701a      	strb	r2, [r3, #0]
 800ec1e:	e000      	b.n	800ec22 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800ec20:	bf00      	nop
  prev = NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800ec26:	4b90      	ldr	r3, [pc, #576]	@ (800ee68 <tcp_slowtmr+0x26c>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ec2c:	e29d      	b.n	800f16a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ec2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec30:	7d1b      	ldrb	r3, [r3, #20]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d106      	bne.n	800ec44 <tcp_slowtmr+0x48>
 800ec36:	4b8d      	ldr	r3, [pc, #564]	@ (800ee6c <tcp_slowtmr+0x270>)
 800ec38:	f240 42be 	movw	r2, #1214	@ 0x4be
 800ec3c:	498c      	ldr	r1, [pc, #560]	@ (800ee70 <tcp_slowtmr+0x274>)
 800ec3e:	488d      	ldr	r0, [pc, #564]	@ (800ee74 <tcp_slowtmr+0x278>)
 800ec40:	f008 fca0 	bl	8017584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec46:	7d1b      	ldrb	r3, [r3, #20]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d106      	bne.n	800ec5a <tcp_slowtmr+0x5e>
 800ec4c:	4b87      	ldr	r3, [pc, #540]	@ (800ee6c <tcp_slowtmr+0x270>)
 800ec4e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800ec52:	4989      	ldr	r1, [pc, #548]	@ (800ee78 <tcp_slowtmr+0x27c>)
 800ec54:	4887      	ldr	r0, [pc, #540]	@ (800ee74 <tcp_slowtmr+0x278>)
 800ec56:	f008 fc95 	bl	8017584 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ec5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5c:	7d1b      	ldrb	r3, [r3, #20]
 800ec5e:	2b0a      	cmp	r3, #10
 800ec60:	d106      	bne.n	800ec70 <tcp_slowtmr+0x74>
 800ec62:	4b82      	ldr	r3, [pc, #520]	@ (800ee6c <tcp_slowtmr+0x270>)
 800ec64:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800ec68:	4984      	ldr	r1, [pc, #528]	@ (800ee7c <tcp_slowtmr+0x280>)
 800ec6a:	4882      	ldr	r0, [pc, #520]	@ (800ee74 <tcp_slowtmr+0x278>)
 800ec6c:	f008 fc8a 	bl	8017584 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ec70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec72:	7f9a      	ldrb	r2, [r3, #30]
 800ec74:	4b7b      	ldr	r3, [pc, #492]	@ (800ee64 <tcp_slowtmr+0x268>)
 800ec76:	781b      	ldrb	r3, [r3, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d105      	bne.n	800ec88 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ec7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ec80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ec86:	e270      	b.n	800f16a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800ec88:	4b76      	ldr	r3, [pc, #472]	@ (800ee64 <tcp_slowtmr+0x268>)
 800ec8a:	781a      	ldrb	r2, [r3, #0]
 800ec8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ec9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9e:	7d1b      	ldrb	r3, [r3, #20]
 800eca0:	2b02      	cmp	r3, #2
 800eca2:	d10a      	bne.n	800ecba <tcp_slowtmr+0xbe>
 800eca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ecaa:	2b05      	cmp	r3, #5
 800ecac:	d905      	bls.n	800ecba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ecae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecb8:	e11e      	b.n	800eef8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ecba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ecc0:	2b0b      	cmp	r3, #11
 800ecc2:	d905      	bls.n	800ecd0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ecc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecc8:	3301      	adds	r3, #1
 800ecca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecce:	e113      	b.n	800eef8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ecd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d075      	beq.n	800edc6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ecda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d006      	beq.n	800ecf0 <tcp_slowtmr+0xf4>
 800ece2:	4b62      	ldr	r3, [pc, #392]	@ (800ee6c <tcp_slowtmr+0x270>)
 800ece4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ece8:	4965      	ldr	r1, [pc, #404]	@ (800ee80 <tcp_slowtmr+0x284>)
 800ecea:	4862      	ldr	r0, [pc, #392]	@ (800ee74 <tcp_slowtmr+0x278>)
 800ecec:	f008 fc4a 	bl	8017584 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ecf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <tcp_slowtmr+0x10a>
 800ecf8:	4b5c      	ldr	r3, [pc, #368]	@ (800ee6c <tcp_slowtmr+0x270>)
 800ecfa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ecfe:	4961      	ldr	r1, [pc, #388]	@ (800ee84 <tcp_slowtmr+0x288>)
 800ed00:	485c      	ldr	r0, [pc, #368]	@ (800ee74 <tcp_slowtmr+0x278>)
 800ed02:	f008 fc3f 	bl	8017584 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ed0c:	2b0b      	cmp	r3, #11
 800ed0e:	d905      	bls.n	800ed1c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ed10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed14:	3301      	adds	r3, #1
 800ed16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed1a:	e0ed      	b.n	800eef8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ed1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ed22:	3b01      	subs	r3, #1
 800ed24:	4a58      	ldr	r2, [pc, #352]	@ (800ee88 <tcp_slowtmr+0x28c>)
 800ed26:	5cd3      	ldrb	r3, [r2, r3]
 800ed28:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ed2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ed30:	7c7a      	ldrb	r2, [r7, #17]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d907      	bls.n	800ed46 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800ed36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed38:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	b2da      	uxtb	r2, r3
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800ed46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ed4c:	7c7a      	ldrb	r2, [r7, #17]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	f200 80d2 	bhi.w	800eef8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ed54:	2301      	movs	r3, #1
 800ed56:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800ed58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d108      	bne.n	800ed74 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ed62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed64:	f005 f94a 	bl	8013ffc <tcp_zero_window_probe>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d014      	beq.n	800ed98 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ed6e:	2300      	movs	r3, #0
 800ed70:	623b      	str	r3, [r7, #32]
 800ed72:	e011      	b.n	800ed98 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ed74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed7e:	f004 f80f 	bl	8012da0 <tcp_split_unsent_seg>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d107      	bne.n	800ed98 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ed88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed8a:	f004 fa8f 	bl	80132ac <tcp_output>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 80ac 	beq.w	800eef8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800eda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edaa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800edae:	2b06      	cmp	r3, #6
 800edb0:	f200 80a2 	bhi.w	800eef8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800edb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800edba:	3301      	adds	r3, #1
 800edbc:	b2da      	uxtb	r2, r3
 800edbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800edc4:	e098      	b.n	800eef8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800edc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800edcc:	2b00      	cmp	r3, #0
 800edce:	db0f      	blt.n	800edf0 <tcp_slowtmr+0x1f4>
 800edd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edd2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800edd6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800edda:	4293      	cmp	r3, r2
 800eddc:	d008      	beq.n	800edf0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800edde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	3301      	adds	r3, #1
 800ede8:	b29b      	uxth	r3, r3
 800edea:	b21a      	sxth	r2, r3
 800edec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edee:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800edf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800edf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edf8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800edfc:	429a      	cmp	r2, r3
 800edfe:	db7b      	blt.n	800eef8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ee00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee02:	f004 fd47 	bl	8013894 <tcp_rexmit_rto_prepare>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d007      	beq.n	800ee1c <tcp_slowtmr+0x220>
 800ee0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d171      	bne.n	800eef8 <tcp_slowtmr+0x2fc>
 800ee14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d06d      	beq.n	800eef8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ee1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	d03a      	beq.n	800ee9a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ee24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee2a:	2b0c      	cmp	r3, #12
 800ee2c:	bf28      	it	cs
 800ee2e:	230c      	movcs	r3, #12
 800ee30:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ee32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ee38:	10db      	asrs	r3, r3, #3
 800ee3a:	b21b      	sxth	r3, r3
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ee44:	4413      	add	r3, r2
 800ee46:	7efa      	ldrb	r2, [r7, #27]
 800ee48:	4910      	ldr	r1, [pc, #64]	@ (800ee8c <tcp_slowtmr+0x290>)
 800ee4a:	5c8a      	ldrb	r2, [r1, r2]
 800ee4c:	4093      	lsls	r3, r2
 800ee4e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800ee56:	4293      	cmp	r3, r2
 800ee58:	dc1a      	bgt.n	800ee90 <tcp_slowtmr+0x294>
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	b21a      	sxth	r2, r3
 800ee5e:	e019      	b.n	800ee94 <tcp_slowtmr+0x298>
 800ee60:	2000df54 	.word	0x2000df54
 800ee64:	2000df6a 	.word	0x2000df6a
 800ee68:	2000df60 	.word	0x2000df60
 800ee6c:	08019b54 	.word	0x08019b54
 800ee70:	08019e98 	.word	0x08019e98
 800ee74:	08019b98 	.word	0x08019b98
 800ee78:	08019ec4 	.word	0x08019ec4
 800ee7c:	08019ef0 	.word	0x08019ef0
 800ee80:	08019f20 	.word	0x08019f20
 800ee84:	08019f54 	.word	0x08019f54
 800ee88:	0801bb88 	.word	0x0801bb88
 800ee8c:	0801bb78 	.word	0x0801bb78
 800ee90:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ee94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ee9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eeac:	4293      	cmp	r3, r2
 800eeae:	bf28      	it	cs
 800eeb0:	4613      	movcs	r3, r2
 800eeb2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eeb4:	8a7b      	ldrh	r3, [r7, #18]
 800eeb6:	085b      	lsrs	r3, r3, #1
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eebc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eec8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eeca:	005b      	lsls	r3, r3, #1
 800eecc:	b29b      	uxth	r3, r3
 800eece:	429a      	cmp	r2, r3
 800eed0:	d206      	bcs.n	800eee0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eedc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800eee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800eee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800eeea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeec:	2200      	movs	r2, #0
 800eeee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800eef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eef4:	f004 fd3e 	bl	8013974 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800eef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b06      	cmp	r3, #6
 800eefe:	d111      	bne.n	800ef24 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ef00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef02:	8b5b      	ldrh	r3, [r3, #26]
 800ef04:	f003 0310 	and.w	r3, r3, #16
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00b      	beq.n	800ef24 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef0c:	4b9c      	ldr	r3, [pc, #624]	@ (800f180 <tcp_slowtmr+0x584>)
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef12:	6a1b      	ldr	r3, [r3, #32]
 800ef14:	1ad3      	subs	r3, r2, r3
 800ef16:	2b28      	cmp	r3, #40	@ 0x28
 800ef18:	d904      	bls.n	800ef24 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ef1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef1e:	3301      	adds	r3, #1
 800ef20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ef24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef26:	7a5b      	ldrb	r3, [r3, #9]
 800ef28:	f003 0308 	and.w	r3, r3, #8
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d04a      	beq.n	800efc6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ef30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ef34:	2b04      	cmp	r3, #4
 800ef36:	d003      	beq.n	800ef40 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ef38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ef3c:	2b07      	cmp	r3, #7
 800ef3e:	d142      	bne.n	800efc6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef40:	4b8f      	ldr	r3, [pc, #572]	@ (800f180 <tcp_slowtmr+0x584>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef46:	6a1b      	ldr	r3, [r3, #32]
 800ef48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ef4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef4c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ef50:	4b8c      	ldr	r3, [pc, #560]	@ (800f184 <tcp_slowtmr+0x588>)
 800ef52:	440b      	add	r3, r1
 800ef54:	498c      	ldr	r1, [pc, #560]	@ (800f188 <tcp_slowtmr+0x58c>)
 800ef56:	fba1 1303 	umull	r1, r3, r1, r3
 800ef5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d90a      	bls.n	800ef76 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800ef60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef64:	3301      	adds	r3, #1
 800ef66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ef6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ef6e:	3301      	adds	r3, #1
 800ef70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ef74:	e027      	b.n	800efc6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef76:	4b82      	ldr	r3, [pc, #520]	@ (800f180 <tcp_slowtmr+0x584>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ef80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef82:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ef86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef88:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	4b7f      	ldr	r3, [pc, #508]	@ (800f18c <tcp_slowtmr+0x590>)
 800ef90:	fb00 f303 	mul.w	r3, r0, r3
 800ef94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ef96:	497c      	ldr	r1, [pc, #496]	@ (800f188 <tcp_slowtmr+0x58c>)
 800ef98:	fba1 1303 	umull	r1, r3, r1, r3
 800ef9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d911      	bls.n	800efc6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800efa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efa4:	f004 ffea 	bl	8013f7c <tcp_keepalive>
 800efa8:	4603      	mov	r3, r0
 800efaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800efae:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d107      	bne.n	800efc6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800efb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800efbc:	3301      	adds	r3, #1
 800efbe:	b2da      	uxtb	r2, r3
 800efc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800efc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d011      	beq.n	800eff2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800efce:	4b6c      	ldr	r3, [pc, #432]	@ (800f180 <tcp_slowtmr+0x584>)
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	1ad2      	subs	r2, r2, r3
 800efd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efda:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800efde:	4619      	mov	r1, r3
 800efe0:	460b      	mov	r3, r1
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	440b      	add	r3, r1
 800efe6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800efe8:	429a      	cmp	r2, r3
 800efea:	d302      	bcc.n	800eff2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800efec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800efee:	f000 feab 	bl	800fd48 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800eff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eff4:	7d1b      	ldrb	r3, [r3, #20]
 800eff6:	2b03      	cmp	r3, #3
 800eff8:	d10b      	bne.n	800f012 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800effa:	4b61      	ldr	r3, [pc, #388]	@ (800f180 <tcp_slowtmr+0x584>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f000:	6a1b      	ldr	r3, [r3, #32]
 800f002:	1ad3      	subs	r3, r2, r3
 800f004:	2b28      	cmp	r3, #40	@ 0x28
 800f006:	d904      	bls.n	800f012 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800f008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f00c:	3301      	adds	r3, #1
 800f00e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f014:	7d1b      	ldrb	r3, [r3, #20]
 800f016:	2b09      	cmp	r3, #9
 800f018:	d10b      	bne.n	800f032 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f01a:	4b59      	ldr	r3, [pc, #356]	@ (800f180 <tcp_slowtmr+0x584>)
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f020:	6a1b      	ldr	r3, [r3, #32]
 800f022:	1ad3      	subs	r3, r2, r3
 800f024:	2bf0      	cmp	r3, #240	@ 0xf0
 800f026:	d904      	bls.n	800f032 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f02c:	3301      	adds	r3, #1
 800f02e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f036:	2b00      	cmp	r3, #0
 800f038:	d060      	beq.n	800f0fc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800f03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f040:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f044:	f000 fccc 	bl	800f9e0 <tcp_pcb_purge>
      if (prev != NULL) {
 800f048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d010      	beq.n	800f070 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f04e:	4b50      	ldr	r3, [pc, #320]	@ (800f190 <tcp_slowtmr+0x594>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f054:	429a      	cmp	r2, r3
 800f056:	d106      	bne.n	800f066 <tcp_slowtmr+0x46a>
 800f058:	4b4e      	ldr	r3, [pc, #312]	@ (800f194 <tcp_slowtmr+0x598>)
 800f05a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f05e:	494e      	ldr	r1, [pc, #312]	@ (800f198 <tcp_slowtmr+0x59c>)
 800f060:	484e      	ldr	r0, [pc, #312]	@ (800f19c <tcp_slowtmr+0x5a0>)
 800f062:	f008 fa8f 	bl	8017584 <iprintf>
        prev->next = pcb->next;
 800f066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f06c:	60da      	str	r2, [r3, #12]
 800f06e:	e00f      	b.n	800f090 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f070:	4b47      	ldr	r3, [pc, #284]	@ (800f190 <tcp_slowtmr+0x594>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f076:	429a      	cmp	r2, r3
 800f078:	d006      	beq.n	800f088 <tcp_slowtmr+0x48c>
 800f07a:	4b46      	ldr	r3, [pc, #280]	@ (800f194 <tcp_slowtmr+0x598>)
 800f07c:	f240 5271 	movw	r2, #1393	@ 0x571
 800f080:	4947      	ldr	r1, [pc, #284]	@ (800f1a0 <tcp_slowtmr+0x5a4>)
 800f082:	4846      	ldr	r0, [pc, #280]	@ (800f19c <tcp_slowtmr+0x5a0>)
 800f084:	f008 fa7e 	bl	8017584 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	4a40      	ldr	r2, [pc, #256]	@ (800f190 <tcp_slowtmr+0x594>)
 800f08e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f090:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f094:	2b00      	cmp	r3, #0
 800f096:	d013      	beq.n	800f0c0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f0a0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a4:	3304      	adds	r3, #4
 800f0a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f0a8:	8ad2      	ldrh	r2, [r2, #22]
 800f0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f0ac:	8b09      	ldrh	r1, [r1, #24]
 800f0ae:	9102      	str	r1, [sp, #8]
 800f0b0:	9201      	str	r2, [sp, #4]
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	462b      	mov	r3, r5
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	4601      	mov	r1, r0
 800f0ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f0bc:	f004 feaa 	bl	8013e14 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f0c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c8:	7d1b      	ldrb	r3, [r3, #20]
 800f0ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f0d6:	6838      	ldr	r0, [r7, #0]
 800f0d8:	f7fe ffee 	bl	800e0b8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f0dc:	4b31      	ldr	r3, [pc, #196]	@ (800f1a4 <tcp_slowtmr+0x5a8>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d004      	beq.n	800f0f2 <tcp_slowtmr+0x4f6>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f06f 010c 	mvn.w	r1, #12
 800f0ee:	68b8      	ldr	r0, [r7, #8]
 800f0f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f0f2:	4b2c      	ldr	r3, [pc, #176]	@ (800f1a4 <tcp_slowtmr+0x5a8>)
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d037      	beq.n	800f16a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f0fa:	e592      	b.n	800ec22 <tcp_slowtmr+0x26>
      prev = pcb;
 800f0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f108:	7f1b      	ldrb	r3, [r3, #28]
 800f10a:	3301      	adds	r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f110:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f114:	7f1a      	ldrb	r2, [r3, #28]
 800f116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f118:	7f5b      	ldrb	r3, [r3, #29]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d325      	bcc.n	800f16a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f120:	2200      	movs	r2, #0
 800f122:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f124:	4b1f      	ldr	r3, [pc, #124]	@ (800f1a4 <tcp_slowtmr+0x5a8>)
 800f126:	2200      	movs	r2, #0
 800f128:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f12c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f130:	2b00      	cmp	r3, #0
 800f132:	d00b      	beq.n	800f14c <tcp_slowtmr+0x550>
 800f134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f13a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f13c:	6912      	ldr	r2, [r2, #16]
 800f13e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f140:	4610      	mov	r0, r2
 800f142:	4798      	blx	r3
 800f144:	4603      	mov	r3, r0
 800f146:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f14a:	e002      	b.n	800f152 <tcp_slowtmr+0x556>
 800f14c:	2300      	movs	r3, #0
 800f14e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f152:	4b14      	ldr	r3, [pc, #80]	@ (800f1a4 <tcp_slowtmr+0x5a8>)
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f47f ad62 	bne.w	800ec20 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f15c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f160:	2b00      	cmp	r3, #0
 800f162:	d102      	bne.n	800f16a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f166:	f004 f8a1 	bl	80132ac <tcp_output>
  while (pcb != NULL) {
 800f16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f47f ad5e 	bne.w	800ec2e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f172:	2300      	movs	r3, #0
 800f174:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f176:	4b0c      	ldr	r3, [pc, #48]	@ (800f1a8 <tcp_slowtmr+0x5ac>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f17c:	e069      	b.n	800f252 <tcp_slowtmr+0x656>
 800f17e:	bf00      	nop
 800f180:	2000df54 	.word	0x2000df54
 800f184:	000a4cb8 	.word	0x000a4cb8
 800f188:	10624dd3 	.word	0x10624dd3
 800f18c:	000124f8 	.word	0x000124f8
 800f190:	2000df60 	.word	0x2000df60
 800f194:	08019b54 	.word	0x08019b54
 800f198:	08019f8c 	.word	0x08019f8c
 800f19c:	08019b98 	.word	0x08019b98
 800f1a0:	08019fb8 	.word	0x08019fb8
 800f1a4:	2000df68 	.word	0x2000df68
 800f1a8:	2000df64 	.word	0x2000df64
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ae:	7d1b      	ldrb	r3, [r3, #20]
 800f1b0:	2b0a      	cmp	r3, #10
 800f1b2:	d006      	beq.n	800f1c2 <tcp_slowtmr+0x5c6>
 800f1b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f264 <tcp_slowtmr+0x668>)
 800f1b6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f1ba:	492b      	ldr	r1, [pc, #172]	@ (800f268 <tcp_slowtmr+0x66c>)
 800f1bc:	482b      	ldr	r0, [pc, #172]	@ (800f26c <tcp_slowtmr+0x670>)
 800f1be:	f008 f9e1 	bl	8017584 <iprintf>
    pcb_remove = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f1c8:	4b29      	ldr	r3, [pc, #164]	@ (800f270 <tcp_slowtmr+0x674>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ce:	6a1b      	ldr	r3, [r3, #32]
 800f1d0:	1ad3      	subs	r3, r2, r3
 800f1d2:	2bf0      	cmp	r3, #240	@ 0xf0
 800f1d4:	d904      	bls.n	800f1e0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1da:	3301      	adds	r3, #1
 800f1dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d02f      	beq.n	800f248 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f1e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1ea:	f000 fbf9 	bl	800f9e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d010      	beq.n	800f216 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f1f4:	4b1f      	ldr	r3, [pc, #124]	@ (800f274 <tcp_slowtmr+0x678>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d106      	bne.n	800f20c <tcp_slowtmr+0x610>
 800f1fe:	4b19      	ldr	r3, [pc, #100]	@ (800f264 <tcp_slowtmr+0x668>)
 800f200:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f204:	491c      	ldr	r1, [pc, #112]	@ (800f278 <tcp_slowtmr+0x67c>)
 800f206:	4819      	ldr	r0, [pc, #100]	@ (800f26c <tcp_slowtmr+0x670>)
 800f208:	f008 f9bc 	bl	8017584 <iprintf>
        prev->next = pcb->next;
 800f20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20e:	68da      	ldr	r2, [r3, #12]
 800f210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f212:	60da      	str	r2, [r3, #12]
 800f214:	e00f      	b.n	800f236 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f216:	4b17      	ldr	r3, [pc, #92]	@ (800f274 <tcp_slowtmr+0x678>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d006      	beq.n	800f22e <tcp_slowtmr+0x632>
 800f220:	4b10      	ldr	r3, [pc, #64]	@ (800f264 <tcp_slowtmr+0x668>)
 800f222:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f226:	4915      	ldr	r1, [pc, #84]	@ (800f27c <tcp_slowtmr+0x680>)
 800f228:	4810      	ldr	r0, [pc, #64]	@ (800f26c <tcp_slowtmr+0x670>)
 800f22a:	f008 f9ab 	bl	8017584 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f230:	68db      	ldr	r3, [r3, #12]
 800f232:	4a10      	ldr	r2, [pc, #64]	@ (800f274 <tcp_slowtmr+0x678>)
 800f234:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f238:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f240:	69f8      	ldr	r0, [r7, #28]
 800f242:	f7fe ff39 	bl	800e0b8 <tcp_free>
 800f246:	e004      	b.n	800f252 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f24e:	68db      	ldr	r3, [r3, #12]
 800f250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1a9      	bne.n	800f1ac <tcp_slowtmr+0x5b0>
    }
  }
}
 800f258:	bf00      	nop
 800f25a:	bf00      	nop
 800f25c:	3730      	adds	r7, #48	@ 0x30
 800f25e:	46bd      	mov	sp, r7
 800f260:	bdb0      	pop	{r4, r5, r7, pc}
 800f262:	bf00      	nop
 800f264:	08019b54 	.word	0x08019b54
 800f268:	08019fe4 	.word	0x08019fe4
 800f26c:	08019b98 	.word	0x08019b98
 800f270:	2000df54 	.word	0x2000df54
 800f274:	2000df64 	.word	0x2000df64
 800f278:	0801a014 	.word	0x0801a014
 800f27c:	0801a03c 	.word	0x0801a03c

0800f280 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f286:	4b2d      	ldr	r3, [pc, #180]	@ (800f33c <tcp_fasttmr+0xbc>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	4b2b      	ldr	r3, [pc, #172]	@ (800f33c <tcp_fasttmr+0xbc>)
 800f290:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f292:	4b2b      	ldr	r3, [pc, #172]	@ (800f340 <tcp_fasttmr+0xc0>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f298:	e048      	b.n	800f32c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7f9a      	ldrb	r2, [r3, #30]
 800f29e:	4b27      	ldr	r3, [pc, #156]	@ (800f33c <tcp_fasttmr+0xbc>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d03f      	beq.n	800f326 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f2a6:	4b25      	ldr	r3, [pc, #148]	@ (800f33c <tcp_fasttmr+0xbc>)
 800f2a8:	781a      	ldrb	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	8b5b      	ldrh	r3, [r3, #26]
 800f2b2:	f003 0301 	and.w	r3, r3, #1
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d010      	beq.n	800f2dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	8b5b      	ldrh	r3, [r3, #26]
 800f2be:	f043 0302 	orr.w	r3, r3, #2
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f003 ffef 	bl	80132ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	8b5b      	ldrh	r3, [r3, #26]
 800f2d2:	f023 0303 	bic.w	r3, r3, #3
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	8b5b      	ldrh	r3, [r3, #26]
 800f2e0:	f003 0308 	and.w	r3, r3, #8
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d009      	beq.n	800f2fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	8b5b      	ldrh	r3, [r3, #26]
 800f2ec:	f023 0308 	bic.w	r3, r3, #8
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff f872 	bl	800e3e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00a      	beq.n	800f320 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f30a:	4b0e      	ldr	r3, [pc, #56]	@ (800f344 <tcp_fasttmr+0xc4>)
 800f30c:	2200      	movs	r2, #0
 800f30e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 f819 	bl	800f348 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f316:	4b0b      	ldr	r3, [pc, #44]	@ (800f344 <tcp_fasttmr+0xc4>)
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d000      	beq.n	800f320 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f31e:	e7b8      	b.n	800f292 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	607b      	str	r3, [r7, #4]
 800f324:	e002      	b.n	800f32c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d1b3      	bne.n	800f29a <tcp_fasttmr+0x1a>
    }
  }
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	2000df6a 	.word	0x2000df6a
 800f340:	2000df60 	.word	0x2000df60
 800f344:	2000df68 	.word	0x2000df68

0800f348 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f348:	b590      	push	{r4, r7, lr}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d109      	bne.n	800f36a <tcp_process_refused_data+0x22>
 800f356:	4b37      	ldr	r3, [pc, #220]	@ (800f434 <tcp_process_refused_data+0xec>)
 800f358:	f240 6209 	movw	r2, #1545	@ 0x609
 800f35c:	4936      	ldr	r1, [pc, #216]	@ (800f438 <tcp_process_refused_data+0xf0>)
 800f35e:	4837      	ldr	r0, [pc, #220]	@ (800f43c <tcp_process_refused_data+0xf4>)
 800f360:	f008 f910 	bl	8017584 <iprintf>
 800f364:	f06f 030f 	mvn.w	r3, #15
 800f368:	e060      	b.n	800f42c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f36e:	7b5b      	ldrb	r3, [r3, #13]
 800f370:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f376:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00b      	beq.n	800f3a0 <tcp_process_refused_data+0x58>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6918      	ldr	r0, [r3, #16]
 800f392:	2300      	movs	r3, #0
 800f394:	68ba      	ldr	r2, [r7, #8]
 800f396:	6879      	ldr	r1, [r7, #4]
 800f398:	47a0      	blx	r4
 800f39a:	4603      	mov	r3, r0
 800f39c:	73fb      	strb	r3, [r7, #15]
 800f39e:	e007      	b.n	800f3b0 <tcp_process_refused_data+0x68>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	6879      	ldr	r1, [r7, #4]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f000 f8a4 	bl	800f4f4 <tcp_recv_null>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d12a      	bne.n	800f40e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	f003 0320 	and.w	r3, r3, #32
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d033      	beq.n	800f42a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3c6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f3ca:	d005      	beq.n	800f3d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00b      	beq.n	800f3fa <tcp_process_refused_data+0xb2>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6918      	ldr	r0, [r3, #16]
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	47a0      	blx	r4
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	73fb      	strb	r3, [r7, #15]
 800f3f8:	e001      	b.n	800f3fe <tcp_process_refused_data+0xb6>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f402:	f113 0f0d 	cmn.w	r3, #13
 800f406:	d110      	bne.n	800f42a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f408:	f06f 030c 	mvn.w	r3, #12
 800f40c:	e00e      	b.n	800f42c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f412:	f113 0f0d 	cmn.w	r3, #13
 800f416:	d102      	bne.n	800f41e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f418:	f06f 030c 	mvn.w	r3, #12
 800f41c:	e006      	b.n	800f42c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f424:	f06f 0304 	mvn.w	r3, #4
 800f428:	e000      	b.n	800f42c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3714      	adds	r7, #20
 800f430:	46bd      	mov	sp, r7
 800f432:	bd90      	pop	{r4, r7, pc}
 800f434:	08019b54 	.word	0x08019b54
 800f438:	0801a064 	.word	0x0801a064
 800f43c:	08019b98 	.word	0x08019b98

0800f440 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f448:	e007      	b.n	800f45a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f80a 	bl	800f46a <tcp_seg_free>
    seg = next;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d1f4      	bne.n	800f44a <tcp_segs_free+0xa>
  }
}
 800f460:	bf00      	nop
 800f462:	bf00      	nop
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00c      	beq.n	800f492 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d004      	beq.n	800f48a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	f7fe fb6b 	bl	800db60 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	2003      	movs	r0, #3
 800f48e:	f7fd fcc3 	bl	800ce18 <memp_free>
  }
}
 800f492:	bf00      	nop
 800f494:	3708      	adds	r7, #8
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
	...

0800f49c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d106      	bne.n	800f4b8 <tcp_seg_copy+0x1c>
 800f4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800f4e8 <tcp_seg_copy+0x4c>)
 800f4ac:	f240 6282 	movw	r2, #1666	@ 0x682
 800f4b0:	490e      	ldr	r1, [pc, #56]	@ (800f4ec <tcp_seg_copy+0x50>)
 800f4b2:	480f      	ldr	r0, [pc, #60]	@ (800f4f0 <tcp_seg_copy+0x54>)
 800f4b4:	f008 f866 	bl	8017584 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f4b8:	2003      	movs	r0, #3
 800f4ba:	f7fd fc5b 	bl	800cd74 <memp_malloc>
 800f4be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <tcp_seg_copy+0x2e>
    return NULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e00a      	b.n	800f4e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f4ca:	2210      	movs	r2, #16
 800f4cc:	6879      	ldr	r1, [r7, #4]
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f008 fa57 	bl	8017982 <memcpy>
  pbuf_ref(cseg->p);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fe fbe7 	bl	800dcac <pbuf_ref>
  return cseg;
 800f4de:	68fb      	ldr	r3, [r7, #12]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	08019b54 	.word	0x08019b54
 800f4ec:	0801a0a8 	.word	0x0801a0a8
 800f4f0:	08019b98 	.word	0x08019b98

0800f4f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
 800f500:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d109      	bne.n	800f51c <tcp_recv_null+0x28>
 800f508:	4b12      	ldr	r3, [pc, #72]	@ (800f554 <tcp_recv_null+0x60>)
 800f50a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f50e:	4912      	ldr	r1, [pc, #72]	@ (800f558 <tcp_recv_null+0x64>)
 800f510:	4812      	ldr	r0, [pc, #72]	@ (800f55c <tcp_recv_null+0x68>)
 800f512:	f008 f837 	bl	8017584 <iprintf>
 800f516:	f06f 030f 	mvn.w	r3, #15
 800f51a:	e016      	b.n	800f54a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d009      	beq.n	800f536 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	891b      	ldrh	r3, [r3, #8]
 800f526:	4619      	mov	r1, r3
 800f528:	68b8      	ldr	r0, [r7, #8]
 800f52a:	f7ff fad1 	bl	800ead0 <tcp_recved>
    pbuf_free(p);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fe fb16 	bl	800db60 <pbuf_free>
 800f534:	e008      	b.n	800f548 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d104      	bne.n	800f548 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f53e:	68b8      	ldr	r0, [r7, #8]
 800f540:	f7fe ffb8 	bl	800e4b4 <tcp_close>
 800f544:	4603      	mov	r3, r0
 800f546:	e000      	b.n	800f54a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	08019b54 	.word	0x08019b54
 800f558:	0801a0c4 	.word	0x0801a0c4
 800f55c:	08019b98 	.word	0x08019b98

0800f560 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af00      	add	r7, sp, #0
 800f566:	4603      	mov	r3, r0
 800f568:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f56a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	db01      	blt.n	800f576 <tcp_kill_prio+0x16>
 800f572:	79fb      	ldrb	r3, [r7, #7]
 800f574:	e000      	b.n	800f578 <tcp_kill_prio+0x18>
 800f576:	237f      	movs	r3, #127	@ 0x7f
 800f578:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f57a:	7afb      	ldrb	r3, [r7, #11]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d034      	beq.n	800f5ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f580:	7afb      	ldrb	r3, [r7, #11]
 800f582:	3b01      	subs	r3, #1
 800f584:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f58e:	4b19      	ldr	r3, [pc, #100]	@ (800f5f4 <tcp_kill_prio+0x94>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	e01f      	b.n	800f5d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	7d5b      	ldrb	r3, [r3, #21]
 800f59a:	7afa      	ldrb	r2, [r7, #11]
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d80c      	bhi.n	800f5ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f5a4:	7afa      	ldrb	r2, [r7, #11]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d112      	bne.n	800f5d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f5aa:	4b13      	ldr	r3, [pc, #76]	@ (800f5f8 <tcp_kill_prio+0x98>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d80a      	bhi.n	800f5d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f5ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f5f8 <tcp_kill_prio+0x98>)
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	6a1b      	ldr	r3, [r3, #32]
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	7d5b      	ldrb	r3, [r3, #21]
 800f5ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	617b      	str	r3, [r7, #20]
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1dc      	bne.n	800f596 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d004      	beq.n	800f5ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f5e2:	6938      	ldr	r0, [r7, #16]
 800f5e4:	f7ff f8ac 	bl	800e740 <tcp_abort>
 800f5e8:	e000      	b.n	800f5ec <tcp_kill_prio+0x8c>
    return;
 800f5ea:	bf00      	nop
  }
}
 800f5ec:	3718      	adds	r7, #24
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	2000df60 	.word	0x2000df60
 800f5f8:	2000df54 	.word	0x2000df54

0800f5fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b086      	sub	sp, #24
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f606:	79fb      	ldrb	r3, [r7, #7]
 800f608:	2b08      	cmp	r3, #8
 800f60a:	d009      	beq.n	800f620 <tcp_kill_state+0x24>
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	2b09      	cmp	r3, #9
 800f610:	d006      	beq.n	800f620 <tcp_kill_state+0x24>
 800f612:	4b1a      	ldr	r3, [pc, #104]	@ (800f67c <tcp_kill_state+0x80>)
 800f614:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f618:	4919      	ldr	r1, [pc, #100]	@ (800f680 <tcp_kill_state+0x84>)
 800f61a:	481a      	ldr	r0, [pc, #104]	@ (800f684 <tcp_kill_state+0x88>)
 800f61c:	f007 ffb2 	bl	8017584 <iprintf>

  inactivity = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f624:	2300      	movs	r3, #0
 800f626:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f628:	4b17      	ldr	r3, [pc, #92]	@ (800f688 <tcp_kill_state+0x8c>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	617b      	str	r3, [r7, #20]
 800f62e:	e017      	b.n	800f660 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	7d1b      	ldrb	r3, [r3, #20]
 800f634:	79fa      	ldrb	r2, [r7, #7]
 800f636:	429a      	cmp	r2, r3
 800f638:	d10f      	bne.n	800f65a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f63a:	4b14      	ldr	r3, [pc, #80]	@ (800f68c <tcp_kill_state+0x90>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	429a      	cmp	r2, r3
 800f648:	d807      	bhi.n	800f65a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f64a:	4b10      	ldr	r3, [pc, #64]	@ (800f68c <tcp_kill_state+0x90>)
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	1ad3      	subs	r3, r2, r3
 800f654:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d1e4      	bne.n	800f630 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d003      	beq.n	800f674 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f66c:	2100      	movs	r1, #0
 800f66e:	6938      	ldr	r0, [r7, #16]
 800f670:	f7fe ffa8 	bl	800e5c4 <tcp_abandon>
  }
}
 800f674:	bf00      	nop
 800f676:	3718      	adds	r7, #24
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	08019b54 	.word	0x08019b54
 800f680:	0801a0e0 	.word	0x0801a0e0
 800f684:	08019b98 	.word	0x08019b98
 800f688:	2000df60 	.word	0x2000df60
 800f68c:	2000df54 	.word	0x2000df54

0800f690 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f69a:	2300      	movs	r3, #0
 800f69c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f69e:	4b12      	ldr	r3, [pc, #72]	@ (800f6e8 <tcp_kill_timewait+0x58>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	60fb      	str	r3, [r7, #12]
 800f6a4:	e012      	b.n	800f6cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f6a6:	4b11      	ldr	r3, [pc, #68]	@ (800f6ec <tcp_kill_timewait+0x5c>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d807      	bhi.n	800f6c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ec <tcp_kill_timewait+0x5c>)
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6a1b      	ldr	r3, [r3, #32]
 800f6be:	1ad3      	subs	r3, r2, r3
 800f6c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1e9      	bne.n	800f6a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d002      	beq.n	800f6de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f6d8:	68b8      	ldr	r0, [r7, #8]
 800f6da:	f7ff f831 	bl	800e740 <tcp_abort>
  }
}
 800f6de:	bf00      	nop
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000df64 	.word	0x2000df64
 800f6ec:	2000df54 	.word	0x2000df54

0800f6f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f6f6:	4b10      	ldr	r3, [pc, #64]	@ (800f738 <tcp_handle_closepend+0x48>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f6fc:	e014      	b.n	800f728 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	8b5b      	ldrh	r3, [r3, #26]
 800f708:	f003 0308 	and.w	r3, r3, #8
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8b5b      	ldrh	r3, [r3, #26]
 800f714:	f023 0308 	bic.w	r3, r3, #8
 800f718:	b29a      	uxth	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7fe fe5e 	bl	800e3e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d1e7      	bne.n	800f6fe <tcp_handle_closepend+0xe>
  }
}
 800f72e:	bf00      	nop
 800f730:	bf00      	nop
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	2000df60 	.word	0x2000df60

0800f73c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	4603      	mov	r3, r0
 800f744:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f746:	2001      	movs	r0, #1
 800f748:	f7fd fb14 	bl	800cd74 <memp_malloc>
 800f74c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d126      	bne.n	800f7a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f754:	f7ff ffcc 	bl	800f6f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f758:	f7ff ff9a 	bl	800f690 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f75c:	2001      	movs	r0, #1
 800f75e:	f7fd fb09 	bl	800cd74 <memp_malloc>
 800f762:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d11b      	bne.n	800f7a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f76a:	2009      	movs	r0, #9
 800f76c:	f7ff ff46 	bl	800f5fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f770:	2001      	movs	r0, #1
 800f772:	f7fd faff 	bl	800cd74 <memp_malloc>
 800f776:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d111      	bne.n	800f7a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f77e:	2008      	movs	r0, #8
 800f780:	f7ff ff3c 	bl	800f5fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f784:	2001      	movs	r0, #1
 800f786:	f7fd faf5 	bl	800cd74 <memp_malloc>
 800f78a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d107      	bne.n	800f7a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f792:	79fb      	ldrb	r3, [r7, #7]
 800f794:	4618      	mov	r0, r3
 800f796:	f7ff fee3 	bl	800f560 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f79a:	2001      	movs	r0, #1
 800f79c:	f7fd faea 	bl	800cd74 <memp_malloc>
 800f7a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d03f      	beq.n	800f828 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f7a8:	229c      	movs	r2, #156	@ 0x9c
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f008 f841 	bl	8017834 <memset>
    pcb->prio = prio;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	79fa      	ldrb	r2, [r7, #7]
 800f7b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f7be:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f7c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	22ff      	movs	r2, #255	@ 0xff
 800f7d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f7de:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2206      	movs	r2, #6
 800f7e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2206      	movs	r2, #6
 800f7ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7f4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2201      	movs	r2, #1
 800f7fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f834 <tcp_alloc+0xf8>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f806:	4b0c      	ldr	r3, [pc, #48]	@ (800f838 <tcp_alloc+0xfc>)
 800f808:	781a      	ldrb	r2, [r3, #0]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f814:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	4a08      	ldr	r2, [pc, #32]	@ (800f83c <tcp_alloc+0x100>)
 800f81c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4a07      	ldr	r2, [pc, #28]	@ (800f840 <tcp_alloc+0x104>)
 800f824:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f828:	68fb      	ldr	r3, [r7, #12]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	2000df54 	.word	0x2000df54
 800f838:	2000df6a 	.word	0x2000df6a
 800f83c:	0800f4f5 	.word	0x0800f4f5
 800f840:	006ddd00 	.word	0x006ddd00

0800f844 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f84e:	2040      	movs	r0, #64	@ 0x40
 800f850:	f7ff ff74 	bl	800f73c <tcp_alloc>
 800f854:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f856:	68fb      	ldr	r3, [r7, #12]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
 800f868:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	611a      	str	r2, [r3, #16]
  }
}
 800f876:	bf00      	nop
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
	...

0800f884 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00e      	beq.n	800f8b2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	7d1b      	ldrb	r3, [r3, #20]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d106      	bne.n	800f8aa <tcp_recv+0x26>
 800f89c:	4b07      	ldr	r3, [pc, #28]	@ (800f8bc <tcp_recv+0x38>)
 800f89e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800f8a2:	4907      	ldr	r1, [pc, #28]	@ (800f8c0 <tcp_recv+0x3c>)
 800f8a4:	4807      	ldr	r0, [pc, #28]	@ (800f8c4 <tcp_recv+0x40>)
 800f8a6:	f007 fe6d 	bl	8017584 <iprintf>
    pcb->recv = recv;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800f8b2:	bf00      	nop
 800f8b4:	3708      	adds	r7, #8
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	08019b54 	.word	0x08019b54
 800f8c0:	0801a0f0 	.word	0x0801a0f0
 800f8c4:	08019b98 	.word	0x08019b98

0800f8c8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00e      	beq.n	800f8f6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d106      	bne.n	800f8ee <tcp_sent+0x26>
 800f8e0:	4b07      	ldr	r3, [pc, #28]	@ (800f900 <tcp_sent+0x38>)
 800f8e2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800f8e6:	4907      	ldr	r1, [pc, #28]	@ (800f904 <tcp_sent+0x3c>)
 800f8e8:	4807      	ldr	r0, [pc, #28]	@ (800f908 <tcp_sent+0x40>)
 800f8ea:	f007 fe4b 	bl	8017584 <iprintf>
    pcb->sent = sent;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	683a      	ldr	r2, [r7, #0]
 800f8f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800f8f6:	bf00      	nop
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	08019b54 	.word	0x08019b54
 800f904:	0801a118 	.word	0x0801a118
 800f908:	08019b98 	.word	0x08019b98

0800f90c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00e      	beq.n	800f93a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	7d1b      	ldrb	r3, [r3, #20]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d106      	bne.n	800f932 <tcp_err+0x26>
 800f924:	4b07      	ldr	r3, [pc, #28]	@ (800f944 <tcp_err+0x38>)
 800f926:	f640 020d 	movw	r2, #2061	@ 0x80d
 800f92a:	4907      	ldr	r1, [pc, #28]	@ (800f948 <tcp_err+0x3c>)
 800f92c:	4807      	ldr	r0, [pc, #28]	@ (800f94c <tcp_err+0x40>)
 800f92e:	f007 fe29 	bl	8017584 <iprintf>
    pcb->errf = err;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	683a      	ldr	r2, [r7, #0]
 800f936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	08019b54 	.word	0x08019b54
 800f948:	0801a140 	.word	0x0801a140
 800f94c:	08019b98 	.word	0x08019b98

0800f950 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d008      	beq.n	800f972 <tcp_accept+0x22>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d104      	bne.n	800f972 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	683a      	ldr	r2, [r7, #0]
 800f970:	619a      	str	r2, [r3, #24]
  }
}
 800f972:	bf00      	nop
 800f974:	3714      	adds	r7, #20
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr
	...

0800f980 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	4613      	mov	r3, r2
 800f98c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d107      	bne.n	800f9a4 <tcp_poll+0x24>
 800f994:	4b0e      	ldr	r3, [pc, #56]	@ (800f9d0 <tcp_poll+0x50>)
 800f996:	f640 023d 	movw	r2, #2109	@ 0x83d
 800f99a:	490e      	ldr	r1, [pc, #56]	@ (800f9d4 <tcp_poll+0x54>)
 800f99c:	480e      	ldr	r0, [pc, #56]	@ (800f9d8 <tcp_poll+0x58>)
 800f99e:	f007 fdf1 	bl	8017584 <iprintf>
 800f9a2:	e011      	b.n	800f9c8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	7d1b      	ldrb	r3, [r3, #20]
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d106      	bne.n	800f9ba <tcp_poll+0x3a>
 800f9ac:	4b08      	ldr	r3, [pc, #32]	@ (800f9d0 <tcp_poll+0x50>)
 800f9ae:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f9b2:	490a      	ldr	r1, [pc, #40]	@ (800f9dc <tcp_poll+0x5c>)
 800f9b4:	4808      	ldr	r0, [pc, #32]	@ (800f9d8 <tcp_poll+0x58>)
 800f9b6:	f007 fde5 	bl	8017584 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	68ba      	ldr	r2, [r7, #8]
 800f9be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	79fa      	ldrb	r2, [r7, #7]
 800f9c6:	775a      	strb	r2, [r3, #29]
}
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	08019b54 	.word	0x08019b54
 800f9d4:	0801a168 	.word	0x0801a168
 800f9d8:	08019b98 	.word	0x08019b98
 800f9dc:	0801a180 	.word	0x0801a180

0800f9e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d107      	bne.n	800f9fe <tcp_pcb_purge+0x1e>
 800f9ee:	4b21      	ldr	r3, [pc, #132]	@ (800fa74 <tcp_pcb_purge+0x94>)
 800f9f0:	f640 0251 	movw	r2, #2129	@ 0x851
 800f9f4:	4920      	ldr	r1, [pc, #128]	@ (800fa78 <tcp_pcb_purge+0x98>)
 800f9f6:	4821      	ldr	r0, [pc, #132]	@ (800fa7c <tcp_pcb_purge+0x9c>)
 800f9f8:	f007 fdc4 	bl	8017584 <iprintf>
 800f9fc:	e037      	b.n	800fa6e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d033      	beq.n	800fa6e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fa0a:	2b0a      	cmp	r3, #10
 800fa0c:	d02f      	beq.n	800fa6e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d02b      	beq.n	800fa6e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d007      	beq.n	800fa2e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fe f89c 	bl	800db60 <pbuf_free>
      pcb->refused_data = NULL;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f986 	bl	800fd48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa42:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fcf9 	bl	800f440 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa52:	4618      	mov	r0, r3
 800fa54:	f7ff fcf4 	bl	800f440 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	08019b54 	.word	0x08019b54
 800fa78:	0801a1a0 	.word	0x0801a1a0
 800fa7c:	08019b98 	.word	0x08019b98

0800fa80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d106      	bne.n	800fa9e <tcp_pcb_remove+0x1e>
 800fa90:	4b3e      	ldr	r3, [pc, #248]	@ (800fb8c <tcp_pcb_remove+0x10c>)
 800fa92:	f640 0283 	movw	r2, #2179	@ 0x883
 800fa96:	493e      	ldr	r1, [pc, #248]	@ (800fb90 <tcp_pcb_remove+0x110>)
 800fa98:	483e      	ldr	r0, [pc, #248]	@ (800fb94 <tcp_pcb_remove+0x114>)
 800fa9a:	f007 fd73 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d106      	bne.n	800fab2 <tcp_pcb_remove+0x32>
 800faa4:	4b39      	ldr	r3, [pc, #228]	@ (800fb8c <tcp_pcb_remove+0x10c>)
 800faa6:	f640 0284 	movw	r2, #2180	@ 0x884
 800faaa:	493b      	ldr	r1, [pc, #236]	@ (800fb98 <tcp_pcb_remove+0x118>)
 800faac:	4839      	ldr	r0, [pc, #228]	@ (800fb94 <tcp_pcb_remove+0x114>)
 800faae:	f007 fd69 	bl	8017584 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	683a      	ldr	r2, [r7, #0]
 800fab8:	429a      	cmp	r2, r3
 800faba:	d105      	bne.n	800fac8 <tcp_pcb_remove+0x48>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	68da      	ldr	r2, [r3, #12]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	601a      	str	r2, [r3, #0]
 800fac6:	e013      	b.n	800faf0 <tcp_pcb_remove+0x70>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	60fb      	str	r3, [r7, #12]
 800face:	e00c      	b.n	800faea <tcp_pcb_remove+0x6a>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	683a      	ldr	r2, [r7, #0]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d104      	bne.n	800fae4 <tcp_pcb_remove+0x64>
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	68da      	ldr	r2, [r3, #12]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	60da      	str	r2, [r3, #12]
 800fae2:	e005      	b.n	800faf0 <tcp_pcb_remove+0x70>
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	60fb      	str	r3, [r7, #12]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d1ef      	bne.n	800fad0 <tcp_pcb_remove+0x50>
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	2200      	movs	r2, #0
 800faf4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800faf6:	6838      	ldr	r0, [r7, #0]
 800faf8:	f7ff ff72 	bl	800f9e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	7d1b      	ldrb	r3, [r3, #20]
 800fb00:	2b0a      	cmp	r3, #10
 800fb02:	d013      	beq.n	800fb2c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d00f      	beq.n	800fb2c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	8b5b      	ldrh	r3, [r3, #26]
 800fb10:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d009      	beq.n	800fb2c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	8b5b      	ldrh	r3, [r3, #26]
 800fb1c:	f043 0302 	orr.w	r3, r3, #2
 800fb20:	b29a      	uxth	r2, r3
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb26:	6838      	ldr	r0, [r7, #0]
 800fb28:	f003 fbc0 	bl	80132ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	7d1b      	ldrb	r3, [r3, #20]
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d020      	beq.n	800fb76 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d006      	beq.n	800fb4a <tcp_pcb_remove+0xca>
 800fb3c:	4b13      	ldr	r3, [pc, #76]	@ (800fb8c <tcp_pcb_remove+0x10c>)
 800fb3e:	f640 0293 	movw	r2, #2195	@ 0x893
 800fb42:	4916      	ldr	r1, [pc, #88]	@ (800fb9c <tcp_pcb_remove+0x11c>)
 800fb44:	4813      	ldr	r0, [pc, #76]	@ (800fb94 <tcp_pcb_remove+0x114>)
 800fb46:	f007 fd1d 	bl	8017584 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d006      	beq.n	800fb60 <tcp_pcb_remove+0xe0>
 800fb52:	4b0e      	ldr	r3, [pc, #56]	@ (800fb8c <tcp_pcb_remove+0x10c>)
 800fb54:	f640 0294 	movw	r2, #2196	@ 0x894
 800fb58:	4911      	ldr	r1, [pc, #68]	@ (800fba0 <tcp_pcb_remove+0x120>)
 800fb5a:	480e      	ldr	r0, [pc, #56]	@ (800fb94 <tcp_pcb_remove+0x114>)
 800fb5c:	f007 fd12 	bl	8017584 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d006      	beq.n	800fb76 <tcp_pcb_remove+0xf6>
 800fb68:	4b08      	ldr	r3, [pc, #32]	@ (800fb8c <tcp_pcb_remove+0x10c>)
 800fb6a:	f640 0296 	movw	r2, #2198	@ 0x896
 800fb6e:	490d      	ldr	r1, [pc, #52]	@ (800fba4 <tcp_pcb_remove+0x124>)
 800fb70:	4808      	ldr	r0, [pc, #32]	@ (800fb94 <tcp_pcb_remove+0x114>)
 800fb72:	f007 fd07 	bl	8017584 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb82:	bf00      	nop
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	08019b54 	.word	0x08019b54
 800fb90:	0801a1bc 	.word	0x0801a1bc
 800fb94:	08019b98 	.word	0x08019b98
 800fb98:	0801a1d8 	.word	0x0801a1d8
 800fb9c:	0801a1f8 	.word	0x0801a1f8
 800fba0:	0801a210 	.word	0x0801a210
 800fba4:	0801a22c 	.word	0x0801a22c

0800fba8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d106      	bne.n	800fbc4 <tcp_next_iss+0x1c>
 800fbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe0 <tcp_next_iss+0x38>)
 800fbb8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fbbc:	4909      	ldr	r1, [pc, #36]	@ (800fbe4 <tcp_next_iss+0x3c>)
 800fbbe:	480a      	ldr	r0, [pc, #40]	@ (800fbe8 <tcp_next_iss+0x40>)
 800fbc0:	f007 fce0 	bl	8017584 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fbc4:	4b09      	ldr	r3, [pc, #36]	@ (800fbec <tcp_next_iss+0x44>)
 800fbc6:	681a      	ldr	r2, [r3, #0]
 800fbc8:	4b09      	ldr	r3, [pc, #36]	@ (800fbf0 <tcp_next_iss+0x48>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4413      	add	r3, r2
 800fbce:	4a07      	ldr	r2, [pc, #28]	@ (800fbec <tcp_next_iss+0x44>)
 800fbd0:	6013      	str	r3, [r2, #0]
  return iss;
 800fbd2:	4b06      	ldr	r3, [pc, #24]	@ (800fbec <tcp_next_iss+0x44>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08019b54 	.word	0x08019b54
 800fbe4:	0801a244 	.word	0x0801a244
 800fbe8:	08019b98 	.word	0x08019b98
 800fbec:	20000014 	.word	0x20000014
 800fbf0:	2000df54 	.word	0x2000df54

0800fbf4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
 800fc00:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d106      	bne.n	800fc16 <tcp_eff_send_mss_netif+0x22>
 800fc08:	4b14      	ldr	r3, [pc, #80]	@ (800fc5c <tcp_eff_send_mss_netif+0x68>)
 800fc0a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fc0e:	4914      	ldr	r1, [pc, #80]	@ (800fc60 <tcp_eff_send_mss_netif+0x6c>)
 800fc10:	4814      	ldr	r0, [pc, #80]	@ (800fc64 <tcp_eff_send_mss_netif+0x70>)
 800fc12:	f007 fcb7 	bl	8017584 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d101      	bne.n	800fc20 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	e019      	b.n	800fc54 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fc24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fc26:	8afb      	ldrh	r3, [r7, #22]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d012      	beq.n	800fc52 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fc2c:	2328      	movs	r3, #40	@ 0x28
 800fc2e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fc30:	8afa      	ldrh	r2, [r7, #22]
 800fc32:	8abb      	ldrh	r3, [r7, #20]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d904      	bls.n	800fc42 <tcp_eff_send_mss_netif+0x4e>
 800fc38:	8afa      	ldrh	r2, [r7, #22]
 800fc3a:	8abb      	ldrh	r3, [r7, #20]
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	b29b      	uxth	r3, r3
 800fc40:	e000      	b.n	800fc44 <tcp_eff_send_mss_netif+0x50>
 800fc42:	2300      	movs	r3, #0
 800fc44:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fc46:	8a7a      	ldrh	r2, [r7, #18]
 800fc48:	89fb      	ldrh	r3, [r7, #14]
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	bf28      	it	cs
 800fc4e:	4613      	movcs	r3, r2
 800fc50:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fc52:	89fb      	ldrh	r3, [r7, #14]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3718      	adds	r7, #24
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	08019b54 	.word	0x08019b54
 800fc60:	0801a260 	.word	0x0801a260
 800fc64:	08019b98 	.word	0x08019b98

0800fc68 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d119      	bne.n	800fcb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc7c:	4b10      	ldr	r3, [pc, #64]	@ (800fcc0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc7e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800fc82:	4910      	ldr	r1, [pc, #64]	@ (800fcc4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc84:	4810      	ldr	r0, [pc, #64]	@ (800fcc8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc86:	f007 fc7d 	bl	8017584 <iprintf>

  while (pcb != NULL) {
 800fc8a:	e011      	b.n	800fcb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d108      	bne.n	800fcaa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f7fe fd4e 	bl	800e740 <tcp_abort>
      pcb = next;
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e002      	b.n	800fcb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1ea      	bne.n	800fc8c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fcb6:	bf00      	nop
 800fcb8:	bf00      	nop
 800fcba:	3710      	adds	r7, #16
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	08019b54 	.word	0x08019b54
 800fcc4:	0801a288 	.word	0x0801a288
 800fcc8:	08019b98 	.word	0x08019b98

0800fccc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d02a      	beq.n	800fd32 <tcp_netif_ip_addr_changed+0x66>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d026      	beq.n	800fd32 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fce4:	4b15      	ldr	r3, [pc, #84]	@ (800fd3c <tcp_netif_ip_addr_changed+0x70>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7ff ffbc 	bl	800fc68 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fcf0:	4b13      	ldr	r3, [pc, #76]	@ (800fd40 <tcp_netif_ip_addr_changed+0x74>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7ff ffb6 	bl	800fc68 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d017      	beq.n	800fd32 <tcp_netif_ip_addr_changed+0x66>
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d013      	beq.n	800fd32 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd0a:	4b0e      	ldr	r3, [pc, #56]	@ (800fd44 <tcp_netif_ip_addr_changed+0x78>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	e00c      	b.n	800fd2c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d103      	bne.n	800fd26 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	60fb      	str	r3, [r7, #12]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d1ef      	bne.n	800fd12 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fd32:	bf00      	nop
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	2000df60 	.word	0x2000df60
 800fd40:	2000df58 	.word	0x2000df58
 800fd44:	2000df5c 	.word	0x2000df5c

0800fd48 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b082      	sub	sp, #8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d007      	beq.n	800fd68 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff fb6f 	bl	800f440 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2200      	movs	r2, #0
 800fd66:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b08d      	sub	sp, #52	@ 0x34
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d105      	bne.n	800fd8c <tcp_input+0x1c>
 800fd80:	4b9b      	ldr	r3, [pc, #620]	@ (800fff0 <tcp_input+0x280>)
 800fd82:	2283      	movs	r2, #131	@ 0x83
 800fd84:	499b      	ldr	r1, [pc, #620]	@ (800fff4 <tcp_input+0x284>)
 800fd86:	489c      	ldr	r0, [pc, #624]	@ (800fff8 <tcp_input+0x288>)
 800fd88:	f007 fbfc 	bl	8017584 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	4a9a      	ldr	r2, [pc, #616]	@ (800fffc <tcp_input+0x28c>)
 800fd92:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	895b      	ldrh	r3, [r3, #10]
 800fd98:	2b13      	cmp	r3, #19
 800fd9a:	f240 83d1 	bls.w	8010540 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd9e:	4b98      	ldr	r3, [pc, #608]	@ (8010000 <tcp_input+0x290>)
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	4a97      	ldr	r2, [pc, #604]	@ (8010000 <tcp_input+0x290>)
 800fda4:	6812      	ldr	r2, [r2, #0]
 800fda6:	4611      	mov	r1, r2
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f006 f9df 	bl	801616c <ip4_addr_isbroadcast_u32>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 83c7 	bne.w	8010544 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fdb6:	4b92      	ldr	r3, [pc, #584]	@ (8010000 <tcp_input+0x290>)
 800fdb8:	695b      	ldr	r3, [r3, #20]
 800fdba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fdbe:	2be0      	cmp	r3, #224	@ 0xe0
 800fdc0:	f000 83c0 	beq.w	8010544 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fdc4:	4b8d      	ldr	r3, [pc, #564]	@ (800fffc <tcp_input+0x28c>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	899b      	ldrh	r3, [r3, #12]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7fc fb1b 	bl	800c408 <lwip_htons>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	0b1b      	lsrs	r3, r3, #12
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fdde:	7cbb      	ldrb	r3, [r7, #18]
 800fde0:	2b13      	cmp	r3, #19
 800fde2:	f240 83b1 	bls.w	8010548 <tcp_input+0x7d8>
 800fde6:	7cbb      	ldrb	r3, [r7, #18]
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	891b      	ldrh	r3, [r3, #8]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	f200 83aa 	bhi.w	8010548 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fdf4:	7cbb      	ldrb	r3, [r7, #18]
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	3b14      	subs	r3, #20
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	4b81      	ldr	r3, [pc, #516]	@ (8010004 <tcp_input+0x294>)
 800fdfe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fe00:	4b81      	ldr	r3, [pc, #516]	@ (8010008 <tcp_input+0x298>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	895a      	ldrh	r2, [r3, #10]
 800fe0a:	7cbb      	ldrb	r3, [r7, #18]
 800fe0c:	b29b      	uxth	r3, r3
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d309      	bcc.n	800fe26 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fe12:	4b7c      	ldr	r3, [pc, #496]	@ (8010004 <tcp_input+0x294>)
 800fe14:	881a      	ldrh	r2, [r3, #0]
 800fe16:	4b7d      	ldr	r3, [pc, #500]	@ (801000c <tcp_input+0x29c>)
 800fe18:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fe1a:	7cbb      	ldrb	r3, [r7, #18]
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7fd fe18 	bl	800da54 <pbuf_remove_header>
 800fe24:	e04e      	b.n	800fec4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d105      	bne.n	800fe3a <tcp_input+0xca>
 800fe2e:	4b70      	ldr	r3, [pc, #448]	@ (800fff0 <tcp_input+0x280>)
 800fe30:	22c2      	movs	r2, #194	@ 0xc2
 800fe32:	4977      	ldr	r1, [pc, #476]	@ (8010010 <tcp_input+0x2a0>)
 800fe34:	4870      	ldr	r0, [pc, #448]	@ (800fff8 <tcp_input+0x288>)
 800fe36:	f007 fba5 	bl	8017584 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fe3a:	2114      	movs	r1, #20
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7fd fe09 	bl	800da54 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	895a      	ldrh	r2, [r3, #10]
 800fe46:	4b71      	ldr	r3, [pc, #452]	@ (801000c <tcp_input+0x29c>)
 800fe48:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fe4a:	4b6e      	ldr	r3, [pc, #440]	@ (8010004 <tcp_input+0x294>)
 800fe4c:	881a      	ldrh	r2, [r3, #0]
 800fe4e:	4b6f      	ldr	r3, [pc, #444]	@ (801000c <tcp_input+0x29c>)
 800fe50:	881b      	ldrh	r3, [r3, #0]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fe56:	4b6d      	ldr	r3, [pc, #436]	@ (801000c <tcp_input+0x29c>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f7fd fdf9 	bl	800da54 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	895b      	ldrh	r3, [r3, #10]
 800fe68:	8a3a      	ldrh	r2, [r7, #16]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	f200 836e 	bhi.w	801054c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	4a64      	ldr	r2, [pc, #400]	@ (8010008 <tcp_input+0x298>)
 800fe78:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	8a3a      	ldrh	r2, [r7, #16]
 800fe80:	4611      	mov	r1, r2
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fd fde6 	bl	800da54 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	891a      	ldrh	r2, [r3, #8]
 800fe8c:	8a3b      	ldrh	r3, [r7, #16]
 800fe8e:	1ad3      	subs	r3, r2, r3
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	895b      	ldrh	r3, [r3, #10]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d005      	beq.n	800feaa <tcp_input+0x13a>
 800fe9e:	4b54      	ldr	r3, [pc, #336]	@ (800fff0 <tcp_input+0x280>)
 800fea0:	22df      	movs	r2, #223	@ 0xdf
 800fea2:	495c      	ldr	r1, [pc, #368]	@ (8010014 <tcp_input+0x2a4>)
 800fea4:	4854      	ldr	r0, [pc, #336]	@ (800fff8 <tcp_input+0x288>)
 800fea6:	f007 fb6d 	bl	8017584 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	891a      	ldrh	r2, [r3, #8]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	891b      	ldrh	r3, [r3, #8]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d005      	beq.n	800fec4 <tcp_input+0x154>
 800feb8:	4b4d      	ldr	r3, [pc, #308]	@ (800fff0 <tcp_input+0x280>)
 800feba:	22e0      	movs	r2, #224	@ 0xe0
 800febc:	4956      	ldr	r1, [pc, #344]	@ (8010018 <tcp_input+0x2a8>)
 800febe:	484e      	ldr	r0, [pc, #312]	@ (800fff8 <tcp_input+0x288>)
 800fec0:	f007 fb60 	bl	8017584 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fec4:	4b4d      	ldr	r3, [pc, #308]	@ (800fffc <tcp_input+0x28c>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	881b      	ldrh	r3, [r3, #0]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	4a4b      	ldr	r2, [pc, #300]	@ (800fffc <tcp_input+0x28c>)
 800fece:	6814      	ldr	r4, [r2, #0]
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fc fa99 	bl	800c408 <lwip_htons>
 800fed6:	4603      	mov	r3, r0
 800fed8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800feda:	4b48      	ldr	r3, [pc, #288]	@ (800fffc <tcp_input+0x28c>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	885b      	ldrh	r3, [r3, #2]
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	4a46      	ldr	r2, [pc, #280]	@ (800fffc <tcp_input+0x28c>)
 800fee4:	6814      	ldr	r4, [r2, #0]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fc fa8e 	bl	800c408 <lwip_htons>
 800feec:	4603      	mov	r3, r0
 800feee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fef0:	4b42      	ldr	r3, [pc, #264]	@ (800fffc <tcp_input+0x28c>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	4a41      	ldr	r2, [pc, #260]	@ (800fffc <tcp_input+0x28c>)
 800fef8:	6814      	ldr	r4, [r2, #0]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fc fa99 	bl	800c432 <lwip_htonl>
 800ff00:	4603      	mov	r3, r0
 800ff02:	6063      	str	r3, [r4, #4]
 800ff04:	6863      	ldr	r3, [r4, #4]
 800ff06:	4a45      	ldr	r2, [pc, #276]	@ (801001c <tcp_input+0x2ac>)
 800ff08:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ff0a:	4b3c      	ldr	r3, [pc, #240]	@ (800fffc <tcp_input+0x28c>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	4a3a      	ldr	r2, [pc, #232]	@ (800fffc <tcp_input+0x28c>)
 800ff12:	6814      	ldr	r4, [r2, #0]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fc fa8c 	bl	800c432 <lwip_htonl>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	60a3      	str	r3, [r4, #8]
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	4a3f      	ldr	r2, [pc, #252]	@ (8010020 <tcp_input+0x2b0>)
 800ff22:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ff24:	4b35      	ldr	r3, [pc, #212]	@ (800fffc <tcp_input+0x28c>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	89db      	ldrh	r3, [r3, #14]
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	4a33      	ldr	r2, [pc, #204]	@ (800fffc <tcp_input+0x28c>)
 800ff2e:	6814      	ldr	r4, [r2, #0]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fc fa69 	bl	800c408 <lwip_htons>
 800ff36:	4603      	mov	r3, r0
 800ff38:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ff3a:	4b30      	ldr	r3, [pc, #192]	@ (800fffc <tcp_input+0x28c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	899b      	ldrh	r3, [r3, #12]
 800ff40:	b29b      	uxth	r3, r3
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fc fa60 	bl	800c408 <lwip_htons>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	4b34      	ldr	r3, [pc, #208]	@ (8010024 <tcp_input+0x2b4>)
 800ff54:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	891a      	ldrh	r2, [r3, #8]
 800ff5a:	4b33      	ldr	r3, [pc, #204]	@ (8010028 <tcp_input+0x2b8>)
 800ff5c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ff5e:	4b31      	ldr	r3, [pc, #196]	@ (8010024 <tcp_input+0x2b4>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	f003 0303 	and.w	r3, r3, #3
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d00c      	beq.n	800ff84 <tcp_input+0x214>
    tcplen++;
 800ff6a:	4b2f      	ldr	r3, [pc, #188]	@ (8010028 <tcp_input+0x2b8>)
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	b29a      	uxth	r2, r3
 800ff72:	4b2d      	ldr	r3, [pc, #180]	@ (8010028 <tcp_input+0x2b8>)
 800ff74:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	891a      	ldrh	r2, [r3, #8]
 800ff7a:	4b2b      	ldr	r3, [pc, #172]	@ (8010028 <tcp_input+0x2b8>)
 800ff7c:	881b      	ldrh	r3, [r3, #0]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	f200 82e6 	bhi.w	8010550 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff84:	2300      	movs	r3, #0
 800ff86:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff88:	4b28      	ldr	r3, [pc, #160]	@ (801002c <tcp_input+0x2bc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	61fb      	str	r3, [r7, #28]
 800ff8e:	e09d      	b.n	80100cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	7d1b      	ldrb	r3, [r3, #20]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d105      	bne.n	800ffa4 <tcp_input+0x234>
 800ff98:	4b15      	ldr	r3, [pc, #84]	@ (800fff0 <tcp_input+0x280>)
 800ff9a:	22fb      	movs	r2, #251	@ 0xfb
 800ff9c:	4924      	ldr	r1, [pc, #144]	@ (8010030 <tcp_input+0x2c0>)
 800ff9e:	4816      	ldr	r0, [pc, #88]	@ (800fff8 <tcp_input+0x288>)
 800ffa0:	f007 faf0 	bl	8017584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	7d1b      	ldrb	r3, [r3, #20]
 800ffa8:	2b0a      	cmp	r3, #10
 800ffaa:	d105      	bne.n	800ffb8 <tcp_input+0x248>
 800ffac:	4b10      	ldr	r3, [pc, #64]	@ (800fff0 <tcp_input+0x280>)
 800ffae:	22fc      	movs	r2, #252	@ 0xfc
 800ffb0:	4920      	ldr	r1, [pc, #128]	@ (8010034 <tcp_input+0x2c4>)
 800ffb2:	4811      	ldr	r0, [pc, #68]	@ (800fff8 <tcp_input+0x288>)
 800ffb4:	f007 fae6 	bl	8017584 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	7d1b      	ldrb	r3, [r3, #20]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d105      	bne.n	800ffcc <tcp_input+0x25c>
 800ffc0:	4b0b      	ldr	r3, [pc, #44]	@ (800fff0 <tcp_input+0x280>)
 800ffc2:	22fd      	movs	r2, #253	@ 0xfd
 800ffc4:	491c      	ldr	r1, [pc, #112]	@ (8010038 <tcp_input+0x2c8>)
 800ffc6:	480c      	ldr	r0, [pc, #48]	@ (800fff8 <tcp_input+0x288>)
 800ffc8:	f007 fadc 	bl	8017584 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	7a1b      	ldrb	r3, [r3, #8]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d033      	beq.n	801003c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	7a1a      	ldrb	r2, [r3, #8]
 800ffd8:	4b09      	ldr	r3, [pc, #36]	@ (8010000 <tcp_input+0x290>)
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d029      	beq.n	801003c <tcp_input+0x2cc>
      prev = pcb;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	61bb      	str	r3, [r7, #24]
      continue;
 800ffec:	e06b      	b.n	80100c6 <tcp_input+0x356>
 800ffee:	bf00      	nop
 800fff0:	0801a2bc 	.word	0x0801a2bc
 800fff4:	0801a2f0 	.word	0x0801a2f0
 800fff8:	0801a308 	.word	0x0801a308
 800fffc:	2000df7c 	.word	0x2000df7c
 8010000:	20008640 	.word	0x20008640
 8010004:	2000df80 	.word	0x2000df80
 8010008:	2000df84 	.word	0x2000df84
 801000c:	2000df82 	.word	0x2000df82
 8010010:	0801a330 	.word	0x0801a330
 8010014:	0801a340 	.word	0x0801a340
 8010018:	0801a34c 	.word	0x0801a34c
 801001c:	2000df8c 	.word	0x2000df8c
 8010020:	2000df90 	.word	0x2000df90
 8010024:	2000df98 	.word	0x2000df98
 8010028:	2000df96 	.word	0x2000df96
 801002c:	2000df60 	.word	0x2000df60
 8010030:	0801a36c 	.word	0x0801a36c
 8010034:	0801a394 	.word	0x0801a394
 8010038:	0801a3c0 	.word	0x0801a3c0
    }

    if (pcb->remote_port == tcphdr->src &&
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	8b1a      	ldrh	r2, [r3, #24]
 8010040:	4b72      	ldr	r3, [pc, #456]	@ (801020c <tcp_input+0x49c>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	881b      	ldrh	r3, [r3, #0]
 8010046:	b29b      	uxth	r3, r3
 8010048:	429a      	cmp	r2, r3
 801004a:	d13a      	bne.n	80100c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	8ada      	ldrh	r2, [r3, #22]
 8010050:	4b6e      	ldr	r3, [pc, #440]	@ (801020c <tcp_input+0x49c>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	885b      	ldrh	r3, [r3, #2]
 8010056:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010058:	429a      	cmp	r2, r3
 801005a:	d132      	bne.n	80100c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	4b6b      	ldr	r3, [pc, #428]	@ (8010210 <tcp_input+0x4a0>)
 8010062:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010064:	429a      	cmp	r2, r3
 8010066:	d12c      	bne.n	80100c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	681a      	ldr	r2, [r3, #0]
 801006c:	4b68      	ldr	r3, [pc, #416]	@ (8010210 <tcp_input+0x4a0>)
 801006e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010070:	429a      	cmp	r2, r3
 8010072:	d126      	bne.n	80100c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	69fa      	ldr	r2, [r7, #28]
 801007a:	429a      	cmp	r2, r3
 801007c:	d106      	bne.n	801008c <tcp_input+0x31c>
 801007e:	4b65      	ldr	r3, [pc, #404]	@ (8010214 <tcp_input+0x4a4>)
 8010080:	f240 120d 	movw	r2, #269	@ 0x10d
 8010084:	4964      	ldr	r1, [pc, #400]	@ (8010218 <tcp_input+0x4a8>)
 8010086:	4865      	ldr	r0, [pc, #404]	@ (801021c <tcp_input+0x4ac>)
 8010088:	f007 fa7c 	bl	8017584 <iprintf>
      if (prev != NULL) {
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d00a      	beq.n	80100a8 <tcp_input+0x338>
        prev->next = pcb->next;
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	69bb      	ldr	r3, [r7, #24]
 8010098:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801009a:	4b61      	ldr	r3, [pc, #388]	@ (8010220 <tcp_input+0x4b0>)
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80100a2:	4a5f      	ldr	r2, [pc, #380]	@ (8010220 <tcp_input+0x4b0>)
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	68db      	ldr	r3, [r3, #12]
 80100ac:	69fa      	ldr	r2, [r7, #28]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d111      	bne.n	80100d6 <tcp_input+0x366>
 80100b2:	4b58      	ldr	r3, [pc, #352]	@ (8010214 <tcp_input+0x4a4>)
 80100b4:	f240 1215 	movw	r2, #277	@ 0x115
 80100b8:	495a      	ldr	r1, [pc, #360]	@ (8010224 <tcp_input+0x4b4>)
 80100ba:	4858      	ldr	r0, [pc, #352]	@ (801021c <tcp_input+0x4ac>)
 80100bc:	f007 fa62 	bl	8017584 <iprintf>
      break;
 80100c0:	e009      	b.n	80100d6 <tcp_input+0x366>
    }
    prev = pcb;
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	61fb      	str	r3, [r7, #28]
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	f47f af5e 	bne.w	800ff90 <tcp_input+0x220>
 80100d4:	e000      	b.n	80100d8 <tcp_input+0x368>
      break;
 80100d6:	bf00      	nop
  }

  if (pcb == NULL) {
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f040 80aa 	bne.w	8010234 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e0:	4b51      	ldr	r3, [pc, #324]	@ (8010228 <tcp_input+0x4b8>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	61fb      	str	r3, [r7, #28]
 80100e6:	e03f      	b.n	8010168 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	7d1b      	ldrb	r3, [r3, #20]
 80100ec:	2b0a      	cmp	r3, #10
 80100ee:	d006      	beq.n	80100fe <tcp_input+0x38e>
 80100f0:	4b48      	ldr	r3, [pc, #288]	@ (8010214 <tcp_input+0x4a4>)
 80100f2:	f240 121f 	movw	r2, #287	@ 0x11f
 80100f6:	494d      	ldr	r1, [pc, #308]	@ (801022c <tcp_input+0x4bc>)
 80100f8:	4848      	ldr	r0, [pc, #288]	@ (801021c <tcp_input+0x4ac>)
 80100fa:	f007 fa43 	bl	8017584 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	7a1b      	ldrb	r3, [r3, #8]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d009      	beq.n	801011a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	7a1a      	ldrb	r2, [r3, #8]
 801010a:	4b41      	ldr	r3, [pc, #260]	@ (8010210 <tcp_input+0x4a0>)
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010112:	3301      	adds	r3, #1
 8010114:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010116:	429a      	cmp	r2, r3
 8010118:	d122      	bne.n	8010160 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	8b1a      	ldrh	r2, [r3, #24]
 801011e:	4b3b      	ldr	r3, [pc, #236]	@ (801020c <tcp_input+0x49c>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	b29b      	uxth	r3, r3
 8010126:	429a      	cmp	r2, r3
 8010128:	d11b      	bne.n	8010162 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	8ada      	ldrh	r2, [r3, #22]
 801012e:	4b37      	ldr	r3, [pc, #220]	@ (801020c <tcp_input+0x49c>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	885b      	ldrh	r3, [r3, #2]
 8010134:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010136:	429a      	cmp	r2, r3
 8010138:	d113      	bne.n	8010162 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801013a:	69fb      	ldr	r3, [r7, #28]
 801013c:	685a      	ldr	r2, [r3, #4]
 801013e:	4b34      	ldr	r3, [pc, #208]	@ (8010210 <tcp_input+0x4a0>)
 8010140:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010142:	429a      	cmp	r2, r3
 8010144:	d10d      	bne.n	8010162 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010146:	69fb      	ldr	r3, [r7, #28]
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	4b31      	ldr	r3, [pc, #196]	@ (8010210 <tcp_input+0x4a0>)
 801014c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801014e:	429a      	cmp	r2, r3
 8010150:	d107      	bne.n	8010162 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010152:	69f8      	ldr	r0, [r7, #28]
 8010154:	f000 fb56 	bl	8010804 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7fd fd01 	bl	800db60 <pbuf_free>
        return;
 801015e:	e1fd      	b.n	801055c <tcp_input+0x7ec>
        continue;
 8010160:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	61fb      	str	r3, [r7, #28]
 8010168:	69fb      	ldr	r3, [r7, #28]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1bc      	bne.n	80100e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801016e:	2300      	movs	r3, #0
 8010170:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010172:	4b2f      	ldr	r3, [pc, #188]	@ (8010230 <tcp_input+0x4c0>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	617b      	str	r3, [r7, #20]
 8010178:	e02a      	b.n	80101d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	7a1b      	ldrb	r3, [r3, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00c      	beq.n	801019c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	7a1a      	ldrb	r2, [r3, #8]
 8010186:	4b22      	ldr	r3, [pc, #136]	@ (8010210 <tcp_input+0x4a0>)
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801018e:	3301      	adds	r3, #1
 8010190:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010192:	429a      	cmp	r2, r3
 8010194:	d002      	beq.n	801019c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	61bb      	str	r3, [r7, #24]
        continue;
 801019a:	e016      	b.n	80101ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	8ada      	ldrh	r2, [r3, #22]
 80101a0:	4b1a      	ldr	r3, [pc, #104]	@ (801020c <tcp_input+0x49c>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	885b      	ldrh	r3, [r3, #2]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d10c      	bne.n	80101c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4b17      	ldr	r3, [pc, #92]	@ (8010210 <tcp_input+0x4a0>)
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d00f      	beq.n	80101d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d00d      	beq.n	80101da <tcp_input+0x46a>
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d009      	beq.n	80101da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1d1      	bne.n	801017a <tcp_input+0x40a>
 80101d6:	e000      	b.n	80101da <tcp_input+0x46a>
            break;
 80101d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d029      	beq.n	8010234 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	68da      	ldr	r2, [r3, #12]
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80101ee:	4b10      	ldr	r3, [pc, #64]	@ (8010230 <tcp_input+0x4c0>)
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80101f6:	4a0e      	ldr	r2, [pc, #56]	@ (8010230 <tcp_input+0x4c0>)
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80101fc:	6978      	ldr	r0, [r7, #20]
 80101fe:	f000 fa03 	bl	8010608 <tcp_listen_input>
      }
      pbuf_free(p);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7fd fcac 	bl	800db60 <pbuf_free>
      return;
 8010208:	e1a8      	b.n	801055c <tcp_input+0x7ec>
 801020a:	bf00      	nop
 801020c:	2000df7c 	.word	0x2000df7c
 8010210:	20008640 	.word	0x20008640
 8010214:	0801a2bc 	.word	0x0801a2bc
 8010218:	0801a3e8 	.word	0x0801a3e8
 801021c:	0801a308 	.word	0x0801a308
 8010220:	2000df60 	.word	0x2000df60
 8010224:	0801a414 	.word	0x0801a414
 8010228:	2000df64 	.word	0x2000df64
 801022c:	0801a440 	.word	0x0801a440
 8010230:	2000df5c 	.word	0x2000df5c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	2b00      	cmp	r3, #0
 8010238:	f000 8158 	beq.w	80104ec <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801023c:	4b95      	ldr	r3, [pc, #596]	@ (8010494 <tcp_input+0x724>)
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	891a      	ldrh	r2, [r3, #8]
 8010246:	4b93      	ldr	r3, [pc, #588]	@ (8010494 <tcp_input+0x724>)
 8010248:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801024a:	4a92      	ldr	r2, [pc, #584]	@ (8010494 <tcp_input+0x724>)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010250:	4b91      	ldr	r3, [pc, #580]	@ (8010498 <tcp_input+0x728>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a8f      	ldr	r2, [pc, #572]	@ (8010494 <tcp_input+0x724>)
 8010256:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010258:	4b90      	ldr	r3, [pc, #576]	@ (801049c <tcp_input+0x72c>)
 801025a:	2200      	movs	r2, #0
 801025c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801025e:	4b90      	ldr	r3, [pc, #576]	@ (80104a0 <tcp_input+0x730>)
 8010260:	2200      	movs	r2, #0
 8010262:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010264:	4b8f      	ldr	r3, [pc, #572]	@ (80104a4 <tcp_input+0x734>)
 8010266:	2200      	movs	r2, #0
 8010268:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801026a:	4b8f      	ldr	r3, [pc, #572]	@ (80104a8 <tcp_input+0x738>)
 801026c:	781b      	ldrb	r3, [r3, #0]
 801026e:	f003 0308 	and.w	r3, r3, #8
 8010272:	2b00      	cmp	r3, #0
 8010274:	d006      	beq.n	8010284 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	7b5b      	ldrb	r3, [r3, #13]
 801027a:	f043 0301 	orr.w	r3, r3, #1
 801027e:	b2da      	uxtb	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010288:	2b00      	cmp	r3, #0
 801028a:	d017      	beq.n	80102bc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801028c:	69f8      	ldr	r0, [r7, #28]
 801028e:	f7ff f85b 	bl	800f348 <tcp_process_refused_data>
 8010292:	4603      	mov	r3, r0
 8010294:	f113 0f0d 	cmn.w	r3, #13
 8010298:	d007      	beq.n	80102aa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00c      	beq.n	80102bc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80102a2:	4b82      	ldr	r3, [pc, #520]	@ (80104ac <tcp_input+0x73c>)
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d008      	beq.n	80102bc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80102aa:	69fb      	ldr	r3, [r7, #28]
 80102ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f040 80e3 	bne.w	801047a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80102b4:	69f8      	ldr	r0, [r7, #28]
 80102b6:	f003 fdff 	bl	8013eb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80102ba:	e0de      	b.n	801047a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80102bc:	4a7c      	ldr	r2, [pc, #496]	@ (80104b0 <tcp_input+0x740>)
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80102c2:	69f8      	ldr	r0, [r7, #28]
 80102c4:	f000 fb18 	bl	80108f8 <tcp_process>
 80102c8:	4603      	mov	r3, r0
 80102ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80102cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102d0:	f113 0f0d 	cmn.w	r3, #13
 80102d4:	f000 80d3 	beq.w	801047e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80102d8:	4b71      	ldr	r3, [pc, #452]	@ (80104a0 <tcp_input+0x730>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f003 0308 	and.w	r3, r3, #8
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d015      	beq.n	8010310 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d008      	beq.n	8010300 <tcp_input+0x590>
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102f4:	69fa      	ldr	r2, [r7, #28]
 80102f6:	6912      	ldr	r2, [r2, #16]
 80102f8:	f06f 010d 	mvn.w	r1, #13
 80102fc:	4610      	mov	r0, r2
 80102fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010300:	69f9      	ldr	r1, [r7, #28]
 8010302:	486c      	ldr	r0, [pc, #432]	@ (80104b4 <tcp_input+0x744>)
 8010304:	f7ff fbbc 	bl	800fa80 <tcp_pcb_remove>
        tcp_free(pcb);
 8010308:	69f8      	ldr	r0, [r7, #28]
 801030a:	f7fd fed5 	bl	800e0b8 <tcp_free>
 801030e:	e0da      	b.n	80104c6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010310:	2300      	movs	r3, #0
 8010312:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010314:	4b63      	ldr	r3, [pc, #396]	@ (80104a4 <tcp_input+0x734>)
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d01d      	beq.n	8010358 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801031c:	4b61      	ldr	r3, [pc, #388]	@ (80104a4 <tcp_input+0x734>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010328:	2b00      	cmp	r3, #0
 801032a:	d00a      	beq.n	8010342 <tcp_input+0x5d2>
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010332:	69fa      	ldr	r2, [r7, #28]
 8010334:	6910      	ldr	r0, [r2, #16]
 8010336:	89fa      	ldrh	r2, [r7, #14]
 8010338:	69f9      	ldr	r1, [r7, #28]
 801033a:	4798      	blx	r3
 801033c:	4603      	mov	r3, r0
 801033e:	74fb      	strb	r3, [r7, #19]
 8010340:	e001      	b.n	8010346 <tcp_input+0x5d6>
 8010342:	2300      	movs	r3, #0
 8010344:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010346:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801034a:	f113 0f0d 	cmn.w	r3, #13
 801034e:	f000 8098 	beq.w	8010482 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010352:	4b54      	ldr	r3, [pc, #336]	@ (80104a4 <tcp_input+0x734>)
 8010354:	2200      	movs	r2, #0
 8010356:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010358:	69f8      	ldr	r0, [r7, #28]
 801035a:	f000 f915 	bl	8010588 <tcp_input_delayed_close>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	f040 8090 	bne.w	8010486 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010366:	4b4d      	ldr	r3, [pc, #308]	@ (801049c <tcp_input+0x72c>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d041      	beq.n	80103f2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010372:	2b00      	cmp	r3, #0
 8010374:	d006      	beq.n	8010384 <tcp_input+0x614>
 8010376:	4b50      	ldr	r3, [pc, #320]	@ (80104b8 <tcp_input+0x748>)
 8010378:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801037c:	494f      	ldr	r1, [pc, #316]	@ (80104bc <tcp_input+0x74c>)
 801037e:	4850      	ldr	r0, [pc, #320]	@ (80104c0 <tcp_input+0x750>)
 8010380:	f007 f900 	bl	8017584 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	8b5b      	ldrh	r3, [r3, #26]
 8010388:	f003 0310 	and.w	r3, r3, #16
 801038c:	2b00      	cmp	r3, #0
 801038e:	d008      	beq.n	80103a2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010390:	4b42      	ldr	r3, [pc, #264]	@ (801049c <tcp_input+0x72c>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7fd fbe3 	bl	800db60 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801039a:	69f8      	ldr	r0, [r7, #28]
 801039c:	f7fe f9d0 	bl	800e740 <tcp_abort>
            goto aborted;
 80103a0:	e091      	b.n	80104c6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00c      	beq.n	80103c6 <tcp_input+0x656>
 80103ac:	69fb      	ldr	r3, [r7, #28]
 80103ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	6918      	ldr	r0, [r3, #16]
 80103b6:	4b39      	ldr	r3, [pc, #228]	@ (801049c <tcp_input+0x72c>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	2300      	movs	r3, #0
 80103bc:	69f9      	ldr	r1, [r7, #28]
 80103be:	47a0      	blx	r4
 80103c0:	4603      	mov	r3, r0
 80103c2:	74fb      	strb	r3, [r7, #19]
 80103c4:	e008      	b.n	80103d8 <tcp_input+0x668>
 80103c6:	4b35      	ldr	r3, [pc, #212]	@ (801049c <tcp_input+0x72c>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	2300      	movs	r3, #0
 80103cc:	69f9      	ldr	r1, [r7, #28]
 80103ce:	2000      	movs	r0, #0
 80103d0:	f7ff f890 	bl	800f4f4 <tcp_recv_null>
 80103d4:	4603      	mov	r3, r0
 80103d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80103d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103dc:	f113 0f0d 	cmn.w	r3, #13
 80103e0:	d053      	beq.n	801048a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80103e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80103ea:	4b2c      	ldr	r3, [pc, #176]	@ (801049c <tcp_input+0x72c>)
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80103f2:	4b2b      	ldr	r3, [pc, #172]	@ (80104a0 <tcp_input+0x730>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	f003 0320 	and.w	r3, r3, #32
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d030      	beq.n	8010460 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010402:	2b00      	cmp	r3, #0
 8010404:	d009      	beq.n	801041a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801040a:	7b5a      	ldrb	r2, [r3, #13]
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010410:	f042 0220 	orr.w	r2, r2, #32
 8010414:	b2d2      	uxtb	r2, r2
 8010416:	735a      	strb	r2, [r3, #13]
 8010418:	e022      	b.n	8010460 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801041e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010422:	d005      	beq.n	8010430 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010428:	3301      	adds	r3, #1
 801042a:	b29a      	uxth	r2, r3
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00b      	beq.n	8010452 <tcp_input+0x6e2>
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	6918      	ldr	r0, [r3, #16]
 8010444:	2300      	movs	r3, #0
 8010446:	2200      	movs	r2, #0
 8010448:	69f9      	ldr	r1, [r7, #28]
 801044a:	47a0      	blx	r4
 801044c:	4603      	mov	r3, r0
 801044e:	74fb      	strb	r3, [r7, #19]
 8010450:	e001      	b.n	8010456 <tcp_input+0x6e6>
 8010452:	2300      	movs	r3, #0
 8010454:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010456:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801045a:	f113 0f0d 	cmn.w	r3, #13
 801045e:	d016      	beq.n	801048e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010460:	4b13      	ldr	r3, [pc, #76]	@ (80104b0 <tcp_input+0x740>)
 8010462:	2200      	movs	r2, #0
 8010464:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010466:	69f8      	ldr	r0, [r7, #28]
 8010468:	f000 f88e 	bl	8010588 <tcp_input_delayed_close>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d128      	bne.n	80104c4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010472:	69f8      	ldr	r0, [r7, #28]
 8010474:	f002 ff1a 	bl	80132ac <tcp_output>
 8010478:	e025      	b.n	80104c6 <tcp_input+0x756>
        goto aborted;
 801047a:	bf00      	nop
 801047c:	e023      	b.n	80104c6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801047e:	bf00      	nop
 8010480:	e021      	b.n	80104c6 <tcp_input+0x756>
              goto aborted;
 8010482:	bf00      	nop
 8010484:	e01f      	b.n	80104c6 <tcp_input+0x756>
          goto aborted;
 8010486:	bf00      	nop
 8010488:	e01d      	b.n	80104c6 <tcp_input+0x756>
            goto aborted;
 801048a:	bf00      	nop
 801048c:	e01b      	b.n	80104c6 <tcp_input+0x756>
              goto aborted;
 801048e:	bf00      	nop
 8010490:	e019      	b.n	80104c6 <tcp_input+0x756>
 8010492:	bf00      	nop
 8010494:	2000df6c 	.word	0x2000df6c
 8010498:	2000df7c 	.word	0x2000df7c
 801049c:	2000df9c 	.word	0x2000df9c
 80104a0:	2000df99 	.word	0x2000df99
 80104a4:	2000df94 	.word	0x2000df94
 80104a8:	2000df98 	.word	0x2000df98
 80104ac:	2000df96 	.word	0x2000df96
 80104b0:	2000dfa0 	.word	0x2000dfa0
 80104b4:	2000df60 	.word	0x2000df60
 80104b8:	0801a2bc 	.word	0x0801a2bc
 80104bc:	0801a470 	.word	0x0801a470
 80104c0:	0801a308 	.word	0x0801a308
          goto aborted;
 80104c4:	bf00      	nop
    tcp_input_pcb = NULL;
 80104c6:	4b27      	ldr	r3, [pc, #156]	@ (8010564 <tcp_input+0x7f4>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80104cc:	4b26      	ldr	r3, [pc, #152]	@ (8010568 <tcp_input+0x7f8>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80104d2:	4b26      	ldr	r3, [pc, #152]	@ (801056c <tcp_input+0x7fc>)
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d03f      	beq.n	801055a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80104da:	4b24      	ldr	r3, [pc, #144]	@ (801056c <tcp_input+0x7fc>)
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fd fb3e 	bl	800db60 <pbuf_free>
      inseg.p = NULL;
 80104e4:	4b21      	ldr	r3, [pc, #132]	@ (801056c <tcp_input+0x7fc>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80104ea:	e036      	b.n	801055a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80104ec:	4b20      	ldr	r3, [pc, #128]	@ (8010570 <tcp_input+0x800>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	899b      	ldrh	r3, [r3, #12]
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7fb ff87 	bl	800c408 <lwip_htons>
 80104fa:	4603      	mov	r3, r0
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	f003 0304 	and.w	r3, r3, #4
 8010502:	2b00      	cmp	r3, #0
 8010504:	d118      	bne.n	8010538 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010506:	4b1b      	ldr	r3, [pc, #108]	@ (8010574 <tcp_input+0x804>)
 8010508:	6819      	ldr	r1, [r3, #0]
 801050a:	4b1b      	ldr	r3, [pc, #108]	@ (8010578 <tcp_input+0x808>)
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	461a      	mov	r2, r3
 8010510:	4b1a      	ldr	r3, [pc, #104]	@ (801057c <tcp_input+0x80c>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010516:	4b16      	ldr	r3, [pc, #88]	@ (8010570 <tcp_input+0x800>)
 8010518:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801051a:	885b      	ldrh	r3, [r3, #2]
 801051c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801051e:	4a14      	ldr	r2, [pc, #80]	@ (8010570 <tcp_input+0x800>)
 8010520:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010522:	8812      	ldrh	r2, [r2, #0]
 8010524:	b292      	uxth	r2, r2
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	9301      	str	r3, [sp, #4]
 801052a:	4b15      	ldr	r3, [pc, #84]	@ (8010580 <tcp_input+0x810>)
 801052c:	9300      	str	r3, [sp, #0]
 801052e:	4b15      	ldr	r3, [pc, #84]	@ (8010584 <tcp_input+0x814>)
 8010530:	4602      	mov	r2, r0
 8010532:	2000      	movs	r0, #0
 8010534:	f003 fc6e 	bl	8013e14 <tcp_rst>
    pbuf_free(p);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7fd fb11 	bl	800db60 <pbuf_free>
  return;
 801053e:	e00c      	b.n	801055a <tcp_input+0x7ea>
    goto dropped;
 8010540:	bf00      	nop
 8010542:	e006      	b.n	8010552 <tcp_input+0x7e2>
    goto dropped;
 8010544:	bf00      	nop
 8010546:	e004      	b.n	8010552 <tcp_input+0x7e2>
    goto dropped;
 8010548:	bf00      	nop
 801054a:	e002      	b.n	8010552 <tcp_input+0x7e2>
      goto dropped;
 801054c:	bf00      	nop
 801054e:	e000      	b.n	8010552 <tcp_input+0x7e2>
      goto dropped;
 8010550:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7fd fb04 	bl	800db60 <pbuf_free>
 8010558:	e000      	b.n	801055c <tcp_input+0x7ec>
  return;
 801055a:	bf00      	nop
}
 801055c:	3724      	adds	r7, #36	@ 0x24
 801055e:	46bd      	mov	sp, r7
 8010560:	bd90      	pop	{r4, r7, pc}
 8010562:	bf00      	nop
 8010564:	2000dfa0 	.word	0x2000dfa0
 8010568:	2000df9c 	.word	0x2000df9c
 801056c:	2000df6c 	.word	0x2000df6c
 8010570:	2000df7c 	.word	0x2000df7c
 8010574:	2000df90 	.word	0x2000df90
 8010578:	2000df96 	.word	0x2000df96
 801057c:	2000df8c 	.word	0x2000df8c
 8010580:	20008650 	.word	0x20008650
 8010584:	20008654 	.word	0x20008654

08010588 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d106      	bne.n	80105a4 <tcp_input_delayed_close+0x1c>
 8010596:	4b17      	ldr	r3, [pc, #92]	@ (80105f4 <tcp_input_delayed_close+0x6c>)
 8010598:	f240 225a 	movw	r2, #602	@ 0x25a
 801059c:	4916      	ldr	r1, [pc, #88]	@ (80105f8 <tcp_input_delayed_close+0x70>)
 801059e:	4817      	ldr	r0, [pc, #92]	@ (80105fc <tcp_input_delayed_close+0x74>)
 80105a0:	f006 fff0 	bl	8017584 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80105a4:	4b16      	ldr	r3, [pc, #88]	@ (8010600 <tcp_input_delayed_close+0x78>)
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 0310 	and.w	r3, r3, #16
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d01c      	beq.n	80105ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	8b5b      	ldrh	r3, [r3, #26]
 80105b4:	f003 0310 	and.w	r3, r3, #16
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10d      	bne.n	80105d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d008      	beq.n	80105d8 <tcp_input_delayed_close+0x50>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105cc:	687a      	ldr	r2, [r7, #4]
 80105ce:	6912      	ldr	r2, [r2, #16]
 80105d0:	f06f 010e 	mvn.w	r1, #14
 80105d4:	4610      	mov	r0, r2
 80105d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105d8:	6879      	ldr	r1, [r7, #4]
 80105da:	480a      	ldr	r0, [pc, #40]	@ (8010604 <tcp_input_delayed_close+0x7c>)
 80105dc:	f7ff fa50 	bl	800fa80 <tcp_pcb_remove>
    tcp_free(pcb);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7fd fd69 	bl	800e0b8 <tcp_free>
    return 1;
 80105e6:	2301      	movs	r3, #1
 80105e8:	e000      	b.n	80105ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80105ea:	2300      	movs	r3, #0
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	3708      	adds	r7, #8
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}
 80105f4:	0801a2bc 	.word	0x0801a2bc
 80105f8:	0801a48c 	.word	0x0801a48c
 80105fc:	0801a308 	.word	0x0801a308
 8010600:	2000df99 	.word	0x2000df99
 8010604:	2000df60 	.word	0x2000df60

08010608 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010608:	b590      	push	{r4, r7, lr}
 801060a:	b08b      	sub	sp, #44	@ 0x2c
 801060c:	af04      	add	r7, sp, #16
 801060e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010610:	4b6f      	ldr	r3, [pc, #444]	@ (80107d0 <tcp_listen_input+0x1c8>)
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	f003 0304 	and.w	r3, r3, #4
 8010618:	2b00      	cmp	r3, #0
 801061a:	f040 80d2 	bne.w	80107c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d106      	bne.n	8010632 <tcp_listen_input+0x2a>
 8010624:	4b6b      	ldr	r3, [pc, #428]	@ (80107d4 <tcp_listen_input+0x1cc>)
 8010626:	f240 2281 	movw	r2, #641	@ 0x281
 801062a:	496b      	ldr	r1, [pc, #428]	@ (80107d8 <tcp_listen_input+0x1d0>)
 801062c:	486b      	ldr	r0, [pc, #428]	@ (80107dc <tcp_listen_input+0x1d4>)
 801062e:	f006 ffa9 	bl	8017584 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010632:	4b67      	ldr	r3, [pc, #412]	@ (80107d0 <tcp_listen_input+0x1c8>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	f003 0310 	and.w	r3, r3, #16
 801063a:	2b00      	cmp	r3, #0
 801063c:	d019      	beq.n	8010672 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801063e:	4b68      	ldr	r3, [pc, #416]	@ (80107e0 <tcp_listen_input+0x1d8>)
 8010640:	6819      	ldr	r1, [r3, #0]
 8010642:	4b68      	ldr	r3, [pc, #416]	@ (80107e4 <tcp_listen_input+0x1dc>)
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	4b67      	ldr	r3, [pc, #412]	@ (80107e8 <tcp_listen_input+0x1e0>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801064e:	4b67      	ldr	r3, [pc, #412]	@ (80107ec <tcp_listen_input+0x1e4>)
 8010650:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010652:	885b      	ldrh	r3, [r3, #2]
 8010654:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010656:	4a65      	ldr	r2, [pc, #404]	@ (80107ec <tcp_listen_input+0x1e4>)
 8010658:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801065a:	8812      	ldrh	r2, [r2, #0]
 801065c:	b292      	uxth	r2, r2
 801065e:	9202      	str	r2, [sp, #8]
 8010660:	9301      	str	r3, [sp, #4]
 8010662:	4b63      	ldr	r3, [pc, #396]	@ (80107f0 <tcp_listen_input+0x1e8>)
 8010664:	9300      	str	r3, [sp, #0]
 8010666:	4b63      	ldr	r3, [pc, #396]	@ (80107f4 <tcp_listen_input+0x1ec>)
 8010668:	4602      	mov	r2, r0
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f003 fbd2 	bl	8013e14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010670:	e0a9      	b.n	80107c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010672:	4b57      	ldr	r3, [pc, #348]	@ (80107d0 <tcp_listen_input+0x1c8>)
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	f003 0302 	and.w	r3, r3, #2
 801067a:	2b00      	cmp	r3, #0
 801067c:	f000 80a3 	beq.w	80107c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	7d5b      	ldrb	r3, [r3, #21]
 8010684:	4618      	mov	r0, r3
 8010686:	f7ff f859 	bl	800f73c <tcp_alloc>
 801068a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d111      	bne.n	80106b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	699b      	ldr	r3, [r3, #24]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00a      	beq.n	80106b0 <tcp_listen_input+0xa8>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	687a      	ldr	r2, [r7, #4]
 80106a0:	6910      	ldr	r0, [r2, #16]
 80106a2:	f04f 32ff 	mov.w	r2, #4294967295
 80106a6:	2100      	movs	r1, #0
 80106a8:	4798      	blx	r3
 80106aa:	4603      	mov	r3, r0
 80106ac:	73bb      	strb	r3, [r7, #14]
      return;
 80106ae:	e08b      	b.n	80107c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80106b0:	23f0      	movs	r3, #240	@ 0xf0
 80106b2:	73bb      	strb	r3, [r7, #14]
      return;
 80106b4:	e088      	b.n	80107c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80106b6:	4b50      	ldr	r3, [pc, #320]	@ (80107f8 <tcp_listen_input+0x1f0>)
 80106b8:	695a      	ldr	r2, [r3, #20]
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80106be:	4b4e      	ldr	r3, [pc, #312]	@ (80107f8 <tcp_listen_input+0x1f0>)
 80106c0:	691a      	ldr	r2, [r3, #16]
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8ada      	ldrh	r2, [r3, #22]
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80106ce:	4b47      	ldr	r3, [pc, #284]	@ (80107ec <tcp_listen_input+0x1e4>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	2203      	movs	r2, #3
 80106de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80106e0:	4b41      	ldr	r3, [pc, #260]	@ (80107e8 <tcp_listen_input+0x1e0>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80106f2:	6978      	ldr	r0, [r7, #20]
 80106f4:	f7ff fa58 	bl	800fba8 <tcp_next_iss>
 80106f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	693a      	ldr	r2, [r7, #16]
 80106fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	693a      	ldr	r2, [r7, #16]
 8010704:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	693a      	ldr	r2, [r7, #16]
 8010710:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010712:	4b35      	ldr	r3, [pc, #212]	@ (80107e8 <tcp_listen_input+0x1e0>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	1e5a      	subs	r2, r3, #1
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	691a      	ldr	r2, [r3, #16]
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	687a      	ldr	r2, [r7, #4]
 8010728:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	7a5b      	ldrb	r3, [r3, #9]
 801072e:	f003 030c 	and.w	r3, r3, #12
 8010732:	b2da      	uxtb	r2, r3
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	7a1a      	ldrb	r2, [r3, #8]
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010740:	4b2e      	ldr	r3, [pc, #184]	@ (80107fc <tcp_listen_input+0x1f4>)
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	60da      	str	r2, [r3, #12]
 8010748:	4a2c      	ldr	r2, [pc, #176]	@ (80107fc <tcp_listen_input+0x1f4>)
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	6013      	str	r3, [r2, #0]
 801074e:	f003 fd23 	bl	8014198 <tcp_timer_needed>
 8010752:	4b2b      	ldr	r3, [pc, #172]	@ (8010800 <tcp_listen_input+0x1f8>)
 8010754:	2201      	movs	r2, #1
 8010756:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010758:	6978      	ldr	r0, [r7, #20]
 801075a:	f001 fd8b 	bl	8012274 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801075e:	4b23      	ldr	r3, [pc, #140]	@ (80107ec <tcp_listen_input+0x1e4>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	89db      	ldrh	r3, [r3, #14]
 8010764:	b29a      	uxth	r2, r3
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	3304      	adds	r3, #4
 8010780:	4618      	mov	r0, r3
 8010782:	f005 fa5d 	bl	8015c40 <ip4_route>
 8010786:	4601      	mov	r1, r0
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	3304      	adds	r3, #4
 801078c:	461a      	mov	r2, r3
 801078e:	4620      	mov	r0, r4
 8010790:	f7ff fa30 	bl	800fbf4 <tcp_eff_send_mss_netif>
 8010794:	4603      	mov	r3, r0
 8010796:	461a      	mov	r2, r3
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801079c:	2112      	movs	r1, #18
 801079e:	6978      	ldr	r0, [r7, #20]
 80107a0:	f002 fc96 	bl	80130d0 <tcp_enqueue_flags>
 80107a4:	4603      	mov	r3, r0
 80107a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80107a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d004      	beq.n	80107ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80107b0:	2100      	movs	r1, #0
 80107b2:	6978      	ldr	r0, [r7, #20]
 80107b4:	f7fd ff06 	bl	800e5c4 <tcp_abandon>
      return;
 80107b8:	e006      	b.n	80107c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80107ba:	6978      	ldr	r0, [r7, #20]
 80107bc:	f002 fd76 	bl	80132ac <tcp_output>
  return;
 80107c0:	e001      	b.n	80107c6 <tcp_listen_input+0x1be>
    return;
 80107c2:	bf00      	nop
 80107c4:	e000      	b.n	80107c8 <tcp_listen_input+0x1c0>
  return;
 80107c6:	bf00      	nop
}
 80107c8:	371c      	adds	r7, #28
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd90      	pop	{r4, r7, pc}
 80107ce:	bf00      	nop
 80107d0:	2000df98 	.word	0x2000df98
 80107d4:	0801a2bc 	.word	0x0801a2bc
 80107d8:	0801a4b4 	.word	0x0801a4b4
 80107dc:	0801a308 	.word	0x0801a308
 80107e0:	2000df90 	.word	0x2000df90
 80107e4:	2000df96 	.word	0x2000df96
 80107e8:	2000df8c 	.word	0x2000df8c
 80107ec:	2000df7c 	.word	0x2000df7c
 80107f0:	20008650 	.word	0x20008650
 80107f4:	20008654 	.word	0x20008654
 80107f8:	20008640 	.word	0x20008640
 80107fc:	2000df60 	.word	0x2000df60
 8010800:	2000df68 	.word	0x2000df68

08010804 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af04      	add	r7, sp, #16
 801080a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801080c:	4b2f      	ldr	r3, [pc, #188]	@ (80108cc <tcp_timewait_input+0xc8>)
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	f003 0304 	and.w	r3, r3, #4
 8010814:	2b00      	cmp	r3, #0
 8010816:	d153      	bne.n	80108c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d106      	bne.n	801082c <tcp_timewait_input+0x28>
 801081e:	4b2c      	ldr	r3, [pc, #176]	@ (80108d0 <tcp_timewait_input+0xcc>)
 8010820:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010824:	492b      	ldr	r1, [pc, #172]	@ (80108d4 <tcp_timewait_input+0xd0>)
 8010826:	482c      	ldr	r0, [pc, #176]	@ (80108d8 <tcp_timewait_input+0xd4>)
 8010828:	f006 feac 	bl	8017584 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801082c:	4b27      	ldr	r3, [pc, #156]	@ (80108cc <tcp_timewait_input+0xc8>)
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b00      	cmp	r3, #0
 8010836:	d02a      	beq.n	801088e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010838:	4b28      	ldr	r3, [pc, #160]	@ (80108dc <tcp_timewait_input+0xd8>)
 801083a:	681a      	ldr	r2, [r3, #0]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	db2d      	blt.n	80108a2 <tcp_timewait_input+0x9e>
 8010846:	4b25      	ldr	r3, [pc, #148]	@ (80108dc <tcp_timewait_input+0xd8>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801084e:	6879      	ldr	r1, [r7, #4]
 8010850:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010852:	440b      	add	r3, r1
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	2b00      	cmp	r3, #0
 8010858:	dc23      	bgt.n	80108a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801085a:	4b21      	ldr	r3, [pc, #132]	@ (80108e0 <tcp_timewait_input+0xdc>)
 801085c:	6819      	ldr	r1, [r3, #0]
 801085e:	4b21      	ldr	r3, [pc, #132]	@ (80108e4 <tcp_timewait_input+0xe0>)
 8010860:	881b      	ldrh	r3, [r3, #0]
 8010862:	461a      	mov	r2, r3
 8010864:	4b1d      	ldr	r3, [pc, #116]	@ (80108dc <tcp_timewait_input+0xd8>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801086a:	4b1f      	ldr	r3, [pc, #124]	@ (80108e8 <tcp_timewait_input+0xe4>)
 801086c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801086e:	885b      	ldrh	r3, [r3, #2]
 8010870:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010872:	4a1d      	ldr	r2, [pc, #116]	@ (80108e8 <tcp_timewait_input+0xe4>)
 8010874:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010876:	8812      	ldrh	r2, [r2, #0]
 8010878:	b292      	uxth	r2, r2
 801087a:	9202      	str	r2, [sp, #8]
 801087c:	9301      	str	r3, [sp, #4]
 801087e:	4b1b      	ldr	r3, [pc, #108]	@ (80108ec <tcp_timewait_input+0xe8>)
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	4b1b      	ldr	r3, [pc, #108]	@ (80108f0 <tcp_timewait_input+0xec>)
 8010884:	4602      	mov	r2, r0
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f003 fac4 	bl	8013e14 <tcp_rst>
      return;
 801088c:	e01b      	b.n	80108c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801088e:	4b0f      	ldr	r3, [pc, #60]	@ (80108cc <tcp_timewait_input+0xc8>)
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	f003 0301 	and.w	r3, r3, #1
 8010896:	2b00      	cmp	r3, #0
 8010898:	d003      	beq.n	80108a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801089a:	4b16      	ldr	r3, [pc, #88]	@ (80108f4 <tcp_timewait_input+0xf0>)
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80108a2:	4b10      	ldr	r3, [pc, #64]	@ (80108e4 <tcp_timewait_input+0xe0>)
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00c      	beq.n	80108c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8b5b      	ldrh	r3, [r3, #26]
 80108ae:	f043 0302 	orr.w	r3, r3, #2
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f002 fcf7 	bl	80132ac <tcp_output>
  }
  return;
 80108be:	e001      	b.n	80108c4 <tcp_timewait_input+0xc0>
    return;
 80108c0:	bf00      	nop
 80108c2:	e000      	b.n	80108c6 <tcp_timewait_input+0xc2>
  return;
 80108c4:	bf00      	nop
}
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	2000df98 	.word	0x2000df98
 80108d0:	0801a2bc 	.word	0x0801a2bc
 80108d4:	0801a4d4 	.word	0x0801a4d4
 80108d8:	0801a308 	.word	0x0801a308
 80108dc:	2000df8c 	.word	0x2000df8c
 80108e0:	2000df90 	.word	0x2000df90
 80108e4:	2000df96 	.word	0x2000df96
 80108e8:	2000df7c 	.word	0x2000df7c
 80108ec:	20008650 	.word	0x20008650
 80108f0:	20008654 	.word	0x20008654
 80108f4:	2000df54 	.word	0x2000df54

080108f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b08d      	sub	sp, #52	@ 0x34
 80108fc:	af04      	add	r7, sp, #16
 80108fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d106      	bne.n	801091c <tcp_process+0x24>
 801090e:	4b9d      	ldr	r3, [pc, #628]	@ (8010b84 <tcp_process+0x28c>)
 8010910:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010914:	499c      	ldr	r1, [pc, #624]	@ (8010b88 <tcp_process+0x290>)
 8010916:	489d      	ldr	r0, [pc, #628]	@ (8010b8c <tcp_process+0x294>)
 8010918:	f006 fe34 	bl	8017584 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801091c:	4b9c      	ldr	r3, [pc, #624]	@ (8010b90 <tcp_process+0x298>)
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	f003 0304 	and.w	r3, r3, #4
 8010924:	2b00      	cmp	r3, #0
 8010926:	d04e      	beq.n	80109c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	7d1b      	ldrb	r3, [r3, #20]
 801092c:	2b02      	cmp	r3, #2
 801092e:	d108      	bne.n	8010942 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010934:	4b97      	ldr	r3, [pc, #604]	@ (8010b94 <tcp_process+0x29c>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	429a      	cmp	r2, r3
 801093a:	d123      	bne.n	8010984 <tcp_process+0x8c>
        acceptable = 1;
 801093c:	2301      	movs	r3, #1
 801093e:	76fb      	strb	r3, [r7, #27]
 8010940:	e020      	b.n	8010984 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010946:	4b94      	ldr	r3, [pc, #592]	@ (8010b98 <tcp_process+0x2a0>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d102      	bne.n	8010954 <tcp_process+0x5c>
        acceptable = 1;
 801094e:	2301      	movs	r3, #1
 8010950:	76fb      	strb	r3, [r7, #27]
 8010952:	e017      	b.n	8010984 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010954:	4b90      	ldr	r3, [pc, #576]	@ (8010b98 <tcp_process+0x2a0>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	db10      	blt.n	8010984 <tcp_process+0x8c>
 8010962:	4b8d      	ldr	r3, [pc, #564]	@ (8010b98 <tcp_process+0x2a0>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801096a:	6879      	ldr	r1, [r7, #4]
 801096c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801096e:	440b      	add	r3, r1
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	dc06      	bgt.n	8010984 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	8b5b      	ldrh	r3, [r3, #26]
 801097a:	f043 0302 	orr.w	r3, r3, #2
 801097e:	b29a      	uxth	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010984:	7efb      	ldrb	r3, [r7, #27]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d01b      	beq.n	80109c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	7d1b      	ldrb	r3, [r3, #20]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d106      	bne.n	80109a0 <tcp_process+0xa8>
 8010992:	4b7c      	ldr	r3, [pc, #496]	@ (8010b84 <tcp_process+0x28c>)
 8010994:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010998:	4980      	ldr	r1, [pc, #512]	@ (8010b9c <tcp_process+0x2a4>)
 801099a:	487c      	ldr	r0, [pc, #496]	@ (8010b8c <tcp_process+0x294>)
 801099c:	f006 fdf2 	bl	8017584 <iprintf>
      recv_flags |= TF_RESET;
 80109a0:	4b7f      	ldr	r3, [pc, #508]	@ (8010ba0 <tcp_process+0x2a8>)
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	f043 0308 	orr.w	r3, r3, #8
 80109a8:	b2da      	uxtb	r2, r3
 80109aa:	4b7d      	ldr	r3, [pc, #500]	@ (8010ba0 <tcp_process+0x2a8>)
 80109ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	8b5b      	ldrh	r3, [r3, #26]
 80109b2:	f023 0301 	bic.w	r3, r3, #1
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80109bc:	f06f 030d 	mvn.w	r3, #13
 80109c0:	e37a      	b.n	80110b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80109c2:	2300      	movs	r3, #0
 80109c4:	e378      	b.n	80110b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80109c6:	4b72      	ldr	r3, [pc, #456]	@ (8010b90 <tcp_process+0x298>)
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	f003 0302 	and.w	r3, r3, #2
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d010      	beq.n	80109f4 <tcp_process+0xfc>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	7d1b      	ldrb	r3, [r3, #20]
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d00c      	beq.n	80109f4 <tcp_process+0xfc>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7d1b      	ldrb	r3, [r3, #20]
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d008      	beq.n	80109f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8b5b      	ldrh	r3, [r3, #26]
 80109e6:	f043 0302 	orr.w	r3, r3, #2
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80109f0:	2300      	movs	r3, #0
 80109f2:	e361      	b.n	80110b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	8b5b      	ldrh	r3, [r3, #26]
 80109f8:	f003 0310 	and.w	r3, r3, #16
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d103      	bne.n	8010a08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010a00:	4b68      	ldr	r3, [pc, #416]	@ (8010ba4 <tcp_process+0x2ac>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f001 fc2b 	bl	8012274 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	7d1b      	ldrb	r3, [r3, #20]
 8010a22:	3b02      	subs	r3, #2
 8010a24:	2b07      	cmp	r3, #7
 8010a26:	f200 8337 	bhi.w	8011098 <tcp_process+0x7a0>
 8010a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8010a30 <tcp_process+0x138>)
 8010a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a30:	08010a51 	.word	0x08010a51
 8010a34:	08010c81 	.word	0x08010c81
 8010a38:	08010df9 	.word	0x08010df9
 8010a3c:	08010e23 	.word	0x08010e23
 8010a40:	08010f47 	.word	0x08010f47
 8010a44:	08010df9 	.word	0x08010df9
 8010a48:	08010fd3 	.word	0x08010fd3
 8010a4c:	08011063 	.word	0x08011063
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010a50:	4b4f      	ldr	r3, [pc, #316]	@ (8010b90 <tcp_process+0x298>)
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	f003 0310 	and.w	r3, r3, #16
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 80e4 	beq.w	8010c26 <tcp_process+0x32e>
 8010a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8010b90 <tcp_process+0x298>)
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	f003 0302 	and.w	r3, r3, #2
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 80dd 	beq.w	8010c26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	4b48      	ldr	r3, [pc, #288]	@ (8010b94 <tcp_process+0x29c>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	f040 80d5 	bne.w	8010c26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a7c:	4b46      	ldr	r3, [pc, #280]	@ (8010b98 <tcp_process+0x2a0>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	1c5a      	adds	r2, r3, #1
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010a8e:	4b41      	ldr	r3, [pc, #260]	@ (8010b94 <tcp_process+0x29c>)
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a96:	4b44      	ldr	r3, [pc, #272]	@ (8010ba8 <tcp_process+0x2b0>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	89db      	ldrh	r3, [r3, #14]
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ab0:	4b39      	ldr	r3, [pc, #228]	@ (8010b98 <tcp_process+0x2a0>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	1e5a      	subs	r2, r3, #1
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2204      	movs	r2, #4
 8010abe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f005 f8b9 	bl	8015c40 <ip4_route>
 8010ace:	4601      	mov	r1, r0
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	461a      	mov	r2, r3
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f7ff f88c 	bl	800fbf4 <tcp_eff_send_mss_netif>
 8010adc:	4603      	mov	r3, r0
 8010ade:	461a      	mov	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ae8:	009a      	lsls	r2, r3, #2
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010aee:	005b      	lsls	r3, r3, #1
 8010af0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010af4:	428b      	cmp	r3, r1
 8010af6:	bf38      	it	cc
 8010af8:	460b      	movcc	r3, r1
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d204      	bcs.n	8010b08 <tcp_process+0x210>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	e00d      	b.n	8010b24 <tcp_process+0x22c>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010b12:	4293      	cmp	r3, r2
 8010b14:	d904      	bls.n	8010b20 <tcp_process+0x228>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b1a:	005b      	lsls	r3, r3, #1
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	e001      	b.n	8010b24 <tcp_process+0x22c>
 8010b20:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d106      	bne.n	8010b42 <tcp_process+0x24a>
 8010b34:	4b13      	ldr	r3, [pc, #76]	@ (8010b84 <tcp_process+0x28c>)
 8010b36:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010b3a:	491c      	ldr	r1, [pc, #112]	@ (8010bac <tcp_process+0x2b4>)
 8010b3c:	4813      	ldr	r0, [pc, #76]	@ (8010b8c <tcp_process+0x294>)
 8010b3e:	f006 fd21 	bl	8017584 <iprintf>
        --pcb->snd_queuelen;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b56:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d12a      	bne.n	8010bb4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b62:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d106      	bne.n	8010b78 <tcp_process+0x280>
 8010b6a:	4b06      	ldr	r3, [pc, #24]	@ (8010b84 <tcp_process+0x28c>)
 8010b6c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010b70:	490f      	ldr	r1, [pc, #60]	@ (8010bb0 <tcp_process+0x2b8>)
 8010b72:	4806      	ldr	r0, [pc, #24]	@ (8010b8c <tcp_process+0x294>)
 8010b74:	f006 fd06 	bl	8017584 <iprintf>
          pcb->unsent = rseg->next;
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010b80:	e01c      	b.n	8010bbc <tcp_process+0x2c4>
 8010b82:	bf00      	nop
 8010b84:	0801a2bc 	.word	0x0801a2bc
 8010b88:	0801a4f4 	.word	0x0801a4f4
 8010b8c:	0801a308 	.word	0x0801a308
 8010b90:	2000df98 	.word	0x2000df98
 8010b94:	2000df90 	.word	0x2000df90
 8010b98:	2000df8c 	.word	0x2000df8c
 8010b9c:	0801a510 	.word	0x0801a510
 8010ba0:	2000df99 	.word	0x2000df99
 8010ba4:	2000df54 	.word	0x2000df54
 8010ba8:	2000df7c 	.word	0x2000df7c
 8010bac:	0801a530 	.word	0x0801a530
 8010bb0:	0801a548 	.word	0x0801a548
        } else {
          pcb->unacked = rseg->next;
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010bbc:	69f8      	ldr	r0, [r7, #28]
 8010bbe:	f7fe fc54 	bl	800f46a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d104      	bne.n	8010bd4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010bd0:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010bd2:	e006      	b.n	8010be2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d00a      	beq.n	8010c02 <tcp_process+0x30a>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	6910      	ldr	r0, [r2, #16]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	4798      	blx	r3
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	76bb      	strb	r3, [r7, #26]
 8010c00:	e001      	b.n	8010c06 <tcp_process+0x30e>
 8010c02:	2300      	movs	r3, #0
 8010c04:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010c06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c0a:	f113 0f0d 	cmn.w	r3, #13
 8010c0e:	d102      	bne.n	8010c16 <tcp_process+0x31e>
          return ERR_ABRT;
 8010c10:	f06f 030c 	mvn.w	r3, #12
 8010c14:	e250      	b.n	80110b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	8b5b      	ldrh	r3, [r3, #26]
 8010c1a:	f043 0302 	orr.w	r3, r3, #2
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010c24:	e23a      	b.n	801109c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010c26:	4b98      	ldr	r3, [pc, #608]	@ (8010e88 <tcp_process+0x590>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 0310 	and.w	r3, r3, #16
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 8234 	beq.w	801109c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c34:	4b95      	ldr	r3, [pc, #596]	@ (8010e8c <tcp_process+0x594>)
 8010c36:	6819      	ldr	r1, [r3, #0]
 8010c38:	4b95      	ldr	r3, [pc, #596]	@ (8010e90 <tcp_process+0x598>)
 8010c3a:	881b      	ldrh	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	4b95      	ldr	r3, [pc, #596]	@ (8010e94 <tcp_process+0x59c>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c44:	4b94      	ldr	r3, [pc, #592]	@ (8010e98 <tcp_process+0x5a0>)
 8010c46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c48:	885b      	ldrh	r3, [r3, #2]
 8010c4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c4c:	4a92      	ldr	r2, [pc, #584]	@ (8010e98 <tcp_process+0x5a0>)
 8010c4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c50:	8812      	ldrh	r2, [r2, #0]
 8010c52:	b292      	uxth	r2, r2
 8010c54:	9202      	str	r2, [sp, #8]
 8010c56:	9301      	str	r3, [sp, #4]
 8010c58:	4b90      	ldr	r3, [pc, #576]	@ (8010e9c <tcp_process+0x5a4>)
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	4b90      	ldr	r3, [pc, #576]	@ (8010ea0 <tcp_process+0x5a8>)
 8010c5e:	4602      	mov	r2, r0
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f003 f8d7 	bl	8013e14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010c6c:	2b05      	cmp	r3, #5
 8010c6e:	f200 8215 	bhi.w	801109c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f002 fea3 	bl	80139c4 <tcp_rexmit_rto>
      break;
 8010c7e:	e20d      	b.n	801109c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c80:	4b81      	ldr	r3, [pc, #516]	@ (8010e88 <tcp_process+0x590>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	f003 0310 	and.w	r3, r3, #16
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f000 80a1 	beq.w	8010dd0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8010e8c <tcp_process+0x594>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	db7e      	blt.n	8010d9c <tcp_process+0x4a4>
 8010c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8010e8c <tcp_process+0x594>)
 8010ca0:	681a      	ldr	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc77      	bgt.n	8010d9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2204      	movs	r2, #4
 8010cb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d102      	bne.n	8010cc0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010cba:	23fa      	movs	r3, #250	@ 0xfa
 8010cbc:	76bb      	strb	r3, [r7, #26]
 8010cbe:	e01d      	b.n	8010cfc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cc4:	699b      	ldr	r3, [r3, #24]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <tcp_process+0x3e0>
 8010cca:	4b76      	ldr	r3, [pc, #472]	@ (8010ea4 <tcp_process+0x5ac>)
 8010ccc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010cd0:	4975      	ldr	r1, [pc, #468]	@ (8010ea8 <tcp_process+0x5b0>)
 8010cd2:	4876      	ldr	r0, [pc, #472]	@ (8010eac <tcp_process+0x5b4>)
 8010cd4:	f006 fc56 	bl	8017584 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010cdc:	699b      	ldr	r3, [r3, #24]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00a      	beq.n	8010cf8 <tcp_process+0x400>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ce6:	699b      	ldr	r3, [r3, #24]
 8010ce8:	687a      	ldr	r2, [r7, #4]
 8010cea:	6910      	ldr	r0, [r2, #16]
 8010cec:	2200      	movs	r2, #0
 8010cee:	6879      	ldr	r1, [r7, #4]
 8010cf0:	4798      	blx	r3
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	76bb      	strb	r3, [r7, #26]
 8010cf6:	e001      	b.n	8010cfc <tcp_process+0x404>
 8010cf8:	23f0      	movs	r3, #240	@ 0xf0
 8010cfa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010cfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00a      	beq.n	8010d1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d08:	f113 0f0d 	cmn.w	r3, #13
 8010d0c:	d002      	beq.n	8010d14 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7fd fd16 	bl	800e740 <tcp_abort>
            }
            return ERR_ABRT;
 8010d14:	f06f 030c 	mvn.w	r3, #12
 8010d18:	e1ce      	b.n	80110b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 fae0 	bl	80112e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010d20:	4b63      	ldr	r3, [pc, #396]	@ (8010eb0 <tcp_process+0x5b8>)
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d005      	beq.n	8010d34 <tcp_process+0x43c>
            recv_acked--;
 8010d28:	4b61      	ldr	r3, [pc, #388]	@ (8010eb0 <tcp_process+0x5b8>)
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	4b5f      	ldr	r3, [pc, #380]	@ (8010eb0 <tcp_process+0x5b8>)
 8010d32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d38:	009a      	lsls	r2, r3, #2
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010d44:	428b      	cmp	r3, r1
 8010d46:	bf38      	it	cc
 8010d48:	460b      	movcc	r3, r1
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d204      	bcs.n	8010d58 <tcp_process+0x460>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	e00d      	b.n	8010d74 <tcp_process+0x47c>
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d904      	bls.n	8010d70 <tcp_process+0x478>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	e001      	b.n	8010d74 <tcp_process+0x47c>
 8010d70:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8010eb4 <tcp_process+0x5bc>)
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d037      	beq.n	8010df6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	8b5b      	ldrh	r3, [r3, #26]
 8010d8a:	f043 0302 	orr.w	r3, r3, #2
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2207      	movs	r2, #7
 8010d98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010d9a:	e02c      	b.n	8010df6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8010e8c <tcp_process+0x594>)
 8010d9e:	6819      	ldr	r1, [r3, #0]
 8010da0:	4b3b      	ldr	r3, [pc, #236]	@ (8010e90 <tcp_process+0x598>)
 8010da2:	881b      	ldrh	r3, [r3, #0]
 8010da4:	461a      	mov	r2, r3
 8010da6:	4b3b      	ldr	r3, [pc, #236]	@ (8010e94 <tcp_process+0x59c>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dac:	4b3a      	ldr	r3, [pc, #232]	@ (8010e98 <tcp_process+0x5a0>)
 8010dae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db0:	885b      	ldrh	r3, [r3, #2]
 8010db2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010db4:	4a38      	ldr	r2, [pc, #224]	@ (8010e98 <tcp_process+0x5a0>)
 8010db6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db8:	8812      	ldrh	r2, [r2, #0]
 8010dba:	b292      	uxth	r2, r2
 8010dbc:	9202      	str	r2, [sp, #8]
 8010dbe:	9301      	str	r3, [sp, #4]
 8010dc0:	4b36      	ldr	r3, [pc, #216]	@ (8010e9c <tcp_process+0x5a4>)
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	4b36      	ldr	r3, [pc, #216]	@ (8010ea0 <tcp_process+0x5a8>)
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f003 f823 	bl	8013e14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010dce:	e167      	b.n	80110a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8010e88 <tcp_process+0x590>)
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	f003 0302 	and.w	r3, r3, #2
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	f000 8161 	beq.w	80110a0 <tcp_process+0x7a8>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de2:	1e5a      	subs	r2, r3, #1
 8010de4:	4b2b      	ldr	r3, [pc, #172]	@ (8010e94 <tcp_process+0x59c>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	429a      	cmp	r2, r3
 8010dea:	f040 8159 	bne.w	80110a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f002 fe0a 	bl	8013a08 <tcp_rexmit>
      break;
 8010df4:	e154      	b.n	80110a0 <tcp_process+0x7a8>
 8010df6:	e153      	b.n	80110a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f000 fa71 	bl	80112e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8010eb4 <tcp_process+0x5bc>)
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 0320 	and.w	r3, r3, #32
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f000 814c 	beq.w	80110a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	8b5b      	ldrh	r3, [r3, #26]
 8010e10:	f043 0302 	orr.w	r3, r3, #2
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2207      	movs	r2, #7
 8010e1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010e20:	e140      	b.n	80110a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa5c 	bl	80112e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e28:	4b22      	ldr	r3, [pc, #136]	@ (8010eb4 <tcp_process+0x5bc>)
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	f003 0320 	and.w	r3, r3, #32
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d071      	beq.n	8010f18 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e34:	4b14      	ldr	r3, [pc, #80]	@ (8010e88 <tcp_process+0x590>)
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	f003 0310 	and.w	r3, r3, #16
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d060      	beq.n	8010f02 <tcp_process+0x60a>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e44:	4b11      	ldr	r3, [pc, #68]	@ (8010e8c <tcp_process+0x594>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	d15a      	bne.n	8010f02 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d156      	bne.n	8010f02 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	8b5b      	ldrh	r3, [r3, #26]
 8010e58:	f043 0302 	orr.w	r3, r3, #2
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7fe fdbc 	bl	800f9e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e68:	4b13      	ldr	r3, [pc, #76]	@ (8010eb8 <tcp_process+0x5c0>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d105      	bne.n	8010e7e <tcp_process+0x586>
 8010e72:	4b11      	ldr	r3, [pc, #68]	@ (8010eb8 <tcp_process+0x5c0>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	4a0f      	ldr	r2, [pc, #60]	@ (8010eb8 <tcp_process+0x5c0>)
 8010e7a:	6013      	str	r3, [r2, #0]
 8010e7c:	e02e      	b.n	8010edc <tcp_process+0x5e4>
 8010e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8010eb8 <tcp_process+0x5c0>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	e027      	b.n	8010ed6 <tcp_process+0x5de>
 8010e86:	bf00      	nop
 8010e88:	2000df98 	.word	0x2000df98
 8010e8c:	2000df90 	.word	0x2000df90
 8010e90:	2000df96 	.word	0x2000df96
 8010e94:	2000df8c 	.word	0x2000df8c
 8010e98:	2000df7c 	.word	0x2000df7c
 8010e9c:	20008650 	.word	0x20008650
 8010ea0:	20008654 	.word	0x20008654
 8010ea4:	0801a2bc 	.word	0x0801a2bc
 8010ea8:	0801a55c 	.word	0x0801a55c
 8010eac:	0801a308 	.word	0x0801a308
 8010eb0:	2000df94 	.word	0x2000df94
 8010eb4:	2000df99 	.word	0x2000df99
 8010eb8:	2000df60 	.word	0x2000df60
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	429a      	cmp	r2, r3
 8010ec4:	d104      	bne.n	8010ed0 <tcp_process+0x5d8>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	68da      	ldr	r2, [r3, #12]
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	60da      	str	r2, [r3, #12]
 8010ece:	e005      	b.n	8010edc <tcp_process+0x5e4>
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	617b      	str	r3, [r7, #20]
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d1ef      	bne.n	8010ebc <tcp_process+0x5c4>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	60da      	str	r2, [r3, #12]
 8010ee2:	4b77      	ldr	r3, [pc, #476]	@ (80110c0 <tcp_process+0x7c8>)
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	220a      	movs	r2, #10
 8010eec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010eee:	4b75      	ldr	r3, [pc, #468]	@ (80110c4 <tcp_process+0x7cc>)
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	60da      	str	r2, [r3, #12]
 8010ef6:	4a73      	ldr	r2, [pc, #460]	@ (80110c4 <tcp_process+0x7cc>)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6013      	str	r3, [r2, #0]
 8010efc:	f003 f94c 	bl	8014198 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010f00:	e0d2      	b.n	80110a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8b5b      	ldrh	r3, [r3, #26]
 8010f06:	f043 0302 	orr.w	r3, r3, #2
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2208      	movs	r2, #8
 8010f14:	751a      	strb	r2, [r3, #20]
      break;
 8010f16:	e0c7      	b.n	80110a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f18:	4b6b      	ldr	r3, [pc, #428]	@ (80110c8 <tcp_process+0x7d0>)
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	f003 0310 	and.w	r3, r3, #16
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 80c1 	beq.w	80110a8 <tcp_process+0x7b0>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f2a:	4b68      	ldr	r3, [pc, #416]	@ (80110cc <tcp_process+0x7d4>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	f040 80ba 	bne.w	80110a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f040 80b5 	bne.w	80110a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2206      	movs	r2, #6
 8010f42:	751a      	strb	r2, [r3, #20]
      break;
 8010f44:	e0b0      	b.n	80110a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 f9ca 	bl	80112e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f4c:	4b60      	ldr	r3, [pc, #384]	@ (80110d0 <tcp_process+0x7d8>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	f003 0320 	and.w	r3, r3, #32
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 80a9 	beq.w	80110ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	8b5b      	ldrh	r3, [r3, #26]
 8010f5e:	f043 0302 	orr.w	r3, r3, #2
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f7fe fd39 	bl	800f9e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f6e:	4b59      	ldr	r3, [pc, #356]	@ (80110d4 <tcp_process+0x7dc>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d105      	bne.n	8010f84 <tcp_process+0x68c>
 8010f78:	4b56      	ldr	r3, [pc, #344]	@ (80110d4 <tcp_process+0x7dc>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	4a55      	ldr	r2, [pc, #340]	@ (80110d4 <tcp_process+0x7dc>)
 8010f80:	6013      	str	r3, [r2, #0]
 8010f82:	e013      	b.n	8010fac <tcp_process+0x6b4>
 8010f84:	4b53      	ldr	r3, [pc, #332]	@ (80110d4 <tcp_process+0x7dc>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	613b      	str	r3, [r7, #16]
 8010f8a:	e00c      	b.n	8010fa6 <tcp_process+0x6ae>
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	687a      	ldr	r2, [r7, #4]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d104      	bne.n	8010fa0 <tcp_process+0x6a8>
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	68da      	ldr	r2, [r3, #12]
 8010f9a:	693b      	ldr	r3, [r7, #16]
 8010f9c:	60da      	str	r2, [r3, #12]
 8010f9e:	e005      	b.n	8010fac <tcp_process+0x6b4>
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1ef      	bne.n	8010f8c <tcp_process+0x694>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	60da      	str	r2, [r3, #12]
 8010fb2:	4b43      	ldr	r3, [pc, #268]	@ (80110c0 <tcp_process+0x7c8>)
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	220a      	movs	r2, #10
 8010fbc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010fbe:	4b41      	ldr	r3, [pc, #260]	@ (80110c4 <tcp_process+0x7cc>)
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	60da      	str	r2, [r3, #12]
 8010fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80110c4 <tcp_process+0x7cc>)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6013      	str	r3, [r2, #0]
 8010fcc:	f003 f8e4 	bl	8014198 <tcp_timer_needed>
      }
      break;
 8010fd0:	e06c      	b.n	80110ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f984 	bl	80112e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80110c8 <tcp_process+0x7d0>)
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	f003 0310 	and.w	r3, r3, #16
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d065      	beq.n	80110b0 <tcp_process+0x7b8>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010fe8:	4b38      	ldr	r3, [pc, #224]	@ (80110cc <tcp_process+0x7d4>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d15f      	bne.n	80110b0 <tcp_process+0x7b8>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d15b      	bne.n	80110b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7fe fcf1 	bl	800f9e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010ffe:	4b35      	ldr	r3, [pc, #212]	@ (80110d4 <tcp_process+0x7dc>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	429a      	cmp	r2, r3
 8011006:	d105      	bne.n	8011014 <tcp_process+0x71c>
 8011008:	4b32      	ldr	r3, [pc, #200]	@ (80110d4 <tcp_process+0x7dc>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	68db      	ldr	r3, [r3, #12]
 801100e:	4a31      	ldr	r2, [pc, #196]	@ (80110d4 <tcp_process+0x7dc>)
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	e013      	b.n	801103c <tcp_process+0x744>
 8011014:	4b2f      	ldr	r3, [pc, #188]	@ (80110d4 <tcp_process+0x7dc>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	60fb      	str	r3, [r7, #12]
 801101a:	e00c      	b.n	8011036 <tcp_process+0x73e>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	429a      	cmp	r2, r3
 8011024:	d104      	bne.n	8011030 <tcp_process+0x738>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68da      	ldr	r2, [r3, #12]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	60da      	str	r2, [r3, #12]
 801102e:	e005      	b.n	801103c <tcp_process+0x744>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	68db      	ldr	r3, [r3, #12]
 8011034:	60fb      	str	r3, [r7, #12]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1ef      	bne.n	801101c <tcp_process+0x724>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	60da      	str	r2, [r3, #12]
 8011042:	4b1f      	ldr	r3, [pc, #124]	@ (80110c0 <tcp_process+0x7c8>)
 8011044:	2201      	movs	r2, #1
 8011046:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	220a      	movs	r2, #10
 801104c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801104e:	4b1d      	ldr	r3, [pc, #116]	@ (80110c4 <tcp_process+0x7cc>)
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	60da      	str	r2, [r3, #12]
 8011056:	4a1b      	ldr	r2, [pc, #108]	@ (80110c4 <tcp_process+0x7cc>)
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	f003 f89c 	bl	8014198 <tcp_timer_needed>
      }
      break;
 8011060:	e026      	b.n	80110b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 f93c 	bl	80112e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011068:	4b17      	ldr	r3, [pc, #92]	@ (80110c8 <tcp_process+0x7d0>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f003 0310 	and.w	r3, r3, #16
 8011070:	2b00      	cmp	r3, #0
 8011072:	d01f      	beq.n	80110b4 <tcp_process+0x7bc>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011078:	4b14      	ldr	r3, [pc, #80]	@ (80110cc <tcp_process+0x7d4>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	429a      	cmp	r2, r3
 801107e:	d119      	bne.n	80110b4 <tcp_process+0x7bc>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011084:	2b00      	cmp	r3, #0
 8011086:	d115      	bne.n	80110b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011088:	4b11      	ldr	r3, [pc, #68]	@ (80110d0 <tcp_process+0x7d8>)
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	f043 0310 	orr.w	r3, r3, #16
 8011090:	b2da      	uxtb	r2, r3
 8011092:	4b0f      	ldr	r3, [pc, #60]	@ (80110d0 <tcp_process+0x7d8>)
 8011094:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011096:	e00d      	b.n	80110b4 <tcp_process+0x7bc>
    default:
      break;
 8011098:	bf00      	nop
 801109a:	e00c      	b.n	80110b6 <tcp_process+0x7be>
      break;
 801109c:	bf00      	nop
 801109e:	e00a      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110a0:	bf00      	nop
 80110a2:	e008      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110a4:	bf00      	nop
 80110a6:	e006      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110a8:	bf00      	nop
 80110aa:	e004      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110ac:	bf00      	nop
 80110ae:	e002      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110b0:	bf00      	nop
 80110b2:	e000      	b.n	80110b6 <tcp_process+0x7be>
      break;
 80110b4:	bf00      	nop
  }
  return ERR_OK;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3724      	adds	r7, #36	@ 0x24
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd90      	pop	{r4, r7, pc}
 80110c0:	2000df68 	.word	0x2000df68
 80110c4:	2000df64 	.word	0x2000df64
 80110c8:	2000df98 	.word	0x2000df98
 80110cc:	2000df90 	.word	0x2000df90
 80110d0:	2000df99 	.word	0x2000df99
 80110d4:	2000df60 	.word	0x2000df60

080110d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80110d8:	b590      	push	{r4, r7, lr}
 80110da:	b085      	sub	sp, #20
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d106      	bne.n	80110f6 <tcp_oos_insert_segment+0x1e>
 80110e8:	4b3b      	ldr	r3, [pc, #236]	@ (80111d8 <tcp_oos_insert_segment+0x100>)
 80110ea:	f240 421f 	movw	r2, #1055	@ 0x41f
 80110ee:	493b      	ldr	r1, [pc, #236]	@ (80111dc <tcp_oos_insert_segment+0x104>)
 80110f0:	483b      	ldr	r0, [pc, #236]	@ (80111e0 <tcp_oos_insert_segment+0x108>)
 80110f2:	f006 fa47 	bl	8017584 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	899b      	ldrh	r3, [r3, #12]
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fb f982 	bl	800c408 <lwip_htons>
 8011104:	4603      	mov	r3, r0
 8011106:	b2db      	uxtb	r3, r3
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	2b00      	cmp	r3, #0
 801110e:	d028      	beq.n	8011162 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011110:	6838      	ldr	r0, [r7, #0]
 8011112:	f7fe f995 	bl	800f440 <tcp_segs_free>
    next = NULL;
 8011116:	2300      	movs	r3, #0
 8011118:	603b      	str	r3, [r7, #0]
 801111a:	e056      	b.n	80111ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	b29b      	uxth	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f7fb f96f 	bl	800c408 <lwip_htons>
 801112a:	4603      	mov	r3, r0
 801112c:	b2db      	uxtb	r3, r3
 801112e:	f003 0301 	and.w	r3, r3, #1
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00d      	beq.n	8011152 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	899b      	ldrh	r3, [r3, #12]
 801113c:	b29c      	uxth	r4, r3
 801113e:	2001      	movs	r0, #1
 8011140:	f7fb f962 	bl	800c408 <lwip_htons>
 8011144:	4603      	mov	r3, r0
 8011146:	461a      	mov	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	4322      	orrs	r2, r4
 801114e:	b292      	uxth	r2, r2
 8011150:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7fe f984 	bl	800f46a <tcp_seg_free>
    while (next &&
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00e      	beq.n	8011186 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	891b      	ldrh	r3, [r3, #8]
 801116c:	461a      	mov	r2, r3
 801116e:	4b1d      	ldr	r3, [pc, #116]	@ (80111e4 <tcp_oos_insert_segment+0x10c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	441a      	add	r2, r3
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	8909      	ldrh	r1, [r1, #8]
 801117e:	440b      	add	r3, r1
 8011180:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011182:	2b00      	cmp	r3, #0
 8011184:	daca      	bge.n	801111c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d01e      	beq.n	80111ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	891b      	ldrh	r3, [r3, #8]
 8011190:	461a      	mov	r2, r3
 8011192:	4b14      	ldr	r3, [pc, #80]	@ (80111e4 <tcp_oos_insert_segment+0x10c>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	441a      	add	r2, r3
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dd12      	ble.n	80111ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	4b0d      	ldr	r3, [pc, #52]	@ (80111e4 <tcp_oos_insert_segment+0x10c>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	1ad3      	subs	r3, r2, r3
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	891b      	ldrh	r3, [r3, #8]
 80111c2:	4619      	mov	r1, r3
 80111c4:	4610      	mov	r0, r2
 80111c6:	f7fc fb45 	bl	800d854 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	601a      	str	r2, [r3, #0]
}
 80111d0:	bf00      	nop
 80111d2:	3714      	adds	r7, #20
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd90      	pop	{r4, r7, pc}
 80111d8:	0801a2bc 	.word	0x0801a2bc
 80111dc:	0801a57c 	.word	0x0801a57c
 80111e0:	0801a308 	.word	0x0801a308
 80111e4:	2000df8c 	.word	0x2000df8c

080111e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80111e8:	b5b0      	push	{r4, r5, r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
 80111f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80111f6:	e03e      	b.n	8011276 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	4618      	mov	r0, r3
 8011208:	f7fc fd38 	bl	800dc7c <pbuf_clen>
 801120c:	4603      	mov	r3, r0
 801120e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011216:	8a7a      	ldrh	r2, [r7, #18]
 8011218:	429a      	cmp	r2, r3
 801121a:	d906      	bls.n	801122a <tcp_free_acked_segments+0x42>
 801121c:	4b2a      	ldr	r3, [pc, #168]	@ (80112c8 <tcp_free_acked_segments+0xe0>)
 801121e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011222:	492a      	ldr	r1, [pc, #168]	@ (80112cc <tcp_free_acked_segments+0xe4>)
 8011224:	482a      	ldr	r0, [pc, #168]	@ (80112d0 <tcp_free_acked_segments+0xe8>)
 8011226:	f006 f9ad 	bl	8017584 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011230:	8a7b      	ldrh	r3, [r7, #18]
 8011232:	1ad3      	subs	r3, r2, r3
 8011234:	b29a      	uxth	r2, r3
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	891a      	ldrh	r2, [r3, #8]
 8011240:	4b24      	ldr	r3, [pc, #144]	@ (80112d4 <tcp_free_acked_segments+0xec>)
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	4413      	add	r3, r2
 8011246:	b29a      	uxth	r2, r3
 8011248:	4b22      	ldr	r3, [pc, #136]	@ (80112d4 <tcp_free_acked_segments+0xec>)
 801124a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801124c:	6978      	ldr	r0, [r7, #20]
 801124e:	f7fe f90c 	bl	800f46a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011258:	2b00      	cmp	r3, #0
 801125a:	d00c      	beq.n	8011276 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <tcp_free_acked_segments+0x8e>
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d106      	bne.n	8011276 <tcp_free_acked_segments+0x8e>
 8011268:	4b17      	ldr	r3, [pc, #92]	@ (80112c8 <tcp_free_acked_segments+0xe0>)
 801126a:	f240 4261 	movw	r2, #1121	@ 0x461
 801126e:	491a      	ldr	r1, [pc, #104]	@ (80112d8 <tcp_free_acked_segments+0xf0>)
 8011270:	4817      	ldr	r0, [pc, #92]	@ (80112d0 <tcp_free_acked_segments+0xe8>)
 8011272:	f006 f987 	bl	8017584 <iprintf>
  while (seg_list != NULL &&
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d020      	beq.n	80112be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	4618      	mov	r0, r3
 8011284:	f7fb f8d5 	bl	800c432 <lwip_htonl>
 8011288:	4604      	mov	r4, r0
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	891b      	ldrh	r3, [r3, #8]
 801128e:	461d      	mov	r5, r3
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	899b      	ldrh	r3, [r3, #12]
 8011296:	b29b      	uxth	r3, r3
 8011298:	4618      	mov	r0, r3
 801129a:	f7fb f8b5 	bl	800c408 <lwip_htons>
 801129e:	4603      	mov	r3, r0
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	f003 0303 	and.w	r3, r3, #3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d001      	beq.n	80112ae <tcp_free_acked_segments+0xc6>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e000      	b.n	80112b0 <tcp_free_acked_segments+0xc8>
 80112ae:	2300      	movs	r3, #0
 80112b0:	442b      	add	r3, r5
 80112b2:	18e2      	adds	r2, r4, r3
 80112b4:	4b09      	ldr	r3, [pc, #36]	@ (80112dc <tcp_free_acked_segments+0xf4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	dd9c      	ble.n	80111f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80112be:	68bb      	ldr	r3, [r7, #8]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3718      	adds	r7, #24
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bdb0      	pop	{r4, r5, r7, pc}
 80112c8:	0801a2bc 	.word	0x0801a2bc
 80112cc:	0801a5a4 	.word	0x0801a5a4
 80112d0:	0801a308 	.word	0x0801a308
 80112d4:	2000df94 	.word	0x2000df94
 80112d8:	0801a5cc 	.word	0x0801a5cc
 80112dc:	2000df90 	.word	0x2000df90

080112e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80112e0:	b5b0      	push	{r4, r5, r7, lr}
 80112e2:	b094      	sub	sp, #80	@ 0x50
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80112e8:	2300      	movs	r3, #0
 80112ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d106      	bne.n	8011300 <tcp_receive+0x20>
 80112f2:	4b91      	ldr	r3, [pc, #580]	@ (8011538 <tcp_receive+0x258>)
 80112f4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80112f8:	4990      	ldr	r1, [pc, #576]	@ (801153c <tcp_receive+0x25c>)
 80112fa:	4891      	ldr	r0, [pc, #580]	@ (8011540 <tcp_receive+0x260>)
 80112fc:	f006 f942 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	7d1b      	ldrb	r3, [r3, #20]
 8011304:	2b03      	cmp	r3, #3
 8011306:	d806      	bhi.n	8011316 <tcp_receive+0x36>
 8011308:	4b8b      	ldr	r3, [pc, #556]	@ (8011538 <tcp_receive+0x258>)
 801130a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801130e:	498d      	ldr	r1, [pc, #564]	@ (8011544 <tcp_receive+0x264>)
 8011310:	488b      	ldr	r0, [pc, #556]	@ (8011540 <tcp_receive+0x260>)
 8011312:	f006 f937 	bl	8017584 <iprintf>

  if (flags & TCP_ACK) {
 8011316:	4b8c      	ldr	r3, [pc, #560]	@ (8011548 <tcp_receive+0x268>)
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	f003 0310 	and.w	r3, r3, #16
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 8264 	beq.w	80117ec <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801132a:	461a      	mov	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011330:	4413      	add	r3, r2
 8011332:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011338:	4b84      	ldr	r3, [pc, #528]	@ (801154c <tcp_receive+0x26c>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	db1b      	blt.n	801137a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011346:	4b81      	ldr	r3, [pc, #516]	@ (801154c <tcp_receive+0x26c>)
 8011348:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801134a:	429a      	cmp	r2, r3
 801134c:	d106      	bne.n	801135c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011352:	4b7f      	ldr	r3, [pc, #508]	@ (8011550 <tcp_receive+0x270>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	db0e      	blt.n	801137a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011360:	4b7b      	ldr	r3, [pc, #492]	@ (8011550 <tcp_receive+0x270>)
 8011362:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011364:	429a      	cmp	r2, r3
 8011366:	d125      	bne.n	80113b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011368:	4b7a      	ldr	r3, [pc, #488]	@ (8011554 <tcp_receive+0x274>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	89db      	ldrh	r3, [r3, #14]
 801136e:	b29a      	uxth	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011376:	429a      	cmp	r2, r3
 8011378:	d91c      	bls.n	80113b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801137a:	4b76      	ldr	r3, [pc, #472]	@ (8011554 <tcp_receive+0x274>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	89db      	ldrh	r3, [r3, #14]
 8011380:	b29a      	uxth	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011394:	429a      	cmp	r2, r3
 8011396:	d205      	bcs.n	80113a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80113a4:	4b69      	ldr	r3, [pc, #420]	@ (801154c <tcp_receive+0x26c>)
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80113ac:	4b68      	ldr	r3, [pc, #416]	@ (8011550 <tcp_receive+0x270>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80113b4:	4b66      	ldr	r3, [pc, #408]	@ (8011550 <tcp_receive+0x270>)
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	2b00      	cmp	r3, #0
 80113c0:	dc58      	bgt.n	8011474 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80113c2:	4b65      	ldr	r3, [pc, #404]	@ (8011558 <tcp_receive+0x278>)
 80113c4:	881b      	ldrh	r3, [r3, #0]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d14b      	bne.n	8011462 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80113d4:	4413      	add	r3, r2
 80113d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113d8:	429a      	cmp	r2, r3
 80113da:	d142      	bne.n	8011462 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	db3d      	blt.n	8011462 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80113ea:	4b59      	ldr	r3, [pc, #356]	@ (8011550 <tcp_receive+0x270>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d137      	bne.n	8011462 <tcp_receive+0x182>
              found_dupack = 1;
 80113f2:	2301      	movs	r3, #1
 80113f4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80113fc:	2bff      	cmp	r3, #255	@ 0xff
 80113fe:	d007      	beq.n	8011410 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011406:	3301      	adds	r3, #1
 8011408:	b2da      	uxtb	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011416:	2b03      	cmp	r3, #3
 8011418:	d91b      	bls.n	8011452 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011424:	4413      	add	r3, r2
 8011426:	b29a      	uxth	r2, r3
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801142e:	429a      	cmp	r2, r3
 8011430:	d30a      	bcc.n	8011448 <tcp_receive+0x168>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801143c:	4413      	add	r3, r2
 801143e:	b29a      	uxth	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011446:	e004      	b.n	8011452 <tcp_receive+0x172>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801144e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011458:	2b02      	cmp	r3, #2
 801145a:	d902      	bls.n	8011462 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f002 fb3f 	bl	8013ae0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011464:	2b00      	cmp	r3, #0
 8011466:	f040 8161 	bne.w	801172c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011472:	e15b      	b.n	801172c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011474:	4b36      	ldr	r3, [pc, #216]	@ (8011550 <tcp_receive+0x270>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	3b01      	subs	r3, #1
 8011480:	2b00      	cmp	r3, #0
 8011482:	f2c0 814e 	blt.w	8011722 <tcp_receive+0x442>
 8011486:	4b32      	ldr	r3, [pc, #200]	@ (8011550 <tcp_receive+0x270>)
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	2b00      	cmp	r3, #0
 8011492:	f300 8146 	bgt.w	8011722 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	8b5b      	ldrh	r3, [r3, #26]
 801149a:	f003 0304 	and.w	r3, r3, #4
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d010      	beq.n	80114c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8b5b      	ldrh	r3, [r3, #26]
 80114a6:	f023 0304 	bic.w	r3, r3, #4
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2200      	movs	r2, #0
 80114c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80114d2:	10db      	asrs	r3, r3, #3
 80114d4:	b21b      	sxth	r3, r3
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4413      	add	r3, r2
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	b21a      	sxth	r2, r3
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80114ec:	4b18      	ldr	r3, [pc, #96]	@ (8011550 <tcp_receive+0x270>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	b29a      	uxth	r2, r3
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114f6:	b29b      	uxth	r3, r3
 80114f8:	1ad3      	subs	r3, r2, r3
 80114fa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2200      	movs	r2, #0
 8011500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011504:	4b12      	ldr	r3, [pc, #72]	@ (8011550 <tcp_receive+0x270>)
 8011506:	681a      	ldr	r2, [r3, #0]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	7d1b      	ldrb	r3, [r3, #20]
 8011510:	2b03      	cmp	r3, #3
 8011512:	f240 8097 	bls.w	8011644 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011522:	429a      	cmp	r2, r3
 8011524:	d245      	bcs.n	80115b2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	8b5b      	ldrh	r3, [r3, #26]
 801152a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801152e:	2b00      	cmp	r3, #0
 8011530:	d014      	beq.n	801155c <tcp_receive+0x27c>
 8011532:	2301      	movs	r3, #1
 8011534:	e013      	b.n	801155e <tcp_receive+0x27e>
 8011536:	bf00      	nop
 8011538:	0801a2bc 	.word	0x0801a2bc
 801153c:	0801a5ec 	.word	0x0801a5ec
 8011540:	0801a308 	.word	0x0801a308
 8011544:	0801a608 	.word	0x0801a608
 8011548:	2000df98 	.word	0x2000df98
 801154c:	2000df8c 	.word	0x2000df8c
 8011550:	2000df90 	.word	0x2000df90
 8011554:	2000df7c 	.word	0x2000df7c
 8011558:	2000df96 	.word	0x2000df96
 801155c:	2302      	movs	r3, #2
 801155e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011562:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011566:	b29a      	uxth	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801156c:	fb12 f303 	smulbb	r3, r2, r3
 8011570:	b29b      	uxth	r3, r3
 8011572:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011574:	4293      	cmp	r3, r2
 8011576:	bf28      	it	cs
 8011578:	4613      	movcs	r3, r2
 801157a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011582:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011584:	4413      	add	r3, r2
 8011586:	b29a      	uxth	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801158e:	429a      	cmp	r2, r3
 8011590:	d309      	bcc.n	80115a6 <tcp_receive+0x2c6>
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011598:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801159a:	4413      	add	r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80115a4:	e04e      	b.n	8011644 <tcp_receive+0x364>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80115b0:	e048      	b.n	8011644 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115ba:	4413      	add	r3, r2
 80115bc:	b29a      	uxth	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d309      	bcc.n	80115dc <tcp_receive+0x2fc>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80115d0:	4413      	add	r3, r2
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80115da:	e004      	b.n	80115e6 <tcp_receive+0x306>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80115e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d326      	bcc.n	8011644 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	b29a      	uxth	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011616:	4413      	add	r3, r2
 8011618:	b29a      	uxth	r2, r3
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011620:	429a      	cmp	r2, r3
 8011622:	d30a      	bcc.n	801163a <tcp_receive+0x35a>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801162e:	4413      	add	r3, r2
 8011630:	b29a      	uxth	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011638:	e004      	b.n	8011644 <tcp_receive+0x364>
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011640:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801164c:	4a98      	ldr	r2, [pc, #608]	@ (80118b0 <tcp_receive+0x5d0>)
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff fdca 	bl	80111e8 <tcp_free_acked_segments>
 8011654:	4602      	mov	r2, r0
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011662:	4a94      	ldr	r2, [pc, #592]	@ (80118b4 <tcp_receive+0x5d4>)
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7ff fdbf 	bl	80111e8 <tcp_free_acked_segments>
 801166a:	4602      	mov	r2, r0
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011674:	2b00      	cmp	r3, #0
 8011676:	d104      	bne.n	8011682 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801167e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011680:	e002      	b.n	8011688 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2200      	movs	r2, #0
 8011686:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2200      	movs	r2, #0
 801168c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011692:	2b00      	cmp	r3, #0
 8011694:	d103      	bne.n	801169e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80116a4:	4b84      	ldr	r3, [pc, #528]	@ (80118b8 <tcp_receive+0x5d8>)
 80116a6:	881b      	ldrh	r3, [r3, #0]
 80116a8:	4413      	add	r3, r2
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8b5b      	ldrh	r3, [r3, #26]
 80116b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d035      	beq.n	801172a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d118      	bne.n	80116f8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00c      	beq.n	80116e8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fa fea9 	bl	800c432 <lwip_htonl>
 80116e0:	4603      	mov	r3, r0
 80116e2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	dc20      	bgt.n	801172a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8b5b      	ldrh	r3, [r3, #26]
 80116ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116f6:	e018      	b.n	801172a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	685b      	ldr	r3, [r3, #4]
 8011704:	4618      	mov	r0, r3
 8011706:	f7fa fe94 	bl	800c432 <lwip_htonl>
 801170a:	4603      	mov	r3, r0
 801170c:	1ae3      	subs	r3, r4, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	dc0b      	bgt.n	801172a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	8b5b      	ldrh	r3, [r3, #26]
 8011716:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011720:	e003      	b.n	801172a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f002 fbc8 	bl	8013eb8 <tcp_send_empty_ack>
 8011728:	e000      	b.n	801172c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801172a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011730:	2b00      	cmp	r3, #0
 8011732:	d05b      	beq.n	80117ec <tcp_receive+0x50c>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011738:	4b60      	ldr	r3, [pc, #384]	@ (80118bc <tcp_receive+0x5dc>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	da54      	bge.n	80117ec <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011742:	4b5f      	ldr	r3, [pc, #380]	@ (80118c0 <tcp_receive+0x5e0>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	b29a      	uxth	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801174c:	b29b      	uxth	r3, r3
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	b29b      	uxth	r3, r3
 8011752:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011756:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011760:	10db      	asrs	r3, r3, #3
 8011762:	b21b      	sxth	r3, r3
 8011764:	b29b      	uxth	r3, r3
 8011766:	1ad3      	subs	r3, r2, r3
 8011768:	b29b      	uxth	r3, r3
 801176a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011774:	b29a      	uxth	r2, r3
 8011776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801177a:	4413      	add	r3, r2
 801177c:	b29b      	uxth	r3, r3
 801177e:	b21a      	sxth	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011784:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011788:	2b00      	cmp	r3, #0
 801178a:	da05      	bge.n	8011798 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801178c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011790:	425b      	negs	r3, r3
 8011792:	b29b      	uxth	r3, r3
 8011794:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011798:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80117a2:	109b      	asrs	r3, r3, #2
 80117a4:	b21b      	sxth	r3, r3
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	1ad3      	subs	r3, r2, r3
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80117b6:	b29a      	uxth	r2, r3
 80117b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80117bc:	4413      	add	r3, r2
 80117be:	b29b      	uxth	r3, r3
 80117c0:	b21a      	sxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80117cc:	10db      	asrs	r3, r3, #3
 80117ce:	b21b      	sxth	r3, r3
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80117d8:	b29b      	uxth	r3, r3
 80117da:	4413      	add	r3, r2
 80117dc:	b29b      	uxth	r3, r3
 80117de:	b21a      	sxth	r2, r3
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2200      	movs	r2, #0
 80117ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80117ec:	4b35      	ldr	r3, [pc, #212]	@ (80118c4 <tcp_receive+0x5e4>)
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f000 84df 	beq.w	80121b4 <tcp_receive+0xed4>
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	7d1b      	ldrb	r3, [r3, #20]
 80117fa:	2b06      	cmp	r3, #6
 80117fc:	f200 84da 	bhi.w	80121b4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011804:	4b30      	ldr	r3, [pc, #192]	@ (80118c8 <tcp_receive+0x5e8>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	3b01      	subs	r3, #1
 801180c:	2b00      	cmp	r3, #0
 801180e:	f2c0 808f 	blt.w	8011930 <tcp_receive+0x650>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011816:	4b2b      	ldr	r3, [pc, #172]	@ (80118c4 <tcp_receive+0x5e4>)
 8011818:	881b      	ldrh	r3, [r3, #0]
 801181a:	4619      	mov	r1, r3
 801181c:	4b2a      	ldr	r3, [pc, #168]	@ (80118c8 <tcp_receive+0x5e8>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	440b      	add	r3, r1
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	3301      	adds	r3, #1
 8011826:	2b00      	cmp	r3, #0
 8011828:	f300 8082 	bgt.w	8011930 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801182c:	4b27      	ldr	r3, [pc, #156]	@ (80118cc <tcp_receive+0x5ec>)
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011836:	4b24      	ldr	r3, [pc, #144]	@ (80118c8 <tcp_receive+0x5e8>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801183e:	4b23      	ldr	r3, [pc, #140]	@ (80118cc <tcp_receive+0x5ec>)
 8011840:	685b      	ldr	r3, [r3, #4]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_receive+0x574>
 8011846:	4b22      	ldr	r3, [pc, #136]	@ (80118d0 <tcp_receive+0x5f0>)
 8011848:	f240 5294 	movw	r2, #1428	@ 0x594
 801184c:	4921      	ldr	r1, [pc, #132]	@ (80118d4 <tcp_receive+0x5f4>)
 801184e:	4822      	ldr	r0, [pc, #136]	@ (80118d8 <tcp_receive+0x5f8>)
 8011850:	f005 fe98 	bl	8017584 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011856:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801185a:	4293      	cmp	r3, r2
 801185c:	d906      	bls.n	801186c <tcp_receive+0x58c>
 801185e:	4b1c      	ldr	r3, [pc, #112]	@ (80118d0 <tcp_receive+0x5f0>)
 8011860:	f240 5295 	movw	r2, #1429	@ 0x595
 8011864:	491d      	ldr	r1, [pc, #116]	@ (80118dc <tcp_receive+0x5fc>)
 8011866:	481c      	ldr	r0, [pc, #112]	@ (80118d8 <tcp_receive+0x5f8>)
 8011868:	f005 fe8c 	bl	8017584 <iprintf>
      off = (u16_t)off32;
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011872:	4b16      	ldr	r3, [pc, #88]	@ (80118cc <tcp_receive+0x5ec>)
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	891b      	ldrh	r3, [r3, #8]
 8011878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801187c:	429a      	cmp	r2, r3
 801187e:	d906      	bls.n	801188e <tcp_receive+0x5ae>
 8011880:	4b13      	ldr	r3, [pc, #76]	@ (80118d0 <tcp_receive+0x5f0>)
 8011882:	f240 5297 	movw	r2, #1431	@ 0x597
 8011886:	4916      	ldr	r1, [pc, #88]	@ (80118e0 <tcp_receive+0x600>)
 8011888:	4813      	ldr	r0, [pc, #76]	@ (80118d8 <tcp_receive+0x5f8>)
 801188a:	f005 fe7b 	bl	8017584 <iprintf>
      inseg.len -= off;
 801188e:	4b0f      	ldr	r3, [pc, #60]	@ (80118cc <tcp_receive+0x5ec>)
 8011890:	891a      	ldrh	r2, [r3, #8]
 8011892:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011896:	1ad3      	subs	r3, r2, r3
 8011898:	b29a      	uxth	r2, r3
 801189a:	4b0c      	ldr	r3, [pc, #48]	@ (80118cc <tcp_receive+0x5ec>)
 801189c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801189e:	4b0b      	ldr	r3, [pc, #44]	@ (80118cc <tcp_receive+0x5ec>)
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	891a      	ldrh	r2, [r3, #8]
 80118a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80118ac:	e02a      	b.n	8011904 <tcp_receive+0x624>
 80118ae:	bf00      	nop
 80118b0:	0801a624 	.word	0x0801a624
 80118b4:	0801a62c 	.word	0x0801a62c
 80118b8:	2000df94 	.word	0x2000df94
 80118bc:	2000df90 	.word	0x2000df90
 80118c0:	2000df54 	.word	0x2000df54
 80118c4:	2000df96 	.word	0x2000df96
 80118c8:	2000df8c 	.word	0x2000df8c
 80118cc:	2000df6c 	.word	0x2000df6c
 80118d0:	0801a2bc 	.word	0x0801a2bc
 80118d4:	0801a634 	.word	0x0801a634
 80118d8:	0801a308 	.word	0x0801a308
 80118dc:	0801a644 	.word	0x0801a644
 80118e0:	0801a654 	.word	0x0801a654
        off -= p->len;
 80118e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118e6:	895b      	ldrh	r3, [r3, #10]
 80118e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80118f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80118f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80118f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118fa:	2200      	movs	r2, #0
 80118fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80118fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011906:	895b      	ldrh	r3, [r3, #10]
 8011908:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801190c:	429a      	cmp	r2, r3
 801190e:	d8e9      	bhi.n	80118e4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011910:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011914:	4619      	mov	r1, r3
 8011916:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011918:	f7fc f89c 	bl	800da54 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011920:	4a90      	ldr	r2, [pc, #576]	@ (8011b64 <tcp_receive+0x884>)
 8011922:	6013      	str	r3, [r2, #0]
 8011924:	4b90      	ldr	r3, [pc, #576]	@ (8011b68 <tcp_receive+0x888>)
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	4a8e      	ldr	r2, [pc, #568]	@ (8011b64 <tcp_receive+0x884>)
 801192a:	6812      	ldr	r2, [r2, #0]
 801192c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801192e:	e00d      	b.n	801194c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011930:	4b8c      	ldr	r3, [pc, #560]	@ (8011b64 <tcp_receive+0x884>)
 8011932:	681a      	ldr	r2, [r3, #0]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011938:	1ad3      	subs	r3, r2, r3
 801193a:	2b00      	cmp	r3, #0
 801193c:	da06      	bge.n	801194c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0302 	orr.w	r3, r3, #2
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801194c:	4b85      	ldr	r3, [pc, #532]	@ (8011b64 <tcp_receive+0x884>)
 801194e:	681a      	ldr	r2, [r3, #0]
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011954:	1ad3      	subs	r3, r2, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	f2c0 8427 	blt.w	80121aa <tcp_receive+0xeca>
 801195c:	4b81      	ldr	r3, [pc, #516]	@ (8011b64 <tcp_receive+0x884>)
 801195e:	681a      	ldr	r2, [r3, #0]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011964:	6879      	ldr	r1, [r7, #4]
 8011966:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011968:	440b      	add	r3, r1
 801196a:	1ad3      	subs	r3, r2, r3
 801196c:	3301      	adds	r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	f300 841b 	bgt.w	80121aa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011978:	4b7a      	ldr	r3, [pc, #488]	@ (8011b64 <tcp_receive+0x884>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	429a      	cmp	r2, r3
 801197e:	f040 8298 	bne.w	8011eb2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011982:	4b79      	ldr	r3, [pc, #484]	@ (8011b68 <tcp_receive+0x888>)
 8011984:	891c      	ldrh	r4, [r3, #8]
 8011986:	4b78      	ldr	r3, [pc, #480]	@ (8011b68 <tcp_receive+0x888>)
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	899b      	ldrh	r3, [r3, #12]
 801198c:	b29b      	uxth	r3, r3
 801198e:	4618      	mov	r0, r3
 8011990:	f7fa fd3a 	bl	800c408 <lwip_htons>
 8011994:	4603      	mov	r3, r0
 8011996:	b2db      	uxtb	r3, r3
 8011998:	f003 0303 	and.w	r3, r3, #3
 801199c:	2b00      	cmp	r3, #0
 801199e:	d001      	beq.n	80119a4 <tcp_receive+0x6c4>
 80119a0:	2301      	movs	r3, #1
 80119a2:	e000      	b.n	80119a6 <tcp_receive+0x6c6>
 80119a4:	2300      	movs	r3, #0
 80119a6:	4423      	add	r3, r4
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	4b70      	ldr	r3, [pc, #448]	@ (8011b6c <tcp_receive+0x88c>)
 80119ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119b2:	4b6e      	ldr	r3, [pc, #440]	@ (8011b6c <tcp_receive+0x88c>)
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	429a      	cmp	r2, r3
 80119b8:	d274      	bcs.n	8011aa4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119ba:	4b6b      	ldr	r3, [pc, #428]	@ (8011b68 <tcp_receive+0x888>)
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	899b      	ldrh	r3, [r3, #12]
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fa fd20 	bl	800c408 <lwip_htons>
 80119c8:	4603      	mov	r3, r0
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	f003 0301 	and.w	r3, r3, #1
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d01e      	beq.n	8011a12 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80119d4:	4b64      	ldr	r3, [pc, #400]	@ (8011b68 <tcp_receive+0x888>)
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	899b      	ldrh	r3, [r3, #12]
 80119da:	b29b      	uxth	r3, r3
 80119dc:	b21b      	sxth	r3, r3
 80119de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80119e2:	b21c      	sxth	r4, r3
 80119e4:	4b60      	ldr	r3, [pc, #384]	@ (8011b68 <tcp_receive+0x888>)
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	899b      	ldrh	r3, [r3, #12]
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fa fd0b 	bl	800c408 <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7fa fd03 	bl	800c408 <lwip_htons>
 8011a02:	4603      	mov	r3, r0
 8011a04:	b21b      	sxth	r3, r3
 8011a06:	4323      	orrs	r3, r4
 8011a08:	b21a      	sxth	r2, r3
 8011a0a:	4b57      	ldr	r3, [pc, #348]	@ (8011b68 <tcp_receive+0x888>)
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	b292      	uxth	r2, r2
 8011a10:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011a16:	4b54      	ldr	r3, [pc, #336]	@ (8011b68 <tcp_receive+0x888>)
 8011a18:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011a1a:	4b53      	ldr	r3, [pc, #332]	@ (8011b68 <tcp_receive+0x888>)
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	899b      	ldrh	r3, [r3, #12]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fa fcf0 	bl	800c408 <lwip_htons>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	f003 0302 	and.w	r3, r3, #2
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d005      	beq.n	8011a40 <tcp_receive+0x760>
            inseg.len -= 1;
 8011a34:	4b4c      	ldr	r3, [pc, #304]	@ (8011b68 <tcp_receive+0x888>)
 8011a36:	891b      	ldrh	r3, [r3, #8]
 8011a38:	3b01      	subs	r3, #1
 8011a3a:	b29a      	uxth	r2, r3
 8011a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8011b68 <tcp_receive+0x888>)
 8011a3e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011a40:	4b49      	ldr	r3, [pc, #292]	@ (8011b68 <tcp_receive+0x888>)
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	4a48      	ldr	r2, [pc, #288]	@ (8011b68 <tcp_receive+0x888>)
 8011a46:	8912      	ldrh	r2, [r2, #8]
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fb ff02 	bl	800d854 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011a50:	4b45      	ldr	r3, [pc, #276]	@ (8011b68 <tcp_receive+0x888>)
 8011a52:	891c      	ldrh	r4, [r3, #8]
 8011a54:	4b44      	ldr	r3, [pc, #272]	@ (8011b68 <tcp_receive+0x888>)
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	899b      	ldrh	r3, [r3, #12]
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fa fcd3 	bl	800c408 <lwip_htons>
 8011a62:	4603      	mov	r3, r0
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	f003 0303 	and.w	r3, r3, #3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d001      	beq.n	8011a72 <tcp_receive+0x792>
 8011a6e:	2301      	movs	r3, #1
 8011a70:	e000      	b.n	8011a74 <tcp_receive+0x794>
 8011a72:	2300      	movs	r3, #0
 8011a74:	4423      	add	r3, r4
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	4b3c      	ldr	r3, [pc, #240]	@ (8011b6c <tcp_receive+0x88c>)
 8011a7a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8011b6c <tcp_receive+0x88c>)
 8011a7e:	881b      	ldrh	r3, [r3, #0]
 8011a80:	461a      	mov	r2, r3
 8011a82:	4b38      	ldr	r3, [pc, #224]	@ (8011b64 <tcp_receive+0x884>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	441a      	add	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a8c:	6879      	ldr	r1, [r7, #4]
 8011a8e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a90:	440b      	add	r3, r1
 8011a92:	429a      	cmp	r2, r3
 8011a94:	d006      	beq.n	8011aa4 <tcp_receive+0x7c4>
 8011a96:	4b36      	ldr	r3, [pc, #216]	@ (8011b70 <tcp_receive+0x890>)
 8011a98:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011a9c:	4935      	ldr	r1, [pc, #212]	@ (8011b74 <tcp_receive+0x894>)
 8011a9e:	4836      	ldr	r0, [pc, #216]	@ (8011b78 <tcp_receive+0x898>)
 8011aa0:	f005 fd70 	bl	8017584 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f000 80e6 	beq.w	8011c7a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011aae:	4b2e      	ldr	r3, [pc, #184]	@ (8011b68 <tcp_receive+0x888>)
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	899b      	ldrh	r3, [r3, #12]
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7fa fca6 	bl	800c408 <lwip_htons>
 8011abc:	4603      	mov	r3, r0
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	f003 0301 	and.w	r3, r3, #1
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d010      	beq.n	8011aea <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ac8:	e00a      	b.n	8011ae0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ace:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f7fd fcc5 	bl	800f46a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1f0      	bne.n	8011aca <tcp_receive+0x7ea>
 8011ae8:	e0c7      	b.n	8011c7a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011af0:	e051      	b.n	8011b96 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011af4:	68db      	ldr	r3, [r3, #12]
 8011af6:	899b      	ldrh	r3, [r3, #12]
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7fa fc84 	bl	800c408 <lwip_htons>
 8011b00:	4603      	mov	r3, r0
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	f003 0301 	and.w	r3, r3, #1
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d03c      	beq.n	8011b86 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011b0c:	4b16      	ldr	r3, [pc, #88]	@ (8011b68 <tcp_receive+0x888>)
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	899b      	ldrh	r3, [r3, #12]
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fa fc77 	bl	800c408 <lwip_htons>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	b2db      	uxtb	r3, r3
 8011b1e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d12f      	bne.n	8011b86 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011b26:	4b10      	ldr	r3, [pc, #64]	@ (8011b68 <tcp_receive+0x888>)
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	899b      	ldrh	r3, [r3, #12]
 8011b2c:	b29c      	uxth	r4, r3
 8011b2e:	2001      	movs	r0, #1
 8011b30:	f7fa fc6a 	bl	800c408 <lwip_htons>
 8011b34:	4603      	mov	r3, r0
 8011b36:	461a      	mov	r2, r3
 8011b38:	4b0b      	ldr	r3, [pc, #44]	@ (8011b68 <tcp_receive+0x888>)
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	4322      	orrs	r2, r4
 8011b3e:	b292      	uxth	r2, r2
 8011b40:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011b42:	4b09      	ldr	r3, [pc, #36]	@ (8011b68 <tcp_receive+0x888>)
 8011b44:	891c      	ldrh	r4, [r3, #8]
 8011b46:	4b08      	ldr	r3, [pc, #32]	@ (8011b68 <tcp_receive+0x888>)
 8011b48:	68db      	ldr	r3, [r3, #12]
 8011b4a:	899b      	ldrh	r3, [r3, #12]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fa fc5a 	bl	800c408 <lwip_htons>
 8011b54:	4603      	mov	r3, r0
 8011b56:	b2db      	uxtb	r3, r3
 8011b58:	f003 0303 	and.w	r3, r3, #3
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00d      	beq.n	8011b7c <tcp_receive+0x89c>
 8011b60:	2301      	movs	r3, #1
 8011b62:	e00c      	b.n	8011b7e <tcp_receive+0x89e>
 8011b64:	2000df8c 	.word	0x2000df8c
 8011b68:	2000df6c 	.word	0x2000df6c
 8011b6c:	2000df96 	.word	0x2000df96
 8011b70:	0801a2bc 	.word	0x0801a2bc
 8011b74:	0801a664 	.word	0x0801a664
 8011b78:	0801a308 	.word	0x0801a308
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4423      	add	r3, r4
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	4b98      	ldr	r3, [pc, #608]	@ (8011de4 <tcp_receive+0xb04>)
 8011b84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011b90:	6938      	ldr	r0, [r7, #16]
 8011b92:	f7fd fc6a 	bl	800f46a <tcp_seg_free>
            while (next &&
 8011b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00e      	beq.n	8011bba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011b9c:	4b91      	ldr	r3, [pc, #580]	@ (8011de4 <tcp_receive+0xb04>)
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	4b91      	ldr	r3, [pc, #580]	@ (8011de8 <tcp_receive+0xb08>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	441a      	add	r2, r3
 8011ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011bb0:	8909      	ldrh	r1, [r1, #8]
 8011bb2:	440b      	add	r3, r1
 8011bb4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	da9b      	bge.n	8011af2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d059      	beq.n	8011c74 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011bc0:	4b88      	ldr	r3, [pc, #544]	@ (8011de4 <tcp_receive+0xb04>)
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b88      	ldr	r3, [pc, #544]	@ (8011de8 <tcp_receive+0xb08>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	441a      	add	r2, r3
 8011bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	dd4d      	ble.n	8011c74 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	b29a      	uxth	r2, r3
 8011be0:	4b81      	ldr	r3, [pc, #516]	@ (8011de8 <tcp_receive+0xb08>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	1ad3      	subs	r3, r2, r3
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	4b80      	ldr	r3, [pc, #512]	@ (8011dec <tcp_receive+0xb0c>)
 8011bec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011bee:	4b7f      	ldr	r3, [pc, #508]	@ (8011dec <tcp_receive+0xb0c>)
 8011bf0:	68db      	ldr	r3, [r3, #12]
 8011bf2:	899b      	ldrh	r3, [r3, #12]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f7fa fc06 	bl	800c408 <lwip_htons>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	b2db      	uxtb	r3, r3
 8011c00:	f003 0302 	and.w	r3, r3, #2
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <tcp_receive+0x934>
                inseg.len -= 1;
 8011c08:	4b78      	ldr	r3, [pc, #480]	@ (8011dec <tcp_receive+0xb0c>)
 8011c0a:	891b      	ldrh	r3, [r3, #8]
 8011c0c:	3b01      	subs	r3, #1
 8011c0e:	b29a      	uxth	r2, r3
 8011c10:	4b76      	ldr	r3, [pc, #472]	@ (8011dec <tcp_receive+0xb0c>)
 8011c12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011c14:	4b75      	ldr	r3, [pc, #468]	@ (8011dec <tcp_receive+0xb0c>)
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a74      	ldr	r2, [pc, #464]	@ (8011dec <tcp_receive+0xb0c>)
 8011c1a:	8912      	ldrh	r2, [r2, #8]
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fb fe18 	bl	800d854 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011c24:	4b71      	ldr	r3, [pc, #452]	@ (8011dec <tcp_receive+0xb0c>)
 8011c26:	891c      	ldrh	r4, [r3, #8]
 8011c28:	4b70      	ldr	r3, [pc, #448]	@ (8011dec <tcp_receive+0xb0c>)
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	899b      	ldrh	r3, [r3, #12]
 8011c2e:	b29b      	uxth	r3, r3
 8011c30:	4618      	mov	r0, r3
 8011c32:	f7fa fbe9 	bl	800c408 <lwip_htons>
 8011c36:	4603      	mov	r3, r0
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	f003 0303 	and.w	r3, r3, #3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d001      	beq.n	8011c46 <tcp_receive+0x966>
 8011c42:	2301      	movs	r3, #1
 8011c44:	e000      	b.n	8011c48 <tcp_receive+0x968>
 8011c46:	2300      	movs	r3, #0
 8011c48:	4423      	add	r3, r4
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	4b65      	ldr	r3, [pc, #404]	@ (8011de4 <tcp_receive+0xb04>)
 8011c4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011c50:	4b64      	ldr	r3, [pc, #400]	@ (8011de4 <tcp_receive+0xb04>)
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	461a      	mov	r2, r3
 8011c56:	4b64      	ldr	r3, [pc, #400]	@ (8011de8 <tcp_receive+0xb08>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	441a      	add	r2, r3
 8011c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d006      	beq.n	8011c74 <tcp_receive+0x994>
 8011c66:	4b62      	ldr	r3, [pc, #392]	@ (8011df0 <tcp_receive+0xb10>)
 8011c68:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011c6c:	4961      	ldr	r1, [pc, #388]	@ (8011df4 <tcp_receive+0xb14>)
 8011c6e:	4862      	ldr	r0, [pc, #392]	@ (8011df8 <tcp_receive+0xb18>)
 8011c70:	f005 fc88 	bl	8017584 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011c78:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8011de4 <tcp_receive+0xb04>)
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	4b59      	ldr	r3, [pc, #356]	@ (8011de8 <tcp_receive+0xb08>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	441a      	add	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011c8e:	4b55      	ldr	r3, [pc, #340]	@ (8011de4 <tcp_receive+0xb04>)
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d206      	bcs.n	8011ca4 <tcp_receive+0x9c4>
 8011c96:	4b56      	ldr	r3, [pc, #344]	@ (8011df0 <tcp_receive+0xb10>)
 8011c98:	f240 6207 	movw	r2, #1543	@ 0x607
 8011c9c:	4957      	ldr	r1, [pc, #348]	@ (8011dfc <tcp_receive+0xb1c>)
 8011c9e:	4856      	ldr	r0, [pc, #344]	@ (8011df8 <tcp_receive+0xb18>)
 8011ca0:	f005 fc70 	bl	8017584 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011ca8:	4b4e      	ldr	r3, [pc, #312]	@ (8011de4 <tcp_receive+0xb04>)
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	1ad3      	subs	r3, r2, r3
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7fc feb1 	bl	800ea1c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011cba:	4b4c      	ldr	r3, [pc, #304]	@ (8011dec <tcp_receive+0xb0c>)
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	891b      	ldrh	r3, [r3, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d006      	beq.n	8011cd2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011cc4:	4b49      	ldr	r3, [pc, #292]	@ (8011dec <tcp_receive+0xb0c>)
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8011e00 <tcp_receive+0xb20>)
 8011cca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011ccc:	4b47      	ldr	r3, [pc, #284]	@ (8011dec <tcp_receive+0xb0c>)
 8011cce:	2200      	movs	r2, #0
 8011cd0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cd2:	4b46      	ldr	r3, [pc, #280]	@ (8011dec <tcp_receive+0xb0c>)
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	899b      	ldrh	r3, [r3, #12]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fa fb94 	bl	800c408 <lwip_htons>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	b2db      	uxtb	r3, r3
 8011ce4:	f003 0301 	and.w	r3, r3, #1
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f000 80b8 	beq.w	8011e5e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011cee:	4b45      	ldr	r3, [pc, #276]	@ (8011e04 <tcp_receive+0xb24>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f043 0320 	orr.w	r3, r3, #32
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	4b42      	ldr	r3, [pc, #264]	@ (8011e04 <tcp_receive+0xb24>)
 8011cfa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011cfc:	e0af      	b.n	8011e5e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	4a36      	ldr	r2, [pc, #216]	@ (8011de8 <tcp_receive+0xb08>)
 8011d0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	891b      	ldrh	r3, [r3, #8]
 8011d14:	461c      	mov	r4, r3
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	899b      	ldrh	r3, [r3, #12]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fa fb72 	bl	800c408 <lwip_htons>
 8011d24:	4603      	mov	r3, r0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	f003 0303 	and.w	r3, r3, #3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d001      	beq.n	8011d34 <tcp_receive+0xa54>
 8011d30:	2301      	movs	r3, #1
 8011d32:	e000      	b.n	8011d36 <tcp_receive+0xa56>
 8011d34:	2300      	movs	r3, #0
 8011d36:	191a      	adds	r2, r3, r4
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d3c:	441a      	add	r2, r3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d46:	461c      	mov	r4, r3
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	891b      	ldrh	r3, [r3, #8]
 8011d4c:	461d      	mov	r5, r3
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	899b      	ldrh	r3, [r3, #12]
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fa fb56 	bl	800c408 <lwip_htons>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	f003 0303 	and.w	r3, r3, #3
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d001      	beq.n	8011d6c <tcp_receive+0xa8c>
 8011d68:	2301      	movs	r3, #1
 8011d6a:	e000      	b.n	8011d6e <tcp_receive+0xa8e>
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	442b      	add	r3, r5
 8011d70:	429c      	cmp	r4, r3
 8011d72:	d206      	bcs.n	8011d82 <tcp_receive+0xaa2>
 8011d74:	4b1e      	ldr	r3, [pc, #120]	@ (8011df0 <tcp_receive+0xb10>)
 8011d76:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011d7a:	4923      	ldr	r1, [pc, #140]	@ (8011e08 <tcp_receive+0xb28>)
 8011d7c:	481e      	ldr	r0, [pc, #120]	@ (8011df8 <tcp_receive+0xb18>)
 8011d7e:	f005 fc01 	bl	8017584 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	891b      	ldrh	r3, [r3, #8]
 8011d86:	461c      	mov	r4, r3
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fa fb39 	bl	800c408 <lwip_htons>
 8011d96:	4603      	mov	r3, r0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f003 0303 	and.w	r3, r3, #3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <tcp_receive+0xac6>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e000      	b.n	8011da8 <tcp_receive+0xac8>
 8011da6:	2300      	movs	r3, #0
 8011da8:	1919      	adds	r1, r3, r4
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011dae:	b28b      	uxth	r3, r1
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	b29a      	uxth	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f7fc fe2f 	bl	800ea1c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	891b      	ldrh	r3, [r3, #8]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d028      	beq.n	8011e1a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8011e00 <tcp_receive+0xb20>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d01d      	beq.n	8011e0c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8011e00 <tcp_receive+0xb20>)
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	685b      	ldr	r3, [r3, #4]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	4610      	mov	r0, r2
 8011ddc:	f7fb ff8e 	bl	800dcfc <pbuf_cat>
 8011de0:	e018      	b.n	8011e14 <tcp_receive+0xb34>
 8011de2:	bf00      	nop
 8011de4:	2000df96 	.word	0x2000df96
 8011de8:	2000df8c 	.word	0x2000df8c
 8011dec:	2000df6c 	.word	0x2000df6c
 8011df0:	0801a2bc 	.word	0x0801a2bc
 8011df4:	0801a69c 	.word	0x0801a69c
 8011df8:	0801a308 	.word	0x0801a308
 8011dfc:	0801a6d8 	.word	0x0801a6d8
 8011e00:	2000df9c 	.word	0x2000df9c
 8011e04:	2000df99 	.word	0x2000df99
 8011e08:	0801a6f8 	.word	0x0801a6f8
            } else {
              recv_data = cseg->p;
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	4a70      	ldr	r2, [pc, #448]	@ (8011fd4 <tcp_receive+0xcf4>)
 8011e12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	2200      	movs	r2, #0
 8011e18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	899b      	ldrh	r3, [r3, #12]
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fa faf0 	bl	800c408 <lwip_htons>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d00d      	beq.n	8011e50 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011e34:	4b68      	ldr	r3, [pc, #416]	@ (8011fd8 <tcp_receive+0xcf8>)
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	f043 0320 	orr.w	r3, r3, #32
 8011e3c:	b2da      	uxtb	r2, r3
 8011e3e:	4b66      	ldr	r3, [pc, #408]	@ (8011fd8 <tcp_receive+0xcf8>)
 8011e40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	7d1b      	ldrb	r3, [r3, #20]
 8011e46:	2b04      	cmp	r3, #4
 8011e48:	d102      	bne.n	8011e50 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2207      	movs	r2, #7
 8011e4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	681a      	ldr	r2, [r3, #0]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011e58:	68b8      	ldr	r0, [r7, #8]
 8011e5a:	f7fd fb06 	bl	800f46a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d008      	beq.n	8011e78 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	685a      	ldr	r2, [r3, #4]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011e72:	429a      	cmp	r2, r3
 8011e74:	f43f af43 	beq.w	8011cfe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	8b5b      	ldrh	r3, [r3, #26]
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00e      	beq.n	8011ea2 <tcp_receive+0xbc2>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8b5b      	ldrh	r3, [r3, #26]
 8011e88:	f023 0301 	bic.w	r3, r3, #1
 8011e8c:	b29a      	uxth	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	835a      	strh	r2, [r3, #26]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8b5b      	ldrh	r3, [r3, #26]
 8011e96:	f043 0302 	orr.w	r3, r3, #2
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ea0:	e187      	b.n	80121b2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	8b5b      	ldrh	r3, [r3, #26]
 8011ea6:	f043 0301 	orr.w	r3, r3, #1
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011eb0:	e17f      	b.n	80121b2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d106      	bne.n	8011ec8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011eba:	4848      	ldr	r0, [pc, #288]	@ (8011fdc <tcp_receive+0xcfc>)
 8011ebc:	f7fd faee 	bl	800f49c <tcp_seg_copy>
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	675a      	str	r2, [r3, #116]	@ 0x74
 8011ec6:	e16c      	b.n	80121a2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ed2:	e156      	b.n	8012182 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	685a      	ldr	r2, [r3, #4]
 8011eda:	4b41      	ldr	r3, [pc, #260]	@ (8011fe0 <tcp_receive+0xd00>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d11d      	bne.n	8011f1e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8011fdc <tcp_receive+0xcfc>)
 8011ee4:	891a      	ldrh	r2, [r3, #8]
 8011ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee8:	891b      	ldrh	r3, [r3, #8]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	f240 814e 	bls.w	801218c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011ef0:	483a      	ldr	r0, [pc, #232]	@ (8011fdc <tcp_receive+0xcfc>)
 8011ef2:	f7fd fad3 	bl	800f49c <tcp_seg_copy>
 8011ef6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 8148 	beq.w	8012190 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d003      	beq.n	8011f0e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f08:	697a      	ldr	r2, [r7, #20]
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	e002      	b.n	8011f14 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	697a      	ldr	r2, [r7, #20]
 8011f12:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011f14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011f16:	6978      	ldr	r0, [r7, #20]
 8011f18:	f7ff f8de 	bl	80110d8 <tcp_oos_insert_segment>
                }
                break;
 8011f1c:	e138      	b.n	8012190 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d117      	bne.n	8011f54 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011f24:	4b2e      	ldr	r3, [pc, #184]	@ (8011fe0 <tcp_receive+0xd00>)
 8011f26:	681a      	ldr	r2, [r3, #0]
 8011f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	1ad3      	subs	r3, r2, r3
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	da57      	bge.n	8011fe4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f34:	4829      	ldr	r0, [pc, #164]	@ (8011fdc <tcp_receive+0xcfc>)
 8011f36:	f7fd fab1 	bl	800f49c <tcp_seg_copy>
 8011f3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011f3c:	69bb      	ldr	r3, [r7, #24]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	f000 8128 	beq.w	8012194 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	69ba      	ldr	r2, [r7, #24]
 8011f48:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011f4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011f4c:	69b8      	ldr	r0, [r7, #24]
 8011f4e:	f7ff f8c3 	bl	80110d8 <tcp_oos_insert_segment>
                  }
                  break;
 8011f52:	e11f      	b.n	8012194 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011f54:	4b22      	ldr	r3, [pc, #136]	@ (8011fe0 <tcp_receive+0xd00>)
 8011f56:	681a      	ldr	r2, [r3, #0]
 8011f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	3b01      	subs	r3, #1
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	db3e      	blt.n	8011fe4 <tcp_receive+0xd04>
 8011f66:	4b1e      	ldr	r3, [pc, #120]	@ (8011fe0 <tcp_receive+0xd00>)
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	3301      	adds	r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	dc35      	bgt.n	8011fe4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f78:	4818      	ldr	r0, [pc, #96]	@ (8011fdc <tcp_receive+0xcfc>)
 8011f7a:	f7fd fa8f 	bl	800f49c <tcp_seg_copy>
 8011f7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f000 8108 	beq.w	8012198 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f90:	8912      	ldrh	r2, [r2, #8]
 8011f92:	441a      	add	r2, r3
 8011f94:	4b12      	ldr	r3, [pc, #72]	@ (8011fe0 <tcp_receive+0xd00>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	dd12      	ble.n	8011fc4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011f9e:	4b10      	ldr	r3, [pc, #64]	@ (8011fe0 <tcp_receive+0xd00>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fb6:	685a      	ldr	r2, [r3, #4]
 8011fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fba:	891b      	ldrh	r3, [r3, #8]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	f7fb fc48 	bl	800d854 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fc6:	69fa      	ldr	r2, [r7, #28]
 8011fc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011fca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011fcc:	69f8      	ldr	r0, [r7, #28]
 8011fce:	f7ff f883 	bl	80110d8 <tcp_oos_insert_segment>
                  }
                  break;
 8011fd2:	e0e1      	b.n	8012198 <tcp_receive+0xeb8>
 8011fd4:	2000df9c 	.word	0x2000df9c
 8011fd8:	2000df99 	.word	0x2000df99
 8011fdc:	2000df6c 	.word	0x2000df6c
 8011fe0:	2000df8c 	.word	0x2000df8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fe6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f040 80c5 	bne.w	801217c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80121f0 <tcp_receive+0xf10>)
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	f340 80bc 	ble.w	801217c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	899b      	ldrh	r3, [r3, #12]
 801200a:	b29b      	uxth	r3, r3
 801200c:	4618      	mov	r0, r3
 801200e:	f7fa f9fb 	bl	800c408 <lwip_htons>
 8012012:	4603      	mov	r3, r0
 8012014:	b2db      	uxtb	r3, r3
 8012016:	f003 0301 	and.w	r3, r3, #1
 801201a:	2b00      	cmp	r3, #0
 801201c:	f040 80be 	bne.w	801219c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012020:	4874      	ldr	r0, [pc, #464]	@ (80121f4 <tcp_receive+0xf14>)
 8012022:	f7fd fa3b 	bl	800f49c <tcp_seg_copy>
 8012026:	4602      	mov	r2, r0
 8012028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801202a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801202c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 80b5 	beq.w	80121a0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801203e:	8912      	ldrh	r2, [r2, #8]
 8012040:	441a      	add	r2, r3
 8012042:	4b6b      	ldr	r3, [pc, #428]	@ (80121f0 <tcp_receive+0xf10>)
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	dd12      	ble.n	8012072 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801204c:	4b68      	ldr	r3, [pc, #416]	@ (80121f0 <tcp_receive+0xf10>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	b29a      	uxth	r2, r3
 8012052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012054:	68db      	ldr	r3, [r3, #12]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	b29b      	uxth	r3, r3
 801205a:	1ad3      	subs	r3, r2, r3
 801205c:	b29a      	uxth	r2, r3
 801205e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012060:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012064:	685a      	ldr	r2, [r3, #4]
 8012066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012068:	891b      	ldrh	r3, [r3, #8]
 801206a:	4619      	mov	r1, r3
 801206c:	4610      	mov	r0, r2
 801206e:	f7fb fbf1 	bl	800d854 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012072:	4b61      	ldr	r3, [pc, #388]	@ (80121f8 <tcp_receive+0xf18>)
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	461a      	mov	r2, r3
 8012078:	4b5d      	ldr	r3, [pc, #372]	@ (80121f0 <tcp_receive+0xf10>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	441a      	add	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012082:	6879      	ldr	r1, [r7, #4]
 8012084:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012086:	440b      	add	r3, r1
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	f340 8088 	ble.w	80121a0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	899b      	ldrh	r3, [r3, #12]
 8012098:	b29b      	uxth	r3, r3
 801209a:	4618      	mov	r0, r3
 801209c:	f7fa f9b4 	bl	800c408 <lwip_htons>
 80120a0:	4603      	mov	r3, r0
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	f003 0301 	and.w	r3, r3, #1
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d021      	beq.n	80120f0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80120ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	899b      	ldrh	r3, [r3, #12]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	b21b      	sxth	r3, r3
 80120b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80120bc:	b21c      	sxth	r4, r3
 80120be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	899b      	ldrh	r3, [r3, #12]
 80120c6:	b29b      	uxth	r3, r3
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fa f99d 	bl	800c408 <lwip_htons>
 80120ce:	4603      	mov	r3, r0
 80120d0:	b2db      	uxtb	r3, r3
 80120d2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80120d6:	b29b      	uxth	r3, r3
 80120d8:	4618      	mov	r0, r3
 80120da:	f7fa f995 	bl	800c408 <lwip_htons>
 80120de:	4603      	mov	r3, r0
 80120e0:	b21b      	sxth	r3, r3
 80120e2:	4323      	orrs	r3, r4
 80120e4:	b21a      	sxth	r2, r3
 80120e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	b292      	uxth	r2, r2
 80120ee:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120fa:	4413      	add	r3, r2
 80120fc:	b299      	uxth	r1, r3
 80120fe:	4b3c      	ldr	r3, [pc, #240]	@ (80121f0 <tcp_receive+0xf10>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	b29a      	uxth	r2, r3
 8012104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	1a8a      	subs	r2, r1, r2
 801210a:	b292      	uxth	r2, r2
 801210c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801210e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	685a      	ldr	r2, [r3, #4]
 8012114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	891b      	ldrh	r3, [r3, #8]
 801211a:	4619      	mov	r1, r3
 801211c:	4610      	mov	r0, r2
 801211e:	f7fb fb99 	bl	800d854 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	891c      	ldrh	r4, [r3, #8]
 8012128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	899b      	ldrh	r3, [r3, #12]
 8012130:	b29b      	uxth	r3, r3
 8012132:	4618      	mov	r0, r3
 8012134:	f7fa f968 	bl	800c408 <lwip_htons>
 8012138:	4603      	mov	r3, r0
 801213a:	b2db      	uxtb	r3, r3
 801213c:	f003 0303 	and.w	r3, r3, #3
 8012140:	2b00      	cmp	r3, #0
 8012142:	d001      	beq.n	8012148 <tcp_receive+0xe68>
 8012144:	2301      	movs	r3, #1
 8012146:	e000      	b.n	801214a <tcp_receive+0xe6a>
 8012148:	2300      	movs	r3, #0
 801214a:	4423      	add	r3, r4
 801214c:	b29a      	uxth	r2, r3
 801214e:	4b2a      	ldr	r3, [pc, #168]	@ (80121f8 <tcp_receive+0xf18>)
 8012150:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012152:	4b29      	ldr	r3, [pc, #164]	@ (80121f8 <tcp_receive+0xf18>)
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	461a      	mov	r2, r3
 8012158:	4b25      	ldr	r3, [pc, #148]	@ (80121f0 <tcp_receive+0xf10>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	441a      	add	r2, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012162:	6879      	ldr	r1, [r7, #4]
 8012164:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012166:	440b      	add	r3, r1
 8012168:	429a      	cmp	r2, r3
 801216a:	d019      	beq.n	80121a0 <tcp_receive+0xec0>
 801216c:	4b23      	ldr	r3, [pc, #140]	@ (80121fc <tcp_receive+0xf1c>)
 801216e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8012172:	4923      	ldr	r1, [pc, #140]	@ (8012200 <tcp_receive+0xf20>)
 8012174:	4823      	ldr	r0, [pc, #140]	@ (8012204 <tcp_receive+0xf24>)
 8012176:	f005 fa05 	bl	8017584 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801217a:	e011      	b.n	80121a0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801217c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012184:	2b00      	cmp	r3, #0
 8012186:	f47f aea5 	bne.w	8011ed4 <tcp_receive+0xbf4>
 801218a:	e00a      	b.n	80121a2 <tcp_receive+0xec2>
                break;
 801218c:	bf00      	nop
 801218e:	e008      	b.n	80121a2 <tcp_receive+0xec2>
                break;
 8012190:	bf00      	nop
 8012192:	e006      	b.n	80121a2 <tcp_receive+0xec2>
                  break;
 8012194:	bf00      	nop
 8012196:	e004      	b.n	80121a2 <tcp_receive+0xec2>
                  break;
 8012198:	bf00      	nop
 801219a:	e002      	b.n	80121a2 <tcp_receive+0xec2>
                  break;
 801219c:	bf00      	nop
 801219e:	e000      	b.n	80121a2 <tcp_receive+0xec2>
                break;
 80121a0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f001 fe88 	bl	8013eb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80121a8:	e003      	b.n	80121b2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f001 fe84 	bl	8013eb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121b0:	e01a      	b.n	80121e8 <tcp_receive+0xf08>
 80121b2:	e019      	b.n	80121e8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80121b4:	4b0e      	ldr	r3, [pc, #56]	@ (80121f0 <tcp_receive+0xf10>)
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121bc:	1ad3      	subs	r3, r2, r3
 80121be:	2b00      	cmp	r3, #0
 80121c0:	db0a      	blt.n	80121d8 <tcp_receive+0xef8>
 80121c2:	4b0b      	ldr	r3, [pc, #44]	@ (80121f0 <tcp_receive+0xf10>)
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ca:	6879      	ldr	r1, [r7, #4]
 80121cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80121ce:	440b      	add	r3, r1
 80121d0:	1ad3      	subs	r3, r2, r3
 80121d2:	3301      	adds	r3, #1
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	dd07      	ble.n	80121e8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	8b5b      	ldrh	r3, [r3, #26]
 80121dc:	f043 0302 	orr.w	r3, r3, #2
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80121e6:	e7ff      	b.n	80121e8 <tcp_receive+0xf08>
 80121e8:	bf00      	nop
 80121ea:	3750      	adds	r7, #80	@ 0x50
 80121ec:	46bd      	mov	sp, r7
 80121ee:	bdb0      	pop	{r4, r5, r7, pc}
 80121f0:	2000df8c 	.word	0x2000df8c
 80121f4:	2000df6c 	.word	0x2000df6c
 80121f8:	2000df96 	.word	0x2000df96
 80121fc:	0801a2bc 	.word	0x0801a2bc
 8012200:	0801a664 	.word	0x0801a664
 8012204:	0801a308 	.word	0x0801a308

08012208 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012208:	b480      	push	{r7}
 801220a:	b083      	sub	sp, #12
 801220c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801220e:	4b15      	ldr	r3, [pc, #84]	@ (8012264 <tcp_get_next_optbyte+0x5c>)
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	1c5a      	adds	r2, r3, #1
 8012214:	b291      	uxth	r1, r2
 8012216:	4a13      	ldr	r2, [pc, #76]	@ (8012264 <tcp_get_next_optbyte+0x5c>)
 8012218:	8011      	strh	r1, [r2, #0]
 801221a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801221c:	4b12      	ldr	r3, [pc, #72]	@ (8012268 <tcp_get_next_optbyte+0x60>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d004      	beq.n	801222e <tcp_get_next_optbyte+0x26>
 8012224:	4b11      	ldr	r3, [pc, #68]	@ (801226c <tcp_get_next_optbyte+0x64>)
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	88fa      	ldrh	r2, [r7, #6]
 801222a:	429a      	cmp	r2, r3
 801222c:	d208      	bcs.n	8012240 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801222e:	4b10      	ldr	r3, [pc, #64]	@ (8012270 <tcp_get_next_optbyte+0x68>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	3314      	adds	r3, #20
 8012234:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012236:	88fb      	ldrh	r3, [r7, #6]
 8012238:	683a      	ldr	r2, [r7, #0]
 801223a:	4413      	add	r3, r2
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	e00b      	b.n	8012258 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012240:	88fb      	ldrh	r3, [r7, #6]
 8012242:	b2da      	uxtb	r2, r3
 8012244:	4b09      	ldr	r3, [pc, #36]	@ (801226c <tcp_get_next_optbyte+0x64>)
 8012246:	881b      	ldrh	r3, [r3, #0]
 8012248:	b2db      	uxtb	r3, r3
 801224a:	1ad3      	subs	r3, r2, r3
 801224c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801224e:	4b06      	ldr	r3, [pc, #24]	@ (8012268 <tcp_get_next_optbyte+0x60>)
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	797b      	ldrb	r3, [r7, #5]
 8012254:	4413      	add	r3, r2
 8012256:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012258:	4618      	mov	r0, r3
 801225a:	370c      	adds	r7, #12
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	2000df88 	.word	0x2000df88
 8012268:	2000df84 	.word	0x2000df84
 801226c:	2000df82 	.word	0x2000df82
 8012270:	2000df7c 	.word	0x2000df7c

08012274 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d106      	bne.n	8012290 <tcp_parseopt+0x1c>
 8012282:	4b32      	ldr	r3, [pc, #200]	@ (801234c <tcp_parseopt+0xd8>)
 8012284:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012288:	4931      	ldr	r1, [pc, #196]	@ (8012350 <tcp_parseopt+0xdc>)
 801228a:	4832      	ldr	r0, [pc, #200]	@ (8012354 <tcp_parseopt+0xe0>)
 801228c:	f005 f97a 	bl	8017584 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012290:	4b31      	ldr	r3, [pc, #196]	@ (8012358 <tcp_parseopt+0xe4>)
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d056      	beq.n	8012346 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012298:	4b30      	ldr	r3, [pc, #192]	@ (801235c <tcp_parseopt+0xe8>)
 801229a:	2200      	movs	r2, #0
 801229c:	801a      	strh	r2, [r3, #0]
 801229e:	e046      	b.n	801232e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80122a0:	f7ff ffb2 	bl	8012208 <tcp_get_next_optbyte>
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
 80122aa:	2b02      	cmp	r3, #2
 80122ac:	d006      	beq.n	80122bc <tcp_parseopt+0x48>
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	dc2a      	bgt.n	8012308 <tcp_parseopt+0x94>
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d042      	beq.n	801233c <tcp_parseopt+0xc8>
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d038      	beq.n	801232c <tcp_parseopt+0xb8>
 80122ba:	e025      	b.n	8012308 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80122bc:	f7ff ffa4 	bl	8012208 <tcp_get_next_optbyte>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b04      	cmp	r3, #4
 80122c4:	d13c      	bne.n	8012340 <tcp_parseopt+0xcc>
 80122c6:	4b25      	ldr	r3, [pc, #148]	@ (801235c <tcp_parseopt+0xe8>)
 80122c8:	881b      	ldrh	r3, [r3, #0]
 80122ca:	3301      	adds	r3, #1
 80122cc:	4a22      	ldr	r2, [pc, #136]	@ (8012358 <tcp_parseopt+0xe4>)
 80122ce:	8812      	ldrh	r2, [r2, #0]
 80122d0:	4293      	cmp	r3, r2
 80122d2:	da35      	bge.n	8012340 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80122d4:	f7ff ff98 	bl	8012208 <tcp_get_next_optbyte>
 80122d8:	4603      	mov	r3, r0
 80122da:	021b      	lsls	r3, r3, #8
 80122dc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80122de:	f7ff ff93 	bl	8012208 <tcp_get_next_optbyte>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	89bb      	ldrh	r3, [r7, #12]
 80122e8:	4313      	orrs	r3, r2
 80122ea:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80122ec:	89bb      	ldrh	r3, [r7, #12]
 80122ee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80122f2:	d804      	bhi.n	80122fe <tcp_parseopt+0x8a>
 80122f4:	89bb      	ldrh	r3, [r7, #12]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d001      	beq.n	80122fe <tcp_parseopt+0x8a>
 80122fa:	89ba      	ldrh	r2, [r7, #12]
 80122fc:	e001      	b.n	8012302 <tcp_parseopt+0x8e>
 80122fe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8012306:	e012      	b.n	801232e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012308:	f7ff ff7e 	bl	8012208 <tcp_get_next_optbyte>
 801230c:	4603      	mov	r3, r0
 801230e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012310:	7afb      	ldrb	r3, [r7, #11]
 8012312:	2b01      	cmp	r3, #1
 8012314:	d916      	bls.n	8012344 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012316:	7afb      	ldrb	r3, [r7, #11]
 8012318:	b29a      	uxth	r2, r3
 801231a:	4b10      	ldr	r3, [pc, #64]	@ (801235c <tcp_parseopt+0xe8>)
 801231c:	881b      	ldrh	r3, [r3, #0]
 801231e:	4413      	add	r3, r2
 8012320:	b29b      	uxth	r3, r3
 8012322:	3b02      	subs	r3, #2
 8012324:	b29a      	uxth	r2, r3
 8012326:	4b0d      	ldr	r3, [pc, #52]	@ (801235c <tcp_parseopt+0xe8>)
 8012328:	801a      	strh	r2, [r3, #0]
 801232a:	e000      	b.n	801232e <tcp_parseopt+0xba>
          break;
 801232c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801232e:	4b0b      	ldr	r3, [pc, #44]	@ (801235c <tcp_parseopt+0xe8>)
 8012330:	881a      	ldrh	r2, [r3, #0]
 8012332:	4b09      	ldr	r3, [pc, #36]	@ (8012358 <tcp_parseopt+0xe4>)
 8012334:	881b      	ldrh	r3, [r3, #0]
 8012336:	429a      	cmp	r2, r3
 8012338:	d3b2      	bcc.n	80122a0 <tcp_parseopt+0x2c>
 801233a:	e004      	b.n	8012346 <tcp_parseopt+0xd2>
          return;
 801233c:	bf00      	nop
 801233e:	e002      	b.n	8012346 <tcp_parseopt+0xd2>
            return;
 8012340:	bf00      	nop
 8012342:	e000      	b.n	8012346 <tcp_parseopt+0xd2>
            return;
 8012344:	bf00      	nop
      }
    }
  }
}
 8012346:	3710      	adds	r7, #16
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}
 801234c:	0801a2bc 	.word	0x0801a2bc
 8012350:	0801a720 	.word	0x0801a720
 8012354:	0801a308 	.word	0x0801a308
 8012358:	2000df80 	.word	0x2000df80
 801235c:	2000df88 	.word	0x2000df88

08012360 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012360:	b480      	push	{r7}
 8012362:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012364:	4b05      	ldr	r3, [pc, #20]	@ (801237c <tcp_trigger_input_pcb_close+0x1c>)
 8012366:	781b      	ldrb	r3, [r3, #0]
 8012368:	f043 0310 	orr.w	r3, r3, #16
 801236c:	b2da      	uxtb	r2, r3
 801236e:	4b03      	ldr	r3, [pc, #12]	@ (801237c <tcp_trigger_input_pcb_close+0x1c>)
 8012370:	701a      	strb	r2, [r3, #0]
}
 8012372:	bf00      	nop
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	2000df99 	.word	0x2000df99

08012380 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b084      	sub	sp, #16
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00a      	beq.n	80123a8 <tcp_route+0x28>
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	7a1b      	ldrb	r3, [r3, #8]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d006      	beq.n	80123a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	7a1b      	ldrb	r3, [r3, #8]
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fb f850 	bl	800d444 <netif_get_by_index>
 80123a4:	4603      	mov	r3, r0
 80123a6:	e003      	b.n	80123b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f003 fc49 	bl	8015c40 <ip4_route>
 80123ae:	4603      	mov	r3, r0
  }
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3710      	adds	r7, #16
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80123b8:	b590      	push	{r4, r7, lr}
 80123ba:	b087      	sub	sp, #28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	603b      	str	r3, [r7, #0]
 80123c4:	4613      	mov	r3, r2
 80123c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d105      	bne.n	80123da <tcp_create_segment+0x22>
 80123ce:	4b43      	ldr	r3, [pc, #268]	@ (80124dc <tcp_create_segment+0x124>)
 80123d0:	22a3      	movs	r2, #163	@ 0xa3
 80123d2:	4943      	ldr	r1, [pc, #268]	@ (80124e0 <tcp_create_segment+0x128>)
 80123d4:	4843      	ldr	r0, [pc, #268]	@ (80124e4 <tcp_create_segment+0x12c>)
 80123d6:	f005 f8d5 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d105      	bne.n	80123ec <tcp_create_segment+0x34>
 80123e0:	4b3e      	ldr	r3, [pc, #248]	@ (80124dc <tcp_create_segment+0x124>)
 80123e2:	22a4      	movs	r2, #164	@ 0xa4
 80123e4:	4940      	ldr	r1, [pc, #256]	@ (80124e8 <tcp_create_segment+0x130>)
 80123e6:	483f      	ldr	r0, [pc, #252]	@ (80124e4 <tcp_create_segment+0x12c>)
 80123e8:	f005 f8cc 	bl	8017584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80123f0:	009b      	lsls	r3, r3, #2
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	f003 0304 	and.w	r3, r3, #4
 80123f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80123fa:	2003      	movs	r0, #3
 80123fc:	f7fa fcba 	bl	800cd74 <memp_malloc>
 8012400:	6138      	str	r0, [r7, #16]
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d104      	bne.n	8012412 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012408:	68b8      	ldr	r0, [r7, #8]
 801240a:	f7fb fba9 	bl	800db60 <pbuf_free>
    return NULL;
 801240e:	2300      	movs	r3, #0
 8012410:	e060      	b.n	80124d4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012418:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	2200      	movs	r2, #0
 801241e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	891a      	ldrh	r2, [r3, #8]
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	b29b      	uxth	r3, r3
 801242e:	429a      	cmp	r2, r3
 8012430:	d205      	bcs.n	801243e <tcp_create_segment+0x86>
 8012432:	4b2a      	ldr	r3, [pc, #168]	@ (80124dc <tcp_create_segment+0x124>)
 8012434:	22b0      	movs	r2, #176	@ 0xb0
 8012436:	492d      	ldr	r1, [pc, #180]	@ (80124ec <tcp_create_segment+0x134>)
 8012438:	482a      	ldr	r0, [pc, #168]	@ (80124e4 <tcp_create_segment+0x12c>)
 801243a:	f005 f8a3 	bl	8017584 <iprintf>
  seg->len = p->tot_len - optlen;
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	891a      	ldrh	r2, [r3, #8]
 8012442:	7dfb      	ldrb	r3, [r7, #23]
 8012444:	b29b      	uxth	r3, r3
 8012446:	1ad3      	subs	r3, r2, r3
 8012448:	b29a      	uxth	r2, r3
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801244e:	2114      	movs	r1, #20
 8012450:	68b8      	ldr	r0, [r7, #8]
 8012452:	f7fb faef 	bl	800da34 <pbuf_add_header>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d004      	beq.n	8012466 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801245c:	6938      	ldr	r0, [r7, #16]
 801245e:	f7fd f804 	bl	800f46a <tcp_seg_free>
    return NULL;
 8012462:	2300      	movs	r3, #0
 8012464:	e036      	b.n	80124d4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	685b      	ldr	r3, [r3, #4]
 801246a:	685a      	ldr	r2, [r3, #4]
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	8ada      	ldrh	r2, [r3, #22]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	68dc      	ldr	r4, [r3, #12]
 8012478:	4610      	mov	r0, r2
 801247a:	f7f9 ffc5 	bl	800c408 <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	8b1a      	ldrh	r2, [r3, #24]
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	68dc      	ldr	r4, [r3, #12]
 801248a:	4610      	mov	r0, r2
 801248c:	f7f9 ffbc 	bl	800c408 <lwip_htons>
 8012490:	4603      	mov	r3, r0
 8012492:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	68dc      	ldr	r4, [r3, #12]
 8012498:	6838      	ldr	r0, [r7, #0]
 801249a:	f7f9 ffca 	bl	800c432 <lwip_htonl>
 801249e:	4603      	mov	r3, r0
 80124a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80124a2:	7dfb      	ldrb	r3, [r7, #23]
 80124a4:	089b      	lsrs	r3, r3, #2
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	3305      	adds	r3, #5
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	031b      	lsls	r3, r3, #12
 80124ae:	b29a      	uxth	r2, r3
 80124b0:	79fb      	ldrb	r3, [r7, #7]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	4313      	orrs	r3, r2
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	68dc      	ldr	r4, [r3, #12]
 80124bc:	4610      	mov	r0, r2
 80124be:	f7f9 ffa3 	bl	800c408 <lwip_htons>
 80124c2:	4603      	mov	r3, r0
 80124c4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	749a      	strb	r2, [r3, #18]
 80124ce:	2200      	movs	r2, #0
 80124d0:	74da      	strb	r2, [r3, #19]
  return seg;
 80124d2:	693b      	ldr	r3, [r7, #16]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	371c      	adds	r7, #28
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd90      	pop	{r4, r7, pc}
 80124dc:	0801a73c 	.word	0x0801a73c
 80124e0:	0801a770 	.word	0x0801a770
 80124e4:	0801a790 	.word	0x0801a790
 80124e8:	0801a7b8 	.word	0x0801a7b8
 80124ec:	0801a7dc 	.word	0x0801a7dc

080124f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	607b      	str	r3, [r7, #4]
 80124f8:	4603      	mov	r3, r0
 80124fa:	73fb      	strb	r3, [r7, #15]
 80124fc:	460b      	mov	r3, r1
 80124fe:	81bb      	strh	r3, [r7, #12]
 8012500:	4613      	mov	r3, r2
 8012502:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012504:	89bb      	ldrh	r3, [r7, #12]
 8012506:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d105      	bne.n	801251a <tcp_pbuf_prealloc+0x2a>
 801250e:	4b30      	ldr	r3, [pc, #192]	@ (80125d0 <tcp_pbuf_prealloc+0xe0>)
 8012510:	22e8      	movs	r2, #232	@ 0xe8
 8012512:	4930      	ldr	r1, [pc, #192]	@ (80125d4 <tcp_pbuf_prealloc+0xe4>)
 8012514:	4830      	ldr	r0, [pc, #192]	@ (80125d8 <tcp_pbuf_prealloc+0xe8>)
 8012516:	f005 f835 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801251a:	6a3b      	ldr	r3, [r7, #32]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d105      	bne.n	801252c <tcp_pbuf_prealloc+0x3c>
 8012520:	4b2b      	ldr	r3, [pc, #172]	@ (80125d0 <tcp_pbuf_prealloc+0xe0>)
 8012522:	22e9      	movs	r2, #233	@ 0xe9
 8012524:	492d      	ldr	r1, [pc, #180]	@ (80125dc <tcp_pbuf_prealloc+0xec>)
 8012526:	482c      	ldr	r0, [pc, #176]	@ (80125d8 <tcp_pbuf_prealloc+0xe8>)
 8012528:	f005 f82c 	bl	8017584 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801252c:	89ba      	ldrh	r2, [r7, #12]
 801252e:	897b      	ldrh	r3, [r7, #10]
 8012530:	429a      	cmp	r2, r3
 8012532:	d221      	bcs.n	8012578 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012534:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012538:	f003 0302 	and.w	r3, r3, #2
 801253c:	2b00      	cmp	r3, #0
 801253e:	d111      	bne.n	8012564 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012540:	6a3b      	ldr	r3, [r7, #32]
 8012542:	8b5b      	ldrh	r3, [r3, #26]
 8012544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012548:	2b00      	cmp	r3, #0
 801254a:	d115      	bne.n	8012578 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801254c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012550:	2b00      	cmp	r3, #0
 8012552:	d007      	beq.n	8012564 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012554:	6a3b      	ldr	r3, [r7, #32]
 8012556:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012558:	2b00      	cmp	r3, #0
 801255a:	d103      	bne.n	8012564 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801255c:	6a3b      	ldr	r3, [r7, #32]
 801255e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8012560:	2b00      	cmp	r3, #0
 8012562:	d009      	beq.n	8012578 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012564:	89bb      	ldrh	r3, [r7, #12]
 8012566:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801256a:	f023 0203 	bic.w	r2, r3, #3
 801256e:	897b      	ldrh	r3, [r7, #10]
 8012570:	4293      	cmp	r3, r2
 8012572:	bf28      	it	cs
 8012574:	4613      	movcs	r3, r2
 8012576:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012578:	8af9      	ldrh	r1, [r7, #22]
 801257a:	7bfb      	ldrb	r3, [r7, #15]
 801257c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012580:	4618      	mov	r0, r3
 8012582:	f7fb f809 	bl	800d598 <pbuf_alloc>
 8012586:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801258e:	2300      	movs	r3, #0
 8012590:	e019      	b.n	80125c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d006      	beq.n	80125a8 <tcp_pbuf_prealloc+0xb8>
 801259a:	4b0d      	ldr	r3, [pc, #52]	@ (80125d0 <tcp_pbuf_prealloc+0xe0>)
 801259c:	f240 120b 	movw	r2, #267	@ 0x10b
 80125a0:	490f      	ldr	r1, [pc, #60]	@ (80125e0 <tcp_pbuf_prealloc+0xf0>)
 80125a2:	480d      	ldr	r0, [pc, #52]	@ (80125d8 <tcp_pbuf_prealloc+0xe8>)
 80125a4:	f004 ffee 	bl	8017584 <iprintf>
  *oversize = p->len - length;
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	895a      	ldrh	r2, [r3, #10]
 80125ac:	89bb      	ldrh	r3, [r7, #12]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	89ba      	ldrh	r2, [r7, #12]
 80125ba:	811a      	strh	r2, [r3, #8]
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	891a      	ldrh	r2, [r3, #8]
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	815a      	strh	r2, [r3, #10]
  return p;
 80125c4:	693b      	ldr	r3, [r7, #16]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3718      	adds	r7, #24
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	0801a73c 	.word	0x0801a73c
 80125d4:	0801a7f4 	.word	0x0801a7f4
 80125d8:	0801a790 	.word	0x0801a790
 80125dc:	0801a818 	.word	0x0801a818
 80125e0:	0801a838 	.word	0x0801a838

080125e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b082      	sub	sp, #8
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	460b      	mov	r3, r1
 80125ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d106      	bne.n	8012604 <tcp_write_checks+0x20>
 80125f6:	4b33      	ldr	r3, [pc, #204]	@ (80126c4 <tcp_write_checks+0xe0>)
 80125f8:	f240 1233 	movw	r2, #307	@ 0x133
 80125fc:	4932      	ldr	r1, [pc, #200]	@ (80126c8 <tcp_write_checks+0xe4>)
 80125fe:	4833      	ldr	r0, [pc, #204]	@ (80126cc <tcp_write_checks+0xe8>)
 8012600:	f004 ffc0 	bl	8017584 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	7d1b      	ldrb	r3, [r3, #20]
 8012608:	2b04      	cmp	r3, #4
 801260a:	d00e      	beq.n	801262a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012610:	2b07      	cmp	r3, #7
 8012612:	d00a      	beq.n	801262a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012618:	2b02      	cmp	r3, #2
 801261a:	d006      	beq.n	801262a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012620:	2b03      	cmp	r3, #3
 8012622:	d002      	beq.n	801262a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012624:	f06f 030a 	mvn.w	r3, #10
 8012628:	e048      	b.n	80126bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801262a:	887b      	ldrh	r3, [r7, #2]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d101      	bne.n	8012634 <tcp_write_checks+0x50>
    return ERR_OK;
 8012630:	2300      	movs	r3, #0
 8012632:	e043      	b.n	80126bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801263a:	887a      	ldrh	r2, [r7, #2]
 801263c:	429a      	cmp	r2, r3
 801263e:	d909      	bls.n	8012654 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	8b5b      	ldrh	r3, [r3, #26]
 8012644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012648:	b29a      	uxth	r2, r3
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801264e:	f04f 33ff 	mov.w	r3, #4294967295
 8012652:	e033      	b.n	80126bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801265a:	2b08      	cmp	r3, #8
 801265c:	d909      	bls.n	8012672 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	8b5b      	ldrh	r3, [r3, #26]
 8012662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012666:	b29a      	uxth	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801266c:	f04f 33ff 	mov.w	r3, #4294967295
 8012670:	e024      	b.n	80126bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00f      	beq.n	801269c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012680:	2b00      	cmp	r3, #0
 8012682:	d11a      	bne.n	80126ba <tcp_write_checks+0xd6>
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012688:	2b00      	cmp	r3, #0
 801268a:	d116      	bne.n	80126ba <tcp_write_checks+0xd6>
 801268c:	4b0d      	ldr	r3, [pc, #52]	@ (80126c4 <tcp_write_checks+0xe0>)
 801268e:	f240 1255 	movw	r2, #341	@ 0x155
 8012692:	490f      	ldr	r1, [pc, #60]	@ (80126d0 <tcp_write_checks+0xec>)
 8012694:	480d      	ldr	r0, [pc, #52]	@ (80126cc <tcp_write_checks+0xe8>)
 8012696:	f004 ff75 	bl	8017584 <iprintf>
 801269a:	e00e      	b.n	80126ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d103      	bne.n	80126ac <tcp_write_checks+0xc8>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d006      	beq.n	80126ba <tcp_write_checks+0xd6>
 80126ac:	4b05      	ldr	r3, [pc, #20]	@ (80126c4 <tcp_write_checks+0xe0>)
 80126ae:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80126b2:	4908      	ldr	r1, [pc, #32]	@ (80126d4 <tcp_write_checks+0xf0>)
 80126b4:	4805      	ldr	r0, [pc, #20]	@ (80126cc <tcp_write_checks+0xe8>)
 80126b6:	f004 ff65 	bl	8017584 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80126ba:	2300      	movs	r3, #0
}
 80126bc:	4618      	mov	r0, r3
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	0801a73c 	.word	0x0801a73c
 80126c8:	0801a84c 	.word	0x0801a84c
 80126cc:	0801a790 	.word	0x0801a790
 80126d0:	0801a86c 	.word	0x0801a86c
 80126d4:	0801a8a8 	.word	0x0801a8a8

080126d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80126d8:	b590      	push	{r4, r7, lr}
 80126da:	b09b      	sub	sp, #108	@ 0x6c
 80126dc:	af04      	add	r7, sp, #16
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	4611      	mov	r1, r2
 80126e4:	461a      	mov	r2, r3
 80126e6:	460b      	mov	r3, r1
 80126e8:	80fb      	strh	r3, [r7, #6]
 80126ea:	4613      	mov	r3, r2
 80126ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80126ee:	2300      	movs	r3, #0
 80126f0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80126f2:	2300      	movs	r3, #0
 80126f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80126f6:	2300      	movs	r3, #0
 80126f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126fa:	2300      	movs	r3, #0
 80126fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126fe:	2300      	movs	r3, #0
 8012700:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8012702:	2300      	movs	r3, #0
 8012704:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012708:	2300      	movs	r3, #0
 801270a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801270e:	2300      	movs	r3, #0
 8012710:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012716:	2300      	movs	r3, #0
 8012718:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d109      	bne.n	8012734 <tcp_write+0x5c>
 8012720:	4ba4      	ldr	r3, [pc, #656]	@ (80129b4 <tcp_write+0x2dc>)
 8012722:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8012726:	49a4      	ldr	r1, [pc, #656]	@ (80129b8 <tcp_write+0x2e0>)
 8012728:	48a4      	ldr	r0, [pc, #656]	@ (80129bc <tcp_write+0x2e4>)
 801272a:	f004 ff2b 	bl	8017584 <iprintf>
 801272e:	f06f 030f 	mvn.w	r3, #15
 8012732:	e32a      	b.n	8012d8a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801273a:	085b      	lsrs	r3, r3, #1
 801273c:	b29a      	uxth	r2, r3
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012742:	4293      	cmp	r3, r2
 8012744:	bf28      	it	cs
 8012746:	4613      	movcs	r3, r2
 8012748:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801274a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801274c:	2b00      	cmp	r3, #0
 801274e:	d102      	bne.n	8012756 <tcp_write+0x7e>
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012754:	e000      	b.n	8012758 <tcp_write+0x80>
 8012756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012758:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d109      	bne.n	8012774 <tcp_write+0x9c>
 8012760:	4b94      	ldr	r3, [pc, #592]	@ (80129b4 <tcp_write+0x2dc>)
 8012762:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8012766:	4996      	ldr	r1, [pc, #600]	@ (80129c0 <tcp_write+0x2e8>)
 8012768:	4894      	ldr	r0, [pc, #592]	@ (80129bc <tcp_write+0x2e4>)
 801276a:	f004 ff0b 	bl	8017584 <iprintf>
 801276e:	f06f 030f 	mvn.w	r3, #15
 8012772:	e30a      	b.n	8012d8a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012774:	88fb      	ldrh	r3, [r7, #6]
 8012776:	4619      	mov	r1, r3
 8012778:	68f8      	ldr	r0, [r7, #12]
 801277a:	f7ff ff33 	bl	80125e4 <tcp_write_checks>
 801277e:	4603      	mov	r3, r0
 8012780:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8012784:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012788:	2b00      	cmp	r3, #0
 801278a:	d002      	beq.n	8012792 <tcp_write+0xba>
    return err;
 801278c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012790:	e2fb      	b.n	8012d8a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012798:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801279c:	2300      	movs	r3, #0
 801279e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	f000 80f6 	beq.w	8012998 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80127b2:	e002      	b.n	80127ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80127b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1f8      	bne.n	80127b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80127c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127c4:	7a9b      	ldrb	r3, [r3, #10]
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	f003 0304 	and.w	r3, r3, #4
 80127ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80127d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80127d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127d4:	891b      	ldrh	r3, [r3, #8]
 80127d6:	4619      	mov	r1, r3
 80127d8:	8c3b      	ldrh	r3, [r7, #32]
 80127da:	440b      	add	r3, r1
 80127dc:	429a      	cmp	r2, r3
 80127de:	da06      	bge.n	80127ee <tcp_write+0x116>
 80127e0:	4b74      	ldr	r3, [pc, #464]	@ (80129b4 <tcp_write+0x2dc>)
 80127e2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80127e6:	4977      	ldr	r1, [pc, #476]	@ (80129c4 <tcp_write+0x2ec>)
 80127e8:	4874      	ldr	r0, [pc, #464]	@ (80129bc <tcp_write+0x2e4>)
 80127ea:	f004 fecb 	bl	8017584 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80127ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127f0:	891a      	ldrh	r2, [r3, #8]
 80127f2:	8c3b      	ldrh	r3, [r7, #32]
 80127f4:	4413      	add	r3, r2
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012804:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012806:	8a7b      	ldrh	r3, [r7, #18]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d026      	beq.n	801285a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801280c:	8a7b      	ldrh	r3, [r7, #18]
 801280e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012810:	429a      	cmp	r2, r3
 8012812:	d206      	bcs.n	8012822 <tcp_write+0x14a>
 8012814:	4b67      	ldr	r3, [pc, #412]	@ (80129b4 <tcp_write+0x2dc>)
 8012816:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801281a:	496b      	ldr	r1, [pc, #428]	@ (80129c8 <tcp_write+0x2f0>)
 801281c:	4867      	ldr	r0, [pc, #412]	@ (80129bc <tcp_write+0x2e4>)
 801281e:	f004 feb1 	bl	8017584 <iprintf>
      seg = last_unsent;
 8012822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012824:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012826:	8a7b      	ldrh	r3, [r7, #18]
 8012828:	88fa      	ldrh	r2, [r7, #6]
 801282a:	4293      	cmp	r3, r2
 801282c:	bf28      	it	cs
 801282e:	4613      	movcs	r3, r2
 8012830:	b29b      	uxth	r3, r3
 8012832:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012834:	4293      	cmp	r3, r2
 8012836:	bf28      	it	cs
 8012838:	4613      	movcs	r3, r2
 801283a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801283c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012840:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012842:	4413      	add	r3, r2
 8012844:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8012848:	8a7a      	ldrh	r2, [r7, #18]
 801284a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	b29b      	uxth	r3, r3
 8012850:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012852:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012854:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012856:	1ad3      	subs	r3, r2, r3
 8012858:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801285a:	8a7b      	ldrh	r3, [r7, #18]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00b      	beq.n	8012878 <tcp_write+0x1a0>
 8012860:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012864:	88fb      	ldrh	r3, [r7, #6]
 8012866:	429a      	cmp	r2, r3
 8012868:	d006      	beq.n	8012878 <tcp_write+0x1a0>
 801286a:	4b52      	ldr	r3, [pc, #328]	@ (80129b4 <tcp_write+0x2dc>)
 801286c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012870:	4956      	ldr	r1, [pc, #344]	@ (80129cc <tcp_write+0x2f4>)
 8012872:	4852      	ldr	r0, [pc, #328]	@ (80129bc <tcp_write+0x2e4>)
 8012874:	f004 fe86 	bl	8017584 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801287c:	88fb      	ldrh	r3, [r7, #6]
 801287e:	429a      	cmp	r2, r3
 8012880:	f080 8167 	bcs.w	8012b52 <tcp_write+0x47a>
 8012884:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012886:	2b00      	cmp	r3, #0
 8012888:	f000 8163 	beq.w	8012b52 <tcp_write+0x47a>
 801288c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801288e:	891b      	ldrh	r3, [r3, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	f000 815e 	beq.w	8012b52 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012896:	88fa      	ldrh	r2, [r7, #6]
 8012898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801289c:	1ad2      	subs	r2, r2, r3
 801289e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80128a0:	4293      	cmp	r3, r2
 80128a2:	bfa8      	it	ge
 80128a4:	4613      	movge	r3, r2
 80128a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80128a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80128ac:	797b      	ldrb	r3, [r7, #5]
 80128ae:	f003 0301 	and.w	r3, r3, #1
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d027      	beq.n	8012906 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80128b6:	f107 0012 	add.w	r0, r7, #18
 80128ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80128bc:	8bf9      	ldrh	r1, [r7, #30]
 80128be:	2301      	movs	r3, #1
 80128c0:	9302      	str	r3, [sp, #8]
 80128c2:	797b      	ldrb	r3, [r7, #5]
 80128c4:	9301      	str	r3, [sp, #4]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	9300      	str	r3, [sp, #0]
 80128ca:	4603      	mov	r3, r0
 80128cc:	2000      	movs	r0, #0
 80128ce:	f7ff fe0f 	bl	80124f0 <tcp_pbuf_prealloc>
 80128d2:	6578      	str	r0, [r7, #84]	@ 0x54
 80128d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	f000 8225 	beq.w	8012d26 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80128dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128de:	6858      	ldr	r0, [r3, #4]
 80128e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	4413      	add	r3, r2
 80128e8:	8bfa      	ldrh	r2, [r7, #30]
 80128ea:	4619      	mov	r1, r3
 80128ec:	f005 f849 	bl	8017982 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80128f0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80128f2:	f7fb f9c3 	bl	800dc7c <pbuf_clen>
 80128f6:	4603      	mov	r3, r0
 80128f8:	461a      	mov	r2, r3
 80128fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80128fe:	4413      	add	r3, r2
 8012900:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8012904:	e041      	b.n	801298a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	637b      	str	r3, [r7, #52]	@ 0x34
 801290c:	e002      	b.n	8012914 <tcp_write+0x23c>
 801290e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	637b      	str	r3, [r7, #52]	@ 0x34
 8012914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d1f8      	bne.n	801290e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801291e:	7b1b      	ldrb	r3, [r3, #12]
 8012920:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8012924:	2b00      	cmp	r3, #0
 8012926:	d115      	bne.n	8012954 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801292e:	8952      	ldrh	r2, [r2, #10]
 8012930:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	429a      	cmp	r2, r3
 8012936:	d10d      	bne.n	8012954 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801293c:	2b00      	cmp	r3, #0
 801293e:	d006      	beq.n	801294e <tcp_write+0x276>
 8012940:	4b1c      	ldr	r3, [pc, #112]	@ (80129b4 <tcp_write+0x2dc>)
 8012942:	f240 2231 	movw	r2, #561	@ 0x231
 8012946:	4922      	ldr	r1, [pc, #136]	@ (80129d0 <tcp_write+0x2f8>)
 8012948:	481c      	ldr	r0, [pc, #112]	@ (80129bc <tcp_write+0x2e4>)
 801294a:	f004 fe1b 	bl	8017584 <iprintf>
          extendlen = seglen;
 801294e:	8bfb      	ldrh	r3, [r7, #30]
 8012950:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8012952:	e01a      	b.n	801298a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012954:	8bfb      	ldrh	r3, [r7, #30]
 8012956:	2201      	movs	r2, #1
 8012958:	4619      	mov	r1, r3
 801295a:	2000      	movs	r0, #0
 801295c:	f7fa fe1c 	bl	800d598 <pbuf_alloc>
 8012960:	6578      	str	r0, [r7, #84]	@ 0x54
 8012962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012964:	2b00      	cmp	r3, #0
 8012966:	f000 81e0 	beq.w	8012d2a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801296a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801296e:	68ba      	ldr	r2, [r7, #8]
 8012970:	441a      	add	r2, r3
 8012972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012974:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012976:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012978:	f7fb f980 	bl	800dc7c <pbuf_clen>
 801297c:	4603      	mov	r3, r0
 801297e:	461a      	mov	r2, r3
 8012980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012984:	4413      	add	r3, r2
 8012986:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801298a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801298e:	8bfb      	ldrh	r3, [r7, #30]
 8012990:	4413      	add	r3, r2
 8012992:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012996:	e0dc      	b.n	8012b52 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f000 80d7 	beq.w	8012b52 <tcp_write+0x47a>
 80129a4:	4b03      	ldr	r3, [pc, #12]	@ (80129b4 <tcp_write+0x2dc>)
 80129a6:	f240 224a 	movw	r2, #586	@ 0x24a
 80129aa:	490a      	ldr	r1, [pc, #40]	@ (80129d4 <tcp_write+0x2fc>)
 80129ac:	4803      	ldr	r0, [pc, #12]	@ (80129bc <tcp_write+0x2e4>)
 80129ae:	f004 fde9 	bl	8017584 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80129b2:	e0ce      	b.n	8012b52 <tcp_write+0x47a>
 80129b4:	0801a73c 	.word	0x0801a73c
 80129b8:	0801a8dc 	.word	0x0801a8dc
 80129bc:	0801a790 	.word	0x0801a790
 80129c0:	0801a8f4 	.word	0x0801a8f4
 80129c4:	0801a928 	.word	0x0801a928
 80129c8:	0801a940 	.word	0x0801a940
 80129cc:	0801a960 	.word	0x0801a960
 80129d0:	0801a980 	.word	0x0801a980
 80129d4:	0801a9ac 	.word	0x0801a9ac
    struct pbuf *p;
    u16_t left = len - pos;
 80129d8:	88fa      	ldrh	r2, [r7, #6]
 80129da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80129e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80129ea:	1ad3      	subs	r3, r2, r3
 80129ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80129ee:	8b7a      	ldrh	r2, [r7, #26]
 80129f0:	8bbb      	ldrh	r3, [r7, #28]
 80129f2:	4293      	cmp	r3, r2
 80129f4:	bf28      	it	cs
 80129f6:	4613      	movcs	r3, r2
 80129f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129fa:	797b      	ldrb	r3, [r7, #5]
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d036      	beq.n	8012a72 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012a04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	8b3b      	ldrh	r3, [r7, #24]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	b299      	uxth	r1, r3
 8012a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	bf0c      	ite	eq
 8012a16:	2301      	moveq	r3, #1
 8012a18:	2300      	movne	r3, #0
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	f107 0012 	add.w	r0, r7, #18
 8012a20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a22:	9302      	str	r3, [sp, #8]
 8012a24:	797b      	ldrb	r3, [r7, #5]
 8012a26:	9301      	str	r3, [sp, #4]
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	9300      	str	r3, [sp, #0]
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2036      	movs	r0, #54	@ 0x36
 8012a30:	f7ff fd5e 	bl	80124f0 <tcp_pbuf_prealloc>
 8012a34:	6338      	str	r0, [r7, #48]	@ 0x30
 8012a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f000 8178 	beq.w	8012d2e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a40:	895b      	ldrh	r3, [r3, #10]
 8012a42:	8b3a      	ldrh	r2, [r7, #24]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d906      	bls.n	8012a56 <tcp_write+0x37e>
 8012a48:	4b8c      	ldr	r3, [pc, #560]	@ (8012c7c <tcp_write+0x5a4>)
 8012a4a:	f240 2266 	movw	r2, #614	@ 0x266
 8012a4e:	498c      	ldr	r1, [pc, #560]	@ (8012c80 <tcp_write+0x5a8>)
 8012a50:	488c      	ldr	r0, [pc, #560]	@ (8012c84 <tcp_write+0x5ac>)
 8012a52:	f004 fd97 	bl	8017584 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a58:	685a      	ldr	r2, [r3, #4]
 8012a5a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012a5e:	18d0      	adds	r0, r2, r3
 8012a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a64:	68ba      	ldr	r2, [r7, #8]
 8012a66:	4413      	add	r3, r2
 8012a68:	8b3a      	ldrh	r2, [r7, #24]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	f004 ff89 	bl	8017982 <memcpy>
 8012a70:	e02f      	b.n	8012ad2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012a72:	8a7b      	ldrh	r3, [r7, #18]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d006      	beq.n	8012a86 <tcp_write+0x3ae>
 8012a78:	4b80      	ldr	r3, [pc, #512]	@ (8012c7c <tcp_write+0x5a4>)
 8012a7a:	f240 2271 	movw	r2, #625	@ 0x271
 8012a7e:	4982      	ldr	r1, [pc, #520]	@ (8012c88 <tcp_write+0x5b0>)
 8012a80:	4880      	ldr	r0, [pc, #512]	@ (8012c84 <tcp_write+0x5ac>)
 8012a82:	f004 fd7f 	bl	8017584 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012a86:	8b3b      	ldrh	r3, [r7, #24]
 8012a88:	2201      	movs	r2, #1
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	2036      	movs	r0, #54	@ 0x36
 8012a8e:	f7fa fd83 	bl	800d598 <pbuf_alloc>
 8012a92:	6178      	str	r0, [r7, #20]
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 814b 	beq.w	8012d32 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012a9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012aa0:	68ba      	ldr	r2, [r7, #8]
 8012aa2:	441a      	add	r2, r3
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012aa8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	2036      	movs	r0, #54	@ 0x36
 8012ab6:	f7fa fd6f 	bl	800d598 <pbuf_alloc>
 8012aba:	6338      	str	r0, [r7, #48]	@ 0x30
 8012abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d103      	bne.n	8012aca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012ac2:	6978      	ldr	r0, [r7, #20]
 8012ac4:	f7fb f84c 	bl	800db60 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012ac8:	e136      	b.n	8012d38 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012aca:	6979      	ldr	r1, [r7, #20]
 8012acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ace:	f7fb f915 	bl	800dcfc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012ad2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ad4:	f7fb f8d2 	bl	800dc7c <pbuf_clen>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	461a      	mov	r2, r3
 8012adc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012ae0:	4413      	add	r3, r2
 8012ae2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012aea:	2b09      	cmp	r3, #9
 8012aec:	d903      	bls.n	8012af6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012aee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012af0:	f7fb f836 	bl	800db60 <pbuf_free>
      goto memerr;
 8012af4:	e120      	b.n	8012d38 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012afa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012afe:	441a      	add	r2, r3
 8012b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b04:	9300      	str	r3, [sp, #0]
 8012b06:	4613      	mov	r3, r2
 8012b08:	2200      	movs	r2, #0
 8012b0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f7ff fc53 	bl	80123b8 <tcp_create_segment>
 8012b12:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f000 810d 	beq.w	8012d36 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d102      	bne.n	8012b28 <tcp_write+0x450>
      queue = seg;
 8012b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8012b26:	e00c      	b.n	8012b42 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d106      	bne.n	8012b3c <tcp_write+0x464>
 8012b2e:	4b53      	ldr	r3, [pc, #332]	@ (8012c7c <tcp_write+0x5a4>)
 8012b30:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012b34:	4955      	ldr	r1, [pc, #340]	@ (8012c8c <tcp_write+0x5b4>)
 8012b36:	4853      	ldr	r0, [pc, #332]	@ (8012c84 <tcp_write+0x5ac>)
 8012b38:	f004 fd24 	bl	8017584 <iprintf>
      prev_seg->next = seg;
 8012b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b40:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b44:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012b46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b4a:	8b3b      	ldrh	r3, [r7, #24]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8012b52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b56:	88fb      	ldrh	r3, [r7, #6]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	f4ff af3d 	bcc.w	80129d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012b5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d02c      	beq.n	8012bbe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b6a:	e01e      	b.n	8012baa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b6e:	891a      	ldrh	r2, [r3, #8]
 8012b70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b72:	4413      	add	r3, r2
 8012b74:	b29a      	uxth	r2, r3
 8012b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b78:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d110      	bne.n	8012ba4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b88:	8952      	ldrh	r2, [r2, #10]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012b8e:	68b9      	ldr	r1, [r7, #8]
 8012b90:	4618      	mov	r0, r3
 8012b92:	f004 fef6 	bl	8017982 <memcpy>
        p->len += oversize_used;
 8012b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b98:	895a      	ldrh	r2, [r3, #10]
 8012b9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1dd      	bne.n	8012b6c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bb2:	891a      	ldrh	r2, [r3, #8]
 8012bb4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012bb6:	4413      	add	r3, r2
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bbc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012bbe:	8a7a      	ldrh	r2, [r7, #18]
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d018      	beq.n	8012bfe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d106      	bne.n	8012be0 <tcp_write+0x508>
 8012bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8012c7c <tcp_write+0x5a4>)
 8012bd4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012bd8:	492d      	ldr	r1, [pc, #180]	@ (8012c90 <tcp_write+0x5b8>)
 8012bda:	482a      	ldr	r0, [pc, #168]	@ (8012c84 <tcp_write+0x5ac>)
 8012bdc:	f004 fcd2 	bl	8017584 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7fb f888 	bl	800dcfc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bee:	891a      	ldrh	r2, [r3, #8]
 8012bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bf2:	891b      	ldrh	r3, [r3, #8]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bfa:	811a      	strh	r2, [r3, #8]
 8012bfc:	e037      	b.n	8012c6e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012bfe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d034      	beq.n	8012c6e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d003      	beq.n	8012c12 <tcp_write+0x53a>
 8012c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d106      	bne.n	8012c20 <tcp_write+0x548>
 8012c12:	4b1a      	ldr	r3, [pc, #104]	@ (8012c7c <tcp_write+0x5a4>)
 8012c14:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8012c18:	491e      	ldr	r1, [pc, #120]	@ (8012c94 <tcp_write+0x5bc>)
 8012c1a:	481a      	ldr	r0, [pc, #104]	@ (8012c84 <tcp_write+0x5ac>)
 8012c1c:	f004 fcb2 	bl	8017584 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c22:	685b      	ldr	r3, [r3, #4]
 8012c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c26:	e009      	b.n	8012c3c <tcp_write+0x564>
      p->tot_len += extendlen;
 8012c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c2a:	891a      	ldrh	r2, [r3, #8]
 8012c2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c2e:	4413      	add	r3, r2
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c34:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d1f1      	bne.n	8012c28 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c46:	891a      	ldrh	r2, [r3, #8]
 8012c48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c4a:	4413      	add	r3, r2
 8012c4c:	b29a      	uxth	r2, r3
 8012c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c50:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c54:	895a      	ldrh	r2, [r3, #10]
 8012c56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c58:	4413      	add	r3, r2
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c5e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c62:	891a      	ldrh	r2, [r3, #8]
 8012c64:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012c66:	4413      	add	r3, r2
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c6c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d111      	bne.n	8012c98 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c78:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012c7a:	e010      	b.n	8012c9e <tcp_write+0x5c6>
 8012c7c:	0801a73c 	.word	0x0801a73c
 8012c80:	0801a9dc 	.word	0x0801a9dc
 8012c84:	0801a790 	.word	0x0801a790
 8012c88:	0801aa1c 	.word	0x0801aa1c
 8012c8c:	0801aa2c 	.word	0x0801aa2c
 8012c90:	0801aa40 	.word	0x0801aa40
 8012c94:	0801aa78 	.word	0x0801aa78
  } else {
    last_unsent->next = queue;
 8012c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012c9c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012ca2:	88fb      	ldrh	r3, [r7, #6]
 8012ca4:	441a      	add	r2, r3
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012cb0:	88fb      	ldrh	r3, [r7, #6]
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012cc2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00e      	beq.n	8012cee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10a      	bne.n	8012cee <tcp_write+0x616>
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d106      	bne.n	8012cee <tcp_write+0x616>
 8012ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8012d94 <tcp_write+0x6bc>)
 8012ce2:	f240 3212 	movw	r2, #786	@ 0x312
 8012ce6:	492c      	ldr	r1, [pc, #176]	@ (8012d98 <tcp_write+0x6c0>)
 8012ce8:	482c      	ldr	r0, [pc, #176]	@ (8012d9c <tcp_write+0x6c4>)
 8012cea:	f004 fc4b 	bl	8017584 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d016      	beq.n	8012d22 <tcp_write+0x64a>
 8012cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cf6:	68db      	ldr	r3, [r3, #12]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d012      	beq.n	8012d22 <tcp_write+0x64a>
 8012cfc:	797b      	ldrb	r3, [r7, #5]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d10d      	bne.n	8012d22 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	899b      	ldrh	r3, [r3, #12]
 8012d0c:	b29c      	uxth	r4, r3
 8012d0e:	2008      	movs	r0, #8
 8012d10:	f7f9 fb7a 	bl	800c408 <lwip_htons>
 8012d14:	4603      	mov	r3, r0
 8012d16:	461a      	mov	r2, r3
 8012d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	4322      	orrs	r2, r4
 8012d1e:	b292      	uxth	r2, r2
 8012d20:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012d22:	2300      	movs	r3, #0
 8012d24:	e031      	b.n	8012d8a <tcp_write+0x6b2>
          goto memerr;
 8012d26:	bf00      	nop
 8012d28:	e006      	b.n	8012d38 <tcp_write+0x660>
            goto memerr;
 8012d2a:	bf00      	nop
 8012d2c:	e004      	b.n	8012d38 <tcp_write+0x660>
        goto memerr;
 8012d2e:	bf00      	nop
 8012d30:	e002      	b.n	8012d38 <tcp_write+0x660>
        goto memerr;
 8012d32:	bf00      	nop
 8012d34:	e000      	b.n	8012d38 <tcp_write+0x660>
      goto memerr;
 8012d36:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	8b5b      	ldrh	r3, [r3, #26]
 8012d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d40:	b29a      	uxth	r2, r3
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012d4c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012d4e:	f7fa ff07 	bl	800db60 <pbuf_free>
  }
  if (queue != NULL) {
 8012d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <tcp_write+0x686>
    tcp_segs_free(queue);
 8012d58:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012d5a:	f7fc fb71 	bl	800f440 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00e      	beq.n	8012d86 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d10a      	bne.n	8012d86 <tcp_write+0x6ae>
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d106      	bne.n	8012d86 <tcp_write+0x6ae>
 8012d78:	4b06      	ldr	r3, [pc, #24]	@ (8012d94 <tcp_write+0x6bc>)
 8012d7a:	f240 3227 	movw	r2, #807	@ 0x327
 8012d7e:	4906      	ldr	r1, [pc, #24]	@ (8012d98 <tcp_write+0x6c0>)
 8012d80:	4806      	ldr	r0, [pc, #24]	@ (8012d9c <tcp_write+0x6c4>)
 8012d82:	f004 fbff 	bl	8017584 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	375c      	adds	r7, #92	@ 0x5c
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd90      	pop	{r4, r7, pc}
 8012d92:	bf00      	nop
 8012d94:	0801a73c 	.word	0x0801a73c
 8012d98:	0801aab0 	.word	0x0801aab0
 8012d9c:	0801a790 	.word	0x0801a790

08012da0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012da0:	b590      	push	{r4, r7, lr}
 8012da2:	b08b      	sub	sp, #44	@ 0x2c
 8012da4:	af02      	add	r7, sp, #8
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	460b      	mov	r3, r1
 8012daa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012dac:	2300      	movs	r3, #0
 8012dae:	61fb      	str	r3, [r7, #28]
 8012db0:	2300      	movs	r3, #0
 8012db2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d106      	bne.n	8012dcc <tcp_split_unsent_seg+0x2c>
 8012dbe:	4b95      	ldr	r3, [pc, #596]	@ (8013014 <tcp_split_unsent_seg+0x274>)
 8012dc0:	f240 324b 	movw	r2, #843	@ 0x34b
 8012dc4:	4994      	ldr	r1, [pc, #592]	@ (8013018 <tcp_split_unsent_seg+0x278>)
 8012dc6:	4895      	ldr	r0, [pc, #596]	@ (801301c <tcp_split_unsent_seg+0x27c>)
 8012dc8:	f004 fbdc 	bl	8017584 <iprintf>

  useg = pcb->unsent;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d102      	bne.n	8012dde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ddc:	e116      	b.n	801300c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012dde:	887b      	ldrh	r3, [r7, #2]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d109      	bne.n	8012df8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012de4:	4b8b      	ldr	r3, [pc, #556]	@ (8013014 <tcp_split_unsent_seg+0x274>)
 8012de6:	f240 3253 	movw	r2, #851	@ 0x353
 8012dea:	498d      	ldr	r1, [pc, #564]	@ (8013020 <tcp_split_unsent_seg+0x280>)
 8012dec:	488b      	ldr	r0, [pc, #556]	@ (801301c <tcp_split_unsent_seg+0x27c>)
 8012dee:	f004 fbc9 	bl	8017584 <iprintf>
    return ERR_VAL;
 8012df2:	f06f 0305 	mvn.w	r3, #5
 8012df6:	e109      	b.n	801300c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	891b      	ldrh	r3, [r3, #8]
 8012dfc:	887a      	ldrh	r2, [r7, #2]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d301      	bcc.n	8012e06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012e02:	2300      	movs	r3, #0
 8012e04:	e102      	b.n	801300c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e0a:	887a      	ldrh	r2, [r7, #2]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d906      	bls.n	8012e1e <tcp_split_unsent_seg+0x7e>
 8012e10:	4b80      	ldr	r3, [pc, #512]	@ (8013014 <tcp_split_unsent_seg+0x274>)
 8012e12:	f240 325b 	movw	r2, #859	@ 0x35b
 8012e16:	4983      	ldr	r1, [pc, #524]	@ (8013024 <tcp_split_unsent_seg+0x284>)
 8012e18:	4880      	ldr	r0, [pc, #512]	@ (801301c <tcp_split_unsent_seg+0x27c>)
 8012e1a:	f004 fbb3 	bl	8017584 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	891b      	ldrh	r3, [r3, #8]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d106      	bne.n	8012e34 <tcp_split_unsent_seg+0x94>
 8012e26:	4b7b      	ldr	r3, [pc, #492]	@ (8013014 <tcp_split_unsent_seg+0x274>)
 8012e28:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012e2c:	497e      	ldr	r1, [pc, #504]	@ (8013028 <tcp_split_unsent_seg+0x288>)
 8012e2e:	487b      	ldr	r0, [pc, #492]	@ (801301c <tcp_split_unsent_seg+0x27c>)
 8012e30:	f004 fba8 	bl	8017584 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	7a9b      	ldrb	r3, [r3, #10]
 8012e38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012e3a:	7bfb      	ldrb	r3, [r7, #15]
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	b2db      	uxtb	r3, r3
 8012e40:	f003 0304 	and.w	r3, r3, #4
 8012e44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	891a      	ldrh	r2, [r3, #8]
 8012e4a:	887b      	ldrh	r3, [r7, #2]
 8012e4c:	1ad3      	subs	r3, r2, r3
 8012e4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012e50:	7bbb      	ldrb	r3, [r7, #14]
 8012e52:	b29a      	uxth	r2, r3
 8012e54:	89bb      	ldrh	r3, [r7, #12]
 8012e56:	4413      	add	r3, r2
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e5e:	4619      	mov	r1, r3
 8012e60:	2036      	movs	r0, #54	@ 0x36
 8012e62:	f7fa fb99 	bl	800d598 <pbuf_alloc>
 8012e66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f000 80b7 	beq.w	8012fde <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	891a      	ldrh	r2, [r3, #8]
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	891b      	ldrh	r3, [r3, #8]
 8012e7a:	1ad3      	subs	r3, r2, r3
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	887b      	ldrh	r3, [r7, #2]
 8012e80:	4413      	add	r3, r2
 8012e82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	6858      	ldr	r0, [r3, #4]
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	7bbb      	ldrb	r3, [r7, #14]
 8012e8e:	18d1      	adds	r1, r2, r3
 8012e90:	897b      	ldrh	r3, [r7, #10]
 8012e92:	89ba      	ldrh	r2, [r7, #12]
 8012e94:	f7fb f85a 	bl	800df4c <pbuf_copy_partial>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	89bb      	ldrh	r3, [r7, #12]
 8012e9e:	4293      	cmp	r3, r2
 8012ea0:	f040 809f 	bne.w	8012fe2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	899b      	ldrh	r3, [r3, #12]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7f9 faab 	bl	800c408 <lwip_htons>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012eba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012ec0:	7efb      	ldrb	r3, [r7, #27]
 8012ec2:	f003 0308 	and.w	r3, r3, #8
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d007      	beq.n	8012eda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012eca:	7efb      	ldrb	r3, [r7, #27]
 8012ecc:	f023 0308 	bic.w	r3, r3, #8
 8012ed0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012ed2:	7ebb      	ldrb	r3, [r7, #26]
 8012ed4:	f043 0308 	orr.w	r3, r3, #8
 8012ed8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012eda:	7efb      	ldrb	r3, [r7, #27]
 8012edc:	f003 0301 	and.w	r3, r3, #1
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d007      	beq.n	8012ef4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ee4:	7efb      	ldrb	r3, [r7, #27]
 8012ee6:	f023 0301 	bic.w	r3, r3, #1
 8012eea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012eec:	7ebb      	ldrb	r3, [r7, #26]
 8012eee:	f043 0301 	orr.w	r3, r3, #1
 8012ef2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	68db      	ldr	r3, [r3, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f9 fa99 	bl	800c432 <lwip_htonl>
 8012f00:	4602      	mov	r2, r0
 8012f02:	887b      	ldrh	r3, [r7, #2]
 8012f04:	18d1      	adds	r1, r2, r3
 8012f06:	7eba      	ldrb	r2, [r7, #26]
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	6939      	ldr	r1, [r7, #16]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f7ff fa51 	bl	80123b8 <tcp_create_segment>
 8012f16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d063      	beq.n	8012fe6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	685b      	ldr	r3, [r3, #4]
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7fa feaa 	bl	800dc7c <pbuf_clen>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f32:	1a9b      	subs	r3, r3, r2
 8012f34:	b29a      	uxth	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	6858      	ldr	r0, [r3, #4]
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	891a      	ldrh	r2, [r3, #8]
 8012f46:	89bb      	ldrh	r3, [r7, #12]
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	f7fa fc81 	bl	800d854 <pbuf_realloc>
  useg->len -= remainder;
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	891a      	ldrh	r2, [r3, #8]
 8012f56:	89bb      	ldrh	r3, [r7, #12]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	b29a      	uxth	r2, r3
 8012f5c:	697b      	ldr	r3, [r7, #20]
 8012f5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	899b      	ldrh	r3, [r3, #12]
 8012f66:	b29c      	uxth	r4, r3
 8012f68:	7efb      	ldrb	r3, [r7, #27]
 8012f6a:	b29b      	uxth	r3, r3
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f9 fa4b 	bl	800c408 <lwip_htons>
 8012f72:	4603      	mov	r3, r0
 8012f74:	461a      	mov	r2, r3
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	4322      	orrs	r2, r4
 8012f7c:	b292      	uxth	r2, r2
 8012f7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7fa fe79 	bl	800dc7c <pbuf_clen>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f94:	4413      	add	r3, r2
 8012f96:	b29a      	uxth	r2, r3
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fa fe6a 	bl	800dc7c <pbuf_clen>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	461a      	mov	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012fb2:	4413      	add	r3, r2
 8012fb4:	b29a      	uxth	r2, r3
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	681a      	ldr	r2, [r3, #0]
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	69fa      	ldr	r2, [r7, #28]
 8012fc8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d103      	bne.n	8012fda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012fda:	2300      	movs	r3, #0
 8012fdc:	e016      	b.n	801300c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012fde:	bf00      	nop
 8012fe0:	e002      	b.n	8012fe8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fe2:	bf00      	nop
 8012fe4:	e000      	b.n	8012fe8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fe6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d006      	beq.n	8012ffc <tcp_split_unsent_seg+0x25c>
 8012fee:	4b09      	ldr	r3, [pc, #36]	@ (8013014 <tcp_split_unsent_seg+0x274>)
 8012ff0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012ff4:	490d      	ldr	r1, [pc, #52]	@ (801302c <tcp_split_unsent_seg+0x28c>)
 8012ff6:	4809      	ldr	r0, [pc, #36]	@ (801301c <tcp_split_unsent_seg+0x27c>)
 8012ff8:	f004 fac4 	bl	8017584 <iprintf>
  if (p != NULL) {
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013002:	6938      	ldr	r0, [r7, #16]
 8013004:	f7fa fdac 	bl	800db60 <pbuf_free>
  }

  return ERR_MEM;
 8013008:	f04f 33ff 	mov.w	r3, #4294967295
}
 801300c:	4618      	mov	r0, r3
 801300e:	3724      	adds	r7, #36	@ 0x24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd90      	pop	{r4, r7, pc}
 8013014:	0801a73c 	.word	0x0801a73c
 8013018:	0801aad0 	.word	0x0801aad0
 801301c:	0801a790 	.word	0x0801a790
 8013020:	0801aaf4 	.word	0x0801aaf4
 8013024:	0801ab18 	.word	0x0801ab18
 8013028:	0801ab28 	.word	0x0801ab28
 801302c:	0801ab38 	.word	0x0801ab38

08013030 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d106      	bne.n	801304c <tcp_send_fin+0x1c>
 801303e:	4b21      	ldr	r3, [pc, #132]	@ (80130c4 <tcp_send_fin+0x94>)
 8013040:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013044:	4920      	ldr	r1, [pc, #128]	@ (80130c8 <tcp_send_fin+0x98>)
 8013046:	4821      	ldr	r0, [pc, #132]	@ (80130cc <tcp_send_fin+0x9c>)
 8013048:	f004 fa9c 	bl	8017584 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013050:	2b00      	cmp	r3, #0
 8013052:	d02e      	beq.n	80130b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	e002      	b.n	8013062 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d1f8      	bne.n	801305c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	899b      	ldrh	r3, [r3, #12]
 8013070:	b29b      	uxth	r3, r3
 8013072:	4618      	mov	r0, r3
 8013074:	f7f9 f9c8 	bl	800c408 <lwip_htons>
 8013078:	4603      	mov	r3, r0
 801307a:	b2db      	uxtb	r3, r3
 801307c:	f003 0307 	and.w	r3, r3, #7
 8013080:	2b00      	cmp	r3, #0
 8013082:	d116      	bne.n	80130b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	b29c      	uxth	r4, r3
 801308c:	2001      	movs	r0, #1
 801308e:	f7f9 f9bb 	bl	800c408 <lwip_htons>
 8013092:	4603      	mov	r3, r0
 8013094:	461a      	mov	r2, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	4322      	orrs	r2, r4
 801309c:	b292      	uxth	r2, r2
 801309e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	8b5b      	ldrh	r3, [r3, #26]
 80130a4:	f043 0320 	orr.w	r3, r3, #32
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e004      	b.n	80130bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80130b2:	2101      	movs	r1, #1
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 f80b 	bl	80130d0 <tcp_enqueue_flags>
 80130ba:	4603      	mov	r3, r0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd90      	pop	{r4, r7, pc}
 80130c4:	0801a73c 	.word	0x0801a73c
 80130c8:	0801ab44 	.word	0x0801ab44
 80130cc:	0801a790 	.word	0x0801a790

080130d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b08a      	sub	sp, #40	@ 0x28
 80130d4:	af02      	add	r7, sp, #8
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80130dc:	2300      	movs	r3, #0
 80130de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80130e0:	2300      	movs	r3, #0
 80130e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80130e4:	78fb      	ldrb	r3, [r7, #3]
 80130e6:	f003 0303 	and.w	r3, r3, #3
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d106      	bne.n	80130fc <tcp_enqueue_flags+0x2c>
 80130ee:	4b67      	ldr	r3, [pc, #412]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 80130f0:	f240 4211 	movw	r2, #1041	@ 0x411
 80130f4:	4966      	ldr	r1, [pc, #408]	@ (8013290 <tcp_enqueue_flags+0x1c0>)
 80130f6:	4867      	ldr	r0, [pc, #412]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 80130f8:	f004 fa44 	bl	8017584 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d106      	bne.n	8013110 <tcp_enqueue_flags+0x40>
 8013102:	4b62      	ldr	r3, [pc, #392]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 8013104:	f240 4213 	movw	r2, #1043	@ 0x413
 8013108:	4963      	ldr	r1, [pc, #396]	@ (8013298 <tcp_enqueue_flags+0x1c8>)
 801310a:	4862      	ldr	r0, [pc, #392]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 801310c:	f004 fa3a 	bl	8017584 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013110:	78fb      	ldrb	r3, [r7, #3]
 8013112:	f003 0302 	and.w	r3, r3, #2
 8013116:	2b00      	cmp	r3, #0
 8013118:	d001      	beq.n	801311e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801311a:	2301      	movs	r3, #1
 801311c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801311e:	7ffb      	ldrb	r3, [r7, #31]
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	b2db      	uxtb	r3, r3
 8013124:	f003 0304 	and.w	r3, r3, #4
 8013128:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801312a:	7dfb      	ldrb	r3, [r7, #23]
 801312c:	b29b      	uxth	r3, r3
 801312e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013132:	4619      	mov	r1, r3
 8013134:	2036      	movs	r0, #54	@ 0x36
 8013136:	f7fa fa2f 	bl	800d598 <pbuf_alloc>
 801313a:	6138      	str	r0, [r7, #16]
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d109      	bne.n	8013156 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	8b5b      	ldrh	r3, [r3, #26]
 8013146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801314a:	b29a      	uxth	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013150:	f04f 33ff 	mov.w	r3, #4294967295
 8013154:	e095      	b.n	8013282 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013156:	693b      	ldr	r3, [r7, #16]
 8013158:	895a      	ldrh	r2, [r3, #10]
 801315a:	7dfb      	ldrb	r3, [r7, #23]
 801315c:	b29b      	uxth	r3, r3
 801315e:	429a      	cmp	r2, r3
 8013160:	d206      	bcs.n	8013170 <tcp_enqueue_flags+0xa0>
 8013162:	4b4a      	ldr	r3, [pc, #296]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 8013164:	f240 4239 	movw	r2, #1081	@ 0x439
 8013168:	494c      	ldr	r1, [pc, #304]	@ (801329c <tcp_enqueue_flags+0x1cc>)
 801316a:	484a      	ldr	r0, [pc, #296]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 801316c:	f004 fa0a 	bl	8017584 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013174:	78fa      	ldrb	r2, [r7, #3]
 8013176:	7ffb      	ldrb	r3, [r7, #31]
 8013178:	9300      	str	r3, [sp, #0]
 801317a:	460b      	mov	r3, r1
 801317c:	6939      	ldr	r1, [r7, #16]
 801317e:	6878      	ldr	r0, [r7, #4]
 8013180:	f7ff f91a 	bl	80123b8 <tcp_create_segment>
 8013184:	60f8      	str	r0, [r7, #12]
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d109      	bne.n	80131a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	8b5b      	ldrh	r3, [r3, #26]
 8013190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013194:	b29a      	uxth	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801319a:	f04f 33ff 	mov.w	r3, #4294967295
 801319e:	e070      	b.n	8013282 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	f003 0303 	and.w	r3, r3, #3
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d006      	beq.n	80131ba <tcp_enqueue_flags+0xea>
 80131ac:	4b37      	ldr	r3, [pc, #220]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 80131ae:	f240 4242 	movw	r2, #1090	@ 0x442
 80131b2:	493b      	ldr	r1, [pc, #236]	@ (80132a0 <tcp_enqueue_flags+0x1d0>)
 80131b4:	4837      	ldr	r0, [pc, #220]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 80131b6:	f004 f9e5 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	891b      	ldrh	r3, [r3, #8]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d006      	beq.n	80131d0 <tcp_enqueue_flags+0x100>
 80131c2:	4b32      	ldr	r3, [pc, #200]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 80131c4:	f240 4243 	movw	r2, #1091	@ 0x443
 80131c8:	4936      	ldr	r1, [pc, #216]	@ (80132a4 <tcp_enqueue_flags+0x1d4>)
 80131ca:	4832      	ldr	r0, [pc, #200]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 80131cc:	f004 f9da 	bl	8017584 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d103      	bne.n	80131e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	68fa      	ldr	r2, [r7, #12]
 80131dc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80131de:	e00d      	b.n	80131fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131e4:	61bb      	str	r3, [r7, #24]
 80131e6:	e002      	b.n	80131ee <tcp_enqueue_flags+0x11e>
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	61bb      	str	r3, [r7, #24]
 80131ee:	69bb      	ldr	r3, [r7, #24]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d1f8      	bne.n	80131e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2200      	movs	r2, #0
 8013200:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013204:	78fb      	ldrb	r3, [r7, #3]
 8013206:	f003 0302 	and.w	r3, r3, #2
 801320a:	2b00      	cmp	r3, #0
 801320c:	d104      	bne.n	8013218 <tcp_enqueue_flags+0x148>
 801320e:	78fb      	ldrb	r3, [r7, #3]
 8013210:	f003 0301 	and.w	r3, r3, #1
 8013214:	2b00      	cmp	r3, #0
 8013216:	d004      	beq.n	8013222 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801321c:	1c5a      	adds	r2, r3, #1
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013222:	78fb      	ldrb	r3, [r7, #3]
 8013224:	f003 0301 	and.w	r3, r3, #1
 8013228:	2b00      	cmp	r3, #0
 801322a:	d006      	beq.n	801323a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	8b5b      	ldrh	r3, [r3, #26]
 8013230:	f043 0320 	orr.w	r3, r3, #32
 8013234:	b29a      	uxth	r2, r3
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7fa fd1c 	bl	800dc7c <pbuf_clen>
 8013244:	4603      	mov	r3, r0
 8013246:	461a      	mov	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801324e:	4413      	add	r3, r2
 8013250:	b29a      	uxth	r2, r3
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801325e:	2b00      	cmp	r3, #0
 8013260:	d00e      	beq.n	8013280 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013266:	2b00      	cmp	r3, #0
 8013268:	d10a      	bne.n	8013280 <tcp_enqueue_flags+0x1b0>
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801326e:	2b00      	cmp	r3, #0
 8013270:	d106      	bne.n	8013280 <tcp_enqueue_flags+0x1b0>
 8013272:	4b06      	ldr	r3, [pc, #24]	@ (801328c <tcp_enqueue_flags+0x1bc>)
 8013274:	f240 4265 	movw	r2, #1125	@ 0x465
 8013278:	490b      	ldr	r1, [pc, #44]	@ (80132a8 <tcp_enqueue_flags+0x1d8>)
 801327a:	4806      	ldr	r0, [pc, #24]	@ (8013294 <tcp_enqueue_flags+0x1c4>)
 801327c:	f004 f982 	bl	8017584 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013280:	2300      	movs	r3, #0
}
 8013282:	4618      	mov	r0, r3
 8013284:	3720      	adds	r7, #32
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	0801a73c 	.word	0x0801a73c
 8013290:	0801ab60 	.word	0x0801ab60
 8013294:	0801a790 	.word	0x0801a790
 8013298:	0801abb8 	.word	0x0801abb8
 801329c:	0801abd8 	.word	0x0801abd8
 80132a0:	0801ac14 	.word	0x0801ac14
 80132a4:	0801ac2c 	.word	0x0801ac2c
 80132a8:	0801ac58 	.word	0x0801ac58

080132ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80132ac:	b5b0      	push	{r4, r5, r7, lr}
 80132ae:	b08a      	sub	sp, #40	@ 0x28
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d106      	bne.n	80132c8 <tcp_output+0x1c>
 80132ba:	4b8a      	ldr	r3, [pc, #552]	@ (80134e4 <tcp_output+0x238>)
 80132bc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80132c0:	4989      	ldr	r1, [pc, #548]	@ (80134e8 <tcp_output+0x23c>)
 80132c2:	488a      	ldr	r0, [pc, #552]	@ (80134ec <tcp_output+0x240>)
 80132c4:	f004 f95e 	bl	8017584 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	7d1b      	ldrb	r3, [r3, #20]
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d106      	bne.n	80132de <tcp_output+0x32>
 80132d0:	4b84      	ldr	r3, [pc, #528]	@ (80134e4 <tcp_output+0x238>)
 80132d2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80132d6:	4986      	ldr	r1, [pc, #536]	@ (80134f0 <tcp_output+0x244>)
 80132d8:	4884      	ldr	r0, [pc, #528]	@ (80134ec <tcp_output+0x240>)
 80132da:	f004 f953 	bl	8017584 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80132de:	4b85      	ldr	r3, [pc, #532]	@ (80134f4 <tcp_output+0x248>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d101      	bne.n	80132ec <tcp_output+0x40>
    return ERR_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	e1ce      	b.n	801368a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80132f8:	4293      	cmp	r3, r2
 80132fa:	bf28      	it	cs
 80132fc:	4613      	movcs	r3, r2
 80132fe:	b29b      	uxth	r3, r3
 8013300:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013306:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801330a:	2b00      	cmp	r3, #0
 801330c:	d10b      	bne.n	8013326 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	8b5b      	ldrh	r3, [r3, #26]
 8013312:	f003 0302 	and.w	r3, r3, #2
 8013316:	2b00      	cmp	r3, #0
 8013318:	f000 81aa 	beq.w	8013670 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fdcb 	bl	8013eb8 <tcp_send_empty_ack>
 8013322:	4603      	mov	r3, r0
 8013324:	e1b1      	b.n	801368a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013326:	6879      	ldr	r1, [r7, #4]
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	3304      	adds	r3, #4
 801332c:	461a      	mov	r2, r3
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f7ff f826 	bl	8012380 <tcp_route>
 8013334:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d102      	bne.n	8013342 <tcp_output+0x96>
    return ERR_RTE;
 801333c:	f06f 0303 	mvn.w	r3, #3
 8013340:	e1a3      	b.n	801368a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d003      	beq.n	8013350 <tcp_output+0xa4>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d111      	bne.n	8013374 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d002      	beq.n	801335c <tcp_output+0xb0>
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	3304      	adds	r3, #4
 801335a:	e000      	b.n	801335e <tcp_output+0xb2>
 801335c:	2300      	movs	r3, #0
 801335e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d102      	bne.n	801336c <tcp_output+0xc0>
      return ERR_RTE;
 8013366:	f06f 0303 	mvn.w	r3, #3
 801336a:	e18e      	b.n	801368a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f7f9 f859 	bl	800c432 <lwip_htonl>
 8013380:	4602      	mov	r2, r0
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801338a:	8912      	ldrh	r2, [r2, #8]
 801338c:	4413      	add	r3, r2
 801338e:	69ba      	ldr	r2, [r7, #24]
 8013390:	429a      	cmp	r2, r3
 8013392:	d227      	bcs.n	80133e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801339a:	461a      	mov	r2, r3
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	4293      	cmp	r3, r2
 80133a0:	d114      	bne.n	80133cc <tcp_output+0x120>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d110      	bne.n	80133cc <tcp_output+0x120>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d10b      	bne.n	80133cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2200      	movs	r2, #0
 80133b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2201      	movs	r2, #1
 80133c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	8b5b      	ldrh	r3, [r3, #26]
 80133d0:	f003 0302 	and.w	r3, r3, #2
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f000 814d 	beq.w	8013674 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 fd6c 	bl	8013eb8 <tcp_send_empty_ack>
 80133e0:	4603      	mov	r3, r0
 80133e2:	e152      	b.n	801368a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133f2:	6a3b      	ldr	r3, [r7, #32]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f000 811c 	beq.w	8013632 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80133fa:	e002      	b.n	8013402 <tcp_output+0x156>
 80133fc:	6a3b      	ldr	r3, [r7, #32]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	623b      	str	r3, [r7, #32]
 8013402:	6a3b      	ldr	r3, [r7, #32]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d1f8      	bne.n	80133fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801340a:	e112      	b.n	8013632 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	899b      	ldrh	r3, [r3, #12]
 8013412:	b29b      	uxth	r3, r3
 8013414:	4618      	mov	r0, r3
 8013416:	f7f8 fff7 	bl	800c408 <lwip_htons>
 801341a:	4603      	mov	r3, r0
 801341c:	b2db      	uxtb	r3, r3
 801341e:	f003 0304 	and.w	r3, r3, #4
 8013422:	2b00      	cmp	r3, #0
 8013424:	d006      	beq.n	8013434 <tcp_output+0x188>
 8013426:	4b2f      	ldr	r3, [pc, #188]	@ (80134e4 <tcp_output+0x238>)
 8013428:	f240 5236 	movw	r2, #1334	@ 0x536
 801342c:	4932      	ldr	r1, [pc, #200]	@ (80134f8 <tcp_output+0x24c>)
 801342e:	482f      	ldr	r0, [pc, #188]	@ (80134ec <tcp_output+0x240>)
 8013430:	f004 f8a8 	bl	8017584 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013438:	2b00      	cmp	r3, #0
 801343a:	d01f      	beq.n	801347c <tcp_output+0x1d0>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	8b5b      	ldrh	r3, [r3, #26]
 8013440:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013444:	2b00      	cmp	r3, #0
 8013446:	d119      	bne.n	801347c <tcp_output+0x1d0>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801344c:	2b00      	cmp	r3, #0
 801344e:	d00b      	beq.n	8013468 <tcp_output+0x1bc>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d110      	bne.n	801347c <tcp_output+0x1d0>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801345e:	891a      	ldrh	r2, [r3, #8]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013464:	429a      	cmp	r2, r3
 8013466:	d209      	bcs.n	801347c <tcp_output+0x1d0>
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801346e:	2b00      	cmp	r3, #0
 8013470:	d004      	beq.n	801347c <tcp_output+0x1d0>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013478:	2b08      	cmp	r3, #8
 801347a:	d901      	bls.n	8013480 <tcp_output+0x1d4>
 801347c:	2301      	movs	r3, #1
 801347e:	e000      	b.n	8013482 <tcp_output+0x1d6>
 8013480:	2300      	movs	r3, #0
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	8b5b      	ldrh	r3, [r3, #26]
 801348a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 80e4 	beq.w	801365c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	7d1b      	ldrb	r3, [r3, #20]
 8013498:	2b02      	cmp	r3, #2
 801349a:	d00d      	beq.n	80134b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	899b      	ldrh	r3, [r3, #12]
 80134a2:	b29c      	uxth	r4, r3
 80134a4:	2010      	movs	r0, #16
 80134a6:	f7f8 ffaf 	bl	800c408 <lwip_htons>
 80134aa:	4603      	mov	r3, r0
 80134ac:	461a      	mov	r2, r3
 80134ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b0:	68db      	ldr	r3, [r3, #12]
 80134b2:	4322      	orrs	r2, r4
 80134b4:	b292      	uxth	r2, r2
 80134b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	6879      	ldr	r1, [r7, #4]
 80134bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80134be:	f000 f909 	bl	80136d4 <tcp_output_segment>
 80134c2:	4603      	mov	r3, r0
 80134c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80134c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d016      	beq.n	80134fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	8b5b      	ldrh	r3, [r3, #26]
 80134d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	835a      	strh	r2, [r3, #26]
      return err;
 80134dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134e0:	e0d3      	b.n	801368a <tcp_output+0x3de>
 80134e2:	bf00      	nop
 80134e4:	0801a73c 	.word	0x0801a73c
 80134e8:	0801ac80 	.word	0x0801ac80
 80134ec:	0801a790 	.word	0x0801a790
 80134f0:	0801ac98 	.word	0x0801ac98
 80134f4:	2000dfa0 	.word	0x2000dfa0
 80134f8:	0801acc0 	.word	0x0801acc0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	7d1b      	ldrb	r3, [r3, #20]
 8013508:	2b02      	cmp	r3, #2
 801350a:	d006      	beq.n	801351a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	8b5b      	ldrh	r3, [r3, #26]
 8013510:	f023 0303 	bic.w	r3, r3, #3
 8013514:	b29a      	uxth	r2, r3
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	4618      	mov	r0, r3
 8013522:	f7f8 ff86 	bl	800c432 <lwip_htonl>
 8013526:	4604      	mov	r4, r0
 8013528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352a:	891b      	ldrh	r3, [r3, #8]
 801352c:	461d      	mov	r5, r3
 801352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013530:	68db      	ldr	r3, [r3, #12]
 8013532:	899b      	ldrh	r3, [r3, #12]
 8013534:	b29b      	uxth	r3, r3
 8013536:	4618      	mov	r0, r3
 8013538:	f7f8 ff66 	bl	800c408 <lwip_htons>
 801353c:	4603      	mov	r3, r0
 801353e:	b2db      	uxtb	r3, r3
 8013540:	f003 0303 	and.w	r3, r3, #3
 8013544:	2b00      	cmp	r3, #0
 8013546:	d001      	beq.n	801354c <tcp_output+0x2a0>
 8013548:	2301      	movs	r3, #1
 801354a:	e000      	b.n	801354e <tcp_output+0x2a2>
 801354c:	2300      	movs	r3, #0
 801354e:	442b      	add	r3, r5
 8013550:	4423      	add	r3, r4
 8013552:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013558:	68bb      	ldr	r3, [r7, #8]
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	2b00      	cmp	r3, #0
 801355e:	da02      	bge.n	8013566 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	68ba      	ldr	r2, [r7, #8]
 8013564:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013568:	891b      	ldrh	r3, [r3, #8]
 801356a:	461c      	mov	r4, r3
 801356c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801356e:	68db      	ldr	r3, [r3, #12]
 8013570:	899b      	ldrh	r3, [r3, #12]
 8013572:	b29b      	uxth	r3, r3
 8013574:	4618      	mov	r0, r3
 8013576:	f7f8 ff47 	bl	800c408 <lwip_htons>
 801357a:	4603      	mov	r3, r0
 801357c:	b2db      	uxtb	r3, r3
 801357e:	f003 0303 	and.w	r3, r3, #3
 8013582:	2b00      	cmp	r3, #0
 8013584:	d001      	beq.n	801358a <tcp_output+0x2de>
 8013586:	2301      	movs	r3, #1
 8013588:	e000      	b.n	801358c <tcp_output+0x2e0>
 801358a:	2300      	movs	r3, #0
 801358c:	4423      	add	r3, r4
 801358e:	2b00      	cmp	r3, #0
 8013590:	d049      	beq.n	8013626 <tcp_output+0x37a>
      seg->next = NULL;
 8013592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013594:	2200      	movs	r2, #0
 8013596:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801359c:	2b00      	cmp	r3, #0
 801359e:	d105      	bne.n	80135ac <tcp_output+0x300>
        pcb->unacked = seg;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80135a4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80135a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135a8:	623b      	str	r3, [r7, #32]
 80135aa:	e03f      	b.n	801362c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80135ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	685b      	ldr	r3, [r3, #4]
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7f8 ff3d 	bl	800c432 <lwip_htonl>
 80135b8:	4604      	mov	r4, r0
 80135ba:	6a3b      	ldr	r3, [r7, #32]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	685b      	ldr	r3, [r3, #4]
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7f8 ff36 	bl	800c432 <lwip_htonl>
 80135c6:	4603      	mov	r3, r0
 80135c8:	1ae3      	subs	r3, r4, r3
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	da24      	bge.n	8013618 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	3370      	adds	r3, #112	@ 0x70
 80135d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135d4:	e002      	b.n	80135dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d011      	beq.n	8013608 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7f8 ff20 	bl	800c432 <lwip_htonl>
 80135f2:	4604      	mov	r4, r0
 80135f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7f8 ff19 	bl	800c432 <lwip_htonl>
 8013600:	4603      	mov	r3, r0
 8013602:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013604:	2b00      	cmp	r3, #0
 8013606:	dbe6      	blt.n	80135d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	681a      	ldr	r2, [r3, #0]
 801360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801360e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	e009      	b.n	801362c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013618:	6a3b      	ldr	r3, [r7, #32]
 801361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801361c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801361e:	6a3b      	ldr	r3, [r7, #32]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	623b      	str	r3, [r7, #32]
 8013624:	e002      	b.n	801362c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013628:	f7fb ff1f 	bl	800f46a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013630:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013634:	2b00      	cmp	r3, #0
 8013636:	d012      	beq.n	801365e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	4618      	mov	r0, r3
 8013640:	f7f8 fef7 	bl	800c432 <lwip_htonl>
 8013644:	4602      	mov	r2, r0
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801364a:	1ad3      	subs	r3, r2, r3
 801364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801364e:	8912      	ldrh	r2, [r2, #8]
 8013650:	4413      	add	r3, r2
  while (seg != NULL &&
 8013652:	69ba      	ldr	r2, [r7, #24]
 8013654:	429a      	cmp	r2, r3
 8013656:	f4bf aed9 	bcs.w	801340c <tcp_output+0x160>
 801365a:	e000      	b.n	801365e <tcp_output+0x3b2>
      break;
 801365c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013662:	2b00      	cmp	r3, #0
 8013664:	d108      	bne.n	8013678 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	2200      	movs	r2, #0
 801366a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801366e:	e004      	b.n	801367a <tcp_output+0x3ce>
    goto output_done;
 8013670:	bf00      	nop
 8013672:	e002      	b.n	801367a <tcp_output+0x3ce>
    goto output_done;
 8013674:	bf00      	nop
 8013676:	e000      	b.n	801367a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013678:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	8b5b      	ldrh	r3, [r3, #26]
 801367e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013682:	b29a      	uxth	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013688:	2300      	movs	r3, #0
}
 801368a:	4618      	mov	r0, r3
 801368c:	3728      	adds	r7, #40	@ 0x28
 801368e:	46bd      	mov	sp, r7
 8013690:	bdb0      	pop	{r4, r5, r7, pc}
 8013692:	bf00      	nop

08013694 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d106      	bne.n	80136b0 <tcp_output_segment_busy+0x1c>
 80136a2:	4b09      	ldr	r3, [pc, #36]	@ (80136c8 <tcp_output_segment_busy+0x34>)
 80136a4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80136a8:	4908      	ldr	r1, [pc, #32]	@ (80136cc <tcp_output_segment_busy+0x38>)
 80136aa:	4809      	ldr	r0, [pc, #36]	@ (80136d0 <tcp_output_segment_busy+0x3c>)
 80136ac:	f003 ff6a 	bl	8017584 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	7b9b      	ldrb	r3, [r3, #14]
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d001      	beq.n	80136be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80136ba:	2301      	movs	r3, #1
 80136bc:	e000      	b.n	80136c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	0801a73c 	.word	0x0801a73c
 80136cc:	0801acd8 	.word	0x0801acd8
 80136d0:	0801a790 	.word	0x0801a790

080136d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136d4:	b5b0      	push	{r4, r5, r7, lr}
 80136d6:	b08c      	sub	sp, #48	@ 0x30
 80136d8:	af04      	add	r7, sp, #16
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d106      	bne.n	80136f4 <tcp_output_segment+0x20>
 80136e6:	4b64      	ldr	r3, [pc, #400]	@ (8013878 <tcp_output_segment+0x1a4>)
 80136e8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80136ec:	4963      	ldr	r1, [pc, #396]	@ (801387c <tcp_output_segment+0x1a8>)
 80136ee:	4864      	ldr	r0, [pc, #400]	@ (8013880 <tcp_output_segment+0x1ac>)
 80136f0:	f003 ff48 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d106      	bne.n	8013708 <tcp_output_segment+0x34>
 80136fa:	4b5f      	ldr	r3, [pc, #380]	@ (8013878 <tcp_output_segment+0x1a4>)
 80136fc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8013700:	4960      	ldr	r1, [pc, #384]	@ (8013884 <tcp_output_segment+0x1b0>)
 8013702:	485f      	ldr	r0, [pc, #380]	@ (8013880 <tcp_output_segment+0x1ac>)
 8013704:	f003 ff3e 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <tcp_output_segment+0x48>
 801370e:	4b5a      	ldr	r3, [pc, #360]	@ (8013878 <tcp_output_segment+0x1a4>)
 8013710:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013714:	495c      	ldr	r1, [pc, #368]	@ (8013888 <tcp_output_segment+0x1b4>)
 8013716:	485a      	ldr	r0, [pc, #360]	@ (8013880 <tcp_output_segment+0x1ac>)
 8013718:	f003 ff34 	bl	8017584 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f7ff ffb9 	bl	8013694 <tcp_output_segment_busy>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d001      	beq.n	801372c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013728:	2300      	movs	r3, #0
 801372a:	e0a1      	b.n	8013870 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	68dc      	ldr	r4, [r3, #12]
 8013734:	4610      	mov	r0, r2
 8013736:	f7f8 fe7c 	bl	800c432 <lwip_htonl>
 801373a:	4603      	mov	r3, r0
 801373c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	68dc      	ldr	r4, [r3, #12]
 8013746:	4610      	mov	r0, r2
 8013748:	f7f8 fe5e 	bl	800c408 <lwip_htons>
 801374c:	4603      	mov	r3, r0
 801374e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013758:	441a      	add	r2, r3
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	3314      	adds	r3, #20
 8013764:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	7a9b      	ldrb	r3, [r3, #10]
 801376a:	f003 0301 	and.w	r3, r3, #1
 801376e:	2b00      	cmp	r3, #0
 8013770:	d015      	beq.n	801379e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	3304      	adds	r3, #4
 8013776:	461a      	mov	r2, r3
 8013778:	6879      	ldr	r1, [r7, #4]
 801377a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801377e:	f7fc fa39 	bl	800fbf4 <tcp_eff_send_mss_netif>
 8013782:	4603      	mov	r3, r0
 8013784:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013786:	8b7b      	ldrh	r3, [r7, #26]
 8013788:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801378c:	4618      	mov	r0, r3
 801378e:	f7f8 fe50 	bl	800c432 <lwip_htonl>
 8013792:	4602      	mov	r2, r0
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	3304      	adds	r3, #4
 801379c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	da02      	bge.n	80137ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2200      	movs	r2, #0
 80137ac:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10c      	bne.n	80137d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80137b6:	4b35      	ldr	r3, [pc, #212]	@ (801388c <tcp_output_segment+0x1b8>)
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	4618      	mov	r0, r3
 80137c6:	f7f8 fe34 	bl	800c432 <lwip_htonl>
 80137ca:	4602      	mov	r2, r0
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	68da      	ldr	r2, [r3, #12]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	8959      	ldrh	r1, [r3, #10]
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	8b3a      	ldrh	r2, [r7, #24]
 80137ea:	1a8a      	subs	r2, r1, r2
 80137ec:	b292      	uxth	r2, r2
 80137ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	8919      	ldrh	r1, [r3, #8]
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	685b      	ldr	r3, [r3, #4]
 80137fa:	8b3a      	ldrh	r2, [r7, #24]
 80137fc:	1a8a      	subs	r2, r1, r2
 80137fe:	b292      	uxth	r2, r2
 8013800:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	68d2      	ldr	r2, [r2, #12]
 801380a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	68db      	ldr	r3, [r3, #12]
 8013810:	2200      	movs	r2, #0
 8013812:	741a      	strb	r2, [r3, #16]
 8013814:	2200      	movs	r2, #0
 8013816:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	68da      	ldr	r2, [r3, #12]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	7a9b      	ldrb	r3, [r3, #10]
 8013820:	f003 0301 	and.w	r3, r3, #1
 8013824:	2b00      	cmp	r3, #0
 8013826:	d001      	beq.n	801382c <tcp_output_segment+0x158>
 8013828:	2318      	movs	r3, #24
 801382a:	e000      	b.n	801382e <tcp_output_segment+0x15a>
 801382c:	2314      	movs	r3, #20
 801382e:	4413      	add	r3, r2
 8013830:	69fa      	ldr	r2, [r7, #28]
 8013832:	429a      	cmp	r2, r3
 8013834:	d006      	beq.n	8013844 <tcp_output_segment+0x170>
 8013836:	4b10      	ldr	r3, [pc, #64]	@ (8013878 <tcp_output_segment+0x1a4>)
 8013838:	f240 621c 	movw	r2, #1564	@ 0x61c
 801383c:	4914      	ldr	r1, [pc, #80]	@ (8013890 <tcp_output_segment+0x1bc>)
 801383e:	4810      	ldr	r0, [pc, #64]	@ (8013880 <tcp_output_segment+0x1ac>)
 8013840:	f003 fea0 	bl	8017584 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	6858      	ldr	r0, [r3, #4]
 8013848:	68b9      	ldr	r1, [r7, #8]
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	1d1c      	adds	r4, r3, #4
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	7add      	ldrb	r5, [r3, #11]
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	7a9b      	ldrb	r3, [r3, #10]
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	9202      	str	r2, [sp, #8]
 801385a:	2206      	movs	r2, #6
 801385c:	9201      	str	r2, [sp, #4]
 801385e:	9300      	str	r3, [sp, #0]
 8013860:	462b      	mov	r3, r5
 8013862:	4622      	mov	r2, r4
 8013864:	f002 fbaa 	bl	8015fbc <ip4_output_if>
 8013868:	4603      	mov	r3, r0
 801386a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013870:	4618      	mov	r0, r3
 8013872:	3720      	adds	r7, #32
 8013874:	46bd      	mov	sp, r7
 8013876:	bdb0      	pop	{r4, r5, r7, pc}
 8013878:	0801a73c 	.word	0x0801a73c
 801387c:	0801ad00 	.word	0x0801ad00
 8013880:	0801a790 	.word	0x0801a790
 8013884:	0801ad20 	.word	0x0801ad20
 8013888:	0801ad40 	.word	0x0801ad40
 801388c:	2000df54 	.word	0x2000df54
 8013890:	0801ad64 	.word	0x0801ad64

08013894 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013894:	b5b0      	push	{r4, r5, r7, lr}
 8013896:	b084      	sub	sp, #16
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d106      	bne.n	80138b0 <tcp_rexmit_rto_prepare+0x1c>
 80138a2:	4b31      	ldr	r3, [pc, #196]	@ (8013968 <tcp_rexmit_rto_prepare+0xd4>)
 80138a4:	f240 6263 	movw	r2, #1635	@ 0x663
 80138a8:	4930      	ldr	r1, [pc, #192]	@ (801396c <tcp_rexmit_rto_prepare+0xd8>)
 80138aa:	4831      	ldr	r0, [pc, #196]	@ (8013970 <tcp_rexmit_rto_prepare+0xdc>)
 80138ac:	f003 fe6a 	bl	8017584 <iprintf>

  if (pcb->unacked == NULL) {
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d102      	bne.n	80138be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80138b8:	f06f 0305 	mvn.w	r3, #5
 80138bc:	e050      	b.n	8013960 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	e00b      	b.n	80138de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f7ff fee4 	bl	8013694 <tcp_output_segment_busy>
 80138cc:	4603      	mov	r3, r0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d002      	beq.n	80138d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80138d2:	f06f 0305 	mvn.w	r3, #5
 80138d6:	e043      	b.n	8013960 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	60fb      	str	r3, [r7, #12]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d1ef      	bne.n	80138c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80138e6:	68f8      	ldr	r0, [r7, #12]
 80138e8:	f7ff fed4 	bl	8013694 <tcp_output_segment_busy>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d002      	beq.n	80138f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80138f2:	f06f 0305 	mvn.w	r3, #5
 80138f6:	e033      	b.n	8013960 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2200      	movs	r2, #0
 801390c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	8b5b      	ldrh	r3, [r3, #26]
 8013912:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013916:	b29a      	uxth	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	68db      	ldr	r3, [r3, #12]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	4618      	mov	r0, r3
 8013924:	f7f8 fd85 	bl	800c432 <lwip_htonl>
 8013928:	4604      	mov	r4, r0
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	891b      	ldrh	r3, [r3, #8]
 801392e:	461d      	mov	r5, r3
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	68db      	ldr	r3, [r3, #12]
 8013934:	899b      	ldrh	r3, [r3, #12]
 8013936:	b29b      	uxth	r3, r3
 8013938:	4618      	mov	r0, r3
 801393a:	f7f8 fd65 	bl	800c408 <lwip_htons>
 801393e:	4603      	mov	r3, r0
 8013940:	b2db      	uxtb	r3, r3
 8013942:	f003 0303 	and.w	r3, r3, #3
 8013946:	2b00      	cmp	r3, #0
 8013948:	d001      	beq.n	801394e <tcp_rexmit_rto_prepare+0xba>
 801394a:	2301      	movs	r3, #1
 801394c:	e000      	b.n	8013950 <tcp_rexmit_rto_prepare+0xbc>
 801394e:	2300      	movs	r3, #0
 8013950:	442b      	add	r3, r5
 8013952:	18e2      	adds	r2, r4, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801395e:	2300      	movs	r3, #0
}
 8013960:	4618      	mov	r0, r3
 8013962:	3710      	adds	r7, #16
 8013964:	46bd      	mov	sp, r7
 8013966:	bdb0      	pop	{r4, r5, r7, pc}
 8013968:	0801a73c 	.word	0x0801a73c
 801396c:	0801ad78 	.word	0x0801ad78
 8013970:	0801a790 	.word	0x0801a790

08013974 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <tcp_rexmit_rto_commit+0x1c>
 8013982:	4b0d      	ldr	r3, [pc, #52]	@ (80139b8 <tcp_rexmit_rto_commit+0x44>)
 8013984:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013988:	490c      	ldr	r1, [pc, #48]	@ (80139bc <tcp_rexmit_rto_commit+0x48>)
 801398a:	480d      	ldr	r0, [pc, #52]	@ (80139c0 <tcp_rexmit_rto_commit+0x4c>)
 801398c:	f003 fdfa 	bl	8017584 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013996:	2bff      	cmp	r3, #255	@ 0xff
 8013998:	d007      	beq.n	80139aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80139a0:	3301      	adds	r3, #1
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7ff fc7e 	bl	80132ac <tcp_output>
}
 80139b0:	bf00      	nop
 80139b2:	3708      	adds	r7, #8
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}
 80139b8:	0801a73c 	.word	0x0801a73c
 80139bc:	0801ad9c 	.word	0x0801ad9c
 80139c0:	0801a790 	.word	0x0801a790

080139c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <tcp_rexmit_rto+0x1c>
 80139d2:	4b0a      	ldr	r3, [pc, #40]	@ (80139fc <tcp_rexmit_rto+0x38>)
 80139d4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80139d8:	4909      	ldr	r1, [pc, #36]	@ (8013a00 <tcp_rexmit_rto+0x3c>)
 80139da:	480a      	ldr	r0, [pc, #40]	@ (8013a04 <tcp_rexmit_rto+0x40>)
 80139dc:	f003 fdd2 	bl	8017584 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f7ff ff57 	bl	8013894 <tcp_rexmit_rto_prepare>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f7ff ffc1 	bl	8013974 <tcp_rexmit_rto_commit>
  }
}
 80139f2:	bf00      	nop
 80139f4:	3708      	adds	r7, #8
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	0801a73c 	.word	0x0801a73c
 8013a00:	0801adc0 	.word	0x0801adc0
 8013a04:	0801a790 	.word	0x0801a790

08013a08 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013a08:	b590      	push	{r4, r7, lr}
 8013a0a:	b085      	sub	sp, #20
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d106      	bne.n	8013a24 <tcp_rexmit+0x1c>
 8013a16:	4b2f      	ldr	r3, [pc, #188]	@ (8013ad4 <tcp_rexmit+0xcc>)
 8013a18:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013a1c:	492e      	ldr	r1, [pc, #184]	@ (8013ad8 <tcp_rexmit+0xd0>)
 8013a1e:	482f      	ldr	r0, [pc, #188]	@ (8013adc <tcp_rexmit+0xd4>)
 8013a20:	f003 fdb0 	bl	8017584 <iprintf>

  if (pcb->unacked == NULL) {
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d102      	bne.n	8013a32 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013a2c:	f06f 0305 	mvn.w	r3, #5
 8013a30:	e04c      	b.n	8013acc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013a36:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013a38:	68b8      	ldr	r0, [r7, #8]
 8013a3a:	f7ff fe2b 	bl	8013694 <tcp_output_segment_busy>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d002      	beq.n	8013a4a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013a44:	f06f 0305 	mvn.w	r3, #5
 8013a48:	e040      	b.n	8013acc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	336c      	adds	r3, #108	@ 0x6c
 8013a56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a58:	e002      	b.n	8013a60 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d011      	beq.n	8013a8c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f8 fcde 	bl	800c432 <lwip_htonl>
 8013a76:	4604      	mov	r4, r0
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7f8 fcd7 	bl	800c432 <lwip_htonl>
 8013a84:	4603      	mov	r3, r0
 8013a86:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	dbe6      	blt.n	8013a5a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	68ba      	ldr	r2, [r7, #8]
 8013a98:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d103      	bne.n	8013aaa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013ab0:	2bff      	cmp	r3, #255	@ 0xff
 8013ab2:	d007      	beq.n	8013ac4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013aba:	3301      	adds	r3, #1
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013aca:	2300      	movs	r3, #0
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3714      	adds	r7, #20
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd90      	pop	{r4, r7, pc}
 8013ad4:	0801a73c 	.word	0x0801a73c
 8013ad8:	0801addc 	.word	0x0801addc
 8013adc:	0801a790 	.word	0x0801a790

08013ae0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d106      	bne.n	8013afc <tcp_rexmit_fast+0x1c>
 8013aee:	4b2a      	ldr	r3, [pc, #168]	@ (8013b98 <tcp_rexmit_fast+0xb8>)
 8013af0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013af4:	4929      	ldr	r1, [pc, #164]	@ (8013b9c <tcp_rexmit_fast+0xbc>)
 8013af6:	482a      	ldr	r0, [pc, #168]	@ (8013ba0 <tcp_rexmit_fast+0xc0>)
 8013af8:	f003 fd44 	bl	8017584 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d045      	beq.n	8013b90 <tcp_rexmit_fast+0xb0>
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	8b5b      	ldrh	r3, [r3, #26]
 8013b08:	f003 0304 	and.w	r3, r3, #4
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d13f      	bne.n	8013b90 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff ff79 	bl	8013a08 <tcp_rexmit>
 8013b16:	4603      	mov	r3, r0
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d139      	bne.n	8013b90 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	bf28      	it	cs
 8013b2c:	4613      	movcs	r3, r2
 8013b2e:	b29b      	uxth	r3, r3
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	da00      	bge.n	8013b36 <tcp_rexmit_fast+0x56>
 8013b34:	3301      	adds	r3, #1
 8013b36:	105b      	asrs	r3, r3, #1
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013b46:	461a      	mov	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b4c:	005b      	lsls	r3, r3, #1
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d206      	bcs.n	8013b60 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	0049      	lsls	r1, r1, #1
 8013b6e:	440b      	add	r3, r1
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	4413      	add	r3, r2
 8013b74:	b29a      	uxth	r2, r3
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	8b5b      	ldrh	r3, [r3, #26]
 8013b80:	f043 0304 	orr.w	r3, r3, #4
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013b90:	bf00      	nop
 8013b92:	3708      	adds	r7, #8
 8013b94:	46bd      	mov	sp, r7
 8013b96:	bd80      	pop	{r7, pc}
 8013b98:	0801a73c 	.word	0x0801a73c
 8013b9c:	0801adf4 	.word	0x0801adf4
 8013ba0:	0801a790 	.word	0x0801a790

08013ba4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	607b      	str	r3, [r7, #4]
 8013bae:	460b      	mov	r3, r1
 8013bb0:	817b      	strh	r3, [r7, #10]
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013bb6:	897a      	ldrh	r2, [r7, #10]
 8013bb8:	893b      	ldrh	r3, [r7, #8]
 8013bba:	4413      	add	r3, r2
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	3314      	adds	r3, #20
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013bc6:	4619      	mov	r1, r3
 8013bc8:	2022      	movs	r0, #34	@ 0x22
 8013bca:	f7f9 fce5 	bl	800d598 <pbuf_alloc>
 8013bce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d04d      	beq.n	8013c72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013bd6:	897b      	ldrh	r3, [r7, #10]
 8013bd8:	3313      	adds	r3, #19
 8013bda:	697a      	ldr	r2, [r7, #20]
 8013bdc:	8952      	ldrh	r2, [r2, #10]
 8013bde:	4293      	cmp	r3, r2
 8013be0:	db06      	blt.n	8013bf0 <tcp_output_alloc_header_common+0x4c>
 8013be2:	4b26      	ldr	r3, [pc, #152]	@ (8013c7c <tcp_output_alloc_header_common+0xd8>)
 8013be4:	f240 7223 	movw	r2, #1827	@ 0x723
 8013be8:	4925      	ldr	r1, [pc, #148]	@ (8013c80 <tcp_output_alloc_header_common+0xdc>)
 8013bea:	4826      	ldr	r0, [pc, #152]	@ (8013c84 <tcp_output_alloc_header_common+0xe0>)
 8013bec:	f003 fcca 	bl	8017584 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013bf6:	8c3b      	ldrh	r3, [r7, #32]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f8 fc05 	bl	800c408 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013c06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7f8 fbfd 	bl	800c408 <lwip_htons>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	461a      	mov	r2, r3
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013c1c:	68f8      	ldr	r0, [r7, #12]
 8013c1e:	f7f8 fc08 	bl	800c432 <lwip_htonl>
 8013c22:	4602      	mov	r2, r0
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013c28:	897b      	ldrh	r3, [r7, #10]
 8013c2a:	089b      	lsrs	r3, r3, #2
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	3305      	adds	r3, #5
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	031b      	lsls	r3, r3, #12
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	4618      	mov	r0, r3
 8013c42:	f7f8 fbe1 	bl	800c408 <lwip_htons>
 8013c46:	4603      	mov	r3, r0
 8013c48:	461a      	mov	r2, r3
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013c4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7f8 fbd9 	bl	800c408 <lwip_htons>
 8013c56:	4603      	mov	r3, r0
 8013c58:	461a      	mov	r2, r3
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	2200      	movs	r2, #0
 8013c62:	741a      	strb	r2, [r3, #16]
 8013c64:	2200      	movs	r2, #0
 8013c66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	749a      	strb	r2, [r3, #18]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c72:	697b      	ldr	r3, [r7, #20]
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3718      	adds	r7, #24
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	0801a73c 	.word	0x0801a73c
 8013c80:	0801ae14 	.word	0x0801ae14
 8013c84:	0801a790 	.word	0x0801a790

08013c88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c88:	b5b0      	push	{r4, r5, r7, lr}
 8013c8a:	b08a      	sub	sp, #40	@ 0x28
 8013c8c:	af04      	add	r7, sp, #16
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	607b      	str	r3, [r7, #4]
 8013c92:	460b      	mov	r3, r1
 8013c94:	817b      	strh	r3, [r7, #10]
 8013c96:	4613      	mov	r3, r2
 8013c98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d106      	bne.n	8013cae <tcp_output_alloc_header+0x26>
 8013ca0:	4b15      	ldr	r3, [pc, #84]	@ (8013cf8 <tcp_output_alloc_header+0x70>)
 8013ca2:	f240 7242 	movw	r2, #1858	@ 0x742
 8013ca6:	4915      	ldr	r1, [pc, #84]	@ (8013cfc <tcp_output_alloc_header+0x74>)
 8013ca8:	4815      	ldr	r0, [pc, #84]	@ (8013d00 <tcp_output_alloc_header+0x78>)
 8013caa:	f003 fc6b 	bl	8017584 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	8adb      	ldrh	r3, [r3, #22]
 8013cb6:	68fa      	ldr	r2, [r7, #12]
 8013cb8:	8b12      	ldrh	r2, [r2, #24]
 8013cba:	68f9      	ldr	r1, [r7, #12]
 8013cbc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013cbe:	893d      	ldrh	r5, [r7, #8]
 8013cc0:	897c      	ldrh	r4, [r7, #10]
 8013cc2:	9103      	str	r1, [sp, #12]
 8013cc4:	2110      	movs	r1, #16
 8013cc6:	9102      	str	r1, [sp, #8]
 8013cc8:	9201      	str	r2, [sp, #4]
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	462a      	mov	r2, r5
 8013cd0:	4621      	mov	r1, r4
 8013cd2:	f7ff ff67 	bl	8013ba4 <tcp_output_alloc_header_common>
 8013cd6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d006      	beq.n	8013cec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ce2:	68fa      	ldr	r2, [r7, #12]
 8013ce4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013ce6:	441a      	add	r2, r3
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013cec:	697b      	ldr	r3, [r7, #20]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3718      	adds	r7, #24
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	0801a73c 	.word	0x0801a73c
 8013cfc:	0801ae44 	.word	0x0801ae44
 8013d00:	0801a790 	.word	0x0801a790

08013d04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b088      	sub	sp, #32
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	4611      	mov	r1, r2
 8013d10:	461a      	mov	r2, r3
 8013d12:	460b      	mov	r3, r1
 8013d14:	71fb      	strb	r3, [r7, #7]
 8013d16:	4613      	mov	r3, r2
 8013d18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d106      	bne.n	8013d32 <tcp_output_fill_options+0x2e>
 8013d24:	4b12      	ldr	r3, [pc, #72]	@ (8013d70 <tcp_output_fill_options+0x6c>)
 8013d26:	f240 7256 	movw	r2, #1878	@ 0x756
 8013d2a:	4912      	ldr	r1, [pc, #72]	@ (8013d74 <tcp_output_fill_options+0x70>)
 8013d2c:	4812      	ldr	r0, [pc, #72]	@ (8013d78 <tcp_output_fill_options+0x74>)
 8013d2e:	f003 fc29 	bl	8017584 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	3314      	adds	r3, #20
 8013d3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013d3e:	8bfb      	ldrh	r3, [r7, #30]
 8013d40:	009b      	lsls	r3, r3, #2
 8013d42:	461a      	mov	r2, r3
 8013d44:	79fb      	ldrb	r3, [r7, #7]
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	4413      	add	r3, r2
 8013d4e:	3314      	adds	r3, #20
 8013d50:	69ba      	ldr	r2, [r7, #24]
 8013d52:	4413      	add	r3, r2
 8013d54:	697a      	ldr	r2, [r7, #20]
 8013d56:	429a      	cmp	r2, r3
 8013d58:	d006      	beq.n	8013d68 <tcp_output_fill_options+0x64>
 8013d5a:	4b05      	ldr	r3, [pc, #20]	@ (8013d70 <tcp_output_fill_options+0x6c>)
 8013d5c:	f240 7275 	movw	r2, #1909	@ 0x775
 8013d60:	4906      	ldr	r1, [pc, #24]	@ (8013d7c <tcp_output_fill_options+0x78>)
 8013d62:	4805      	ldr	r0, [pc, #20]	@ (8013d78 <tcp_output_fill_options+0x74>)
 8013d64:	f003 fc0e 	bl	8017584 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d68:	bf00      	nop
 8013d6a:	3720      	adds	r7, #32
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	0801a73c 	.word	0x0801a73c
 8013d74:	0801ae6c 	.word	0x0801ae6c
 8013d78:	0801a790 	.word	0x0801a790
 8013d7c:	0801ad64 	.word	0x0801ad64

08013d80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08a      	sub	sp, #40	@ 0x28
 8013d84:	af04      	add	r7, sp, #16
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
 8013d8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013d8e:	68bb      	ldr	r3, [r7, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d106      	bne.n	8013da2 <tcp_output_control_segment+0x22>
 8013d94:	4b1c      	ldr	r3, [pc, #112]	@ (8013e08 <tcp_output_control_segment+0x88>)
 8013d96:	f240 7287 	movw	r2, #1927	@ 0x787
 8013d9a:	491c      	ldr	r1, [pc, #112]	@ (8013e0c <tcp_output_control_segment+0x8c>)
 8013d9c:	481c      	ldr	r0, [pc, #112]	@ (8013e10 <tcp_output_control_segment+0x90>)
 8013d9e:	f003 fbf1 	bl	8017584 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013da2:	683a      	ldr	r2, [r7, #0]
 8013da4:	6879      	ldr	r1, [r7, #4]
 8013da6:	68f8      	ldr	r0, [r7, #12]
 8013da8:	f7fe faea 	bl	8012380 <tcp_route>
 8013dac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d102      	bne.n	8013dba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013db4:	23fc      	movs	r3, #252	@ 0xfc
 8013db6:	75fb      	strb	r3, [r7, #23]
 8013db8:	e01c      	b.n	8013df4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d006      	beq.n	8013dce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	7adb      	ldrb	r3, [r3, #11]
 8013dc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	7a9b      	ldrb	r3, [r3, #10]
 8013dca:	757b      	strb	r3, [r7, #21]
 8013dcc:	e003      	b.n	8013dd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013dce:	23ff      	movs	r3, #255	@ 0xff
 8013dd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013dd6:	7dba      	ldrb	r2, [r7, #22]
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	9302      	str	r3, [sp, #8]
 8013ddc:	2306      	movs	r3, #6
 8013dde:	9301      	str	r3, [sp, #4]
 8013de0:	7d7b      	ldrb	r3, [r7, #21]
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	4613      	mov	r3, r2
 8013de6:	683a      	ldr	r2, [r7, #0]
 8013de8:	6879      	ldr	r1, [r7, #4]
 8013dea:	68b8      	ldr	r0, [r7, #8]
 8013dec:	f002 f8e6 	bl	8015fbc <ip4_output_if>
 8013df0:	4603      	mov	r3, r0
 8013df2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013df4:	68b8      	ldr	r0, [r7, #8]
 8013df6:	f7f9 feb3 	bl	800db60 <pbuf_free>
  return err;
 8013dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3718      	adds	r7, #24
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	0801a73c 	.word	0x0801a73c
 8013e0c:	0801ae94 	.word	0x0801ae94
 8013e10:	0801a790 	.word	0x0801a790

08013e14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013e14:	b590      	push	{r4, r7, lr}
 8013e16:	b08b      	sub	sp, #44	@ 0x2c
 8013e18:	af04      	add	r7, sp, #16
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	607a      	str	r2, [r7, #4]
 8013e20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d106      	bne.n	8013e36 <tcp_rst+0x22>
 8013e28:	4b1f      	ldr	r3, [pc, #124]	@ (8013ea8 <tcp_rst+0x94>)
 8013e2a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8013e2e:	491f      	ldr	r1, [pc, #124]	@ (8013eac <tcp_rst+0x98>)
 8013e30:	481f      	ldr	r0, [pc, #124]	@ (8013eb0 <tcp_rst+0x9c>)
 8013e32:	f003 fba7 	bl	8017584 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <tcp_rst+0x36>
 8013e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8013ea8 <tcp_rst+0x94>)
 8013e3e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013e42:	491c      	ldr	r1, [pc, #112]	@ (8013eb4 <tcp_rst+0xa0>)
 8013e44:	481a      	ldr	r0, [pc, #104]	@ (8013eb0 <tcp_rst+0x9c>)
 8013e46:	f003 fb9d 	bl	8017584 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013e4e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013e52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013e54:	7dfb      	ldrb	r3, [r7, #23]
 8013e56:	b29c      	uxth	r4, r3
 8013e58:	68b8      	ldr	r0, [r7, #8]
 8013e5a:	f7f8 faea 	bl	800c432 <lwip_htonl>
 8013e5e:	4602      	mov	r2, r0
 8013e60:	8abb      	ldrh	r3, [r7, #20]
 8013e62:	9303      	str	r3, [sp, #12]
 8013e64:	2314      	movs	r3, #20
 8013e66:	9302      	str	r3, [sp, #8]
 8013e68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8013e6a:	9301      	str	r3, [sp, #4]
 8013e6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013e6e:	9300      	str	r3, [sp, #0]
 8013e70:	4613      	mov	r3, r2
 8013e72:	2200      	movs	r2, #0
 8013e74:	4621      	mov	r1, r4
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f7ff fe94 	bl	8013ba4 <tcp_output_alloc_header_common>
 8013e7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e7e:	693b      	ldr	r3, [r7, #16]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d00c      	beq.n	8013e9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e84:	7dfb      	ldrb	r3, [r7, #23]
 8013e86:	2200      	movs	r2, #0
 8013e88:	6939      	ldr	r1, [r7, #16]
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f7ff ff3a 	bl	8013d04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e92:	683a      	ldr	r2, [r7, #0]
 8013e94:	6939      	ldr	r1, [r7, #16]
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f7ff ff72 	bl	8013d80 <tcp_output_control_segment>
 8013e9c:	e000      	b.n	8013ea0 <tcp_rst+0x8c>
    return;
 8013e9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013ea0:	371c      	adds	r7, #28
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd90      	pop	{r4, r7, pc}
 8013ea6:	bf00      	nop
 8013ea8:	0801a73c 	.word	0x0801a73c
 8013eac:	0801aec0 	.word	0x0801aec0
 8013eb0:	0801a790 	.word	0x0801a790
 8013eb4:	0801aedc 	.word	0x0801aedc

08013eb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013eb8:	b590      	push	{r4, r7, lr}
 8013eba:	b087      	sub	sp, #28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <tcp_send_empty_ack+0x24>
 8013ece:	4b28      	ldr	r3, [pc, #160]	@ (8013f70 <tcp_send_empty_ack+0xb8>)
 8013ed0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013ed4:	4927      	ldr	r1, [pc, #156]	@ (8013f74 <tcp_send_empty_ack+0xbc>)
 8013ed6:	4828      	ldr	r0, [pc, #160]	@ (8013f78 <tcp_send_empty_ack+0xc0>)
 8013ed8:	f003 fb54 	bl	8017584 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013edc:	7dfb      	ldrb	r3, [r7, #23]
 8013ede:	009b      	lsls	r3, r3, #2
 8013ee0:	b2db      	uxtb	r3, r3
 8013ee2:	f003 0304 	and.w	r3, r3, #4
 8013ee6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013ee8:	7d7b      	ldrb	r3, [r7, #21]
 8013eea:	b29c      	uxth	r4, r3
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f8 fa9e 	bl	800c432 <lwip_htonl>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	2200      	movs	r2, #0
 8013efa:	4621      	mov	r1, r4
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7ff fec3 	bl	8013c88 <tcp_output_alloc_header>
 8013f02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d109      	bne.n	8013f1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	8b5b      	ldrh	r3, [r3, #26]
 8013f0e:	f043 0303 	orr.w	r3, r3, #3
 8013f12:	b29a      	uxth	r2, r3
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013f18:	f06f 0301 	mvn.w	r3, #1
 8013f1c:	e023      	b.n	8013f66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013f1e:	7dbb      	ldrb	r3, [r7, #22]
 8013f20:	7dfa      	ldrb	r2, [r7, #23]
 8013f22:	6939      	ldr	r1, [r7, #16]
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f7ff feed 	bl	8013d04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	6939      	ldr	r1, [r7, #16]
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f7ff ff24 	bl	8013d80 <tcp_output_control_segment>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d007      	beq.n	8013f54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	8b5b      	ldrh	r3, [r3, #26]
 8013f48:	f043 0303 	orr.w	r3, r3, #3
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	835a      	strh	r2, [r3, #26]
 8013f52:	e006      	b.n	8013f62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	8b5b      	ldrh	r3, [r3, #26]
 8013f58:	f023 0303 	bic.w	r3, r3, #3
 8013f5c:	b29a      	uxth	r2, r3
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	371c      	adds	r7, #28
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd90      	pop	{r4, r7, pc}
 8013f6e:	bf00      	nop
 8013f70:	0801a73c 	.word	0x0801a73c
 8013f74:	0801aef8 	.word	0x0801aef8
 8013f78:	0801a790 	.word	0x0801a790

08013f7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f7c:	b590      	push	{r4, r7, lr}
 8013f7e:	b087      	sub	sp, #28
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f84:	2300      	movs	r3, #0
 8013f86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d106      	bne.n	8013f9c <tcp_keepalive+0x20>
 8013f8e:	4b18      	ldr	r3, [pc, #96]	@ (8013ff0 <tcp_keepalive+0x74>)
 8013f90:	f640 0224 	movw	r2, #2084	@ 0x824
 8013f94:	4917      	ldr	r1, [pc, #92]	@ (8013ff4 <tcp_keepalive+0x78>)
 8013f96:	4818      	ldr	r0, [pc, #96]	@ (8013ff8 <tcp_keepalive+0x7c>)
 8013f98:	f003 faf4 	bl	8017584 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013f9c:	7dfb      	ldrb	r3, [r7, #23]
 8013f9e:	b29c      	uxth	r4, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fa4:	3b01      	subs	r3, #1
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f7f8 fa43 	bl	800c432 <lwip_htonl>
 8013fac:	4603      	mov	r3, r0
 8013fae:	2200      	movs	r2, #0
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff fe68 	bl	8013c88 <tcp_output_alloc_header>
 8013fb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d102      	bne.n	8013fc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fc4:	e010      	b.n	8013fe8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fc6:	7dfb      	ldrb	r3, [r7, #23]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	6939      	ldr	r1, [r7, #16]
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f7ff fe99 	bl	8013d04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013fd2:	687a      	ldr	r2, [r7, #4]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	6939      	ldr	r1, [r7, #16]
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f7ff fed0 	bl	8013d80 <tcp_output_control_segment>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	371c      	adds	r7, #28
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd90      	pop	{r4, r7, pc}
 8013ff0:	0801a73c 	.word	0x0801a73c
 8013ff4:	0801af18 	.word	0x0801af18
 8013ff8:	0801a790 	.word	0x0801a790

08013ffc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013ffc:	b590      	push	{r4, r7, lr}
 8013ffe:	b08b      	sub	sp, #44	@ 0x2c
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014004:	2300      	movs	r3, #0
 8014006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d106      	bne.n	801401e <tcp_zero_window_probe+0x22>
 8014010:	4b4c      	ldr	r3, [pc, #304]	@ (8014144 <tcp_zero_window_probe+0x148>)
 8014012:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014016:	494c      	ldr	r1, [pc, #304]	@ (8014148 <tcp_zero_window_probe+0x14c>)
 8014018:	484c      	ldr	r0, [pc, #304]	@ (801414c <tcp_zero_window_probe+0x150>)
 801401a:	f003 fab3 	bl	8017584 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014022:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d101      	bne.n	801402e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801402a:	2300      	movs	r3, #0
 801402c:	e086      	b.n	801413c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014034:	2bff      	cmp	r3, #255	@ 0xff
 8014036:	d007      	beq.n	8014048 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801403e:	3301      	adds	r3, #1
 8014040:	b2da      	uxtb	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014048:	6a3b      	ldr	r3, [r7, #32]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	899b      	ldrh	r3, [r3, #12]
 801404e:	b29b      	uxth	r3, r3
 8014050:	4618      	mov	r0, r3
 8014052:	f7f8 f9d9 	bl	800c408 <lwip_htons>
 8014056:	4603      	mov	r3, r0
 8014058:	b2db      	uxtb	r3, r3
 801405a:	f003 0301 	and.w	r3, r3, #1
 801405e:	2b00      	cmp	r3, #0
 8014060:	d005      	beq.n	801406e <tcp_zero_window_probe+0x72>
 8014062:	6a3b      	ldr	r3, [r7, #32]
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d101      	bne.n	801406e <tcp_zero_window_probe+0x72>
 801406a:	2301      	movs	r3, #1
 801406c:	e000      	b.n	8014070 <tcp_zero_window_probe+0x74>
 801406e:	2300      	movs	r3, #0
 8014070:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014072:	7ffb      	ldrb	r3, [r7, #31]
 8014074:	2b00      	cmp	r3, #0
 8014076:	bf0c      	ite	eq
 8014078:	2301      	moveq	r3, #1
 801407a:	2300      	movne	r3, #0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014084:	b299      	uxth	r1, r3
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	685b      	ldr	r3, [r3, #4]
 801408c:	8bba      	ldrh	r2, [r7, #28]
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f7ff fdfa 	bl	8013c88 <tcp_output_alloc_header>
 8014094:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801409c:	f04f 33ff 	mov.w	r3, #4294967295
 80140a0:	e04c      	b.n	801413c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	685b      	ldr	r3, [r3, #4]
 80140a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80140a8:	7ffb      	ldrb	r3, [r7, #31]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d011      	beq.n	80140d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	899b      	ldrh	r3, [r3, #12]
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	b21b      	sxth	r3, r3
 80140b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80140ba:	b21c      	sxth	r4, r3
 80140bc:	2011      	movs	r0, #17
 80140be:	f7f8 f9a3 	bl	800c408 <lwip_htons>
 80140c2:	4603      	mov	r3, r0
 80140c4:	b21b      	sxth	r3, r3
 80140c6:	4323      	orrs	r3, r4
 80140c8:	b21b      	sxth	r3, r3
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	819a      	strh	r2, [r3, #12]
 80140d0:	e010      	b.n	80140f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	3314      	adds	r3, #20
 80140d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80140da:	6a3b      	ldr	r3, [r7, #32]
 80140dc:	6858      	ldr	r0, [r3, #4]
 80140de:	6a3b      	ldr	r3, [r7, #32]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	891a      	ldrh	r2, [r3, #8]
 80140e4:	6a3b      	ldr	r3, [r7, #32]
 80140e6:	891b      	ldrh	r3, [r3, #8]
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	b29b      	uxth	r3, r3
 80140ec:	2201      	movs	r2, #1
 80140ee:	6939      	ldr	r1, [r7, #16]
 80140f0:	f7f9 ff2c 	bl	800df4c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7f8 f999 	bl	800c432 <lwip_htonl>
 8014100:	4603      	mov	r3, r0
 8014102:	3301      	adds	r3, #1
 8014104:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	2b00      	cmp	r3, #0
 8014110:	da02      	bge.n	8014118 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	68fa      	ldr	r2, [r7, #12]
 8014116:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801411c:	2200      	movs	r2, #0
 801411e:	69b9      	ldr	r1, [r7, #24]
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f7ff fdef 	bl	8013d04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014126:	687a      	ldr	r2, [r7, #4]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	3304      	adds	r3, #4
 801412c:	69b9      	ldr	r1, [r7, #24]
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f7ff fe26 	bl	8013d80 <tcp_output_control_segment>
 8014134:	4603      	mov	r3, r0
 8014136:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014138:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801413c:	4618      	mov	r0, r3
 801413e:	372c      	adds	r7, #44	@ 0x2c
 8014140:	46bd      	mov	sp, r7
 8014142:	bd90      	pop	{r4, r7, pc}
 8014144:	0801a73c 	.word	0x0801a73c
 8014148:	0801af34 	.word	0x0801af34
 801414c:	0801a790 	.word	0x0801a790

08014150 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014158:	f7f9 ffe6 	bl	800e128 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801415c:	4b0a      	ldr	r3, [pc, #40]	@ (8014188 <tcpip_tcp_timer+0x38>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d103      	bne.n	801416c <tcpip_tcp_timer+0x1c>
 8014164:	4b09      	ldr	r3, [pc, #36]	@ (801418c <tcpip_tcp_timer+0x3c>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d005      	beq.n	8014178 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801416c:	2200      	movs	r2, #0
 801416e:	4908      	ldr	r1, [pc, #32]	@ (8014190 <tcpip_tcp_timer+0x40>)
 8014170:	20fa      	movs	r0, #250	@ 0xfa
 8014172:	f000 f8f3 	bl	801435c <sys_timeout>
 8014176:	e003      	b.n	8014180 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014178:	4b06      	ldr	r3, [pc, #24]	@ (8014194 <tcpip_tcp_timer+0x44>)
 801417a:	2200      	movs	r2, #0
 801417c:	601a      	str	r2, [r3, #0]
  }
}
 801417e:	bf00      	nop
 8014180:	bf00      	nop
 8014182:	3708      	adds	r7, #8
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	2000df60 	.word	0x2000df60
 801418c:	2000df64 	.word	0x2000df64
 8014190:	08014151 	.word	0x08014151
 8014194:	2000dfac 	.word	0x2000dfac

08014198 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801419c:	4b0a      	ldr	r3, [pc, #40]	@ (80141c8 <tcp_timer_needed+0x30>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10f      	bne.n	80141c4 <tcp_timer_needed+0x2c>
 80141a4:	4b09      	ldr	r3, [pc, #36]	@ (80141cc <tcp_timer_needed+0x34>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d103      	bne.n	80141b4 <tcp_timer_needed+0x1c>
 80141ac:	4b08      	ldr	r3, [pc, #32]	@ (80141d0 <tcp_timer_needed+0x38>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d007      	beq.n	80141c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80141b4:	4b04      	ldr	r3, [pc, #16]	@ (80141c8 <tcp_timer_needed+0x30>)
 80141b6:	2201      	movs	r2, #1
 80141b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80141ba:	2200      	movs	r2, #0
 80141bc:	4905      	ldr	r1, [pc, #20]	@ (80141d4 <tcp_timer_needed+0x3c>)
 80141be:	20fa      	movs	r0, #250	@ 0xfa
 80141c0:	f000 f8cc 	bl	801435c <sys_timeout>
  }
}
 80141c4:	bf00      	nop
 80141c6:	bd80      	pop	{r7, pc}
 80141c8:	2000dfac 	.word	0x2000dfac
 80141cc:	2000df60 	.word	0x2000df60
 80141d0:	2000df64 	.word	0x2000df64
 80141d4:	08014151 	.word	0x08014151

080141d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80141e4:	200a      	movs	r0, #10
 80141e6:	f7f8 fdc5 	bl	800cd74 <memp_malloc>
 80141ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d109      	bne.n	8014206 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d151      	bne.n	801429c <sys_timeout_abs+0xc4>
 80141f8:	4b2a      	ldr	r3, [pc, #168]	@ (80142a4 <sys_timeout_abs+0xcc>)
 80141fa:	22be      	movs	r2, #190	@ 0xbe
 80141fc:	492a      	ldr	r1, [pc, #168]	@ (80142a8 <sys_timeout_abs+0xd0>)
 80141fe:	482b      	ldr	r0, [pc, #172]	@ (80142ac <sys_timeout_abs+0xd4>)
 8014200:	f003 f9c0 	bl	8017584 <iprintf>
    return;
 8014204:	e04a      	b.n	801429c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	2200      	movs	r2, #0
 801420a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	68fa      	ldr	r2, [r7, #12]
 801421c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801421e:	4b24      	ldr	r3, [pc, #144]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d103      	bne.n	801422e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014226:	4a22      	ldr	r2, [pc, #136]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014228:	693b      	ldr	r3, [r7, #16]
 801422a:	6013      	str	r3, [r2, #0]
    return;
 801422c:	e037      	b.n	801429e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	685a      	ldr	r2, [r3, #4]
 8014232:	4b1f      	ldr	r3, [pc, #124]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	0fdb      	lsrs	r3, r3, #31
 801423c:	f003 0301 	and.w	r3, r3, #1
 8014240:	b2db      	uxtb	r3, r3
 8014242:	2b00      	cmp	r3, #0
 8014244:	d007      	beq.n	8014256 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014246:	4b1a      	ldr	r3, [pc, #104]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014248:	681a      	ldr	r2, [r3, #0]
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801424e:	4a18      	ldr	r2, [pc, #96]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6013      	str	r3, [r2, #0]
 8014254:	e023      	b.n	801429e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014256:	4b16      	ldr	r3, [pc, #88]	@ (80142b0 <sys_timeout_abs+0xd8>)
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	617b      	str	r3, [r7, #20]
 801425c:	e01a      	b.n	8014294 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d00b      	beq.n	801427e <sys_timeout_abs+0xa6>
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	685a      	ldr	r2, [r3, #4]
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	1ad3      	subs	r3, r2, r3
 8014272:	0fdb      	lsrs	r3, r3, #31
 8014274:	f003 0301 	and.w	r3, r3, #1
 8014278:	b2db      	uxtb	r3, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	d007      	beq.n	801428e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	693a      	ldr	r2, [r7, #16]
 801428a:	601a      	str	r2, [r3, #0]
        break;
 801428c:	e007      	b.n	801429e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	617b      	str	r3, [r7, #20]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1e1      	bne.n	801425e <sys_timeout_abs+0x86>
 801429a:	e000      	b.n	801429e <sys_timeout_abs+0xc6>
    return;
 801429c:	bf00      	nop
      }
    }
  }
}
 801429e:	3718      	adds	r7, #24
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	0801af58 	.word	0x0801af58
 80142a8:	0801af8c 	.word	0x0801af8c
 80142ac:	0801afcc 	.word	0x0801afcc
 80142b0:	2000dfa4 	.word	0x2000dfa4

080142b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80142c0:	697b      	ldr	r3, [r7, #20]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	4798      	blx	r3

  now = sys_now();
 80142c6:	f7f1 fce5 	bl	8005c94 <sys_now>
 80142ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80142cc:	697b      	ldr	r3, [r7, #20]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014310 <lwip_cyclic_timer+0x5c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	4413      	add	r3, r2
 80142d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	1ad3      	subs	r3, r2, r3
 80142de:	0fdb      	lsrs	r3, r3, #31
 80142e0:	f003 0301 	and.w	r3, r3, #1
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d009      	beq.n	80142fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	4413      	add	r3, r2
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	4907      	ldr	r1, [pc, #28]	@ (8014314 <lwip_cyclic_timer+0x60>)
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ff ff6e 	bl	80141d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80142fc:	e004      	b.n	8014308 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	4904      	ldr	r1, [pc, #16]	@ (8014314 <lwip_cyclic_timer+0x60>)
 8014302:	68f8      	ldr	r0, [r7, #12]
 8014304:	f7ff ff68 	bl	80141d8 <sys_timeout_abs>
}
 8014308:	bf00      	nop
 801430a:	3718      	adds	r7, #24
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	2000dfa8 	.word	0x2000dfa8
 8014314:	080142b5 	.word	0x080142b5

08014318 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801431e:	2301      	movs	r3, #1
 8014320:	607b      	str	r3, [r7, #4]
 8014322:	e00e      	b.n	8014342 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014324:	4a0b      	ldr	r2, [pc, #44]	@ (8014354 <sys_timeouts_init+0x3c>)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	4a08      	ldr	r2, [pc, #32]	@ (8014354 <sys_timeouts_init+0x3c>)
 8014332:	4413      	add	r3, r2
 8014334:	461a      	mov	r2, r3
 8014336:	4908      	ldr	r1, [pc, #32]	@ (8014358 <sys_timeouts_init+0x40>)
 8014338:	f000 f810 	bl	801435c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	3301      	adds	r3, #1
 8014340:	607b      	str	r3, [r7, #4]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	2b02      	cmp	r3, #2
 8014346:	d9ed      	bls.n	8014324 <sys_timeouts_init+0xc>
  }
}
 8014348:	bf00      	nop
 801434a:	bf00      	nop
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
 8014352:	bf00      	nop
 8014354:	0801bba0 	.word	0x0801bba0
 8014358:	080142b5 	.word	0x080142b5

0801435c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b086      	sub	sp, #24
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801436e:	d306      	bcc.n	801437e <sys_timeout+0x22>
 8014370:	4b0a      	ldr	r3, [pc, #40]	@ (801439c <sys_timeout+0x40>)
 8014372:	f240 1229 	movw	r2, #297	@ 0x129
 8014376:	490a      	ldr	r1, [pc, #40]	@ (80143a0 <sys_timeout+0x44>)
 8014378:	480a      	ldr	r0, [pc, #40]	@ (80143a4 <sys_timeout+0x48>)
 801437a:	f003 f903 	bl	8017584 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801437e:	f7f1 fc89 	bl	8005c94 <sys_now>
 8014382:	4602      	mov	r2, r0
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	4413      	add	r3, r2
 8014388:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	68b9      	ldr	r1, [r7, #8]
 801438e:	6978      	ldr	r0, [r7, #20]
 8014390:	f7ff ff22 	bl	80141d8 <sys_timeout_abs>
#endif
}
 8014394:	bf00      	nop
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}
 801439c:	0801af58 	.word	0x0801af58
 80143a0:	0801aff4 	.word	0x0801aff4
 80143a4:	0801afcc 	.word	0x0801afcc

080143a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80143ae:	f7f1 fc71 	bl	8005c94 <sys_now>
 80143b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80143b4:	4b17      	ldr	r3, [pc, #92]	@ (8014414 <sys_check_timeouts+0x6c>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d022      	beq.n	8014406 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80143c0:	68bb      	ldr	r3, [r7, #8]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	68fa      	ldr	r2, [r7, #12]
 80143c6:	1ad3      	subs	r3, r2, r3
 80143c8:	0fdb      	lsrs	r3, r3, #31
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d11a      	bne.n	801440a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	4a0e      	ldr	r2, [pc, #56]	@ (8014414 <sys_check_timeouts+0x6c>)
 80143da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	689b      	ldr	r3, [r3, #8]
 80143e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	68db      	ldr	r3, [r3, #12]
 80143e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	4a0a      	ldr	r2, [pc, #40]	@ (8014418 <sys_check_timeouts+0x70>)
 80143ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	200a      	movs	r0, #10
 80143f4:	f7f8 fd10 	bl	800ce18 <memp_free>
    if (handler != NULL) {
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d0da      	beq.n	80143b4 <sys_check_timeouts+0xc>
      handler(arg);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6838      	ldr	r0, [r7, #0]
 8014402:	4798      	blx	r3
  do {
 8014404:	e7d6      	b.n	80143b4 <sys_check_timeouts+0xc>
      return;
 8014406:	bf00      	nop
 8014408:	e000      	b.n	801440c <sys_check_timeouts+0x64>
      return;
 801440a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801440c:	3710      	adds	r7, #16
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
 8014412:	bf00      	nop
 8014414:	2000dfa4 	.word	0x2000dfa4
 8014418:	2000dfa8 	.word	0x2000dfa8

0801441c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014422:	4b16      	ldr	r3, [pc, #88]	@ (801447c <sys_timeouts_sleeptime+0x60>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d102      	bne.n	8014430 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801442a:	f04f 33ff 	mov.w	r3, #4294967295
 801442e:	e020      	b.n	8014472 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014430:	f7f1 fc30 	bl	8005c94 <sys_now>
 8014434:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014436:	4b11      	ldr	r3, [pc, #68]	@ (801447c <sys_timeouts_sleeptime+0x60>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	685a      	ldr	r2, [r3, #4]
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	1ad3      	subs	r3, r2, r3
 8014440:	0fdb      	lsrs	r3, r3, #31
 8014442:	f003 0301 	and.w	r3, r3, #1
 8014446:	b2db      	uxtb	r3, r3
 8014448:	2b00      	cmp	r3, #0
 801444a:	d001      	beq.n	8014450 <sys_timeouts_sleeptime+0x34>
    return 0;
 801444c:	2300      	movs	r3, #0
 801444e:	e010      	b.n	8014472 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014450:	4b0a      	ldr	r3, [pc, #40]	@ (801447c <sys_timeouts_sleeptime+0x60>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	685a      	ldr	r2, [r3, #4]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	1ad3      	subs	r3, r2, r3
 801445a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	da06      	bge.n	8014470 <sys_timeouts_sleeptime+0x54>
 8014462:	4b07      	ldr	r3, [pc, #28]	@ (8014480 <sys_timeouts_sleeptime+0x64>)
 8014464:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014468:	4906      	ldr	r1, [pc, #24]	@ (8014484 <sys_timeouts_sleeptime+0x68>)
 801446a:	4807      	ldr	r0, [pc, #28]	@ (8014488 <sys_timeouts_sleeptime+0x6c>)
 801446c:	f003 f88a 	bl	8017584 <iprintf>
    return ret;
 8014470:	683b      	ldr	r3, [r7, #0]
  }
}
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	2000dfa4 	.word	0x2000dfa4
 8014480:	0801af58 	.word	0x0801af58
 8014484:	0801b02c 	.word	0x0801b02c
 8014488:	0801afcc 	.word	0x0801afcc

0801448c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014490:	f002 ff78 	bl	8017384 <rand>
 8014494:	4603      	mov	r3, r0
 8014496:	b29b      	uxth	r3, r3
 8014498:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801449c:	b29b      	uxth	r3, r3
 801449e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	4b01      	ldr	r3, [pc, #4]	@ (80144ac <udp_init+0x20>)
 80144a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80144a8:	bf00      	nop
 80144aa:	bd80      	pop	{r7, pc}
 80144ac:	20000018 	.word	0x20000018

080144b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80144b6:	2300      	movs	r3, #0
 80144b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80144ba:	4b17      	ldr	r3, [pc, #92]	@ (8014518 <udp_new_port+0x68>)
 80144bc:	881b      	ldrh	r3, [r3, #0]
 80144be:	1c5a      	adds	r2, r3, #1
 80144c0:	b291      	uxth	r1, r2
 80144c2:	4a15      	ldr	r2, [pc, #84]	@ (8014518 <udp_new_port+0x68>)
 80144c4:	8011      	strh	r1, [r2, #0]
 80144c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144ca:	4293      	cmp	r3, r2
 80144cc:	d103      	bne.n	80144d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80144ce:	4b12      	ldr	r3, [pc, #72]	@ (8014518 <udp_new_port+0x68>)
 80144d0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80144d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144d6:	4b11      	ldr	r3, [pc, #68]	@ (801451c <udp_new_port+0x6c>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	603b      	str	r3, [r7, #0]
 80144dc:	e011      	b.n	8014502 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	8a5a      	ldrh	r2, [r3, #18]
 80144e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014518 <udp_new_port+0x68>)
 80144e4:	881b      	ldrh	r3, [r3, #0]
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d108      	bne.n	80144fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80144ea:	88fb      	ldrh	r3, [r7, #6]
 80144ec:	3301      	adds	r3, #1
 80144ee:	80fb      	strh	r3, [r7, #6]
 80144f0:	88fb      	ldrh	r3, [r7, #6]
 80144f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80144f6:	d3e0      	bcc.n	80144ba <udp_new_port+0xa>
        return 0;
 80144f8:	2300      	movs	r3, #0
 80144fa:	e007      	b.n	801450c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144fc:	683b      	ldr	r3, [r7, #0]
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	603b      	str	r3, [r7, #0]
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d1ea      	bne.n	80144de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014508:	4b03      	ldr	r3, [pc, #12]	@ (8014518 <udp_new_port+0x68>)
 801450a:	881b      	ldrh	r3, [r3, #0]
}
 801450c:	4618      	mov	r0, r3
 801450e:	370c      	adds	r7, #12
 8014510:	46bd      	mov	sp, r7
 8014512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014516:	4770      	bx	lr
 8014518:	20000018 	.word	0x20000018
 801451c:	2000dfb0 	.word	0x2000dfb0

08014520 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	4613      	mov	r3, r2
 801452c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d105      	bne.n	8014540 <udp_input_local_match+0x20>
 8014534:	4b27      	ldr	r3, [pc, #156]	@ (80145d4 <udp_input_local_match+0xb4>)
 8014536:	2287      	movs	r2, #135	@ 0x87
 8014538:	4927      	ldr	r1, [pc, #156]	@ (80145d8 <udp_input_local_match+0xb8>)
 801453a:	4828      	ldr	r0, [pc, #160]	@ (80145dc <udp_input_local_match+0xbc>)
 801453c:	f003 f822 	bl	8017584 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d105      	bne.n	8014552 <udp_input_local_match+0x32>
 8014546:	4b23      	ldr	r3, [pc, #140]	@ (80145d4 <udp_input_local_match+0xb4>)
 8014548:	2288      	movs	r2, #136	@ 0x88
 801454a:	4925      	ldr	r1, [pc, #148]	@ (80145e0 <udp_input_local_match+0xc0>)
 801454c:	4823      	ldr	r0, [pc, #140]	@ (80145dc <udp_input_local_match+0xbc>)
 801454e:	f003 f819 	bl	8017584 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	7a1b      	ldrb	r3, [r3, #8]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d00b      	beq.n	8014572 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	7a1a      	ldrb	r2, [r3, #8]
 801455e:	4b21      	ldr	r3, [pc, #132]	@ (80145e4 <udp_input_local_match+0xc4>)
 8014560:	685b      	ldr	r3, [r3, #4]
 8014562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014566:	3301      	adds	r3, #1
 8014568:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801456a:	429a      	cmp	r2, r3
 801456c:	d001      	beq.n	8014572 <udp_input_local_match+0x52>
    return 0;
 801456e:	2300      	movs	r3, #0
 8014570:	e02b      	b.n	80145ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014572:	79fb      	ldrb	r3, [r7, #7]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d018      	beq.n	80145aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d013      	beq.n	80145a6 <udp_input_local_match+0x86>
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00f      	beq.n	80145a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014586:	4b17      	ldr	r3, [pc, #92]	@ (80145e4 <udp_input_local_match+0xc4>)
 8014588:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801458e:	d00a      	beq.n	80145a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	4b13      	ldr	r3, [pc, #76]	@ (80145e4 <udp_input_local_match+0xc4>)
 8014596:	695b      	ldr	r3, [r3, #20]
 8014598:	405a      	eors	r2, r3
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	3308      	adds	r3, #8
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d110      	bne.n	80145c8 <udp_input_local_match+0xa8>
          return 1;
 80145a6:	2301      	movs	r3, #1
 80145a8:	e00f      	b.n	80145ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d009      	beq.n	80145c4 <udp_input_local_match+0xa4>
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d005      	beq.n	80145c4 <udp_input_local_match+0xa4>
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	4b09      	ldr	r3, [pc, #36]	@ (80145e4 <udp_input_local_match+0xc4>)
 80145be:	695b      	ldr	r3, [r3, #20]
 80145c0:	429a      	cmp	r2, r3
 80145c2:	d101      	bne.n	80145c8 <udp_input_local_match+0xa8>
        return 1;
 80145c4:	2301      	movs	r3, #1
 80145c6:	e000      	b.n	80145ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	0801b040 	.word	0x0801b040
 80145d8:	0801b070 	.word	0x0801b070
 80145dc:	0801b094 	.word	0x0801b094
 80145e0:	0801b0bc 	.word	0x0801b0bc
 80145e4:	20008640 	.word	0x20008640

080145e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80145e8:	b590      	push	{r4, r7, lr}
 80145ea:	b08d      	sub	sp, #52	@ 0x34
 80145ec:	af02      	add	r7, sp, #8
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80145f2:	2300      	movs	r3, #0
 80145f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d105      	bne.n	8014608 <udp_input+0x20>
 80145fc:	4b7c      	ldr	r3, [pc, #496]	@ (80147f0 <udp_input+0x208>)
 80145fe:	22cf      	movs	r2, #207	@ 0xcf
 8014600:	497c      	ldr	r1, [pc, #496]	@ (80147f4 <udp_input+0x20c>)
 8014602:	487d      	ldr	r0, [pc, #500]	@ (80147f8 <udp_input+0x210>)
 8014604:	f002 ffbe 	bl	8017584 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d105      	bne.n	801461a <udp_input+0x32>
 801460e:	4b78      	ldr	r3, [pc, #480]	@ (80147f0 <udp_input+0x208>)
 8014610:	22d0      	movs	r2, #208	@ 0xd0
 8014612:	497a      	ldr	r1, [pc, #488]	@ (80147fc <udp_input+0x214>)
 8014614:	4878      	ldr	r0, [pc, #480]	@ (80147f8 <udp_input+0x210>)
 8014616:	f002 ffb5 	bl	8017584 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	895b      	ldrh	r3, [r3, #10]
 801461e:	2b07      	cmp	r3, #7
 8014620:	d803      	bhi.n	801462a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f7f9 fa9c 	bl	800db60 <pbuf_free>
    goto end;
 8014628:	e0de      	b.n	80147e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014630:	4b73      	ldr	r3, [pc, #460]	@ (8014800 <udp_input+0x218>)
 8014632:	695b      	ldr	r3, [r3, #20]
 8014634:	4a72      	ldr	r2, [pc, #456]	@ (8014800 <udp_input+0x218>)
 8014636:	6812      	ldr	r2, [r2, #0]
 8014638:	4611      	mov	r1, r2
 801463a:	4618      	mov	r0, r3
 801463c:	f001 fd96 	bl	801616c <ip4_addr_isbroadcast_u32>
 8014640:	4603      	mov	r3, r0
 8014642:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	b29b      	uxth	r3, r3
 801464a:	4618      	mov	r0, r3
 801464c:	f7f7 fedc 	bl	800c408 <lwip_htons>
 8014650:	4603      	mov	r3, r0
 8014652:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	885b      	ldrh	r3, [r3, #2]
 8014658:	b29b      	uxth	r3, r3
 801465a:	4618      	mov	r0, r3
 801465c:	f7f7 fed4 	bl	800c408 <lwip_htons>
 8014660:	4603      	mov	r3, r0
 8014662:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014664:	2300      	movs	r3, #0
 8014666:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014668:	2300      	movs	r3, #0
 801466a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801466c:	2300      	movs	r3, #0
 801466e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014670:	4b64      	ldr	r3, [pc, #400]	@ (8014804 <udp_input+0x21c>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	627b      	str	r3, [r7, #36]	@ 0x24
 8014676:	e054      	b.n	8014722 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467a:	8a5b      	ldrh	r3, [r3, #18]
 801467c:	89fa      	ldrh	r2, [r7, #14]
 801467e:	429a      	cmp	r2, r3
 8014680:	d14a      	bne.n	8014718 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014682:	7cfb      	ldrb	r3, [r7, #19]
 8014684:	461a      	mov	r2, r3
 8014686:	6839      	ldr	r1, [r7, #0]
 8014688:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801468a:	f7ff ff49 	bl	8014520 <udp_input_local_match>
 801468e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014690:	2b00      	cmp	r3, #0
 8014692:	d041      	beq.n	8014718 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014696:	7c1b      	ldrb	r3, [r3, #16]
 8014698:	f003 0304 	and.w	r3, r3, #4
 801469c:	2b00      	cmp	r3, #0
 801469e:	d11d      	bne.n	80146dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80146a0:	69fb      	ldr	r3, [r7, #28]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d102      	bne.n	80146ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80146a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146a8:	61fb      	str	r3, [r7, #28]
 80146aa:	e017      	b.n	80146dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80146ac:	7cfb      	ldrb	r3, [r7, #19]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d014      	beq.n	80146dc <udp_input+0xf4>
 80146b2:	4b53      	ldr	r3, [pc, #332]	@ (8014800 <udp_input+0x218>)
 80146b4:	695b      	ldr	r3, [r3, #20]
 80146b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ba:	d10f      	bne.n	80146dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	681a      	ldr	r2, [r3, #0]
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	3304      	adds	r3, #4
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d008      	beq.n	80146dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80146ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146cc:	681a      	ldr	r2, [r3, #0]
 80146ce:	683b      	ldr	r3, [r7, #0]
 80146d0:	3304      	adds	r3, #4
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d101      	bne.n	80146dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80146d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80146dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146de:	8a9b      	ldrh	r3, [r3, #20]
 80146e0:	8a3a      	ldrh	r2, [r7, #16]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d118      	bne.n	8014718 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80146e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d005      	beq.n	80146fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80146ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f0:	685a      	ldr	r2, [r3, #4]
 80146f2:	4b43      	ldr	r3, [pc, #268]	@ (8014800 <udp_input+0x218>)
 80146f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d10e      	bne.n	8014718 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80146fa:	6a3b      	ldr	r3, [r7, #32]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d014      	beq.n	801472a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014702:	68da      	ldr	r2, [r3, #12]
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014708:	4b3e      	ldr	r3, [pc, #248]	@ (8014804 <udp_input+0x21c>)
 801470a:	681a      	ldr	r2, [r3, #0]
 801470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801470e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014710:	4a3c      	ldr	r2, [pc, #240]	@ (8014804 <udp_input+0x21c>)
 8014712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014714:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014716:	e008      	b.n	801472a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801471a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	627b      	str	r3, [r7, #36]	@ 0x24
 8014722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014724:	2b00      	cmp	r3, #0
 8014726:	d1a7      	bne.n	8014678 <udp_input+0x90>
 8014728:	e000      	b.n	801472c <udp_input+0x144>
        break;
 801472a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801472e:	2b00      	cmp	r3, #0
 8014730:	d101      	bne.n	8014736 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014732:	69fb      	ldr	r3, [r7, #28]
 8014734:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014738:	2b00      	cmp	r3, #0
 801473a:	d002      	beq.n	8014742 <udp_input+0x15a>
    for_us = 1;
 801473c:	2301      	movs	r3, #1
 801473e:	76fb      	strb	r3, [r7, #27]
 8014740:	e00a      	b.n	8014758 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	3304      	adds	r3, #4
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	4b2d      	ldr	r3, [pc, #180]	@ (8014800 <udp_input+0x218>)
 801474a:	695b      	ldr	r3, [r3, #20]
 801474c:	429a      	cmp	r2, r3
 801474e:	bf0c      	ite	eq
 8014750:	2301      	moveq	r3, #1
 8014752:	2300      	movne	r3, #0
 8014754:	b2db      	uxtb	r3, r3
 8014756:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014758:	7efb      	ldrb	r3, [r7, #27]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d041      	beq.n	80147e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801475e:	2108      	movs	r1, #8
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7f9 f977 	bl	800da54 <pbuf_remove_header>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00a      	beq.n	8014782 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801476c:	4b20      	ldr	r3, [pc, #128]	@ (80147f0 <udp_input+0x208>)
 801476e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014772:	4925      	ldr	r1, [pc, #148]	@ (8014808 <udp_input+0x220>)
 8014774:	4820      	ldr	r0, [pc, #128]	@ (80147f8 <udp_input+0x210>)
 8014776:	f002 ff05 	bl	8017584 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7f9 f9f0 	bl	800db60 <pbuf_free>
      goto end;
 8014780:	e032      	b.n	80147e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014784:	2b00      	cmp	r3, #0
 8014786:	d012      	beq.n	80147ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801478a:	699b      	ldr	r3, [r3, #24]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00a      	beq.n	80147a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014792:	699c      	ldr	r4, [r3, #24]
 8014794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014796:	69d8      	ldr	r0, [r3, #28]
 8014798:	8a3b      	ldrh	r3, [r7, #16]
 801479a:	9300      	str	r3, [sp, #0]
 801479c:	4b1b      	ldr	r3, [pc, #108]	@ (801480c <udp_input+0x224>)
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80147a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80147a4:	e021      	b.n	80147ea <udp_input+0x202>
        pbuf_free(p);
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f7f9 f9da 	bl	800db60 <pbuf_free>
        goto end;
 80147ac:	e01c      	b.n	80147e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80147ae:	7cfb      	ldrb	r3, [r7, #19]
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d112      	bne.n	80147da <udp_input+0x1f2>
 80147b4:	4b12      	ldr	r3, [pc, #72]	@ (8014800 <udp_input+0x218>)
 80147b6:	695b      	ldr	r3, [r3, #20]
 80147b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80147bc:	2be0      	cmp	r3, #224	@ 0xe0
 80147be:	d00c      	beq.n	80147da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80147c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014800 <udp_input+0x218>)
 80147c2:	899b      	ldrh	r3, [r3, #12]
 80147c4:	3308      	adds	r3, #8
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	b21b      	sxth	r3, r3
 80147ca:	4619      	mov	r1, r3
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7f9 f9b4 	bl	800db3a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80147d2:	2103      	movs	r1, #3
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f001 f9a9 	bl	8015b2c <icmp_dest_unreach>
      pbuf_free(p);
 80147da:	6878      	ldr	r0, [r7, #4]
 80147dc:	f7f9 f9c0 	bl	800db60 <pbuf_free>
  return;
 80147e0:	e003      	b.n	80147ea <udp_input+0x202>
    pbuf_free(p);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7f9 f9bc 	bl	800db60 <pbuf_free>
  return;
 80147e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80147ea:	372c      	adds	r7, #44	@ 0x2c
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd90      	pop	{r4, r7, pc}
 80147f0:	0801b040 	.word	0x0801b040
 80147f4:	0801b0e4 	.word	0x0801b0e4
 80147f8:	0801b094 	.word	0x0801b094
 80147fc:	0801b0fc 	.word	0x0801b0fc
 8014800:	20008640 	.word	0x20008640
 8014804:	2000dfb0 	.word	0x2000dfb0
 8014808:	0801b118 	.word	0x0801b118
 801480c:	20008650 	.word	0x20008650

08014810 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b086      	sub	sp, #24
 8014814:	af00      	add	r7, sp, #0
 8014816:	60f8      	str	r0, [r7, #12]
 8014818:	60b9      	str	r1, [r7, #8]
 801481a:	4613      	mov	r3, r2
 801481c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d101      	bne.n	8014828 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014824:	4b39      	ldr	r3, [pc, #228]	@ (801490c <udp_bind+0xfc>)
 8014826:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d109      	bne.n	8014842 <udp_bind+0x32>
 801482e:	4b38      	ldr	r3, [pc, #224]	@ (8014910 <udp_bind+0x100>)
 8014830:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8014834:	4937      	ldr	r1, [pc, #220]	@ (8014914 <udp_bind+0x104>)
 8014836:	4838      	ldr	r0, [pc, #224]	@ (8014918 <udp_bind+0x108>)
 8014838:	f002 fea4 	bl	8017584 <iprintf>
 801483c:	f06f 030f 	mvn.w	r3, #15
 8014840:	e060      	b.n	8014904 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014846:	4b35      	ldr	r3, [pc, #212]	@ (801491c <udp_bind+0x10c>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	617b      	str	r3, [r7, #20]
 801484c:	e009      	b.n	8014862 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	429a      	cmp	r2, r3
 8014854:	d102      	bne.n	801485c <udp_bind+0x4c>
      rebind = 1;
 8014856:	2301      	movs	r3, #1
 8014858:	74fb      	strb	r3, [r7, #19]
      break;
 801485a:	e005      	b.n	8014868 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d1f2      	bne.n	801484e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014868:	88fb      	ldrh	r3, [r7, #6]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d109      	bne.n	8014882 <udp_bind+0x72>
    port = udp_new_port();
 801486e:	f7ff fe1f 	bl	80144b0 <udp_new_port>
 8014872:	4603      	mov	r3, r0
 8014874:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014876:	88fb      	ldrh	r3, [r7, #6]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d12c      	bne.n	80148d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801487c:	f06f 0307 	mvn.w	r3, #7
 8014880:	e040      	b.n	8014904 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014882:	4b26      	ldr	r3, [pc, #152]	@ (801491c <udp_bind+0x10c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	617b      	str	r3, [r7, #20]
 8014888:	e022      	b.n	80148d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	429a      	cmp	r2, r3
 8014890:	d01b      	beq.n	80148ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	8a5b      	ldrh	r3, [r3, #18]
 8014896:	88fa      	ldrh	r2, [r7, #6]
 8014898:	429a      	cmp	r2, r3
 801489a:	d116      	bne.n	80148ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d00d      	beq.n	80148c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d00a      	beq.n	80148c4 <udp_bind+0xb4>
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d006      	beq.n	80148c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d003      	beq.n	80148c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d102      	bne.n	80148ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80148c4:	f06f 0307 	mvn.w	r3, #7
 80148c8:	e01c      	b.n	8014904 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	68db      	ldr	r3, [r3, #12]
 80148ce:	617b      	str	r3, [r7, #20]
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1d9      	bne.n	801488a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80148d6:	68bb      	ldr	r3, [r7, #8]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d002      	beq.n	80148e2 <udp_bind+0xd2>
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	e000      	b.n	80148e4 <udp_bind+0xd4>
 80148e2:	2300      	movs	r3, #0
 80148e4:	68fa      	ldr	r2, [r7, #12]
 80148e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	88fa      	ldrh	r2, [r7, #6]
 80148ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80148ee:	7cfb      	ldrb	r3, [r7, #19]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d106      	bne.n	8014902 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80148f4:	4b09      	ldr	r3, [pc, #36]	@ (801491c <udp_bind+0x10c>)
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80148fc:	4a07      	ldr	r2, [pc, #28]	@ (801491c <udp_bind+0x10c>)
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014902:	2300      	movs	r3, #0
}
 8014904:	4618      	mov	r0, r3
 8014906:	3718      	adds	r7, #24
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}
 801490c:	0801bbb8 	.word	0x0801bbb8
 8014910:	0801b040 	.word	0x0801b040
 8014914:	0801b308 	.word	0x0801b308
 8014918:	0801b094 	.word	0x0801b094
 801491c:	2000dfb0 	.word	0x2000dfb0

08014920 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	60f8      	str	r0, [r7, #12]
 8014928:	60b9      	str	r1, [r7, #8]
 801492a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d107      	bne.n	8014942 <udp_recv+0x22>
 8014932:	4b08      	ldr	r3, [pc, #32]	@ (8014954 <udp_recv+0x34>)
 8014934:	f240 428a 	movw	r2, #1162	@ 0x48a
 8014938:	4907      	ldr	r1, [pc, #28]	@ (8014958 <udp_recv+0x38>)
 801493a:	4808      	ldr	r0, [pc, #32]	@ (801495c <udp_recv+0x3c>)
 801493c:	f002 fe22 	bl	8017584 <iprintf>
 8014940:	e005      	b.n	801494e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	61da      	str	r2, [r3, #28]
}
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}
 8014954:	0801b040 	.word	0x0801b040
 8014958:	0801b374 	.word	0x0801b374
 801495c:	0801b094 	.word	0x0801b094

08014960 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b084      	sub	sp, #16
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d107      	bne.n	801497e <udp_remove+0x1e>
 801496e:	4b19      	ldr	r3, [pc, #100]	@ (80149d4 <udp_remove+0x74>)
 8014970:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014974:	4918      	ldr	r1, [pc, #96]	@ (80149d8 <udp_remove+0x78>)
 8014976:	4819      	ldr	r0, [pc, #100]	@ (80149dc <udp_remove+0x7c>)
 8014978:	f002 fe04 	bl	8017584 <iprintf>
 801497c:	e026      	b.n	80149cc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801497e:	4b18      	ldr	r3, [pc, #96]	@ (80149e0 <udp_remove+0x80>)
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	687a      	ldr	r2, [r7, #4]
 8014984:	429a      	cmp	r2, r3
 8014986:	d105      	bne.n	8014994 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014988:	4b15      	ldr	r3, [pc, #84]	@ (80149e0 <udp_remove+0x80>)
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	68db      	ldr	r3, [r3, #12]
 801498e:	4a14      	ldr	r2, [pc, #80]	@ (80149e0 <udp_remove+0x80>)
 8014990:	6013      	str	r3, [r2, #0]
 8014992:	e017      	b.n	80149c4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014994:	4b12      	ldr	r3, [pc, #72]	@ (80149e0 <udp_remove+0x80>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	60fb      	str	r3, [r7, #12]
 801499a:	e010      	b.n	80149be <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	68db      	ldr	r3, [r3, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d009      	beq.n	80149b8 <udp_remove+0x58>
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	687a      	ldr	r2, [r7, #4]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d104      	bne.n	80149b8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	68da      	ldr	r2, [r3, #12]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	60da      	str	r2, [r3, #12]
        break;
 80149b6:	e005      	b.n	80149c4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	60fb      	str	r3, [r7, #12]
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d1eb      	bne.n	801499c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149c4:	6879      	ldr	r1, [r7, #4]
 80149c6:	2000      	movs	r0, #0
 80149c8:	f7f8 fa26 	bl	800ce18 <memp_free>
}
 80149cc:	3710      	adds	r7, #16
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	0801b040 	.word	0x0801b040
 80149d8:	0801b38c 	.word	0x0801b38c
 80149dc:	0801b094 	.word	0x0801b094
 80149e0:	2000dfb0 	.word	0x2000dfb0

080149e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80149ea:	2000      	movs	r0, #0
 80149ec:	f7f8 f9c2 	bl	800cd74 <memp_malloc>
 80149f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d007      	beq.n	8014a08 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80149f8:	2220      	movs	r2, #32
 80149fa:	2100      	movs	r1, #0
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f002 ff19 	bl	8017834 <memset>
    pcb->ttl = UDP_TTL;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	22ff      	movs	r2, #255	@ 0xff
 8014a06:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014a08:	687b      	ldr	r3, [r7, #4]
}
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	3708      	adds	r7, #8
 8014a0e:	46bd      	mov	sp, r7
 8014a10:	bd80      	pop	{r7, pc}

08014a12 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014a12:	b580      	push	{r7, lr}
 8014a14:	b084      	sub	sp, #16
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	4603      	mov	r3, r0
 8014a1a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014a1c:	f7ff ffe2 	bl	80149e4 <udp_new>
 8014a20:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a22:	68fb      	ldr	r3, [r7, #12]
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3710      	adds	r7, #16
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b085      	sub	sp, #20
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d01e      	beq.n	8014a7a <udp_netif_ip_addr_changed+0x4e>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d01a      	beq.n	8014a7a <udp_netif_ip_addr_changed+0x4e>
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d017      	beq.n	8014a7a <udp_netif_ip_addr_changed+0x4e>
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d013      	beq.n	8014a7a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a52:	4b0d      	ldr	r3, [pc, #52]	@ (8014a88 <udp_netif_ip_addr_changed+0x5c>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	60fb      	str	r3, [r7, #12]
 8014a58:	e00c      	b.n	8014a74 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d103      	bne.n	8014a6e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	681a      	ldr	r2, [r3, #0]
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d1ef      	bne.n	8014a5a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a7a:	bf00      	nop
 8014a7c:	3714      	adds	r7, #20
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a84:	4770      	bx	lr
 8014a86:	bf00      	nop
 8014a88:	2000dfb0 	.word	0x2000dfb0

08014a8c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014a94:	4915      	ldr	r1, [pc, #84]	@ (8014aec <etharp_free_entry+0x60>)
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d013      	beq.n	8014ad0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014aa8:	4910      	ldr	r1, [pc, #64]	@ (8014aec <etharp_free_entry+0x60>)
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	4613      	mov	r3, r2
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	4413      	add	r3, r2
 8014ab2:	00db      	lsls	r3, r3, #3
 8014ab4:	440b      	add	r3, r1
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f9 f851 	bl	800db60 <pbuf_free>
    arp_table[i].q = NULL;
 8014abe:	490b      	ldr	r1, [pc, #44]	@ (8014aec <etharp_free_entry+0x60>)
 8014ac0:	687a      	ldr	r2, [r7, #4]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	005b      	lsls	r3, r3, #1
 8014ac6:	4413      	add	r3, r2
 8014ac8:	00db      	lsls	r3, r3, #3
 8014aca:	440b      	add	r3, r1
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014ad0:	4906      	ldr	r1, [pc, #24]	@ (8014aec <etharp_free_entry+0x60>)
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	3314      	adds	r3, #20
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014ae4:	bf00      	nop
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	2000dfb4 	.word	0x2000dfb4

08014af0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014af6:	2300      	movs	r3, #0
 8014af8:	607b      	str	r3, [r7, #4]
 8014afa:	e096      	b.n	8014c2a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014afc:	494f      	ldr	r1, [pc, #316]	@ (8014c3c <etharp_tmr+0x14c>)
 8014afe:	687a      	ldr	r2, [r7, #4]
 8014b00:	4613      	mov	r3, r2
 8014b02:	005b      	lsls	r3, r3, #1
 8014b04:	4413      	add	r3, r2
 8014b06:	00db      	lsls	r3, r3, #3
 8014b08:	440b      	add	r3, r1
 8014b0a:	3314      	adds	r3, #20
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014b10:	78fb      	ldrb	r3, [r7, #3]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f000 8086 	beq.w	8014c24 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014b18:	4948      	ldr	r1, [pc, #288]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	4413      	add	r3, r2
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	440b      	add	r3, r1
 8014b26:	3312      	adds	r3, #18
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	3301      	adds	r3, #1
 8014b2c:	b298      	uxth	r0, r3
 8014b2e:	4943      	ldr	r1, [pc, #268]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b30:	687a      	ldr	r2, [r7, #4]
 8014b32:	4613      	mov	r3, r2
 8014b34:	005b      	lsls	r3, r3, #1
 8014b36:	4413      	add	r3, r2
 8014b38:	00db      	lsls	r3, r3, #3
 8014b3a:	440b      	add	r3, r1
 8014b3c:	3312      	adds	r3, #18
 8014b3e:	4602      	mov	r2, r0
 8014b40:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b42:	493e      	ldr	r1, [pc, #248]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	4613      	mov	r3, r2
 8014b48:	005b      	lsls	r3, r3, #1
 8014b4a:	4413      	add	r3, r2
 8014b4c:	00db      	lsls	r3, r3, #3
 8014b4e:	440b      	add	r3, r1
 8014b50:	3312      	adds	r3, #18
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014b58:	d215      	bcs.n	8014b86 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b5a:	4938      	ldr	r1, [pc, #224]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3314      	adds	r3, #20
 8014b6a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d10e      	bne.n	8014b8e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014b70:	4932      	ldr	r1, [pc, #200]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	4613      	mov	r3, r2
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	4413      	add	r3, r2
 8014b7a:	00db      	lsls	r3, r3, #3
 8014b7c:	440b      	add	r3, r1
 8014b7e:	3312      	adds	r3, #18
 8014b80:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014b82:	2b04      	cmp	r3, #4
 8014b84:	d903      	bls.n	8014b8e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014b86:	6878      	ldr	r0, [r7, #4]
 8014b88:	f7ff ff80 	bl	8014a8c <etharp_free_entry>
 8014b8c:	e04a      	b.n	8014c24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014b8e:	492b      	ldr	r1, [pc, #172]	@ (8014c3c <etharp_tmr+0x14c>)
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	4613      	mov	r3, r2
 8014b94:	005b      	lsls	r3, r3, #1
 8014b96:	4413      	add	r3, r2
 8014b98:	00db      	lsls	r3, r3, #3
 8014b9a:	440b      	add	r3, r1
 8014b9c:	3314      	adds	r3, #20
 8014b9e:	781b      	ldrb	r3, [r3, #0]
 8014ba0:	2b03      	cmp	r3, #3
 8014ba2:	d10a      	bne.n	8014bba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014ba4:	4925      	ldr	r1, [pc, #148]	@ (8014c3c <etharp_tmr+0x14c>)
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	4613      	mov	r3, r2
 8014baa:	005b      	lsls	r3, r3, #1
 8014bac:	4413      	add	r3, r2
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	440b      	add	r3, r1
 8014bb2:	3314      	adds	r3, #20
 8014bb4:	2204      	movs	r2, #4
 8014bb6:	701a      	strb	r2, [r3, #0]
 8014bb8:	e034      	b.n	8014c24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014bba:	4920      	ldr	r1, [pc, #128]	@ (8014c3c <etharp_tmr+0x14c>)
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4413      	add	r3, r2
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	440b      	add	r3, r1
 8014bc8:	3314      	adds	r3, #20
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	2b04      	cmp	r3, #4
 8014bce:	d10a      	bne.n	8014be6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014bd0:	491a      	ldr	r1, [pc, #104]	@ (8014c3c <etharp_tmr+0x14c>)
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4413      	add	r3, r2
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	440b      	add	r3, r1
 8014bde:	3314      	adds	r3, #20
 8014be0:	2202      	movs	r2, #2
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	e01e      	b.n	8014c24 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014be6:	4915      	ldr	r1, [pc, #84]	@ (8014c3c <etharp_tmr+0x14c>)
 8014be8:	687a      	ldr	r2, [r7, #4]
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3314      	adds	r3, #20
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d113      	bne.n	8014c24 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014bfc:	490f      	ldr	r1, [pc, #60]	@ (8014c3c <etharp_tmr+0x14c>)
 8014bfe:	687a      	ldr	r2, [r7, #4]
 8014c00:	4613      	mov	r3, r2
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4413      	add	r3, r2
 8014c06:	00db      	lsls	r3, r3, #3
 8014c08:	440b      	add	r3, r1
 8014c0a:	3308      	adds	r3, #8
 8014c0c:	6818      	ldr	r0, [r3, #0]
 8014c0e:	687a      	ldr	r2, [r7, #4]
 8014c10:	4613      	mov	r3, r2
 8014c12:	005b      	lsls	r3, r3, #1
 8014c14:	4413      	add	r3, r2
 8014c16:	00db      	lsls	r3, r3, #3
 8014c18:	4a08      	ldr	r2, [pc, #32]	@ (8014c3c <etharp_tmr+0x14c>)
 8014c1a:	4413      	add	r3, r2
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	4619      	mov	r1, r3
 8014c20:	f000 fe6e 	bl	8015900 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3301      	adds	r3, #1
 8014c28:	607b      	str	r3, [r7, #4]
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2b09      	cmp	r3, #9
 8014c2e:	f77f af65 	ble.w	8014afc <etharp_tmr+0xc>
      }
    }
  }
}
 8014c32:	bf00      	nop
 8014c34:	bf00      	nop
 8014c36:	3708      	adds	r7, #8
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	2000dfb4 	.word	0x2000dfb4

08014c40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b08a      	sub	sp, #40	@ 0x28
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	60f8      	str	r0, [r7, #12]
 8014c48:	460b      	mov	r3, r1
 8014c4a:	607a      	str	r2, [r7, #4]
 8014c4c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014c4e:	230a      	movs	r3, #10
 8014c50:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014c52:	230a      	movs	r3, #10
 8014c54:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014c56:	230a      	movs	r3, #10
 8014c58:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014c5e:	230a      	movs	r3, #10
 8014c60:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	83bb      	strh	r3, [r7, #28]
 8014c66:	2300      	movs	r3, #0
 8014c68:	837b      	strh	r3, [r7, #26]
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c6e:	2300      	movs	r3, #0
 8014c70:	843b      	strh	r3, [r7, #32]
 8014c72:	e0ae      	b.n	8014dd2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014c74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c78:	49a6      	ldr	r1, [pc, #664]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	005b      	lsls	r3, r3, #1
 8014c7e:	4413      	add	r3, r2
 8014c80:	00db      	lsls	r3, r3, #3
 8014c82:	440b      	add	r3, r1
 8014c84:	3314      	adds	r3, #20
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014c8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014c8e:	2b0a      	cmp	r3, #10
 8014c90:	d105      	bne.n	8014c9e <etharp_find_entry+0x5e>
 8014c92:	7dfb      	ldrb	r3, [r7, #23]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d102      	bne.n	8014c9e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014c98:	8c3b      	ldrh	r3, [r7, #32]
 8014c9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014c9c:	e095      	b.n	8014dca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014c9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	f000 8092 	beq.w	8014dca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014ca6:	7dfb      	ldrb	r3, [r7, #23]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d009      	beq.n	8014cc0 <etharp_find_entry+0x80>
 8014cac:	7dfb      	ldrb	r3, [r7, #23]
 8014cae:	2b01      	cmp	r3, #1
 8014cb0:	d806      	bhi.n	8014cc0 <etharp_find_entry+0x80>
 8014cb2:	4b99      	ldr	r3, [pc, #612]	@ (8014f18 <etharp_find_entry+0x2d8>)
 8014cb4:	f240 1223 	movw	r2, #291	@ 0x123
 8014cb8:	4998      	ldr	r1, [pc, #608]	@ (8014f1c <etharp_find_entry+0x2dc>)
 8014cba:	4899      	ldr	r0, [pc, #612]	@ (8014f20 <etharp_find_entry+0x2e0>)
 8014cbc:	f002 fc62 	bl	8017584 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d020      	beq.n	8014d08 <etharp_find_entry+0xc8>
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	6819      	ldr	r1, [r3, #0]
 8014cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cce:	4891      	ldr	r0, [pc, #580]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	005b      	lsls	r3, r3, #1
 8014cd4:	4413      	add	r3, r2
 8014cd6:	00db      	lsls	r3, r3, #3
 8014cd8:	4403      	add	r3, r0
 8014cda:	3304      	adds	r3, #4
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	4299      	cmp	r1, r3
 8014ce0:	d112      	bne.n	8014d08 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00c      	beq.n	8014d02 <etharp_find_entry+0xc2>
 8014ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cec:	4989      	ldr	r1, [pc, #548]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014cee:	4613      	mov	r3, r2
 8014cf0:	005b      	lsls	r3, r3, #1
 8014cf2:	4413      	add	r3, r2
 8014cf4:	00db      	lsls	r3, r3, #3
 8014cf6:	440b      	add	r3, r1
 8014cf8:	3308      	adds	r3, #8
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	429a      	cmp	r2, r3
 8014d00:	d102      	bne.n	8014d08 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014d02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d06:	e100      	b.n	8014f0a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014d08:	7dfb      	ldrb	r3, [r7, #23]
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d140      	bne.n	8014d90 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d12:	4980      	ldr	r1, [pc, #512]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d14:	4613      	mov	r3, r2
 8014d16:	005b      	lsls	r3, r3, #1
 8014d18:	4413      	add	r3, r2
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	440b      	add	r3, r1
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d01a      	beq.n	8014d5a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014d24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d28:	497a      	ldr	r1, [pc, #488]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	005b      	lsls	r3, r3, #1
 8014d2e:	4413      	add	r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	3312      	adds	r3, #18
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	8bba      	ldrh	r2, [r7, #28]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d845      	bhi.n	8014dca <etharp_find_entry+0x18a>
            old_queue = i;
 8014d3e:	8c3b      	ldrh	r3, [r7, #32]
 8014d40:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014d42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d46:	4973      	ldr	r1, [pc, #460]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d48:	4613      	mov	r3, r2
 8014d4a:	005b      	lsls	r3, r3, #1
 8014d4c:	4413      	add	r3, r2
 8014d4e:	00db      	lsls	r3, r3, #3
 8014d50:	440b      	add	r3, r1
 8014d52:	3312      	adds	r3, #18
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	83bb      	strh	r3, [r7, #28]
 8014d58:	e037      	b.n	8014dca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d5e:	496d      	ldr	r1, [pc, #436]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d60:	4613      	mov	r3, r2
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	4413      	add	r3, r2
 8014d66:	00db      	lsls	r3, r3, #3
 8014d68:	440b      	add	r3, r1
 8014d6a:	3312      	adds	r3, #18
 8014d6c:	881b      	ldrh	r3, [r3, #0]
 8014d6e:	8b7a      	ldrh	r2, [r7, #26]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d82a      	bhi.n	8014dca <etharp_find_entry+0x18a>
            old_pending = i;
 8014d74:	8c3b      	ldrh	r3, [r7, #32]
 8014d76:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014d78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d7c:	4965      	ldr	r1, [pc, #404]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	440b      	add	r3, r1
 8014d88:	3312      	adds	r3, #18
 8014d8a:	881b      	ldrh	r3, [r3, #0]
 8014d8c:	837b      	strh	r3, [r7, #26]
 8014d8e:	e01c      	b.n	8014dca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014d90:	7dfb      	ldrb	r3, [r7, #23]
 8014d92:	2b01      	cmp	r3, #1
 8014d94:	d919      	bls.n	8014dca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014d96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d9a:	495e      	ldr	r1, [pc, #376]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	005b      	lsls	r3, r3, #1
 8014da0:	4413      	add	r3, r2
 8014da2:	00db      	lsls	r3, r3, #3
 8014da4:	440b      	add	r3, r1
 8014da6:	3312      	adds	r3, #18
 8014da8:	881b      	ldrh	r3, [r3, #0]
 8014daa:	8b3a      	ldrh	r2, [r7, #24]
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d80c      	bhi.n	8014dca <etharp_find_entry+0x18a>
            old_stable = i;
 8014db0:	8c3b      	ldrh	r3, [r7, #32]
 8014db2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014db4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db8:	4956      	ldr	r1, [pc, #344]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014dba:	4613      	mov	r3, r2
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	440b      	add	r3, r1
 8014dc4:	3312      	adds	r3, #18
 8014dc6:	881b      	ldrh	r3, [r3, #0]
 8014dc8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014dca:	8c3b      	ldrh	r3, [r7, #32]
 8014dcc:	3301      	adds	r3, #1
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	843b      	strh	r3, [r7, #32]
 8014dd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014dd6:	2b09      	cmp	r3, #9
 8014dd8:	f77f af4c 	ble.w	8014c74 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014ddc:	7afb      	ldrb	r3, [r7, #11]
 8014dde:	f003 0302 	and.w	r3, r3, #2
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d108      	bne.n	8014df8 <etharp_find_entry+0x1b8>
 8014de6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014dea:	2b0a      	cmp	r3, #10
 8014dec:	d107      	bne.n	8014dfe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014dee:	7afb      	ldrb	r3, [r7, #11]
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d102      	bne.n	8014dfe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014df8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dfc:	e085      	b.n	8014f0a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014dfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014e02:	2b09      	cmp	r3, #9
 8014e04:	dc02      	bgt.n	8014e0c <etharp_find_entry+0x1cc>
    i = empty;
 8014e06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014e08:	843b      	strh	r3, [r7, #32]
 8014e0a:	e039      	b.n	8014e80 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014e10:	2b09      	cmp	r3, #9
 8014e12:	dc14      	bgt.n	8014e3e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014e14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014e16:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014e18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e1c:	493d      	ldr	r1, [pc, #244]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014e1e:	4613      	mov	r3, r2
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	4413      	add	r3, r2
 8014e24:	00db      	lsls	r3, r3, #3
 8014e26:	440b      	add	r3, r1
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d018      	beq.n	8014e60 <etharp_find_entry+0x220>
 8014e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8014f18 <etharp_find_entry+0x2d8>)
 8014e30:	f240 126d 	movw	r2, #365	@ 0x16d
 8014e34:	493b      	ldr	r1, [pc, #236]	@ (8014f24 <etharp_find_entry+0x2e4>)
 8014e36:	483a      	ldr	r0, [pc, #232]	@ (8014f20 <etharp_find_entry+0x2e0>)
 8014e38:	f002 fba4 	bl	8017584 <iprintf>
 8014e3c:	e010      	b.n	8014e60 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014e3e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014e42:	2b09      	cmp	r3, #9
 8014e44:	dc02      	bgt.n	8014e4c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014e46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014e48:	843b      	strh	r3, [r7, #32]
 8014e4a:	e009      	b.n	8014e60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014e4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014e50:	2b09      	cmp	r3, #9
 8014e52:	dc02      	bgt.n	8014e5a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e54:	8bfb      	ldrh	r3, [r7, #30]
 8014e56:	843b      	strh	r3, [r7, #32]
 8014e58:	e002      	b.n	8014e60 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e5e:	e054      	b.n	8014f0a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e64:	2b09      	cmp	r3, #9
 8014e66:	dd06      	ble.n	8014e76 <etharp_find_entry+0x236>
 8014e68:	4b2b      	ldr	r3, [pc, #172]	@ (8014f18 <etharp_find_entry+0x2d8>)
 8014e6a:	f240 127f 	movw	r2, #383	@ 0x17f
 8014e6e:	492e      	ldr	r1, [pc, #184]	@ (8014f28 <etharp_find_entry+0x2e8>)
 8014e70:	482b      	ldr	r0, [pc, #172]	@ (8014f20 <etharp_find_entry+0x2e0>)
 8014e72:	f002 fb87 	bl	8017584 <iprintf>
    etharp_free_entry(i);
 8014e76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7ff fe06 	bl	8014a8c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e84:	2b09      	cmp	r3, #9
 8014e86:	dd06      	ble.n	8014e96 <etharp_find_entry+0x256>
 8014e88:	4b23      	ldr	r3, [pc, #140]	@ (8014f18 <etharp_find_entry+0x2d8>)
 8014e8a:	f240 1283 	movw	r2, #387	@ 0x183
 8014e8e:	4926      	ldr	r1, [pc, #152]	@ (8014f28 <etharp_find_entry+0x2e8>)
 8014e90:	4823      	ldr	r0, [pc, #140]	@ (8014f20 <etharp_find_entry+0x2e0>)
 8014e92:	f002 fb77 	bl	8017584 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014e96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e9a:	491e      	ldr	r1, [pc, #120]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014e9c:	4613      	mov	r3, r2
 8014e9e:	005b      	lsls	r3, r3, #1
 8014ea0:	4413      	add	r3, r2
 8014ea2:	00db      	lsls	r3, r3, #3
 8014ea4:	440b      	add	r3, r1
 8014ea6:	3314      	adds	r3, #20
 8014ea8:	781b      	ldrb	r3, [r3, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d006      	beq.n	8014ebc <etharp_find_entry+0x27c>
 8014eae:	4b1a      	ldr	r3, [pc, #104]	@ (8014f18 <etharp_find_entry+0x2d8>)
 8014eb0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014eb4:	491d      	ldr	r1, [pc, #116]	@ (8014f2c <etharp_find_entry+0x2ec>)
 8014eb6:	481a      	ldr	r0, [pc, #104]	@ (8014f20 <etharp_find_entry+0x2e0>)
 8014eb8:	f002 fb64 	bl	8017584 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00b      	beq.n	8014eda <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014ec2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	6819      	ldr	r1, [r3, #0]
 8014eca:	4812      	ldr	r0, [pc, #72]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014ecc:	4613      	mov	r3, r2
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	00db      	lsls	r3, r3, #3
 8014ed4:	4403      	add	r3, r0
 8014ed6:	3304      	adds	r3, #4
 8014ed8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ede:	490d      	ldr	r1, [pc, #52]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014ee0:	4613      	mov	r3, r2
 8014ee2:	005b      	lsls	r3, r3, #1
 8014ee4:	4413      	add	r3, r2
 8014ee6:	00db      	lsls	r3, r3, #3
 8014ee8:	440b      	add	r3, r1
 8014eea:	3312      	adds	r3, #18
 8014eec:	2200      	movs	r2, #0
 8014eee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ef0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ef4:	4907      	ldr	r1, [pc, #28]	@ (8014f14 <etharp_find_entry+0x2d4>)
 8014ef6:	4613      	mov	r3, r2
 8014ef8:	005b      	lsls	r3, r3, #1
 8014efa:	4413      	add	r3, r2
 8014efc:	00db      	lsls	r3, r3, #3
 8014efe:	440b      	add	r3, r1
 8014f00:	3308      	adds	r3, #8
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014f06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	3728      	adds	r7, #40	@ 0x28
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	2000dfb4 	.word	0x2000dfb4
 8014f18:	0801b3a4 	.word	0x0801b3a4
 8014f1c:	0801b3dc 	.word	0x0801b3dc
 8014f20:	0801b41c 	.word	0x0801b41c
 8014f24:	0801b444 	.word	0x0801b444
 8014f28:	0801b45c 	.word	0x0801b45c
 8014f2c:	0801b470 	.word	0x0801b470

08014f30 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b088      	sub	sp, #32
 8014f34:	af02      	add	r7, sp, #8
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
 8014f3c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014f44:	2b06      	cmp	r3, #6
 8014f46:	d006      	beq.n	8014f56 <etharp_update_arp_entry+0x26>
 8014f48:	4b48      	ldr	r3, [pc, #288]	@ (801506c <etharp_update_arp_entry+0x13c>)
 8014f4a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014f4e:	4948      	ldr	r1, [pc, #288]	@ (8015070 <etharp_update_arp_entry+0x140>)
 8014f50:	4848      	ldr	r0, [pc, #288]	@ (8015074 <etharp_update_arp_entry+0x144>)
 8014f52:	f002 fb17 	bl	8017584 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d012      	beq.n	8014f82 <etharp_update_arp_entry+0x52>
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d00e      	beq.n	8014f82 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	68f9      	ldr	r1, [r7, #12]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f001 f8fe 	bl	801616c <ip4_addr_isbroadcast_u32>
 8014f70:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d105      	bne.n	8014f82 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f7e:	2be0      	cmp	r3, #224	@ 0xe0
 8014f80:	d102      	bne.n	8014f88 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014f82:	f06f 030f 	mvn.w	r3, #15
 8014f86:	e06c      	b.n	8015062 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014f88:	78fb      	ldrb	r3, [r7, #3]
 8014f8a:	68fa      	ldr	r2, [r7, #12]
 8014f8c:	4619      	mov	r1, r3
 8014f8e:	68b8      	ldr	r0, [r7, #8]
 8014f90:	f7ff fe56 	bl	8014c40 <etharp_find_entry>
 8014f94:	4603      	mov	r3, r0
 8014f96:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014f98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	da02      	bge.n	8014fa6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014fa0:	8afb      	ldrh	r3, [r7, #22]
 8014fa2:	b25b      	sxtb	r3, r3
 8014fa4:	e05d      	b.n	8015062 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014fa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014faa:	4933      	ldr	r1, [pc, #204]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8014fac:	4613      	mov	r3, r2
 8014fae:	005b      	lsls	r3, r3, #1
 8014fb0:	4413      	add	r3, r2
 8014fb2:	00db      	lsls	r3, r3, #3
 8014fb4:	440b      	add	r3, r1
 8014fb6:	3314      	adds	r3, #20
 8014fb8:	2202      	movs	r2, #2
 8014fba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014fbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fc0:	492d      	ldr	r1, [pc, #180]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8014fc2:	4613      	mov	r3, r2
 8014fc4:	005b      	lsls	r3, r3, #1
 8014fc6:	4413      	add	r3, r2
 8014fc8:	00db      	lsls	r3, r3, #3
 8014fca:	440b      	add	r3, r1
 8014fcc:	3308      	adds	r3, #8
 8014fce:	68fa      	ldr	r2, [r7, #12]
 8014fd0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014fd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014fd6:	4613      	mov	r3, r2
 8014fd8:	005b      	lsls	r3, r3, #1
 8014fda:	4413      	add	r3, r2
 8014fdc:	00db      	lsls	r3, r3, #3
 8014fde:	3308      	adds	r3, #8
 8014fe0:	4a25      	ldr	r2, [pc, #148]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8014fe2:	4413      	add	r3, r2
 8014fe4:	3304      	adds	r3, #4
 8014fe6:	2206      	movs	r2, #6
 8014fe8:	6879      	ldr	r1, [r7, #4]
 8014fea:	4618      	mov	r0, r3
 8014fec:	f002 fcc9 	bl	8017982 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014ff0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ff4:	4920      	ldr	r1, [pc, #128]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	005b      	lsls	r3, r3, #1
 8014ffa:	4413      	add	r3, r2
 8014ffc:	00db      	lsls	r3, r3, #3
 8014ffe:	440b      	add	r3, r1
 8015000:	3312      	adds	r3, #18
 8015002:	2200      	movs	r2, #0
 8015004:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015006:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801500a:	491b      	ldr	r1, [pc, #108]	@ (8015078 <etharp_update_arp_entry+0x148>)
 801500c:	4613      	mov	r3, r2
 801500e:	005b      	lsls	r3, r3, #1
 8015010:	4413      	add	r3, r2
 8015012:	00db      	lsls	r3, r3, #3
 8015014:	440b      	add	r3, r1
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d021      	beq.n	8015060 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801501c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015020:	4915      	ldr	r1, [pc, #84]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8015022:	4613      	mov	r3, r2
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	4413      	add	r3, r2
 8015028:	00db      	lsls	r3, r3, #3
 801502a:	440b      	add	r3, r1
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015030:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015034:	4910      	ldr	r1, [pc, #64]	@ (8015078 <etharp_update_arp_entry+0x148>)
 8015036:	4613      	mov	r3, r2
 8015038:	005b      	lsls	r3, r3, #1
 801503a:	4413      	add	r3, r2
 801503c:	00db      	lsls	r3, r3, #3
 801503e:	440b      	add	r3, r1
 8015040:	2200      	movs	r2, #0
 8015042:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801504a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801504e:	9300      	str	r3, [sp, #0]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6939      	ldr	r1, [r7, #16]
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f001 ff97 	bl	8016f88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801505a:	6938      	ldr	r0, [r7, #16]
 801505c:	f7f8 fd80 	bl	800db60 <pbuf_free>
  }
  return ERR_OK;
 8015060:	2300      	movs	r3, #0
}
 8015062:	4618      	mov	r0, r3
 8015064:	3718      	adds	r7, #24
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	0801b3a4 	.word	0x0801b3a4
 8015070:	0801b49c 	.word	0x0801b49c
 8015074:	0801b41c 	.word	0x0801b41c
 8015078:	2000dfb4 	.word	0x2000dfb4

0801507c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b084      	sub	sp, #16
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015084:	2300      	movs	r3, #0
 8015086:	60fb      	str	r3, [r7, #12]
 8015088:	e01e      	b.n	80150c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801508a:	4913      	ldr	r1, [pc, #76]	@ (80150d8 <etharp_cleanup_netif+0x5c>)
 801508c:	68fa      	ldr	r2, [r7, #12]
 801508e:	4613      	mov	r3, r2
 8015090:	005b      	lsls	r3, r3, #1
 8015092:	4413      	add	r3, r2
 8015094:	00db      	lsls	r3, r3, #3
 8015096:	440b      	add	r3, r1
 8015098:	3314      	adds	r3, #20
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801509e:	7afb      	ldrb	r3, [r7, #11]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d00e      	beq.n	80150c2 <etharp_cleanup_netif+0x46>
 80150a4:	490c      	ldr	r1, [pc, #48]	@ (80150d8 <etharp_cleanup_netif+0x5c>)
 80150a6:	68fa      	ldr	r2, [r7, #12]
 80150a8:	4613      	mov	r3, r2
 80150aa:	005b      	lsls	r3, r3, #1
 80150ac:	4413      	add	r3, r2
 80150ae:	00db      	lsls	r3, r3, #3
 80150b0:	440b      	add	r3, r1
 80150b2:	3308      	adds	r3, #8
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d102      	bne.n	80150c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80150bc:	68f8      	ldr	r0, [r7, #12]
 80150be:	f7ff fce5 	bl	8014a8c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	3301      	adds	r3, #1
 80150c6:	60fb      	str	r3, [r7, #12]
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2b09      	cmp	r3, #9
 80150cc:	dddd      	ble.n	801508a <etharp_cleanup_netif+0xe>
    }
  }
}
 80150ce:	bf00      	nop
 80150d0:	bf00      	nop
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	2000dfb4 	.word	0x2000dfb4

080150dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80150dc:	b5b0      	push	{r4, r5, r7, lr}
 80150de:	b08a      	sub	sp, #40	@ 0x28
 80150e0:	af04      	add	r7, sp, #16
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d107      	bne.n	80150fc <etharp_input+0x20>
 80150ec:	4b3d      	ldr	r3, [pc, #244]	@ (80151e4 <etharp_input+0x108>)
 80150ee:	f240 228a 	movw	r2, #650	@ 0x28a
 80150f2:	493d      	ldr	r1, [pc, #244]	@ (80151e8 <etharp_input+0x10c>)
 80150f4:	483d      	ldr	r0, [pc, #244]	@ (80151ec <etharp_input+0x110>)
 80150f6:	f002 fa45 	bl	8017584 <iprintf>
 80150fa:	e06f      	b.n	80151dc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	b29b      	uxth	r3, r3
 8015108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801510c:	d10c      	bne.n	8015128 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015112:	2b06      	cmp	r3, #6
 8015114:	d108      	bne.n	8015128 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801511a:	2b04      	cmp	r3, #4
 801511c:	d104      	bne.n	8015128 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	885b      	ldrh	r3, [r3, #2]
 8015122:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015124:	2b08      	cmp	r3, #8
 8015126:	d003      	beq.n	8015130 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7f8 fd19 	bl	800db60 <pbuf_free>
    return;
 801512e:	e055      	b.n	80151dc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	330e      	adds	r3, #14
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	3318      	adds	r3, #24
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	3304      	adds	r3, #4
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d102      	bne.n	8015150 <etharp_input+0x74>
    for_us = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	75fb      	strb	r3, [r7, #23]
 801514e:	e009      	b.n	8015164 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015150:	68ba      	ldr	r2, [r7, #8]
 8015152:	683b      	ldr	r3, [r7, #0]
 8015154:	3304      	adds	r3, #4
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	429a      	cmp	r2, r3
 801515a:	bf0c      	ite	eq
 801515c:	2301      	moveq	r3, #1
 801515e:	2300      	movne	r3, #0
 8015160:	b2db      	uxtb	r3, r3
 8015162:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	f103 0208 	add.w	r2, r3, #8
 801516a:	7dfb      	ldrb	r3, [r7, #23]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <etharp_input+0x98>
 8015170:	2301      	movs	r3, #1
 8015172:	e000      	b.n	8015176 <etharp_input+0x9a>
 8015174:	2302      	movs	r3, #2
 8015176:	f107 010c 	add.w	r1, r7, #12
 801517a:	6838      	ldr	r0, [r7, #0]
 801517c:	f7ff fed8 	bl	8014f30 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	88db      	ldrh	r3, [r3, #6]
 8015184:	b29b      	uxth	r3, r3
 8015186:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801518a:	d003      	beq.n	8015194 <etharp_input+0xb8>
 801518c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015190:	d01e      	beq.n	80151d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015192:	e020      	b.n	80151d6 <etharp_input+0xfa>
      if (for_us) {
 8015194:	7dfb      	ldrb	r3, [r7, #23]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d01c      	beq.n	80151d4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80151b0:	693a      	ldr	r2, [r7, #16]
 80151b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80151b4:	2102      	movs	r1, #2
 80151b6:	9103      	str	r1, [sp, #12]
 80151b8:	f107 010c 	add.w	r1, r7, #12
 80151bc:	9102      	str	r1, [sp, #8]
 80151be:	9201      	str	r2, [sp, #4]
 80151c0:	9300      	str	r3, [sp, #0]
 80151c2:	462b      	mov	r3, r5
 80151c4:	4622      	mov	r2, r4
 80151c6:	4601      	mov	r1, r0
 80151c8:	6838      	ldr	r0, [r7, #0]
 80151ca:	f000 faeb 	bl	80157a4 <etharp_raw>
      break;
 80151ce:	e001      	b.n	80151d4 <etharp_input+0xf8>
      break;
 80151d0:	bf00      	nop
 80151d2:	e000      	b.n	80151d6 <etharp_input+0xfa>
      break;
 80151d4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f7f8 fcc2 	bl	800db60 <pbuf_free>
}
 80151dc:	3718      	adds	r7, #24
 80151de:	46bd      	mov	sp, r7
 80151e0:	bdb0      	pop	{r4, r5, r7, pc}
 80151e2:	bf00      	nop
 80151e4:	0801b3a4 	.word	0x0801b3a4
 80151e8:	0801b4f4 	.word	0x0801b4f4
 80151ec:	0801b41c 	.word	0x0801b41c

080151f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b086      	sub	sp, #24
 80151f4:	af02      	add	r7, sp, #8
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	4613      	mov	r3, r2
 80151fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80151fe:	79fa      	ldrb	r2, [r7, #7]
 8015200:	4944      	ldr	r1, [pc, #272]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	440b      	add	r3, r1
 801520c:	3314      	adds	r3, #20
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	2b01      	cmp	r3, #1
 8015212:	d806      	bhi.n	8015222 <etharp_output_to_arp_index+0x32>
 8015214:	4b40      	ldr	r3, [pc, #256]	@ (8015318 <etharp_output_to_arp_index+0x128>)
 8015216:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801521a:	4940      	ldr	r1, [pc, #256]	@ (801531c <etharp_output_to_arp_index+0x12c>)
 801521c:	4840      	ldr	r0, [pc, #256]	@ (8015320 <etharp_output_to_arp_index+0x130>)
 801521e:	f002 f9b1 	bl	8017584 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015222:	79fa      	ldrb	r2, [r7, #7]
 8015224:	493b      	ldr	r1, [pc, #236]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 8015226:	4613      	mov	r3, r2
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	4413      	add	r3, r2
 801522c:	00db      	lsls	r3, r3, #3
 801522e:	440b      	add	r3, r1
 8015230:	3314      	adds	r3, #20
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	2b02      	cmp	r3, #2
 8015236:	d153      	bne.n	80152e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015238:	79fa      	ldrb	r2, [r7, #7]
 801523a:	4936      	ldr	r1, [pc, #216]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 801523c:	4613      	mov	r3, r2
 801523e:	005b      	lsls	r3, r3, #1
 8015240:	4413      	add	r3, r2
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	440b      	add	r3, r1
 8015246:	3312      	adds	r3, #18
 8015248:	881b      	ldrh	r3, [r3, #0]
 801524a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801524e:	d919      	bls.n	8015284 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015250:	79fa      	ldrb	r2, [r7, #7]
 8015252:	4613      	mov	r3, r2
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	4413      	add	r3, r2
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	4a2e      	ldr	r2, [pc, #184]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 801525c:	4413      	add	r3, r2
 801525e:	3304      	adds	r3, #4
 8015260:	4619      	mov	r1, r3
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f000 fb4c 	bl	8015900 <etharp_request>
 8015268:	4603      	mov	r3, r0
 801526a:	2b00      	cmp	r3, #0
 801526c:	d138      	bne.n	80152e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801526e:	79fa      	ldrb	r2, [r7, #7]
 8015270:	4928      	ldr	r1, [pc, #160]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 8015272:	4613      	mov	r3, r2
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	00db      	lsls	r3, r3, #3
 801527a:	440b      	add	r3, r1
 801527c:	3314      	adds	r3, #20
 801527e:	2203      	movs	r2, #3
 8015280:	701a      	strb	r2, [r3, #0]
 8015282:	e02d      	b.n	80152e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015284:	79fa      	ldrb	r2, [r7, #7]
 8015286:	4923      	ldr	r1, [pc, #140]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 8015288:	4613      	mov	r3, r2
 801528a:	005b      	lsls	r3, r3, #1
 801528c:	4413      	add	r3, r2
 801528e:	00db      	lsls	r3, r3, #3
 8015290:	440b      	add	r3, r1
 8015292:	3312      	adds	r3, #18
 8015294:	881b      	ldrh	r3, [r3, #0]
 8015296:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801529a:	d321      	bcc.n	80152e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801529c:	79fa      	ldrb	r2, [r7, #7]
 801529e:	4613      	mov	r3, r2
 80152a0:	005b      	lsls	r3, r3, #1
 80152a2:	4413      	add	r3, r2
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	4a1b      	ldr	r2, [pc, #108]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 80152a8:	4413      	add	r3, r2
 80152aa:	1d19      	adds	r1, r3, #4
 80152ac:	79fa      	ldrb	r2, [r7, #7]
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	3308      	adds	r3, #8
 80152b8:	4a16      	ldr	r2, [pc, #88]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 80152ba:	4413      	add	r3, r2
 80152bc:	3304      	adds	r3, #4
 80152be:	461a      	mov	r2, r3
 80152c0:	68f8      	ldr	r0, [r7, #12]
 80152c2:	f000 fafb 	bl	80158bc <etharp_request_dst>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d109      	bne.n	80152e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152cc:	79fa      	ldrb	r2, [r7, #7]
 80152ce:	4911      	ldr	r1, [pc, #68]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 80152d0:	4613      	mov	r3, r2
 80152d2:	005b      	lsls	r3, r3, #1
 80152d4:	4413      	add	r3, r2
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	440b      	add	r3, r1
 80152da:	3314      	adds	r3, #20
 80152dc:	2203      	movs	r2, #3
 80152de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80152e6:	79fa      	ldrb	r2, [r7, #7]
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	3308      	adds	r3, #8
 80152f2:	4a08      	ldr	r2, [pc, #32]	@ (8015314 <etharp_output_to_arp_index+0x124>)
 80152f4:	4413      	add	r3, r2
 80152f6:	3304      	adds	r3, #4
 80152f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80152fc:	9200      	str	r2, [sp, #0]
 80152fe:	460a      	mov	r2, r1
 8015300:	68b9      	ldr	r1, [r7, #8]
 8015302:	68f8      	ldr	r0, [r7, #12]
 8015304:	f001 fe40 	bl	8016f88 <ethernet_output>
 8015308:	4603      	mov	r3, r0
}
 801530a:	4618      	mov	r0, r3
 801530c:	3710      	adds	r7, #16
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	2000dfb4 	.word	0x2000dfb4
 8015318:	0801b3a4 	.word	0x0801b3a4
 801531c:	0801b514 	.word	0x0801b514
 8015320:	0801b41c 	.word	0x0801b41c

08015324 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b08a      	sub	sp, #40	@ 0x28
 8015328:	af02      	add	r7, sp, #8
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d106      	bne.n	8015348 <etharp_output+0x24>
 801533a:	4b73      	ldr	r3, [pc, #460]	@ (8015508 <etharp_output+0x1e4>)
 801533c:	f240 321e 	movw	r2, #798	@ 0x31e
 8015340:	4972      	ldr	r1, [pc, #456]	@ (801550c <etharp_output+0x1e8>)
 8015342:	4873      	ldr	r0, [pc, #460]	@ (8015510 <etharp_output+0x1ec>)
 8015344:	f002 f91e 	bl	8017584 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d106      	bne.n	801535c <etharp_output+0x38>
 801534e:	4b6e      	ldr	r3, [pc, #440]	@ (8015508 <etharp_output+0x1e4>)
 8015350:	f240 321f 	movw	r2, #799	@ 0x31f
 8015354:	496f      	ldr	r1, [pc, #444]	@ (8015514 <etharp_output+0x1f0>)
 8015356:	486e      	ldr	r0, [pc, #440]	@ (8015510 <etharp_output+0x1ec>)
 8015358:	f002 f914 	bl	8017584 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d106      	bne.n	8015370 <etharp_output+0x4c>
 8015362:	4b69      	ldr	r3, [pc, #420]	@ (8015508 <etharp_output+0x1e4>)
 8015364:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015368:	496b      	ldr	r1, [pc, #428]	@ (8015518 <etharp_output+0x1f4>)
 801536a:	4869      	ldr	r0, [pc, #420]	@ (8015510 <etharp_output+0x1ec>)
 801536c:	f002 f90a 	bl	8017584 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	68f9      	ldr	r1, [r7, #12]
 8015376:	4618      	mov	r0, r3
 8015378:	f000 fef8 	bl	801616c <ip4_addr_isbroadcast_u32>
 801537c:	4603      	mov	r3, r0
 801537e:	2b00      	cmp	r3, #0
 8015380:	d002      	beq.n	8015388 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015382:	4b66      	ldr	r3, [pc, #408]	@ (801551c <etharp_output+0x1f8>)
 8015384:	61fb      	str	r3, [r7, #28]
 8015386:	e0af      	b.n	80154e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015390:	2be0      	cmp	r3, #224	@ 0xe0
 8015392:	d118      	bne.n	80153c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015394:	2301      	movs	r3, #1
 8015396:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015398:	2300      	movs	r3, #0
 801539a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801539c:	235e      	movs	r3, #94	@ 0x5e
 801539e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	3301      	adds	r3, #1
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80153aa:	b2db      	uxtb	r3, r3
 80153ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	3302      	adds	r3, #2
 80153b2:	781b      	ldrb	r3, [r3, #0]
 80153b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	3303      	adds	r3, #3
 80153ba:	781b      	ldrb	r3, [r3, #0]
 80153bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80153be:	f107 0310 	add.w	r3, r7, #16
 80153c2:	61fb      	str	r3, [r7, #28]
 80153c4:	e090      	b.n	80154e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	3304      	adds	r3, #4
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	405a      	eors	r2, r3
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	3308      	adds	r3, #8
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4013      	ands	r3, r2
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d012      	beq.n	8015404 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153e4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80153e8:	4293      	cmp	r3, r2
 80153ea:	d00b      	beq.n	8015404 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	330c      	adds	r3, #12
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d003      	beq.n	80153fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	330c      	adds	r3, #12
 80153fa:	61bb      	str	r3, [r7, #24]
 80153fc:	e002      	b.n	8015404 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80153fe:	f06f 0303 	mvn.w	r3, #3
 8015402:	e07d      	b.n	8015500 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015404:	4b46      	ldr	r3, [pc, #280]	@ (8015520 <etharp_output+0x1fc>)
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	4619      	mov	r1, r3
 801540a:	4a46      	ldr	r2, [pc, #280]	@ (8015524 <etharp_output+0x200>)
 801540c:	460b      	mov	r3, r1
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	440b      	add	r3, r1
 8015412:	00db      	lsls	r3, r3, #3
 8015414:	4413      	add	r3, r2
 8015416:	3314      	adds	r3, #20
 8015418:	781b      	ldrb	r3, [r3, #0]
 801541a:	2b01      	cmp	r3, #1
 801541c:	d925      	bls.n	801546a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801541e:	4b40      	ldr	r3, [pc, #256]	@ (8015520 <etharp_output+0x1fc>)
 8015420:	781b      	ldrb	r3, [r3, #0]
 8015422:	4619      	mov	r1, r3
 8015424:	4a3f      	ldr	r2, [pc, #252]	@ (8015524 <etharp_output+0x200>)
 8015426:	460b      	mov	r3, r1
 8015428:	005b      	lsls	r3, r3, #1
 801542a:	440b      	add	r3, r1
 801542c:	00db      	lsls	r3, r3, #3
 801542e:	4413      	add	r3, r2
 8015430:	3308      	adds	r3, #8
 8015432:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015434:	68fa      	ldr	r2, [r7, #12]
 8015436:	429a      	cmp	r2, r3
 8015438:	d117      	bne.n	801546a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801543a:	69bb      	ldr	r3, [r7, #24]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	4b38      	ldr	r3, [pc, #224]	@ (8015520 <etharp_output+0x1fc>)
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	4618      	mov	r0, r3
 8015444:	4937      	ldr	r1, [pc, #220]	@ (8015524 <etharp_output+0x200>)
 8015446:	4603      	mov	r3, r0
 8015448:	005b      	lsls	r3, r3, #1
 801544a:	4403      	add	r3, r0
 801544c:	00db      	lsls	r3, r3, #3
 801544e:	440b      	add	r3, r1
 8015450:	3304      	adds	r3, #4
 8015452:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015454:	429a      	cmp	r2, r3
 8015456:	d108      	bne.n	801546a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015458:	4b31      	ldr	r3, [pc, #196]	@ (8015520 <etharp_output+0x1fc>)
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	461a      	mov	r2, r3
 801545e:	68b9      	ldr	r1, [r7, #8]
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f7ff fec5 	bl	80151f0 <etharp_output_to_arp_index>
 8015466:	4603      	mov	r3, r0
 8015468:	e04a      	b.n	8015500 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801546a:	2300      	movs	r3, #0
 801546c:	75fb      	strb	r3, [r7, #23]
 801546e:	e031      	b.n	80154d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015470:	7dfa      	ldrb	r2, [r7, #23]
 8015472:	492c      	ldr	r1, [pc, #176]	@ (8015524 <etharp_output+0x200>)
 8015474:	4613      	mov	r3, r2
 8015476:	005b      	lsls	r3, r3, #1
 8015478:	4413      	add	r3, r2
 801547a:	00db      	lsls	r3, r3, #3
 801547c:	440b      	add	r3, r1
 801547e:	3314      	adds	r3, #20
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d923      	bls.n	80154ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015486:	7dfa      	ldrb	r2, [r7, #23]
 8015488:	4926      	ldr	r1, [pc, #152]	@ (8015524 <etharp_output+0x200>)
 801548a:	4613      	mov	r3, r2
 801548c:	005b      	lsls	r3, r3, #1
 801548e:	4413      	add	r3, r2
 8015490:	00db      	lsls	r3, r3, #3
 8015492:	440b      	add	r3, r1
 8015494:	3308      	adds	r3, #8
 8015496:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015498:	68fa      	ldr	r2, [r7, #12]
 801549a:	429a      	cmp	r2, r3
 801549c:	d117      	bne.n	80154ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	6819      	ldr	r1, [r3, #0]
 80154a2:	7dfa      	ldrb	r2, [r7, #23]
 80154a4:	481f      	ldr	r0, [pc, #124]	@ (8015524 <etharp_output+0x200>)
 80154a6:	4613      	mov	r3, r2
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	4413      	add	r3, r2
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	4403      	add	r3, r0
 80154b0:	3304      	adds	r3, #4
 80154b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80154b4:	4299      	cmp	r1, r3
 80154b6:	d10a      	bne.n	80154ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80154b8:	4a19      	ldr	r2, [pc, #100]	@ (8015520 <etharp_output+0x1fc>)
 80154ba:	7dfb      	ldrb	r3, [r7, #23]
 80154bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80154be:	7dfb      	ldrb	r3, [r7, #23]
 80154c0:	461a      	mov	r2, r3
 80154c2:	68b9      	ldr	r1, [r7, #8]
 80154c4:	68f8      	ldr	r0, [r7, #12]
 80154c6:	f7ff fe93 	bl	80151f0 <etharp_output_to_arp_index>
 80154ca:	4603      	mov	r3, r0
 80154cc:	e018      	b.n	8015500 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154ce:	7dfb      	ldrb	r3, [r7, #23]
 80154d0:	3301      	adds	r3, #1
 80154d2:	75fb      	strb	r3, [r7, #23]
 80154d4:	7dfb      	ldrb	r3, [r7, #23]
 80154d6:	2b09      	cmp	r3, #9
 80154d8:	d9ca      	bls.n	8015470 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80154da:	68ba      	ldr	r2, [r7, #8]
 80154dc:	69b9      	ldr	r1, [r7, #24]
 80154de:	68f8      	ldr	r0, [r7, #12]
 80154e0:	f000 f822 	bl	8015528 <etharp_query>
 80154e4:	4603      	mov	r3, r0
 80154e6:	e00b      	b.n	8015500 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80154ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80154f2:	9300      	str	r3, [sp, #0]
 80154f4:	69fb      	ldr	r3, [r7, #28]
 80154f6:	68b9      	ldr	r1, [r7, #8]
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f001 fd45 	bl	8016f88 <ethernet_output>
 80154fe:	4603      	mov	r3, r0
}
 8015500:	4618      	mov	r0, r3
 8015502:	3720      	adds	r7, #32
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	0801b3a4 	.word	0x0801b3a4
 801550c:	0801b4f4 	.word	0x0801b4f4
 8015510:	0801b41c 	.word	0x0801b41c
 8015514:	0801b544 	.word	0x0801b544
 8015518:	0801b4e4 	.word	0x0801b4e4
 801551c:	0801bbbc 	.word	0x0801bbbc
 8015520:	2000e0a4 	.word	0x2000e0a4
 8015524:	2000dfb4 	.word	0x2000dfb4

08015528 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015528:	b580      	push	{r7, lr}
 801552a:	b08c      	sub	sp, #48	@ 0x30
 801552c:	af02      	add	r7, sp, #8
 801552e:	60f8      	str	r0, [r7, #12]
 8015530:	60b9      	str	r1, [r7, #8]
 8015532:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	3326      	adds	r3, #38	@ 0x26
 8015538:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801553a:	23ff      	movs	r3, #255	@ 0xff
 801553c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8015540:	2300      	movs	r3, #0
 8015542:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	68f9      	ldr	r1, [r7, #12]
 801554a:	4618      	mov	r0, r3
 801554c:	f000 fe0e 	bl	801616c <ip4_addr_isbroadcast_u32>
 8015550:	4603      	mov	r3, r0
 8015552:	2b00      	cmp	r3, #0
 8015554:	d10c      	bne.n	8015570 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801555e:	2be0      	cmp	r3, #224	@ 0xe0
 8015560:	d006      	beq.n	8015570 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d003      	beq.n	8015570 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d102      	bne.n	8015576 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015570:	f06f 030f 	mvn.w	r3, #15
 8015574:	e101      	b.n	801577a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015576:	68fa      	ldr	r2, [r7, #12]
 8015578:	2101      	movs	r1, #1
 801557a:	68b8      	ldr	r0, [r7, #8]
 801557c:	f7ff fb60 	bl	8014c40 <etharp_find_entry>
 8015580:	4603      	mov	r3, r0
 8015582:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015584:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015588:	2b00      	cmp	r3, #0
 801558a:	da02      	bge.n	8015592 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801558c:	8a7b      	ldrh	r3, [r7, #18]
 801558e:	b25b      	sxtb	r3, r3
 8015590:	e0f3      	b.n	801577a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015592:	8a7b      	ldrh	r3, [r7, #18]
 8015594:	2b7e      	cmp	r3, #126	@ 0x7e
 8015596:	d906      	bls.n	80155a6 <etharp_query+0x7e>
 8015598:	4b7a      	ldr	r3, [pc, #488]	@ (8015784 <etharp_query+0x25c>)
 801559a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801559e:	497a      	ldr	r1, [pc, #488]	@ (8015788 <etharp_query+0x260>)
 80155a0:	487a      	ldr	r0, [pc, #488]	@ (801578c <etharp_query+0x264>)
 80155a2:	f001 ffef 	bl	8017584 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80155a6:	8a7b      	ldrh	r3, [r7, #18]
 80155a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80155aa:	7c7a      	ldrb	r2, [r7, #17]
 80155ac:	4978      	ldr	r1, [pc, #480]	@ (8015790 <etharp_query+0x268>)
 80155ae:	4613      	mov	r3, r2
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	4413      	add	r3, r2
 80155b4:	00db      	lsls	r3, r3, #3
 80155b6:	440b      	add	r3, r1
 80155b8:	3314      	adds	r3, #20
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d115      	bne.n	80155ec <etharp_query+0xc4>
    is_new_entry = 1;
 80155c0:	2301      	movs	r3, #1
 80155c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80155c4:	7c7a      	ldrb	r2, [r7, #17]
 80155c6:	4972      	ldr	r1, [pc, #456]	@ (8015790 <etharp_query+0x268>)
 80155c8:	4613      	mov	r3, r2
 80155ca:	005b      	lsls	r3, r3, #1
 80155cc:	4413      	add	r3, r2
 80155ce:	00db      	lsls	r3, r3, #3
 80155d0:	440b      	add	r3, r1
 80155d2:	3314      	adds	r3, #20
 80155d4:	2201      	movs	r2, #1
 80155d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80155d8:	7c7a      	ldrb	r2, [r7, #17]
 80155da:	496d      	ldr	r1, [pc, #436]	@ (8015790 <etharp_query+0x268>)
 80155dc:	4613      	mov	r3, r2
 80155de:	005b      	lsls	r3, r3, #1
 80155e0:	4413      	add	r3, r2
 80155e2:	00db      	lsls	r3, r3, #3
 80155e4:	440b      	add	r3, r1
 80155e6:	3308      	adds	r3, #8
 80155e8:	68fa      	ldr	r2, [r7, #12]
 80155ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80155ec:	7c7a      	ldrb	r2, [r7, #17]
 80155ee:	4968      	ldr	r1, [pc, #416]	@ (8015790 <etharp_query+0x268>)
 80155f0:	4613      	mov	r3, r2
 80155f2:	005b      	lsls	r3, r3, #1
 80155f4:	4413      	add	r3, r2
 80155f6:	00db      	lsls	r3, r3, #3
 80155f8:	440b      	add	r3, r1
 80155fa:	3314      	adds	r3, #20
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	2b01      	cmp	r3, #1
 8015600:	d011      	beq.n	8015626 <etharp_query+0xfe>
 8015602:	7c7a      	ldrb	r2, [r7, #17]
 8015604:	4962      	ldr	r1, [pc, #392]	@ (8015790 <etharp_query+0x268>)
 8015606:	4613      	mov	r3, r2
 8015608:	005b      	lsls	r3, r3, #1
 801560a:	4413      	add	r3, r2
 801560c:	00db      	lsls	r3, r3, #3
 801560e:	440b      	add	r3, r1
 8015610:	3314      	adds	r3, #20
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	2b01      	cmp	r3, #1
 8015616:	d806      	bhi.n	8015626 <etharp_query+0xfe>
 8015618:	4b5a      	ldr	r3, [pc, #360]	@ (8015784 <etharp_query+0x25c>)
 801561a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801561e:	495d      	ldr	r1, [pc, #372]	@ (8015794 <etharp_query+0x26c>)
 8015620:	485a      	ldr	r0, [pc, #360]	@ (801578c <etharp_query+0x264>)
 8015622:	f001 ffaf 	bl	8017584 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015626:	6a3b      	ldr	r3, [r7, #32]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d102      	bne.n	8015632 <etharp_query+0x10a>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d10c      	bne.n	801564c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015632:	68b9      	ldr	r1, [r7, #8]
 8015634:	68f8      	ldr	r0, [r7, #12]
 8015636:	f000 f963 	bl	8015900 <etharp_request>
 801563a:	4603      	mov	r3, r0
 801563c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d102      	bne.n	801564c <etharp_query+0x124>
      return result;
 8015646:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801564a:	e096      	b.n	801577a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d106      	bne.n	8015660 <etharp_query+0x138>
 8015652:	4b4c      	ldr	r3, [pc, #304]	@ (8015784 <etharp_query+0x25c>)
 8015654:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015658:	494f      	ldr	r1, [pc, #316]	@ (8015798 <etharp_query+0x270>)
 801565a:	484c      	ldr	r0, [pc, #304]	@ (801578c <etharp_query+0x264>)
 801565c:	f001 ff92 	bl	8017584 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015660:	7c7a      	ldrb	r2, [r7, #17]
 8015662:	494b      	ldr	r1, [pc, #300]	@ (8015790 <etharp_query+0x268>)
 8015664:	4613      	mov	r3, r2
 8015666:	005b      	lsls	r3, r3, #1
 8015668:	4413      	add	r3, r2
 801566a:	00db      	lsls	r3, r3, #3
 801566c:	440b      	add	r3, r1
 801566e:	3314      	adds	r3, #20
 8015670:	781b      	ldrb	r3, [r3, #0]
 8015672:	2b01      	cmp	r3, #1
 8015674:	d917      	bls.n	80156a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015676:	4a49      	ldr	r2, [pc, #292]	@ (801579c <etharp_query+0x274>)
 8015678:	7c7b      	ldrb	r3, [r7, #17]
 801567a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801567c:	7c7a      	ldrb	r2, [r7, #17]
 801567e:	4613      	mov	r3, r2
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	4413      	add	r3, r2
 8015684:	00db      	lsls	r3, r3, #3
 8015686:	3308      	adds	r3, #8
 8015688:	4a41      	ldr	r2, [pc, #260]	@ (8015790 <etharp_query+0x268>)
 801568a:	4413      	add	r3, r2
 801568c:	3304      	adds	r3, #4
 801568e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015692:	9200      	str	r2, [sp, #0]
 8015694:	697a      	ldr	r2, [r7, #20]
 8015696:	6879      	ldr	r1, [r7, #4]
 8015698:	68f8      	ldr	r0, [r7, #12]
 801569a:	f001 fc75 	bl	8016f88 <ethernet_output>
 801569e:	4603      	mov	r3, r0
 80156a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80156a4:	e067      	b.n	8015776 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80156a6:	7c7a      	ldrb	r2, [r7, #17]
 80156a8:	4939      	ldr	r1, [pc, #228]	@ (8015790 <etharp_query+0x268>)
 80156aa:	4613      	mov	r3, r2
 80156ac:	005b      	lsls	r3, r3, #1
 80156ae:	4413      	add	r3, r2
 80156b0:	00db      	lsls	r3, r3, #3
 80156b2:	440b      	add	r3, r1
 80156b4:	3314      	adds	r3, #20
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d15c      	bne.n	8015776 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80156bc:	2300      	movs	r3, #0
 80156be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156c4:	e01c      	b.n	8015700 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	895a      	ldrh	r2, [r3, #10]
 80156ca:	69fb      	ldr	r3, [r7, #28]
 80156cc:	891b      	ldrh	r3, [r3, #8]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d10a      	bne.n	80156e8 <etharp_query+0x1c0>
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d006      	beq.n	80156e8 <etharp_query+0x1c0>
 80156da:	4b2a      	ldr	r3, [pc, #168]	@ (8015784 <etharp_query+0x25c>)
 80156dc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80156e0:	492f      	ldr	r1, [pc, #188]	@ (80157a0 <etharp_query+0x278>)
 80156e2:	482a      	ldr	r0, [pc, #168]	@ (801578c <etharp_query+0x264>)
 80156e4:	f001 ff4e 	bl	8017584 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	7b1b      	ldrb	r3, [r3, #12]
 80156ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d002      	beq.n	80156fa <etharp_query+0x1d2>
        copy_needed = 1;
 80156f4:	2301      	movs	r3, #1
 80156f6:	61bb      	str	r3, [r7, #24]
        break;
 80156f8:	e005      	b.n	8015706 <etharp_query+0x1de>
      }
      p = p->next;
 80156fa:	69fb      	ldr	r3, [r7, #28]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d1df      	bne.n	80156c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015706:	69bb      	ldr	r3, [r7, #24]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d007      	beq.n	801571c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801570c:	687a      	ldr	r2, [r7, #4]
 801570e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8015712:	200e      	movs	r0, #14
 8015714:	f7f8 fc8c 	bl	800e030 <pbuf_clone>
 8015718:	61f8      	str	r0, [r7, #28]
 801571a:	e004      	b.n	8015726 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015720:	69f8      	ldr	r0, [r7, #28]
 8015722:	f7f8 fac3 	bl	800dcac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d021      	beq.n	8015770 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801572c:	7c7a      	ldrb	r2, [r7, #17]
 801572e:	4918      	ldr	r1, [pc, #96]	@ (8015790 <etharp_query+0x268>)
 8015730:	4613      	mov	r3, r2
 8015732:	005b      	lsls	r3, r3, #1
 8015734:	4413      	add	r3, r2
 8015736:	00db      	lsls	r3, r3, #3
 8015738:	440b      	add	r3, r1
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d00a      	beq.n	8015756 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015740:	7c7a      	ldrb	r2, [r7, #17]
 8015742:	4913      	ldr	r1, [pc, #76]	@ (8015790 <etharp_query+0x268>)
 8015744:	4613      	mov	r3, r2
 8015746:	005b      	lsls	r3, r3, #1
 8015748:	4413      	add	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	440b      	add	r3, r1
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	4618      	mov	r0, r3
 8015752:	f7f8 fa05 	bl	800db60 <pbuf_free>
      }
      arp_table[i].q = p;
 8015756:	7c7a      	ldrb	r2, [r7, #17]
 8015758:	490d      	ldr	r1, [pc, #52]	@ (8015790 <etharp_query+0x268>)
 801575a:	4613      	mov	r3, r2
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	4413      	add	r3, r2
 8015760:	00db      	lsls	r3, r3, #3
 8015762:	440b      	add	r3, r1
 8015764:	69fa      	ldr	r2, [r7, #28]
 8015766:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015768:	2300      	movs	r3, #0
 801576a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801576e:	e002      	b.n	8015776 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015770:	23ff      	movs	r3, #255	@ 0xff
 8015772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015776:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801577a:	4618      	mov	r0, r3
 801577c:	3728      	adds	r7, #40	@ 0x28
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	0801b3a4 	.word	0x0801b3a4
 8015788:	0801b550 	.word	0x0801b550
 801578c:	0801b41c 	.word	0x0801b41c
 8015790:	2000dfb4 	.word	0x2000dfb4
 8015794:	0801b560 	.word	0x0801b560
 8015798:	0801b544 	.word	0x0801b544
 801579c:	2000e0a4 	.word	0x2000e0a4
 80157a0:	0801b588 	.word	0x0801b588

080157a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b08a      	sub	sp, #40	@ 0x28
 80157a8:	af02      	add	r7, sp, #8
 80157aa:	60f8      	str	r0, [r7, #12]
 80157ac:	60b9      	str	r1, [r7, #8]
 80157ae:	607a      	str	r2, [r7, #4]
 80157b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80157b2:	2300      	movs	r3, #0
 80157b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d106      	bne.n	80157ca <etharp_raw+0x26>
 80157bc:	4b3a      	ldr	r3, [pc, #232]	@ (80158a8 <etharp_raw+0x104>)
 80157be:	f240 4257 	movw	r2, #1111	@ 0x457
 80157c2:	493a      	ldr	r1, [pc, #232]	@ (80158ac <etharp_raw+0x108>)
 80157c4:	483a      	ldr	r0, [pc, #232]	@ (80158b0 <etharp_raw+0x10c>)
 80157c6:	f001 fedd 	bl	8017584 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80157ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80157ce:	211c      	movs	r1, #28
 80157d0:	200e      	movs	r0, #14
 80157d2:	f7f7 fee1 	bl	800d598 <pbuf_alloc>
 80157d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80157d8:	69bb      	ldr	r3, [r7, #24]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d102      	bne.n	80157e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80157de:	f04f 33ff 	mov.w	r3, #4294967295
 80157e2:	e05d      	b.n	80158a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	895b      	ldrh	r3, [r3, #10]
 80157e8:	2b1b      	cmp	r3, #27
 80157ea:	d806      	bhi.n	80157fa <etharp_raw+0x56>
 80157ec:	4b2e      	ldr	r3, [pc, #184]	@ (80158a8 <etharp_raw+0x104>)
 80157ee:	f240 4262 	movw	r2, #1122	@ 0x462
 80157f2:	4930      	ldr	r1, [pc, #192]	@ (80158b4 <etharp_raw+0x110>)
 80157f4:	482e      	ldr	r0, [pc, #184]	@ (80158b0 <etharp_raw+0x10c>)
 80157f6:	f001 fec5 	bl	8017584 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80157fa:	69bb      	ldr	r3, [r7, #24]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015800:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8015802:	4618      	mov	r0, r3
 8015804:	f7f6 fe00 	bl	800c408 <lwip_htons>
 8015808:	4603      	mov	r3, r0
 801580a:	461a      	mov	r2, r3
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015816:	2b06      	cmp	r3, #6
 8015818:	d006      	beq.n	8015828 <etharp_raw+0x84>
 801581a:	4b23      	ldr	r3, [pc, #140]	@ (80158a8 <etharp_raw+0x104>)
 801581c:	f240 4269 	movw	r2, #1129	@ 0x469
 8015820:	4925      	ldr	r1, [pc, #148]	@ (80158b8 <etharp_raw+0x114>)
 8015822:	4823      	ldr	r0, [pc, #140]	@ (80158b0 <etharp_raw+0x10c>)
 8015824:	f001 feae 	bl	8017584 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	3308      	adds	r3, #8
 801582c:	2206      	movs	r2, #6
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	4618      	mov	r0, r3
 8015832:	f002 f8a6 	bl	8017982 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	3312      	adds	r3, #18
 801583a:	2206      	movs	r2, #6
 801583c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801583e:	4618      	mov	r0, r3
 8015840:	f002 f89f 	bl	8017982 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	330e      	adds	r3, #14
 8015848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801584a:	6812      	ldr	r2, [r2, #0]
 801584c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	3318      	adds	r3, #24
 8015852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015854:	6812      	ldr	r2, [r2, #0]
 8015856:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	2200      	movs	r2, #0
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	2200      	movs	r2, #0
 8015860:	f042 0201 	orr.w	r2, r2, #1
 8015864:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	2200      	movs	r2, #0
 801586a:	f042 0208 	orr.w	r2, r2, #8
 801586e:	709a      	strb	r2, [r3, #2]
 8015870:	2200      	movs	r2, #0
 8015872:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015874:	697b      	ldr	r3, [r7, #20]
 8015876:	2206      	movs	r2, #6
 8015878:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	2204      	movs	r2, #4
 801587e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015880:	f640 0306 	movw	r3, #2054	@ 0x806
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	69b9      	ldr	r1, [r7, #24]
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f001 fb7b 	bl	8016f88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015892:	69b8      	ldr	r0, [r7, #24]
 8015894:	f7f8 f964 	bl	800db60 <pbuf_free>
  p = NULL;
 8015898:	2300      	movs	r3, #0
 801589a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801589c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3720      	adds	r7, #32
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	0801b3a4 	.word	0x0801b3a4
 80158ac:	0801b4f4 	.word	0x0801b4f4
 80158b0:	0801b41c 	.word	0x0801b41c
 80158b4:	0801b5a4 	.word	0x0801b5a4
 80158b8:	0801b5d8 	.word	0x0801b5d8

080158bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b088      	sub	sp, #32
 80158c0:	af04      	add	r7, sp, #16
 80158c2:	60f8      	str	r0, [r7, #12]
 80158c4:	60b9      	str	r1, [r7, #8]
 80158c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158d8:	2201      	movs	r2, #1
 80158da:	9203      	str	r2, [sp, #12]
 80158dc:	68ba      	ldr	r2, [r7, #8]
 80158de:	9202      	str	r2, [sp, #8]
 80158e0:	4a06      	ldr	r2, [pc, #24]	@ (80158fc <etharp_request_dst+0x40>)
 80158e2:	9201      	str	r2, [sp, #4]
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	4603      	mov	r3, r0
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	68f8      	ldr	r0, [r7, #12]
 80158ec:	f7ff ff5a 	bl	80157a4 <etharp_raw>
 80158f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3710      	adds	r7, #16
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}
 80158fa:	bf00      	nop
 80158fc:	0801bbc4 	.word	0x0801bbc4

08015900 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801590a:	4a05      	ldr	r2, [pc, #20]	@ (8015920 <etharp_request+0x20>)
 801590c:	6839      	ldr	r1, [r7, #0]
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff ffd4 	bl	80158bc <etharp_request_dst>
 8015914:	4603      	mov	r3, r0
}
 8015916:	4618      	mov	r0, r3
 8015918:	3708      	adds	r7, #8
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	0801bbbc 	.word	0x0801bbbc

08015924 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b08e      	sub	sp, #56	@ 0x38
 8015928:	af04      	add	r7, sp, #16
 801592a:	6078      	str	r0, [r7, #4]
 801592c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801592e:	4b79      	ldr	r3, [pc, #484]	@ (8015b14 <icmp_input+0x1f0>)
 8015930:	689b      	ldr	r3, [r3, #8]
 8015932:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	f003 030f 	and.w	r3, r3, #15
 801593c:	b2db      	uxtb	r3, r3
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	b2db      	uxtb	r3, r3
 8015942:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8015944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015946:	2b13      	cmp	r3, #19
 8015948:	f240 80cd 	bls.w	8015ae6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	895b      	ldrh	r3, [r3, #10]
 8015950:	2b03      	cmp	r3, #3
 8015952:	f240 80ca 	bls.w	8015aea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	685b      	ldr	r3, [r3, #4]
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015960:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015964:	2b00      	cmp	r3, #0
 8015966:	f000 80b7 	beq.w	8015ad8 <icmp_input+0x1b4>
 801596a:	2b08      	cmp	r3, #8
 801596c:	f040 80b7 	bne.w	8015ade <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015970:	4b69      	ldr	r3, [pc, #420]	@ (8015b18 <icmp_input+0x1f4>)
 8015972:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015974:	4b67      	ldr	r3, [pc, #412]	@ (8015b14 <icmp_input+0x1f0>)
 8015976:	695b      	ldr	r3, [r3, #20]
 8015978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801597c:	2be0      	cmp	r3, #224	@ 0xe0
 801597e:	f000 80bb 	beq.w	8015af8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015982:	4b64      	ldr	r3, [pc, #400]	@ (8015b14 <icmp_input+0x1f0>)
 8015984:	695b      	ldr	r3, [r3, #20]
 8015986:	4a63      	ldr	r2, [pc, #396]	@ (8015b14 <icmp_input+0x1f0>)
 8015988:	6812      	ldr	r2, [r2, #0]
 801598a:	4611      	mov	r1, r2
 801598c:	4618      	mov	r0, r3
 801598e:	f000 fbed 	bl	801616c <ip4_addr_isbroadcast_u32>
 8015992:	4603      	mov	r3, r0
 8015994:	2b00      	cmp	r3, #0
 8015996:	f040 80b1 	bne.w	8015afc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	891b      	ldrh	r3, [r3, #8]
 801599e:	2b07      	cmp	r3, #7
 80159a0:	f240 80a5 	bls.w	8015aee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80159a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80159a6:	330e      	adds	r3, #14
 80159a8:	4619      	mov	r1, r3
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7f8 f842 	bl	800da34 <pbuf_add_header>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d04b      	beq.n	8015a4e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	891a      	ldrh	r2, [r3, #8]
 80159ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80159bc:	4413      	add	r3, r2
 80159be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	891b      	ldrh	r3, [r3, #8]
 80159c4:	8b7a      	ldrh	r2, [r7, #26]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	f0c0 809a 	bcc.w	8015b00 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80159cc:	8b7b      	ldrh	r3, [r7, #26]
 80159ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80159d2:	4619      	mov	r1, r3
 80159d4:	200e      	movs	r0, #14
 80159d6:	f7f7 fddf 	bl	800d598 <pbuf_alloc>
 80159da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 8090 	beq.w	8015b04 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	895b      	ldrh	r3, [r3, #10]
 80159e8:	461a      	mov	r2, r3
 80159ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80159ec:	3308      	adds	r3, #8
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d203      	bcs.n	80159fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80159f2:	6978      	ldr	r0, [r7, #20]
 80159f4:	f7f8 f8b4 	bl	800db60 <pbuf_free>
          goto icmperr;
 80159f8:	e085      	b.n	8015b06 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015a02:	4618      	mov	r0, r3
 8015a04:	f001 ffbd 	bl	8017982 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015a08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	6978      	ldr	r0, [r7, #20]
 8015a0e:	f7f8 f821 	bl	800da54 <pbuf_remove_header>
 8015a12:	4603      	mov	r3, r0
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d009      	beq.n	8015a2c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015a18:	4b40      	ldr	r3, [pc, #256]	@ (8015b1c <icmp_input+0x1f8>)
 8015a1a:	22b6      	movs	r2, #182	@ 0xb6
 8015a1c:	4940      	ldr	r1, [pc, #256]	@ (8015b20 <icmp_input+0x1fc>)
 8015a1e:	4841      	ldr	r0, [pc, #260]	@ (8015b24 <icmp_input+0x200>)
 8015a20:	f001 fdb0 	bl	8017584 <iprintf>
          pbuf_free(r);
 8015a24:	6978      	ldr	r0, [r7, #20]
 8015a26:	f7f8 f89b 	bl	800db60 <pbuf_free>
          goto icmperr;
 8015a2a:	e06c      	b.n	8015b06 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015a2c:	6879      	ldr	r1, [r7, #4]
 8015a2e:	6978      	ldr	r0, [r7, #20]
 8015a30:	f7f8 f9ba 	bl	800dda8 <pbuf_copy>
 8015a34:	4603      	mov	r3, r0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d003      	beq.n	8015a42 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015a3a:	6978      	ldr	r0, [r7, #20]
 8015a3c:	f7f8 f890 	bl	800db60 <pbuf_free>
          goto icmperr;
 8015a40:	e061      	b.n	8015b06 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7f8 f88c 	bl	800db60 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015a48:	697b      	ldr	r3, [r7, #20]
 8015a4a:	607b      	str	r3, [r7, #4]
 8015a4c:	e00f      	b.n	8015a6e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a50:	330e      	adds	r3, #14
 8015a52:	4619      	mov	r1, r3
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7f7 fffd 	bl	800da54 <pbuf_remove_header>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d006      	beq.n	8015a6e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015a60:	4b2e      	ldr	r3, [pc, #184]	@ (8015b1c <icmp_input+0x1f8>)
 8015a62:	22c7      	movs	r2, #199	@ 0xc7
 8015a64:	4930      	ldr	r1, [pc, #192]	@ (8015b28 <icmp_input+0x204>)
 8015a66:	482f      	ldr	r0, [pc, #188]	@ (8015b24 <icmp_input+0x200>)
 8015a68:	f001 fd8c 	bl	8017584 <iprintf>
          goto icmperr;
 8015a6c:	e04b      	b.n	8015b06 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	685b      	ldr	r3, [r3, #4]
 8015a72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015a74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a76:	4619      	mov	r1, r3
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f7f7 ffdb 	bl	800da34 <pbuf_add_header>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d12b      	bne.n	8015adc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	681a      	ldr	r2, [r3, #0]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015a92:	4b20      	ldr	r3, [pc, #128]	@ (8015b14 <icmp_input+0x1f0>)
 8015a94:	691a      	ldr	r2, [r3, #16]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	709a      	strb	r2, [r3, #2]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	22ff      	movs	r2, #255	@ 0xff
 8015aae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	729a      	strb	r2, [r3, #10]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	9302      	str	r3, [sp, #8]
 8015abe:	2301      	movs	r3, #1
 8015ac0:	9301      	str	r3, [sp, #4]
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	9300      	str	r3, [sp, #0]
 8015ac6:	23ff      	movs	r3, #255	@ 0xff
 8015ac8:	2200      	movs	r2, #0
 8015aca:	69f9      	ldr	r1, [r7, #28]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f000 fa75 	bl	8015fbc <ip4_output_if>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015ad6:	e001      	b.n	8015adc <icmp_input+0x1b8>
      break;
 8015ad8:	bf00      	nop
 8015ada:	e000      	b.n	8015ade <icmp_input+0x1ba>
      break;
 8015adc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7f8 f83e 	bl	800db60 <pbuf_free>
  return;
 8015ae4:	e013      	b.n	8015b0e <icmp_input+0x1ea>
    goto lenerr;
 8015ae6:	bf00      	nop
 8015ae8:	e002      	b.n	8015af0 <icmp_input+0x1cc>
    goto lenerr;
 8015aea:	bf00      	nop
 8015aec:	e000      	b.n	8015af0 <icmp_input+0x1cc>
        goto lenerr;
 8015aee:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f7f8 f835 	bl	800db60 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015af6:	e00a      	b.n	8015b0e <icmp_input+0x1ea>
        goto icmperr;
 8015af8:	bf00      	nop
 8015afa:	e004      	b.n	8015b06 <icmp_input+0x1e2>
        goto icmperr;
 8015afc:	bf00      	nop
 8015afe:	e002      	b.n	8015b06 <icmp_input+0x1e2>
          goto icmperr;
 8015b00:	bf00      	nop
 8015b02:	e000      	b.n	8015b06 <icmp_input+0x1e2>
          goto icmperr;
 8015b04:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7f8 f82a 	bl	800db60 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b0c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b0e:	3728      	adds	r7, #40	@ 0x28
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}
 8015b14:	20008640 	.word	0x20008640
 8015b18:	20008654 	.word	0x20008654
 8015b1c:	0801b61c 	.word	0x0801b61c
 8015b20:	0801b654 	.word	0x0801b654
 8015b24:	0801b68c 	.word	0x0801b68c
 8015b28:	0801b6b4 	.word	0x0801b6b4

08015b2c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b082      	sub	sp, #8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	460b      	mov	r3, r1
 8015b36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015b38:	78fb      	ldrb	r3, [r7, #3]
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	2103      	movs	r1, #3
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f000 f814 	bl	8015b6c <icmp_send_response>
}
 8015b44:	bf00      	nop
 8015b46:	3708      	adds	r7, #8
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	460b      	mov	r3, r1
 8015b56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b58:	78fb      	ldrb	r3, [r7, #3]
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	210b      	movs	r1, #11
 8015b5e:	6878      	ldr	r0, [r7, #4]
 8015b60:	f000 f804 	bl	8015b6c <icmp_send_response>
}
 8015b64:	bf00      	nop
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b08c      	sub	sp, #48	@ 0x30
 8015b70:	af04      	add	r7, sp, #16
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	460b      	mov	r3, r1
 8015b76:	70fb      	strb	r3, [r7, #3]
 8015b78:	4613      	mov	r3, r2
 8015b7a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015b7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015b80:	2124      	movs	r1, #36	@ 0x24
 8015b82:	2022      	movs	r0, #34	@ 0x22
 8015b84:	f7f7 fd08 	bl	800d598 <pbuf_alloc>
 8015b88:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d04c      	beq.n	8015c2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015b90:	69fb      	ldr	r3, [r7, #28]
 8015b92:	895b      	ldrh	r3, [r3, #10]
 8015b94:	2b23      	cmp	r3, #35	@ 0x23
 8015b96:	d806      	bhi.n	8015ba6 <icmp_send_response+0x3a>
 8015b98:	4b26      	ldr	r3, [pc, #152]	@ (8015c34 <icmp_send_response+0xc8>)
 8015b9a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015b9e:	4926      	ldr	r1, [pc, #152]	@ (8015c38 <icmp_send_response+0xcc>)
 8015ba0:	4826      	ldr	r0, [pc, #152]	@ (8015c3c <icmp_send_response+0xd0>)
 8015ba2:	f001 fcef 	bl	8017584 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	78fa      	ldrb	r2, [r7, #3]
 8015bb6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	78ba      	ldrb	r2, [r7, #2]
 8015bbc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	711a      	strb	r2, [r3, #4]
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	719a      	strb	r2, [r3, #6]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015bd2:	69fb      	ldr	r3, [r7, #28]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	f103 0008 	add.w	r0, r3, #8
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	221c      	movs	r2, #28
 8015be0:	4619      	mov	r1, r3
 8015be2:	f001 fece 	bl	8017982 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015be6:	69bb      	ldr	r3, [r7, #24]
 8015be8:	68db      	ldr	r3, [r3, #12]
 8015bea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015bec:	f107 030c 	add.w	r3, r7, #12
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f000 f825 	bl	8015c40 <ip4_route>
 8015bf6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d011      	beq.n	8015c22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	2200      	movs	r2, #0
 8015c02:	709a      	strb	r2, [r3, #2]
 8015c04:	2200      	movs	r2, #0
 8015c06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015c08:	f107 020c 	add.w	r2, r7, #12
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	9302      	str	r3, [sp, #8]
 8015c10:	2301      	movs	r3, #1
 8015c12:	9301      	str	r3, [sp, #4]
 8015c14:	2300      	movs	r3, #0
 8015c16:	9300      	str	r3, [sp, #0]
 8015c18:	23ff      	movs	r3, #255	@ 0xff
 8015c1a:	2100      	movs	r1, #0
 8015c1c:	69f8      	ldr	r0, [r7, #28]
 8015c1e:	f000 f9cd 	bl	8015fbc <ip4_output_if>
  }
  pbuf_free(q);
 8015c22:	69f8      	ldr	r0, [r7, #28]
 8015c24:	f7f7 ff9c 	bl	800db60 <pbuf_free>
 8015c28:	e000      	b.n	8015c2c <icmp_send_response+0xc0>
    return;
 8015c2a:	bf00      	nop
}
 8015c2c:	3720      	adds	r7, #32
 8015c2e:	46bd      	mov	sp, r7
 8015c30:	bd80      	pop	{r7, pc}
 8015c32:	bf00      	nop
 8015c34:	0801b61c 	.word	0x0801b61c
 8015c38:	0801b6e8 	.word	0x0801b6e8
 8015c3c:	0801b68c 	.word	0x0801b68c

08015c40 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015c40:	b480      	push	{r7}
 8015c42:	b085      	sub	sp, #20
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015c48:	4b33      	ldr	r3, [pc, #204]	@ (8015d18 <ip4_route+0xd8>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	60fb      	str	r3, [r7, #12]
 8015c4e:	e036      	b.n	8015cbe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c50:	68fb      	ldr	r3, [r7, #12]
 8015c52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015c56:	f003 0301 	and.w	r3, r3, #1
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d02b      	beq.n	8015cb8 <ip4_route+0x78>
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015c66:	089b      	lsrs	r3, r3, #2
 8015c68:	f003 0301 	and.w	r3, r3, #1
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d022      	beq.n	8015cb8 <ip4_route+0x78>
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	3304      	adds	r3, #4
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d01d      	beq.n	8015cb8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	3304      	adds	r3, #4
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	405a      	eors	r2, r3
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	3308      	adds	r3, #8
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	4013      	ands	r3, r2
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d101      	bne.n	8015c98 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	e038      	b.n	8015d0a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015c9e:	f003 0302 	and.w	r3, r3, #2
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d108      	bne.n	8015cb8 <ip4_route+0x78>
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	330c      	adds	r3, #12
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	429a      	cmp	r2, r3
 8015cb2:	d101      	bne.n	8015cb8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	e028      	b.n	8015d0a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	60fb      	str	r3, [r7, #12]
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d1c5      	bne.n	8015c50 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015cc4:	4b15      	ldr	r3, [pc, #84]	@ (8015d1c <ip4_route+0xdc>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d01a      	beq.n	8015d02 <ip4_route+0xc2>
 8015ccc:	4b13      	ldr	r3, [pc, #76]	@ (8015d1c <ip4_route+0xdc>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015cd4:	f003 0301 	and.w	r3, r3, #1
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d012      	beq.n	8015d02 <ip4_route+0xc2>
 8015cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8015d1c <ip4_route+0xdc>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015ce4:	f003 0304 	and.w	r3, r3, #4
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d00a      	beq.n	8015d02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015cec:	4b0b      	ldr	r3, [pc, #44]	@ (8015d1c <ip4_route+0xdc>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	3304      	adds	r3, #4
 8015cf2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d004      	beq.n	8015d02 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	b2db      	uxtb	r3, r3
 8015cfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8015d00:	d101      	bne.n	8015d06 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015d02:	2300      	movs	r3, #0
 8015d04:	e001      	b.n	8015d0a <ip4_route+0xca>
  }

  return netif_default;
 8015d06:	4b05      	ldr	r3, [pc, #20]	@ (8015d1c <ip4_route+0xdc>)
 8015d08:	681b      	ldr	r3, [r3, #0]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3714      	adds	r7, #20
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d14:	4770      	bx	lr
 8015d16:	bf00      	nop
 8015d18:	2000df48 	.word	0x2000df48
 8015d1c:	2000df4c 	.word	0x2000df4c

08015d20 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015d2e:	f003 0301 	and.w	r3, r3, #1
 8015d32:	b2db      	uxtb	r3, r3
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d016      	beq.n	8015d66 <ip4_input_accept+0x46>
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	3304      	adds	r3, #4
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d011      	beq.n	8015d66 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d42:	4b0b      	ldr	r3, [pc, #44]	@ (8015d70 <ip4_input_accept+0x50>)
 8015d44:	695a      	ldr	r2, [r3, #20]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	3304      	adds	r3, #4
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	d008      	beq.n	8015d62 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015d50:	4b07      	ldr	r3, [pc, #28]	@ (8015d70 <ip4_input_accept+0x50>)
 8015d52:	695b      	ldr	r3, [r3, #20]
 8015d54:	6879      	ldr	r1, [r7, #4]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f000 fa08 	bl	801616c <ip4_addr_isbroadcast_u32>
 8015d5c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d001      	beq.n	8015d66 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015d62:	2301      	movs	r3, #1
 8015d64:	e000      	b.n	8015d68 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015d66:	2300      	movs	r3, #0
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	3708      	adds	r7, #8
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}
 8015d70:	20008640 	.word	0x20008640

08015d74 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	091b      	lsrs	r3, r3, #4
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b04      	cmp	r3, #4
 8015d8e:	d004      	beq.n	8015d9a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f7f7 fee5 	bl	800db60 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015d96:	2300      	movs	r3, #0
 8015d98:	e107      	b.n	8015faa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	f003 030f 	and.w	r3, r3, #15
 8015da2:	b2db      	uxtb	r3, r3
 8015da4:	009b      	lsls	r3, r3, #2
 8015da6:	b2db      	uxtb	r3, r3
 8015da8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	885b      	ldrh	r3, [r3, #2]
 8015dae:	b29b      	uxth	r3, r3
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f6 fb29 	bl	800c408 <lwip_htons>
 8015db6:	4603      	mov	r3, r0
 8015db8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	891b      	ldrh	r3, [r3, #8]
 8015dbe:	89ba      	ldrh	r2, [r7, #12]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d204      	bcs.n	8015dce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015dc4:	89bb      	ldrh	r3, [r7, #12]
 8015dc6:	4619      	mov	r1, r3
 8015dc8:	6878      	ldr	r0, [r7, #4]
 8015dca:	f7f7 fd43 	bl	800d854 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	895b      	ldrh	r3, [r3, #10]
 8015dd2:	89fa      	ldrh	r2, [r7, #14]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d807      	bhi.n	8015de8 <ip4_input+0x74>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	891b      	ldrh	r3, [r3, #8]
 8015ddc:	89ba      	ldrh	r2, [r7, #12]
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d802      	bhi.n	8015de8 <ip4_input+0x74>
 8015de2:	89fb      	ldrh	r3, [r7, #14]
 8015de4:	2b13      	cmp	r3, #19
 8015de6:	d804      	bhi.n	8015df2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f7f7 feb9 	bl	800db60 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015dee:	2300      	movs	r3, #0
 8015df0:	e0db      	b.n	8015faa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	691b      	ldr	r3, [r3, #16]
 8015df6:	4a6f      	ldr	r2, [pc, #444]	@ (8015fb4 <ip4_input+0x240>)
 8015df8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8015fb4 <ip4_input+0x240>)
 8015e00:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e02:	4b6c      	ldr	r3, [pc, #432]	@ (8015fb4 <ip4_input+0x240>)
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015e0a:	2be0      	cmp	r3, #224	@ 0xe0
 8015e0c:	d112      	bne.n	8015e34 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015e14:	f003 0301 	and.w	r3, r3, #1
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d007      	beq.n	8015e2e <ip4_input+0xba>
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	3304      	adds	r3, #4
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d002      	beq.n	8015e2e <ip4_input+0xba>
      netif = inp;
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	613b      	str	r3, [r7, #16]
 8015e2c:	e02a      	b.n	8015e84 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	613b      	str	r3, [r7, #16]
 8015e32:	e027      	b.n	8015e84 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015e34:	6838      	ldr	r0, [r7, #0]
 8015e36:	f7ff ff73 	bl	8015d20 <ip4_input_accept>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d002      	beq.n	8015e46 <ip4_input+0xd2>
      netif = inp;
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	613b      	str	r3, [r7, #16]
 8015e44:	e01e      	b.n	8015e84 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015e46:	2300      	movs	r3, #0
 8015e48:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015e4a:	4b5a      	ldr	r3, [pc, #360]	@ (8015fb4 <ip4_input+0x240>)
 8015e4c:	695b      	ldr	r3, [r3, #20]
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	2b7f      	cmp	r3, #127	@ 0x7f
 8015e52:	d017      	beq.n	8015e84 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015e54:	4b58      	ldr	r3, [pc, #352]	@ (8015fb8 <ip4_input+0x244>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	613b      	str	r3, [r7, #16]
 8015e5a:	e00e      	b.n	8015e7a <ip4_input+0x106>
          if (netif == inp) {
 8015e5c:	693a      	ldr	r2, [r7, #16]
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d006      	beq.n	8015e72 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015e64:	6938      	ldr	r0, [r7, #16]
 8015e66:	f7ff ff5b 	bl	8015d20 <ip4_input_accept>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d108      	bne.n	8015e82 <ip4_input+0x10e>
 8015e70:	e000      	b.n	8015e74 <ip4_input+0x100>
            continue;
 8015e72:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	613b      	str	r3, [r7, #16]
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d1ed      	bne.n	8015e5c <ip4_input+0xe8>
 8015e80:	e000      	b.n	8015e84 <ip4_input+0x110>
            break;
 8015e82:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e84:	4b4b      	ldr	r3, [pc, #300]	@ (8015fb4 <ip4_input+0x240>)
 8015e86:	691b      	ldr	r3, [r3, #16]
 8015e88:	6839      	ldr	r1, [r7, #0]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f000 f96e 	bl	801616c <ip4_addr_isbroadcast_u32>
 8015e90:	4603      	mov	r3, r0
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d105      	bne.n	8015ea2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015e96:	4b47      	ldr	r3, [pc, #284]	@ (8015fb4 <ip4_input+0x240>)
 8015e98:	691b      	ldr	r3, [r3, #16]
 8015e9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e9e:	2be0      	cmp	r3, #224	@ 0xe0
 8015ea0:	d104      	bne.n	8015eac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7f7 fe5c 	bl	800db60 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	e07e      	b.n	8015faa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d104      	bne.n	8015ebc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f7f7 fe54 	bl	800db60 <pbuf_free>
    return ERR_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	e076      	b.n	8015faa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015ebc:	697b      	ldr	r3, [r7, #20]
 8015ebe:	88db      	ldrh	r3, [r3, #6]
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015ec8:	4013      	ands	r3, r2
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d00b      	beq.n	8015ee6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fc92 	bl	80167f8 <ip4_reass>
 8015ed4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d101      	bne.n	8015ee0 <ip4_input+0x16c>
      return ERR_OK;
 8015edc:	2300      	movs	r3, #0
 8015ede:	e064      	b.n	8015faa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015ee6:	4a33      	ldr	r2, [pc, #204]	@ (8015fb4 <ip4_input+0x240>)
 8015ee8:	693b      	ldr	r3, [r7, #16]
 8015eea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015eec:	4a31      	ldr	r2, [pc, #196]	@ (8015fb4 <ip4_input+0x240>)
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015ef2:	4a30      	ldr	r2, [pc, #192]	@ (8015fb4 <ip4_input+0x240>)
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	f003 030f 	and.w	r3, r3, #15
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	461a      	mov	r2, r3
 8015f08:	4b2a      	ldr	r3, [pc, #168]	@ (8015fb4 <ip4_input+0x240>)
 8015f0a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015f0c:	89fb      	ldrh	r3, [r7, #14]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f7f7 fd9f 	bl	800da54 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	7a5b      	ldrb	r3, [r3, #9]
 8015f1a:	2b11      	cmp	r3, #17
 8015f1c:	d006      	beq.n	8015f2c <ip4_input+0x1b8>
 8015f1e:	2b11      	cmp	r3, #17
 8015f20:	dc13      	bgt.n	8015f4a <ip4_input+0x1d6>
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	d00c      	beq.n	8015f40 <ip4_input+0x1cc>
 8015f26:	2b06      	cmp	r3, #6
 8015f28:	d005      	beq.n	8015f36 <ip4_input+0x1c2>
 8015f2a:	e00e      	b.n	8015f4a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015f2c:	6839      	ldr	r1, [r7, #0]
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7fe fb5a 	bl	80145e8 <udp_input>
        break;
 8015f34:	e026      	b.n	8015f84 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015f36:	6839      	ldr	r1, [r7, #0]
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f7f9 ff19 	bl	800fd70 <tcp_input>
        break;
 8015f3e:	e021      	b.n	8015f84 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015f40:	6839      	ldr	r1, [r7, #0]
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f7ff fcee 	bl	8015924 <icmp_input>
        break;
 8015f48:	e01c      	b.n	8015f84 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8015fb4 <ip4_input+0x240>)
 8015f4c:	695b      	ldr	r3, [r3, #20]
 8015f4e:	6939      	ldr	r1, [r7, #16]
 8015f50:	4618      	mov	r0, r3
 8015f52:	f000 f90b 	bl	801616c <ip4_addr_isbroadcast_u32>
 8015f56:	4603      	mov	r3, r0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d10f      	bne.n	8015f7c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f5c:	4b15      	ldr	r3, [pc, #84]	@ (8015fb4 <ip4_input+0x240>)
 8015f5e:	695b      	ldr	r3, [r3, #20]
 8015f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f64:	2be0      	cmp	r3, #224	@ 0xe0
 8015f66:	d009      	beq.n	8015f7c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015f68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f7f7 fde3 	bl	800db3a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015f74:	2102      	movs	r1, #2
 8015f76:	6878      	ldr	r0, [r7, #4]
 8015f78:	f7ff fdd8 	bl	8015b2c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7f7 fdef 	bl	800db60 <pbuf_free>
        break;
 8015f82:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015f84:	4b0b      	ldr	r3, [pc, #44]	@ (8015fb4 <ip4_input+0x240>)
 8015f86:	2200      	movs	r2, #0
 8015f88:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8015fb4 <ip4_input+0x240>)
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015f90:	4b08      	ldr	r3, [pc, #32]	@ (8015fb4 <ip4_input+0x240>)
 8015f92:	2200      	movs	r2, #0
 8015f94:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015f96:	4b07      	ldr	r3, [pc, #28]	@ (8015fb4 <ip4_input+0x240>)
 8015f98:	2200      	movs	r2, #0
 8015f9a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015f9c:	4b05      	ldr	r3, [pc, #20]	@ (8015fb4 <ip4_input+0x240>)
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015fa2:	4b04      	ldr	r3, [pc, #16]	@ (8015fb4 <ip4_input+0x240>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015fa8:	2300      	movs	r3, #0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3718      	adds	r7, #24
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	20008640 	.word	0x20008640
 8015fb8:	2000df48 	.word	0x2000df48

08015fbc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b08a      	sub	sp, #40	@ 0x28
 8015fc0:	af04      	add	r7, sp, #16
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
 8015fc8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d009      	beq.n	8015fe8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d003      	beq.n	8015fe2 <ip4_output_if+0x26>
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d102      	bne.n	8015fe8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015fe8:	78fa      	ldrb	r2, [r7, #3]
 8015fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fec:	9302      	str	r3, [sp, #8]
 8015fee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015ff2:	9301      	str	r3, [sp, #4]
 8015ff4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	4613      	mov	r3, r2
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	6979      	ldr	r1, [r7, #20]
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	f000 f805 	bl	8016010 <ip4_output_if_src>
 8016006:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016008:	4618      	mov	r0, r3
 801600a:	3718      	adds	r7, #24
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}

08016010 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b088      	sub	sp, #32
 8016014:	af00      	add	r7, sp, #0
 8016016:	60f8      	str	r0, [r7, #12]
 8016018:	60b9      	str	r1, [r7, #8]
 801601a:	607a      	str	r2, [r7, #4]
 801601c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	7b9b      	ldrb	r3, [r3, #14]
 8016022:	2b01      	cmp	r3, #1
 8016024:	d006      	beq.n	8016034 <ip4_output_if_src+0x24>
 8016026:	4b4b      	ldr	r3, [pc, #300]	@ (8016154 <ip4_output_if_src+0x144>)
 8016028:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801602c:	494a      	ldr	r1, [pc, #296]	@ (8016158 <ip4_output_if_src+0x148>)
 801602e:	484b      	ldr	r0, [pc, #300]	@ (801615c <ip4_output_if_src+0x14c>)
 8016030:	f001 faa8 	bl	8017584 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d060      	beq.n	80160fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801603a:	2314      	movs	r3, #20
 801603c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801603e:	2114      	movs	r1, #20
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f7f7 fcf7 	bl	800da34 <pbuf_add_header>
 8016046:	4603      	mov	r3, r0
 8016048:	2b00      	cmp	r3, #0
 801604a:	d002      	beq.n	8016052 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801604c:	f06f 0301 	mvn.w	r3, #1
 8016050:	e07c      	b.n	801614c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	895b      	ldrh	r3, [r3, #10]
 801605c:	2b13      	cmp	r3, #19
 801605e:	d806      	bhi.n	801606e <ip4_output_if_src+0x5e>
 8016060:	4b3c      	ldr	r3, [pc, #240]	@ (8016154 <ip4_output_if_src+0x144>)
 8016062:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016066:	493e      	ldr	r1, [pc, #248]	@ (8016160 <ip4_output_if_src+0x150>)
 8016068:	483c      	ldr	r0, [pc, #240]	@ (801615c <ip4_output_if_src+0x14c>)
 801606a:	f001 fa8b 	bl	8017584 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801606e:	69fb      	ldr	r3, [r7, #28]
 8016070:	78fa      	ldrb	r2, [r7, #3]
 8016072:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016074:	69fb      	ldr	r3, [r7, #28]
 8016076:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801607a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	681a      	ldr	r2, [r3, #0]
 8016080:	69fb      	ldr	r3, [r7, #28]
 8016082:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016084:	8b7b      	ldrh	r3, [r7, #26]
 8016086:	089b      	lsrs	r3, r3, #2
 8016088:	b29b      	uxth	r3, r3
 801608a:	b2db      	uxtb	r3, r3
 801608c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016090:	b2da      	uxtb	r2, r3
 8016092:	69fb      	ldr	r3, [r7, #28]
 8016094:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801609c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	891b      	ldrh	r3, [r3, #8]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7f6 f9b0 	bl	800c408 <lwip_htons>
 80160a8:	4603      	mov	r3, r0
 80160aa:	461a      	mov	r2, r3
 80160ac:	69fb      	ldr	r3, [r7, #28]
 80160ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	2200      	movs	r2, #0
 80160b4:	719a      	strb	r2, [r3, #6]
 80160b6:	2200      	movs	r2, #0
 80160b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80160ba:	4b2a      	ldr	r3, [pc, #168]	@ (8016164 <ip4_output_if_src+0x154>)
 80160bc:	881b      	ldrh	r3, [r3, #0]
 80160be:	4618      	mov	r0, r3
 80160c0:	f7f6 f9a2 	bl	800c408 <lwip_htons>
 80160c4:	4603      	mov	r3, r0
 80160c6:	461a      	mov	r2, r3
 80160c8:	69fb      	ldr	r3, [r7, #28]
 80160ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80160cc:	4b25      	ldr	r3, [pc, #148]	@ (8016164 <ip4_output_if_src+0x154>)
 80160ce:	881b      	ldrh	r3, [r3, #0]
 80160d0:	3301      	adds	r3, #1
 80160d2:	b29a      	uxth	r2, r3
 80160d4:	4b23      	ldr	r3, [pc, #140]	@ (8016164 <ip4_output_if_src+0x154>)
 80160d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80160d8:	68bb      	ldr	r3, [r7, #8]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d104      	bne.n	80160e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80160de:	4b22      	ldr	r3, [pc, #136]	@ (8016168 <ip4_output_if_src+0x158>)
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	60da      	str	r2, [r3, #12]
 80160e6:	e003      	b.n	80160f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80160e8:	68bb      	ldr	r3, [r7, #8]
 80160ea:	681a      	ldr	r2, [r3, #0]
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80160f0:	69fb      	ldr	r3, [r7, #28]
 80160f2:	2200      	movs	r2, #0
 80160f4:	729a      	strb	r2, [r3, #10]
 80160f6:	2200      	movs	r2, #0
 80160f8:	72da      	strb	r2, [r3, #11]
 80160fa:	e00f      	b.n	801611c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	895b      	ldrh	r3, [r3, #10]
 8016100:	2b13      	cmp	r3, #19
 8016102:	d802      	bhi.n	801610a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016104:	f06f 0301 	mvn.w	r3, #1
 8016108:	e020      	b.n	801614c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016110:	69fb      	ldr	r3, [r7, #28]
 8016112:	691b      	ldr	r3, [r3, #16]
 8016114:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016116:	f107 0314 	add.w	r3, r7, #20
 801611a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801611e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016120:	2b00      	cmp	r3, #0
 8016122:	d00c      	beq.n	801613e <ip4_output_if_src+0x12e>
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	891a      	ldrh	r2, [r3, #8]
 8016128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801612a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801612c:	429a      	cmp	r2, r3
 801612e:	d906      	bls.n	801613e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016130:	687a      	ldr	r2, [r7, #4]
 8016132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	f000 fd53 	bl	8016be0 <ip4_frag>
 801613a:	4603      	mov	r3, r0
 801613c:	e006      	b.n	801614c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016140:	695b      	ldr	r3, [r3, #20]
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	68f9      	ldr	r1, [r7, #12]
 8016146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016148:	4798      	blx	r3
 801614a:	4603      	mov	r3, r0
}
 801614c:	4618      	mov	r0, r3
 801614e:	3720      	adds	r7, #32
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}
 8016154:	0801b714 	.word	0x0801b714
 8016158:	0801b748 	.word	0x0801b748
 801615c:	0801b754 	.word	0x0801b754
 8016160:	0801b77c 	.word	0x0801b77c
 8016164:	2000e0a6 	.word	0x2000e0a6
 8016168:	0801bbb8 	.word	0x0801bbb8

0801616c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801616c:	b480      	push	{r7}
 801616e:	b085      	sub	sp, #20
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016180:	d002      	beq.n	8016188 <ip4_addr_isbroadcast_u32+0x1c>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d101      	bne.n	801618c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016188:	2301      	movs	r3, #1
 801618a:	e02a      	b.n	80161e2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016192:	f003 0302 	and.w	r3, r3, #2
 8016196:	2b00      	cmp	r3, #0
 8016198:	d101      	bne.n	801619e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801619a:	2300      	movs	r3, #0
 801619c:	e021      	b.n	80161e2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	3304      	adds	r3, #4
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	687a      	ldr	r2, [r7, #4]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d101      	bne.n	80161ae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	e019      	b.n	80161e2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80161ae:	68fa      	ldr	r2, [r7, #12]
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	3304      	adds	r3, #4
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	405a      	eors	r2, r3
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	3308      	adds	r3, #8
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	4013      	ands	r3, r2
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d10d      	bne.n	80161e0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	3308      	adds	r3, #8
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	43da      	mvns	r2, r3
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	3308      	adds	r3, #8
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161d8:	429a      	cmp	r2, r3
 80161da:	d101      	bne.n	80161e0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80161dc:	2301      	movs	r3, #1
 80161de:	e000      	b.n	80161e2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80161e0:	2300      	movs	r3, #0
  }
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3714      	adds	r7, #20
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
	...

080161f0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80161fa:	4b12      	ldr	r3, [pc, #72]	@ (8016244 <ip_reass_tmr+0x54>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016200:	e018      	b.n	8016234 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	7fdb      	ldrb	r3, [r3, #31]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d00b      	beq.n	8016222 <ip_reass_tmr+0x32>
      r->timer--;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	7fdb      	ldrb	r3, [r3, #31]
 801620e:	3b01      	subs	r3, #1
 8016210:	b2da      	uxtb	r2, r3
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	60fb      	str	r3, [r7, #12]
 8016220:	e008      	b.n	8016234 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801622c:	68b9      	ldr	r1, [r7, #8]
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 f80a 	bl	8016248 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d1e3      	bne.n	8016202 <ip_reass_tmr+0x12>
    }
  }
}
 801623a:	bf00      	nop
 801623c:	bf00      	nop
 801623e:	3710      	adds	r7, #16
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}
 8016244:	2000e0a8 	.word	0x2000e0a8

08016248 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016248:	b580      	push	{r7, lr}
 801624a:	b088      	sub	sp, #32
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016252:	2300      	movs	r3, #0
 8016254:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016256:	683a      	ldr	r2, [r7, #0]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	429a      	cmp	r2, r3
 801625c:	d105      	bne.n	801626a <ip_reass_free_complete_datagram+0x22>
 801625e:	4b45      	ldr	r3, [pc, #276]	@ (8016374 <ip_reass_free_complete_datagram+0x12c>)
 8016260:	22ab      	movs	r2, #171	@ 0xab
 8016262:	4945      	ldr	r1, [pc, #276]	@ (8016378 <ip_reass_free_complete_datagram+0x130>)
 8016264:	4845      	ldr	r0, [pc, #276]	@ (801637c <ip_reass_free_complete_datagram+0x134>)
 8016266:	f001 f98d 	bl	8017584 <iprintf>
  if (prev != NULL) {
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d00a      	beq.n	8016286 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	687a      	ldr	r2, [r7, #4]
 8016276:	429a      	cmp	r2, r3
 8016278:	d005      	beq.n	8016286 <ip_reass_free_complete_datagram+0x3e>
 801627a:	4b3e      	ldr	r3, [pc, #248]	@ (8016374 <ip_reass_free_complete_datagram+0x12c>)
 801627c:	22ad      	movs	r2, #173	@ 0xad
 801627e:	4940      	ldr	r1, [pc, #256]	@ (8016380 <ip_reass_free_complete_datagram+0x138>)
 8016280:	483e      	ldr	r0, [pc, #248]	@ (801637c <ip_reass_free_complete_datagram+0x134>)
 8016282:	f001 f97f 	bl	8017584 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	685b      	ldr	r3, [r3, #4]
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801628e:	697b      	ldr	r3, [r7, #20]
 8016290:	889b      	ldrh	r3, [r3, #4]
 8016292:	b29b      	uxth	r3, r3
 8016294:	2b00      	cmp	r3, #0
 8016296:	d12a      	bne.n	80162ee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801629e:	697b      	ldr	r3, [r7, #20]
 80162a0:	681a      	ldr	r2, [r3, #0]
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	6858      	ldr	r0, [r3, #4]
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	3308      	adds	r3, #8
 80162ae:	2214      	movs	r2, #20
 80162b0:	4619      	mov	r1, r3
 80162b2:	f001 fb66 	bl	8017982 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80162b6:	2101      	movs	r1, #1
 80162b8:	69b8      	ldr	r0, [r7, #24]
 80162ba:	f7ff fc47 	bl	8015b4c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80162be:	69b8      	ldr	r0, [r7, #24]
 80162c0:	f7f7 fcdc 	bl	800dc7c <pbuf_clen>
 80162c4:	4603      	mov	r3, r0
 80162c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80162c8:	8bfa      	ldrh	r2, [r7, #30]
 80162ca:	8a7b      	ldrh	r3, [r7, #18]
 80162cc:	4413      	add	r3, r2
 80162ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80162d2:	db05      	blt.n	80162e0 <ip_reass_free_complete_datagram+0x98>
 80162d4:	4b27      	ldr	r3, [pc, #156]	@ (8016374 <ip_reass_free_complete_datagram+0x12c>)
 80162d6:	22bc      	movs	r2, #188	@ 0xbc
 80162d8:	492a      	ldr	r1, [pc, #168]	@ (8016384 <ip_reass_free_complete_datagram+0x13c>)
 80162da:	4828      	ldr	r0, [pc, #160]	@ (801637c <ip_reass_free_complete_datagram+0x134>)
 80162dc:	f001 f952 	bl	8017584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80162e0:	8bfa      	ldrh	r2, [r7, #30]
 80162e2:	8a7b      	ldrh	r3, [r7, #18]
 80162e4:	4413      	add	r3, r2
 80162e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80162e8:	69b8      	ldr	r0, [r7, #24]
 80162ea:	f7f7 fc39 	bl	800db60 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80162f4:	e01f      	b.n	8016336 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80162f6:	69bb      	ldr	r3, [r7, #24]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016306:	68f8      	ldr	r0, [r7, #12]
 8016308:	f7f7 fcb8 	bl	800dc7c <pbuf_clen>
 801630c:	4603      	mov	r3, r0
 801630e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016310:	8bfa      	ldrh	r2, [r7, #30]
 8016312:	8a7b      	ldrh	r3, [r7, #18]
 8016314:	4413      	add	r3, r2
 8016316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801631a:	db05      	blt.n	8016328 <ip_reass_free_complete_datagram+0xe0>
 801631c:	4b15      	ldr	r3, [pc, #84]	@ (8016374 <ip_reass_free_complete_datagram+0x12c>)
 801631e:	22cc      	movs	r2, #204	@ 0xcc
 8016320:	4918      	ldr	r1, [pc, #96]	@ (8016384 <ip_reass_free_complete_datagram+0x13c>)
 8016322:	4816      	ldr	r0, [pc, #88]	@ (801637c <ip_reass_free_complete_datagram+0x134>)
 8016324:	f001 f92e 	bl	8017584 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016328:	8bfa      	ldrh	r2, [r7, #30]
 801632a:	8a7b      	ldrh	r3, [r7, #18]
 801632c:	4413      	add	r3, r2
 801632e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016330:	68f8      	ldr	r0, [r7, #12]
 8016332:	f7f7 fc15 	bl	800db60 <pbuf_free>
  while (p != NULL) {
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d1dc      	bne.n	80162f6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801633c:	6839      	ldr	r1, [r7, #0]
 801633e:	6878      	ldr	r0, [r7, #4]
 8016340:	f000 f8c2 	bl	80164c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016344:	4b10      	ldr	r3, [pc, #64]	@ (8016388 <ip_reass_free_complete_datagram+0x140>)
 8016346:	881b      	ldrh	r3, [r3, #0]
 8016348:	8bfa      	ldrh	r2, [r7, #30]
 801634a:	429a      	cmp	r2, r3
 801634c:	d905      	bls.n	801635a <ip_reass_free_complete_datagram+0x112>
 801634e:	4b09      	ldr	r3, [pc, #36]	@ (8016374 <ip_reass_free_complete_datagram+0x12c>)
 8016350:	22d2      	movs	r2, #210	@ 0xd2
 8016352:	490e      	ldr	r1, [pc, #56]	@ (801638c <ip_reass_free_complete_datagram+0x144>)
 8016354:	4809      	ldr	r0, [pc, #36]	@ (801637c <ip_reass_free_complete_datagram+0x134>)
 8016356:	f001 f915 	bl	8017584 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801635a:	4b0b      	ldr	r3, [pc, #44]	@ (8016388 <ip_reass_free_complete_datagram+0x140>)
 801635c:	881a      	ldrh	r2, [r3, #0]
 801635e:	8bfb      	ldrh	r3, [r7, #30]
 8016360:	1ad3      	subs	r3, r2, r3
 8016362:	b29a      	uxth	r2, r3
 8016364:	4b08      	ldr	r3, [pc, #32]	@ (8016388 <ip_reass_free_complete_datagram+0x140>)
 8016366:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016368:	8bfb      	ldrh	r3, [r7, #30]
}
 801636a:	4618      	mov	r0, r3
 801636c:	3720      	adds	r7, #32
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	0801b7ac 	.word	0x0801b7ac
 8016378:	0801b7e8 	.word	0x0801b7e8
 801637c:	0801b7f4 	.word	0x0801b7f4
 8016380:	0801b81c 	.word	0x0801b81c
 8016384:	0801b830 	.word	0x0801b830
 8016388:	2000e0ac 	.word	0x2000e0ac
 801638c:	0801b850 	.word	0x0801b850

08016390 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b08a      	sub	sp, #40	@ 0x28
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
 8016398:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801639a:	2300      	movs	r3, #0
 801639c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801639e:	2300      	movs	r3, #0
 80163a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80163a2:	2300      	movs	r3, #0
 80163a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80163a6:	2300      	movs	r3, #0
 80163a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80163ae:	4b28      	ldr	r3, [pc, #160]	@ (8016450 <ip_reass_remove_oldest_datagram+0xc0>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80163b4:	e030      	b.n	8016418 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80163b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163b8:	695a      	ldr	r2, [r3, #20]
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	429a      	cmp	r2, r3
 80163c0:	d10c      	bne.n	80163dc <ip_reass_remove_oldest_datagram+0x4c>
 80163c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163c4:	699a      	ldr	r2, [r3, #24]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	691b      	ldr	r3, [r3, #16]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d106      	bne.n	80163dc <ip_reass_remove_oldest_datagram+0x4c>
 80163ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163d0:	899a      	ldrh	r2, [r3, #12]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	889b      	ldrh	r3, [r3, #4]
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	429a      	cmp	r2, r3
 80163da:	d014      	beq.n	8016406 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	3301      	adds	r3, #1
 80163e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80163e2:	6a3b      	ldr	r3, [r7, #32]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d104      	bne.n	80163f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80163e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	61bb      	str	r3, [r7, #24]
 80163f0:	e009      	b.n	8016406 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80163f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163f4:	7fda      	ldrb	r2, [r3, #31]
 80163f6:	6a3b      	ldr	r3, [r7, #32]
 80163f8:	7fdb      	ldrb	r3, [r3, #31]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d803      	bhi.n	8016406 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80163fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016400:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d001      	beq.n	8016412 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016410:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801641a:	2b00      	cmp	r3, #0
 801641c:	d1cb      	bne.n	80163b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801641e:	6a3b      	ldr	r3, [r7, #32]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d008      	beq.n	8016436 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016424:	69b9      	ldr	r1, [r7, #24]
 8016426:	6a38      	ldr	r0, [r7, #32]
 8016428:	f7ff ff0e 	bl	8016248 <ip_reass_free_complete_datagram>
 801642c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801642e:	697a      	ldr	r2, [r7, #20]
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	4413      	add	r3, r2
 8016434:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016436:	697a      	ldr	r2, [r7, #20]
 8016438:	683b      	ldr	r3, [r7, #0]
 801643a:	429a      	cmp	r2, r3
 801643c:	da02      	bge.n	8016444 <ip_reass_remove_oldest_datagram+0xb4>
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	2b01      	cmp	r3, #1
 8016442:	dcac      	bgt.n	801639e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016444:	697b      	ldr	r3, [r7, #20]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3728      	adds	r7, #40	@ 0x28
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	2000e0a8 	.word	0x2000e0a8

08016454 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801645e:	2004      	movs	r0, #4
 8016460:	f7f6 fc88 	bl	800cd74 <memp_malloc>
 8016464:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d110      	bne.n	801648e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801646c:	6839      	ldr	r1, [r7, #0]
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f7ff ff8e 	bl	8016390 <ip_reass_remove_oldest_datagram>
 8016474:	4602      	mov	r2, r0
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	4293      	cmp	r3, r2
 801647a:	dc03      	bgt.n	8016484 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801647c:	2004      	movs	r0, #4
 801647e:	f7f6 fc79 	bl	800cd74 <memp_malloc>
 8016482:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d101      	bne.n	801648e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801648a:	2300      	movs	r3, #0
 801648c:	e016      	b.n	80164bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801648e:	2220      	movs	r2, #32
 8016490:	2100      	movs	r1, #0
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f001 f9ce 	bl	8017834 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	220f      	movs	r2, #15
 801649c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801649e:	4b09      	ldr	r3, [pc, #36]	@ (80164c4 <ip_reass_enqueue_new_datagram+0x70>)
 80164a0:	681a      	ldr	r2, [r3, #0]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80164a6:	4a07      	ldr	r2, [pc, #28]	@ (80164c4 <ip_reass_enqueue_new_datagram+0x70>)
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	3308      	adds	r3, #8
 80164b0:	2214      	movs	r2, #20
 80164b2:	6879      	ldr	r1, [r7, #4]
 80164b4:	4618      	mov	r0, r3
 80164b6:	f001 fa64 	bl	8017982 <memcpy>
  return ipr;
 80164ba:	68fb      	ldr	r3, [r7, #12]
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	2000e0a8 	.word	0x2000e0a8

080164c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
 80164d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80164d2:	4b10      	ldr	r3, [pc, #64]	@ (8016514 <ip_reass_dequeue_datagram+0x4c>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	687a      	ldr	r2, [r7, #4]
 80164d8:	429a      	cmp	r2, r3
 80164da:	d104      	bne.n	80164e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a0c      	ldr	r2, [pc, #48]	@ (8016514 <ip_reass_dequeue_datagram+0x4c>)
 80164e2:	6013      	str	r3, [r2, #0]
 80164e4:	e00d      	b.n	8016502 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d106      	bne.n	80164fa <ip_reass_dequeue_datagram+0x32>
 80164ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016518 <ip_reass_dequeue_datagram+0x50>)
 80164ee:	f240 1245 	movw	r2, #325	@ 0x145
 80164f2:	490a      	ldr	r1, [pc, #40]	@ (801651c <ip_reass_dequeue_datagram+0x54>)
 80164f4:	480a      	ldr	r0, [pc, #40]	@ (8016520 <ip_reass_dequeue_datagram+0x58>)
 80164f6:	f001 f845 	bl	8017584 <iprintf>
    prev->next = ipr->next;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681a      	ldr	r2, [r3, #0]
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016502:	6879      	ldr	r1, [r7, #4]
 8016504:	2004      	movs	r0, #4
 8016506:	f7f6 fc87 	bl	800ce18 <memp_free>
}
 801650a:	bf00      	nop
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	2000e0a8 	.word	0x2000e0a8
 8016518:	0801b7ac 	.word	0x0801b7ac
 801651c:	0801b874 	.word	0x0801b874
 8016520:	0801b7f4 	.word	0x0801b7f4

08016524 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b08c      	sub	sp, #48	@ 0x30
 8016528:	af00      	add	r7, sp, #0
 801652a:	60f8      	str	r0, [r7, #12]
 801652c:	60b9      	str	r1, [r7, #8]
 801652e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016530:	2300      	movs	r3, #0
 8016532:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016534:	2301      	movs	r3, #1
 8016536:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016538:	68bb      	ldr	r3, [r7, #8]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	885b      	ldrh	r3, [r3, #2]
 8016542:	b29b      	uxth	r3, r3
 8016544:	4618      	mov	r0, r3
 8016546:	f7f5 ff5f 	bl	800c408 <lwip_htons>
 801654a:	4603      	mov	r3, r0
 801654c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	f003 030f 	and.w	r3, r3, #15
 8016556:	b2db      	uxtb	r3, r3
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801655c:	7e7b      	ldrb	r3, [r7, #25]
 801655e:	b29b      	uxth	r3, r3
 8016560:	8b7a      	ldrh	r2, [r7, #26]
 8016562:	429a      	cmp	r2, r3
 8016564:	d202      	bcs.n	801656c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016566:	f04f 33ff 	mov.w	r3, #4294967295
 801656a:	e135      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801656c:	7e7b      	ldrb	r3, [r7, #25]
 801656e:	b29b      	uxth	r3, r3
 8016570:	8b7a      	ldrh	r2, [r7, #26]
 8016572:	1ad3      	subs	r3, r2, r3
 8016574:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016576:	69fb      	ldr	r3, [r7, #28]
 8016578:	88db      	ldrh	r3, [r3, #6]
 801657a:	b29b      	uxth	r3, r3
 801657c:	4618      	mov	r0, r3
 801657e:	f7f5 ff43 	bl	800c408 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016588:	b29b      	uxth	r3, r3
 801658a:	00db      	lsls	r3, r3, #3
 801658c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801658e:	68bb      	ldr	r3, [r7, #8]
 8016590:	685b      	ldr	r3, [r3, #4]
 8016592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8016594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016596:	2200      	movs	r2, #0
 8016598:	701a      	strb	r2, [r3, #0]
 801659a:	2200      	movs	r2, #0
 801659c:	705a      	strb	r2, [r3, #1]
 801659e:	2200      	movs	r2, #0
 80165a0:	709a      	strb	r2, [r3, #2]
 80165a2:	2200      	movs	r2, #0
 80165a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80165a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165a8:	8afa      	ldrh	r2, [r7, #22]
 80165aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80165ac:	8afa      	ldrh	r2, [r7, #22]
 80165ae:	8b7b      	ldrh	r3, [r7, #26]
 80165b0:	4413      	add	r3, r2
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80165b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165ba:	88db      	ldrh	r3, [r3, #6]
 80165bc:	b29b      	uxth	r3, r3
 80165be:	8afa      	ldrh	r2, [r7, #22]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	d902      	bls.n	80165ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80165c4:	f04f 33ff 	mov.w	r3, #4294967295
 80165c8:	e106      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	685b      	ldr	r3, [r3, #4]
 80165ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80165d0:	e068      	b.n	80166a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80165d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165d4:	685b      	ldr	r3, [r3, #4]
 80165d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80165d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165da:	889b      	ldrh	r3, [r3, #4]
 80165dc:	b29a      	uxth	r2, r3
 80165de:	693b      	ldr	r3, [r7, #16]
 80165e0:	889b      	ldrh	r3, [r3, #4]
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d235      	bcs.n	8016654 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80165e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80165ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d020      	beq.n	8016636 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80165f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f6:	889b      	ldrh	r3, [r3, #4]
 80165f8:	b29a      	uxth	r2, r3
 80165fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165fc:	88db      	ldrh	r3, [r3, #6]
 80165fe:	b29b      	uxth	r3, r3
 8016600:	429a      	cmp	r2, r3
 8016602:	d307      	bcc.n	8016614 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016606:	88db      	ldrh	r3, [r3, #6]
 8016608:	b29a      	uxth	r2, r3
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	889b      	ldrh	r3, [r3, #4]
 801660e:	b29b      	uxth	r3, r3
 8016610:	429a      	cmp	r2, r3
 8016612:	d902      	bls.n	801661a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016614:	f04f 33ff 	mov.w	r3, #4294967295
 8016618:	e0de      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801661c:	68ba      	ldr	r2, [r7, #8]
 801661e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016622:	88db      	ldrh	r3, [r3, #6]
 8016624:	b29a      	uxth	r2, r3
 8016626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016628:	889b      	ldrh	r3, [r3, #4]
 801662a:	b29b      	uxth	r3, r3
 801662c:	429a      	cmp	r2, r3
 801662e:	d03d      	beq.n	80166ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016630:	2300      	movs	r3, #0
 8016632:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016634:	e03a      	b.n	80166ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016638:	88db      	ldrh	r3, [r3, #6]
 801663a:	b29a      	uxth	r2, r3
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	889b      	ldrh	r3, [r3, #4]
 8016640:	b29b      	uxth	r3, r3
 8016642:	429a      	cmp	r2, r3
 8016644:	d902      	bls.n	801664c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016646:	f04f 33ff 	mov.w	r3, #4294967295
 801664a:	e0c5      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	68ba      	ldr	r2, [r7, #8]
 8016650:	605a      	str	r2, [r3, #4]
      break;
 8016652:	e02b      	b.n	80166ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016656:	889b      	ldrh	r3, [r3, #4]
 8016658:	b29a      	uxth	r2, r3
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	889b      	ldrh	r3, [r3, #4]
 801665e:	b29b      	uxth	r3, r3
 8016660:	429a      	cmp	r2, r3
 8016662:	d102      	bne.n	801666a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016664:	f04f 33ff 	mov.w	r3, #4294967295
 8016668:	e0b6      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801666c:	889b      	ldrh	r3, [r3, #4]
 801666e:	b29a      	uxth	r2, r3
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	88db      	ldrh	r3, [r3, #6]
 8016674:	b29b      	uxth	r3, r3
 8016676:	429a      	cmp	r2, r3
 8016678:	d202      	bcs.n	8016680 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801667a:	f04f 33ff 	mov.w	r3, #4294967295
 801667e:	e0ab      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016682:	2b00      	cmp	r3, #0
 8016684:	d009      	beq.n	801669a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016688:	88db      	ldrh	r3, [r3, #6]
 801668a:	b29a      	uxth	r2, r3
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	889b      	ldrh	r3, [r3, #4]
 8016690:	b29b      	uxth	r3, r3
 8016692:	429a      	cmp	r2, r3
 8016694:	d001      	beq.n	801669a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016696:	2300      	movs	r3, #0
 8016698:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80166a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d193      	bne.n	80165d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80166aa:	e000      	b.n	80166ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80166ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80166ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d12d      	bne.n	8016710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80166b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d01c      	beq.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80166ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166bc:	88db      	ldrh	r3, [r3, #6]
 80166be:	b29a      	uxth	r2, r3
 80166c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c2:	889b      	ldrh	r3, [r3, #4]
 80166c4:	b29b      	uxth	r3, r3
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d906      	bls.n	80166d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80166ca:	4b45      	ldr	r3, [pc, #276]	@ (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166cc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80166d0:	4944      	ldr	r1, [pc, #272]	@ (80167e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80166d2:	4845      	ldr	r0, [pc, #276]	@ (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166d4:	f000 ff56 	bl	8017584 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80166d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166da:	68ba      	ldr	r2, [r7, #8]
 80166dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80166de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166e0:	88db      	ldrh	r3, [r3, #6]
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e6:	889b      	ldrh	r3, [r3, #4]
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d010      	beq.n	8016710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80166ee:	2300      	movs	r3, #0
 80166f0:	623b      	str	r3, [r7, #32]
 80166f2:	e00d      	b.n	8016710 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	685b      	ldr	r3, [r3, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d006      	beq.n	801670a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80166fc:	4b38      	ldr	r3, [pc, #224]	@ (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166fe:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016702:	493a      	ldr	r1, [pc, #232]	@ (80167ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016704:	4838      	ldr	r0, [pc, #224]	@ (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016706:	f000 ff3d 	bl	8017584 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	68ba      	ldr	r2, [r7, #8]
 801670e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d105      	bne.n	8016722 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	7f9b      	ldrb	r3, [r3, #30]
 801671a:	f003 0301 	and.w	r3, r3, #1
 801671e:	2b00      	cmp	r3, #0
 8016720:	d059      	beq.n	80167d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d04f      	beq.n	80167c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d006      	beq.n	801673e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	889b      	ldrh	r3, [r3, #4]
 8016738:	b29b      	uxth	r3, r3
 801673a:	2b00      	cmp	r3, #0
 801673c:	d002      	beq.n	8016744 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	623b      	str	r3, [r7, #32]
 8016742:	e041      	b.n	80167c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016746:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801674e:	e012      	b.n	8016776 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016758:	88db      	ldrh	r3, [r3, #6]
 801675a:	b29a      	uxth	r2, r3
 801675c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801675e:	889b      	ldrh	r3, [r3, #4]
 8016760:	b29b      	uxth	r3, r3
 8016762:	429a      	cmp	r2, r3
 8016764:	d002      	beq.n	801676c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016766:	2300      	movs	r3, #0
 8016768:	623b      	str	r3, [r7, #32]
            break;
 801676a:	e007      	b.n	801677c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801676e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8016770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8016776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016778:	2b00      	cmp	r3, #0
 801677a:	d1e9      	bne.n	8016750 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801677c:	6a3b      	ldr	r3, [r7, #32]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d022      	beq.n	80167c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d106      	bne.n	8016798 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801678a:	4b15      	ldr	r3, [pc, #84]	@ (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801678c:	f240 12df 	movw	r2, #479	@ 0x1df
 8016790:	4917      	ldr	r1, [pc, #92]	@ (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016792:	4815      	ldr	r0, [pc, #84]	@ (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016794:	f000 fef6 	bl	8017584 <iprintf>
          LWIP_ASSERT("sanity check",
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	685b      	ldr	r3, [r3, #4]
 801679e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d106      	bne.n	80167b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80167a4:	4b0e      	ldr	r3, [pc, #56]	@ (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80167aa:	4911      	ldr	r1, [pc, #68]	@ (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80167ac:	480e      	ldr	r0, [pc, #56]	@ (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167ae:	f000 fee9 	bl	8017584 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80167b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d006      	beq.n	80167c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80167ba:	4b09      	ldr	r3, [pc, #36]	@ (80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80167bc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80167c0:	490c      	ldr	r1, [pc, #48]	@ (80167f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80167c2:	4809      	ldr	r0, [pc, #36]	@ (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80167c4:	f000 fede 	bl	8017584 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80167c8:	6a3b      	ldr	r3, [r7, #32]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	bf14      	ite	ne
 80167ce:	2301      	movne	r3, #1
 80167d0:	2300      	moveq	r3, #0
 80167d2:	b2db      	uxtb	r3, r3
 80167d4:	e000      	b.n	80167d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80167d6:	2300      	movs	r3, #0
}
 80167d8:	4618      	mov	r0, r3
 80167da:	3730      	adds	r7, #48	@ 0x30
 80167dc:	46bd      	mov	sp, r7
 80167de:	bd80      	pop	{r7, pc}
 80167e0:	0801b7ac 	.word	0x0801b7ac
 80167e4:	0801b890 	.word	0x0801b890
 80167e8:	0801b7f4 	.word	0x0801b7f4
 80167ec:	0801b8b0 	.word	0x0801b8b0
 80167f0:	0801b8e8 	.word	0x0801b8e8
 80167f4:	0801b8f8 	.word	0x0801b8f8

080167f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b08e      	sub	sp, #56	@ 0x38
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	685b      	ldr	r3, [r3, #4]
 8016804:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	f003 030f 	and.w	r3, r3, #15
 801680e:	b2db      	uxtb	r3, r3
 8016810:	009b      	lsls	r3, r3, #2
 8016812:	b2db      	uxtb	r3, r3
 8016814:	2b14      	cmp	r3, #20
 8016816:	f040 8171 	bne.w	8016afc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	b29b      	uxth	r3, r3
 8016820:	4618      	mov	r0, r3
 8016822:	f7f5 fdf1 	bl	800c408 <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801682c:	b29b      	uxth	r3, r3
 801682e:	00db      	lsls	r3, r3, #3
 8016830:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016834:	885b      	ldrh	r3, [r3, #2]
 8016836:	b29b      	uxth	r3, r3
 8016838:	4618      	mov	r0, r3
 801683a:	f7f5 fde5 	bl	800c408 <lwip_htons>
 801683e:	4603      	mov	r3, r0
 8016840:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	f003 030f 	and.w	r3, r3, #15
 801684a:	b2db      	uxtb	r3, r3
 801684c:	009b      	lsls	r3, r3, #2
 801684e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016852:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016856:	b29b      	uxth	r3, r3
 8016858:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801685a:	429a      	cmp	r2, r3
 801685c:	f0c0 8150 	bcc.w	8016b00 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016860:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016864:	b29b      	uxth	r3, r3
 8016866:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8016868:	1ad3      	subs	r3, r2, r3
 801686a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f7f7 fa05 	bl	800dc7c <pbuf_clen>
 8016872:	4603      	mov	r3, r0
 8016874:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016876:	4b8c      	ldr	r3, [pc, #560]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	461a      	mov	r2, r3
 801687c:	8c3b      	ldrh	r3, [r7, #32]
 801687e:	4413      	add	r3, r2
 8016880:	2b0a      	cmp	r3, #10
 8016882:	dd10      	ble.n	80168a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016884:	8c3b      	ldrh	r3, [r7, #32]
 8016886:	4619      	mov	r1, r3
 8016888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801688a:	f7ff fd81 	bl	8016390 <ip_reass_remove_oldest_datagram>
 801688e:	4603      	mov	r3, r0
 8016890:	2b00      	cmp	r3, #0
 8016892:	f000 8137 	beq.w	8016b04 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016896:	4b84      	ldr	r3, [pc, #528]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	461a      	mov	r2, r3
 801689c:	8c3b      	ldrh	r3, [r7, #32]
 801689e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80168a0:	2b0a      	cmp	r3, #10
 80168a2:	f300 812f 	bgt.w	8016b04 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80168a6:	4b81      	ldr	r3, [pc, #516]	@ (8016aac <ip4_reass+0x2b4>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80168ac:	e015      	b.n	80168da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80168ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168b0:	695a      	ldr	r2, [r3, #20]
 80168b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168b4:	68db      	ldr	r3, [r3, #12]
 80168b6:	429a      	cmp	r2, r3
 80168b8:	d10c      	bne.n	80168d4 <ip4_reass+0xdc>
 80168ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168bc:	699a      	ldr	r2, [r3, #24]
 80168be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168c0:	691b      	ldr	r3, [r3, #16]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d106      	bne.n	80168d4 <ip4_reass+0xdc>
 80168c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168c8:	899a      	ldrh	r2, [r3, #12]
 80168ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80168cc:	889b      	ldrh	r3, [r3, #4]
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d006      	beq.n	80168e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80168d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80168da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d1e6      	bne.n	80168ae <ip4_reass+0xb6>
 80168e0:	e000      	b.n	80168e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80168e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80168e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d109      	bne.n	80168fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80168ea:	8c3b      	ldrh	r3, [r7, #32]
 80168ec:	4619      	mov	r1, r3
 80168ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80168f0:	f7ff fdb0 	bl	8016454 <ip_reass_enqueue_new_datagram>
 80168f4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80168f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d11c      	bne.n	8016936 <ip4_reass+0x13e>
      goto nullreturn;
 80168fc:	e105      	b.n	8016b0a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80168fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016900:	88db      	ldrh	r3, [r3, #6]
 8016902:	b29b      	uxth	r3, r3
 8016904:	4618      	mov	r0, r3
 8016906:	f7f5 fd7f 	bl	800c408 <lwip_htons>
 801690a:	4603      	mov	r3, r0
 801690c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016910:	2b00      	cmp	r3, #0
 8016912:	d110      	bne.n	8016936 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016916:	89db      	ldrh	r3, [r3, #14]
 8016918:	4618      	mov	r0, r3
 801691a:	f7f5 fd75 	bl	800c408 <lwip_htons>
 801691e:	4603      	mov	r3, r0
 8016920:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016924:	2b00      	cmp	r3, #0
 8016926:	d006      	beq.n	8016936 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801692a:	3308      	adds	r3, #8
 801692c:	2214      	movs	r2, #20
 801692e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016930:	4618      	mov	r0, r3
 8016932:	f001 f826 	bl	8017982 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016938:	88db      	ldrh	r3, [r3, #6]
 801693a:	b29b      	uxth	r3, r3
 801693c:	f003 0320 	and.w	r3, r3, #32
 8016940:	2b00      	cmp	r3, #0
 8016942:	bf0c      	ite	eq
 8016944:	2301      	moveq	r3, #1
 8016946:	2300      	movne	r3, #0
 8016948:	b2db      	uxtb	r3, r3
 801694a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d00e      	beq.n	8016970 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016952:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016956:	4413      	add	r3, r2
 8016958:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801695a:	8b7a      	ldrh	r2, [r7, #26]
 801695c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801695e:	429a      	cmp	r2, r3
 8016960:	f0c0 80a0 	bcc.w	8016aa4 <ip4_reass+0x2ac>
 8016964:	8b7b      	ldrh	r3, [r7, #26]
 8016966:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801696a:	4293      	cmp	r3, r2
 801696c:	f200 809a 	bhi.w	8016aa4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016970:	69fa      	ldr	r2, [r7, #28]
 8016972:	6879      	ldr	r1, [r7, #4]
 8016974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016976:	f7ff fdd5 	bl	8016524 <ip_reass_chain_frag_into_datagram_and_validate>
 801697a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016982:	f000 809b 	beq.w	8016abc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016986:	4b48      	ldr	r3, [pc, #288]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016988:	881a      	ldrh	r2, [r3, #0]
 801698a:	8c3b      	ldrh	r3, [r7, #32]
 801698c:	4413      	add	r3, r2
 801698e:	b29a      	uxth	r2, r3
 8016990:	4b45      	ldr	r3, [pc, #276]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016992:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00d      	beq.n	80169b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801699a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801699c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801699e:	4413      	add	r3, r2
 80169a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80169a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169a4:	8a7a      	ldrh	r2, [r7, #18]
 80169a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80169a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169aa:	7f9b      	ldrb	r3, [r3, #30]
 80169ac:	f043 0301 	orr.w	r3, r3, #1
 80169b0:	b2da      	uxtb	r2, r3
 80169b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b01      	cmp	r3, #1
 80169ba:	d171      	bne.n	8016aa0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80169bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169be:	8b9b      	ldrh	r3, [r3, #28]
 80169c0:	3314      	adds	r3, #20
 80169c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80169c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80169ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169d0:	685b      	ldr	r3, [r3, #4]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80169d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169d8:	3308      	adds	r3, #8
 80169da:	2214      	movs	r2, #20
 80169dc:	4619      	mov	r1, r3
 80169de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169e0:	f000 ffcf 	bl	8017982 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80169e4:	8a3b      	ldrh	r3, [r7, #16]
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7f5 fd0e 	bl	800c408 <lwip_htons>
 80169ec:	4603      	mov	r3, r0
 80169ee:	461a      	mov	r2, r3
 80169f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80169f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169f6:	2200      	movs	r2, #0
 80169f8:	719a      	strb	r2, [r3, #6]
 80169fa:	2200      	movs	r2, #0
 80169fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80169fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a00:	2200      	movs	r2, #0
 8016a02:	729a      	strb	r2, [r3, #10]
 8016a04:	2200      	movs	r2, #0
 8016a06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a0e:	e00d      	b.n	8016a2c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016a16:	2114      	movs	r1, #20
 8016a18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016a1a:	f7f7 f81b 	bl	800da54 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016a1e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7f7 f96b 	bl	800dcfc <pbuf_cat>
      r = iprh->next_pbuf;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d1ee      	bne.n	8016a10 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016a32:	4b1e      	ldr	r3, [pc, #120]	@ (8016aac <ip4_reass+0x2b4>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d102      	bne.n	8016a42 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a40:	e010      	b.n	8016a64 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a42:	4b1a      	ldr	r3, [pc, #104]	@ (8016aac <ip4_reass+0x2b4>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a48:	e007      	b.n	8016a5a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d006      	beq.n	8016a62 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d1f4      	bne.n	8016a4a <ip4_reass+0x252>
 8016a60:	e000      	b.n	8016a64 <ip4_reass+0x26c>
          break;
 8016a62:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016a66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016a68:	f7ff fd2e 	bl	80164c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f7f7 f905 	bl	800dc7c <pbuf_clen>
 8016a72:	4603      	mov	r3, r0
 8016a74:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016a76:	4b0c      	ldr	r3, [pc, #48]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016a78:	881b      	ldrh	r3, [r3, #0]
 8016a7a:	8c3a      	ldrh	r2, [r7, #32]
 8016a7c:	429a      	cmp	r2, r3
 8016a7e:	d906      	bls.n	8016a8e <ip4_reass+0x296>
 8016a80:	4b0b      	ldr	r3, [pc, #44]	@ (8016ab0 <ip4_reass+0x2b8>)
 8016a82:	f240 229b 	movw	r2, #667	@ 0x29b
 8016a86:	490b      	ldr	r1, [pc, #44]	@ (8016ab4 <ip4_reass+0x2bc>)
 8016a88:	480b      	ldr	r0, [pc, #44]	@ (8016ab8 <ip4_reass+0x2c0>)
 8016a8a:	f000 fd7b 	bl	8017584 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016a8e:	4b06      	ldr	r3, [pc, #24]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016a90:	881a      	ldrh	r2, [r3, #0]
 8016a92:	8c3b      	ldrh	r3, [r7, #32]
 8016a94:	1ad3      	subs	r3, r2, r3
 8016a96:	b29a      	uxth	r2, r3
 8016a98:	4b03      	ldr	r3, [pc, #12]	@ (8016aa8 <ip4_reass+0x2b0>)
 8016a9a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	e038      	b.n	8016b12 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	e036      	b.n	8016b12 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016aa4:	bf00      	nop
 8016aa6:	e00a      	b.n	8016abe <ip4_reass+0x2c6>
 8016aa8:	2000e0ac 	.word	0x2000e0ac
 8016aac:	2000e0a8 	.word	0x2000e0a8
 8016ab0:	0801b7ac 	.word	0x0801b7ac
 8016ab4:	0801b91c 	.word	0x0801b91c
 8016ab8:	0801b7f4 	.word	0x0801b7f4
    goto nullreturn_ipr;
 8016abc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d106      	bne.n	8016ad2 <ip4_reass+0x2da>
 8016ac4:	4b15      	ldr	r3, [pc, #84]	@ (8016b1c <ip4_reass+0x324>)
 8016ac6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016aca:	4915      	ldr	r1, [pc, #84]	@ (8016b20 <ip4_reass+0x328>)
 8016acc:	4815      	ldr	r0, [pc, #84]	@ (8016b24 <ip4_reass+0x32c>)
 8016ace:	f000 fd59 	bl	8017584 <iprintf>
  if (ipr->p == NULL) {
 8016ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d116      	bne.n	8016b08 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016ada:	4b13      	ldr	r3, [pc, #76]	@ (8016b28 <ip4_reass+0x330>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d006      	beq.n	8016af2 <ip4_reass+0x2fa>
 8016ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8016b1c <ip4_reass+0x324>)
 8016ae6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016aea:	4910      	ldr	r1, [pc, #64]	@ (8016b2c <ip4_reass+0x334>)
 8016aec:	480d      	ldr	r0, [pc, #52]	@ (8016b24 <ip4_reass+0x32c>)
 8016aee:	f000 fd49 	bl	8017584 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016af2:	2100      	movs	r1, #0
 8016af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016af6:	f7ff fce7 	bl	80164c8 <ip_reass_dequeue_datagram>
 8016afa:	e006      	b.n	8016b0a <ip4_reass+0x312>
    goto nullreturn;
 8016afc:	bf00      	nop
 8016afe:	e004      	b.n	8016b0a <ip4_reass+0x312>
    goto nullreturn;
 8016b00:	bf00      	nop
 8016b02:	e002      	b.n	8016b0a <ip4_reass+0x312>
      goto nullreturn;
 8016b04:	bf00      	nop
 8016b06:	e000      	b.n	8016b0a <ip4_reass+0x312>
  }

nullreturn:
 8016b08:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7f7 f828 	bl	800db60 <pbuf_free>
  return NULL;
 8016b10:	2300      	movs	r3, #0
}
 8016b12:	4618      	mov	r0, r3
 8016b14:	3738      	adds	r7, #56	@ 0x38
 8016b16:	46bd      	mov	sp, r7
 8016b18:	bd80      	pop	{r7, pc}
 8016b1a:	bf00      	nop
 8016b1c:	0801b7ac 	.word	0x0801b7ac
 8016b20:	0801b938 	.word	0x0801b938
 8016b24:	0801b7f4 	.word	0x0801b7f4
 8016b28:	2000e0a8 	.word	0x2000e0a8
 8016b2c:	0801b944 	.word	0x0801b944

08016b30 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016b34:	2005      	movs	r0, #5
 8016b36:	f7f6 f91d 	bl	800cd74 <memp_malloc>
 8016b3a:	4603      	mov	r3, r0
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	bd80      	pop	{r7, pc}

08016b40 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b082      	sub	sp, #8
 8016b44:	af00      	add	r7, sp, #0
 8016b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <ip_frag_free_pbuf_custom_ref+0x1c>
 8016b4e:	4b07      	ldr	r3, [pc, #28]	@ (8016b6c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016b50:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016b54:	4906      	ldr	r1, [pc, #24]	@ (8016b70 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016b56:	4807      	ldr	r0, [pc, #28]	@ (8016b74 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016b58:	f000 fd14 	bl	8017584 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016b5c:	6879      	ldr	r1, [r7, #4]
 8016b5e:	2005      	movs	r0, #5
 8016b60:	f7f6 f95a 	bl	800ce18 <memp_free>
}
 8016b64:	bf00      	nop
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}
 8016b6c:	0801b7ac 	.word	0x0801b7ac
 8016b70:	0801b964 	.word	0x0801b964
 8016b74:	0801b7f4 	.word	0x0801b7f4

08016b78 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016b84:	68fb      	ldr	r3, [r7, #12]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <ipfrag_free_pbuf_custom+0x20>
 8016b8a:	4b11      	ldr	r3, [pc, #68]	@ (8016bd0 <ipfrag_free_pbuf_custom+0x58>)
 8016b8c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016b90:	4910      	ldr	r1, [pc, #64]	@ (8016bd4 <ipfrag_free_pbuf_custom+0x5c>)
 8016b92:	4811      	ldr	r0, [pc, #68]	@ (8016bd8 <ipfrag_free_pbuf_custom+0x60>)
 8016b94:	f000 fcf6 	bl	8017584 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016b98:	68fa      	ldr	r2, [r7, #12]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d006      	beq.n	8016bae <ipfrag_free_pbuf_custom+0x36>
 8016ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8016bd0 <ipfrag_free_pbuf_custom+0x58>)
 8016ba2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016ba6:	490d      	ldr	r1, [pc, #52]	@ (8016bdc <ipfrag_free_pbuf_custom+0x64>)
 8016ba8:	480b      	ldr	r0, [pc, #44]	@ (8016bd8 <ipfrag_free_pbuf_custom+0x60>)
 8016baa:	f000 fceb 	bl	8017584 <iprintf>
  if (pcr->original != NULL) {
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	695b      	ldr	r3, [r3, #20]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d004      	beq.n	8016bc0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f6 ffd0 	bl	800db60 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016bc0:	68f8      	ldr	r0, [r7, #12]
 8016bc2:	f7ff ffbd 	bl	8016b40 <ip_frag_free_pbuf_custom_ref>
}
 8016bc6:	bf00      	nop
 8016bc8:	3710      	adds	r7, #16
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	0801b7ac 	.word	0x0801b7ac
 8016bd4:	0801b970 	.word	0x0801b970
 8016bd8:	0801b7f4 	.word	0x0801b7f4
 8016bdc:	0801b97c 	.word	0x0801b97c

08016be0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b094      	sub	sp, #80	@ 0x50
 8016be4:	af02      	add	r7, sp, #8
 8016be6:	60f8      	str	r0, [r7, #12]
 8016be8:	60b9      	str	r1, [r7, #8]
 8016bea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016bec:	2300      	movs	r3, #0
 8016bee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016bf6:	3b14      	subs	r3, #20
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	da00      	bge.n	8016bfe <ip4_frag+0x1e>
 8016bfc:	3307      	adds	r3, #7
 8016bfe:	10db      	asrs	r3, r3, #3
 8016c00:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016c02:	2314      	movs	r3, #20
 8016c04:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c0e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	f003 030f 	and.w	r3, r3, #15
 8016c18:	b2db      	uxtb	r3, r3
 8016c1a:	009b      	lsls	r3, r3, #2
 8016c1c:	b2db      	uxtb	r3, r3
 8016c1e:	2b14      	cmp	r3, #20
 8016c20:	d002      	beq.n	8016c28 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016c22:	f06f 0305 	mvn.w	r3, #5
 8016c26:	e110      	b.n	8016e4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	895b      	ldrh	r3, [r3, #10]
 8016c2c:	2b13      	cmp	r3, #19
 8016c2e:	d809      	bhi.n	8016c44 <ip4_frag+0x64>
 8016c30:	4b88      	ldr	r3, [pc, #544]	@ (8016e54 <ip4_frag+0x274>)
 8016c32:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016c36:	4988      	ldr	r1, [pc, #544]	@ (8016e58 <ip4_frag+0x278>)
 8016c38:	4888      	ldr	r0, [pc, #544]	@ (8016e5c <ip4_frag+0x27c>)
 8016c3a:	f000 fca3 	bl	8017584 <iprintf>
 8016c3e:	f06f 0305 	mvn.w	r3, #5
 8016c42:	e102      	b.n	8016e4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c46:	88db      	ldrh	r3, [r3, #6]
 8016c48:	b29b      	uxth	r3, r3
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7f5 fbdc 	bl	800c408 <lwip_htons>
 8016c50:	4603      	mov	r3, r0
 8016c52:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016c54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016c56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016c5a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016c5e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016c64:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	891b      	ldrh	r3, [r3, #8]
 8016c6a:	3b14      	subs	r3, #20
 8016c6c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016c70:	e0e1      	b.n	8016e36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016c72:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016c74:	00db      	lsls	r3, r3, #3
 8016c76:	b29b      	uxth	r3, r3
 8016c78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	bf28      	it	cs
 8016c80:	4613      	movcs	r3, r2
 8016c82:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016c84:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016c88:	2114      	movs	r1, #20
 8016c8a:	200e      	movs	r0, #14
 8016c8c:	f7f6 fc84 	bl	800d598 <pbuf_alloc>
 8016c90:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	f000 80d5 	beq.w	8016e44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c9c:	895b      	ldrh	r3, [r3, #10]
 8016c9e:	2b13      	cmp	r3, #19
 8016ca0:	d806      	bhi.n	8016cb0 <ip4_frag+0xd0>
 8016ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8016e54 <ip4_frag+0x274>)
 8016ca4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016ca8:	496d      	ldr	r1, [pc, #436]	@ (8016e60 <ip4_frag+0x280>)
 8016caa:	486c      	ldr	r0, [pc, #432]	@ (8016e5c <ip4_frag+0x27c>)
 8016cac:	f000 fc6a 	bl	8017584 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	2214      	movs	r2, #20
 8016cb6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f000 fe62 	bl	8017982 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016cc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016cc6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016cca:	e064      	b.n	8016d96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	895a      	ldrh	r2, [r3, #10]
 8016cd0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016cd2:	1ad3      	subs	r3, r2, r3
 8016cd4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	895b      	ldrh	r3, [r3, #10]
 8016cda:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d906      	bls.n	8016cee <ip4_frag+0x10e>
 8016ce0:	4b5c      	ldr	r3, [pc, #368]	@ (8016e54 <ip4_frag+0x274>)
 8016ce2:	f240 322d 	movw	r2, #813	@ 0x32d
 8016ce6:	495f      	ldr	r1, [pc, #380]	@ (8016e64 <ip4_frag+0x284>)
 8016ce8:	485c      	ldr	r0, [pc, #368]	@ (8016e5c <ip4_frag+0x27c>)
 8016cea:	f000 fc4b 	bl	8017584 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016cee:	8bfa      	ldrh	r2, [r7, #30]
 8016cf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016cf4:	4293      	cmp	r3, r2
 8016cf6:	bf28      	it	cs
 8016cf8:	4613      	movcs	r3, r2
 8016cfa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016cfe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d105      	bne.n	8016d12 <ip4_frag+0x132>
        poff = 0;
 8016d06:	2300      	movs	r3, #0
 8016d08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	60fb      	str	r3, [r7, #12]
        continue;
 8016d10:	e041      	b.n	8016d96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016d12:	f7ff ff0d 	bl	8016b30 <ip_frag_alloc_pbuf_custom_ref>
 8016d16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016d18:	69bb      	ldr	r3, [r7, #24]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d103      	bne.n	8016d26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016d1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d20:	f7f6 ff1e 	bl	800db60 <pbuf_free>
        goto memerr;
 8016d24:	e08f      	b.n	8016e46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016d2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016d2e:	4413      	add	r3, r2
 8016d30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016d34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016d38:	9201      	str	r2, [sp, #4]
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	2241      	movs	r2, #65	@ 0x41
 8016d40:	2000      	movs	r0, #0
 8016d42:	f7f6 fd53 	bl	800d7ec <pbuf_alloced_custom>
 8016d46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d106      	bne.n	8016d5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016d4e:	69b8      	ldr	r0, [r7, #24]
 8016d50:	f7ff fef6 	bl	8016b40 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d56:	f7f6 ff03 	bl	800db60 <pbuf_free>
        goto memerr;
 8016d5a:	e074      	b.n	8016e46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f7f6 ffa5 	bl	800dcac <pbuf_ref>
      pcr->original = p;
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	68fa      	ldr	r2, [r7, #12]
 8016d66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016d68:	69bb      	ldr	r3, [r7, #24]
 8016d6a:	4a3f      	ldr	r2, [pc, #252]	@ (8016e68 <ip4_frag+0x288>)
 8016d6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016d6e:	6979      	ldr	r1, [r7, #20]
 8016d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d72:	f7f6 ffc3 	bl	800dcfc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016d76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016d7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016d7e:	1ad3      	subs	r3, r2, r3
 8016d80:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016d84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d004      	beq.n	8016d96 <ip4_frag+0x1b6>
        poff = 0;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016d96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d196      	bne.n	8016ccc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016d9e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016da0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016da4:	4413      	add	r3, r2
 8016da6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016dac:	f1a3 0213 	sub.w	r2, r3, #19
 8016db0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016db4:	429a      	cmp	r2, r3
 8016db6:	bfcc      	ite	gt
 8016db8:	2301      	movgt	r3, #1
 8016dba:	2300      	movle	r3, #0
 8016dbc:	b2db      	uxtb	r3, r3
 8016dbe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016dc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016dc8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016dca:	6a3b      	ldr	r3, [r7, #32]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d002      	beq.n	8016dd6 <ip4_frag+0x1f6>
 8016dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d003      	beq.n	8016dde <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016dd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016dd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016ddc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016dde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7f5 fb11 	bl	800c408 <lwip_htons>
 8016de6:	4603      	mov	r3, r0
 8016de8:	461a      	mov	r2, r3
 8016dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016dee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016df0:	3314      	adds	r3, #20
 8016df2:	b29b      	uxth	r3, r3
 8016df4:	4618      	mov	r0, r3
 8016df6:	f7f5 fb07 	bl	800c408 <lwip_htons>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e04:	2200      	movs	r2, #0
 8016e06:	729a      	strb	r2, [r3, #10]
 8016e08:	2200      	movs	r2, #0
 8016e0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	695b      	ldr	r3, [r3, #20]
 8016e10:	687a      	ldr	r2, [r7, #4]
 8016e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016e14:	68b8      	ldr	r0, [r7, #8]
 8016e16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016e1a:	f7f6 fea1 	bl	800db60 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016e1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016e22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016e24:	1ad3      	subs	r3, r2, r3
 8016e26:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016e2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016e2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016e30:	4413      	add	r3, r2
 8016e32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016e36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f47f af19 	bne.w	8016c72 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016e40:	2300      	movs	r3, #0
 8016e42:	e002      	b.n	8016e4a <ip4_frag+0x26a>
      goto memerr;
 8016e44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016e46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3748      	adds	r7, #72	@ 0x48
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801b7ac 	.word	0x0801b7ac
 8016e58:	0801b988 	.word	0x0801b988
 8016e5c:	0801b7f4 	.word	0x0801b7f4
 8016e60:	0801b9a4 	.word	0x0801b9a4
 8016e64:	0801b9c4 	.word	0x0801b9c4
 8016e68:	08016b79 	.word	0x08016b79

08016e6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b086      	sub	sp, #24
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
 8016e74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016e76:	230e      	movs	r3, #14
 8016e78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	895b      	ldrh	r3, [r3, #10]
 8016e7e:	2b0e      	cmp	r3, #14
 8016e80:	d96e      	bls.n	8016f60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	7bdb      	ldrb	r3, [r3, #15]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d106      	bne.n	8016e98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016e8a:	683b      	ldr	r3, [r7, #0]
 8016e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016e90:	3301      	adds	r3, #1
 8016e92:	b2da      	uxtb	r2, r3
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	685b      	ldr	r3, [r3, #4]
 8016e9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	7b1a      	ldrb	r2, [r3, #12]
 8016ea2:	7b5b      	ldrb	r3, [r3, #13]
 8016ea4:	021b      	lsls	r3, r3, #8
 8016ea6:	4313      	orrs	r3, r2
 8016ea8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	781b      	ldrb	r3, [r3, #0]
 8016eae:	f003 0301 	and.w	r3, r3, #1
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d023      	beq.n	8016efe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	2b01      	cmp	r3, #1
 8016ebc:	d10f      	bne.n	8016ede <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	785b      	ldrb	r3, [r3, #1]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d11b      	bne.n	8016efe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016eca:	2b5e      	cmp	r3, #94	@ 0x5e
 8016ecc:	d117      	bne.n	8016efe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	7b5b      	ldrb	r3, [r3, #13]
 8016ed2:	f043 0310 	orr.w	r3, r3, #16
 8016ed6:	b2da      	uxtb	r2, r3
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	735a      	strb	r2, [r3, #13]
 8016edc:	e00f      	b.n	8016efe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016ede:	693b      	ldr	r3, [r7, #16]
 8016ee0:	2206      	movs	r2, #6
 8016ee2:	4928      	ldr	r1, [pc, #160]	@ (8016f84 <ethernet_input+0x118>)
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f000 fc95 	bl	8017814 <memcmp>
 8016eea:	4603      	mov	r3, r0
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d106      	bne.n	8016efe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	7b5b      	ldrb	r3, [r3, #13]
 8016ef4:	f043 0308 	orr.w	r3, r3, #8
 8016ef8:	b2da      	uxtb	r2, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016efe:	89fb      	ldrh	r3, [r7, #14]
 8016f00:	2b08      	cmp	r3, #8
 8016f02:	d003      	beq.n	8016f0c <ethernet_input+0xa0>
 8016f04:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016f08:	d014      	beq.n	8016f34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016f0a:	e032      	b.n	8016f72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016f12:	f003 0308 	and.w	r3, r3, #8
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d024      	beq.n	8016f64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f1a:	8afb      	ldrh	r3, [r7, #22]
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	6878      	ldr	r0, [r7, #4]
 8016f20:	f7f6 fd98 	bl	800da54 <pbuf_remove_header>
 8016f24:	4603      	mov	r3, r0
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d11e      	bne.n	8016f68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016f2a:	6839      	ldr	r1, [r7, #0]
 8016f2c:	6878      	ldr	r0, [r7, #4]
 8016f2e:	f7fe ff21 	bl	8015d74 <ip4_input>
      break;
 8016f32:	e013      	b.n	8016f5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016f34:	683b      	ldr	r3, [r7, #0]
 8016f36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016f3a:	f003 0308 	and.w	r3, r3, #8
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d014      	beq.n	8016f6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016f42:	8afb      	ldrh	r3, [r7, #22]
 8016f44:	4619      	mov	r1, r3
 8016f46:	6878      	ldr	r0, [r7, #4]
 8016f48:	f7f6 fd84 	bl	800da54 <pbuf_remove_header>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d10e      	bne.n	8016f70 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016f52:	6839      	ldr	r1, [r7, #0]
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	f7fe f8c1 	bl	80150dc <etharp_input>
      break;
 8016f5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	e00c      	b.n	8016f7a <ethernet_input+0x10e>
    goto free_and_return;
 8016f60:	bf00      	nop
 8016f62:	e006      	b.n	8016f72 <ethernet_input+0x106>
        goto free_and_return;
 8016f64:	bf00      	nop
 8016f66:	e004      	b.n	8016f72 <ethernet_input+0x106>
        goto free_and_return;
 8016f68:	bf00      	nop
 8016f6a:	e002      	b.n	8016f72 <ethernet_input+0x106>
        goto free_and_return;
 8016f6c:	bf00      	nop
 8016f6e:	e000      	b.n	8016f72 <ethernet_input+0x106>
        goto free_and_return;
 8016f70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7f6 fdf4 	bl	800db60 <pbuf_free>
  return ERR_OK;
 8016f78:	2300      	movs	r3, #0
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3718      	adds	r7, #24
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
 8016f82:	bf00      	nop
 8016f84:	0801bbbc 	.word	0x0801bbbc

08016f88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b086      	sub	sp, #24
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	60f8      	str	r0, [r7, #12]
 8016f90:	60b9      	str	r1, [r7, #8]
 8016f92:	607a      	str	r2, [r7, #4]
 8016f94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016f96:	8c3b      	ldrh	r3, [r7, #32]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7f5 fa35 	bl	800c408 <lwip_htons>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016fa2:	210e      	movs	r1, #14
 8016fa4:	68b8      	ldr	r0, [r7, #8]
 8016fa6:	f7f6 fd45 	bl	800da34 <pbuf_add_header>
 8016faa:	4603      	mov	r3, r0
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d125      	bne.n	8016ffc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	685b      	ldr	r3, [r3, #4]
 8016fb4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	8afa      	ldrh	r2, [r7, #22]
 8016fba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	2206      	movs	r2, #6
 8016fc0:	6839      	ldr	r1, [r7, #0]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 fcdd 	bl	8017982 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	3306      	adds	r3, #6
 8016fcc:	2206      	movs	r2, #6
 8016fce:	6879      	ldr	r1, [r7, #4]
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f000 fcd6 	bl	8017982 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016fdc:	2b06      	cmp	r3, #6
 8016fde:	d006      	beq.n	8016fee <ethernet_output+0x66>
 8016fe0:	4b0a      	ldr	r3, [pc, #40]	@ (801700c <ethernet_output+0x84>)
 8016fe2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016fe6:	490a      	ldr	r1, [pc, #40]	@ (8017010 <ethernet_output+0x88>)
 8016fe8:	480a      	ldr	r0, [pc, #40]	@ (8017014 <ethernet_output+0x8c>)
 8016fea:	f000 facb 	bl	8017584 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	699b      	ldr	r3, [r3, #24]
 8016ff2:	68b9      	ldr	r1, [r7, #8]
 8016ff4:	68f8      	ldr	r0, [r7, #12]
 8016ff6:	4798      	blx	r3
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	e002      	b.n	8017002 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016ffc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016ffe:	f06f 0301 	mvn.w	r3, #1
}
 8017002:	4618      	mov	r0, r3
 8017004:	3718      	adds	r7, #24
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}
 801700a:	bf00      	nop
 801700c:	0801b9d4 	.word	0x0801b9d4
 8017010:	0801ba0c 	.word	0x0801ba0c
 8017014:	0801ba40 	.word	0x0801ba40

08017018 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	2200      	movs	r2, #0
 8017026:	2104      	movs	r1, #4
 8017028:	4618      	mov	r0, r3
 801702a:	f7ef fb43 	bl	80066b4 <osMessageQueueNew>
 801702e:	4602      	mov	r2, r0
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d102      	bne.n	8017042 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801703c:	f04f 33ff 	mov.w	r3, #4294967295
 8017040:	e000      	b.n	8017044 <sys_mbox_new+0x2c>

  return ERR_OK;
 8017042:	2300      	movs	r3, #0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3708      	adds	r7, #8
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}

0801704c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b082      	sub	sp, #8
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	4618      	mov	r0, r3
 801705a:	f7ef fc97 	bl	800698c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4618      	mov	r0, r3
 8017064:	f7ef fcc4 	bl	80069f0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017068:	bf00      	nop
 801706a:	3708      	adds	r7, #8
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}

08017070 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b084      	sub	sp, #16
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6818      	ldr	r0, [r3, #0]
 801707e:	4639      	mov	r1, r7
 8017080:	2300      	movs	r3, #0
 8017082:	2200      	movs	r2, #0
 8017084:	f7ef fb9c 	bl	80067c0 <osMessageQueuePut>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d102      	bne.n	8017094 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801708e:	2300      	movs	r3, #0
 8017090:	73fb      	strb	r3, [r7, #15]
 8017092:	e001      	b.n	8017098 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017094:	23ff      	movs	r3, #255	@ 0xff
 8017096:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017098:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801709c:	4618      	mov	r0, r3
 801709e:	3710      	adds	r7, #16
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}

080170a4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80170a4:	b580      	push	{r7, lr}
 80170a6:	b086      	sub	sp, #24
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	60f8      	str	r0, [r7, #12]
 80170ac:	60b9      	str	r1, [r7, #8]
 80170ae:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80170b0:	f7ee ff2c 	bl	8005f0c <osKernelGetTickCount>
 80170b4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d013      	beq.n	80170e4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	6818      	ldr	r0, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2200      	movs	r2, #0
 80170c4:	68b9      	ldr	r1, [r7, #8]
 80170c6:	f7ef fbef 	bl	80068a8 <osMessageQueueGet>
 80170ca:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80170cc:	693b      	ldr	r3, [r7, #16]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d105      	bne.n	80170de <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80170d2:	f7ee ff1b 	bl	8005f0c <osKernelGetTickCount>
 80170d6:	4602      	mov	r2, r0
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	1ad3      	subs	r3, r2, r3
 80170dc:	e00f      	b.n	80170fe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80170de:	f04f 33ff 	mov.w	r3, #4294967295
 80170e2:	e00c      	b.n	80170fe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	6818      	ldr	r0, [r3, #0]
 80170e8:	f04f 33ff 	mov.w	r3, #4294967295
 80170ec:	2200      	movs	r2, #0
 80170ee:	68b9      	ldr	r1, [r7, #8]
 80170f0:	f7ef fbda 	bl	80068a8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80170f4:	f7ee ff0a 	bl	8005f0c <osKernelGetTickCount>
 80170f8:	4602      	mov	r2, r0
 80170fa:	697b      	ldr	r3, [r7, #20]
 80170fc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3718      	adds	r7, #24
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}

08017106 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017106:	b580      	push	{r7, lr}
 8017108:	b082      	sub	sp, #8
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
 801710e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6818      	ldr	r0, [r3, #0]
 8017114:	2300      	movs	r3, #0
 8017116:	2200      	movs	r2, #0
 8017118:	6839      	ldr	r1, [r7, #0]
 801711a:	f7ef fbc5 	bl	80068a8 <osMessageQueueGet>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d101      	bne.n	8017128 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8017124:	2300      	movs	r3, #0
 8017126:	e001      	b.n	801712c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017128:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801712c:	4618      	mov	r0, r3
 801712e:	3708      	adds	r7, #8
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017134:	b480      	push	{r7}
 8017136:	b083      	sub	sp, #12
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d101      	bne.n	8017148 <sys_mbox_valid+0x14>
    return 0;
 8017144:	2300      	movs	r3, #0
 8017146:	e000      	b.n	801714a <sys_mbox_valid+0x16>
  else
    return 1;
 8017148:	2301      	movs	r3, #1
}
 801714a:	4618      	mov	r0, r3
 801714c:	370c      	adds	r7, #12
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr

08017156 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017156:	b480      	push	{r7}
 8017158:	b083      	sub	sp, #12
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2200      	movs	r2, #0
 8017162:	601a      	str	r2, [r3, #0]
}
 8017164:	bf00      	nop
 8017166:	370c      	adds	r7, #12
 8017168:	46bd      	mov	sp, r7
 801716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716e:	4770      	bx	lr

08017170 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	460b      	mov	r3, r1
 801717a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801717c:	78fb      	ldrb	r3, [r7, #3]
 801717e:	2200      	movs	r2, #0
 8017180:	4619      	mov	r1, r3
 8017182:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017186:	f7ef f905 	bl	8006394 <osSemaphoreNew>
 801718a:	4602      	mov	r2, r0
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d102      	bne.n	801719e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017198:	f04f 33ff 	mov.w	r3, #4294967295
 801719c:	e009      	b.n	80171b2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801719e:	78fb      	ldrb	r3, [r7, #3]
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d105      	bne.n	80171b0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2100      	movs	r1, #0
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7ef f98e 	bl	80064cc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80171b0:	2300      	movs	r3, #0
}
 80171b2:	4618      	mov	r0, r3
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b084      	sub	sp, #16
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80171c4:	f7ee fea2 	bl	8005f0c <osKernelGetTickCount>
 80171c8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d011      	beq.n	80171f4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	6839      	ldr	r1, [r7, #0]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ef f978 	bl	80064cc <osSemaphoreAcquire>
 80171dc:	4603      	mov	r3, r0
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d105      	bne.n	80171ee <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80171e2:	f7ee fe93 	bl	8005f0c <osKernelGetTickCount>
 80171e6:	4602      	mov	r2, r0
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	1ad3      	subs	r3, r2, r3
 80171ec:	e012      	b.n	8017214 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80171ee:	f04f 33ff 	mov.w	r3, #4294967295
 80171f2:	e00f      	b.n	8017214 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80171f4:	bf00      	nop
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	f04f 31ff 	mov.w	r1, #4294967295
 80171fe:	4618      	mov	r0, r3
 8017200:	f7ef f964 	bl	80064cc <osSemaphoreAcquire>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d1f5      	bne.n	80171f6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801720a:	f7ee fe7f 	bl	8005f0c <osKernelGetTickCount>
 801720e:	4602      	mov	r2, r0
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017214:	4618      	mov	r0, r3
 8017216:	3710      	adds	r7, #16
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	4618      	mov	r0, r3
 801722a:	f7ef f9b5 	bl	8006598 <osSemaphoreRelease>
}
 801722e:	bf00      	nop
 8017230:	3708      	adds	r7, #8
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}

08017236 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017236:	b580      	push	{r7, lr}
 8017238:	b082      	sub	sp, #8
 801723a:	af00      	add	r7, sp, #0
 801723c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	4618      	mov	r0, r3
 8017244:	f7ef fa00 	bl	8006648 <osSemaphoreDelete>
}
 8017248:	bf00      	nop
 801724a:	3708      	adds	r7, #8
 801724c:	46bd      	mov	sp, r7
 801724e:	bd80      	pop	{r7, pc}

08017250 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017250:	b480      	push	{r7}
 8017252:	b083      	sub	sp, #12
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d101      	bne.n	8017264 <sys_sem_valid+0x14>
    return 0;
 8017260:	2300      	movs	r3, #0
 8017262:	e000      	b.n	8017266 <sys_sem_valid+0x16>
  else
    return 1;
 8017264:	2301      	movs	r3, #1
}
 8017266:	4618      	mov	r0, r3
 8017268:	370c      	adds	r7, #12
 801726a:	46bd      	mov	sp, r7
 801726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017270:	4770      	bx	lr

08017272 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017272:	b480      	push	{r7}
 8017274:	b083      	sub	sp, #12
 8017276:	af00      	add	r7, sp, #0
 8017278:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	2200      	movs	r2, #0
 801727e:	601a      	str	r2, [r3, #0]
}
 8017280:	bf00      	nop
 8017282:	370c      	adds	r7, #12
 8017284:	46bd      	mov	sp, r7
 8017286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728a:	4770      	bx	lr

0801728c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017290:	2000      	movs	r0, #0
 8017292:	f7ee ff37 	bl	8006104 <osMutexNew>
 8017296:	4603      	mov	r3, r0
 8017298:	4a01      	ldr	r2, [pc, #4]	@ (80172a0 <sys_init+0x14>)
 801729a:	6013      	str	r3, [r2, #0]
#endif
}
 801729c:	bf00      	nop
 801729e:	bd80      	pop	{r7, pc}
 80172a0:	2000e0b4 	.word	0x2000e0b4

080172a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80172ac:	2000      	movs	r0, #0
 80172ae:	f7ee ff29 	bl	8006104 <osMutexNew>
 80172b2:	4602      	mov	r2, r0
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d102      	bne.n	80172c6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80172c0:	f04f 33ff 	mov.w	r3, #4294967295
 80172c4:	e000      	b.n	80172c8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b082      	sub	sp, #8
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f04f 31ff 	mov.w	r1, #4294967295
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7ee ffa9 	bl	8006238 <osMutexAcquire>
#endif
}
 80172e6:	bf00      	nop
 80172e8:	3708      	adds	r7, #8
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}

080172ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80172ee:	b580      	push	{r7, lr}
 80172f0:	b082      	sub	sp, #8
 80172f2:	af00      	add	r7, sp, #0
 80172f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	4618      	mov	r0, r3
 80172fc:	f7ee fffa 	bl	80062f4 <osMutexRelease>
}
 8017300:	bf00      	nop
 8017302:	3708      	adds	r7, #8
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b08e      	sub	sp, #56	@ 0x38
 801730c:	af00      	add	r7, sp, #0
 801730e:	60f8      	str	r0, [r7, #12]
 8017310:	60b9      	str	r1, [r7, #8]
 8017312:	607a      	str	r2, [r7, #4]
 8017314:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017316:	f107 0314 	add.w	r3, r7, #20
 801731a:	2224      	movs	r2, #36	@ 0x24
 801731c:	2100      	movs	r1, #0
 801731e:	4618      	mov	r0, r3
 8017320:	f000 fa88 	bl	8017834 <memset>
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	617b      	str	r3, [r7, #20]
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801732c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801732e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017330:	f107 0314 	add.w	r3, r7, #20
 8017334:	461a      	mov	r2, r3
 8017336:	6879      	ldr	r1, [r7, #4]
 8017338:	68b8      	ldr	r0, [r7, #8]
 801733a:	f7ee fe0f 	bl	8005f5c <osThreadNew>
 801733e:	4603      	mov	r3, r0
#endif
}
 8017340:	4618      	mov	r0, r3
 8017342:	3738      	adds	r7, #56	@ 0x38
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801734c:	4b04      	ldr	r3, [pc, #16]	@ (8017360 <sys_arch_protect+0x18>)
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	f04f 31ff 	mov.w	r1, #4294967295
 8017354:	4618      	mov	r0, r3
 8017356:	f7ee ff6f 	bl	8006238 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801735a:	2301      	movs	r3, #1
}
 801735c:	4618      	mov	r0, r3
 801735e:	bd80      	pop	{r7, pc}
 8017360:	2000e0b4 	.word	0x2000e0b4

08017364 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801736c:	4b04      	ldr	r3, [pc, #16]	@ (8017380 <sys_arch_unprotect+0x1c>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	4618      	mov	r0, r3
 8017372:	f7ee ffbf 	bl	80062f4 <osMutexRelease>
}
 8017376:	bf00      	nop
 8017378:	3708      	adds	r7, #8
 801737a:	46bd      	mov	sp, r7
 801737c:	bd80      	pop	{r7, pc}
 801737e:	bf00      	nop
 8017380:	2000e0b4 	.word	0x2000e0b4

08017384 <rand>:
 8017384:	4b16      	ldr	r3, [pc, #88]	@ (80173e0 <rand+0x5c>)
 8017386:	b510      	push	{r4, lr}
 8017388:	681c      	ldr	r4, [r3, #0]
 801738a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801738c:	b9b3      	cbnz	r3, 80173bc <rand+0x38>
 801738e:	2018      	movs	r0, #24
 8017390:	f000 fb6e 	bl	8017a70 <malloc>
 8017394:	4602      	mov	r2, r0
 8017396:	6320      	str	r0, [r4, #48]	@ 0x30
 8017398:	b920      	cbnz	r0, 80173a4 <rand+0x20>
 801739a:	4b12      	ldr	r3, [pc, #72]	@ (80173e4 <rand+0x60>)
 801739c:	4812      	ldr	r0, [pc, #72]	@ (80173e8 <rand+0x64>)
 801739e:	2152      	movs	r1, #82	@ 0x52
 80173a0:	f000 fafe 	bl	80179a0 <__assert_func>
 80173a4:	4911      	ldr	r1, [pc, #68]	@ (80173ec <rand+0x68>)
 80173a6:	4b12      	ldr	r3, [pc, #72]	@ (80173f0 <rand+0x6c>)
 80173a8:	e9c0 1300 	strd	r1, r3, [r0]
 80173ac:	4b11      	ldr	r3, [pc, #68]	@ (80173f4 <rand+0x70>)
 80173ae:	6083      	str	r3, [r0, #8]
 80173b0:	230b      	movs	r3, #11
 80173b2:	8183      	strh	r3, [r0, #12]
 80173b4:	2100      	movs	r1, #0
 80173b6:	2001      	movs	r0, #1
 80173b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80173bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80173be:	480e      	ldr	r0, [pc, #56]	@ (80173f8 <rand+0x74>)
 80173c0:	690b      	ldr	r3, [r1, #16]
 80173c2:	694c      	ldr	r4, [r1, #20]
 80173c4:	4a0d      	ldr	r2, [pc, #52]	@ (80173fc <rand+0x78>)
 80173c6:	4358      	muls	r0, r3
 80173c8:	fb02 0004 	mla	r0, r2, r4, r0
 80173cc:	fba3 3202 	umull	r3, r2, r3, r2
 80173d0:	3301      	adds	r3, #1
 80173d2:	eb40 0002 	adc.w	r0, r0, r2
 80173d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80173da:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80173de:	bd10      	pop	{r4, pc}
 80173e0:	20000028 	.word	0x20000028
 80173e4:	0801bbca 	.word	0x0801bbca
 80173e8:	0801bbe1 	.word	0x0801bbe1
 80173ec:	abcd330e 	.word	0xabcd330e
 80173f0:	e66d1234 	.word	0xe66d1234
 80173f4:	0005deec 	.word	0x0005deec
 80173f8:	5851f42d 	.word	0x5851f42d
 80173fc:	4c957f2d 	.word	0x4c957f2d

08017400 <std>:
 8017400:	2300      	movs	r3, #0
 8017402:	b510      	push	{r4, lr}
 8017404:	4604      	mov	r4, r0
 8017406:	e9c0 3300 	strd	r3, r3, [r0]
 801740a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801740e:	6083      	str	r3, [r0, #8]
 8017410:	8181      	strh	r1, [r0, #12]
 8017412:	6643      	str	r3, [r0, #100]	@ 0x64
 8017414:	81c2      	strh	r2, [r0, #14]
 8017416:	6183      	str	r3, [r0, #24]
 8017418:	4619      	mov	r1, r3
 801741a:	2208      	movs	r2, #8
 801741c:	305c      	adds	r0, #92	@ 0x5c
 801741e:	f000 fa09 	bl	8017834 <memset>
 8017422:	4b0d      	ldr	r3, [pc, #52]	@ (8017458 <std+0x58>)
 8017424:	6263      	str	r3, [r4, #36]	@ 0x24
 8017426:	4b0d      	ldr	r3, [pc, #52]	@ (801745c <std+0x5c>)
 8017428:	62a3      	str	r3, [r4, #40]	@ 0x28
 801742a:	4b0d      	ldr	r3, [pc, #52]	@ (8017460 <std+0x60>)
 801742c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801742e:	4b0d      	ldr	r3, [pc, #52]	@ (8017464 <std+0x64>)
 8017430:	6323      	str	r3, [r4, #48]	@ 0x30
 8017432:	4b0d      	ldr	r3, [pc, #52]	@ (8017468 <std+0x68>)
 8017434:	6224      	str	r4, [r4, #32]
 8017436:	429c      	cmp	r4, r3
 8017438:	d006      	beq.n	8017448 <std+0x48>
 801743a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801743e:	4294      	cmp	r4, r2
 8017440:	d002      	beq.n	8017448 <std+0x48>
 8017442:	33d0      	adds	r3, #208	@ 0xd0
 8017444:	429c      	cmp	r4, r3
 8017446:	d105      	bne.n	8017454 <std+0x54>
 8017448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017450:	f000 ba8c 	b.w	801796c <__retarget_lock_init_recursive>
 8017454:	bd10      	pop	{r4, pc}
 8017456:	bf00      	nop
 8017458:	08017665 	.word	0x08017665
 801745c:	08017687 	.word	0x08017687
 8017460:	080176bf 	.word	0x080176bf
 8017464:	080176e3 	.word	0x080176e3
 8017468:	2000e0b8 	.word	0x2000e0b8

0801746c <stdio_exit_handler>:
 801746c:	4a02      	ldr	r2, [pc, #8]	@ (8017478 <stdio_exit_handler+0xc>)
 801746e:	4903      	ldr	r1, [pc, #12]	@ (801747c <stdio_exit_handler+0x10>)
 8017470:	4803      	ldr	r0, [pc, #12]	@ (8017480 <stdio_exit_handler+0x14>)
 8017472:	f000 b869 	b.w	8017548 <_fwalk_sglue>
 8017476:	bf00      	nop
 8017478:	2000001c 	.word	0x2000001c
 801747c:	08018285 	.word	0x08018285
 8017480:	2000002c 	.word	0x2000002c

08017484 <cleanup_stdio>:
 8017484:	6841      	ldr	r1, [r0, #4]
 8017486:	4b0c      	ldr	r3, [pc, #48]	@ (80174b8 <cleanup_stdio+0x34>)
 8017488:	4299      	cmp	r1, r3
 801748a:	b510      	push	{r4, lr}
 801748c:	4604      	mov	r4, r0
 801748e:	d001      	beq.n	8017494 <cleanup_stdio+0x10>
 8017490:	f000 fef8 	bl	8018284 <_fflush_r>
 8017494:	68a1      	ldr	r1, [r4, #8]
 8017496:	4b09      	ldr	r3, [pc, #36]	@ (80174bc <cleanup_stdio+0x38>)
 8017498:	4299      	cmp	r1, r3
 801749a:	d002      	beq.n	80174a2 <cleanup_stdio+0x1e>
 801749c:	4620      	mov	r0, r4
 801749e:	f000 fef1 	bl	8018284 <_fflush_r>
 80174a2:	68e1      	ldr	r1, [r4, #12]
 80174a4:	4b06      	ldr	r3, [pc, #24]	@ (80174c0 <cleanup_stdio+0x3c>)
 80174a6:	4299      	cmp	r1, r3
 80174a8:	d004      	beq.n	80174b4 <cleanup_stdio+0x30>
 80174aa:	4620      	mov	r0, r4
 80174ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174b0:	f000 bee8 	b.w	8018284 <_fflush_r>
 80174b4:	bd10      	pop	{r4, pc}
 80174b6:	bf00      	nop
 80174b8:	2000e0b8 	.word	0x2000e0b8
 80174bc:	2000e120 	.word	0x2000e120
 80174c0:	2000e188 	.word	0x2000e188

080174c4 <global_stdio_init.part.0>:
 80174c4:	b510      	push	{r4, lr}
 80174c6:	4b0b      	ldr	r3, [pc, #44]	@ (80174f4 <global_stdio_init.part.0+0x30>)
 80174c8:	4c0b      	ldr	r4, [pc, #44]	@ (80174f8 <global_stdio_init.part.0+0x34>)
 80174ca:	4a0c      	ldr	r2, [pc, #48]	@ (80174fc <global_stdio_init.part.0+0x38>)
 80174cc:	601a      	str	r2, [r3, #0]
 80174ce:	4620      	mov	r0, r4
 80174d0:	2200      	movs	r2, #0
 80174d2:	2104      	movs	r1, #4
 80174d4:	f7ff ff94 	bl	8017400 <std>
 80174d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80174dc:	2201      	movs	r2, #1
 80174de:	2109      	movs	r1, #9
 80174e0:	f7ff ff8e 	bl	8017400 <std>
 80174e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80174e8:	2202      	movs	r2, #2
 80174ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ee:	2112      	movs	r1, #18
 80174f0:	f7ff bf86 	b.w	8017400 <std>
 80174f4:	2000e1f0 	.word	0x2000e1f0
 80174f8:	2000e0b8 	.word	0x2000e0b8
 80174fc:	0801746d 	.word	0x0801746d

08017500 <__sfp_lock_acquire>:
 8017500:	4801      	ldr	r0, [pc, #4]	@ (8017508 <__sfp_lock_acquire+0x8>)
 8017502:	f000 ba34 	b.w	801796e <__retarget_lock_acquire_recursive>
 8017506:	bf00      	nop
 8017508:	2000e1f5 	.word	0x2000e1f5

0801750c <__sfp_lock_release>:
 801750c:	4801      	ldr	r0, [pc, #4]	@ (8017514 <__sfp_lock_release+0x8>)
 801750e:	f000 ba2f 	b.w	8017970 <__retarget_lock_release_recursive>
 8017512:	bf00      	nop
 8017514:	2000e1f5 	.word	0x2000e1f5

08017518 <__sinit>:
 8017518:	b510      	push	{r4, lr}
 801751a:	4604      	mov	r4, r0
 801751c:	f7ff fff0 	bl	8017500 <__sfp_lock_acquire>
 8017520:	6a23      	ldr	r3, [r4, #32]
 8017522:	b11b      	cbz	r3, 801752c <__sinit+0x14>
 8017524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017528:	f7ff bff0 	b.w	801750c <__sfp_lock_release>
 801752c:	4b04      	ldr	r3, [pc, #16]	@ (8017540 <__sinit+0x28>)
 801752e:	6223      	str	r3, [r4, #32]
 8017530:	4b04      	ldr	r3, [pc, #16]	@ (8017544 <__sinit+0x2c>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	2b00      	cmp	r3, #0
 8017536:	d1f5      	bne.n	8017524 <__sinit+0xc>
 8017538:	f7ff ffc4 	bl	80174c4 <global_stdio_init.part.0>
 801753c:	e7f2      	b.n	8017524 <__sinit+0xc>
 801753e:	bf00      	nop
 8017540:	08017485 	.word	0x08017485
 8017544:	2000e1f0 	.word	0x2000e1f0

08017548 <_fwalk_sglue>:
 8017548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801754c:	4607      	mov	r7, r0
 801754e:	4688      	mov	r8, r1
 8017550:	4614      	mov	r4, r2
 8017552:	2600      	movs	r6, #0
 8017554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017558:	f1b9 0901 	subs.w	r9, r9, #1
 801755c:	d505      	bpl.n	801756a <_fwalk_sglue+0x22>
 801755e:	6824      	ldr	r4, [r4, #0]
 8017560:	2c00      	cmp	r4, #0
 8017562:	d1f7      	bne.n	8017554 <_fwalk_sglue+0xc>
 8017564:	4630      	mov	r0, r6
 8017566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801756a:	89ab      	ldrh	r3, [r5, #12]
 801756c:	2b01      	cmp	r3, #1
 801756e:	d907      	bls.n	8017580 <_fwalk_sglue+0x38>
 8017570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017574:	3301      	adds	r3, #1
 8017576:	d003      	beq.n	8017580 <_fwalk_sglue+0x38>
 8017578:	4629      	mov	r1, r5
 801757a:	4638      	mov	r0, r7
 801757c:	47c0      	blx	r8
 801757e:	4306      	orrs	r6, r0
 8017580:	3568      	adds	r5, #104	@ 0x68
 8017582:	e7e9      	b.n	8017558 <_fwalk_sglue+0x10>

08017584 <iprintf>:
 8017584:	b40f      	push	{r0, r1, r2, r3}
 8017586:	b507      	push	{r0, r1, r2, lr}
 8017588:	4906      	ldr	r1, [pc, #24]	@ (80175a4 <iprintf+0x20>)
 801758a:	ab04      	add	r3, sp, #16
 801758c:	6808      	ldr	r0, [r1, #0]
 801758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017592:	6881      	ldr	r1, [r0, #8]
 8017594:	9301      	str	r3, [sp, #4]
 8017596:	f000 fb4b 	bl	8017c30 <_vfiprintf_r>
 801759a:	b003      	add	sp, #12
 801759c:	f85d eb04 	ldr.w	lr, [sp], #4
 80175a0:	b004      	add	sp, #16
 80175a2:	4770      	bx	lr
 80175a4:	20000028 	.word	0x20000028

080175a8 <_puts_r>:
 80175a8:	6a03      	ldr	r3, [r0, #32]
 80175aa:	b570      	push	{r4, r5, r6, lr}
 80175ac:	6884      	ldr	r4, [r0, #8]
 80175ae:	4605      	mov	r5, r0
 80175b0:	460e      	mov	r6, r1
 80175b2:	b90b      	cbnz	r3, 80175b8 <_puts_r+0x10>
 80175b4:	f7ff ffb0 	bl	8017518 <__sinit>
 80175b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80175ba:	07db      	lsls	r3, r3, #31
 80175bc:	d405      	bmi.n	80175ca <_puts_r+0x22>
 80175be:	89a3      	ldrh	r3, [r4, #12]
 80175c0:	0598      	lsls	r0, r3, #22
 80175c2:	d402      	bmi.n	80175ca <_puts_r+0x22>
 80175c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80175c6:	f000 f9d2 	bl	801796e <__retarget_lock_acquire_recursive>
 80175ca:	89a3      	ldrh	r3, [r4, #12]
 80175cc:	0719      	lsls	r1, r3, #28
 80175ce:	d502      	bpl.n	80175d6 <_puts_r+0x2e>
 80175d0:	6923      	ldr	r3, [r4, #16]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d135      	bne.n	8017642 <_puts_r+0x9a>
 80175d6:	4621      	mov	r1, r4
 80175d8:	4628      	mov	r0, r5
 80175da:	f000 f8c5 	bl	8017768 <__swsetup_r>
 80175de:	b380      	cbz	r0, 8017642 <_puts_r+0x9a>
 80175e0:	f04f 35ff 	mov.w	r5, #4294967295
 80175e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80175e6:	07da      	lsls	r2, r3, #31
 80175e8:	d405      	bmi.n	80175f6 <_puts_r+0x4e>
 80175ea:	89a3      	ldrh	r3, [r4, #12]
 80175ec:	059b      	lsls	r3, r3, #22
 80175ee:	d402      	bmi.n	80175f6 <_puts_r+0x4e>
 80175f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80175f2:	f000 f9bd 	bl	8017970 <__retarget_lock_release_recursive>
 80175f6:	4628      	mov	r0, r5
 80175f8:	bd70      	pop	{r4, r5, r6, pc}
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	da04      	bge.n	8017608 <_puts_r+0x60>
 80175fe:	69a2      	ldr	r2, [r4, #24]
 8017600:	429a      	cmp	r2, r3
 8017602:	dc17      	bgt.n	8017634 <_puts_r+0x8c>
 8017604:	290a      	cmp	r1, #10
 8017606:	d015      	beq.n	8017634 <_puts_r+0x8c>
 8017608:	6823      	ldr	r3, [r4, #0]
 801760a:	1c5a      	adds	r2, r3, #1
 801760c:	6022      	str	r2, [r4, #0]
 801760e:	7019      	strb	r1, [r3, #0]
 8017610:	68a3      	ldr	r3, [r4, #8]
 8017612:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017616:	3b01      	subs	r3, #1
 8017618:	60a3      	str	r3, [r4, #8]
 801761a:	2900      	cmp	r1, #0
 801761c:	d1ed      	bne.n	80175fa <_puts_r+0x52>
 801761e:	2b00      	cmp	r3, #0
 8017620:	da11      	bge.n	8017646 <_puts_r+0x9e>
 8017622:	4622      	mov	r2, r4
 8017624:	210a      	movs	r1, #10
 8017626:	4628      	mov	r0, r5
 8017628:	f000 f85f 	bl	80176ea <__swbuf_r>
 801762c:	3001      	adds	r0, #1
 801762e:	d0d7      	beq.n	80175e0 <_puts_r+0x38>
 8017630:	250a      	movs	r5, #10
 8017632:	e7d7      	b.n	80175e4 <_puts_r+0x3c>
 8017634:	4622      	mov	r2, r4
 8017636:	4628      	mov	r0, r5
 8017638:	f000 f857 	bl	80176ea <__swbuf_r>
 801763c:	3001      	adds	r0, #1
 801763e:	d1e7      	bne.n	8017610 <_puts_r+0x68>
 8017640:	e7ce      	b.n	80175e0 <_puts_r+0x38>
 8017642:	3e01      	subs	r6, #1
 8017644:	e7e4      	b.n	8017610 <_puts_r+0x68>
 8017646:	6823      	ldr	r3, [r4, #0]
 8017648:	1c5a      	adds	r2, r3, #1
 801764a:	6022      	str	r2, [r4, #0]
 801764c:	220a      	movs	r2, #10
 801764e:	701a      	strb	r2, [r3, #0]
 8017650:	e7ee      	b.n	8017630 <_puts_r+0x88>
	...

08017654 <puts>:
 8017654:	4b02      	ldr	r3, [pc, #8]	@ (8017660 <puts+0xc>)
 8017656:	4601      	mov	r1, r0
 8017658:	6818      	ldr	r0, [r3, #0]
 801765a:	f7ff bfa5 	b.w	80175a8 <_puts_r>
 801765e:	bf00      	nop
 8017660:	20000028 	.word	0x20000028

08017664 <__sread>:
 8017664:	b510      	push	{r4, lr}
 8017666:	460c      	mov	r4, r1
 8017668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801766c:	f000 f936 	bl	80178dc <_read_r>
 8017670:	2800      	cmp	r0, #0
 8017672:	bfab      	itete	ge
 8017674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017676:	89a3      	ldrhlt	r3, [r4, #12]
 8017678:	181b      	addge	r3, r3, r0
 801767a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801767e:	bfac      	ite	ge
 8017680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017682:	81a3      	strhlt	r3, [r4, #12]
 8017684:	bd10      	pop	{r4, pc}

08017686 <__swrite>:
 8017686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801768a:	461f      	mov	r7, r3
 801768c:	898b      	ldrh	r3, [r1, #12]
 801768e:	05db      	lsls	r3, r3, #23
 8017690:	4605      	mov	r5, r0
 8017692:	460c      	mov	r4, r1
 8017694:	4616      	mov	r6, r2
 8017696:	d505      	bpl.n	80176a4 <__swrite+0x1e>
 8017698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801769c:	2302      	movs	r3, #2
 801769e:	2200      	movs	r2, #0
 80176a0:	f000 f90a 	bl	80178b8 <_lseek_r>
 80176a4:	89a3      	ldrh	r3, [r4, #12]
 80176a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80176ae:	81a3      	strh	r3, [r4, #12]
 80176b0:	4632      	mov	r2, r6
 80176b2:	463b      	mov	r3, r7
 80176b4:	4628      	mov	r0, r5
 80176b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176ba:	f000 b921 	b.w	8017900 <_write_r>

080176be <__sseek>:
 80176be:	b510      	push	{r4, lr}
 80176c0:	460c      	mov	r4, r1
 80176c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176c6:	f000 f8f7 	bl	80178b8 <_lseek_r>
 80176ca:	1c43      	adds	r3, r0, #1
 80176cc:	89a3      	ldrh	r3, [r4, #12]
 80176ce:	bf15      	itete	ne
 80176d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80176d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80176d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80176da:	81a3      	strheq	r3, [r4, #12]
 80176dc:	bf18      	it	ne
 80176de:	81a3      	strhne	r3, [r4, #12]
 80176e0:	bd10      	pop	{r4, pc}

080176e2 <__sclose>:
 80176e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176e6:	f000 b8d7 	b.w	8017898 <_close_r>

080176ea <__swbuf_r>:
 80176ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ec:	460e      	mov	r6, r1
 80176ee:	4614      	mov	r4, r2
 80176f0:	4605      	mov	r5, r0
 80176f2:	b118      	cbz	r0, 80176fc <__swbuf_r+0x12>
 80176f4:	6a03      	ldr	r3, [r0, #32]
 80176f6:	b90b      	cbnz	r3, 80176fc <__swbuf_r+0x12>
 80176f8:	f7ff ff0e 	bl	8017518 <__sinit>
 80176fc:	69a3      	ldr	r3, [r4, #24]
 80176fe:	60a3      	str	r3, [r4, #8]
 8017700:	89a3      	ldrh	r3, [r4, #12]
 8017702:	071a      	lsls	r2, r3, #28
 8017704:	d501      	bpl.n	801770a <__swbuf_r+0x20>
 8017706:	6923      	ldr	r3, [r4, #16]
 8017708:	b943      	cbnz	r3, 801771c <__swbuf_r+0x32>
 801770a:	4621      	mov	r1, r4
 801770c:	4628      	mov	r0, r5
 801770e:	f000 f82b 	bl	8017768 <__swsetup_r>
 8017712:	b118      	cbz	r0, 801771c <__swbuf_r+0x32>
 8017714:	f04f 37ff 	mov.w	r7, #4294967295
 8017718:	4638      	mov	r0, r7
 801771a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801771c:	6823      	ldr	r3, [r4, #0]
 801771e:	6922      	ldr	r2, [r4, #16]
 8017720:	1a98      	subs	r0, r3, r2
 8017722:	6963      	ldr	r3, [r4, #20]
 8017724:	b2f6      	uxtb	r6, r6
 8017726:	4283      	cmp	r3, r0
 8017728:	4637      	mov	r7, r6
 801772a:	dc05      	bgt.n	8017738 <__swbuf_r+0x4e>
 801772c:	4621      	mov	r1, r4
 801772e:	4628      	mov	r0, r5
 8017730:	f000 fda8 	bl	8018284 <_fflush_r>
 8017734:	2800      	cmp	r0, #0
 8017736:	d1ed      	bne.n	8017714 <__swbuf_r+0x2a>
 8017738:	68a3      	ldr	r3, [r4, #8]
 801773a:	3b01      	subs	r3, #1
 801773c:	60a3      	str	r3, [r4, #8]
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	1c5a      	adds	r2, r3, #1
 8017742:	6022      	str	r2, [r4, #0]
 8017744:	701e      	strb	r6, [r3, #0]
 8017746:	6962      	ldr	r2, [r4, #20]
 8017748:	1c43      	adds	r3, r0, #1
 801774a:	429a      	cmp	r2, r3
 801774c:	d004      	beq.n	8017758 <__swbuf_r+0x6e>
 801774e:	89a3      	ldrh	r3, [r4, #12]
 8017750:	07db      	lsls	r3, r3, #31
 8017752:	d5e1      	bpl.n	8017718 <__swbuf_r+0x2e>
 8017754:	2e0a      	cmp	r6, #10
 8017756:	d1df      	bne.n	8017718 <__swbuf_r+0x2e>
 8017758:	4621      	mov	r1, r4
 801775a:	4628      	mov	r0, r5
 801775c:	f000 fd92 	bl	8018284 <_fflush_r>
 8017760:	2800      	cmp	r0, #0
 8017762:	d0d9      	beq.n	8017718 <__swbuf_r+0x2e>
 8017764:	e7d6      	b.n	8017714 <__swbuf_r+0x2a>
	...

08017768 <__swsetup_r>:
 8017768:	b538      	push	{r3, r4, r5, lr}
 801776a:	4b29      	ldr	r3, [pc, #164]	@ (8017810 <__swsetup_r+0xa8>)
 801776c:	4605      	mov	r5, r0
 801776e:	6818      	ldr	r0, [r3, #0]
 8017770:	460c      	mov	r4, r1
 8017772:	b118      	cbz	r0, 801777c <__swsetup_r+0x14>
 8017774:	6a03      	ldr	r3, [r0, #32]
 8017776:	b90b      	cbnz	r3, 801777c <__swsetup_r+0x14>
 8017778:	f7ff fece 	bl	8017518 <__sinit>
 801777c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017780:	0719      	lsls	r1, r3, #28
 8017782:	d422      	bmi.n	80177ca <__swsetup_r+0x62>
 8017784:	06da      	lsls	r2, r3, #27
 8017786:	d407      	bmi.n	8017798 <__swsetup_r+0x30>
 8017788:	2209      	movs	r2, #9
 801778a:	602a      	str	r2, [r5, #0]
 801778c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017790:	81a3      	strh	r3, [r4, #12]
 8017792:	f04f 30ff 	mov.w	r0, #4294967295
 8017796:	e033      	b.n	8017800 <__swsetup_r+0x98>
 8017798:	0758      	lsls	r0, r3, #29
 801779a:	d512      	bpl.n	80177c2 <__swsetup_r+0x5a>
 801779c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801779e:	b141      	cbz	r1, 80177b2 <__swsetup_r+0x4a>
 80177a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80177a4:	4299      	cmp	r1, r3
 80177a6:	d002      	beq.n	80177ae <__swsetup_r+0x46>
 80177a8:	4628      	mov	r0, r5
 80177aa:	f000 f917 	bl	80179dc <_free_r>
 80177ae:	2300      	movs	r3, #0
 80177b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80177b2:	89a3      	ldrh	r3, [r4, #12]
 80177b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80177b8:	81a3      	strh	r3, [r4, #12]
 80177ba:	2300      	movs	r3, #0
 80177bc:	6063      	str	r3, [r4, #4]
 80177be:	6923      	ldr	r3, [r4, #16]
 80177c0:	6023      	str	r3, [r4, #0]
 80177c2:	89a3      	ldrh	r3, [r4, #12]
 80177c4:	f043 0308 	orr.w	r3, r3, #8
 80177c8:	81a3      	strh	r3, [r4, #12]
 80177ca:	6923      	ldr	r3, [r4, #16]
 80177cc:	b94b      	cbnz	r3, 80177e2 <__swsetup_r+0x7a>
 80177ce:	89a3      	ldrh	r3, [r4, #12]
 80177d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80177d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80177d8:	d003      	beq.n	80177e2 <__swsetup_r+0x7a>
 80177da:	4621      	mov	r1, r4
 80177dc:	4628      	mov	r0, r5
 80177de:	f000 fdb1 	bl	8018344 <__smakebuf_r>
 80177e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177e6:	f013 0201 	ands.w	r2, r3, #1
 80177ea:	d00a      	beq.n	8017802 <__swsetup_r+0x9a>
 80177ec:	2200      	movs	r2, #0
 80177ee:	60a2      	str	r2, [r4, #8]
 80177f0:	6962      	ldr	r2, [r4, #20]
 80177f2:	4252      	negs	r2, r2
 80177f4:	61a2      	str	r2, [r4, #24]
 80177f6:	6922      	ldr	r2, [r4, #16]
 80177f8:	b942      	cbnz	r2, 801780c <__swsetup_r+0xa4>
 80177fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80177fe:	d1c5      	bne.n	801778c <__swsetup_r+0x24>
 8017800:	bd38      	pop	{r3, r4, r5, pc}
 8017802:	0799      	lsls	r1, r3, #30
 8017804:	bf58      	it	pl
 8017806:	6962      	ldrpl	r2, [r4, #20]
 8017808:	60a2      	str	r2, [r4, #8]
 801780a:	e7f4      	b.n	80177f6 <__swsetup_r+0x8e>
 801780c:	2000      	movs	r0, #0
 801780e:	e7f7      	b.n	8017800 <__swsetup_r+0x98>
 8017810:	20000028 	.word	0x20000028

08017814 <memcmp>:
 8017814:	b510      	push	{r4, lr}
 8017816:	3901      	subs	r1, #1
 8017818:	4402      	add	r2, r0
 801781a:	4290      	cmp	r0, r2
 801781c:	d101      	bne.n	8017822 <memcmp+0xe>
 801781e:	2000      	movs	r0, #0
 8017820:	e005      	b.n	801782e <memcmp+0x1a>
 8017822:	7803      	ldrb	r3, [r0, #0]
 8017824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017828:	42a3      	cmp	r3, r4
 801782a:	d001      	beq.n	8017830 <memcmp+0x1c>
 801782c:	1b18      	subs	r0, r3, r4
 801782e:	bd10      	pop	{r4, pc}
 8017830:	3001      	adds	r0, #1
 8017832:	e7f2      	b.n	801781a <memcmp+0x6>

08017834 <memset>:
 8017834:	4402      	add	r2, r0
 8017836:	4603      	mov	r3, r0
 8017838:	4293      	cmp	r3, r2
 801783a:	d100      	bne.n	801783e <memset+0xa>
 801783c:	4770      	bx	lr
 801783e:	f803 1b01 	strb.w	r1, [r3], #1
 8017842:	e7f9      	b.n	8017838 <memset+0x4>

08017844 <strncpy>:
 8017844:	b510      	push	{r4, lr}
 8017846:	3901      	subs	r1, #1
 8017848:	4603      	mov	r3, r0
 801784a:	b132      	cbz	r2, 801785a <strncpy+0x16>
 801784c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017850:	f803 4b01 	strb.w	r4, [r3], #1
 8017854:	3a01      	subs	r2, #1
 8017856:	2c00      	cmp	r4, #0
 8017858:	d1f7      	bne.n	801784a <strncpy+0x6>
 801785a:	441a      	add	r2, r3
 801785c:	2100      	movs	r1, #0
 801785e:	4293      	cmp	r3, r2
 8017860:	d100      	bne.n	8017864 <strncpy+0x20>
 8017862:	bd10      	pop	{r4, pc}
 8017864:	f803 1b01 	strb.w	r1, [r3], #1
 8017868:	e7f9      	b.n	801785e <strncpy+0x1a>

0801786a <strstr>:
 801786a:	780a      	ldrb	r2, [r1, #0]
 801786c:	b570      	push	{r4, r5, r6, lr}
 801786e:	b96a      	cbnz	r2, 801788c <strstr+0x22>
 8017870:	bd70      	pop	{r4, r5, r6, pc}
 8017872:	429a      	cmp	r2, r3
 8017874:	d109      	bne.n	801788a <strstr+0x20>
 8017876:	460c      	mov	r4, r1
 8017878:	4605      	mov	r5, r0
 801787a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801787e:	2b00      	cmp	r3, #0
 8017880:	d0f6      	beq.n	8017870 <strstr+0x6>
 8017882:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017886:	429e      	cmp	r6, r3
 8017888:	d0f7      	beq.n	801787a <strstr+0x10>
 801788a:	3001      	adds	r0, #1
 801788c:	7803      	ldrb	r3, [r0, #0]
 801788e:	2b00      	cmp	r3, #0
 8017890:	d1ef      	bne.n	8017872 <strstr+0x8>
 8017892:	4618      	mov	r0, r3
 8017894:	e7ec      	b.n	8017870 <strstr+0x6>
	...

08017898 <_close_r>:
 8017898:	b538      	push	{r3, r4, r5, lr}
 801789a:	4d06      	ldr	r5, [pc, #24]	@ (80178b4 <_close_r+0x1c>)
 801789c:	2300      	movs	r3, #0
 801789e:	4604      	mov	r4, r0
 80178a0:	4608      	mov	r0, r1
 80178a2:	602b      	str	r3, [r5, #0]
 80178a4:	f7e9 fa40 	bl	8000d28 <_close>
 80178a8:	1c43      	adds	r3, r0, #1
 80178aa:	d102      	bne.n	80178b2 <_close_r+0x1a>
 80178ac:	682b      	ldr	r3, [r5, #0]
 80178ae:	b103      	cbz	r3, 80178b2 <_close_r+0x1a>
 80178b0:	6023      	str	r3, [r4, #0]
 80178b2:	bd38      	pop	{r3, r4, r5, pc}
 80178b4:	2000e0b0 	.word	0x2000e0b0

080178b8 <_lseek_r>:
 80178b8:	b538      	push	{r3, r4, r5, lr}
 80178ba:	4d07      	ldr	r5, [pc, #28]	@ (80178d8 <_lseek_r+0x20>)
 80178bc:	4604      	mov	r4, r0
 80178be:	4608      	mov	r0, r1
 80178c0:	4611      	mov	r1, r2
 80178c2:	2200      	movs	r2, #0
 80178c4:	602a      	str	r2, [r5, #0]
 80178c6:	461a      	mov	r2, r3
 80178c8:	f7e9 fa55 	bl	8000d76 <_lseek>
 80178cc:	1c43      	adds	r3, r0, #1
 80178ce:	d102      	bne.n	80178d6 <_lseek_r+0x1e>
 80178d0:	682b      	ldr	r3, [r5, #0]
 80178d2:	b103      	cbz	r3, 80178d6 <_lseek_r+0x1e>
 80178d4:	6023      	str	r3, [r4, #0]
 80178d6:	bd38      	pop	{r3, r4, r5, pc}
 80178d8:	2000e0b0 	.word	0x2000e0b0

080178dc <_read_r>:
 80178dc:	b538      	push	{r3, r4, r5, lr}
 80178de:	4d07      	ldr	r5, [pc, #28]	@ (80178fc <_read_r+0x20>)
 80178e0:	4604      	mov	r4, r0
 80178e2:	4608      	mov	r0, r1
 80178e4:	4611      	mov	r1, r2
 80178e6:	2200      	movs	r2, #0
 80178e8:	602a      	str	r2, [r5, #0]
 80178ea:	461a      	mov	r2, r3
 80178ec:	f7e9 f9e3 	bl	8000cb6 <_read>
 80178f0:	1c43      	adds	r3, r0, #1
 80178f2:	d102      	bne.n	80178fa <_read_r+0x1e>
 80178f4:	682b      	ldr	r3, [r5, #0]
 80178f6:	b103      	cbz	r3, 80178fa <_read_r+0x1e>
 80178f8:	6023      	str	r3, [r4, #0]
 80178fa:	bd38      	pop	{r3, r4, r5, pc}
 80178fc:	2000e0b0 	.word	0x2000e0b0

08017900 <_write_r>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	4d07      	ldr	r5, [pc, #28]	@ (8017920 <_write_r+0x20>)
 8017904:	4604      	mov	r4, r0
 8017906:	4608      	mov	r0, r1
 8017908:	4611      	mov	r1, r2
 801790a:	2200      	movs	r2, #0
 801790c:	602a      	str	r2, [r5, #0]
 801790e:	461a      	mov	r2, r3
 8017910:	f7e9 f9ee 	bl	8000cf0 <_write>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	d102      	bne.n	801791e <_write_r+0x1e>
 8017918:	682b      	ldr	r3, [r5, #0]
 801791a:	b103      	cbz	r3, 801791e <_write_r+0x1e>
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	2000e0b0 	.word	0x2000e0b0

08017924 <__libc_init_array>:
 8017924:	b570      	push	{r4, r5, r6, lr}
 8017926:	4d0d      	ldr	r5, [pc, #52]	@ (801795c <__libc_init_array+0x38>)
 8017928:	4c0d      	ldr	r4, [pc, #52]	@ (8017960 <__libc_init_array+0x3c>)
 801792a:	1b64      	subs	r4, r4, r5
 801792c:	10a4      	asrs	r4, r4, #2
 801792e:	2600      	movs	r6, #0
 8017930:	42a6      	cmp	r6, r4
 8017932:	d109      	bne.n	8017948 <__libc_init_array+0x24>
 8017934:	4d0b      	ldr	r5, [pc, #44]	@ (8017964 <__libc_init_array+0x40>)
 8017936:	4c0c      	ldr	r4, [pc, #48]	@ (8017968 <__libc_init_array+0x44>)
 8017938:	f000 fdbe 	bl	80184b8 <_init>
 801793c:	1b64      	subs	r4, r4, r5
 801793e:	10a4      	asrs	r4, r4, #2
 8017940:	2600      	movs	r6, #0
 8017942:	42a6      	cmp	r6, r4
 8017944:	d105      	bne.n	8017952 <__libc_init_array+0x2e>
 8017946:	bd70      	pop	{r4, r5, r6, pc}
 8017948:	f855 3b04 	ldr.w	r3, [r5], #4
 801794c:	4798      	blx	r3
 801794e:	3601      	adds	r6, #1
 8017950:	e7ee      	b.n	8017930 <__libc_init_array+0xc>
 8017952:	f855 3b04 	ldr.w	r3, [r5], #4
 8017956:	4798      	blx	r3
 8017958:	3601      	adds	r6, #1
 801795a:	e7f2      	b.n	8017942 <__libc_init_array+0x1e>
 801795c:	0801bcb0 	.word	0x0801bcb0
 8017960:	0801bcb0 	.word	0x0801bcb0
 8017964:	0801bcb0 	.word	0x0801bcb0
 8017968:	0801bcb4 	.word	0x0801bcb4

0801796c <__retarget_lock_init_recursive>:
 801796c:	4770      	bx	lr

0801796e <__retarget_lock_acquire_recursive>:
 801796e:	4770      	bx	lr

08017970 <__retarget_lock_release_recursive>:
 8017970:	4770      	bx	lr

08017972 <strcpy>:
 8017972:	4603      	mov	r3, r0
 8017974:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017978:	f803 2b01 	strb.w	r2, [r3], #1
 801797c:	2a00      	cmp	r2, #0
 801797e:	d1f9      	bne.n	8017974 <strcpy+0x2>
 8017980:	4770      	bx	lr

08017982 <memcpy>:
 8017982:	440a      	add	r2, r1
 8017984:	4291      	cmp	r1, r2
 8017986:	f100 33ff 	add.w	r3, r0, #4294967295
 801798a:	d100      	bne.n	801798e <memcpy+0xc>
 801798c:	4770      	bx	lr
 801798e:	b510      	push	{r4, lr}
 8017990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017998:	4291      	cmp	r1, r2
 801799a:	d1f9      	bne.n	8017990 <memcpy+0xe>
 801799c:	bd10      	pop	{r4, pc}
	...

080179a0 <__assert_func>:
 80179a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179a2:	4614      	mov	r4, r2
 80179a4:	461a      	mov	r2, r3
 80179a6:	4b09      	ldr	r3, [pc, #36]	@ (80179cc <__assert_func+0x2c>)
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	4605      	mov	r5, r0
 80179ac:	68d8      	ldr	r0, [r3, #12]
 80179ae:	b954      	cbnz	r4, 80179c6 <__assert_func+0x26>
 80179b0:	4b07      	ldr	r3, [pc, #28]	@ (80179d0 <__assert_func+0x30>)
 80179b2:	461c      	mov	r4, r3
 80179b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80179b8:	9100      	str	r1, [sp, #0]
 80179ba:	462b      	mov	r3, r5
 80179bc:	4905      	ldr	r1, [pc, #20]	@ (80179d4 <__assert_func+0x34>)
 80179be:	f000 fc89 	bl	80182d4 <fiprintf>
 80179c2:	f000 fd2d 	bl	8018420 <abort>
 80179c6:	4b04      	ldr	r3, [pc, #16]	@ (80179d8 <__assert_func+0x38>)
 80179c8:	e7f4      	b.n	80179b4 <__assert_func+0x14>
 80179ca:	bf00      	nop
 80179cc:	20000028 	.word	0x20000028
 80179d0:	0801bc74 	.word	0x0801bc74
 80179d4:	0801bc46 	.word	0x0801bc46
 80179d8:	0801bc39 	.word	0x0801bc39

080179dc <_free_r>:
 80179dc:	b538      	push	{r3, r4, r5, lr}
 80179de:	4605      	mov	r5, r0
 80179e0:	2900      	cmp	r1, #0
 80179e2:	d041      	beq.n	8017a68 <_free_r+0x8c>
 80179e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179e8:	1f0c      	subs	r4, r1, #4
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	bfb8      	it	lt
 80179ee:	18e4      	addlt	r4, r4, r3
 80179f0:	f000 f8e8 	bl	8017bc4 <__malloc_lock>
 80179f4:	4a1d      	ldr	r2, [pc, #116]	@ (8017a6c <_free_r+0x90>)
 80179f6:	6813      	ldr	r3, [r2, #0]
 80179f8:	b933      	cbnz	r3, 8017a08 <_free_r+0x2c>
 80179fa:	6063      	str	r3, [r4, #4]
 80179fc:	6014      	str	r4, [r2, #0]
 80179fe:	4628      	mov	r0, r5
 8017a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a04:	f000 b8e4 	b.w	8017bd0 <__malloc_unlock>
 8017a08:	42a3      	cmp	r3, r4
 8017a0a:	d908      	bls.n	8017a1e <_free_r+0x42>
 8017a0c:	6820      	ldr	r0, [r4, #0]
 8017a0e:	1821      	adds	r1, r4, r0
 8017a10:	428b      	cmp	r3, r1
 8017a12:	bf01      	itttt	eq
 8017a14:	6819      	ldreq	r1, [r3, #0]
 8017a16:	685b      	ldreq	r3, [r3, #4]
 8017a18:	1809      	addeq	r1, r1, r0
 8017a1a:	6021      	streq	r1, [r4, #0]
 8017a1c:	e7ed      	b.n	80179fa <_free_r+0x1e>
 8017a1e:	461a      	mov	r2, r3
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	b10b      	cbz	r3, 8017a28 <_free_r+0x4c>
 8017a24:	42a3      	cmp	r3, r4
 8017a26:	d9fa      	bls.n	8017a1e <_free_r+0x42>
 8017a28:	6811      	ldr	r1, [r2, #0]
 8017a2a:	1850      	adds	r0, r2, r1
 8017a2c:	42a0      	cmp	r0, r4
 8017a2e:	d10b      	bne.n	8017a48 <_free_r+0x6c>
 8017a30:	6820      	ldr	r0, [r4, #0]
 8017a32:	4401      	add	r1, r0
 8017a34:	1850      	adds	r0, r2, r1
 8017a36:	4283      	cmp	r3, r0
 8017a38:	6011      	str	r1, [r2, #0]
 8017a3a:	d1e0      	bne.n	80179fe <_free_r+0x22>
 8017a3c:	6818      	ldr	r0, [r3, #0]
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	6053      	str	r3, [r2, #4]
 8017a42:	4408      	add	r0, r1
 8017a44:	6010      	str	r0, [r2, #0]
 8017a46:	e7da      	b.n	80179fe <_free_r+0x22>
 8017a48:	d902      	bls.n	8017a50 <_free_r+0x74>
 8017a4a:	230c      	movs	r3, #12
 8017a4c:	602b      	str	r3, [r5, #0]
 8017a4e:	e7d6      	b.n	80179fe <_free_r+0x22>
 8017a50:	6820      	ldr	r0, [r4, #0]
 8017a52:	1821      	adds	r1, r4, r0
 8017a54:	428b      	cmp	r3, r1
 8017a56:	bf04      	itt	eq
 8017a58:	6819      	ldreq	r1, [r3, #0]
 8017a5a:	685b      	ldreq	r3, [r3, #4]
 8017a5c:	6063      	str	r3, [r4, #4]
 8017a5e:	bf04      	itt	eq
 8017a60:	1809      	addeq	r1, r1, r0
 8017a62:	6021      	streq	r1, [r4, #0]
 8017a64:	6054      	str	r4, [r2, #4]
 8017a66:	e7ca      	b.n	80179fe <_free_r+0x22>
 8017a68:	bd38      	pop	{r3, r4, r5, pc}
 8017a6a:	bf00      	nop
 8017a6c:	2000e1fc 	.word	0x2000e1fc

08017a70 <malloc>:
 8017a70:	4b02      	ldr	r3, [pc, #8]	@ (8017a7c <malloc+0xc>)
 8017a72:	4601      	mov	r1, r0
 8017a74:	6818      	ldr	r0, [r3, #0]
 8017a76:	f000 b825 	b.w	8017ac4 <_malloc_r>
 8017a7a:	bf00      	nop
 8017a7c:	20000028 	.word	0x20000028

08017a80 <sbrk_aligned>:
 8017a80:	b570      	push	{r4, r5, r6, lr}
 8017a82:	4e0f      	ldr	r6, [pc, #60]	@ (8017ac0 <sbrk_aligned+0x40>)
 8017a84:	460c      	mov	r4, r1
 8017a86:	6831      	ldr	r1, [r6, #0]
 8017a88:	4605      	mov	r5, r0
 8017a8a:	b911      	cbnz	r1, 8017a92 <sbrk_aligned+0x12>
 8017a8c:	f000 fcb8 	bl	8018400 <_sbrk_r>
 8017a90:	6030      	str	r0, [r6, #0]
 8017a92:	4621      	mov	r1, r4
 8017a94:	4628      	mov	r0, r5
 8017a96:	f000 fcb3 	bl	8018400 <_sbrk_r>
 8017a9a:	1c43      	adds	r3, r0, #1
 8017a9c:	d103      	bne.n	8017aa6 <sbrk_aligned+0x26>
 8017a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	bd70      	pop	{r4, r5, r6, pc}
 8017aa6:	1cc4      	adds	r4, r0, #3
 8017aa8:	f024 0403 	bic.w	r4, r4, #3
 8017aac:	42a0      	cmp	r0, r4
 8017aae:	d0f8      	beq.n	8017aa2 <sbrk_aligned+0x22>
 8017ab0:	1a21      	subs	r1, r4, r0
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	f000 fca4 	bl	8018400 <_sbrk_r>
 8017ab8:	3001      	adds	r0, #1
 8017aba:	d1f2      	bne.n	8017aa2 <sbrk_aligned+0x22>
 8017abc:	e7ef      	b.n	8017a9e <sbrk_aligned+0x1e>
 8017abe:	bf00      	nop
 8017ac0:	2000e1f8 	.word	0x2000e1f8

08017ac4 <_malloc_r>:
 8017ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ac8:	1ccd      	adds	r5, r1, #3
 8017aca:	f025 0503 	bic.w	r5, r5, #3
 8017ace:	3508      	adds	r5, #8
 8017ad0:	2d0c      	cmp	r5, #12
 8017ad2:	bf38      	it	cc
 8017ad4:	250c      	movcc	r5, #12
 8017ad6:	2d00      	cmp	r5, #0
 8017ad8:	4606      	mov	r6, r0
 8017ada:	db01      	blt.n	8017ae0 <_malloc_r+0x1c>
 8017adc:	42a9      	cmp	r1, r5
 8017ade:	d904      	bls.n	8017aea <_malloc_r+0x26>
 8017ae0:	230c      	movs	r3, #12
 8017ae2:	6033      	str	r3, [r6, #0]
 8017ae4:	2000      	movs	r0, #0
 8017ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017bc0 <_malloc_r+0xfc>
 8017aee:	f000 f869 	bl	8017bc4 <__malloc_lock>
 8017af2:	f8d8 3000 	ldr.w	r3, [r8]
 8017af6:	461c      	mov	r4, r3
 8017af8:	bb44      	cbnz	r4, 8017b4c <_malloc_r+0x88>
 8017afa:	4629      	mov	r1, r5
 8017afc:	4630      	mov	r0, r6
 8017afe:	f7ff ffbf 	bl	8017a80 <sbrk_aligned>
 8017b02:	1c43      	adds	r3, r0, #1
 8017b04:	4604      	mov	r4, r0
 8017b06:	d158      	bne.n	8017bba <_malloc_r+0xf6>
 8017b08:	f8d8 4000 	ldr.w	r4, [r8]
 8017b0c:	4627      	mov	r7, r4
 8017b0e:	2f00      	cmp	r7, #0
 8017b10:	d143      	bne.n	8017b9a <_malloc_r+0xd6>
 8017b12:	2c00      	cmp	r4, #0
 8017b14:	d04b      	beq.n	8017bae <_malloc_r+0xea>
 8017b16:	6823      	ldr	r3, [r4, #0]
 8017b18:	4639      	mov	r1, r7
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	eb04 0903 	add.w	r9, r4, r3
 8017b20:	f000 fc6e 	bl	8018400 <_sbrk_r>
 8017b24:	4581      	cmp	r9, r0
 8017b26:	d142      	bne.n	8017bae <_malloc_r+0xea>
 8017b28:	6821      	ldr	r1, [r4, #0]
 8017b2a:	1a6d      	subs	r5, r5, r1
 8017b2c:	4629      	mov	r1, r5
 8017b2e:	4630      	mov	r0, r6
 8017b30:	f7ff ffa6 	bl	8017a80 <sbrk_aligned>
 8017b34:	3001      	adds	r0, #1
 8017b36:	d03a      	beq.n	8017bae <_malloc_r+0xea>
 8017b38:	6823      	ldr	r3, [r4, #0]
 8017b3a:	442b      	add	r3, r5
 8017b3c:	6023      	str	r3, [r4, #0]
 8017b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8017b42:	685a      	ldr	r2, [r3, #4]
 8017b44:	bb62      	cbnz	r2, 8017ba0 <_malloc_r+0xdc>
 8017b46:	f8c8 7000 	str.w	r7, [r8]
 8017b4a:	e00f      	b.n	8017b6c <_malloc_r+0xa8>
 8017b4c:	6822      	ldr	r2, [r4, #0]
 8017b4e:	1b52      	subs	r2, r2, r5
 8017b50:	d420      	bmi.n	8017b94 <_malloc_r+0xd0>
 8017b52:	2a0b      	cmp	r2, #11
 8017b54:	d917      	bls.n	8017b86 <_malloc_r+0xc2>
 8017b56:	1961      	adds	r1, r4, r5
 8017b58:	42a3      	cmp	r3, r4
 8017b5a:	6025      	str	r5, [r4, #0]
 8017b5c:	bf18      	it	ne
 8017b5e:	6059      	strne	r1, [r3, #4]
 8017b60:	6863      	ldr	r3, [r4, #4]
 8017b62:	bf08      	it	eq
 8017b64:	f8c8 1000 	streq.w	r1, [r8]
 8017b68:	5162      	str	r2, [r4, r5]
 8017b6a:	604b      	str	r3, [r1, #4]
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	f000 f82f 	bl	8017bd0 <__malloc_unlock>
 8017b72:	f104 000b 	add.w	r0, r4, #11
 8017b76:	1d23      	adds	r3, r4, #4
 8017b78:	f020 0007 	bic.w	r0, r0, #7
 8017b7c:	1ac2      	subs	r2, r0, r3
 8017b7e:	bf1c      	itt	ne
 8017b80:	1a1b      	subne	r3, r3, r0
 8017b82:	50a3      	strne	r3, [r4, r2]
 8017b84:	e7af      	b.n	8017ae6 <_malloc_r+0x22>
 8017b86:	6862      	ldr	r2, [r4, #4]
 8017b88:	42a3      	cmp	r3, r4
 8017b8a:	bf0c      	ite	eq
 8017b8c:	f8c8 2000 	streq.w	r2, [r8]
 8017b90:	605a      	strne	r2, [r3, #4]
 8017b92:	e7eb      	b.n	8017b6c <_malloc_r+0xa8>
 8017b94:	4623      	mov	r3, r4
 8017b96:	6864      	ldr	r4, [r4, #4]
 8017b98:	e7ae      	b.n	8017af8 <_malloc_r+0x34>
 8017b9a:	463c      	mov	r4, r7
 8017b9c:	687f      	ldr	r7, [r7, #4]
 8017b9e:	e7b6      	b.n	8017b0e <_malloc_r+0x4a>
 8017ba0:	461a      	mov	r2, r3
 8017ba2:	685b      	ldr	r3, [r3, #4]
 8017ba4:	42a3      	cmp	r3, r4
 8017ba6:	d1fb      	bne.n	8017ba0 <_malloc_r+0xdc>
 8017ba8:	2300      	movs	r3, #0
 8017baa:	6053      	str	r3, [r2, #4]
 8017bac:	e7de      	b.n	8017b6c <_malloc_r+0xa8>
 8017bae:	230c      	movs	r3, #12
 8017bb0:	6033      	str	r3, [r6, #0]
 8017bb2:	4630      	mov	r0, r6
 8017bb4:	f000 f80c 	bl	8017bd0 <__malloc_unlock>
 8017bb8:	e794      	b.n	8017ae4 <_malloc_r+0x20>
 8017bba:	6005      	str	r5, [r0, #0]
 8017bbc:	e7d6      	b.n	8017b6c <_malloc_r+0xa8>
 8017bbe:	bf00      	nop
 8017bc0:	2000e1fc 	.word	0x2000e1fc

08017bc4 <__malloc_lock>:
 8017bc4:	4801      	ldr	r0, [pc, #4]	@ (8017bcc <__malloc_lock+0x8>)
 8017bc6:	f7ff bed2 	b.w	801796e <__retarget_lock_acquire_recursive>
 8017bca:	bf00      	nop
 8017bcc:	2000e1f4 	.word	0x2000e1f4

08017bd0 <__malloc_unlock>:
 8017bd0:	4801      	ldr	r0, [pc, #4]	@ (8017bd8 <__malloc_unlock+0x8>)
 8017bd2:	f7ff becd 	b.w	8017970 <__retarget_lock_release_recursive>
 8017bd6:	bf00      	nop
 8017bd8:	2000e1f4 	.word	0x2000e1f4

08017bdc <__sfputc_r>:
 8017bdc:	6893      	ldr	r3, [r2, #8]
 8017bde:	3b01      	subs	r3, #1
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	b410      	push	{r4}
 8017be4:	6093      	str	r3, [r2, #8]
 8017be6:	da08      	bge.n	8017bfa <__sfputc_r+0x1e>
 8017be8:	6994      	ldr	r4, [r2, #24]
 8017bea:	42a3      	cmp	r3, r4
 8017bec:	db01      	blt.n	8017bf2 <__sfputc_r+0x16>
 8017bee:	290a      	cmp	r1, #10
 8017bf0:	d103      	bne.n	8017bfa <__sfputc_r+0x1e>
 8017bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bf6:	f7ff bd78 	b.w	80176ea <__swbuf_r>
 8017bfa:	6813      	ldr	r3, [r2, #0]
 8017bfc:	1c58      	adds	r0, r3, #1
 8017bfe:	6010      	str	r0, [r2, #0]
 8017c00:	7019      	strb	r1, [r3, #0]
 8017c02:	4608      	mov	r0, r1
 8017c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c08:	4770      	bx	lr

08017c0a <__sfputs_r>:
 8017c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c0c:	4606      	mov	r6, r0
 8017c0e:	460f      	mov	r7, r1
 8017c10:	4614      	mov	r4, r2
 8017c12:	18d5      	adds	r5, r2, r3
 8017c14:	42ac      	cmp	r4, r5
 8017c16:	d101      	bne.n	8017c1c <__sfputs_r+0x12>
 8017c18:	2000      	movs	r0, #0
 8017c1a:	e007      	b.n	8017c2c <__sfputs_r+0x22>
 8017c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c20:	463a      	mov	r2, r7
 8017c22:	4630      	mov	r0, r6
 8017c24:	f7ff ffda 	bl	8017bdc <__sfputc_r>
 8017c28:	1c43      	adds	r3, r0, #1
 8017c2a:	d1f3      	bne.n	8017c14 <__sfputs_r+0xa>
 8017c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c30 <_vfiprintf_r>:
 8017c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c34:	460d      	mov	r5, r1
 8017c36:	b09d      	sub	sp, #116	@ 0x74
 8017c38:	4614      	mov	r4, r2
 8017c3a:	4698      	mov	r8, r3
 8017c3c:	4606      	mov	r6, r0
 8017c3e:	b118      	cbz	r0, 8017c48 <_vfiprintf_r+0x18>
 8017c40:	6a03      	ldr	r3, [r0, #32]
 8017c42:	b90b      	cbnz	r3, 8017c48 <_vfiprintf_r+0x18>
 8017c44:	f7ff fc68 	bl	8017518 <__sinit>
 8017c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c4a:	07d9      	lsls	r1, r3, #31
 8017c4c:	d405      	bmi.n	8017c5a <_vfiprintf_r+0x2a>
 8017c4e:	89ab      	ldrh	r3, [r5, #12]
 8017c50:	059a      	lsls	r2, r3, #22
 8017c52:	d402      	bmi.n	8017c5a <_vfiprintf_r+0x2a>
 8017c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c56:	f7ff fe8a 	bl	801796e <__retarget_lock_acquire_recursive>
 8017c5a:	89ab      	ldrh	r3, [r5, #12]
 8017c5c:	071b      	lsls	r3, r3, #28
 8017c5e:	d501      	bpl.n	8017c64 <_vfiprintf_r+0x34>
 8017c60:	692b      	ldr	r3, [r5, #16]
 8017c62:	b99b      	cbnz	r3, 8017c8c <_vfiprintf_r+0x5c>
 8017c64:	4629      	mov	r1, r5
 8017c66:	4630      	mov	r0, r6
 8017c68:	f7ff fd7e 	bl	8017768 <__swsetup_r>
 8017c6c:	b170      	cbz	r0, 8017c8c <_vfiprintf_r+0x5c>
 8017c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c70:	07dc      	lsls	r4, r3, #31
 8017c72:	d504      	bpl.n	8017c7e <_vfiprintf_r+0x4e>
 8017c74:	f04f 30ff 	mov.w	r0, #4294967295
 8017c78:	b01d      	add	sp, #116	@ 0x74
 8017c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c7e:	89ab      	ldrh	r3, [r5, #12]
 8017c80:	0598      	lsls	r0, r3, #22
 8017c82:	d4f7      	bmi.n	8017c74 <_vfiprintf_r+0x44>
 8017c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c86:	f7ff fe73 	bl	8017970 <__retarget_lock_release_recursive>
 8017c8a:	e7f3      	b.n	8017c74 <_vfiprintf_r+0x44>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c90:	2320      	movs	r3, #32
 8017c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c9a:	2330      	movs	r3, #48	@ 0x30
 8017c9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017e4c <_vfiprintf_r+0x21c>
 8017ca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017ca4:	f04f 0901 	mov.w	r9, #1
 8017ca8:	4623      	mov	r3, r4
 8017caa:	469a      	mov	sl, r3
 8017cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cb0:	b10a      	cbz	r2, 8017cb6 <_vfiprintf_r+0x86>
 8017cb2:	2a25      	cmp	r2, #37	@ 0x25
 8017cb4:	d1f9      	bne.n	8017caa <_vfiprintf_r+0x7a>
 8017cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8017cba:	d00b      	beq.n	8017cd4 <_vfiprintf_r+0xa4>
 8017cbc:	465b      	mov	r3, fp
 8017cbe:	4622      	mov	r2, r4
 8017cc0:	4629      	mov	r1, r5
 8017cc2:	4630      	mov	r0, r6
 8017cc4:	f7ff ffa1 	bl	8017c0a <__sfputs_r>
 8017cc8:	3001      	adds	r0, #1
 8017cca:	f000 80a7 	beq.w	8017e1c <_vfiprintf_r+0x1ec>
 8017cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017cd0:	445a      	add	r2, fp
 8017cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	f000 809f 	beq.w	8017e1c <_vfiprintf_r+0x1ec>
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8017ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ce8:	f10a 0a01 	add.w	sl, sl, #1
 8017cec:	9304      	str	r3, [sp, #16]
 8017cee:	9307      	str	r3, [sp, #28]
 8017cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8017cf6:	4654      	mov	r4, sl
 8017cf8:	2205      	movs	r2, #5
 8017cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cfe:	4853      	ldr	r0, [pc, #332]	@ (8017e4c <_vfiprintf_r+0x21c>)
 8017d00:	f7e8 faa6 	bl	8000250 <memchr>
 8017d04:	9a04      	ldr	r2, [sp, #16]
 8017d06:	b9d8      	cbnz	r0, 8017d40 <_vfiprintf_r+0x110>
 8017d08:	06d1      	lsls	r1, r2, #27
 8017d0a:	bf44      	itt	mi
 8017d0c:	2320      	movmi	r3, #32
 8017d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d12:	0713      	lsls	r3, r2, #28
 8017d14:	bf44      	itt	mi
 8017d16:	232b      	movmi	r3, #43	@ 0x2b
 8017d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d22:	d015      	beq.n	8017d50 <_vfiprintf_r+0x120>
 8017d24:	9a07      	ldr	r2, [sp, #28]
 8017d26:	4654      	mov	r4, sl
 8017d28:	2000      	movs	r0, #0
 8017d2a:	f04f 0c0a 	mov.w	ip, #10
 8017d2e:	4621      	mov	r1, r4
 8017d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d34:	3b30      	subs	r3, #48	@ 0x30
 8017d36:	2b09      	cmp	r3, #9
 8017d38:	d94b      	bls.n	8017dd2 <_vfiprintf_r+0x1a2>
 8017d3a:	b1b0      	cbz	r0, 8017d6a <_vfiprintf_r+0x13a>
 8017d3c:	9207      	str	r2, [sp, #28]
 8017d3e:	e014      	b.n	8017d6a <_vfiprintf_r+0x13a>
 8017d40:	eba0 0308 	sub.w	r3, r0, r8
 8017d44:	fa09 f303 	lsl.w	r3, r9, r3
 8017d48:	4313      	orrs	r3, r2
 8017d4a:	9304      	str	r3, [sp, #16]
 8017d4c:	46a2      	mov	sl, r4
 8017d4e:	e7d2      	b.n	8017cf6 <_vfiprintf_r+0xc6>
 8017d50:	9b03      	ldr	r3, [sp, #12]
 8017d52:	1d19      	adds	r1, r3, #4
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	9103      	str	r1, [sp, #12]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	bfbb      	ittet	lt
 8017d5c:	425b      	neglt	r3, r3
 8017d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8017d62:	9307      	strge	r3, [sp, #28]
 8017d64:	9307      	strlt	r3, [sp, #28]
 8017d66:	bfb8      	it	lt
 8017d68:	9204      	strlt	r2, [sp, #16]
 8017d6a:	7823      	ldrb	r3, [r4, #0]
 8017d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017d6e:	d10a      	bne.n	8017d86 <_vfiprintf_r+0x156>
 8017d70:	7863      	ldrb	r3, [r4, #1]
 8017d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8017d74:	d132      	bne.n	8017ddc <_vfiprintf_r+0x1ac>
 8017d76:	9b03      	ldr	r3, [sp, #12]
 8017d78:	1d1a      	adds	r2, r3, #4
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	9203      	str	r2, [sp, #12]
 8017d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017d82:	3402      	adds	r4, #2
 8017d84:	9305      	str	r3, [sp, #20]
 8017d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017e5c <_vfiprintf_r+0x22c>
 8017d8a:	7821      	ldrb	r1, [r4, #0]
 8017d8c:	2203      	movs	r2, #3
 8017d8e:	4650      	mov	r0, sl
 8017d90:	f7e8 fa5e 	bl	8000250 <memchr>
 8017d94:	b138      	cbz	r0, 8017da6 <_vfiprintf_r+0x176>
 8017d96:	9b04      	ldr	r3, [sp, #16]
 8017d98:	eba0 000a 	sub.w	r0, r0, sl
 8017d9c:	2240      	movs	r2, #64	@ 0x40
 8017d9e:	4082      	lsls	r2, r0
 8017da0:	4313      	orrs	r3, r2
 8017da2:	3401      	adds	r4, #1
 8017da4:	9304      	str	r3, [sp, #16]
 8017da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017daa:	4829      	ldr	r0, [pc, #164]	@ (8017e50 <_vfiprintf_r+0x220>)
 8017dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017db0:	2206      	movs	r2, #6
 8017db2:	f7e8 fa4d 	bl	8000250 <memchr>
 8017db6:	2800      	cmp	r0, #0
 8017db8:	d03f      	beq.n	8017e3a <_vfiprintf_r+0x20a>
 8017dba:	4b26      	ldr	r3, [pc, #152]	@ (8017e54 <_vfiprintf_r+0x224>)
 8017dbc:	bb1b      	cbnz	r3, 8017e06 <_vfiprintf_r+0x1d6>
 8017dbe:	9b03      	ldr	r3, [sp, #12]
 8017dc0:	3307      	adds	r3, #7
 8017dc2:	f023 0307 	bic.w	r3, r3, #7
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	9303      	str	r3, [sp, #12]
 8017dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dcc:	443b      	add	r3, r7
 8017dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dd0:	e76a      	b.n	8017ca8 <_vfiprintf_r+0x78>
 8017dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dd6:	460c      	mov	r4, r1
 8017dd8:	2001      	movs	r0, #1
 8017dda:	e7a8      	b.n	8017d2e <_vfiprintf_r+0xfe>
 8017ddc:	2300      	movs	r3, #0
 8017dde:	3401      	adds	r4, #1
 8017de0:	9305      	str	r3, [sp, #20]
 8017de2:	4619      	mov	r1, r3
 8017de4:	f04f 0c0a 	mov.w	ip, #10
 8017de8:	4620      	mov	r0, r4
 8017dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dee:	3a30      	subs	r2, #48	@ 0x30
 8017df0:	2a09      	cmp	r2, #9
 8017df2:	d903      	bls.n	8017dfc <_vfiprintf_r+0x1cc>
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d0c6      	beq.n	8017d86 <_vfiprintf_r+0x156>
 8017df8:	9105      	str	r1, [sp, #20]
 8017dfa:	e7c4      	b.n	8017d86 <_vfiprintf_r+0x156>
 8017dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e00:	4604      	mov	r4, r0
 8017e02:	2301      	movs	r3, #1
 8017e04:	e7f0      	b.n	8017de8 <_vfiprintf_r+0x1b8>
 8017e06:	ab03      	add	r3, sp, #12
 8017e08:	9300      	str	r3, [sp, #0]
 8017e0a:	462a      	mov	r2, r5
 8017e0c:	4b12      	ldr	r3, [pc, #72]	@ (8017e58 <_vfiprintf_r+0x228>)
 8017e0e:	a904      	add	r1, sp, #16
 8017e10:	4630      	mov	r0, r6
 8017e12:	f3af 8000 	nop.w
 8017e16:	4607      	mov	r7, r0
 8017e18:	1c78      	adds	r0, r7, #1
 8017e1a:	d1d6      	bne.n	8017dca <_vfiprintf_r+0x19a>
 8017e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017e1e:	07d9      	lsls	r1, r3, #31
 8017e20:	d405      	bmi.n	8017e2e <_vfiprintf_r+0x1fe>
 8017e22:	89ab      	ldrh	r3, [r5, #12]
 8017e24:	059a      	lsls	r2, r3, #22
 8017e26:	d402      	bmi.n	8017e2e <_vfiprintf_r+0x1fe>
 8017e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017e2a:	f7ff fda1 	bl	8017970 <__retarget_lock_release_recursive>
 8017e2e:	89ab      	ldrh	r3, [r5, #12]
 8017e30:	065b      	lsls	r3, r3, #25
 8017e32:	f53f af1f 	bmi.w	8017c74 <_vfiprintf_r+0x44>
 8017e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e38:	e71e      	b.n	8017c78 <_vfiprintf_r+0x48>
 8017e3a:	ab03      	add	r3, sp, #12
 8017e3c:	9300      	str	r3, [sp, #0]
 8017e3e:	462a      	mov	r2, r5
 8017e40:	4b05      	ldr	r3, [pc, #20]	@ (8017e58 <_vfiprintf_r+0x228>)
 8017e42:	a904      	add	r1, sp, #16
 8017e44:	4630      	mov	r0, r6
 8017e46:	f000 f879 	bl	8017f3c <_printf_i>
 8017e4a:	e7e4      	b.n	8017e16 <_vfiprintf_r+0x1e6>
 8017e4c:	0801bc75 	.word	0x0801bc75
 8017e50:	0801bc7f 	.word	0x0801bc7f
 8017e54:	00000000 	.word	0x00000000
 8017e58:	08017c0b 	.word	0x08017c0b
 8017e5c:	0801bc7b 	.word	0x0801bc7b

08017e60 <_printf_common>:
 8017e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e64:	4616      	mov	r6, r2
 8017e66:	4698      	mov	r8, r3
 8017e68:	688a      	ldr	r2, [r1, #8]
 8017e6a:	690b      	ldr	r3, [r1, #16]
 8017e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017e70:	4293      	cmp	r3, r2
 8017e72:	bfb8      	it	lt
 8017e74:	4613      	movlt	r3, r2
 8017e76:	6033      	str	r3, [r6, #0]
 8017e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017e7c:	4607      	mov	r7, r0
 8017e7e:	460c      	mov	r4, r1
 8017e80:	b10a      	cbz	r2, 8017e86 <_printf_common+0x26>
 8017e82:	3301      	adds	r3, #1
 8017e84:	6033      	str	r3, [r6, #0]
 8017e86:	6823      	ldr	r3, [r4, #0]
 8017e88:	0699      	lsls	r1, r3, #26
 8017e8a:	bf42      	ittt	mi
 8017e8c:	6833      	ldrmi	r3, [r6, #0]
 8017e8e:	3302      	addmi	r3, #2
 8017e90:	6033      	strmi	r3, [r6, #0]
 8017e92:	6825      	ldr	r5, [r4, #0]
 8017e94:	f015 0506 	ands.w	r5, r5, #6
 8017e98:	d106      	bne.n	8017ea8 <_printf_common+0x48>
 8017e9a:	f104 0a19 	add.w	sl, r4, #25
 8017e9e:	68e3      	ldr	r3, [r4, #12]
 8017ea0:	6832      	ldr	r2, [r6, #0]
 8017ea2:	1a9b      	subs	r3, r3, r2
 8017ea4:	42ab      	cmp	r3, r5
 8017ea6:	dc26      	bgt.n	8017ef6 <_printf_common+0x96>
 8017ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017eac:	6822      	ldr	r2, [r4, #0]
 8017eae:	3b00      	subs	r3, #0
 8017eb0:	bf18      	it	ne
 8017eb2:	2301      	movne	r3, #1
 8017eb4:	0692      	lsls	r2, r2, #26
 8017eb6:	d42b      	bmi.n	8017f10 <_printf_common+0xb0>
 8017eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ebc:	4641      	mov	r1, r8
 8017ebe:	4638      	mov	r0, r7
 8017ec0:	47c8      	blx	r9
 8017ec2:	3001      	adds	r0, #1
 8017ec4:	d01e      	beq.n	8017f04 <_printf_common+0xa4>
 8017ec6:	6823      	ldr	r3, [r4, #0]
 8017ec8:	6922      	ldr	r2, [r4, #16]
 8017eca:	f003 0306 	and.w	r3, r3, #6
 8017ece:	2b04      	cmp	r3, #4
 8017ed0:	bf02      	ittt	eq
 8017ed2:	68e5      	ldreq	r5, [r4, #12]
 8017ed4:	6833      	ldreq	r3, [r6, #0]
 8017ed6:	1aed      	subeq	r5, r5, r3
 8017ed8:	68a3      	ldr	r3, [r4, #8]
 8017eda:	bf0c      	ite	eq
 8017edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ee0:	2500      	movne	r5, #0
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	bfc4      	itt	gt
 8017ee6:	1a9b      	subgt	r3, r3, r2
 8017ee8:	18ed      	addgt	r5, r5, r3
 8017eea:	2600      	movs	r6, #0
 8017eec:	341a      	adds	r4, #26
 8017eee:	42b5      	cmp	r5, r6
 8017ef0:	d11a      	bne.n	8017f28 <_printf_common+0xc8>
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	e008      	b.n	8017f08 <_printf_common+0xa8>
 8017ef6:	2301      	movs	r3, #1
 8017ef8:	4652      	mov	r2, sl
 8017efa:	4641      	mov	r1, r8
 8017efc:	4638      	mov	r0, r7
 8017efe:	47c8      	blx	r9
 8017f00:	3001      	adds	r0, #1
 8017f02:	d103      	bne.n	8017f0c <_printf_common+0xac>
 8017f04:	f04f 30ff 	mov.w	r0, #4294967295
 8017f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f0c:	3501      	adds	r5, #1
 8017f0e:	e7c6      	b.n	8017e9e <_printf_common+0x3e>
 8017f10:	18e1      	adds	r1, r4, r3
 8017f12:	1c5a      	adds	r2, r3, #1
 8017f14:	2030      	movs	r0, #48	@ 0x30
 8017f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017f1a:	4422      	add	r2, r4
 8017f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017f24:	3302      	adds	r3, #2
 8017f26:	e7c7      	b.n	8017eb8 <_printf_common+0x58>
 8017f28:	2301      	movs	r3, #1
 8017f2a:	4622      	mov	r2, r4
 8017f2c:	4641      	mov	r1, r8
 8017f2e:	4638      	mov	r0, r7
 8017f30:	47c8      	blx	r9
 8017f32:	3001      	adds	r0, #1
 8017f34:	d0e6      	beq.n	8017f04 <_printf_common+0xa4>
 8017f36:	3601      	adds	r6, #1
 8017f38:	e7d9      	b.n	8017eee <_printf_common+0x8e>
	...

08017f3c <_printf_i>:
 8017f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f40:	7e0f      	ldrb	r7, [r1, #24]
 8017f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017f44:	2f78      	cmp	r7, #120	@ 0x78
 8017f46:	4691      	mov	r9, r2
 8017f48:	4680      	mov	r8, r0
 8017f4a:	460c      	mov	r4, r1
 8017f4c:	469a      	mov	sl, r3
 8017f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017f52:	d807      	bhi.n	8017f64 <_printf_i+0x28>
 8017f54:	2f62      	cmp	r7, #98	@ 0x62
 8017f56:	d80a      	bhi.n	8017f6e <_printf_i+0x32>
 8017f58:	2f00      	cmp	r7, #0
 8017f5a:	f000 80d2 	beq.w	8018102 <_printf_i+0x1c6>
 8017f5e:	2f58      	cmp	r7, #88	@ 0x58
 8017f60:	f000 80b9 	beq.w	80180d6 <_printf_i+0x19a>
 8017f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017f6c:	e03a      	b.n	8017fe4 <_printf_i+0xa8>
 8017f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017f72:	2b15      	cmp	r3, #21
 8017f74:	d8f6      	bhi.n	8017f64 <_printf_i+0x28>
 8017f76:	a101      	add	r1, pc, #4	@ (adr r1, 8017f7c <_printf_i+0x40>)
 8017f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f7c:	08017fd5 	.word	0x08017fd5
 8017f80:	08017fe9 	.word	0x08017fe9
 8017f84:	08017f65 	.word	0x08017f65
 8017f88:	08017f65 	.word	0x08017f65
 8017f8c:	08017f65 	.word	0x08017f65
 8017f90:	08017f65 	.word	0x08017f65
 8017f94:	08017fe9 	.word	0x08017fe9
 8017f98:	08017f65 	.word	0x08017f65
 8017f9c:	08017f65 	.word	0x08017f65
 8017fa0:	08017f65 	.word	0x08017f65
 8017fa4:	08017f65 	.word	0x08017f65
 8017fa8:	080180e9 	.word	0x080180e9
 8017fac:	08018013 	.word	0x08018013
 8017fb0:	080180a3 	.word	0x080180a3
 8017fb4:	08017f65 	.word	0x08017f65
 8017fb8:	08017f65 	.word	0x08017f65
 8017fbc:	0801810b 	.word	0x0801810b
 8017fc0:	08017f65 	.word	0x08017f65
 8017fc4:	08018013 	.word	0x08018013
 8017fc8:	08017f65 	.word	0x08017f65
 8017fcc:	08017f65 	.word	0x08017f65
 8017fd0:	080180ab 	.word	0x080180ab
 8017fd4:	6833      	ldr	r3, [r6, #0]
 8017fd6:	1d1a      	adds	r2, r3, #4
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	6032      	str	r2, [r6, #0]
 8017fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	e09d      	b.n	8018124 <_printf_i+0x1e8>
 8017fe8:	6833      	ldr	r3, [r6, #0]
 8017fea:	6820      	ldr	r0, [r4, #0]
 8017fec:	1d19      	adds	r1, r3, #4
 8017fee:	6031      	str	r1, [r6, #0]
 8017ff0:	0606      	lsls	r6, r0, #24
 8017ff2:	d501      	bpl.n	8017ff8 <_printf_i+0xbc>
 8017ff4:	681d      	ldr	r5, [r3, #0]
 8017ff6:	e003      	b.n	8018000 <_printf_i+0xc4>
 8017ff8:	0645      	lsls	r5, r0, #25
 8017ffa:	d5fb      	bpl.n	8017ff4 <_printf_i+0xb8>
 8017ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018000:	2d00      	cmp	r5, #0
 8018002:	da03      	bge.n	801800c <_printf_i+0xd0>
 8018004:	232d      	movs	r3, #45	@ 0x2d
 8018006:	426d      	negs	r5, r5
 8018008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801800c:	4859      	ldr	r0, [pc, #356]	@ (8018174 <_printf_i+0x238>)
 801800e:	230a      	movs	r3, #10
 8018010:	e011      	b.n	8018036 <_printf_i+0xfa>
 8018012:	6821      	ldr	r1, [r4, #0]
 8018014:	6833      	ldr	r3, [r6, #0]
 8018016:	0608      	lsls	r0, r1, #24
 8018018:	f853 5b04 	ldr.w	r5, [r3], #4
 801801c:	d402      	bmi.n	8018024 <_printf_i+0xe8>
 801801e:	0649      	lsls	r1, r1, #25
 8018020:	bf48      	it	mi
 8018022:	b2ad      	uxthmi	r5, r5
 8018024:	2f6f      	cmp	r7, #111	@ 0x6f
 8018026:	4853      	ldr	r0, [pc, #332]	@ (8018174 <_printf_i+0x238>)
 8018028:	6033      	str	r3, [r6, #0]
 801802a:	bf14      	ite	ne
 801802c:	230a      	movne	r3, #10
 801802e:	2308      	moveq	r3, #8
 8018030:	2100      	movs	r1, #0
 8018032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018036:	6866      	ldr	r6, [r4, #4]
 8018038:	60a6      	str	r6, [r4, #8]
 801803a:	2e00      	cmp	r6, #0
 801803c:	bfa2      	ittt	ge
 801803e:	6821      	ldrge	r1, [r4, #0]
 8018040:	f021 0104 	bicge.w	r1, r1, #4
 8018044:	6021      	strge	r1, [r4, #0]
 8018046:	b90d      	cbnz	r5, 801804c <_printf_i+0x110>
 8018048:	2e00      	cmp	r6, #0
 801804a:	d04b      	beq.n	80180e4 <_printf_i+0x1a8>
 801804c:	4616      	mov	r6, r2
 801804e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018052:	fb03 5711 	mls	r7, r3, r1, r5
 8018056:	5dc7      	ldrb	r7, [r0, r7]
 8018058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801805c:	462f      	mov	r7, r5
 801805e:	42bb      	cmp	r3, r7
 8018060:	460d      	mov	r5, r1
 8018062:	d9f4      	bls.n	801804e <_printf_i+0x112>
 8018064:	2b08      	cmp	r3, #8
 8018066:	d10b      	bne.n	8018080 <_printf_i+0x144>
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	07df      	lsls	r7, r3, #31
 801806c:	d508      	bpl.n	8018080 <_printf_i+0x144>
 801806e:	6923      	ldr	r3, [r4, #16]
 8018070:	6861      	ldr	r1, [r4, #4]
 8018072:	4299      	cmp	r1, r3
 8018074:	bfde      	ittt	le
 8018076:	2330      	movle	r3, #48	@ 0x30
 8018078:	f806 3c01 	strble.w	r3, [r6, #-1]
 801807c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018080:	1b92      	subs	r2, r2, r6
 8018082:	6122      	str	r2, [r4, #16]
 8018084:	f8cd a000 	str.w	sl, [sp]
 8018088:	464b      	mov	r3, r9
 801808a:	aa03      	add	r2, sp, #12
 801808c:	4621      	mov	r1, r4
 801808e:	4640      	mov	r0, r8
 8018090:	f7ff fee6 	bl	8017e60 <_printf_common>
 8018094:	3001      	adds	r0, #1
 8018096:	d14a      	bne.n	801812e <_printf_i+0x1f2>
 8018098:	f04f 30ff 	mov.w	r0, #4294967295
 801809c:	b004      	add	sp, #16
 801809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180a2:	6823      	ldr	r3, [r4, #0]
 80180a4:	f043 0320 	orr.w	r3, r3, #32
 80180a8:	6023      	str	r3, [r4, #0]
 80180aa:	4833      	ldr	r0, [pc, #204]	@ (8018178 <_printf_i+0x23c>)
 80180ac:	2778      	movs	r7, #120	@ 0x78
 80180ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80180b2:	6823      	ldr	r3, [r4, #0]
 80180b4:	6831      	ldr	r1, [r6, #0]
 80180b6:	061f      	lsls	r7, r3, #24
 80180b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80180bc:	d402      	bmi.n	80180c4 <_printf_i+0x188>
 80180be:	065f      	lsls	r7, r3, #25
 80180c0:	bf48      	it	mi
 80180c2:	b2ad      	uxthmi	r5, r5
 80180c4:	6031      	str	r1, [r6, #0]
 80180c6:	07d9      	lsls	r1, r3, #31
 80180c8:	bf44      	itt	mi
 80180ca:	f043 0320 	orrmi.w	r3, r3, #32
 80180ce:	6023      	strmi	r3, [r4, #0]
 80180d0:	b11d      	cbz	r5, 80180da <_printf_i+0x19e>
 80180d2:	2310      	movs	r3, #16
 80180d4:	e7ac      	b.n	8018030 <_printf_i+0xf4>
 80180d6:	4827      	ldr	r0, [pc, #156]	@ (8018174 <_printf_i+0x238>)
 80180d8:	e7e9      	b.n	80180ae <_printf_i+0x172>
 80180da:	6823      	ldr	r3, [r4, #0]
 80180dc:	f023 0320 	bic.w	r3, r3, #32
 80180e0:	6023      	str	r3, [r4, #0]
 80180e2:	e7f6      	b.n	80180d2 <_printf_i+0x196>
 80180e4:	4616      	mov	r6, r2
 80180e6:	e7bd      	b.n	8018064 <_printf_i+0x128>
 80180e8:	6833      	ldr	r3, [r6, #0]
 80180ea:	6825      	ldr	r5, [r4, #0]
 80180ec:	6961      	ldr	r1, [r4, #20]
 80180ee:	1d18      	adds	r0, r3, #4
 80180f0:	6030      	str	r0, [r6, #0]
 80180f2:	062e      	lsls	r6, r5, #24
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	d501      	bpl.n	80180fc <_printf_i+0x1c0>
 80180f8:	6019      	str	r1, [r3, #0]
 80180fa:	e002      	b.n	8018102 <_printf_i+0x1c6>
 80180fc:	0668      	lsls	r0, r5, #25
 80180fe:	d5fb      	bpl.n	80180f8 <_printf_i+0x1bc>
 8018100:	8019      	strh	r1, [r3, #0]
 8018102:	2300      	movs	r3, #0
 8018104:	6123      	str	r3, [r4, #16]
 8018106:	4616      	mov	r6, r2
 8018108:	e7bc      	b.n	8018084 <_printf_i+0x148>
 801810a:	6833      	ldr	r3, [r6, #0]
 801810c:	1d1a      	adds	r2, r3, #4
 801810e:	6032      	str	r2, [r6, #0]
 8018110:	681e      	ldr	r6, [r3, #0]
 8018112:	6862      	ldr	r2, [r4, #4]
 8018114:	2100      	movs	r1, #0
 8018116:	4630      	mov	r0, r6
 8018118:	f7e8 f89a 	bl	8000250 <memchr>
 801811c:	b108      	cbz	r0, 8018122 <_printf_i+0x1e6>
 801811e:	1b80      	subs	r0, r0, r6
 8018120:	6060      	str	r0, [r4, #4]
 8018122:	6863      	ldr	r3, [r4, #4]
 8018124:	6123      	str	r3, [r4, #16]
 8018126:	2300      	movs	r3, #0
 8018128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801812c:	e7aa      	b.n	8018084 <_printf_i+0x148>
 801812e:	6923      	ldr	r3, [r4, #16]
 8018130:	4632      	mov	r2, r6
 8018132:	4649      	mov	r1, r9
 8018134:	4640      	mov	r0, r8
 8018136:	47d0      	blx	sl
 8018138:	3001      	adds	r0, #1
 801813a:	d0ad      	beq.n	8018098 <_printf_i+0x15c>
 801813c:	6823      	ldr	r3, [r4, #0]
 801813e:	079b      	lsls	r3, r3, #30
 8018140:	d413      	bmi.n	801816a <_printf_i+0x22e>
 8018142:	68e0      	ldr	r0, [r4, #12]
 8018144:	9b03      	ldr	r3, [sp, #12]
 8018146:	4298      	cmp	r0, r3
 8018148:	bfb8      	it	lt
 801814a:	4618      	movlt	r0, r3
 801814c:	e7a6      	b.n	801809c <_printf_i+0x160>
 801814e:	2301      	movs	r3, #1
 8018150:	4632      	mov	r2, r6
 8018152:	4649      	mov	r1, r9
 8018154:	4640      	mov	r0, r8
 8018156:	47d0      	blx	sl
 8018158:	3001      	adds	r0, #1
 801815a:	d09d      	beq.n	8018098 <_printf_i+0x15c>
 801815c:	3501      	adds	r5, #1
 801815e:	68e3      	ldr	r3, [r4, #12]
 8018160:	9903      	ldr	r1, [sp, #12]
 8018162:	1a5b      	subs	r3, r3, r1
 8018164:	42ab      	cmp	r3, r5
 8018166:	dcf2      	bgt.n	801814e <_printf_i+0x212>
 8018168:	e7eb      	b.n	8018142 <_printf_i+0x206>
 801816a:	2500      	movs	r5, #0
 801816c:	f104 0619 	add.w	r6, r4, #25
 8018170:	e7f5      	b.n	801815e <_printf_i+0x222>
 8018172:	bf00      	nop
 8018174:	0801bc86 	.word	0x0801bc86
 8018178:	0801bc97 	.word	0x0801bc97

0801817c <__sflush_r>:
 801817c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018184:	0716      	lsls	r6, r2, #28
 8018186:	4605      	mov	r5, r0
 8018188:	460c      	mov	r4, r1
 801818a:	d454      	bmi.n	8018236 <__sflush_r+0xba>
 801818c:	684b      	ldr	r3, [r1, #4]
 801818e:	2b00      	cmp	r3, #0
 8018190:	dc02      	bgt.n	8018198 <__sflush_r+0x1c>
 8018192:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018194:	2b00      	cmp	r3, #0
 8018196:	dd48      	ble.n	801822a <__sflush_r+0xae>
 8018198:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801819a:	2e00      	cmp	r6, #0
 801819c:	d045      	beq.n	801822a <__sflush_r+0xae>
 801819e:	2300      	movs	r3, #0
 80181a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80181a4:	682f      	ldr	r7, [r5, #0]
 80181a6:	6a21      	ldr	r1, [r4, #32]
 80181a8:	602b      	str	r3, [r5, #0]
 80181aa:	d030      	beq.n	801820e <__sflush_r+0x92>
 80181ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80181ae:	89a3      	ldrh	r3, [r4, #12]
 80181b0:	0759      	lsls	r1, r3, #29
 80181b2:	d505      	bpl.n	80181c0 <__sflush_r+0x44>
 80181b4:	6863      	ldr	r3, [r4, #4]
 80181b6:	1ad2      	subs	r2, r2, r3
 80181b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80181ba:	b10b      	cbz	r3, 80181c0 <__sflush_r+0x44>
 80181bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80181be:	1ad2      	subs	r2, r2, r3
 80181c0:	2300      	movs	r3, #0
 80181c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80181c4:	6a21      	ldr	r1, [r4, #32]
 80181c6:	4628      	mov	r0, r5
 80181c8:	47b0      	blx	r6
 80181ca:	1c43      	adds	r3, r0, #1
 80181cc:	89a3      	ldrh	r3, [r4, #12]
 80181ce:	d106      	bne.n	80181de <__sflush_r+0x62>
 80181d0:	6829      	ldr	r1, [r5, #0]
 80181d2:	291d      	cmp	r1, #29
 80181d4:	d82b      	bhi.n	801822e <__sflush_r+0xb2>
 80181d6:	4a2a      	ldr	r2, [pc, #168]	@ (8018280 <__sflush_r+0x104>)
 80181d8:	410a      	asrs	r2, r1
 80181da:	07d6      	lsls	r6, r2, #31
 80181dc:	d427      	bmi.n	801822e <__sflush_r+0xb2>
 80181de:	2200      	movs	r2, #0
 80181e0:	6062      	str	r2, [r4, #4]
 80181e2:	04d9      	lsls	r1, r3, #19
 80181e4:	6922      	ldr	r2, [r4, #16]
 80181e6:	6022      	str	r2, [r4, #0]
 80181e8:	d504      	bpl.n	80181f4 <__sflush_r+0x78>
 80181ea:	1c42      	adds	r2, r0, #1
 80181ec:	d101      	bne.n	80181f2 <__sflush_r+0x76>
 80181ee:	682b      	ldr	r3, [r5, #0]
 80181f0:	b903      	cbnz	r3, 80181f4 <__sflush_r+0x78>
 80181f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80181f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80181f6:	602f      	str	r7, [r5, #0]
 80181f8:	b1b9      	cbz	r1, 801822a <__sflush_r+0xae>
 80181fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181fe:	4299      	cmp	r1, r3
 8018200:	d002      	beq.n	8018208 <__sflush_r+0x8c>
 8018202:	4628      	mov	r0, r5
 8018204:	f7ff fbea 	bl	80179dc <_free_r>
 8018208:	2300      	movs	r3, #0
 801820a:	6363      	str	r3, [r4, #52]	@ 0x34
 801820c:	e00d      	b.n	801822a <__sflush_r+0xae>
 801820e:	2301      	movs	r3, #1
 8018210:	4628      	mov	r0, r5
 8018212:	47b0      	blx	r6
 8018214:	4602      	mov	r2, r0
 8018216:	1c50      	adds	r0, r2, #1
 8018218:	d1c9      	bne.n	80181ae <__sflush_r+0x32>
 801821a:	682b      	ldr	r3, [r5, #0]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d0c6      	beq.n	80181ae <__sflush_r+0x32>
 8018220:	2b1d      	cmp	r3, #29
 8018222:	d001      	beq.n	8018228 <__sflush_r+0xac>
 8018224:	2b16      	cmp	r3, #22
 8018226:	d11e      	bne.n	8018266 <__sflush_r+0xea>
 8018228:	602f      	str	r7, [r5, #0]
 801822a:	2000      	movs	r0, #0
 801822c:	e022      	b.n	8018274 <__sflush_r+0xf8>
 801822e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018232:	b21b      	sxth	r3, r3
 8018234:	e01b      	b.n	801826e <__sflush_r+0xf2>
 8018236:	690f      	ldr	r7, [r1, #16]
 8018238:	2f00      	cmp	r7, #0
 801823a:	d0f6      	beq.n	801822a <__sflush_r+0xae>
 801823c:	0793      	lsls	r3, r2, #30
 801823e:	680e      	ldr	r6, [r1, #0]
 8018240:	bf08      	it	eq
 8018242:	694b      	ldreq	r3, [r1, #20]
 8018244:	600f      	str	r7, [r1, #0]
 8018246:	bf18      	it	ne
 8018248:	2300      	movne	r3, #0
 801824a:	eba6 0807 	sub.w	r8, r6, r7
 801824e:	608b      	str	r3, [r1, #8]
 8018250:	f1b8 0f00 	cmp.w	r8, #0
 8018254:	dde9      	ble.n	801822a <__sflush_r+0xae>
 8018256:	6a21      	ldr	r1, [r4, #32]
 8018258:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801825a:	4643      	mov	r3, r8
 801825c:	463a      	mov	r2, r7
 801825e:	4628      	mov	r0, r5
 8018260:	47b0      	blx	r6
 8018262:	2800      	cmp	r0, #0
 8018264:	dc08      	bgt.n	8018278 <__sflush_r+0xfc>
 8018266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801826a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801826e:	81a3      	strh	r3, [r4, #12]
 8018270:	f04f 30ff 	mov.w	r0, #4294967295
 8018274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018278:	4407      	add	r7, r0
 801827a:	eba8 0800 	sub.w	r8, r8, r0
 801827e:	e7e7      	b.n	8018250 <__sflush_r+0xd4>
 8018280:	dfbffffe 	.word	0xdfbffffe

08018284 <_fflush_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	690b      	ldr	r3, [r1, #16]
 8018288:	4605      	mov	r5, r0
 801828a:	460c      	mov	r4, r1
 801828c:	b913      	cbnz	r3, 8018294 <_fflush_r+0x10>
 801828e:	2500      	movs	r5, #0
 8018290:	4628      	mov	r0, r5
 8018292:	bd38      	pop	{r3, r4, r5, pc}
 8018294:	b118      	cbz	r0, 801829e <_fflush_r+0x1a>
 8018296:	6a03      	ldr	r3, [r0, #32]
 8018298:	b90b      	cbnz	r3, 801829e <_fflush_r+0x1a>
 801829a:	f7ff f93d 	bl	8017518 <__sinit>
 801829e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d0f3      	beq.n	801828e <_fflush_r+0xa>
 80182a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80182a8:	07d0      	lsls	r0, r2, #31
 80182aa:	d404      	bmi.n	80182b6 <_fflush_r+0x32>
 80182ac:	0599      	lsls	r1, r3, #22
 80182ae:	d402      	bmi.n	80182b6 <_fflush_r+0x32>
 80182b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182b2:	f7ff fb5c 	bl	801796e <__retarget_lock_acquire_recursive>
 80182b6:	4628      	mov	r0, r5
 80182b8:	4621      	mov	r1, r4
 80182ba:	f7ff ff5f 	bl	801817c <__sflush_r>
 80182be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182c0:	07da      	lsls	r2, r3, #31
 80182c2:	4605      	mov	r5, r0
 80182c4:	d4e4      	bmi.n	8018290 <_fflush_r+0xc>
 80182c6:	89a3      	ldrh	r3, [r4, #12]
 80182c8:	059b      	lsls	r3, r3, #22
 80182ca:	d4e1      	bmi.n	8018290 <_fflush_r+0xc>
 80182cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182ce:	f7ff fb4f 	bl	8017970 <__retarget_lock_release_recursive>
 80182d2:	e7dd      	b.n	8018290 <_fflush_r+0xc>

080182d4 <fiprintf>:
 80182d4:	b40e      	push	{r1, r2, r3}
 80182d6:	b503      	push	{r0, r1, lr}
 80182d8:	4601      	mov	r1, r0
 80182da:	ab03      	add	r3, sp, #12
 80182dc:	4805      	ldr	r0, [pc, #20]	@ (80182f4 <fiprintf+0x20>)
 80182de:	f853 2b04 	ldr.w	r2, [r3], #4
 80182e2:	6800      	ldr	r0, [r0, #0]
 80182e4:	9301      	str	r3, [sp, #4]
 80182e6:	f7ff fca3 	bl	8017c30 <_vfiprintf_r>
 80182ea:	b002      	add	sp, #8
 80182ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80182f0:	b003      	add	sp, #12
 80182f2:	4770      	bx	lr
 80182f4:	20000028 	.word	0x20000028

080182f8 <__swhatbuf_r>:
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	460c      	mov	r4, r1
 80182fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018300:	2900      	cmp	r1, #0
 8018302:	b096      	sub	sp, #88	@ 0x58
 8018304:	4615      	mov	r5, r2
 8018306:	461e      	mov	r6, r3
 8018308:	da0d      	bge.n	8018326 <__swhatbuf_r+0x2e>
 801830a:	89a3      	ldrh	r3, [r4, #12]
 801830c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018310:	f04f 0100 	mov.w	r1, #0
 8018314:	bf14      	ite	ne
 8018316:	2340      	movne	r3, #64	@ 0x40
 8018318:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801831c:	2000      	movs	r0, #0
 801831e:	6031      	str	r1, [r6, #0]
 8018320:	602b      	str	r3, [r5, #0]
 8018322:	b016      	add	sp, #88	@ 0x58
 8018324:	bd70      	pop	{r4, r5, r6, pc}
 8018326:	466a      	mov	r2, sp
 8018328:	f000 f848 	bl	80183bc <_fstat_r>
 801832c:	2800      	cmp	r0, #0
 801832e:	dbec      	blt.n	801830a <__swhatbuf_r+0x12>
 8018330:	9901      	ldr	r1, [sp, #4]
 8018332:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018336:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801833a:	4259      	negs	r1, r3
 801833c:	4159      	adcs	r1, r3
 801833e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018342:	e7eb      	b.n	801831c <__swhatbuf_r+0x24>

08018344 <__smakebuf_r>:
 8018344:	898b      	ldrh	r3, [r1, #12]
 8018346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018348:	079d      	lsls	r5, r3, #30
 801834a:	4606      	mov	r6, r0
 801834c:	460c      	mov	r4, r1
 801834e:	d507      	bpl.n	8018360 <__smakebuf_r+0x1c>
 8018350:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018354:	6023      	str	r3, [r4, #0]
 8018356:	6123      	str	r3, [r4, #16]
 8018358:	2301      	movs	r3, #1
 801835a:	6163      	str	r3, [r4, #20]
 801835c:	b003      	add	sp, #12
 801835e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018360:	ab01      	add	r3, sp, #4
 8018362:	466a      	mov	r2, sp
 8018364:	f7ff ffc8 	bl	80182f8 <__swhatbuf_r>
 8018368:	9f00      	ldr	r7, [sp, #0]
 801836a:	4605      	mov	r5, r0
 801836c:	4639      	mov	r1, r7
 801836e:	4630      	mov	r0, r6
 8018370:	f7ff fba8 	bl	8017ac4 <_malloc_r>
 8018374:	b948      	cbnz	r0, 801838a <__smakebuf_r+0x46>
 8018376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801837a:	059a      	lsls	r2, r3, #22
 801837c:	d4ee      	bmi.n	801835c <__smakebuf_r+0x18>
 801837e:	f023 0303 	bic.w	r3, r3, #3
 8018382:	f043 0302 	orr.w	r3, r3, #2
 8018386:	81a3      	strh	r3, [r4, #12]
 8018388:	e7e2      	b.n	8018350 <__smakebuf_r+0xc>
 801838a:	89a3      	ldrh	r3, [r4, #12]
 801838c:	6020      	str	r0, [r4, #0]
 801838e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018392:	81a3      	strh	r3, [r4, #12]
 8018394:	9b01      	ldr	r3, [sp, #4]
 8018396:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801839a:	b15b      	cbz	r3, 80183b4 <__smakebuf_r+0x70>
 801839c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183a0:	4630      	mov	r0, r6
 80183a2:	f000 f81d 	bl	80183e0 <_isatty_r>
 80183a6:	b128      	cbz	r0, 80183b4 <__smakebuf_r+0x70>
 80183a8:	89a3      	ldrh	r3, [r4, #12]
 80183aa:	f023 0303 	bic.w	r3, r3, #3
 80183ae:	f043 0301 	orr.w	r3, r3, #1
 80183b2:	81a3      	strh	r3, [r4, #12]
 80183b4:	89a3      	ldrh	r3, [r4, #12]
 80183b6:	431d      	orrs	r5, r3
 80183b8:	81a5      	strh	r5, [r4, #12]
 80183ba:	e7cf      	b.n	801835c <__smakebuf_r+0x18>

080183bc <_fstat_r>:
 80183bc:	b538      	push	{r3, r4, r5, lr}
 80183be:	4d07      	ldr	r5, [pc, #28]	@ (80183dc <_fstat_r+0x20>)
 80183c0:	2300      	movs	r3, #0
 80183c2:	4604      	mov	r4, r0
 80183c4:	4608      	mov	r0, r1
 80183c6:	4611      	mov	r1, r2
 80183c8:	602b      	str	r3, [r5, #0]
 80183ca:	f7e8 fcb9 	bl	8000d40 <_fstat>
 80183ce:	1c43      	adds	r3, r0, #1
 80183d0:	d102      	bne.n	80183d8 <_fstat_r+0x1c>
 80183d2:	682b      	ldr	r3, [r5, #0]
 80183d4:	b103      	cbz	r3, 80183d8 <_fstat_r+0x1c>
 80183d6:	6023      	str	r3, [r4, #0]
 80183d8:	bd38      	pop	{r3, r4, r5, pc}
 80183da:	bf00      	nop
 80183dc:	2000e0b0 	.word	0x2000e0b0

080183e0 <_isatty_r>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	4d06      	ldr	r5, [pc, #24]	@ (80183fc <_isatty_r+0x1c>)
 80183e4:	2300      	movs	r3, #0
 80183e6:	4604      	mov	r4, r0
 80183e8:	4608      	mov	r0, r1
 80183ea:	602b      	str	r3, [r5, #0]
 80183ec:	f7e8 fcb8 	bl	8000d60 <_isatty>
 80183f0:	1c43      	adds	r3, r0, #1
 80183f2:	d102      	bne.n	80183fa <_isatty_r+0x1a>
 80183f4:	682b      	ldr	r3, [r5, #0]
 80183f6:	b103      	cbz	r3, 80183fa <_isatty_r+0x1a>
 80183f8:	6023      	str	r3, [r4, #0]
 80183fa:	bd38      	pop	{r3, r4, r5, pc}
 80183fc:	2000e0b0 	.word	0x2000e0b0

08018400 <_sbrk_r>:
 8018400:	b538      	push	{r3, r4, r5, lr}
 8018402:	4d06      	ldr	r5, [pc, #24]	@ (801841c <_sbrk_r+0x1c>)
 8018404:	2300      	movs	r3, #0
 8018406:	4604      	mov	r4, r0
 8018408:	4608      	mov	r0, r1
 801840a:	602b      	str	r3, [r5, #0]
 801840c:	f7e8 fcc0 	bl	8000d90 <_sbrk>
 8018410:	1c43      	adds	r3, r0, #1
 8018412:	d102      	bne.n	801841a <_sbrk_r+0x1a>
 8018414:	682b      	ldr	r3, [r5, #0]
 8018416:	b103      	cbz	r3, 801841a <_sbrk_r+0x1a>
 8018418:	6023      	str	r3, [r4, #0]
 801841a:	bd38      	pop	{r3, r4, r5, pc}
 801841c:	2000e0b0 	.word	0x2000e0b0

08018420 <abort>:
 8018420:	b508      	push	{r3, lr}
 8018422:	2006      	movs	r0, #6
 8018424:	f000 f82c 	bl	8018480 <raise>
 8018428:	2001      	movs	r0, #1
 801842a:	f7e8 fc39 	bl	8000ca0 <_exit>

0801842e <_raise_r>:
 801842e:	291f      	cmp	r1, #31
 8018430:	b538      	push	{r3, r4, r5, lr}
 8018432:	4605      	mov	r5, r0
 8018434:	460c      	mov	r4, r1
 8018436:	d904      	bls.n	8018442 <_raise_r+0x14>
 8018438:	2316      	movs	r3, #22
 801843a:	6003      	str	r3, [r0, #0]
 801843c:	f04f 30ff 	mov.w	r0, #4294967295
 8018440:	bd38      	pop	{r3, r4, r5, pc}
 8018442:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018444:	b112      	cbz	r2, 801844c <_raise_r+0x1e>
 8018446:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801844a:	b94b      	cbnz	r3, 8018460 <_raise_r+0x32>
 801844c:	4628      	mov	r0, r5
 801844e:	f000 f831 	bl	80184b4 <_getpid_r>
 8018452:	4622      	mov	r2, r4
 8018454:	4601      	mov	r1, r0
 8018456:	4628      	mov	r0, r5
 8018458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801845c:	f000 b818 	b.w	8018490 <_kill_r>
 8018460:	2b01      	cmp	r3, #1
 8018462:	d00a      	beq.n	801847a <_raise_r+0x4c>
 8018464:	1c59      	adds	r1, r3, #1
 8018466:	d103      	bne.n	8018470 <_raise_r+0x42>
 8018468:	2316      	movs	r3, #22
 801846a:	6003      	str	r3, [r0, #0]
 801846c:	2001      	movs	r0, #1
 801846e:	e7e7      	b.n	8018440 <_raise_r+0x12>
 8018470:	2100      	movs	r1, #0
 8018472:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018476:	4620      	mov	r0, r4
 8018478:	4798      	blx	r3
 801847a:	2000      	movs	r0, #0
 801847c:	e7e0      	b.n	8018440 <_raise_r+0x12>
	...

08018480 <raise>:
 8018480:	4b02      	ldr	r3, [pc, #8]	@ (801848c <raise+0xc>)
 8018482:	4601      	mov	r1, r0
 8018484:	6818      	ldr	r0, [r3, #0]
 8018486:	f7ff bfd2 	b.w	801842e <_raise_r>
 801848a:	bf00      	nop
 801848c:	20000028 	.word	0x20000028

08018490 <_kill_r>:
 8018490:	b538      	push	{r3, r4, r5, lr}
 8018492:	4d07      	ldr	r5, [pc, #28]	@ (80184b0 <_kill_r+0x20>)
 8018494:	2300      	movs	r3, #0
 8018496:	4604      	mov	r4, r0
 8018498:	4608      	mov	r0, r1
 801849a:	4611      	mov	r1, r2
 801849c:	602b      	str	r3, [r5, #0]
 801849e:	f7e8 fbed 	bl	8000c7c <_kill>
 80184a2:	1c43      	adds	r3, r0, #1
 80184a4:	d102      	bne.n	80184ac <_kill_r+0x1c>
 80184a6:	682b      	ldr	r3, [r5, #0]
 80184a8:	b103      	cbz	r3, 80184ac <_kill_r+0x1c>
 80184aa:	6023      	str	r3, [r4, #0]
 80184ac:	bd38      	pop	{r3, r4, r5, pc}
 80184ae:	bf00      	nop
 80184b0:	2000e0b0 	.word	0x2000e0b0

080184b4 <_getpid_r>:
 80184b4:	f7e8 bbda 	b.w	8000c6c <_getpid>

080184b8 <_init>:
 80184b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ba:	bf00      	nop
 80184bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184be:	bc08      	pop	{r3}
 80184c0:	469e      	mov	lr, r3
 80184c2:	4770      	bx	lr

080184c4 <_fini>:
 80184c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c6:	bf00      	nop
 80184c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ca:	bc08      	pop	{r3}
 80184cc:	469e      	mov	lr, r3
 80184ce:	4770      	bx	lr
