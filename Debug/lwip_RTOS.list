
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba68  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dd4  0801bc68  0801bc68  0001cc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fa3c  0801fa3c  000211e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fa3c  0801fa3c  00020a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa44  0801fa44  000211e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fa44  0801fa44  00020a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fa48  0801fa48  00020a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0801fa4c  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011de0  200001e4  0801fc30  000211e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011fc4  0801fc30  00021fc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000211e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b0d3  00000000  00000000  00021212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009343  00000000  00000000  0005c2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bb8  00000000  00000000  00065628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002293  00000000  00000000  000681e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c18f  00000000  00000000  0006a473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000483dc  00000000  00000000  000a6602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126ede  00000000  00000000  000ee9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002158bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c504  00000000  00000000  00215900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00221e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801bc50 	.word	0x0801bc50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0801bc50 	.word	0x0801bc50

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <humiditySensorAdcInit>:
#include "adc_sensors.h"


void humiditySensorAdcInit(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44

	GPIOA->MODER |= GPIO_MODER_MODER3;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <humiditySensorAdcInit+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <humiditySensorAdcInit+0x84>)
 8000602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000612:	60d3      	str	r3, [r2, #12]

	ADC1->CR2 = 0;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 = 3;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000628:	2203      	movs	r2, #3
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC1->SMPR2 |= ADC_SMPR2_SMP3;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000632:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000636:	6113      	str	r3, [r2, #16]
	ADC1->CR1 = 0;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= ADC_CR2_EXTSEL;
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000644:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000648:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	6093      	str	r3, [r2, #8]

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40012000 	.word	0x40012000

0800066c <humiditySensorReadValue>:

uint16_t humiditySensorReadValue(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <humiditySensorReadValue+0x30>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a09      	ldr	r2, [pc, #36]	@ (800069c <humiditySensorReadValue+0x30>)
 8000676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800067a:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & ADC_SR_EOC));
 800067c:	bf00      	nop
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <humiditySensorReadValue+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <humiditySensorReadValue+0x12>

	return ADC1 -> DR;
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <humiditySensorReadValue+0x30>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	b29b      	uxth	r3, r3

}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000

080006a0 <humidity_read_task>:
void humidity_read_task(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while (1)
	    {
			PrintTaskTiming("ADC_start");
 80006a8:	481f      	ldr	r0, [pc, #124]	@ (8000728 <humidity_read_task+0x88>)
 80006aa:	f000 fab9 	bl	8000c20 <PrintTaskTiming>
	        int adc_value = humiditySensorReadValue();
 80006ae:	f7ff ffdd 	bl	800066c <humiditySensorReadValue>
 80006b2:	4603      	mov	r3, r0
 80006b4:	617b      	str	r3, [r7, #20]

	        if (adc_value < 1200) adc_value = 1200;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80006bc:	da02      	bge.n	80006c4 <humidity_read_task+0x24>
 80006be:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80006c2:	617b      	str	r3, [r7, #20]
	        if (adc_value > 4000) adc_value = 4000;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006ca:	dd02      	ble.n	80006d2 <humidity_read_task+0x32>
 80006cc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80006d0:	617b      	str	r3, [r7, #20]

	        float humidity = (float)(4000 - adc_value) / (4000 - 1200) * 100;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800072c <humidity_read_task+0x8c>
 80006e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000730 <humidity_read_task+0x90>
 80006ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f0:	edc7 7a04 	vstr	s15, [r7, #16]

	        HumiditySensorData sensorData;
	        sensorData.humidity = humidity;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	60bb      	str	r3, [r7, #8]
	        sensorData.adc_value = adc_value;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	60fb      	str	r3, [r7, #12]


	        if (xQueueOverwrite(sensorQueue, &sensorData) != pdTRUE)
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <humidity_read_task+0x94>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	2302      	movs	r3, #2
 8000706:	2200      	movs	r2, #0
 8000708:	f007 ff12 	bl	8008530 <xQueueGenericSend>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d002      	beq.n	8000718 <humidity_read_task+0x78>
	        {
	            printf("Failed to send humidity data to queue\n");
 8000712:	4809      	ldr	r0, [pc, #36]	@ (8000738 <humidity_read_task+0x98>)
 8000714:	f019 f956 	bl	80199c4 <puts>
	        }

	        PrintTaskTiming("ADC_end");
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <humidity_read_task+0x9c>)
 800071a:	f000 fa81 	bl	8000c20 <PrintTaskTiming>
	        vTaskDelay(pdMS_TO_TICKS(1000));
 800071e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000722:	f009 f883 	bl	800982c <vTaskDelay>
	    {
 8000726:	e7bf      	b.n	80006a8 <humidity_read_task+0x8>
 8000728:	0801bc68 	.word	0x0801bc68
 800072c:	452f0000 	.word	0x452f0000
 8000730:	42c80000 	.word	0x42c80000
 8000734:	200006e0 	.word	0x200006e0
 8000738:	0801bc74 	.word	0x0801bc74
 800073c:	0801bc9c 	.word	0x0801bc9c

08000740 <init_humidity_task>:
	    }
}
void init_humidity_task(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
    osThreadAttr_t humidityTask_attributes = {
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2224      	movs	r2, #36	@ 0x24
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f019 fa97 	bl	8019c80 <memset>
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <init_humidity_task+0x34>)
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	2318      	movs	r3, #24
 800075e:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };


    osThreadNew(humidity_read_task, NULL, &humidityTask_attributes);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	461a      	mov	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <init_humidity_task+0x38>)
 8000768:	f006 fdee 	bl	8007348 <osThreadNew>
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0801bca4 	.word	0x0801bca4
 8000778:	080006a1 	.word	0x080006a1

0800077c <pump_control_task>:

void pump_control_task(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <pump_control_task+0x68>)
 800078a:	f002 fdf7 	bl	800337c <HAL_GPIO_WritePin>

    HumiditySensorData sensor_data;

    while (1)
    {
    	PrintTaskTiming("PumpControl_start");
 800078e:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <pump_control_task+0x6c>)
 8000790:	f000 fa46 	bl	8000c20 <PrintTaskTiming>
        if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <pump_control_task+0x70>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f107 0108 	add.w	r1, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f008 fb0c 	bl	8008dbc <xQueuePeek>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d113      	bne.n	80007d2 <pump_control_task+0x56>
        {
            if (sensor_data.humidity < 50.0)
 80007aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ae:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80007f0 <pump_control_task+0x74>
 80007b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	d505      	bpl.n	80007c8 <pump_control_task+0x4c>
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <pump_control_task+0x68>)
 80007c2:	f002 fddb 	bl	800337c <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <pump_control_task+0x56>
               // printf("Pompa oprită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
            else
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <pump_control_task+0x68>)
 80007ce:	f002 fdd5 	bl	800337c <HAL_GPIO_WritePin>
               // printf("Pompa pornită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
        }
        PrintTaskTiming("PumpControl_start");
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <pump_control_task+0x6c>)
 80007d4:	f000 fa24 	bl	8000c20 <PrintTaskTiming>
        vTaskDelay(pdMS_TO_TICKS(1000));
 80007d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007dc:	f009 f826 	bl	800982c <vTaskDelay>
    	PrintTaskTiming("PumpControl_start");
 80007e0:	e7d5      	b.n	800078e <pump_control_task+0x12>
 80007e2:	bf00      	nop
 80007e4:	40020800 	.word	0x40020800
 80007e8:	0801bcb4 	.word	0x0801bcb4
 80007ec:	200006e0 	.word	0x200006e0
 80007f0:	42480000 	.word	0x42480000

080007f4 <init_pump_task>:
    }
}

void init_pump_task(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
    osThreadAttr_t pumpTask_attributes = {
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2224      	movs	r2, #36	@ 0x24
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f019 fa3d 	bl	8019c80 <memset>
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <init_pump_task+0x34>)
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800080e:	61bb      	str	r3, [r7, #24]
 8000810:	2308      	movs	r3, #8
 8000812:	61fb      	str	r3, [r7, #28]
        .name = "pumpTask",
        .stack_size = 512 * 4,
        .priority = (osPriority_t) osPriorityLow,
    };

    osThreadNew(pump_control_task, NULL, &pumpTask_attributes);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	461a      	mov	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	4804      	ldr	r0, [pc, #16]	@ (800082c <init_pump_task+0x38>)
 800081c:	f006 fd94 	bl	8007348 <osThreadNew>
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0801bcc8 	.word	0x0801bcc8
 800082c:	0800077d 	.word	0x0800077d

08000830 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f023 030f 	bic.w	r3, r3, #15
 8000840:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	f043 030c 	orr.w	r3, r3, #12
 800084e:	b2db      	uxtb	r3, r3
 8000850:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	f043 030c 	orr.w	r3, r3, #12
 8000862:	b2db      	uxtb	r3, r3
 8000864:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	b2db      	uxtb	r3, r3
 800086e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000870:	f107 0208 	add.w	r2, r7, #8
 8000874:	2364      	movs	r3, #100	@ 0x64
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	2304      	movs	r3, #4
 800087a:	214e      	movs	r1, #78	@ 0x4e
 800087c:	4803      	ldr	r0, [pc, #12]	@ (800088c <lcd_send_cmd+0x5c>)
 800087e:	f002 fe27 	bl	80034d0 <HAL_I2C_Master_Transmit>
}
 8000882:	bf00      	nop
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000028c 	.word	0x2000028c

08000890 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f023 030f 	bic.w	r3, r3, #15
 80008a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f043 030d 	orr.w	r3, r3, #13
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	f043 0309 	orr.w	r3, r3, #9
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	f043 030d 	orr.w	r3, r3, #13
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	f043 0309 	orr.w	r3, r3, #9
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008d0:	f107 0208 	add.w	r2, r7, #8
 80008d4:	2364      	movs	r3, #100	@ 0x64
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2304      	movs	r3, #4
 80008da:	214e      	movs	r1, #78	@ 0x4e
 80008dc:	4803      	ldr	r0, [pc, #12]	@ (80008ec <lcd_send_data+0x5c>)
 80008de:	f002 fdf7 	bl	80034d0 <HAL_I2C_Master_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000028c 	.word	0x2000028c

080008f0 <lcd_clear>:

void lcd_clear (void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80008f6:	2080      	movs	r0, #128	@ 0x80
 80008f8:	f7ff ff9a 	bl	8000830 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	e005      	b.n	800090e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000902:	2020      	movs	r0, #32
 8000904:	f7ff ffc4 	bl	8000890 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3301      	adds	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b45      	cmp	r3, #69	@ 0x45
 8000912:	ddf6      	ble.n	8000902 <lcd_clear+0x12>
	}
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
    switch (row)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d003      	beq.n	8000936 <lcd_put_cur+0x18>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <lcd_put_cur+0x22>
 8000934:	e009      	b.n	800094a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	603b      	str	r3, [r7, #0]
            break;
 800093e:	e004      	b.n	800094a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000946:	603b      	str	r3, [r7, #0]
            break;
 8000948:	bf00      	nop
    }

    lcd_send_cmd (col);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff6e 	bl	8000830 <lcd_send_cmd>
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <lcd_init>:


void lcd_init (void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

	vTaskDelay(pdMS_TO_TICKS(40));
 8000960:	2028      	movs	r0, #40	@ 0x28
 8000962:	f008 ff63 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x30);
 8000966:	2030      	movs	r0, #48	@ 0x30
 8000968:	f7ff ff62 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(5));
 800096c:	2005      	movs	r0, #5
 800096e:	f008 ff5d 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x30);
 8000972:	2030      	movs	r0, #48	@ 0x30
 8000974:	f7ff ff5c 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 8000978:	2001      	movs	r0, #1
 800097a:	f008 ff57 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x30);
 800097e:	2030      	movs	r0, #48	@ 0x30
 8000980:	f7ff ff56 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000984:	200a      	movs	r0, #10
 8000986:	f008 ff51 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x20);
 800098a:	2020      	movs	r0, #32
 800098c:	f7ff ff50 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000990:	200a      	movs	r0, #10
 8000992:	f008 ff4b 	bl	800982c <vTaskDelay>


	lcd_send_cmd (0x28);
 8000996:	2028      	movs	r0, #40	@ 0x28
 8000998:	f7ff ff4a 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 800099c:	2001      	movs	r0, #1
 800099e:	f008 ff45 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x08);
 80009a2:	2008      	movs	r0, #8
 80009a4:	f7ff ff44 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80009a8:	2001      	movs	r0, #1
 80009aa:	f008 ff3f 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x01);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f7ff ff3e 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1)); vTaskDelay(pdMS_TO_TICKS(1));
 80009b4:	2001      	movs	r0, #1
 80009b6:	f008 ff39 	bl	800982c <vTaskDelay>
 80009ba:	2001      	movs	r0, #1
 80009bc:	f008 ff36 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x06);
 80009c0:	2006      	movs	r0, #6
 80009c2:	f7ff ff35 	bl	8000830 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80009c6:	2001      	movs	r0, #1
 80009c8:	f008 ff30 	bl	800982c <vTaskDelay>
	lcd_send_cmd (0x0C);
 80009cc:	200c      	movs	r0, #12
 80009ce:	f7ff ff2f 	bl	8000830 <lcd_send_cmd>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80009de:	e006      	b.n	80009ee <lcd_send_string+0x18>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff51 	bl	8000890 <lcd_send_data>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f4      	bne.n	80009e0 <lcd_send_string+0xa>
}
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <init_lcd_control_task>:
void init_lcd_control_task(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	@ 0x28
 8000a04:	af00      	add	r7, sp, #0



    osThreadAttr_t lcdTask_attributes = {
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2224      	movs	r2, #36	@ 0x24
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f019 f937 	bl	8019c80 <memset>
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <init_lcd_control_task+0x34>)
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	2318      	movs	r3, #24
 8000a1e:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = (osPriority_t)osPriorityNormal,
    };


    osThreadNew(lcd_control_task, NULL, &lcdTask_attributes);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	461a      	mov	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <init_lcd_control_task+0x38>)
 8000a28:	f006 fc8e 	bl	8007348 <osThreadNew>
}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	@ 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	0801bcd4 	.word	0x0801bcd4
 8000a38:	08000a3d 	.word	0x08000a3d

08000a3c <lcd_control_task>:
void lcd_control_task(void *argument)
{	lcd_init();
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	f7ff ff8a 	bl	800095c <lcd_init>

char adc_str[16];
char humidity_str[16];
	while(1)
	{
		PrintTaskTiming("LCD_start");
 8000a48:	4821      	ldr	r0, [pc, #132]	@ (8000ad0 <lcd_control_task+0x94>)
 8000a4a:	f000 f8e9 	bl	8000c20 <PrintTaskTiming>
	    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000a4e:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <lcd_control_task+0x98>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f9af 	bl	8008dbc <xQueuePeek>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d12c      	bne.n	8000abe <lcd_control_task+0x82>
	    {
	    	 printf("Free heap: %u\n", xPortGetFreeHeapSize());
 8000a64:	f00a fee6 	bl	800b834 <xPortGetFreeHeapSize>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481a      	ldr	r0, [pc, #104]	@ (8000ad8 <lcd_control_task+0x9c>)
 8000a6e:	f018 ff41 	bl	80198f4 <iprintf>

		    sprintf(adc_str, "ADC: %d", sensor_data.adc_value);
 8000a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a74:	f107 0318 	add.w	r3, r7, #24
 8000a78:	4918      	ldr	r1, [pc, #96]	@ (8000adc <lcd_control_task+0xa0>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f018 ffde 	bl	8019a3c <siprintf>
		    sprintf(humidity_str, "Hum: %.2f%%", sensor_data.humidity);
 8000a80:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a88:	f107 0008 	add.w	r0, r7, #8
 8000a8c:	ec53 2b17 	vmov	r2, r3, d7
 8000a90:	4913      	ldr	r1, [pc, #76]	@ (8000ae0 <lcd_control_task+0xa4>)
 8000a92:	f018 ffd3 	bl	8019a3c <siprintf>

		    lcd_clear();
 8000a96:	f7ff ff2b 	bl	80008f0 <lcd_clear>

		    lcd_put_cur(0, 0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff ff3e 	bl	800091e <lcd_put_cur>
		    lcd_send_string(adc_str);
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff95 	bl	80009d6 <lcd_send_string>
		    lcd_put_cur(1, 0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	2001      	movs	r0, #1
 8000ab0:	f7ff ff35 	bl	800091e <lcd_put_cur>
		    lcd_send_string(humidity_str);
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff8c 	bl	80009d6 <lcd_send_string>
	    }
	    PrintTaskTiming("LCD_end");
 8000abe:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <lcd_control_task+0xa8>)
 8000ac0:	f000 f8ae 	bl	8000c20 <PrintTaskTiming>


	    vTaskDelay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac8:	f008 feb0 	bl	800982c <vTaskDelay>
		PrintTaskTiming("LCD_start");
 8000acc:	e7bc      	b.n	8000a48 <lcd_control_task+0xc>
 8000ace:	bf00      	nop
 8000ad0:	0801bce4 	.word	0x0801bce4
 8000ad4:	200006e0 	.word	0x200006e0
 8000ad8:	0801bcf0 	.word	0x0801bcf0
 8000adc:	0801bd00 	.word	0x0801bd00
 8000ae0:	0801bd08 	.word	0x0801bd08
 8000ae4:	0801bd14 	.word	0x0801bd14

08000ae8 <init_led_control_task>:

static uint8_t led_states[3] = {0, 0, 0};


void init_led_control_task(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0

    ledQueue = xQueueCreate(5, sizeof(LedMessage));
 8000aee:	2200      	movs	r2, #0
 8000af0:	2102      	movs	r1, #2
 8000af2:	2005      	movs	r0, #5
 8000af4:	f007 fb83 	bl	80081fe <xQueueGenericCreate>
 8000af8:	4603      	mov	r3, r0
 8000afa:	4a10      	ldr	r2, [pc, #64]	@ (8000b3c <init_led_control_task+0x54>)
 8000afc:	6013      	str	r3, [r2, #0]
    if (ledQueue == NULL) {
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <init_led_control_task+0x54>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d103      	bne.n	8000b0e <init_led_control_task+0x26>
        printf("Failed to create LED queue\n");
 8000b06:	480e      	ldr	r0, [pc, #56]	@ (8000b40 <init_led_control_task+0x58>)
 8000b08:	f018 ff5c 	bl	80199c4 <puts>
 8000b0c:	e012      	b.n	8000b34 <init_led_control_task+0x4c>
        return;
    }


    osThreadAttr_t ledTask_attributes = {
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2224      	movs	r2, #36	@ 0x24
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f019 f8b3 	bl	8019c80 <memset>
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <init_led_control_task+0x5c>)
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	2318      	movs	r3, #24
 8000b26:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };


    osThreadNew(led_control_task, NULL, &ledTask_attributes);
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <init_led_control_task+0x60>)
 8000b30:	f006 fc0a 	bl	8007348 <osThreadNew>
}
 8000b34:	3728      	adds	r7, #40	@ 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000200 	.word	0x20000200
 8000b40:	0801bd1c 	.word	0x0801bd1c
 8000b44:	0801bd38 	.word	0x0801bd38
 8000b48:	08000b4d 	.word	0x08000b4d

08000b4c <led_control_task>:


void led_control_task(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    LedMessage message;


    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <led_control_task+0xbc>)
 8000b5a:	f002 fc0f 	bl	800337c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	4829      	ldr	r0, [pc, #164]	@ (8000c08 <led_control_task+0xbc>)
 8000b64:	f002 fc0a 	bl	800337c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b6e:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <led_control_task+0xbc>)
 8000b70:	f002 fc04 	bl	800337c <HAL_GPIO_WritePin>

    while (1) {
    	PrintTaskTiming("LED_start");
 8000b74:	4825      	ldr	r0, [pc, #148]	@ (8000c0c <led_control_task+0xc0>)
 8000b76:	f000 f853 	bl	8000c20 <PrintTaskTiming>
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 8000b7a:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <led_control_task+0xc4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f107 010c 	add.w	r1, r7, #12
 8000b82:	f04f 32ff 	mov.w	r2, #4294967295
 8000b86:	4618      	mov	r0, r3
 8000b88:	f007 ff18 	bl	80089bc <xQueueReceive>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d136      	bne.n	8000c00 <led_control_task+0xb4>
            uint8_t led_index = (uint8_t)message.led;
 8000b92:	7b3b      	ldrb	r3, [r7, #12]
 8000b94:	73fb      	strb	r3, [r7, #15]

            if (led_index < 3) {
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d831      	bhi.n	8000c00 <led_control_task+0xb4>

                led_states[led_index] ^= 1;
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c14 <led_control_task+0xc8>)
 8000ba0:	5cd2      	ldrb	r2, [r2, r3]
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f082 0201 	eor.w	r2, r2, #1
 8000ba8:	b2d1      	uxtb	r1, r2
 8000baa:	4a1a      	ldr	r2, [pc, #104]	@ (8000c14 <led_control_task+0xc8>)
 8000bac:	54d1      	strb	r1, [r2, r3]
                GPIO_PinState pin_state = (led_states[led_index]) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <led_control_task+0xc8>)
 8000bb2:	5cd3      	ldrb	r3, [r2, r3]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73bb      	strb	r3, [r7, #14]

                switch (message.led) {
 8000bc0:	7b3b      	ldrb	r3, [r7, #12]
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d014      	beq.n	8000bf0 <led_control_task+0xa4>
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	dc1a      	bgt.n	8000c00 <led_control_task+0xb4>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <led_control_task+0x88>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d007      	beq.n	8000be2 <led_control_task+0x96>
 8000bd2:	e015      	b.n	8000c00 <led_control_task+0xb4>
                    case LED1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state); break;
 8000bd4:	7bbb      	ldrb	r3, [r7, #14]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2101      	movs	r1, #1
 8000bda:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <led_control_task+0xbc>)
 8000bdc:	f002 fbce 	bl	800337c <HAL_GPIO_WritePin>
 8000be0:	e00e      	b.n	8000c00 <led_control_task+0xb4>
                    case LED2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); break;
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	461a      	mov	r2, r3
 8000be6:	2180      	movs	r1, #128	@ 0x80
 8000be8:	4807      	ldr	r0, [pc, #28]	@ (8000c08 <led_control_task+0xbc>)
 8000bea:	f002 fbc7 	bl	800337c <HAL_GPIO_WritePin>
 8000bee:	e007      	b.n	8000c00 <led_control_task+0xb4>
                    case LED3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); break;
 8000bf0:	7bbb      	ldrb	r3, [r7, #14]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf8:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <led_control_task+0xbc>)
 8000bfa:	f002 fbbf 	bl	800337c <HAL_GPIO_WritePin>
 8000bfe:	bf00      	nop
                }


            }
        }
        PrintTaskTiming("LED_end");
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <led_control_task+0xcc>)
 8000c02:	f000 f80d 	bl	8000c20 <PrintTaskTiming>
    	PrintTaskTiming("LED_start");
 8000c06:	e7b5      	b.n	8000b74 <led_control_task+0x28>
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	0801bd48 	.word	0x0801bd48
 8000c10:	20000200 	.word	0x20000200
 8000c14:	20000204 	.word	0x20000204
 8000c18:	0801bd54 	.word	0x0801bd54
 8000c1c:	00000000 	.word	0x00000000

08000c20 <PrintTaskTiming>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_I2C2_Init(void);
void StartDefaultTask(void *argument);
osMutexId_t uartMutex;

void PrintTaskTiming(const char *task_name) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	6078      	str	r0, [r7, #4]
    TickType_t tick_now = xTaskGetTickCount();
 8000c28:	f008 ffbc 	bl	8009ba4 <xTaskGetTickCount>
 8000c2c:	60f8      	str	r0, [r7, #12]
    printf("Task %s: Tick=%lu, Time=%lu ms, Time=%.2f s\r\n",
           task_name,
           tick_now,
           tick_now * portTICK_PERIOD_MS,
           (float)(tick_now * portTICK_PERIOD_MS) / 1000.0);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	ee07 3a90 	vmov	s15, r3
 8000c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c38:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    printf("Task %s: Tick=%lu, Time=%lu ms, Time=%.2f s\r\n",
 8000c3c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8000c60 <PrintTaskTiming+0x40>
 8000c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c44:	ed8d 7b00 	vstr	d7, [sp]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <PrintTaskTiming+0x48>)
 8000c50:	f018 fe50 	bl	80198f4 <iprintf>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	f3af 8000 	nop.w
 8000c60:	00000000 	.word	0x00000000
 8000c64:	408f4000 	.word	0x408f4000
 8000c68:	0801bd68 	.word	0x0801bd68

08000c6c <InitUartMutex>:
void InitUartMutex(void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
    uartMutex = osMutexNew(NULL);
 8000c70:	2000      	movs	r0, #0
 8000c72:	f006 fc3d 	bl	80074f0 <osMutexNew>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a01      	ldr	r2, [pc, #4]	@ (8000c80 <InitUartMutex+0x14>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200006dc 	.word	0x200006dc

08000c84 <QueueInit>:

QueueHandle_t sensorQueue;

void QueueInit(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	sensorQueue = xQueueCreate(1,sizeof(HumiditySensorData));
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2108      	movs	r1, #8
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f007 fab6 	bl	80081fe <xQueueGenericCreate>
 8000c92:	4603      	mov	r3, r0
 8000c94:	4a06      	ldr	r2, [pc, #24]	@ (8000cb0 <QueueInit+0x2c>)
 8000c96:	6013      	str	r3, [r2, #0]

	if(sensorQueue == NULL){
 8000c98:	4b05      	ldr	r3, [pc, #20]	@ (8000cb0 <QueueInit+0x2c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d104      	bne.n	8000caa <QueueInit+0x26>
		printf("stiva pentru senzor umiditate nu a putut fi intializata");
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <QueueInit+0x30>)
 8000ca2:	f018 fe27 	bl	80198f4 <iprintf>
		while(1){};
 8000ca6:	bf00      	nop
 8000ca8:	e7fd      	b.n	8000ca6 <QueueInit+0x22>
	}

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200006e0 	.word	0x200006e0
 8000cb4:	0801bd98 	.word	0x0801bd98

08000cb8 <_write>:
int _write(int file, char *ptr, int len)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	 osMutexAcquire(uartMutex, osWaitForever);
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <_write+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 fca9 	bl	8007624 <osMutexAcquire>
	    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	68b9      	ldr	r1, [r7, #8]
 8000cdc:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <_write+0x44>)
 8000cde:	f004 fd85 	bl	80057ec <HAL_UART_Transmit>
	    osMutexRelease(uartMutex);
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <_write+0x40>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 fcfa 	bl	80076e0 <osMutexRelease>
	    return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200006dc 	.word	0x200006dc
 8000cfc:	20000208 	.word	0x20000208

08000d00 <main>:

int row=0;
int col=0;

int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  HAL_Init();
 8000d04:	f000 feef 	bl	8001ae6 <HAL_Init>
  QueueInit();
 8000d08:	f7ff ffbc 	bl	8000c84 <QueueInit>
  SystemClock_Config();
 8000d0c:	f000 f820 	bl	8000d50 <SystemClock_Config>

  MX_GPIO_Init();
 8000d10:	f000 f92c 	bl	8000f6c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d14:	f000 f8bc 	bl	8000e90 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000d18:	f000 f88a 	bl	8000e30 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d1c:	f000 f8f8 	bl	8000f10 <MX_USB_OTG_FS_PCD_Init>
  humiditySensorAdcInit();
 8000d20:	f7ff fc5e 	bl	80005e0 <humiditySensorAdcInit>
  InitUartMutex();
 8000d24:	f7ff ffa2 	bl	8000c6c <InitUartMutex>

  osKernelInitialize();
 8000d28:	f006 fa7c 	bl	8007224 <osKernelInitialize>


 // defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  init_pump_task();
 8000d2c:	f7ff fd62 	bl	80007f4 <init_pump_task>
  init_humidity_task();
 8000d30:	f7ff fd06 	bl	8000740 <init_humidity_task>
  init_led_control_task();
 8000d34:	f7ff fed8 	bl	8000ae8 <init_led_control_task>
  init_lcd_control_task();
 8000d38:	f7ff fe62 	bl	8000a00 <init_lcd_control_task>
  MX_LWIP_Init();
 8000d3c:	f005 fcec 	bl	8006718 <MX_LWIP_Init>
  tcpserver_init();
 8000d40:	f000 fe94 	bl	8001a6c <tcpserver_init>

  print_system_info();
 8000d44:	f000 fbce 	bl	80014e4 <print_system_info>

  osKernelStart();
 8000d48:	f006 faa0 	bl	800728c <osKernelStart>


  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <main+0x4c>

08000d50 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b094      	sub	sp, #80	@ 0x50
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2234      	movs	r2, #52	@ 0x34
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f018 ff8e 	bl	8019c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]


  HAL_PWR_EnableBkUpAccess();
 8000d74:	f003 f87e 	bl	8003e74 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <SystemClock_Config+0xd8>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <SystemClock_Config+0xd8>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d84:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <SystemClock_Config+0xd8>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d90:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <SystemClock_Config+0xdc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a25      	ldr	r2, [pc, #148]	@ (8000e2c <SystemClock_Config+0xdc>)
 8000d96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <SystemClock_Config+0xdc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000db0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000dc0:	23d8      	movs	r3, #216	@ 0xd8
 8000dc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 f8ad 	bl	8003f34 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000de0:	f000 f992 	bl	8001108 <Error_Handler>
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000de4:	f003 f856 	bl	8003e94 <HAL_PWREx_EnableOverDrive>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dee:	f000 f98b 	bl	8001108 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dfe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	2107      	movs	r1, #7
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fb3d 	bl	8004490 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e1c:	f000 f974 	bl	8001108 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	@ 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000e34:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	@ (8000e8c <MX_USART3_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_USART3_UART_Init+0x58>)
 8000e74:	f004 fc6c 	bl	8005750 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f943 	bl	8001108 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	40004800 	.word	0x40004800

08000e90 <MX_I2C2_Init>:
static void MX_I2C2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	@ (8000f08 <MX_I2C2_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <MX_I2C2_Init+0x7c>)
 8000e9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ecc:	f002 fa70 	bl	80033b0 <HAL_I2C_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ed6:	f000 f917 	bl	8001108 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ede:	f002 fde9 	bl	8003ab4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ee8:	f000 f90e 	bl	8001108 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eec:	2100      	movs	r1, #0
 8000eee:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <MX_I2C2_Init+0x74>)
 8000ef0:	f002 fe2b 	bl	8003b4a <HAL_I2CEx_ConfigDigitalFilter>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f905 	bl	8001108 <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000028c 	.word	0x2000028c
 8000f08:	40005800 	.word	0x40005800
 8000f0c:	20404768 	.word	0x20404768

08000f10 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	2206      	movs	r2, #6
 8000f20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f24:	2202      	movs	r2, #2
 8000f26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f30:	2202      	movs	r2, #2
 8000f32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f54:	f002 fe45 	bl	8003be2 <HAL_PCD_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f000 f8d3 	bl	8001108 <Error_Handler>
  }

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002d8 	.word	0x200002d8

08000f6c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08c      	sub	sp, #48	@ 0x30
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a53      	ldr	r2, [pc, #332]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b51      	ldr	r3, [pc, #324]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a47      	ldr	r2, [pc, #284]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b45      	ldr	r3, [pc, #276]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b42      	ldr	r3, [pc, #264]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a41      	ldr	r2, [pc, #260]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	4a35      	ldr	r2, [pc, #212]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8001000:	f043 0320 	orr.w	r3, r3, #32
 8001004:	6313      	str	r3, [r2, #48]	@ 0x30
 8001006:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	f003 0320 	and.w	r3, r3, #32
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001012:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a2f      	ldr	r2, [pc, #188]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8001018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <MX_GPIO_Init+0x168>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001030:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <MX_GPIO_Init+0x16c>)
 8001032:	f002 f9a3 	bl	800337c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2140      	movs	r1, #64	@ 0x40
 800103a:	4828      	ldr	r0, [pc, #160]	@ (80010dc <MX_GPIO_Init+0x170>)
 800103c:	f002 f99e 	bl	800337c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001046:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4822      	ldr	r0, [pc, #136]	@ (80010e0 <MX_GPIO_Init+0x174>)
 8001058:	f001 ffe4 	bl	8003024 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800105c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <MX_GPIO_Init+0x16c>)
 8001076:	f001 ffd5 	bl	8003024 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800107a:	2340      	movs	r3, #64	@ 0x40
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4812      	ldr	r0, [pc, #72]	@ (80010dc <MX_GPIO_Init+0x170>)
 8001092:	f001 ffc7 	bl	8003024 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <MX_GPIO_Init+0x170>)
 80010aa:	f001 ffbb 	bl	8003024 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010ae:	2380      	movs	r3, #128	@ 0x80
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <MX_GPIO_Init+0x174>)
 80010c6:	f001 ffad 	bl	8003024 <HAL_GPIO_Init>

}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	@ 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40020800 	.word	0x40020800

080010e4 <HAL_TIM_PeriodElapsedCallback>:
	  vTaskDelay(500);
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f6:	f000 fd03 	bl	8001b00 <HAL_IncTick>
  }

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010000 	.word	0x40010000

08001108 <Error_Handler>:


void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_MspInit+0x4c>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001124:	6413      	str	r3, [r2, #64]	@ 0x40
 8001126:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_MspInit+0x4c>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	210f      	movs	r1, #15
 800114e:	f06f 0001 	mvn.w	r0, #1
 8001152:	f000 fdd1 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0ae      	sub	sp, #184	@ 0xb8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2290      	movs	r2, #144	@ 0x90
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f018 fd7b 	bl	8019c80 <memset>
  if(huart->Instance==USART3)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <HAL_UART_MspInit+0xb4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d13c      	bne.n	800120e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001198:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800119a:	2300      	movs	r3, #0
 800119c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 fbcc 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ae:	f7ff ffab 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a19      	ldr	r2, [pc, #100]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <HAL_UART_MspInit+0xb8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011fc:	2307      	movs	r3, #7
 80011fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001202:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <HAL_UART_MspInit+0xbc>)
 800120a:	f001 ff0b 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	37b8      	adds	r7, #184	@ 0xb8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40004800 	.word	0x40004800
 800121c:	40023800 	.word	0x40023800
 8001220:	40020c00 	.word	0x40020c00

08001224 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ae      	sub	sp, #184	@ 0xb8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	2290      	movs	r2, #144	@ 0x90
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f018 fd1b 	bl	8019c80 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001252:	d159      	bne.n	8001308 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001254:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001258:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4618      	mov	r0, r3
 8001266:	f003 fb6b 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001270:	f7ff ff4a 	bl	8001108 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001278:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800128c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012a6:	230a      	movs	r3, #10
 80012a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4818      	ldr	r0, [pc, #96]	@ (8001314 <HAL_PCD_MspInit+0xf0>)
 80012b4:	f001 feb6 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4810      	ldr	r0, [pc, #64]	@ (8001314 <HAL_PCD_MspInit+0xf0>)
 80012d4:	f001 fea6 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <HAL_PCD_MspInit+0xec>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001300:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	37b8      	adds	r7, #184	@ 0xb8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0ae      	sub	sp, #184	@ 0xb8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2290      	movs	r2, #144	@ 0x90
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f018 fca1 	bl	8019c80 <memset>
  if(hi2c->Instance==I2C2)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a21      	ldr	r2, [pc, #132]	@ (80013c8 <HAL_I2C_MspInit+0xb0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13b      	bne.n	80013c0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800134e:	2300      	movs	r3, #0
 8001350:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4618      	mov	r0, r3
 8001358:	f003 faf2 	bl	8004940 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001362:	f7ff fed1 	bl	8001108 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a18      	ldr	r2, [pc, #96]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800137e:	2303      	movs	r3, #3
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001396:	2304      	movs	r3, #4
 8001398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800139c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	@ (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013a4:	f001 fe3e 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 80013ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_I2C_MspInit+0xb4>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013c0:	bf00      	nop
 80013c2:	37b8      	adds	r7, #184	@ 0xb8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005800 	.word	0x40005800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021400 	.word	0x40021400

080013d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	2019      	movs	r0, #25
 80013ea:	f000 fc85 	bl	8001cf8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013ee:	2019      	movs	r0, #25
 80013f0:	f000 fc9e 	bl	8001d30 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <HAL_InitTick+0xa0>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001474 <HAL_InitTick+0xa0>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001400:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <HAL_InitTick+0xa0>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140c:	f107 0210 	add.w	r2, r7, #16
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fa60 	bl	80048dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800141c:	f003 fa4a 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8001420:	4603      	mov	r3, r0
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001428:	4a13      	ldr	r2, [pc, #76]	@ (8001478 <HAL_InitTick+0xa4>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0c9b      	lsrs	r3, r3, #18
 8001430:	3b01      	subs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_InitTick+0xa8>)
 8001436:	4a12      	ldr	r2, [pc, #72]	@ (8001480 <HAL_InitTick+0xac>)
 8001438:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_InitTick+0xa8>)
 800143c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001440:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <HAL_InitTick+0xa8>)
 8001444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001446:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <HAL_InitTick+0xa8>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_InitTick+0xa8>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001454:	4809      	ldr	r0, [pc, #36]	@ (800147c <HAL_InitTick+0xa8>)
 8001456:	f003 fe9b 	bl	8005190 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001460:	4806      	ldr	r0, [pc, #24]	@ (800147c <HAL_InitTick+0xa8>)
 8001462:	f003 fef7 	bl	8005254 <HAL_TIM_Base_Start_IT>
 8001466:	4603      	mov	r3, r0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3730      	adds	r7, #48	@ 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	431bde83 	.word	0x431bde83
 800147c:	200006e4 	.word	0x200006e4
 8001480:	40010000 	.word	0x40010000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <NMI_Handler+0x4>

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <UsageFault_Handler+0x4>

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014c2:	f003 ff3f 	bl	8005344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200006e4 	.word	0x200006e4

080014d0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <ETH_IRQHandler+0x10>)
 80014d6:	f001 f817 	bl	8002508 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20003e64 	.word	0x20003e64

080014e4 <print_system_info>:
#include "sys_info.h"

void print_system_info(void) {
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 80014ea:	af00      	add	r7, sp, #0

    uint32_t totalRunTime;
    uint32_t numTasks;
    TaskStatus_t taskStatusArray[10];

    printf("\n=== Sistem FreeRTOS ===\n\r");
 80014ec:	483e      	ldr	r0, [pc, #248]	@ (80015e8 <print_system_info+0x104>)
 80014ee:	f018 fa01 	bl	80198f4 <iprintf>


    printf("Heap disponibil: %u bytes\n\r", xPortGetFreeHeapSize());
 80014f2:	f00a f99f 	bl	800b834 <xPortGetFreeHeapSize>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4619      	mov	r1, r3
 80014fa:	483c      	ldr	r0, [pc, #240]	@ (80015ec <print_system_info+0x108>)
 80014fc:	f018 f9fa 	bl	80198f4 <iprintf>
    printf("Heap minim disponibil: %u bytes\n\r", xPortGetMinimumEverFreeHeapSize());
 8001500:	f00a f9a4 	bl	800b84c <xPortGetMinimumEverFreeHeapSize>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4839      	ldr	r0, [pc, #228]	@ (80015f0 <print_system_info+0x10c>)
 800150a:	f018 f9f3 	bl	80198f4 <iprintf>


    printf("\n=== Lista Taskuri ===\n\r");
 800150e:	4839      	ldr	r0, [pc, #228]	@ (80015f4 <print_system_info+0x110>)
 8001510:	f018 f9f0 	bl	80198f4 <iprintf>
    vTaskList(taskListBuffer);
 8001514:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001518:	4618      	mov	r0, r3
 800151a:	f009 f9b9 	bl	800a890 <vTaskList>
    printf("Nume Task   Stare   Prioritate   Stack Rămas   Nr. Task\n\r");
 800151e:	4836      	ldr	r0, [pc, #216]	@ (80015f8 <print_system_info+0x114>)
 8001520:	f018 f9e8 	bl	80198f4 <iprintf>
    printf("%s\n", taskListBuffer);
 8001524:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001528:	4618      	mov	r0, r3
 800152a:	f018 fa4b 	bl	80199c4 <puts>


    printf("\n=== Detalii Taskuri ===\n");
 800152e:	4833      	ldr	r0, [pc, #204]	@ (80015fc <print_system_info+0x118>)
 8001530:	f018 fa48 	bl	80199c4 <puts>
    numTasks = uxTaskGetSystemState(taskStatusArray, 10, &totalRunTime);
 8001534:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	210a      	movs	r1, #10
 800153c:	4618      	mov	r0, r3
 800153e:	f008 fb53 	bl	8009be8 <uxTaskGetSystemState>
 8001542:	f8c7 0370 	str.w	r0, [r7, #880]	@ 0x370
    for (uint32_t i = 0; i < numTasks; i++) {
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800154c:	e030      	b.n	80015b0 <print_system_info+0xcc>
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 800154e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001552:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 8001556:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3304      	adds	r3, #4
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800156c:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 8001570:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3310      	adds	r3, #16
 8001580:	681c      	ldr	r4, [r3, #0]
               taskStatusArray[i].pcTaskName,
               taskStatusArray[i].uxCurrentPriority,
               taskStatusArray[i].usStackHighWaterMark);
 8001582:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001586:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 800158a:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3320      	adds	r3, #32
 800159a:	881b      	ldrh	r3, [r3, #0]
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 800159c:	4622      	mov	r2, r4
 800159e:	4601      	mov	r1, r0
 80015a0:	4817      	ldr	r0, [pc, #92]	@ (8001600 <print_system_info+0x11c>)
 80015a2:	f018 f9a7 	bl	80198f4 <iprintf>
    for (uint32_t i = 0; i < numTasks; i++) {
 80015a6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80015aa:	3301      	adds	r3, #1
 80015ac:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80015b0:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80015b4:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3c8      	bcc.n	800154e <print_system_info+0x6a>
    }


    printf("\n=== Alte informații ===\n\r");
 80015bc:	4811      	ldr	r0, [pc, #68]	@ (8001604 <print_system_info+0x120>)
 80015be:	f018 f999 	bl	80198f4 <iprintf>
    printf("Tick-uri de sistem: %lu\n\r", xTaskGetTickCount());
 80015c2:	f008 faef 	bl	8009ba4 <xTaskGetTickCount>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	480f      	ldr	r0, [pc, #60]	@ (8001608 <print_system_info+0x124>)
 80015cc:	f018 f992 	bl	80198f4 <iprintf>
    printf("Stare scheduler: %u\n\r", xTaskGetSchedulerState());
 80015d0:	f008 ffb6 	bl	800a540 <xTaskGetSchedulerState>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <print_system_info+0x128>)
 80015da:	f018 f98b 	bl	80198f4 <iprintf>
}
 80015de:	bf00      	nop
 80015e0:	f507 775f 	add.w	r7, r7, #892	@ 0x37c
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	0801bdec 	.word	0x0801bdec
 80015ec:	0801be08 	.word	0x0801be08
 80015f0:	0801be24 	.word	0x0801be24
 80015f4:	0801be48 	.word	0x0801be48
 80015f8:	0801be64 	.word	0x0801be64
 80015fc:	0801bea0 	.word	0x0801bea0
 8001600:	0801bebc 	.word	0x0801bebc
 8001604:	0801bef0 	.word	0x0801bef0
 8001608:	0801bf0c 	.word	0x0801bf0c
 800160c:	0801bf28 	.word	0x0801bf28

08001610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_kill>:

int _kill(int pid, int sig)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162a:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <_kill+0x20>)
 800162c:	2216      	movs	r2, #22
 800162e:	601a      	str	r2, [r3, #0]
	return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20011e74 	.word	0x20011e74

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe5 	bl	8001620 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001656:	bf00      	nop
 8001658:	e7fd      	b.n	8001656 <_exit+0x12>

0800165a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e00a      	b.n	8001682 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800166c:	f3af 8000 	nop.w
 8001670:	4601      	mov	r1, r0
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60ba      	str	r2, [r7, #8]
 8001678:	b2ca      	uxtb	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf0      	blt.n	800166c <_read+0x12>
	}

return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016bc:	605a      	str	r2, [r3, #4]
	return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
	return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	@ (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	@ (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d205      	bcs.n	8001738 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <_sbrk+0x6c>)
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a06      	ldr	r2, [pc, #24]	@ (8001760 <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	20080000 	.word	0x20080000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000730 	.word	0x20000730
 8001764:	20011fc8 	.word	0x20011fc8
 8001768:	20011e74 	.word	0x20011e74

0800176c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <get_humidity_value>:
static struct netbuf *buf;
char msg[512];
char smsg[1024];

 float get_humidity_value(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    HumiditySensorData sensor_data;

    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <get_humidity_value+0x30>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4639      	mov	r1, r7
 800179c:	2200      	movs	r2, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f007 fb0c 	bl	8008dbc <xQueuePeek>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <get_humidity_value+0x1e>
    {
        return sensor_data.humidity;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	e000      	b.n	80017b0 <get_humidity_value+0x20>
    }
    return -1.0f;
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <get_humidity_value+0x34>)
}
 80017b0:	ee07 3a90 	vmov	s15, r3
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200006e0 	.word	0x200006e0
 80017c4:	bf800000 	.word	0xbf800000

080017c8 <process_http_request>:

static void process_http_request(const char *request, char *response)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0a2      	sub	sp, #136	@ 0x88
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 80017d2:	494e      	ldr	r1, [pc, #312]	@ (800190c <process_http_request+0x144>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f018 fa7d 	bl	8019cd4 <strstr>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01d      	beq.n	800181c <process_http_request+0x54>
    {
        float humidity = get_humidity_value();
 80017e0:	f7ff ffd6 	bl	8001790 <get_humidity_value>
 80017e4:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

        char humidity_str[100];
        snprintf(humidity_str, sizeof(humidity_str), "%.2f", humidity);
 80017e8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80017ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	ed8d 7b00 	vstr	d7, [sp]
 80017f8:	4a45      	ldr	r2, [pc, #276]	@ (8001910 <process_http_request+0x148>)
 80017fa:	2164      	movs	r1, #100	@ 0x64
 80017fc:	4618      	mov	r0, r3
 80017fe:	f018 f8e9 	bl	80199d4 <sniprintf>

        const char *http_response =
 8001802:	4b44      	ldr	r3, [pc, #272]	@ (8001914 <process_http_request+0x14c>)
 8001804:	673b      	str	r3, [r7, #112]	@ 0x70
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n";
        strcpy(response, http_response);
 8001806:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f018 faea 	bl	8019de2 <strcpy>
        strcat(response, humidity_str);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f018 fa3b 	bl	8019c90 <strcat>
 800181a:	e073      	b.n	8001904 <process_http_request+0x13c>
    }
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 800181c:	493e      	ldr	r1, [pc, #248]	@ (8001918 <process_http_request+0x150>)
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f018 fa58 	bl	8019cd4 <strstr>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d066      	beq.n	80018f8 <process_http_request+0x130>
    {

        const char *body = strstr(request, "\r\n\r\n");
 800182a:	493c      	ldr	r1, [pc, #240]	@ (800191c <process_http_request+0x154>)
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f018 fa51 	bl	8019cd4 <strstr>
 8001832:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (body != NULL)
 8001834:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001836:	2b00      	cmp	r3, #0
 8001838:	d057      	beq.n	80018ea <process_http_request+0x122>
        {
            body += 4;
 800183a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800183c:	3304      	adds	r3, #4
 800183e:	67bb      	str	r3, [r7, #120]	@ 0x78

            LedMessage message;
            if (strstr(body, "led=1") != NULL)
 8001840:	4937      	ldr	r1, [pc, #220]	@ (8001920 <process_http_request+0x158>)
 8001842:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001844:	f018 fa46 	bl	8019cd4 <strstr>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <process_http_request+0x8e>
            {
                message.led = LED1;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001854:	e01c      	b.n	8001890 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=2") != NULL)
 8001856:	4933      	ldr	r1, [pc, #204]	@ (8001924 <process_http_request+0x15c>)
 8001858:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800185a:	f018 fa3b 	bl	8019cd4 <strstr>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <process_http_request+0xa4>
            {
                message.led = LED2;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800186a:	e011      	b.n	8001890 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=3") != NULL)
 800186c:	492e      	ldr	r1, [pc, #184]	@ (8001928 <process_http_request+0x160>)
 800186e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001870:	f018 fa30 	bl	8019cd4 <strstr>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <process_http_request+0xba>
            {
                message.led = LED3;
 800187a:	2302      	movs	r3, #2
 800187c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001880:	e006      	b.n	8001890 <process_http_request+0xc8>
            }
            else
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nInvalid LED ID");
 8001882:	4a2a      	ldr	r2, [pc, #168]	@ (800192c <process_http_request+0x164>)
 8001884:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001888:	6838      	ldr	r0, [r7, #0]
 800188a:	f018 f8a3 	bl	80199d4 <sniprintf>
                return;
 800188e:	e039      	b.n	8001904 <process_http_request+0x13c>
            }

            if (strstr(body, "toggle=1") != NULL)
 8001890:	4927      	ldr	r1, [pc, #156]	@ (8001930 <process_http_request+0x168>)
 8001892:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001894:	f018 fa1e 	bl	8019cd4 <strstr>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00e      	beq.n	80018bc <process_http_request+0xf4>
            {
                message.toggle = 1;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
                return;
            }

            if (xQueueSendToBack(ledQueue, &message, 0) != pdTRUE)
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <process_http_request+0x16c>)
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80018ac:	2300      	movs	r3, #0
 80018ae:	2200      	movs	r2, #0
 80018b0:	f006 fe3e 	bl	8008530 <xQueueGenericSend>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d00e      	beq.n	80018d8 <process_http_request+0x110>
 80018ba:	e006      	b.n	80018ca <process_http_request+0x102>
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
 80018bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001938 <process_http_request+0x170>)
 80018be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c2:	6838      	ldr	r0, [r7, #0]
 80018c4:	f018 f886 	bl	80199d4 <sniprintf>
                return;
 80018c8:	e01c      	b.n	8001904 <process_http_request+0x13c>
            {
                snprintf(response, 256, "HTTP/1.1 500 Internal Server Error\r\n\r\nQueue full");
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <process_http_request+0x174>)
 80018cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d0:	6838      	ldr	r0, [r7, #0]
 80018d2:	f018 f87f 	bl	80199d4 <sniprintf>
                return;
 80018d6:	e015      	b.n	8001904 <process_http_request+0x13c>
            }

            snprintf(response, 256, "HTTP/1.1 200 OK\r\n\r\nLED %d toggled", message.led);
 80018d8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80018dc:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <process_http_request+0x178>)
 80018de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e2:	6838      	ldr	r0, [r7, #0]
 80018e4:	f018 f876 	bl	80199d4 <sniprintf>
 80018e8:	e00c      	b.n	8001904 <process_http_request+0x13c>
        }
        else
        {
            snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nNo body found");
 80018ea:	4a16      	ldr	r2, [pc, #88]	@ (8001944 <process_http_request+0x17c>)
 80018ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f018 f86f 	bl	80199d4 <sniprintf>
 80018f6:	e005      	b.n	8001904 <process_http_request+0x13c>
        }
    }
    else
    {
        const char *http_response =
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <process_http_request+0x180>)
 80018fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
 80018fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	f018 fa6f 	bl	8019de2 <strcpy>
    }
}
 8001904:	3780      	adds	r7, #128	@ 0x80
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	0801bf40 	.word	0x0801bf40
 8001910:	0801bf50 	.word	0x0801bf50
 8001914:	0801bf58 	.word	0x0801bf58
 8001918:	0801bf98 	.word	0x0801bf98
 800191c:	0801bfa8 	.word	0x0801bfa8
 8001920:	0801bfb0 	.word	0x0801bfb0
 8001924:	0801bfb8 	.word	0x0801bfb8
 8001928:	0801bfc0 	.word	0x0801bfc0
 800192c:	0801bfc8 	.word	0x0801bfc8
 8001930:	0801bff4 	.word	0x0801bff4
 8001934:	20000200 	.word	0x20000200
 8001938:	0801c000 	.word	0x0801c000
 800193c:	0801c034 	.word	0x0801c034
 8001940:	0801c068 	.word	0x0801c068
 8001944:	0801c08c 	.word	0x0801c08c
 8001948:	0801c0b8 	.word	0x0801c0b8

0800194c <tcp_thread>:



static void tcp_thread(void *arg)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b087      	sub	sp, #28
 8001950:	af02      	add	r7, sp, #8
 8001952:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;


    conn = netconn_new(NETCONN_TCP);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2010      	movs	r0, #16
 800195a:	f00a f85d 	bl	800ba18 <netconn_new_with_proto_and_callback>
 800195e:	4603      	mov	r3, r0
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <tcp_thread+0xf8>)
 8001962:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8001964:	4b37      	ldr	r3, [pc, #220]	@ (8001a44 <tcp_thread+0xf8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d067      	beq.n	8001a3c <tcp_thread+0xf0>
    {

        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800196c:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <tcp_thread+0xf8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2250      	movs	r2, #80	@ 0x50
 8001972:	4935      	ldr	r1, [pc, #212]	@ (8001a48 <tcp_thread+0xfc>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00a f909 	bl	800bb8c <netconn_bind>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d152      	bne.n	8001a2c <tcp_thread+0xe0>
        {

            netconn_listen(conn);
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <tcp_thread+0xf8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	21ff      	movs	r1, #255	@ 0xff
 800198c:	4618      	mov	r0, r3
 800198e:	f00a f935 	bl	800bbfc <netconn_listen_with_backlog>

            while (1)
            {
            	PrintTaskTiming("TCP_start");
 8001992:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <tcp_thread+0x100>)
 8001994:	f7ff f944 	bl	8000c20 <PrintTaskTiming>
                accept_err = netconn_accept(conn, &newconn);
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <tcp_thread+0xf8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	492c      	ldr	r1, [pc, #176]	@ (8001a50 <tcp_thread+0x104>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f00a f958 	bl	800bc54 <netconn_accept>
 80019a4:	4603      	mov	r3, r0
 80019a6:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 80019a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d136      	bne.n	8001a1e <tcp_thread+0xd2>
                {

                    while (netconn_recv(newconn, &buf) == ERR_OK)
 80019b0:	e02b      	b.n	8001a0a <tcp_thread+0xbe>
                    {

                        strncpy(msg, buf->p->payload, buf->p->len);
 80019b2:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <tcp_thread+0x108>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <tcp_thread+0x108>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	895b      	ldrh	r3, [r3, #10]
 80019c2:	461a      	mov	r2, r3
 80019c4:	4824      	ldr	r0, [pc, #144]	@ (8001a58 <tcp_thread+0x10c>)
 80019c6:	f018 f972 	bl	8019cae <strncpy>


                        //printf("Received request: %s\n", msg);

                        process_http_request(msg, smsg);
 80019ca:	4924      	ldr	r1, [pc, #144]	@ (8001a5c <tcp_thread+0x110>)
 80019cc:	4822      	ldr	r0, [pc, #136]	@ (8001a58 <tcp_thread+0x10c>)
 80019ce:	f7ff fefb 	bl	80017c8 <process_http_request>

                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 80019d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <tcp_thread+0x104>)
 80019d4:	681c      	ldr	r4, [r3, #0]
 80019d6:	4821      	ldr	r0, [pc, #132]	@ (8001a5c <tcp_thread+0x110>)
 80019d8:	f7fe fc82 	bl	80002e0 <strlen>
 80019dc:	4602      	mov	r2, r0
 80019de:	2300      	movs	r3, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2301      	movs	r3, #1
 80019e4:	491d      	ldr	r1, [pc, #116]	@ (8001a5c <tcp_thread+0x110>)
 80019e6:	4620      	mov	r0, r4
 80019e8:	f00a fbb6 	bl	800c158 <netconn_write_partly>

                        netbuf_delete(buf);
 80019ec:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <tcp_thread+0x108>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00c f8b1 	bl	800db58 <netbuf_delete>

                        netconn_close(newconn);
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <tcp_thread+0x104>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00a fcae 	bl	800c35c <netconn_close>
                        netconn_delete(newconn);
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <tcp_thread+0x104>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00a f8a5 	bl	800bb54 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <tcp_thread+0x104>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4911      	ldr	r1, [pc, #68]	@ (8001a54 <tcp_thread+0x108>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f00a fb27 	bl	800c064 <netconn_recv>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0ca      	beq.n	80019b2 <tcp_thread+0x66>
 8001a1c:	e002      	b.n	8001a24 <tcp_thread+0xd8>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 8001a1e:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <tcp_thread+0x114>)
 8001a20:	f017 ffd0 	bl	80199c4 <puts>
                }
                PrintTaskTiming("TCP_end");
 8001a24:	480f      	ldr	r0, [pc, #60]	@ (8001a64 <tcp_thread+0x118>)
 8001a26:	f7ff f8fb 	bl	8000c20 <PrintTaskTiming>
            	PrintTaskTiming("TCP_start");
 8001a2a:	e7b2      	b.n	8001992 <tcp_thread+0x46>
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 8001a2c:	480e      	ldr	r0, [pc, #56]	@ (8001a68 <tcp_thread+0x11c>)
 8001a2e:	f017 ffc9 	bl	80199c4 <puts>
            netconn_delete(conn);
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <tcp_thread+0xf8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00a f88c 	bl	800bb54 <netconn_delete>
        }
    }
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	20000734 	.word	0x20000734
 8001a48:	0801f660 	.word	0x0801f660
 8001a4c:	0801c118 	.word	0x0801c118
 8001a50:	20000738 	.word	0x20000738
 8001a54:	2000073c 	.word	0x2000073c
 8001a58:	20000740 	.word	0x20000740
 8001a5c:	20000940 	.word	0x20000940
 8001a60:	0801c124 	.word	0x0801c124
 8001a64:	0801c140 	.word	0x0801c140
 8001a68:	0801c148 	.word	0x0801c148

08001a6c <tcpserver_init>:


void tcpserver_init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityRealtime);
 8001a72:	2330      	movs	r3, #48	@ 0x30
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4903      	ldr	r1, [pc, #12]	@ (8001a8c <tcpserver_init+0x20>)
 8001a7e:	4804      	ldr	r0, [pc, #16]	@ (8001a90 <tcpserver_init+0x24>)
 8001a80:	f017 f9c2 	bl	8018e08 <sys_thread_new>
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	0800194d 	.word	0x0800194d
 8001a90:	0801c164 	.word	0x0801c164

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	@ (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001abe:	f7ff fe55 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f018 f967 	bl	8019d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff f91b 	bl	8000d00 <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ad8:	0801fa4c 	.word	0x0801fa4c
  ldr r2, =_sbss
 8001adc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ae0:	20011fc4 	.word	0x20011fc4

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>

08001ae6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f000 f8f9 	bl	8001ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af0:	200f      	movs	r0, #15
 8001af2:	f7ff fc6f 	bl	80013d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af6:	f7ff fb0d 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000d40 	.word	0x20000d40

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000d40 	.word	0x20000d40

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	05fa0000 	.word	0x05fa0000

08001bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd4:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	f003 0307 	and.w	r3, r3, #7
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	db0b      	blt.n	8001c16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4907      	ldr	r1, [pc, #28]	@ (8001c24 <__NVIC_EnableIRQ+0x38>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000e100 	.word	0xe000e100

08001c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	db0a      	blt.n	8001c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	490c      	ldr	r1, [pc, #48]	@ (8001c74 <__NVIC_SetPriority+0x4c>)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	0112      	lsls	r2, r2, #4
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c50:	e00a      	b.n	8001c68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4908      	ldr	r1, [pc, #32]	@ (8001c78 <__NVIC_SetPriority+0x50>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3b04      	subs	r3, #4
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	761a      	strb	r2, [r3, #24]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e100 	.word	0xe000e100
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1c3 0307 	rsb	r3, r3, #7
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	bf28      	it	cs
 8001c9a:	2304      	movcs	r3, #4
 8001c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	2b06      	cmp	r3, #6
 8001ca4:	d902      	bls.n	8001cac <NVIC_EncodePriority+0x30>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3b03      	subs	r3, #3
 8001caa:	e000      	b.n	8001cae <NVIC_EncodePriority+0x32>
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	4313      	orrs	r3, r2
         );
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff ff4c 	bl	8001b88 <__NVIC_SetPriorityGrouping>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0a:	f7ff ff61 	bl	8001bd0 <__NVIC_GetPriorityGrouping>
 8001d0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	6978      	ldr	r0, [r7, #20]
 8001d16:	f7ff ffb1 	bl	8001c7c <NVIC_EncodePriority>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff ff80 	bl	8001c28 <__NVIC_SetPriority>
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff54 	bl	8001bec <__NVIC_EnableIRQ>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001d5c:	4ba0      	ldr	r3, [pc, #640]	@ (8001fe0 <HAL_ETH_Init+0x294>)
 8001d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e180      	b.n	8002074 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f004 fe28 	bl	80069dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b95      	ldr	r3, [pc, #596]	@ (8001fe4 <HAL_ETH_Init+0x298>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	4a94      	ldr	r2, [pc, #592]	@ (8001fe4 <HAL_ETH_Init+0x298>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d98:	4b92      	ldr	r3, [pc, #584]	@ (8001fe4 <HAL_ETH_Init+0x298>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001da4:	4b90      	ldr	r3, [pc, #576]	@ (8001fe8 <HAL_ETH_Init+0x29c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a8f      	ldr	r2, [pc, #572]	@ (8001fe8 <HAL_ETH_Init+0x29c>)
 8001daa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001dae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001db0:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe8 <HAL_ETH_Init+0x29c>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	498b      	ldr	r1, [pc, #556]	@ (8001fe8 <HAL_ETH_Init+0x29c>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dd4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dd6:	f7ff fea7 	bl	8001b28 <HAL_GetTick>
 8001dda:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ddc:	e011      	b.n	8001e02 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dde:	f7ff fea3 	bl	8001b28 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dec:	d909      	bls.n	8001e02 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2203      	movs	r2, #3
 8001df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e138      	b.n	8002074 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1e4      	bne.n	8001dde <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f023 031c 	bic.w	r3, r3, #28
 8001e22:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e24:	f002 fd26 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8001e28:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4a6f      	ldr	r2, [pc, #444]	@ (8001fec <HAL_ETH_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d908      	bls.n	8001e44 <HAL_ETH_Init+0xf8>
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff0 <HAL_ETH_Init+0x2a4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d804      	bhi.n	8001e44 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e027      	b.n	8001e94 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4a6a      	ldr	r2, [pc, #424]	@ (8001ff0 <HAL_ETH_Init+0x2a4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d908      	bls.n	8001e5e <HAL_ETH_Init+0x112>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	4a64      	ldr	r2, [pc, #400]	@ (8001fe0 <HAL_ETH_Init+0x294>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d204      	bcs.n	8001e5e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f043 030c 	orr.w	r3, r3, #12
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	e01a      	b.n	8001e94 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe0 <HAL_ETH_Init+0x294>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d303      	bcc.n	8001e6e <HAL_ETH_Init+0x122>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4a62      	ldr	r2, [pc, #392]	@ (8001ff4 <HAL_ETH_Init+0x2a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d911      	bls.n	8001e92 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	4a60      	ldr	r2, [pc, #384]	@ (8001ff4 <HAL_ETH_Init+0x2a8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d908      	bls.n	8001e88 <HAL_ETH_Init+0x13c>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4a5f      	ldr	r2, [pc, #380]	@ (8001ff8 <HAL_ETH_Init+0x2ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d804      	bhi.n	8001e88 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e005      	b.n	8001e94 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f043 0310 	orr.w	r3, r3, #16
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	e000      	b.n	8001e94 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e92:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e9c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fc10 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001eb2:	6939      	ldr	r1, [r7, #16]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fdc5 	bl	8002a44 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0d6      	b.n	8002074 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ec6:	20ff      	movs	r0, #255	@ 0xff
 8001ec8:	f7ff fe3a 	bl	8001b40 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a4 	beq.w	800201e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed6:	f7ff fe27 	bl	8001b28 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb87 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001eea:	f7ff fe1d 	bl	8001b28 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d90f      	bls.n	8001f1c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 fd9e 	bl	8002a44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0ab      	b.n	8002074 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0da      	beq.n	8001edc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f26:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 fbcb 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fd80 	bl	8002a44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e091      	b.n	8002074 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f50:	f7ff fdea 	bl	8001b28 <HAL_GetTick>
 8001f54:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f56:	f107 030c 	add.w	r3, r7, #12
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fb4a 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f64:	f7ff fde0 	bl	8001b28 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d90f      	bls.n	8001f96 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f7a:	6939      	ldr	r1, [r7, #16]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fd61 	bl	8002a44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e06e      	b.n	8002074 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0da      	beq.n	8001f56 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fb25 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fd42 	bl	8002a44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e053      	b.n	8002074 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	e010      	b.n	8002002 <HAL_ETH_Init+0x2b6>
 8001fe0:	03938700 	.word	0x03938700
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800
 8001fec:	01312cff 	.word	0x01312cff
 8001ff0:	02160ebf 	.word	0x02160ebf
 8001ff4:	05f5e0ff 	.word	0x05f5e0ff
 8001ff8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	e026      	b.n	8002062 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	e021      	b.n	8002062 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800202e:	4313      	orrs	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	2100      	movs	r1, #0
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fb46 	bl	80026c8 <HAL_ETH_WritePHYRegister>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002046:	6939      	ldr	r1, [r7, #16]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fcfb 	bl	8002a44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e00c      	b.n	8002074 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800205a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800205e:	f7ff fd6f 	bl	8001b40 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002062:	6939      	ldr	r1, [r7, #16]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fced 	bl	8002a44 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ETH_DMATxDescListInit+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e051      	b.n	8002140 <HAL_ETH_DMATxDescListInit+0xc4>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e030      	b.n	800211a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	461a      	mov	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d208      	bcs.n	800210e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	015b      	lsls	r3, r3, #5
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	461a      	mov	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e002      	b.n	8002114 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	3301      	adds	r3, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3ca      	bcc.n	80020b8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800212c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_ETH_DMARxDescListInit+0x20>
 8002168:	2302      	movs	r3, #2
 800216a:	e055      	b.n	8002218 <HAL_ETH_DMARxDescListInit+0xcc>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e034      	b.n	80021f2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	015b      	lsls	r3, r3, #5
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002198:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80021a0:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3301      	adds	r3, #1
 80021d8:	015b      	lsls	r3, r3, #5
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	461a      	mov	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	e002      	b.n	80021ec <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3c6      	bcc.n	8002188 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002204:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_ETH_TransmitFrame+0x24>
 8002244:	2302      	movs	r3, #2
 8002246:	e0cc      	b.n	80023e2 <HAL_ETH_TransmitFrame+0x1be>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 800226e:	2301      	movs	r3, #1
 8002270:	e0b7      	b.n	80023e2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da09      	bge.n	8002290 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2212      	movs	r2, #18
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0a8      	b.n	80023e2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002296:	4293      	cmp	r3, r2
 8002298:	d915      	bls.n	80022c6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	4a54      	ldr	r2, [pc, #336]	@ (80023f0 <HAL_ETH_TransmitFrame+0x1cc>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0a9b      	lsrs	r3, r3, #10
 80022a4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4b51      	ldr	r3, [pc, #324]	@ (80023f0 <HAL_ETH_TransmitFrame+0x1cc>)
 80022aa:	fba3 1302 	umull	r1, r3, r3, r2
 80022ae:	0a9b      	lsrs	r3, r3, #10
 80022b0:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e001      	b.n	80022ca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d11c      	bne.n	800230a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022da:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80022de:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022ea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022fa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002308:	e04b      	b.n	80023a2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	e044      	b.n	800239a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800231e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002334:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800233e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	3b01      	subs	r3, #1
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	429a      	cmp	r2, r3
 8002348:	d116      	bne.n	8002378 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002358:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	4a25      	ldr	r2, [pc, #148]	@ (80023f4 <HAL_ETH_TransmitFrame+0x1d0>)
 800235e:	fb03 f202 	mul.w	r2, r3, r2
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800236a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002376:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002386:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	461a      	mov	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	3301      	adds	r3, #1
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d3b6      	bcc.n	8002310 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023bc:	461a      	mov	r2, r3
 80023be:	2304      	movs	r3, #4
 80023c0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ca:	461a      	mov	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	ac02b00b 	.word	0xac02b00b
 80023f4:	fffffa0c 	.word	0xfffffa0c

080023f8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800240e:	2302      	movs	r3, #2
 8002410:	e074      	b.n	80024fc <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002422:	e05a      	b.n	80024da <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3301      	adds	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002438:	d10d      	bne.n	8002456 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	461a      	mov	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
 8002454:	e041      	b.n	80024da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	629a      	str	r2, [r3, #40]	@ 0x28
 800247a:	e02e      	b.n	80024da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	2b01      	cmp	r3, #1
 8002494:	d103      	bne.n	800249e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80024aa:	1f1a      	subs	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e010      	b.n	80024fc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db02      	blt.n	80024ea <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d99c      	bls.n	8002424 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251e:	2b40      	cmp	r3, #64	@ 0x40
 8002520:	d112      	bne.n	8002548 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f004 fb1a 	bl	8006b5c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002530:	461a      	mov	r2, r3
 8002532:	2340      	movs	r3, #64	@ 0x40
 8002534:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002546:	e01a      	b.n	800257e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d111      	bne.n	800257e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f838 	bl	80025d0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002568:	461a      	mov	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002586:	461a      	mov	r2, r3
 8002588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800258c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800259c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025a0:	d112      	bne.n	80025c8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f81e 	bl	80025e4 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b0:	461a      	mov	r2, r3
 80025b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025b6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	460b      	mov	r3, r1
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b82      	cmp	r3, #130	@ 0x82
 8002618:	d101      	bne.n	800261e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800261a:	2302      	movs	r3, #2
 800261c:	e050      	b.n	80026c0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2282      	movs	r2, #130	@ 0x82
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f003 031c 	and.w	r3, r3, #28
 8002634:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8a1b      	ldrh	r3, [r3, #16]
 800263a:	02db      	lsls	r3, r3, #11
 800263c:	b29b      	uxth	r3, r3
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	019b      	lsls	r3, r3, #6
 8002648:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800266a:	f7ff fa5d 	bl	8001b28 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002670:	e015      	b.n	800269e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002672:	f7ff fa59 	bl	8001b28 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002680:	d309      	bcc.n	8002696 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e014      	b.n	80026c0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e4      	bne.n	8002672 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	460b      	mov	r3, r1
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b42      	cmp	r3, #66	@ 0x42
 80026e8:	d101      	bne.n	80026ee <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	e04e      	b.n	800278c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2242      	movs	r2, #66	@ 0x42
 80026f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 031c 	and.w	r3, r3, #28
 8002704:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8a1b      	ldrh	r3, [r3, #16]
 800270a:	02db      	lsls	r3, r3, #11
 800270c:	b29b      	uxth	r3, r3
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7ff f9f0 	bl	8001b28 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800274a:	e015      	b.n	8002778 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800274c:	f7ff f9ec 	bl	8001b28 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800275a:	d309      	bcc.n	8002770 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e00d      	b.n	800278c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e4      	bne.n	800274c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_ETH_Start+0x16>
 80027a6:	2302      	movs	r3, #2
 80027a8:	e01f      	b.n	80027ea <HAL_ETH_Start+0x56>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fb40 	bl	8002e40 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fb77 	bl	8002eb4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fc06 	bl	8002fd8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fbab 	bl	8002f28 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fbd4 	bl	8002f80 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ETH_Stop+0x16>
 8002804:	2302      	movs	r3, #2
 8002806:	e01f      	b.n	8002848 <HAL_ETH_Stop+0x56>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fb9b 	bl	8002f54 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fbc4 	bl	8002fac <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fb62 	bl	8002eee <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fbd4 	bl	8002fd8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb22 	bl	8002e7a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_ETH_ConfigMAC+0x1c>
 8002868:	2302      	movs	r3, #2
 800286a:	e0e4      	b.n	8002a36 <HAL_ETH_ConfigMAC+0x1e6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a40 <HAL_ETH_ConfigMAC+0x1f0>)
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800289c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80028a2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80028a8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80028ae:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80028b4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80028ba:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80028c0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80028c6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80028cc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80028d2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 80028d8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 80028de:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff f922 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800290c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8002912:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8002918:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 800291e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8002924:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800292a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002936:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002938:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff f8fc 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002958:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002962:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002980:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8002986:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 800298c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002992:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8002998:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff f8c5 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff f8b2 	bl	8001b40 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	61da      	str	r2, [r3, #28]
 80029e4:	e01e      	b.n	8002a24 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80029f4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff f892 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	ff20810f 	.word	0xff20810f

08002a44 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b0b0      	sub	sp, #192	@ 0xc0
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a60:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a68:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a72:	2300      	movs	r3, #0
 8002a74:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a90:	e001      	b.n	8002a96 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9a:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002ab0:	2340      	movs	r3, #64	@ 0x40
 8002ab2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b1c:	4ba9      	ldr	r3, [pc, #676]	@ (8002dc4 <ETH_MACDMAConfig+0x380>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8002b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b28:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8002b2c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8002b30:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b36:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8002b3a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 8002b3e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b44:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8002b48:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8002b4c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8002b50:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b54:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8002b58:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7fe ffe1 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b86:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8002b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b8c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8002b90:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8002b96:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8002b9c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002ba2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8002ba8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002bac:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002bb4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bb6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f7fe ffbc 	bl	8001b40 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002bd0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bda:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002be4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002bf4:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c08:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002c0e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002c14:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c1a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002c20:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c34:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fe ff7d 	bl	8001b40 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c4e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c50:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 8002c54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7fe ff68 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c78:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c82:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c8c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002ca2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cac:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002cd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc8 <ETH_MACDMAConfig+0x384>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002ce0:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002ce4:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002ce6:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002ce8:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002cea:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002cec:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002cee:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002cf0:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002cf2:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002cf4:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002cf8:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002cfc:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002d00:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d14:	461a      	mov	r2, r3
 8002d16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d1a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f7fe ff08 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d3e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d44:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8002d48:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d4c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8002d50:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d54:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002d56:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d5a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d68:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f7fe fee1 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d86:	461a      	mov	r2, r3
 8002d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d8c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10b      	bne.n	8002dae <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <ETH_MACDMAConfig+0x388>)
 8002da6:	430b      	orrs	r3, r1
 8002da8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dac:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	461a      	mov	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f80a 	bl	8002dd0 <ETH_MACAddressConfig>
}
 8002dbc:	bf00      	nop
 8002dbe:	37c0      	adds	r7, #192	@ 0xc0
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	ff20810f 	.word	0xff20810f
 8002dc8:	f8de3f23 	.word	0xf8de3f23
 8002dcc:	00010040 	.word	0x00010040

08002dd0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3305      	adds	r3, #5
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	3204      	adds	r2, #4
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <ETH_MACAddressConfig+0x68>)
 8002df2:	4413      	add	r3, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3303      	adds	r3, #3
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	061a      	lsls	r2, r3, #24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3302      	adds	r3, #2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	4313      	orrs	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <ETH_MACAddressConfig+0x6c>)
 8002e22:	4413      	add	r3, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6013      	str	r3, [r2, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40028040 	.word	0x40028040
 8002e3c:	40028044 	.word	0x40028044

08002e40 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0208 	orr.w	r2, r2, #8
 8002e5a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f7fe fe6b 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f7fe fe4e 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0204 	orr.w	r2, r2, #4
 8002ece:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7fe fe31 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0204 	bic.w	r2, r2, #4
 8002f08:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f12:	2001      	movs	r0, #1
 8002f14:	f7fe fe14 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f46:	6193      	str	r3, [r2, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f72:	6193      	str	r3, [r2, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f9e:	6193      	str	r3, [r2, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	f023 0302 	bic.w	r3, r3, #2
 8002fc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fca:	6193      	str	r3, [r2, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ff6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ffa:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003008:	2001      	movs	r0, #1
 800300a:	f7fe fd99 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003018:	6193      	str	r3, [r2, #24]
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e175      	b.n	8003330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8164 	bne.w	800332a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d005      	beq.n	800307a <HAL_GPIO_Init+0x56>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d130      	bne.n	80030dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4013      	ands	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b0:	2201      	movs	r2, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 0201 	and.w	r2, r3, #1
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	69b9      	ldr	r1, [r7, #24]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80be 	beq.w	800332a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	4b66      	ldr	r3, [pc, #408]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4a65      	ldr	r2, [pc, #404]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ba:	4b63      	ldr	r3, [pc, #396]	@ (8003348 <HAL_GPIO_Init+0x324>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031c6:	4a61      	ldr	r2, [pc, #388]	@ (800334c <HAL_GPIO_Init+0x328>)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_GPIO_Init+0x32c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d037      	beq.n	8003262 <HAL_GPIO_Init+0x23e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a57      	ldr	r2, [pc, #348]	@ (8003354 <HAL_GPIO_Init+0x330>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d031      	beq.n	800325e <HAL_GPIO_Init+0x23a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a56      	ldr	r2, [pc, #344]	@ (8003358 <HAL_GPIO_Init+0x334>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d02b      	beq.n	800325a <HAL_GPIO_Init+0x236>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a55      	ldr	r2, [pc, #340]	@ (800335c <HAL_GPIO_Init+0x338>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d025      	beq.n	8003256 <HAL_GPIO_Init+0x232>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a54      	ldr	r2, [pc, #336]	@ (8003360 <HAL_GPIO_Init+0x33c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01f      	beq.n	8003252 <HAL_GPIO_Init+0x22e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a53      	ldr	r2, [pc, #332]	@ (8003364 <HAL_GPIO_Init+0x340>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x22a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	@ (8003368 <HAL_GPIO_Init+0x344>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x226>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a51      	ldr	r2, [pc, #324]	@ (800336c <HAL_GPIO_Init+0x348>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x222>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a50      	ldr	r2, [pc, #320]	@ (8003370 <HAL_GPIO_Init+0x34c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x21e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4f      	ldr	r2, [pc, #316]	@ (8003374 <HAL_GPIO_Init+0x350>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x21a>
 800323a:	2309      	movs	r3, #9
 800323c:	e012      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800323e:	230a      	movs	r3, #10
 8003240:	e010      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003242:	2308      	movs	r3, #8
 8003244:	e00e      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003246:	2307      	movs	r3, #7
 8003248:	e00c      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800324a:	2306      	movs	r3, #6
 800324c:	e00a      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800324e:	2305      	movs	r3, #5
 8003250:	e008      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003252:	2304      	movs	r3, #4
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003256:	2303      	movs	r3, #3
 8003258:	e004      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800325a:	2302      	movs	r3, #2
 800325c:	e002      	b.n	8003264 <HAL_GPIO_Init+0x240>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_GPIO_Init+0x240>
 8003262:	2300      	movs	r3, #0
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	f002 0203 	and.w	r2, r2, #3
 800326a:	0092      	lsls	r2, r2, #2
 800326c:	4093      	lsls	r3, r2
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003274:	4935      	ldr	r1, [pc, #212]	@ (800334c <HAL_GPIO_Init+0x328>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a6:	4a34      	ldr	r2, [pc, #208]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d0:	4a29      	ldr	r2, [pc, #164]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d6:	4b28      	ldr	r3, [pc, #160]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_GPIO_Init+0x354>)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003300:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <HAL_GPIO_Init+0x354>)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3301      	adds	r3, #1
 800332e:	61fb      	str	r3, [r7, #28]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	f67f ae86 	bls.w	8003044 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	@ 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40013800 	.word	0x40013800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40021400 	.word	0x40021400
 8003368:	40021800 	.word	0x40021800
 800336c:	40021c00 	.word	0x40021c00
 8003370:	40022000 	.word	0x40022000
 8003374:	40022400 	.word	0x40022400
 8003378:	40013c00 	.word	0x40013c00

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003398:	e003      	b.n	80033a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	041a      	lsls	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	619a      	str	r2, [r3, #24]
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd ff9e 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	@ 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e006      	b.n	8003438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d104      	bne.n	800344a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b1d      	ldr	r3, [pc, #116]	@ (80034cc <HAL_I2C_Init+0x11c>)
 8003456:	430b      	orrs	r3, r1
 8003458:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003468:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69d9      	ldr	r1, [r3, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1a      	ldr	r2, [r3, #32]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	02008000 	.word	0x02008000

080034d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	461a      	mov	r2, r3
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
 80034e0:	4613      	mov	r3, r2
 80034e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	f040 80da 	bne.w	80036a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_I2C_Master_Transmit+0x30>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0d3      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003508:	f7fe fb0e 	bl	8001b28 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2319      	movs	r3, #25
 8003514:	2201      	movs	r2, #1
 8003516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f8f0 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0be      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2221      	movs	r2, #33	@ 0x21
 800352e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2210      	movs	r2, #16
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2bff      	cmp	r3, #255	@ 0xff
 800355a:	d90e      	bls.n	800357a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	22ff      	movs	r2, #255	@ 0xff
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	b2da      	uxtb	r2, r3
 8003568:	8979      	ldrh	r1, [r7, #10]
 800356a:	4b51      	ldr	r3, [pc, #324]	@ (80036b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa6c 	bl	8003a50 <I2C_TransferConfig>
 8003578:	e06c      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	4b48      	ldr	r3, [pc, #288]	@ (80036b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fa5b 	bl	8003a50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800359a:	e05b      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f8ed 	bl	8003780 <I2C_WaitOnTXISFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e07b      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d034      	beq.n	8003654 <HAL_I2C_Master_Transmit+0x184>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d130      	bne.n	8003654 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2200      	movs	r2, #0
 80035fa:	2180      	movs	r1, #128	@ 0x80
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f87f 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e04d      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2bff      	cmp	r3, #255	@ 0xff
 8003614:	d90e      	bls.n	8003634 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	@ 0xff
 800361a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	2300      	movs	r3, #0
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 fa0f 	bl	8003a50 <I2C_TransferConfig>
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	2300      	movs	r3, #0
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 f9fe 	bl	8003a50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d19e      	bne.n	800359c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8cc 	bl	8003800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e01a      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2220      	movs	r2, #32
 8003678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b0b      	ldr	r3, [pc, #44]	@ (80036b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003686:	400b      	ands	r3, r1
 8003688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	80002000 	.word	0x80002000
 80036b4:	fe00e800 	.word	0xfe00e800

080036b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d103      	bne.n	80036d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2200      	movs	r2, #0
 80036d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d007      	beq.n	80036f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	619a      	str	r2, [r3, #24]
  }
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	e022      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d01e      	beq.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe fa05 	bl	8001b28 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d113      	bne.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	f043 0220 	orr.w	r2, r3, #32
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e00f      	b.n	8003778 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	d0cd      	beq.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800378c:	e02c      	b.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f870 	bl	8003878 <I2C_IsErrorOccurred>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e02a      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d01e      	beq.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7fe f9bd 	bl	8001b28 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c4:	f043 0220 	orr.w	r2, r3, #32
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d1cb      	bne.n	800378e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800380c:	e028      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f830 	bl	8003878 <I2C_IsErrorOccurred>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e026      	b.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe f981 	bl	8001b28 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d113      	bne.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e007      	b.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b20      	cmp	r3, #32
 800386c:	d1cf      	bne.n	800380e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	@ 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d075      	beq.n	8003990 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2210      	movs	r2, #16
 80038aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ac:	e056      	b.n	800395c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d052      	beq.n	800395c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fe f937 	bl	8001b28 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <I2C_IsErrorOccurred+0x54>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d147      	bne.n	800395c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ee:	d12e      	bne.n	800394e <I2C_IsErrorOccurred+0xd6>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038f6:	d02a      	beq.n	800394e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038f8:	7cfb      	ldrb	r3, [r7, #19]
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d027      	beq.n	800394e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800390c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800390e:	f7fe f90b 	bl	8001b28 <HAL_GetTick>
 8003912:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003914:	e01b      	b.n	800394e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003916:	f7fe f907 	bl	8001b28 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b19      	cmp	r3, #25
 8003922:	d914      	bls.n	800394e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b20      	cmp	r3, #32
 800395a:	d1dc      	bne.n	8003916 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d003      	beq.n	8003972 <I2C_IsErrorOccurred+0xfa>
 800396a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800396e:	2b00      	cmp	r3, #0
 8003970:	d09d      	beq.n	80038ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00b      	beq.n	80039dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01c      	beq.n	8003a40 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7ff fe56 	bl	80036b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6859      	ldr	r1, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <I2C_IsErrorOccurred+0x1d4>)
 8003a18:	400b      	ands	r3, r1
 8003a1a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3728      	adds	r7, #40	@ 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	fe00e800 	.word	0xfe00e800

08003a50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	817b      	strh	r3, [r7, #10]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a62:	897b      	ldrh	r3, [r7, #10]
 8003a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a68:	7a7b      	ldrb	r3, [r7, #9]
 8003a6a:	041b      	lsls	r3, r3, #16
 8003a6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a70:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a7e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	0d5b      	lsrs	r3, r3, #21
 8003a8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a8e:	4b08      	ldr	r3, [pc, #32]	@ (8003ab0 <I2C_TransferConfig+0x60>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	43db      	mvns	r3, r3
 8003a94:	ea02 0103 	and.w	r1, r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	03ff63ff 	.word	0x03ff63ff

08003ab4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b20      	cmp	r3, #32
 8003ac8:	d138      	bne.n	8003b3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e032      	b.n	8003b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6819      	ldr	r1, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d139      	bne.n	8003bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e033      	b.n	8003bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2224      	movs	r2, #36	@ 0x24
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	021b      	lsls	r3, r3, #8
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be4:	b08f      	sub	sp, #60	@ 0x3c
 8003be6:	af0a      	add	r7, sp, #40	@ 0x28
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e116      	b.n	8003e22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fb08 	bl	8001224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2203      	movs	r2, #3
 8003c18:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f002 fada 	bl	80061ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	687e      	ldr	r6, [r7, #4]
 8003c40:	466d      	mov	r5, sp
 8003c42:	f106 0410 	add.w	r4, r6, #16
 8003c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c56:	1d33      	adds	r3, r6, #4
 8003c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5a:	6838      	ldr	r0, [r7, #0]
 8003c5c:	f002 fa6e 	bl	800613c <USB_CoreInit>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0d7      	b.n	8003e22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f002 fac8 	bl	800620e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e04a      	b.n	8003d1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	333d      	adds	r3, #61	@ 0x3d
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	333c      	adds	r3, #60	@ 0x3c
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	b298      	uxth	r0, r3
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3342      	adds	r3, #66	@ 0x42
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	333f      	adds	r3, #63	@ 0x3f
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3344      	adds	r3, #68	@ 0x44
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3348      	adds	r3, #72	@ 0x48
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3350      	adds	r3, #80	@ 0x50
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	3301      	adds	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3af      	bcc.n	8003c84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e044      	b.n	8003db4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003d52:	7bfa      	ldrb	r2, [r7, #15]
 8003d54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	3301      	adds	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d3b5      	bcc.n	8003d2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	687e      	ldr	r6, [r7, #4]
 8003dc6:	466d      	mov	r5, sp
 8003dc8:	f106 0410 	add.w	r4, r6, #16
 8003dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ddc:	1d33      	adds	r3, r6, #4
 8003dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de0:	6838      	ldr	r0, [r7, #0]
 8003de2:	f002 fa61 	bl	80062a8 <USB_DevInit>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e014      	b.n	8003e22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f80b 	bl	8003e2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f002 fc1b 	bl	8006656 <USB_DevDisconnect>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	10000003 	.word	0x10000003

08003e74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40007000 	.word	0x40007000

08003e94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e9e:	4b23      	ldr	r3, [pc, #140]	@ (8003f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eaa:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec2:	f7fd fe31 	bl	8001b28 <HAL_GetTick>
 8003ec6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ec8:	e009      	b.n	8003ede <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eca:	f7fd fe2d 	bl	8001b28 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ed8:	d901      	bls.n	8003ede <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e022      	b.n	8003f24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eea:	d1ee      	bne.n	8003eca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003eec:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef8:	f7fd fe16 	bl	8001b28 <HAL_GetTick>
 8003efc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003efe:	e009      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f00:	f7fd fe12 	bl	8001b28 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f0e:	d901      	bls.n	8003f14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e007      	b.n	8003f24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f14:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f20:	d1ee      	bne.n	8003f00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40007000 	.word	0x40007000

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e29b      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8087 	beq.w	8004066 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f58:	4b96      	ldr	r3, [pc, #600]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d00c      	beq.n	8003f7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f64:	4b93      	ldr	r3, [pc, #588]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d112      	bne.n	8003f96 <HAL_RCC_OscConfig+0x62>
 8003f70:	4b90      	ldr	r3, [pc, #576]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f7c:	d10b      	bne.n	8003f96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d06c      	beq.n	8004064 <HAL_RCC_OscConfig+0x130>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d168      	bne.n	8004064 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e275      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x7a>
 8003fa0:	4b84      	ldr	r3, [pc, #528]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a83      	ldr	r2, [pc, #524]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e02e      	b.n	800400c <HAL_RCC_OscConfig+0xd8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x9c>
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7e      	ldr	r2, [pc, #504]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b7c      	ldr	r3, [pc, #496]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a7b      	ldr	r2, [pc, #492]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e01d      	b.n	800400c <HAL_RCC_OscConfig+0xd8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8003fda:	4b76      	ldr	r3, [pc, #472]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b73      	ldr	r3, [pc, #460]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a72      	ldr	r2, [pc, #456]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0xd8>
 8003ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b6c      	ldr	r3, [pc, #432]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a6b      	ldr	r2, [pc, #428]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800400a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd fd88 	bl	8001b28 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd fd84 	bl	8001b28 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e229      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b61      	ldr	r3, [pc, #388]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0xe8>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fd74 	bl	8001b28 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd fd70 	bl	8001b28 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	@ 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e215      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	4b57      	ldr	r3, [pc, #348]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x110>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d069      	beq.n	8004146 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004072:	4b50      	ldr	r3, [pc, #320]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407e:	4b4d      	ldr	r3, [pc, #308]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	2b08      	cmp	r3, #8
 8004088:	d11c      	bne.n	80040c4 <HAL_RCC_OscConfig+0x190>
 800408a:	4b4a      	ldr	r3, [pc, #296]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d116      	bne.n	80040c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	4b47      	ldr	r3, [pc, #284]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_RCC_OscConfig+0x17a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e1e9      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ae:	4b41      	ldr	r3, [pc, #260]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	493d      	ldr	r1, [pc, #244]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c2:	e040      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d023      	beq.n	8004114 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040cc:	4b39      	ldr	r3, [pc, #228]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a38      	ldr	r2, [pc, #224]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fd fd26 	bl	8001b28 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fd fd22 	bl	8001b28 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e1c7      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	4b30      	ldr	r3, [pc, #192]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fe:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4929      	ldr	r1, [pc, #164]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]
 8004112:	e018      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004114:	4b27      	ldr	r3, [pc, #156]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a26      	ldr	r2, [pc, #152]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd fd02 	bl	8001b28 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004128:	f7fd fcfe 	bl	8001b28 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e1a3      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d038      	beq.n	80041c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d019      	beq.n	800418e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415a:	4b16      	ldr	r3, [pc, #88]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004166:	f7fd fcdf 	bl	8001b28 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416e:	f7fd fcdb 	bl	8001b28 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e180      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004180:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x23a>
 800418c:	e01a      	b.n	80041c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418e:	4b09      	ldr	r3, [pc, #36]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004192:	4a08      	ldr	r2, [pc, #32]	@ (80041b4 <HAL_RCC_OscConfig+0x280>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419a:	f7fd fcc5 	bl	8001b28 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a2:	f7fd fcc1 	bl	8001b28 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d903      	bls.n	80041b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e166      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
 80041b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b8:	4b92      	ldr	r3, [pc, #584]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ee      	bne.n	80041a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80a4 	beq.w	800431a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b8c      	ldr	r3, [pc, #560]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b89      	ldr	r3, [pc, #548]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	4a88      	ldr	r2, [pc, #544]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ea:	4b86      	ldr	r3, [pc, #536]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fa:	4b83      	ldr	r3, [pc, #524]	@ (8004408 <HAL_RCC_OscConfig+0x4d4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004206:	4b80      	ldr	r3, [pc, #512]	@ (8004408 <HAL_RCC_OscConfig+0x4d4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7f      	ldr	r2, [pc, #508]	@ (8004408 <HAL_RCC_OscConfig+0x4d4>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fd fc89 	bl	8001b28 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fd fc85 	bl	8001b28 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	@ 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e12a      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	4b76      	ldr	r3, [pc, #472]	@ (8004408 <HAL_RCC_OscConfig+0x4d4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x31a>
 8004240:	4b70      	ldr	r3, [pc, #448]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a6f      	ldr	r2, [pc, #444]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
 800424c:	e02d      	b.n	80042aa <HAL_RCC_OscConfig+0x376>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x33c>
 8004256:	4b6b      	ldr	r3, [pc, #428]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	4a6a      	ldr	r2, [pc, #424]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6713      	str	r3, [r2, #112]	@ 0x70
 8004262:	4b68      	ldr	r3, [pc, #416]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004266:	4a67      	ldr	r2, [pc, #412]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	6713      	str	r3, [r2, #112]	@ 0x70
 800426e:	e01c      	b.n	80042aa <HAL_RCC_OscConfig+0x376>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x35e>
 8004278:	4b62      	ldr	r3, [pc, #392]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427c:	4a61      	ldr	r2, [pc, #388]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	@ 0x70
 8004284:	4b5f      	ldr	r3, [pc, #380]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004288:	4a5e      	ldr	r2, [pc, #376]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x376>
 8004292:	4b5c      	ldr	r3, [pc, #368]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	4a5b      	ldr	r2, [pc, #364]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	@ 0x70
 800429e:	4b59      	ldr	r3, [pc, #356]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a2:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fd fc39 	bl	8001b28 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd fc35 	bl	8001b28 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0d8      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RCC_OscConfig+0x386>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042de:	f7fd fc23 	bl	8001b28 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd fc1f 	bl	8001b28 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0c2      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	4b41      	ldr	r3, [pc, #260]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b3d      	ldr	r3, [pc, #244]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	4a3c      	ldr	r2, [pc, #240]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80ae 	beq.w	8004480 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004324:	4b37      	ldr	r3, [pc, #220]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d06d      	beq.n	800440c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d14b      	bne.n	80043d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b32      	ldr	r3, [pc, #200]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a31      	ldr	r2, [pc, #196]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800433e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd fbf0 	bl	8001b28 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434c:	f7fd fbec 	bl	8001b28 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e091      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	071b      	lsls	r3, r3, #28
 8004396:	491b      	ldr	r1, [pc, #108]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a18      	ldr	r2, [pc, #96]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd fbbe 	bl	8001b28 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd fbba 	bl	8001b28 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e05f      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x47c>
 80043ce:	e057      	b.n	8004480 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fd fba4 	bl	8001b28 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd fba0 	bl	8001b28 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e045      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	4b03      	ldr	r3, [pc, #12]	@ (8004404 <HAL_RCC_OscConfig+0x4d0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4b0>
 8004402:	e03d      	b.n	8004480 <HAL_RCC_OscConfig+0x54c>
 8004404:	40023800 	.word	0x40023800
 8004408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800440c:	4b1f      	ldr	r3, [pc, #124]	@ (800448c <HAL_RCC_OscConfig+0x558>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d030      	beq.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d129      	bne.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d122      	bne.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800443c:	4013      	ands	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004442:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004444:	4293      	cmp	r3, r2
 8004446:	d119      	bne.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	3b01      	subs	r3, #1
 8004456:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d10f      	bne.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004476:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d0      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b67      	ldr	r3, [pc, #412]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4965      	ldr	r1, [pc, #404]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80044f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d040      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e073      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	4b3d      	ldr	r3, [pc, #244]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06b      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004572:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4936      	ldr	r1, [pc, #216]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fd fad0 	bl	8001b28 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fd facc 	bl	8001b28 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e053      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 020c 	and.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d1eb      	bne.n	800458c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d210      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	4922      	ldr	r1, [pc, #136]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460e:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	@ (800465c <HAL_RCC_ClockConfig+0x1cc>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <HAL_RCC_ClockConfig+0x1d0>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_ClockConfig+0x1d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc fec6 	bl	80013d4 <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00
 8004658:	40023800 	.word	0x40023800
 800465c:	0801f534 	.word	0x0801f534
 8004660:	20000000 	.word	0x20000000
 8004664:	20000004 	.word	0x20000004

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b094      	sub	sp, #80	@ 0x50
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	647b      	str	r3, [r7, #68]	@ 0x44
 8004674:	2300      	movs	r3, #0
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004678:	2300      	movs	r3, #0
 800467a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	4b79      	ldr	r3, [pc, #484]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d00d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x40>
 800468c:	2b08      	cmp	r3, #8
 800468e:	f200 80e1 	bhi.w	8004854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800469a:	e0db      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b73      	ldr	r3, [pc, #460]	@ (800486c <HAL_RCC_GetSysClockFreq+0x204>)
 800469e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a0:	e0db      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b73      	ldr	r3, [pc, #460]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x208>)
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046a6:	e0d8      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d063      	beq.n	8004786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046da:	4622      	mov	r2, r4
 80046dc:	462b      	mov	r3, r5
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	0159      	lsls	r1, r3, #5
 80046e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ec:	0150      	lsls	r0, r2, #5
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4621      	mov	r1, r4
 80046f4:	1a51      	subs	r1, r2, r1
 80046f6:	6139      	str	r1, [r7, #16]
 80046f8:	4629      	mov	r1, r5
 80046fa:	eb63 0301 	sbc.w	r3, r3, r1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800470c:	4659      	mov	r1, fp
 800470e:	018b      	lsls	r3, r1, #6
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004716:	4651      	mov	r1, sl
 8004718:	018a      	lsls	r2, r1, #6
 800471a:	4651      	mov	r1, sl
 800471c:	ebb2 0801 	subs.w	r8, r2, r1
 8004720:	4659      	mov	r1, fp
 8004722:	eb63 0901 	sbc.w	r9, r3, r1
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473a:	4690      	mov	r8, r2
 800473c:	4699      	mov	r9, r3
 800473e:	4623      	mov	r3, r4
 8004740:	eb18 0303 	adds.w	r3, r8, r3
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	462b      	mov	r3, r5
 8004748:	eb49 0303 	adc.w	r3, r9, r3
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800475a:	4629      	mov	r1, r5
 800475c:	024b      	lsls	r3, r1, #9
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004764:	4621      	mov	r1, r4
 8004766:	024a      	lsls	r2, r1, #9
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800476e:	2200      	movs	r2, #0
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004778:	f7fb fdba 	bl	80002f0 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4613      	mov	r3, r2
 8004782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004784:	e058      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004786:	4b38      	ldr	r3, [pc, #224]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	099b      	lsrs	r3, r3, #6
 800478c:	2200      	movs	r2, #0
 800478e:	4618      	mov	r0, r3
 8004790:	4611      	mov	r1, r2
 8004792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	@ 0x24
 800479c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047a0:	4642      	mov	r2, r8
 80047a2:	464b      	mov	r3, r9
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b2:	0150      	lsls	r0, r2, #5
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4641      	mov	r1, r8
 80047ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80047be:	4649      	mov	r1, r9
 80047c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047d8:	ebb2 040a 	subs.w	r4, r2, sl
 80047dc:	eb63 050b 	sbc.w	r5, r3, fp
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	00eb      	lsls	r3, r5, #3
 80047ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ee:	00e2      	lsls	r2, r4, #3
 80047f0:	4614      	mov	r4, r2
 80047f2:	461d      	mov	r5, r3
 80047f4:	4643      	mov	r3, r8
 80047f6:	18e3      	adds	r3, r4, r3
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	464b      	mov	r3, r9
 80047fc:	eb45 0303 	adc.w	r3, r5, r3
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800480e:	4629      	mov	r1, r5
 8004810:	028b      	lsls	r3, r1, #10
 8004812:	4621      	mov	r1, r4
 8004814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004818:	4621      	mov	r1, r4
 800481a:	028a      	lsls	r2, r1, #10
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004822:	2200      	movs	r2, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	61fa      	str	r2, [r7, #28]
 8004828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482c:	f7fb fd60 	bl	80002f0 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4613      	mov	r3, r2
 8004836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCC_GetSysClockFreq+0x200>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800484a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004852:	e002      	b.n	800485a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetSysClockFreq+0x204>)
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800485a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800485c:	4618      	mov	r0, r3
 800485e:	3750      	adds	r7, #80	@ 0x50
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	00f42400 	.word	0x00f42400
 8004870:	007a1200 	.word	0x007a1200

08004874 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004890:	f7ff fff0 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0a9b      	lsrs	r3, r3, #10
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4903      	ldr	r1, [pc, #12]	@ (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	0801f544 	.word	0x0801f544

080048b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048b8:	f7ff ffdc 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	@ (80048d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0b5b      	lsrs	r3, r3, #13
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	@ (80048d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	0801f544 	.word	0x0801f544

080048dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	220f      	movs	r2, #15
 80048ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048ec:	4b12      	ldr	r3, [pc, #72]	@ (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0203 	and.w	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004904:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004910:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <HAL_RCC_GetClockConfig+0x60>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	40023c00 	.word	0x40023c00

08004940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d012      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004968:	4b69      	ldr	r3, [pc, #420]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a68      	ldr	r2, [pc, #416]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004972:	6093      	str	r3, [r2, #8]
 8004974:	4b66      	ldr	r3, [pc, #408]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497c:	4964      	ldr	r1, [pc, #400]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d017      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800499a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	4959      	ldr	r1, [pc, #356]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	494a      	ldr	r1, [pc, #296]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f4:	d101      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049f6:	2301      	movs	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 808b 	beq.w	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	4b3a      	ldr	r3, [pc, #232]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	4a39      	ldr	r2, [pc, #228]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a30:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a3c:	4b35      	ldr	r3, [pc, #212]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fd f86e 	bl	8001b28 <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a50:	f7fd f86a 	bl	8001b28 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e38f      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a62:	4b2c      	ldr	r3, [pc, #176]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a6e:	4b28      	ldr	r3, [pc, #160]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d035      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d02e      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a8c:	4b20      	ldr	r3, [pc, #128]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a96:	4b1e      	ldr	r3, [pc, #120]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aae:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ab4:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d114      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd f832 	bl	8001b28 <HAL_GetTick>
 8004ac4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac6:	e00a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac8:	f7fd f82e 	bl	8001b28 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e351      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0ee      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004af2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004af6:	d111      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b06:	400b      	ands	r3, r1
 8004b08:	4901      	ldr	r1, [pc, #4]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40007000 	.word	0x40007000
 8004b18:	0ffffcff 	.word	0x0ffffcff
 8004b1c:	4bac      	ldr	r3, [pc, #688]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	4aab      	ldr	r2, [pc, #684]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b26:	6093      	str	r3, [r2, #8]
 8004b28:	4ba9      	ldr	r3, [pc, #676]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	49a6      	ldr	r1, [pc, #664]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d010      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b46:	4ba2      	ldr	r3, [pc, #648]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b4c:	4aa0      	ldr	r2, [pc, #640]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b56:	4b9e      	ldr	r3, [pc, #632]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b60:	499b      	ldr	r1, [pc, #620]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b74:	4b96      	ldr	r3, [pc, #600]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b82:	4993      	ldr	r1, [pc, #588]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b96:	4b8e      	ldr	r3, [pc, #568]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ba4:	498a      	ldr	r1, [pc, #552]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb8:	4b85      	ldr	r3, [pc, #532]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc6:	4982      	ldr	r1, [pc, #520]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bda:	4b7d      	ldr	r3, [pc, #500]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be8:	4979      	ldr	r1, [pc, #484]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bfc:	4b74      	ldr	r3, [pc, #464]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c02:	f023 0203 	bic.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	4971      	ldr	r1, [pc, #452]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c24:	f023 020c 	bic.w	r2, r3, #12
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c2c:	4968      	ldr	r1, [pc, #416]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c40:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4e:	4960      	ldr	r1, [pc, #384]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c62:	4b5b      	ldr	r3, [pc, #364]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	4957      	ldr	r1, [pc, #348]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c84:	4b52      	ldr	r3, [pc, #328]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c92:	494f      	ldr	r1, [pc, #316]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cb4:	4946      	ldr	r1, [pc, #280]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cc8:	4b41      	ldr	r3, [pc, #260]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd6:	493e      	ldr	r1, [pc, #248]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cea:	4b39      	ldr	r3, [pc, #228]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	4935      	ldr	r1, [pc, #212]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d0c:	4b30      	ldr	r3, [pc, #192]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1a:	492d      	ldr	r1, [pc, #180]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d2e:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d34:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d3c:	4924      	ldr	r1, [pc, #144]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6e:	4b18      	ldr	r3, [pc, #96]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d74:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7c:	4914      	ldr	r1, [pc, #80]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d90:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d96:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da0:	490b      	ldr	r1, [pc, #44]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dc4:	4902      	ldr	r1, [pc, #8]	@ (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004de0:	4b8a      	ldr	r3, [pc, #552]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004de6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	4986      	ldr	r1, [pc, #536]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e04:	4b81      	ldr	r3, [pc, #516]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e14:	497d      	ldr	r1, [pc, #500]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d006      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80d6 	beq.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e30:	4b76      	ldr	r3, [pc, #472]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a75      	ldr	r2, [pc, #468]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fc fe74 	bl	8001b28 <HAL_GetTick>
 8004e40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e44:	f7fc fe70 	bl	8001b28 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e195      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e56:	4b6d      	ldr	r3, [pc, #436]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d021      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d11d      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e76:	4b65      	ldr	r3, [pc, #404]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7c:	0c1b      	lsrs	r3, r3, #16
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e84:	4b61      	ldr	r3, [pc, #388]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	019a      	lsls	r2, r3, #6
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	041b      	lsls	r3, r3, #16
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	061b      	lsls	r3, r3, #24
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	071b      	lsls	r3, r3, #28
 8004eaa:	4958      	ldr	r1, [pc, #352]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d004      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02e      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004edc:	d129      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ede:	4b4b      	ldr	r3, [pc, #300]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eec:	4b47      	ldr	r3, [pc, #284]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ef2:	0f1b      	lsrs	r3, r3, #28
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	019a      	lsls	r2, r3, #6
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	041b      	lsls	r3, r3, #16
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	061b      	lsls	r3, r3, #24
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	493e      	ldr	r1, [pc, #248]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f20:	f023 021f 	bic.w	r2, r3, #31
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	4938      	ldr	r1, [pc, #224]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01d      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f3e:	4b33      	ldr	r3, [pc, #204]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	041b      	lsls	r3, r3, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	4926      	ldr	r1, [pc, #152]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	019a      	lsls	r2, r3, #6
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	041b      	lsls	r3, r3, #16
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	491a      	ldr	r1, [pc, #104]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004faa:	4b18      	ldr	r3, [pc, #96]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a17      	ldr	r2, [pc, #92]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb6:	f7fc fdb7 	bl	8001b28 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fbe:	f7fc fdb3 	bl	8001b28 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	@ 0x64
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0d8      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f040 80ce 	bne.w	8005180 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fe4:	4b09      	ldr	r3, [pc, #36]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff0:	f7fc fd9a 	bl	8001b28 <HAL_GetTick>
 8004ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ff6:	e00b      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ff8:	f7fc fd96 	bl	8001b28 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	@ 0x64
 8005004:	d904      	bls.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0bb      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005010:	4b5e      	ldr	r3, [pc, #376]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800501c:	d0ec      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800503a:	2b00      	cmp	r3, #0
 800503c:	d02e      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d12a      	bne.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005046:	4b51      	ldr	r3, [pc, #324]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005054:	4b4d      	ldr	r3, [pc, #308]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	0f1b      	lsrs	r3, r3, #28
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	019a      	lsls	r2, r3, #6
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	061b      	lsls	r3, r3, #24
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	071b      	lsls	r3, r3, #28
 800507a:	4944      	ldr	r1, [pc, #272]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005082:	4b42      	ldr	r3, [pc, #264]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005084:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005088:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005090:	3b01      	subs	r3, #1
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	493d      	ldr	r1, [pc, #244]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d022      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050b0:	d11d      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050b2:	4b36      	ldr	r3, [pc, #216]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b8:	0e1b      	lsrs	r3, r3, #24
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050c0:	4b32      	ldr	r3, [pc, #200]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	0f1b      	lsrs	r3, r3, #28
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	019a      	lsls	r2, r3, #6
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	041b      	lsls	r3, r3, #16
 80050da:	431a      	orrs	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	061b      	lsls	r3, r3, #24
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	071b      	lsls	r3, r3, #28
 80050e6:	4929      	ldr	r1, [pc, #164]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d028      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050fa:	4b24      	ldr	r3, [pc, #144]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005100:	0e1b      	lsrs	r3, r3, #24
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005108:	4b20      	ldr	r3, [pc, #128]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	431a      	orrs	r2, r3
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	061b      	lsls	r3, r3, #24
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	071b      	lsls	r3, r3, #28
 800512e:	4917      	ldr	r1, [pc, #92]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005136:	4b15      	ldr	r3, [pc, #84]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800513c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005144:	4911      	ldr	r1, [pc, #68]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800514c:	4b0f      	ldr	r3, [pc, #60]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0e      	ldr	r2, [pc, #56]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005158:	f7fc fce6 	bl	8001b28 <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005160:	f7fc fce2 	bl	8001b28 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e007      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005172:	4b06      	ldr	r3, [pc, #24]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800517a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800517e:	d1ef      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40023800 	.word	0x40023800

08005190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e049      	b.n	8005236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f841 	bl	800523e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 fa00 	bl	80055d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e054      	b.n	8005316 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a26      	ldr	r2, [pc, #152]	@ (8005324 <HAL_TIM_Base_Start_IT+0xd0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d022      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005296:	d01d      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a22      	ldr	r2, [pc, #136]	@ (8005328 <HAL_TIM_Base_Start_IT+0xd4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d018      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	@ (800532c <HAL_TIM_Base_Start_IT+0xd8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005330 <HAL_TIM_Base_Start_IT+0xdc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00e      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005334 <HAL_TIM_Base_Start_IT+0xe0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_TIM_Base_Start_IT+0xe4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x80>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_TIM_Base_Start_IT+0xe8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d115      	bne.n	8005300 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	4b19      	ldr	r3, [pc, #100]	@ (8005340 <HAL_TIM_Base_Start_IT+0xec>)
 80052dc:	4013      	ands	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b06      	cmp	r3, #6
 80052e4:	d015      	beq.n	8005312 <HAL_TIM_Base_Start_IT+0xbe>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ec:	d011      	beq.n	8005312 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	e008      	b.n	8005312 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e000      	b.n	8005314 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40001800 	.word	0x40001800
 8005340:	00010007 	.word	0x00010007

08005344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b02      	cmp	r3, #2
 8005358:	d122      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d11b      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0202 	mvn.w	r2, #2
 8005370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f905 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 800538c:	e005      	b.n	800539a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f8f7 	bl	8005582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f908 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d122      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d11b      	bne.n	80053f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f06f 0204 	mvn.w	r2, #4
 80053c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8db 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 80053e0:	e005      	b.n	80053ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8cd 	bl	8005582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f8de 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d122      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d11b      	bne.n	8005448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0208 	mvn.w	r2, #8
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8b1 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f8a3 	bl	8005582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f8b4 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	2b10      	cmp	r3, #16
 8005454:	d122      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	2b10      	cmp	r3, #16
 8005462:	d11b      	bne.n	800549c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f06f 0210 	mvn.w	r2, #16
 800546c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2208      	movs	r2, #8
 8005472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f887 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 8005488:	e005      	b.n	8005496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f879 	bl	8005582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f88a 	bl	80055aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10e      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d107      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0201 	mvn.w	r2, #1
 80054c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fe0e 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b80      	cmp	r3, #128	@ 0x80
 80054d4:	d10e      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e0:	2b80      	cmp	r3, #128	@ 0x80
 80054e2:	d107      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f91a 	bl	8005728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005502:	d10e      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b80      	cmp	r3, #128	@ 0x80
 8005510:	d107      	bne.n	8005522 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800551a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f90d 	bl	800573c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b40      	cmp	r3, #64	@ 0x40
 800552e:	d10e      	bne.n	800554e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b40      	cmp	r3, #64	@ 0x40
 800553c:	d107      	bne.n	800554e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f838 	bl	80055be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b20      	cmp	r3, #32
 800555a:	d10e      	bne.n	800557a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b20      	cmp	r3, #32
 8005568:	d107      	bne.n	800557a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0220 	mvn.w	r2, #32
 8005572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f8cd 	bl	8005714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a40      	ldr	r2, [pc, #256]	@ (80056e8 <TIM_Base_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d013      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d00f      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3d      	ldr	r2, [pc, #244]	@ (80056ec <TIM_Base_SetConfig+0x118>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00b      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3c      	ldr	r2, [pc, #240]	@ (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d007      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3b      	ldr	r2, [pc, #236]	@ (80056f4 <TIM_Base_SetConfig+0x120>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a3a      	ldr	r2, [pc, #232]	@ (80056f8 <TIM_Base_SetConfig+0x124>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d108      	bne.n	8005626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2f      	ldr	r2, [pc, #188]	@ (80056e8 <TIM_Base_SetConfig+0x114>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d02b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005634:	d027      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2c      	ldr	r2, [pc, #176]	@ (80056ec <TIM_Base_SetConfig+0x118>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d023      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2b      	ldr	r2, [pc, #172]	@ (80056f0 <TIM_Base_SetConfig+0x11c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01f      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2a      	ldr	r2, [pc, #168]	@ (80056f4 <TIM_Base_SetConfig+0x120>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <TIM_Base_SetConfig+0x124>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d017      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a28      	ldr	r2, [pc, #160]	@ (80056fc <TIM_Base_SetConfig+0x128>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a27      	ldr	r2, [pc, #156]	@ (8005700 <TIM_Base_SetConfig+0x12c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a26      	ldr	r2, [pc, #152]	@ (8005704 <TIM_Base_SetConfig+0x130>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a25      	ldr	r2, [pc, #148]	@ (8005708 <TIM_Base_SetConfig+0x134>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a24      	ldr	r2, [pc, #144]	@ (800570c <TIM_Base_SetConfig+0x138>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a23      	ldr	r2, [pc, #140]	@ (8005710 <TIM_Base_SetConfig+0x13c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d108      	bne.n	8005698 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800568c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <TIM_Base_SetConfig+0x114>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0xf8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a0c      	ldr	r2, [pc, #48]	@ (80056f8 <TIM_Base_SetConfig+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	615a      	str	r2, [r3, #20]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40000c00 	.word	0x40000c00
 80056f8:	40010400 	.word	0x40010400
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	40001800 	.word	0x40001800
 800570c:	40001c00 	.word	0x40001c00
 8005710:	40002000 	.word	0x40002000

08005714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e040      	b.n	80057e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fb fcf6 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	@ 0x24
 800577c:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f8c0 	bl	8005914 <UART_SetConfig>
 8005794:	4603      	mov	r3, r0
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e022      	b.n	80057e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fb18 	bl	8005ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb9f 	bl	8005f20 <UART_CheckIdleState>
 80057e2:	4603      	mov	r3, r0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	@ 0x28
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005800:	2b20      	cmp	r3, #32
 8005802:	f040 8081 	bne.w	8005908 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_UART_Transmit+0x26>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e079      	b.n	800590a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_UART_Transmit+0x38>
 8005820:	2302      	movs	r3, #2
 8005822:	e072      	b.n	800590a <HAL_UART_Transmit+0x11e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2221      	movs	r2, #33	@ 0x21
 8005838:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800583a:	f7fc f975 	bl	8001b28 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005858:	d108      	bne.n	800586c <HAL_UART_Transmit+0x80>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	e003      	b.n	8005874 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 800587c:	e02c      	b.n	80058d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fb92 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e038      	b.n	800590a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	3302      	adds	r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	e007      	b.n	80058c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	781a      	ldrb	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1cc      	bne.n	800587e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	2140      	movs	r1, #64	@ 0x40
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fb5f 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e005      	b.n	800590a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4ba6      	ldr	r3, [pc, #664]	@ (8005bd8 <UART_SetConfig+0x2c4>)
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	6979      	ldr	r1, [r7, #20]
 8005948:	430b      	orrs	r3, r1
 800594a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a1b      	ldr	r3, [r3, #32]
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	4313      	orrs	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	430a      	orrs	r2, r1
 8005984:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a94      	ldr	r2, [pc, #592]	@ (8005bdc <UART_SetConfig+0x2c8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d120      	bne.n	80059d2 <UART_SetConfig+0xbe>
 8005990:	4b93      	ldr	r3, [pc, #588]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	2b03      	cmp	r3, #3
 800599c:	d816      	bhi.n	80059cc <UART_SetConfig+0xb8>
 800599e:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <UART_SetConfig+0x90>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059c1 	.word	0x080059c1
 80059ac:	080059bb 	.word	0x080059bb
 80059b0:	080059c7 	.word	0x080059c7
 80059b4:	2301      	movs	r3, #1
 80059b6:	77fb      	strb	r3, [r7, #31]
 80059b8:	e150      	b.n	8005c5c <UART_SetConfig+0x348>
 80059ba:	2302      	movs	r3, #2
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e14d      	b.n	8005c5c <UART_SetConfig+0x348>
 80059c0:	2304      	movs	r3, #4
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e14a      	b.n	8005c5c <UART_SetConfig+0x348>
 80059c6:	2308      	movs	r3, #8
 80059c8:	77fb      	strb	r3, [r7, #31]
 80059ca:	e147      	b.n	8005c5c <UART_SetConfig+0x348>
 80059cc:	2310      	movs	r3, #16
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e144      	b.n	8005c5c <UART_SetConfig+0x348>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a83      	ldr	r2, [pc, #524]	@ (8005be4 <UART_SetConfig+0x2d0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d132      	bne.n	8005a42 <UART_SetConfig+0x12e>
 80059dc:	4b80      	ldr	r3, [pc, #512]	@ (8005be0 <UART_SetConfig+0x2cc>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d828      	bhi.n	8005a3c <UART_SetConfig+0x128>
 80059ea:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0xdc>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a3d 	.word	0x08005a3d
 80059f8:	08005a3d 	.word	0x08005a3d
 80059fc:	08005a3d 	.word	0x08005a3d
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a3d 	.word	0x08005a3d
 8005a08:	08005a3d 	.word	0x08005a3d
 8005a0c:	08005a3d 	.word	0x08005a3d
 8005a10:	08005a2b 	.word	0x08005a2b
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a3d 	.word	0x08005a3d
 8005a20:	08005a37 	.word	0x08005a37
 8005a24:	2300      	movs	r3, #0
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e118      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	77fb      	strb	r3, [r7, #31]
 8005a2e:	e115      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a30:	2304      	movs	r3, #4
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e112      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a36:	2308      	movs	r3, #8
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e10f      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	77fb      	strb	r3, [r7, #31]
 8005a40:	e10c      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a68      	ldr	r2, [pc, #416]	@ (8005be8 <UART_SetConfig+0x2d4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d120      	bne.n	8005a8e <UART_SetConfig+0x17a>
 8005a4c:	4b64      	ldr	r3, [pc, #400]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a56:	2b30      	cmp	r3, #48	@ 0x30
 8005a58:	d013      	beq.n	8005a82 <UART_SetConfig+0x16e>
 8005a5a:	2b30      	cmp	r3, #48	@ 0x30
 8005a5c:	d814      	bhi.n	8005a88 <UART_SetConfig+0x174>
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d009      	beq.n	8005a76 <UART_SetConfig+0x162>
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d810      	bhi.n	8005a88 <UART_SetConfig+0x174>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <UART_SetConfig+0x15c>
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d006      	beq.n	8005a7c <UART_SetConfig+0x168>
 8005a6e:	e00b      	b.n	8005a88 <UART_SetConfig+0x174>
 8005a70:	2300      	movs	r3, #0
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e0f2      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a76:	2302      	movs	r3, #2
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e0ef      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e0ec      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a82:	2308      	movs	r3, #8
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e0e9      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e0e6      	b.n	8005c5c <UART_SetConfig+0x348>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a56      	ldr	r2, [pc, #344]	@ (8005bec <UART_SetConfig+0x2d8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d120      	bne.n	8005ada <UART_SetConfig+0x1c6>
 8005a98:	4b51      	ldr	r3, [pc, #324]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aa4:	d013      	beq.n	8005ace <UART_SetConfig+0x1ba>
 8005aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aa8:	d814      	bhi.n	8005ad4 <UART_SetConfig+0x1c0>
 8005aaa:	2b80      	cmp	r3, #128	@ 0x80
 8005aac:	d009      	beq.n	8005ac2 <UART_SetConfig+0x1ae>
 8005aae:	2b80      	cmp	r3, #128	@ 0x80
 8005ab0:	d810      	bhi.n	8005ad4 <UART_SetConfig+0x1c0>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0x1a8>
 8005ab6:	2b40      	cmp	r3, #64	@ 0x40
 8005ab8:	d006      	beq.n	8005ac8 <UART_SetConfig+0x1b4>
 8005aba:	e00b      	b.n	8005ad4 <UART_SetConfig+0x1c0>
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0cc      	b.n	8005c5c <UART_SetConfig+0x348>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e0c9      	b.n	8005c5c <UART_SetConfig+0x348>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0c6      	b.n	8005c5c <UART_SetConfig+0x348>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e0c3      	b.n	8005c5c <UART_SetConfig+0x348>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e0c0      	b.n	8005c5c <UART_SetConfig+0x348>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a44      	ldr	r2, [pc, #272]	@ (8005bf0 <UART_SetConfig+0x2dc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d125      	bne.n	8005b30 <UART_SetConfig+0x21c>
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af2:	d017      	beq.n	8005b24 <UART_SetConfig+0x210>
 8005af4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005af8:	d817      	bhi.n	8005b2a <UART_SetConfig+0x216>
 8005afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afe:	d00b      	beq.n	8005b18 <UART_SetConfig+0x204>
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b04:	d811      	bhi.n	8005b2a <UART_SetConfig+0x216>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <UART_SetConfig+0x1fe>
 8005b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0e:	d006      	beq.n	8005b1e <UART_SetConfig+0x20a>
 8005b10:	e00b      	b.n	8005b2a <UART_SetConfig+0x216>
 8005b12:	2300      	movs	r3, #0
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e0a1      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e09e      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e09b      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b24:	2308      	movs	r3, #8
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e098      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b2a:	2310      	movs	r3, #16
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e095      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <UART_SetConfig+0x2e0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d125      	bne.n	8005b86 <UART_SetConfig+0x272>
 8005b3a:	4b29      	ldr	r3, [pc, #164]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b48:	d017      	beq.n	8005b7a <UART_SetConfig+0x266>
 8005b4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b4e:	d817      	bhi.n	8005b80 <UART_SetConfig+0x26c>
 8005b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b54:	d00b      	beq.n	8005b6e <UART_SetConfig+0x25a>
 8005b56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b5a:	d811      	bhi.n	8005b80 <UART_SetConfig+0x26c>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <UART_SetConfig+0x254>
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b64:	d006      	beq.n	8005b74 <UART_SetConfig+0x260>
 8005b66:	e00b      	b.n	8005b80 <UART_SetConfig+0x26c>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e076      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e073      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b74:	2304      	movs	r3, #4
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e070      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	77fb      	strb	r3, [r7, #31]
 8005b7e:	e06d      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b80:	2310      	movs	r3, #16
 8005b82:	77fb      	strb	r3, [r7, #31]
 8005b84:	e06a      	b.n	8005c5c <UART_SetConfig+0x348>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf8 <UART_SetConfig+0x2e4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d138      	bne.n	8005c02 <UART_SetConfig+0x2ee>
 8005b90:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <UART_SetConfig+0x2cc>)
 8005b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b9e:	d017      	beq.n	8005bd0 <UART_SetConfig+0x2bc>
 8005ba0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ba4:	d82a      	bhi.n	8005bfc <UART_SetConfig+0x2e8>
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005baa:	d00b      	beq.n	8005bc4 <UART_SetConfig+0x2b0>
 8005bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb0:	d824      	bhi.n	8005bfc <UART_SetConfig+0x2e8>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <UART_SetConfig+0x2aa>
 8005bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bba:	d006      	beq.n	8005bca <UART_SetConfig+0x2b6>
 8005bbc:	e01e      	b.n	8005bfc <UART_SetConfig+0x2e8>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e04b      	b.n	8005c5c <UART_SetConfig+0x348>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e048      	b.n	8005c5c <UART_SetConfig+0x348>
 8005bca:	2304      	movs	r3, #4
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e045      	b.n	8005c5c <UART_SetConfig+0x348>
 8005bd0:	2308      	movs	r3, #8
 8005bd2:	77fb      	strb	r3, [r7, #31]
 8005bd4:	e042      	b.n	8005c5c <UART_SetConfig+0x348>
 8005bd6:	bf00      	nop
 8005bd8:	efff69f3 	.word	0xefff69f3
 8005bdc:	40011000 	.word	0x40011000
 8005be0:	40023800 	.word	0x40023800
 8005be4:	40004400 	.word	0x40004400
 8005be8:	40004800 	.word	0x40004800
 8005bec:	40004c00 	.word	0x40004c00
 8005bf0:	40005000 	.word	0x40005000
 8005bf4:	40011400 	.word	0x40011400
 8005bf8:	40007800 	.word	0x40007800
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	77fb      	strb	r3, [r7, #31]
 8005c00:	e02c      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a72      	ldr	r2, [pc, #456]	@ (8005dd0 <UART_SetConfig+0x4bc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d125      	bne.n	8005c58 <UART_SetConfig+0x344>
 8005c0c:	4b71      	ldr	r3, [pc, #452]	@ (8005dd4 <UART_SetConfig+0x4c0>)
 8005c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c1a:	d017      	beq.n	8005c4c <UART_SetConfig+0x338>
 8005c1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c20:	d817      	bhi.n	8005c52 <UART_SetConfig+0x33e>
 8005c22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c26:	d00b      	beq.n	8005c40 <UART_SetConfig+0x32c>
 8005c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2c:	d811      	bhi.n	8005c52 <UART_SetConfig+0x33e>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <UART_SetConfig+0x326>
 8005c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c36:	d006      	beq.n	8005c46 <UART_SetConfig+0x332>
 8005c38:	e00b      	b.n	8005c52 <UART_SetConfig+0x33e>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e00d      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c40:	2302      	movs	r3, #2
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e00a      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c46:	2304      	movs	r3, #4
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e007      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	77fb      	strb	r3, [r7, #31]
 8005c50:	e004      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c52:	2310      	movs	r3, #16
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e001      	b.n	8005c5c <UART_SetConfig+0x348>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c64:	d15b      	bne.n	8005d1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c66:	7ffb      	ldrb	r3, [r7, #31]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d828      	bhi.n	8005cbe <UART_SetConfig+0x3aa>
 8005c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c74 <UART_SetConfig+0x360>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c99 	.word	0x08005c99
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005ca9 	.word	0x08005ca9
 8005c80:	08005cbf 	.word	0x08005cbf
 8005c84:	08005caf 	.word	0x08005caf
 8005c88:	08005cbf 	.word	0x08005cbf
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cbf 	.word	0x08005cbf
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c98:	f7fe fdf8 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8005c9c:	61b8      	str	r0, [r7, #24]
        break;
 8005c9e:	e013      	b.n	8005cc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca0:	f7fe fe08 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8005ca4:	61b8      	str	r0, [r7, #24]
        break;
 8005ca6:	e00f      	b.n	8005cc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8005dd8 <UART_SetConfig+0x4c4>)
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e00c      	b.n	8005cc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cae:	f7fe fcdb 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8005cb2:	61b8      	str	r0, [r7, #24]
        break;
 8005cb4:	e008      	b.n	8005cc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cba:	61bb      	str	r3, [r7, #24]
        break;
 8005cbc:	e004      	b.n	8005cc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d074      	beq.n	8005db8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	005a      	lsls	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	441a      	add	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b0f      	cmp	r3, #15
 8005ce8:	d916      	bls.n	8005d18 <UART_SetConfig+0x404>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf0:	d212      	bcs.n	8005d18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f023 030f 	bic.w	r3, r3, #15
 8005cfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	085b      	lsrs	r3, r3, #1
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	89fb      	ldrh	r3, [r7, #14]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	89fa      	ldrh	r2, [r7, #14]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	e04f      	b.n	8005db8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	77bb      	strb	r3, [r7, #30]
 8005d1c:	e04c      	b.n	8005db8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d828      	bhi.n	8005d76 <UART_SetConfig+0x462>
 8005d24:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <UART_SetConfig+0x418>)
 8005d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2a:	bf00      	nop
 8005d2c:	08005d51 	.word	0x08005d51
 8005d30:	08005d59 	.word	0x08005d59
 8005d34:	08005d61 	.word	0x08005d61
 8005d38:	08005d77 	.word	0x08005d77
 8005d3c:	08005d67 	.word	0x08005d67
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005d77 	.word	0x08005d77
 8005d48:	08005d77 	.word	0x08005d77
 8005d4c:	08005d6f 	.word	0x08005d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d50:	f7fe fd9c 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 8005d54:	61b8      	str	r0, [r7, #24]
        break;
 8005d56:	e013      	b.n	8005d80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fe fdac 	bl	80048b4 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	61b8      	str	r0, [r7, #24]
        break;
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <UART_SetConfig+0x4c4>)
 8005d62:	61bb      	str	r3, [r7, #24]
        break;
 8005d64:	e00c      	b.n	8005d80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d66:	f7fe fc7f 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8005d6a:	61b8      	str	r0, [r7, #24]
        break;
 8005d6c:	e008      	b.n	8005d80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d72:	61bb      	str	r3, [r7, #24]
        break;
 8005d74:	e004      	b.n	8005d80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d018      	beq.n	8005db8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	085a      	lsrs	r2, r3, #1
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	441a      	add	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b0f      	cmp	r3, #15
 8005d9e:	d909      	bls.n	8005db4 <UART_SetConfig+0x4a0>
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005da6:	d205      	bcs.n	8005db4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	e001      	b.n	8005db8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8005dc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40007c00 	.word	0x40007c00
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	00f42400 	.word	0x00f42400

08005ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eda:	d10a      	bne.n	8005ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f30:	f7fb fdfa 	bl	8001b28 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d10e      	bne.n	8005f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f82d 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e023      	b.n	8005faa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d10e      	bne.n	8005f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f817 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e00d      	b.n	8005faa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b09c      	sub	sp, #112	@ 0x70
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e0a5      	b.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	f000 80a1 	beq.w	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	f7fb fdab 	bl	8001b28 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d13e      	bne.n	8006062 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005ff8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006004:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006008:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	663b      	str	r3, [r7, #96]	@ 0x60
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006036:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006038:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800603c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e067      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d04f      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800607a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800607e:	d147      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006088:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800609e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80060b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	613b      	str	r3, [r7, #16]
   return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060dc:	623a      	str	r2, [r7, #32]
 80060de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	69f9      	ldr	r1, [r7, #28]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e5      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e010      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	429a      	cmp	r2, r3
 800612c:	f43f af4a 	beq.w	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3770      	adds	r7, #112	@ 0x70
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800613c:	b084      	sub	sp, #16
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	f107 001c 	add.w	r0, r7, #28
 800614a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d120      	bne.n	8006196 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	4b20      	ldr	r3, [pc, #128]	@ (80061e8 <USB_CoreInit+0xac>)
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa92 	bl	80066b4 <USB_CoreReset>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
 8006194:	e010      	b.n	80061b8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa86 	bl	80066b4 <USB_CoreReset>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10b      	bne.n	80061d6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f043 0206 	orr.w	r2, r3, #6
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f043 0220 	orr.w	r2, r3, #32
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e2:	b004      	add	sp, #16
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	ffbdffbf 	.word	0xffbdffbf

080061ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 0201 	bic.w	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d115      	bne.n	800625c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800623c:	2001      	movs	r0, #1
 800623e:	f7fb fc7f 	bl	8001b40 <HAL_Delay>
      ms++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa25 	bl	8006698 <USB_GetMode>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d01e      	beq.n	8006292 <USB_SetCurrentMode+0x84>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b31      	cmp	r3, #49	@ 0x31
 8006258:	d9f0      	bls.n	800623c <USB_SetCurrentMode+0x2e>
 800625a:	e01a      	b.n	8006292 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d115      	bne.n	800628e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800626e:	2001      	movs	r0, #1
 8006270:	f7fb fc66 	bl	8001b40 <HAL_Delay>
      ms++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa0c 	bl	8006698 <USB_GetMode>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <USB_SetCurrentMode+0x84>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b31      	cmp	r3, #49	@ 0x31
 800628a:	d9f0      	bls.n	800626e <USB_SetCurrentMode+0x60>
 800628c:	e001      	b.n	8006292 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e005      	b.n	800629e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b32      	cmp	r3, #50	@ 0x32
 8006296:	d101      	bne.n	800629c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062a8:	b084      	sub	sp, #16
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e009      	b.n	80062dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3340      	adds	r3, #64	@ 0x40
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	3301      	adds	r3, #1
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2b0e      	cmp	r3, #14
 80062e0:	d9f2      	bls.n	80062c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d11c      	bne.n	8006322 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062f6:	f043 0302 	orr.w	r3, r3, #2
 80062fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e005      	b.n	800632e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006326:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006340:	4619      	mov	r1, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006348:	461a      	mov	r2, r3
 800634a:	680b      	ldr	r3, [r1, #0]
 800634c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	2b01      	cmp	r3, #1
 8006352:	d10c      	bne.n	800636e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800635a:	2100      	movs	r1, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f961 	bl	8006624 <USB_SetDevSpeed>
 8006362:	e008      	b.n	8006376 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f95c 	bl	8006624 <USB_SetDevSpeed>
 800636c:	e003      	b.n	8006376 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800636e:	2103      	movs	r1, #3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f957 	bl	8006624 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006376:	2110      	movs	r1, #16
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8f3 	bl	8006564 <USB_FlushTxFifo>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f91d 	bl	80065c8 <USB_FlushRxFifo>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b6:	461a      	mov	r2, r3
 80063b8:	2300      	movs	r3, #0
 80063ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063bc:	2300      	movs	r3, #0
 80063be:	613b      	str	r3, [r7, #16]
 80063c0:	e043      	b.n	800644a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d8:	d118      	bne.n	800640c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e013      	b.n	800641e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e008      	b.n	800641e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	2300      	movs	r3, #0
 800641c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642a:	461a      	mov	r2, r3
 800642c:	2300      	movs	r3, #0
 800642e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800643c:	461a      	mov	r2, r3
 800643e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	3301      	adds	r3, #1
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	429a      	cmp	r2, r3
 8006450:	d3b7      	bcc.n	80063c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	e043      	b.n	80064e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800646a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800646e:	d118      	bne.n	80064a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006482:	461a      	mov	r2, r3
 8006484:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	e013      	b.n	80064b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e008      	b.n	80064b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	461a      	mov	r2, r3
 80064d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3301      	adds	r3, #1
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d3b7      	bcc.n	8006458 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006508:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	f043 0210 	orr.w	r2, r3, #16
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	699a      	ldr	r2, [r3, #24]
 8006520:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <USB_DevInit+0x2b4>)
 8006522:	4313      	orrs	r3, r2
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f043 0208 	orr.w	r2, r3, #8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800653a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653c:	2b01      	cmp	r3, #1
 800653e:	d105      	bne.n	800654c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699a      	ldr	r2, [r3, #24]
 8006544:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <USB_DevInit+0x2b8>)
 8006546:	4313      	orrs	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006558:	b004      	add	sp, #16
 800655a:	4770      	bx	lr
 800655c:	803c3800 	.word	0x803c3800
 8006560:	40000004 	.word	0x40000004

08006564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <USB_FlushTxFifo+0x60>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e01a      	b.n	80065b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	daf3      	bge.n	8006572 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	019b      	lsls	r3, r3, #6
 8006592:	f043 0220 	orr.w	r2, r3, #32
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	4a08      	ldr	r2, [pc, #32]	@ (80065c4 <USB_FlushTxFifo+0x60>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e006      	b.n	80065b8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d0f1      	beq.n	800659a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	00030d40 	.word	0x00030d40

080065c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	4a11      	ldr	r2, [pc, #68]	@ (8006620 <USB_FlushRxFifo+0x58>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e017      	b.n	8006614 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	daf3      	bge.n	80065d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2210      	movs	r2, #16
 80065f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	4a08      	ldr	r2, [pc, #32]	@ (8006620 <USB_FlushRxFifo+0x58>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e006      	b.n	8006614 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b10      	cmp	r3, #16
 8006610:	d0f1      	beq.n	80065f6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	00030d40 	.word	0x00030d40

08006624 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006670:	f023 0303 	bic.w	r3, r3, #3
 8006674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0301 	and.w	r3, r3, #1
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3301      	adds	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	4a13      	ldr	r2, [pc, #76]	@ (8006714 <USB_CoreReset+0x60>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e01a      	b.n	8006706 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	daf3      	bge.n	80066c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f043 0201 	orr.w	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3301      	adds	r3, #1
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	4a09      	ldr	r2, [pc, #36]	@ (8006714 <USB_CoreReset+0x60>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e006      	b.n	8006706 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d0f1      	beq.n	80066e8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	00030d40 	.word	0x00030d40

08006718 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800671e:	4ba0      	ldr	r3, [pc, #640]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006720:	22c0      	movs	r2, #192	@ 0xc0
 8006722:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006724:	4b9e      	ldr	r3, [pc, #632]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006726:	22a8      	movs	r2, #168	@ 0xa8
 8006728:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800672a:	4b9d      	ldr	r3, [pc, #628]	@ (80069a0 <MX_LWIP_Init+0x288>)
 800672c:	2200      	movs	r2, #0
 800672e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 8006730:	4b9b      	ldr	r3, [pc, #620]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006732:	221c      	movs	r2, #28
 8006734:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006736:	4b9b      	ldr	r3, [pc, #620]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006738:	22ff      	movs	r2, #255	@ 0xff
 800673a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800673c:	4b99      	ldr	r3, [pc, #612]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800673e:	22ff      	movs	r2, #255	@ 0xff
 8006740:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006742:	4b98      	ldr	r3, [pc, #608]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006744:	22ff      	movs	r2, #255	@ 0xff
 8006746:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006748:	4b96      	ldr	r3, [pc, #600]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800674a:	2200      	movs	r2, #0
 800674c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800674e:	4b96      	ldr	r3, [pc, #600]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006750:	2200      	movs	r2, #0
 8006752:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006754:	4b94      	ldr	r3, [pc, #592]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006756:	2200      	movs	r2, #0
 8006758:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800675a:	4b93      	ldr	r3, [pc, #588]	@ (80069a8 <MX_LWIP_Init+0x290>)
 800675c:	2200      	movs	r2, #0
 800675e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006760:	4b91      	ldr	r3, [pc, #580]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006762:	2200      	movs	r2, #0
 8006764:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006766:	2100      	movs	r1, #0
 8006768:	2000      	movs	r0, #0
 800676a:	f007 fb83 	bl	800de74 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800676e:	4b8c      	ldr	r3, [pc, #560]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	061a      	lsls	r2, r3, #24
 8006774:	4b8a      	ldr	r3, [pc, #552]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	431a      	orrs	r2, r3
 800677c:	4b88      	ldr	r3, [pc, #544]	@ (80069a0 <MX_LWIP_Init+0x288>)
 800677e:	789b      	ldrb	r3, [r3, #2]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	4313      	orrs	r3, r2
 8006784:	4a86      	ldr	r2, [pc, #536]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006786:	78d2      	ldrb	r2, [r2, #3]
 8006788:	4313      	orrs	r3, r2
 800678a:	061a      	lsls	r2, r3, #24
 800678c:	4b84      	ldr	r3, [pc, #528]	@ (80069a0 <MX_LWIP_Init+0x288>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	0619      	lsls	r1, r3, #24
 8006792:	4b83      	ldr	r3, [pc, #524]	@ (80069a0 <MX_LWIP_Init+0x288>)
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	4319      	orrs	r1, r3
 800679a:	4b81      	ldr	r3, [pc, #516]	@ (80069a0 <MX_LWIP_Init+0x288>)
 800679c:	789b      	ldrb	r3, [r3, #2]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	430b      	orrs	r3, r1
 80067a2:	497f      	ldr	r1, [pc, #508]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067a4:	78c9      	ldrb	r1, [r1, #3]
 80067a6:	430b      	orrs	r3, r1
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067ae:	431a      	orrs	r2, r3
 80067b0:	4b7b      	ldr	r3, [pc, #492]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	0619      	lsls	r1, r3, #24
 80067b6:	4b7a      	ldr	r3, [pc, #488]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	041b      	lsls	r3, r3, #16
 80067bc:	4319      	orrs	r1, r3
 80067be:	4b78      	ldr	r3, [pc, #480]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067c0:	789b      	ldrb	r3, [r3, #2]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	430b      	orrs	r3, r1
 80067c6:	4976      	ldr	r1, [pc, #472]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067c8:	78c9      	ldrb	r1, [r1, #3]
 80067ca:	430b      	orrs	r3, r1
 80067cc:	0a1b      	lsrs	r3, r3, #8
 80067ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80067d2:	431a      	orrs	r2, r3
 80067d4:	4b72      	ldr	r3, [pc, #456]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	0619      	lsls	r1, r3, #24
 80067da:	4b71      	ldr	r3, [pc, #452]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	041b      	lsls	r3, r3, #16
 80067e0:	4319      	orrs	r1, r3
 80067e2:	4b6f      	ldr	r3, [pc, #444]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	021b      	lsls	r3, r3, #8
 80067e8:	430b      	orrs	r3, r1
 80067ea:	496d      	ldr	r1, [pc, #436]	@ (80069a0 <MX_LWIP_Init+0x288>)
 80067ec:	78c9      	ldrb	r1, [r1, #3]
 80067ee:	430b      	orrs	r3, r1
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	4313      	orrs	r3, r2
 80067f4:	4a6d      	ldr	r2, [pc, #436]	@ (80069ac <MX_LWIP_Init+0x294>)
 80067f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80067f8:	4b6a      	ldr	r3, [pc, #424]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	061a      	lsls	r2, r3, #24
 80067fe:	4b69      	ldr	r3, [pc, #420]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	431a      	orrs	r2, r3
 8006806:	4b67      	ldr	r3, [pc, #412]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006808:	789b      	ldrb	r3, [r3, #2]
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	4313      	orrs	r3, r2
 800680e:	4a65      	ldr	r2, [pc, #404]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006810:	78d2      	ldrb	r2, [r2, #3]
 8006812:	4313      	orrs	r3, r2
 8006814:	061a      	lsls	r2, r3, #24
 8006816:	4b63      	ldr	r3, [pc, #396]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	0619      	lsls	r1, r3, #24
 800681c:	4b61      	ldr	r3, [pc, #388]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	4319      	orrs	r1, r3
 8006824:	4b5f      	ldr	r3, [pc, #380]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006826:	789b      	ldrb	r3, [r3, #2]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	430b      	orrs	r3, r1
 800682c:	495d      	ldr	r1, [pc, #372]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800682e:	78c9      	ldrb	r1, [r1, #3]
 8006830:	430b      	orrs	r3, r1
 8006832:	021b      	lsls	r3, r3, #8
 8006834:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006838:	431a      	orrs	r2, r3
 800683a:	4b5a      	ldr	r3, [pc, #360]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	0619      	lsls	r1, r3, #24
 8006840:	4b58      	ldr	r3, [pc, #352]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	041b      	lsls	r3, r3, #16
 8006846:	4319      	orrs	r1, r3
 8006848:	4b56      	ldr	r3, [pc, #344]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800684a:	789b      	ldrb	r3, [r3, #2]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	430b      	orrs	r3, r1
 8006850:	4954      	ldr	r1, [pc, #336]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006852:	78c9      	ldrb	r1, [r1, #3]
 8006854:	430b      	orrs	r3, r1
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800685c:	431a      	orrs	r2, r3
 800685e:	4b51      	ldr	r3, [pc, #324]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	0619      	lsls	r1, r3, #24
 8006864:	4b4f      	ldr	r3, [pc, #316]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	4319      	orrs	r1, r3
 800686c:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	430b      	orrs	r3, r1
 8006874:	494b      	ldr	r1, [pc, #300]	@ (80069a4 <MX_LWIP_Init+0x28c>)
 8006876:	78c9      	ldrb	r1, [r1, #3]
 8006878:	430b      	orrs	r3, r1
 800687a:	0e1b      	lsrs	r3, r3, #24
 800687c:	4313      	orrs	r3, r2
 800687e:	4a4c      	ldr	r2, [pc, #304]	@ (80069b0 <MX_LWIP_Init+0x298>)
 8006880:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006882:	4b49      	ldr	r3, [pc, #292]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	061a      	lsls	r2, r3, #24
 8006888:	4b47      	ldr	r3, [pc, #284]	@ (80069a8 <MX_LWIP_Init+0x290>)
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	041b      	lsls	r3, r3, #16
 800688e:	431a      	orrs	r2, r3
 8006890:	4b45      	ldr	r3, [pc, #276]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006892:	789b      	ldrb	r3, [r3, #2]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	4313      	orrs	r3, r2
 8006898:	4a43      	ldr	r2, [pc, #268]	@ (80069a8 <MX_LWIP_Init+0x290>)
 800689a:	78d2      	ldrb	r2, [r2, #3]
 800689c:	4313      	orrs	r3, r2
 800689e:	061a      	lsls	r2, r3, #24
 80068a0:	4b41      	ldr	r3, [pc, #260]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	0619      	lsls	r1, r3, #24
 80068a6:	4b40      	ldr	r3, [pc, #256]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	4319      	orrs	r1, r3
 80068ae:	4b3e      	ldr	r3, [pc, #248]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068b0:	789b      	ldrb	r3, [r3, #2]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	430b      	orrs	r3, r1
 80068b6:	493c      	ldr	r1, [pc, #240]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068b8:	78c9      	ldrb	r1, [r1, #3]
 80068ba:	430b      	orrs	r3, r1
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068c2:	431a      	orrs	r2, r3
 80068c4:	4b38      	ldr	r3, [pc, #224]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	0619      	lsls	r1, r3, #24
 80068ca:	4b37      	ldr	r3, [pc, #220]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	041b      	lsls	r3, r3, #16
 80068d0:	4319      	orrs	r1, r3
 80068d2:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068d4:	789b      	ldrb	r3, [r3, #2]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	430b      	orrs	r3, r1
 80068da:	4933      	ldr	r1, [pc, #204]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068dc:	78c9      	ldrb	r1, [r1, #3]
 80068de:	430b      	orrs	r3, r1
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80068e6:	431a      	orrs	r2, r3
 80068e8:	4b2f      	ldr	r3, [pc, #188]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	0619      	lsls	r1, r3, #24
 80068ee:	4b2e      	ldr	r3, [pc, #184]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068f0:	785b      	ldrb	r3, [r3, #1]
 80068f2:	041b      	lsls	r3, r3, #16
 80068f4:	4319      	orrs	r1, r3
 80068f6:	4b2c      	ldr	r3, [pc, #176]	@ (80069a8 <MX_LWIP_Init+0x290>)
 80068f8:	789b      	ldrb	r3, [r3, #2]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	430b      	orrs	r3, r1
 80068fe:	492a      	ldr	r1, [pc, #168]	@ (80069a8 <MX_LWIP_Init+0x290>)
 8006900:	78c9      	ldrb	r1, [r1, #3]
 8006902:	430b      	orrs	r3, r1
 8006904:	0e1b      	lsrs	r3, r3, #24
 8006906:	4313      	orrs	r3, r2
 8006908:	4a2a      	ldr	r2, [pc, #168]	@ (80069b4 <MX_LWIP_Init+0x29c>)
 800690a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800690c:	4b2a      	ldr	r3, [pc, #168]	@ (80069b8 <MX_LWIP_Init+0x2a0>)
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	4b2a      	ldr	r3, [pc, #168]	@ (80069bc <MX_LWIP_Init+0x2a4>)
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	2300      	movs	r3, #0
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4b26      	ldr	r3, [pc, #152]	@ (80069b4 <MX_LWIP_Init+0x29c>)
 800691a:	4a25      	ldr	r2, [pc, #148]	@ (80069b0 <MX_LWIP_Init+0x298>)
 800691c:	4923      	ldr	r1, [pc, #140]	@ (80069ac <MX_LWIP_Init+0x294>)
 800691e:	4828      	ldr	r0, [pc, #160]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 8006920:	f008 f82c 	bl	800e97c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006924:	4826      	ldr	r0, [pc, #152]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 8006926:	f008 f9db 	bl	800ece0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800692a:	4b25      	ldr	r3, [pc, #148]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 800692c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006930:	089b      	lsrs	r3, r3, #2
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800693c:	4820      	ldr	r0, [pc, #128]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 800693e:	f008 f9df 	bl	800ed00 <netif_set_up>
 8006942:	e002      	b.n	800694a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006944:	481e      	ldr	r0, [pc, #120]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 8006946:	f008 fa47 	bl	800edd8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800694a:	491e      	ldr	r1, [pc, #120]	@ (80069c4 <MX_LWIP_Init+0x2ac>)
 800694c:	481c      	ldr	r0, [pc, #112]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 800694e:	f008 fad9 	bl	800ef04 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8006952:	2200      	movs	r2, #0
 8006954:	2101      	movs	r1, #1
 8006956:	2001      	movs	r0, #1
 8006958:	f000 ff12 	bl	8007780 <osSemaphoreNew>
 800695c:	4603      	mov	r3, r0
 800695e:	4a1a      	ldr	r2, [pc, #104]	@ (80069c8 <MX_LWIP_Init+0x2b0>)
 8006960:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006962:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <MX_LWIP_Init+0x2b4>)
 8006964:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <MX_LWIP_Init+0x2a8>)
 8006966:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006968:	4b17      	ldr	r3, [pc, #92]	@ (80069c8 <MX_LWIP_Init+0x2b0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <MX_LWIP_Init+0x2b4>)
 800696e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006970:	2224      	movs	r2, #36	@ 0x24
 8006972:	2100      	movs	r1, #0
 8006974:	4816      	ldr	r0, [pc, #88]	@ (80069d0 <MX_LWIP_Init+0x2b8>)
 8006976:	f013 f983 	bl	8019c80 <memset>
  attributes.name = "LinkThr";
 800697a:	4b15      	ldr	r3, [pc, #84]	@ (80069d0 <MX_LWIP_Init+0x2b8>)
 800697c:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <MX_LWIP_Init+0x2bc>)
 800697e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006980:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <MX_LWIP_Init+0x2b8>)
 8006982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006986:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006988:	4b11      	ldr	r3, [pc, #68]	@ (80069d0 <MX_LWIP_Init+0x2b8>)
 800698a:	2210      	movs	r2, #16
 800698c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800698e:	4a10      	ldr	r2, [pc, #64]	@ (80069d0 <MX_LWIP_Init+0x2b8>)
 8006990:	490e      	ldr	r1, [pc, #56]	@ (80069cc <MX_LWIP_Init+0x2b4>)
 8006992:	4811      	ldr	r0, [pc, #68]	@ (80069d8 <MX_LWIP_Init+0x2c0>)
 8006994:	f000 fcd8 	bl	8007348 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000d90 	.word	0x20000d90
 80069a4:	20000d94 	.word	0x20000d94
 80069a8:	20000d98 	.word	0x20000d98
 80069ac:	20000d84 	.word	0x20000d84
 80069b0:	20000d88 	.word	0x20000d88
 80069b4:	20000d8c 	.word	0x20000d8c
 80069b8:	0800dd85 	.word	0x0800dd85
 80069bc:	08007025 	.word	0x08007025
 80069c0:	20000d50 	.word	0x20000d50
 80069c4:	08007109 	.word	0x08007109
 80069c8:	20000d44 	.word	0x20000d44
 80069cc:	20000d48 	.word	0x20000d48
 80069d0:	20000d9c 	.word	0x20000d9c
 80069d4:	0801c170 	.word	0x0801c170
 80069d8:	08007091 	.word	0x08007091

080069dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	609a      	str	r2, [r3, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a52      	ldr	r2, [pc, #328]	@ (8006b44 <HAL_ETH_MspInit+0x168>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	f040 809e 	bne.w	8006b3c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a00:	4b51      	ldr	r3, [pc, #324]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	4a50      	ldr	r2, [pc, #320]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	4b4b      	ldr	r3, [pc, #300]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a22:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a24:	4b48      	ldr	r3, [pc, #288]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4b45      	ldr	r3, [pc, #276]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	4a44      	ldr	r2, [pc, #272]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a3c:	4b42      	ldr	r3, [pc, #264]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a48:	4b3f      	ldr	r3, [pc, #252]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a4e:	f043 0304 	orr.w	r3, r3, #4
 8006a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a54:	4b3c      	ldr	r3, [pc, #240]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a60:	4b39      	ldr	r3, [pc, #228]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a64:	4a38      	ldr	r2, [pc, #224]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a6c:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a78:	4b33      	ldr	r3, [pc, #204]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	4a32      	ldr	r2, [pc, #200]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a7e:	f043 0302 	orr.w	r3, r3, #2
 8006a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a84:	4b30      	ldr	r3, [pc, #192]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a90:	4b2d      	ldr	r3, [pc, #180]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a94:	4a2c      	ldr	r2, [pc, #176]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b48 <HAL_ETH_MspInit+0x16c>)
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa4:	60bb      	str	r3, [r7, #8]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006aa8:	2332      	movs	r3, #50	@ 0x32
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aac:	2302      	movs	r3, #2
 8006aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ab8:	230b      	movs	r3, #11
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4822      	ldr	r0, [pc, #136]	@ (8006b4c <HAL_ETH_MspInit+0x170>)
 8006ac4:	f7fc faae 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006ac8:	2386      	movs	r3, #134	@ 0x86
 8006aca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006acc:	2302      	movs	r3, #2
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ad8:	230b      	movs	r3, #11
 8006ada:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ae0:	4619      	mov	r1, r3
 8006ae2:	481b      	ldr	r0, [pc, #108]	@ (8006b50 <HAL_ETH_MspInit+0x174>)
 8006ae4:	f7fc fa9e 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aee:	2302      	movs	r3, #2
 8006af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af6:	2303      	movs	r3, #3
 8006af8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006afa:	230b      	movs	r3, #11
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b02:	4619      	mov	r1, r3
 8006b04:	4813      	ldr	r0, [pc, #76]	@ (8006b54 <HAL_ETH_MspInit+0x178>)
 8006b06:	f7fc fa8d 	bl	8003024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006b0a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b10:	2302      	movs	r3, #2
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b1c:	230b      	movs	r3, #11
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b24:	4619      	mov	r1, r3
 8006b26:	480c      	ldr	r0, [pc, #48]	@ (8006b58 <HAL_ETH_MspInit+0x17c>)
 8006b28:	f7fc fa7c 	bl	8003024 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2105      	movs	r1, #5
 8006b30:	203d      	movs	r0, #61	@ 0x3d
 8006b32:	f7fb f8e1 	bl	8001cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006b36:	203d      	movs	r0, #61	@ 0x3d
 8006b38:	f7fb f8fa 	bl	8001d30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3738      	adds	r7, #56	@ 0x38
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40028000 	.word	0x40028000
 8006b48:	40023800 	.word	0x40023800
 8006b4c:	40020800 	.word	0x40020800
 8006b50:	40020000 	.word	0x40020000
 8006b54:	40020400 	.word	0x40020400
 8006b58:	40021800 	.word	0x40021800

08006b5c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006b64:	4b04      	ldr	r3, [pc, #16]	@ (8006b78 <HAL_ETH_RxCpltCallback+0x1c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 ff0b 	bl	8007984 <osSemaphoreRelease>
}
 8006b6e:	bf00      	nop
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20003e60 	.word	0x20003e60

08006b7c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b090      	sub	sp, #64	@ 0x40
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006b88:	4b5d      	ldr	r3, [pc, #372]	@ (8006d00 <low_level_init+0x184>)
 8006b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8006d04 <low_level_init+0x188>)
 8006b8c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006d00 <low_level_init+0x184>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006b94:	4b5a      	ldr	r3, [pc, #360]	@ (8006d00 <low_level_init+0x184>)
 8006b96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006b9a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b9c:	4b58      	ldr	r3, [pc, #352]	@ (8006d00 <low_level_init+0x184>)
 8006b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ba2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006ba4:	4b56      	ldr	r3, [pc, #344]	@ (8006d00 <low_level_init+0x184>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006baa:	2300      	movs	r3, #0
 8006bac:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 8006bae:	2322      	movs	r3, #34	@ 0x22
 8006bb0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 8006bb2:	23c0      	movs	r3, #192	@ 0xc0
 8006bb4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 8006bb6:	23a8      	movs	r3, #168	@ 0xa8
 8006bb8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 8006bbe:	231c      	movs	r3, #28
 8006bc0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8006bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8006d00 <low_level_init+0x184>)
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006bca:	4b4d      	ldr	r3, [pc, #308]	@ (8006d00 <low_level_init+0x184>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8006d00 <low_level_init+0x184>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8006d00 <low_level_init+0x184>)
 8006bd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bdc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006bde:	4848      	ldr	r0, [pc, #288]	@ (8006d00 <low_level_init+0x184>)
 8006be0:	f7fb f8b4 	bl	8001d4c <HAL_ETH_Init>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006bea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d108      	bne.n	8006c04 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006bf8:	f043 0304 	orr.w	r3, r3, #4
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006c04:	2304      	movs	r3, #4
 8006c06:	4a40      	ldr	r2, [pc, #256]	@ (8006d08 <low_level_init+0x18c>)
 8006c08:	4940      	ldr	r1, [pc, #256]	@ (8006d0c <low_level_init+0x190>)
 8006c0a:	483d      	ldr	r0, [pc, #244]	@ (8006d00 <low_level_init+0x184>)
 8006c0c:	f7fb fa36 	bl	800207c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006c10:	2304      	movs	r3, #4
 8006c12:	4a3f      	ldr	r2, [pc, #252]	@ (8006d10 <low_level_init+0x194>)
 8006c14:	493f      	ldr	r1, [pc, #252]	@ (8006d14 <low_level_init+0x198>)
 8006c16:	483a      	ldr	r0, [pc, #232]	@ (8006d00 <low_level_init+0x184>)
 8006c18:	f7fb fa98 	bl	800214c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2206      	movs	r2, #6
 8006c20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006c24:	4b36      	ldr	r3, [pc, #216]	@ (8006d00 <low_level_init+0x184>)
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006c30:	4b33      	ldr	r3, [pc, #204]	@ (8006d00 <low_level_init+0x184>)
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	785a      	ldrb	r2, [r3, #1]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006c3c:	4b30      	ldr	r3, [pc, #192]	@ (8006d00 <low_level_init+0x184>)
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	789a      	ldrb	r2, [r3, #2]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006c48:	4b2d      	ldr	r3, [pc, #180]	@ (8006d00 <low_level_init+0x184>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	78da      	ldrb	r2, [r3, #3]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006c54:	4b2a      	ldr	r3, [pc, #168]	@ (8006d00 <low_level_init+0x184>)
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	791a      	ldrb	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006c60:	4b27      	ldr	r3, [pc, #156]	@ (8006d00 <low_level_init+0x184>)
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	795a      	ldrb	r2, [r3, #5]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006c72:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c7a:	f043 030a 	orr.w	r3, r3, #10
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006c86:	2200      	movs	r2, #0
 8006c88:	2101      	movs	r1, #1
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	f000 fd78 	bl	8007780 <osSemaphoreNew>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a21      	ldr	r2, [pc, #132]	@ (8006d18 <low_level_init+0x19c>)
 8006c94:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006c96:	f107 0314 	add.w	r3, r7, #20
 8006c9a:	2224      	movs	r2, #36	@ 0x24
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f012 ffee 	bl	8019c80 <memset>
  attributes.name = "EthIf";
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <low_level_init+0x1a0>)
 8006ca6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006ca8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 8006cae:	2330      	movs	r3, #48	@ 0x30
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4819      	ldr	r0, [pc, #100]	@ (8006d20 <low_level_init+0x1a4>)
 8006cbc:	f000 fb44 	bl	8007348 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006cc0:	480f      	ldr	r0, [pc, #60]	@ (8006d00 <low_level_init+0x184>)
 8006cc2:	f7fb fd67 	bl	8002794 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006cca:	461a      	mov	r2, r3
 8006ccc:	211d      	movs	r1, #29
 8006cce:	480c      	ldr	r0, [pc, #48]	@ (8006d00 <low_level_init+0x184>)
 8006cd0:	f7fb fc92 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd6:	f043 030b 	orr.w	r3, r3, #11
 8006cda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	461a      	mov	r2, r3
 8006ce0:	211d      	movs	r1, #29
 8006ce2:	4807      	ldr	r0, [pc, #28]	@ (8006d00 <low_level_init+0x184>)
 8006ce4:	f7fb fcf0 	bl	80026c8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006ce8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006cec:	461a      	mov	r2, r3
 8006cee:	211d      	movs	r1, #29
 8006cf0:	4803      	ldr	r0, [pc, #12]	@ (8006d00 <low_level_init+0x184>)
 8006cf2:	f7fb fc81 	bl	80025f8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006cf6:	bf00      	nop
 8006cf8:	3740      	adds	r7, #64	@ 0x40
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20003e64 	.word	0x20003e64
 8006d04:	40028000 	.word	0x40028000
 8006d08:	20002690 	.word	0x20002690
 8006d0c:	20000e40 	.word	0x20000e40
 8006d10:	20000ec0 	.word	0x20000ec0
 8006d14:	20000dc0 	.word	0x20000dc0
 8006d18:	20003e60 	.word	0x20003e60
 8006d1c:	0801c178 	.word	0x0801c178
 8006d20:	08006fc5 	.word	0x08006fc5

08006d24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	@ 0x28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006d2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006e5c <low_level_output+0x138>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006d46:	4b45      	ldr	r3, [pc, #276]	@ (8006e5c <low_level_output+0x138>)
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	623b      	str	r3, [r7, #32]
 8006d54:	e05a      	b.n	8006e0c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	da03      	bge.n	8006d66 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006d5e:	23f8      	movs	r3, #248	@ 0xf8
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8006d64:	e05c      	b.n	8006e20 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	895b      	ldrh	r3, [r3, #10]
 8006d6a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006d70:	e02f      	b.n	8006dd2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	18d0      	adds	r0, r2, r3
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	18d1      	adds	r1, r2, r3
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f013 f832 	bl	8019df2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da03      	bge.n	8006da4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006d9c:	23f8      	movs	r3, #248	@ 0xf8
 8006d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8006da2:	e03d      	b.n	8006e20 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006db4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006db6:	68ba      	ldr	r2, [r7, #8]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006dc0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006dcc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d8c8      	bhi.n	8006d72 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	18d0      	adds	r0, r2, r3
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f012 fffe 	bl	8019df2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	623b      	str	r3, [r7, #32]
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1a1      	bne.n	8006d56 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006e12:	6979      	ldr	r1, [r7, #20]
 8006e14:	4811      	ldr	r0, [pc, #68]	@ (8006e5c <low_level_output+0x138>)
 8006e16:	f7fb fa05 	bl	8002224 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006e20:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <low_level_output+0x138>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00d      	beq.n	8006e4e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006e32:	4b0a      	ldr	r3, [pc, #40]	@ (8006e5c <low_level_output+0x138>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006e40:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <low_level_output+0x138>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006e4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20003e64 	.word	0x20003e64

08006e60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	@ 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006e84:	484e      	ldr	r0, [pc, #312]	@ (8006fc0 <low_level_input+0x160>)
 8006e86:	f7fb fab7 	bl	80023f8 <HAL_ETH_GetReceivedFrame_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <low_level_input+0x34>

    return NULL;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e091      	b.n	8006fb8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006e94:	4b4a      	ldr	r3, [pc, #296]	@ (8006fc0 <low_level_input+0x160>)
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006e9a:	4b49      	ldr	r3, [pc, #292]	@ (8006fc0 <low_level_input+0x160>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8006ea0:	89fb      	ldrh	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006ea6:	89fb      	ldrh	r3, [r7, #14]
 8006ea8:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8006eac:	4619      	mov	r1, r3
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f008 f8f2 	bl	800f098 <pbuf_alloc>
 8006eb4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8006eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d04b      	beq.n	8006f54 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006ebc:	4b40      	ldr	r3, [pc, #256]	@ (8006fc0 <low_level_input+0x160>)
 8006ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eca:	e040      	b.n	8006f4e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	895b      	ldrh	r3, [r3, #10]
 8006ed0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006ed6:	e021      	b.n	8006f1c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	18d0      	adds	r0, r2, r3
 8006ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	18d1      	adds	r1, r2, r3
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f012 ff7f 	bl	8019df2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	4413      	add	r3, r2
 8006f06:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006f0a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006f16:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d8d6      	bhi.n	8006ed8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	18d0      	adds	r0, r2, r3
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	f012 ff59 	bl	8019df2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1bb      	bne.n	8006ecc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006f54:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc0 <low_level_input+0x160>)
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
 8006f5e:	e00b      	b.n	8006f78 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	4b11      	ldr	r3, [pc, #68]	@ (8006fc0 <low_level_input+0x160>)
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d3ee      	bcc.n	8006f60 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006f82:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc0 <low_level_input+0x160>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006f88:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <low_level_input+0x160>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00d      	beq.n	8006fb6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006f9a:	4b09      	ldr	r3, [pc, #36]	@ (8006fc0 <low_level_input+0x160>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <low_level_input+0x160>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3730      	adds	r7, #48	@ 0x30
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20003e64 	.word	0x20003e64

08006fc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006fd0:	4b12      	ldr	r3, [pc, #72]	@ (800701c <ethernetif_input+0x58>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fc6d 	bl	80078b8 <osSemaphoreAcquire>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f5      	bne.n	8006fd0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006fe4:	480e      	ldr	r0, [pc, #56]	@ (8007020 <ethernetif_input+0x5c>)
 8006fe6:	f011 fef3 	bl	8018dd0 <sys_mutex_lock>
        p = low_level_input( netif );
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff ff38 	bl	8006e60 <low_level_input>
 8006ff0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	68b8      	ldr	r0, [r7, #8]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007008:	68b8      	ldr	r0, [r7, #8]
 800700a:	f008 fb29 	bl	800f660 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800700e:	4804      	ldr	r0, [pc, #16]	@ (8007020 <ethernetif_input+0x5c>)
 8007010:	f011 feed 	bl	8018dee <sys_mutex_unlock>
      } while(p!=NULL);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e4      	bne.n	8006fe4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800701a:	e7d9      	b.n	8006fd0 <ethernetif_input+0xc>
 800701c:	20003e60 	.word	0x20003e60
 8007020:	2000c400 	.word	0x2000c400

08007024 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <ethernetif_init+0x1c>
 8007032:	4b0e      	ldr	r3, [pc, #56]	@ (800706c <ethernetif_init+0x48>)
 8007034:	f240 223b 	movw	r2, #571	@ 0x23b
 8007038:	490d      	ldr	r1, [pc, #52]	@ (8007070 <ethernetif_init+0x4c>)
 800703a:	480e      	ldr	r0, [pc, #56]	@ (8007074 <ethernetif_init+0x50>)
 800703c:	f012 fc5a 	bl	80198f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2273      	movs	r2, #115	@ 0x73
 8007044:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2274      	movs	r2, #116	@ 0x74
 800704c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a09      	ldr	r2, [pc, #36]	@ (8007078 <ethernetif_init+0x54>)
 8007054:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a08      	ldr	r2, [pc, #32]	@ (800707c <ethernetif_init+0x58>)
 800705a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fd8d 	bl	8006b7c <low_level_init>

  return ERR_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	0801c180 	.word	0x0801c180
 8007070:	0801c19c 	.word	0x0801c19c
 8007074:	0801c1ac 	.word	0x0801c1ac
 8007078:	08016e25 	.word	0x08016e25
 800707c:	08006d25 	.word	0x08006d25

08007080 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007084:	f7fa fd50 	bl	8001b28 <HAL_GetTick>
 8007088:	4603      	mov	r3, r0
}
 800708a:	4618      	mov	r0, r3
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80070a0:	f107 0308 	add.w	r3, r7, #8
 80070a4:	461a      	mov	r2, r3
 80070a6:	2101      	movs	r1, #1
 80070a8:	4816      	ldr	r0, [pc, #88]	@ (8007104 <ethernetif_set_link+0x74>)
 80070aa:	f7fb faa5 	bl	80025f8 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d108      	bne.n	80070d8 <ethernetif_set_link+0x48>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f007 feb3 	bl	800ee3c <netif_set_link_up>
 80070d6:	e011      	b.n	80070fc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <ethernetif_set_link+0x6c>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f007 fed4 	bl	800eea4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80070fc:	20c8      	movs	r0, #200	@ 0xc8
 80070fe:	f000 f9c9 	bl	8007494 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007102:	e7cd      	b.n	80070a0 <ethernetif_set_link+0x10>
 8007104:	20003e64 	.word	0x20003e64

08007108 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800711e:	089b      	lsrs	r3, r3, #2
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d05d      	beq.n	80071e6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800712a:	4b34      	ldr	r3, [pc, #208]	@ (80071fc <ethernetif_update_config+0xf4>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d03f      	beq.n	80071b2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007132:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007136:	2100      	movs	r1, #0
 8007138:	4830      	ldr	r0, [pc, #192]	@ (80071fc <ethernetif_update_config+0xf4>)
 800713a:	f7fb fac5 	bl	80026c8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800713e:	f7fa fcf3 	bl	8001b28 <HAL_GetTick>
 8007142:	4603      	mov	r3, r0
 8007144:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	461a      	mov	r2, r3
 800714c:	2101      	movs	r1, #1
 800714e:	482b      	ldr	r0, [pc, #172]	@ (80071fc <ethernetif_update_config+0xf4>)
 8007150:	f7fb fa52 	bl	80025f8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007154:	f7fa fce8 	bl	8001b28 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007162:	d828      	bhi.n	80071b6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0eb      	beq.n	8007146 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	461a      	mov	r2, r3
 8007174:	2110      	movs	r1, #16
 8007176:	4821      	ldr	r0, [pc, #132]	@ (80071fc <ethernetif_update_config+0xf4>)
 8007178:	f7fb fa3e 	bl	80025f8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007186:	4b1d      	ldr	r3, [pc, #116]	@ (80071fc <ethernetif_update_config+0xf4>)
 8007188:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800718c:	60da      	str	r2, [r3, #12]
 800718e:	e002      	b.n	8007196 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007190:	4b1a      	ldr	r3, [pc, #104]	@ (80071fc <ethernetif_update_config+0xf4>)
 8007192:	2200      	movs	r2, #0
 8007194:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80071a0:	4b16      	ldr	r3, [pc, #88]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
 80071a6:	e016      	b.n	80071d6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80071a8:	4b14      	ldr	r3, [pc, #80]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	e011      	b.n	80071d6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80071b2:	bf00      	nop
 80071b4:	e000      	b.n	80071b8 <ethernetif_update_config+0xb0>
          goto error;
 80071b6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80071b8:	4b10      	ldr	r3, [pc, #64]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80071c0:	4b0e      	ldr	r3, [pc, #56]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80071c8:	4313      	orrs	r3, r2
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	2100      	movs	r1, #0
 80071d0:	480a      	ldr	r0, [pc, #40]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071d2:	f7fb fa79 	bl	80026c8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80071d6:	2100      	movs	r1, #0
 80071d8:	4808      	ldr	r0, [pc, #32]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071da:	f7fb fb39 	bl	8002850 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80071de:	4807      	ldr	r0, [pc, #28]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071e0:	f7fb fad8 	bl	8002794 <HAL_ETH_Start>
 80071e4:	e002      	b.n	80071ec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80071e6:	4805      	ldr	r0, [pc, #20]	@ (80071fc <ethernetif_update_config+0xf4>)
 80071e8:	f7fb fb03 	bl	80027f2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f807 	bl	8007200 <ethernetif_notify_conn_changed>
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20003e64 	.word	0x20003e64

08007200 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007218:	bf00      	nop
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800722a:	f3ef 8305 	mrs	r3, IPSR
 800722e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007230:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10f      	bne.n	8007256 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007236:	f3ef 8310 	mrs	r3, PRIMASK
 800723a:	607b      	str	r3, [r7, #4]
  return(result);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d105      	bne.n	800724e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007242:	f3ef 8311 	mrs	r3, BASEPRI
 8007246:	603b      	str	r3, [r7, #0]
  return(result);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <osKernelInitialize+0x3a>
 800724e:	4b0e      	ldr	r3, [pc, #56]	@ (8007288 <osKernelInitialize+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d103      	bne.n	800725e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007256:	f06f 0305 	mvn.w	r3, #5
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e00c      	b.n	8007278 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800725e:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <osKernelInitialize+0x64>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007266:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <osKernelInitialize+0x64>)
 8007268:	2201      	movs	r2, #1
 800726a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e002      	b.n	8007278 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007278:	68fb      	ldr	r3, [r7, #12]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20003eac 	.word	0x20003eac

0800728c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007292:	f3ef 8305 	mrs	r3, IPSR
 8007296:	60bb      	str	r3, [r7, #8]
  return(result);
 8007298:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10f      	bne.n	80072be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	607b      	str	r3, [r7, #4]
  return(result);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d105      	bne.n	80072b6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80072aa:	f3ef 8311 	mrs	r3, BASEPRI
 80072ae:	603b      	str	r3, [r7, #0]
  return(result);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <osKernelStart+0x3a>
 80072b6:	4b0f      	ldr	r3, [pc, #60]	@ (80072f4 <osKernelStart+0x68>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d103      	bne.n	80072c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80072be:	f06f 0305 	mvn.w	r3, #5
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	e010      	b.n	80072e8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072c6:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <osKernelStart+0x68>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d109      	bne.n	80072e2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072ce:	f7ff ffa1 	bl	8007214 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072d2:	4b08      	ldr	r3, [pc, #32]	@ (80072f4 <osKernelStart+0x68>)
 80072d4:	2202      	movs	r2, #2
 80072d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072d8:	f002 fb4a 	bl	8009970 <vTaskStartScheduler>
      stat = osOK;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	e002      	b.n	80072e8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80072e2:	f04f 33ff 	mov.w	r3, #4294967295
 80072e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20003eac 	.word	0x20003eac

080072f8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	60bb      	str	r3, [r7, #8]
  return(result);
 8007304:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10f      	bne.n	800732a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730a:	f3ef 8310 	mrs	r3, PRIMASK
 800730e:	607b      	str	r3, [r7, #4]
  return(result);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007316:	f3ef 8311 	mrs	r3, BASEPRI
 800731a:	603b      	str	r3, [r7, #0]
  return(result);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <osKernelGetTickCount+0x3a>
 8007322:	4b08      	ldr	r3, [pc, #32]	@ (8007344 <osKernelGetTickCount+0x4c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800732a:	f002 fc4b 	bl	8009bc4 <xTaskGetTickCountFromISR>
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	e002      	b.n	8007338 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007332:	f002 fc37 	bl	8009ba4 <xTaskGetTickCount>
 8007336:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007338:	68fb      	ldr	r3, [r7, #12]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20003eac 	.word	0x20003eac

08007348 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b090      	sub	sp, #64	@ 0x40
 800734c:	af04      	add	r7, sp, #16
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007358:	f3ef 8305 	mrs	r3, IPSR
 800735c:	61fb      	str	r3, [r7, #28]
  return(result);
 800735e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007360:	2b00      	cmp	r3, #0
 8007362:	f040 808f 	bne.w	8007484 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007366:	f3ef 8310 	mrs	r3, PRIMASK
 800736a:	61bb      	str	r3, [r7, #24]
  return(result);
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007372:	f3ef 8311 	mrs	r3, BASEPRI
 8007376:	617b      	str	r3, [r7, #20]
  return(result);
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <osThreadNew+0x3e>
 800737e:	4b44      	ldr	r3, [pc, #272]	@ (8007490 <osThreadNew+0x148>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d07e      	beq.n	8007484 <osThreadNew+0x13c>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d07b      	beq.n	8007484 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800738c:	2380      	movs	r3, #128	@ 0x80
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007390:	2318      	movs	r3, #24
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007398:	f04f 33ff 	mov.w	r3, #4294967295
 800739c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d045      	beq.n	8007430 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <osThreadNew+0x6a>
        name = attr->name;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <osThreadNew+0x90>
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	2b38      	cmp	r3, #56	@ 0x38
 80073ca:	d805      	bhi.n	80073d8 <osThreadNew+0x90>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <osThreadNew+0x94>
        return (NULL);
 80073d8:	2300      	movs	r3, #0
 80073da:	e054      	b.n	8007486 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	089b      	lsrs	r3, r3, #2
 80073ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00e      	beq.n	8007412 <osThreadNew+0xca>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b5b      	cmp	r3, #91	@ 0x5b
 80073fa:	d90a      	bls.n	8007412 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <osThreadNew+0xca>
        mem = 1;
 800740c:	2301      	movs	r3, #1
 800740e:	623b      	str	r3, [r7, #32]
 8007410:	e010      	b.n	8007434 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10c      	bne.n	8007434 <osThreadNew+0xec>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d108      	bne.n	8007434 <osThreadNew+0xec>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d104      	bne.n	8007434 <osThreadNew+0xec>
          mem = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	623b      	str	r3, [r7, #32]
 800742e:	e001      	b.n	8007434 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d110      	bne.n	800745c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007442:	9202      	str	r2, [sp, #8]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800744e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f002 f83d 	bl	80094d0 <xTaskCreateStatic>
 8007456:	4603      	mov	r3, r0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	e013      	b.n	8007484 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d110      	bne.n	8007484 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007464:	b29a      	uxth	r2, r3
 8007466:	f107 0310 	add.w	r3, r7, #16
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f002 f891 	bl	800959c <xTaskCreate>
 800747a:	4603      	mov	r3, r0
 800747c:	2b01      	cmp	r3, #1
 800747e:	d001      	beq.n	8007484 <osThreadNew+0x13c>
          hTask = NULL;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007484:	693b      	ldr	r3, [r7, #16]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3730      	adds	r7, #48	@ 0x30
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20003eac 	.word	0x20003eac

08007494 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800749c:	f3ef 8305 	mrs	r3, IPSR
 80074a0:	613b      	str	r3, [r7, #16]
  return(result);
 80074a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10f      	bne.n	80074c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a8:	f3ef 8310 	mrs	r3, PRIMASK
 80074ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074b4:	f3ef 8311 	mrs	r3, BASEPRI
 80074b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <osDelay+0x3c>
 80074c0:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <osDelay+0x58>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d103      	bne.n	80074d0 <osDelay+0x3c>
    stat = osErrorISR;
 80074c8:	f06f 0305 	mvn.w	r3, #5
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e007      	b.n	80074e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f002 f9a6 	bl	800982c <vTaskDelay>
    }
  }

  return (stat);
 80074e0:	697b      	ldr	r3, [r7, #20]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20003eac 	.word	0x20003eac

080074f0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	@ 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fc:	f3ef 8305 	mrs	r3, IPSR
 8007500:	613b      	str	r3, [r7, #16]
  return(result);
 8007502:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007504:	2b00      	cmp	r3, #0
 8007506:	f040 8085 	bne.w	8007614 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d105      	bne.n	8007522 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007516:	f3ef 8311 	mrs	r3, BASEPRI
 800751a:	60bb      	str	r3, [r7, #8]
  return(result);
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <osMutexNew+0x3a>
 8007522:	4b3f      	ldr	r3, [pc, #252]	@ (8007620 <osMutexNew+0x130>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d074      	beq.n	8007614 <osMutexNew+0x124>
    if (attr != NULL) {
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	e001      	b.n	800753c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <osMutexNew+0x5c>
      rmtx = 1U;
 8007546:	2301      	movs	r3, #1
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	e001      	b.n	8007550 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	2b00      	cmp	r3, #0
 8007558:	d15c      	bne.n	8007614 <osMutexNew+0x124>
      mem = -1;
 800755a:	f04f 33ff 	mov.w	r3, #4294967295
 800755e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d015      	beq.n	8007592 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <osMutexNew+0x8c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b4f      	cmp	r3, #79	@ 0x4f
 8007574:	d902      	bls.n	800757c <osMutexNew+0x8c>
          mem = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e00c      	b.n	8007596 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d108      	bne.n	8007596 <osMutexNew+0xa6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <osMutexNew+0xa6>
            mem = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	e001      	b.n	8007596 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d112      	bne.n	80075c2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	4619      	mov	r1, r3
 80075a8:	2004      	movs	r0, #4
 80075aa:	f000 fec0 	bl	800832e <xQueueCreateMutexStatic>
 80075ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80075b0:	e016      	b.n	80075e0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	4619      	mov	r1, r3
 80075b8:	2001      	movs	r0, #1
 80075ba:	f000 feb8 	bl	800832e <xQueueCreateMutexStatic>
 80075be:	6278      	str	r0, [r7, #36]	@ 0x24
 80075c0:	e00e      	b.n	80075e0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80075ce:	2004      	movs	r0, #4
 80075d0:	f000 fe95 	bl	80082fe <xQueueCreateMutex>
 80075d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80075d6:	e003      	b.n	80075e0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80075d8:	2001      	movs	r0, #1
 80075da:	f000 fe90 	bl	80082fe <xQueueCreateMutex>
 80075de:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <osMutexNew+0x110>
        if (attr != NULL) {
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <osMutexNew+0x104>
          name = attr->name;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e001      	b.n	80075f8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80075f8:	6979      	ldr	r1, [r7, #20]
 80075fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075fc:	f001 fee0 	bl	80093c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d006      	beq.n	8007614 <osMutexNew+0x124>
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	f043 0301 	orr.w	r3, r3, #1
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007616:	4618      	mov	r0, r3
 8007618:	3728      	adds	r7, #40	@ 0x28
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20003eac 	.word	0x20003eac

08007624 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007642:	f3ef 8305 	mrs	r3, IPSR
 8007646:	613b      	str	r3, [r7, #16]
  return(result);
 8007648:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10f      	bne.n	800766e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800764e:	f3ef 8310 	mrs	r3, PRIMASK
 8007652:	60fb      	str	r3, [r7, #12]
  return(result);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800765a:	f3ef 8311 	mrs	r3, BASEPRI
 800765e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <osMutexAcquire+0x52>
 8007666:	4b1d      	ldr	r3, [pc, #116]	@ (80076dc <osMutexAcquire+0xb8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d103      	bne.n	8007676 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800766e:	f06f 0305 	mvn.w	r3, #5
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e02c      	b.n	80076d0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800767c:	f06f 0303 	mvn.w	r3, #3
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	e025      	b.n	80076d0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d011      	beq.n	80076ae <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	69b8      	ldr	r0, [r7, #24]
 800768e:	f000 fea0 	bl	80083d2 <xQueueTakeMutexRecursive>
 8007692:	4603      	mov	r3, r0
 8007694:	2b01      	cmp	r3, #1
 8007696:	d01b      	beq.n	80076d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800769e:	f06f 0301 	mvn.w	r3, #1
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	e014      	b.n	80076d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80076a6:	f06f 0302 	mvn.w	r3, #2
 80076aa:	61fb      	str	r3, [r7, #28]
 80076ac:	e010      	b.n	80076d0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	69b8      	ldr	r0, [r7, #24]
 80076b2:	f001 fa6b 	bl	8008b8c <xQueueSemaphoreTake>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d009      	beq.n	80076d0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80076c2:	f06f 0301 	mvn.w	r3, #1
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	e002      	b.n	80076d0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80076ca:	f06f 0302 	mvn.w	r3, #2
 80076ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80076d0:	69fb      	ldr	r3, [r7, #28]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3720      	adds	r7, #32
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20003eac 	.word	0x20003eac

080076e0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f023 0301 	bic.w	r3, r3, #1
 80076ee:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076fc:	f3ef 8305 	mrs	r3, IPSR
 8007700:	613b      	str	r3, [r7, #16]
  return(result);
 8007702:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10f      	bne.n	8007728 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007708:	f3ef 8310 	mrs	r3, PRIMASK
 800770c:	60fb      	str	r3, [r7, #12]
  return(result);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007714:	f3ef 8311 	mrs	r3, BASEPRI
 8007718:	60bb      	str	r3, [r7, #8]
  return(result);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <osMutexRelease+0x50>
 8007720:	4b16      	ldr	r3, [pc, #88]	@ (800777c <osMutexRelease+0x9c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d103      	bne.n	8007730 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007728:	f06f 0305 	mvn.w	r3, #5
 800772c:	61fb      	str	r3, [r7, #28]
 800772e:	e01f      	b.n	8007770 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d103      	bne.n	800773e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007736:	f06f 0303 	mvn.w	r3, #3
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e018      	b.n	8007770 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007744:	69b8      	ldr	r0, [r7, #24]
 8007746:	f000 fe0d 	bl	8008364 <xQueueGiveMutexRecursive>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d00f      	beq.n	8007770 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007750:	f06f 0302 	mvn.w	r3, #2
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	e00b      	b.n	8007770 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007758:	2300      	movs	r3, #0
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f000 fee6 	bl	8008530 <xQueueGenericSend>
 8007764:	4603      	mov	r3, r0
 8007766:	2b01      	cmp	r3, #1
 8007768:	d002      	beq.n	8007770 <osMutexRelease+0x90>
        stat = osErrorResource;
 800776a:	f06f 0302 	mvn.w	r3, #2
 800776e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007770:	69fb      	ldr	r3, [r7, #28]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20003eac 	.word	0x20003eac

08007780 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b08c      	sub	sp, #48	@ 0x30
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800778c:	2300      	movs	r3, #0
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007790:	f3ef 8305 	mrs	r3, IPSR
 8007794:	61bb      	str	r3, [r7, #24]
  return(result);
 8007796:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007798:	2b00      	cmp	r3, #0
 800779a:	f040 8086 	bne.w	80078aa <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800779e:	f3ef 8310 	mrs	r3, PRIMASK
 80077a2:	617b      	str	r3, [r7, #20]
  return(result);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077aa:	f3ef 8311 	mrs	r3, BASEPRI
 80077ae:	613b      	str	r3, [r7, #16]
  return(result);
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <osSemaphoreNew+0x3e>
 80077b6:	4b3f      	ldr	r3, [pc, #252]	@ (80078b4 <osSemaphoreNew+0x134>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d075      	beq.n	80078aa <osSemaphoreNew+0x12a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d072      	beq.n	80078aa <osSemaphoreNew+0x12a>
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d86e      	bhi.n	80078aa <osSemaphoreNew+0x12a>
    mem = -1;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d015      	beq.n	8007804 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d006      	beq.n	80077ee <osSemaphoreNew+0x6e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80077e6:	d902      	bls.n	80077ee <osSemaphoreNew+0x6e>
        mem = 1;
 80077e8:	2301      	movs	r3, #1
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	e00c      	b.n	8007808 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <osSemaphoreNew+0x88>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <osSemaphoreNew+0x88>
          mem = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	e001      	b.n	8007808 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780e:	d04c      	beq.n	80078aa <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d128      	bne.n	8007868 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d10a      	bne.n	8007832 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2203      	movs	r2, #3
 8007822:	9200      	str	r2, [sp, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	2001      	movs	r0, #1
 800782a:	f000 fc61 	bl	80080f0 <xQueueGenericCreateStatic>
 800782e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007830:	e005      	b.n	800783e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007832:	2203      	movs	r2, #3
 8007834:	2100      	movs	r1, #0
 8007836:	2001      	movs	r0, #1
 8007838:	f000 fce1 	bl	80081fe <xQueueGenericCreate>
 800783c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	2b00      	cmp	r3, #0
 8007842:	d022      	beq.n	800788a <osSemaphoreNew+0x10a>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d01f      	beq.n	800788a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800784a:	2300      	movs	r3, #0
 800784c:	2200      	movs	r2, #0
 800784e:	2100      	movs	r1, #0
 8007850:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007852:	f000 fe6d 	bl	8008530 <xQueueGenericSend>
 8007856:	4603      	mov	r3, r0
 8007858:	2b01      	cmp	r3, #1
 800785a:	d016      	beq.n	800788a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800785c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800785e:	f001 fc61 	bl	8009124 <vQueueDelete>
            hSemaphore = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	@ 0x24
 8007866:	e010      	b.n	800788a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d108      	bne.n	8007880 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	461a      	mov	r2, r3
 8007874:	68b9      	ldr	r1, [r7, #8]
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f000 fde4 	bl	8008444 <xQueueCreateCountingSemaphoreStatic>
 800787c:	6278      	str	r0, [r7, #36]	@ 0x24
 800787e:	e004      	b.n	800788a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fe1b 	bl	80084be <xQueueCreateCountingSemaphore>
 8007888:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00c      	beq.n	80078aa <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <osSemaphoreNew+0x11e>
          name = attr->name;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e001      	b.n	80078a2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80078a2:	69f9      	ldr	r1, [r7, #28]
 80078a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078a6:	f001 fd8b 	bl	80093c0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3728      	adds	r7, #40	@ 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20003eac 	.word	0x20003eac

080078b8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80078d0:	f06f 0303 	mvn.w	r3, #3
 80078d4:	61fb      	str	r3, [r7, #28]
 80078d6:	e04b      	b.n	8007970 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d8:	f3ef 8305 	mrs	r3, IPSR
 80078dc:	617b      	str	r3, [r7, #20]
  return(result);
 80078de:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10f      	bne.n	8007904 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e4:	f3ef 8310 	mrs	r3, PRIMASK
 80078e8:	613b      	str	r3, [r7, #16]
  return(result);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078f0:	f3ef 8311 	mrs	r3, BASEPRI
 80078f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d026      	beq.n	800794a <osSemaphoreAcquire+0x92>
 80078fc:	4b1f      	ldr	r3, [pc, #124]	@ (800797c <osSemaphoreAcquire+0xc4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d122      	bne.n	800794a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800790a:	f06f 0303 	mvn.w	r3, #3
 800790e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007910:	e02d      	b.n	800796e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007912:	2300      	movs	r3, #0
 8007914:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007916:	f107 0308 	add.w	r3, r7, #8
 800791a:	461a      	mov	r2, r3
 800791c:	2100      	movs	r1, #0
 800791e:	69b8      	ldr	r0, [r7, #24]
 8007920:	f001 fb36 	bl	8008f90 <xQueueReceiveFromISR>
 8007924:	4603      	mov	r3, r0
 8007926:	2b01      	cmp	r3, #1
 8007928:	d003      	beq.n	8007932 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800792a:	f06f 0302 	mvn.w	r3, #2
 800792e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007930:	e01d      	b.n	800796e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01a      	beq.n	800796e <osSemaphoreAcquire+0xb6>
 8007938:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <osSemaphoreAcquire+0xc8>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007948:	e011      	b.n	800796e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	69b8      	ldr	r0, [r7, #24]
 800794e:	f001 f91d 	bl	8008b8c <xQueueSemaphoreTake>
 8007952:	4603      	mov	r3, r0
 8007954:	2b01      	cmp	r3, #1
 8007956:	d00b      	beq.n	8007970 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800795e:	f06f 0301 	mvn.w	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e004      	b.n	8007970 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007966:	f06f 0302 	mvn.w	r3, #2
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	e000      	b.n	8007970 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800796e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007970:	69fb      	ldr	r3, [r7, #28]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3720      	adds	r7, #32
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20003eac 	.word	0x20003eac
 8007980:	e000ed04 	.word	0xe000ed04

08007984 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d103      	bne.n	80079a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800799a:	f06f 0303 	mvn.w	r3, #3
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e03e      	b.n	8007a20 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079a2:	f3ef 8305 	mrs	r3, IPSR
 80079a6:	617b      	str	r3, [r7, #20]
  return(result);
 80079a8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10f      	bne.n	80079ce <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ae:	f3ef 8310 	mrs	r3, PRIMASK
 80079b2:	613b      	str	r3, [r7, #16]
  return(result);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079ba:	f3ef 8311 	mrs	r3, BASEPRI
 80079be:	60fb      	str	r3, [r7, #12]
  return(result);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d01e      	beq.n	8007a04 <osSemaphoreRelease+0x80>
 80079c6:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <osSemaphoreRelease+0xa8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d11a      	bne.n	8007a04 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80079ce:	2300      	movs	r3, #0
 80079d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079d2:	f107 0308 	add.w	r3, r7, #8
 80079d6:	4619      	mov	r1, r3
 80079d8:	69b8      	ldr	r0, [r7, #24]
 80079da:	f000 ff56 	bl	800888a <xQueueGiveFromISR>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d003      	beq.n	80079ec <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80079e4:	f06f 0302 	mvn.w	r3, #2
 80079e8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079ea:	e018      	b.n	8007a1e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d015      	beq.n	8007a1e <osSemaphoreRelease+0x9a>
 80079f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a30 <osSemaphoreRelease+0xac>)
 80079f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a02:	e00c      	b.n	8007a1e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007a04:	2300      	movs	r3, #0
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	69b8      	ldr	r0, [r7, #24]
 8007a0c:	f000 fd90 	bl	8008530 <xQueueGenericSend>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d004      	beq.n	8007a20 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007a16:	f06f 0302 	mvn.w	r3, #2
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e000      	b.n	8007a20 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a1e:	bf00      	nop
    }
  }

  return (stat);
 8007a20:	69fb      	ldr	r3, [r7, #28]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3720      	adds	r7, #32
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	20003eac 	.word	0x20003eac
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a40:	f3ef 8305 	mrs	r3, IPSR
 8007a44:	617b      	str	r3, [r7, #20]
  return(result);
 8007a46:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10f      	bne.n	8007a6c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a50:	613b      	str	r3, [r7, #16]
  return(result);
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a58:	f3ef 8311 	mrs	r3, BASEPRI
 8007a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d007      	beq.n	8007a74 <osSemaphoreDelete+0x40>
 8007a64:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <osSemaphoreDelete+0x68>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d103      	bne.n	8007a74 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007a6c:	f06f 0305 	mvn.w	r3, #5
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e00e      	b.n	8007a92 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d103      	bne.n	8007a82 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007a7a:	f06f 0303 	mvn.w	r3, #3
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e007      	b.n	8007a92 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007a82:	69b8      	ldr	r0, [r7, #24]
 8007a84:	f001 fcc6 	bl	8009414 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007a8c:	69b8      	ldr	r0, [r7, #24]
 8007a8e:	f001 fb49 	bl	8009124 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007a92:	69fb      	ldr	r3, [r7, #28]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3720      	adds	r7, #32
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20003eac 	.word	0x20003eac

08007aa0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	@ 0x30
 8007aa4:	af02      	add	r7, sp, #8
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007aac:	2300      	movs	r3, #0
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab0:	f3ef 8305 	mrs	r3, IPSR
 8007ab4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ab6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d16f      	bne.n	8007b9c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007abc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8007acc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <osMessageQueueNew+0x3c>
 8007ad4:	4b34      	ldr	r3, [pc, #208]	@ (8007ba8 <osMessageQueueNew+0x108>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d05f      	beq.n	8007b9c <osMessageQueueNew+0xfc>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d05c      	beq.n	8007b9c <osMessageQueueNew+0xfc>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d059      	beq.n	8007b9c <osMessageQueueNew+0xfc>
    mem = -1;
 8007ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d029      	beq.n	8007b48 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d012      	beq.n	8007b22 <osMessageQueueNew+0x82>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b4f      	cmp	r3, #79	@ 0x4f
 8007b02:	d90e      	bls.n	8007b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00a      	beq.n	8007b22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	fb01 f303 	mul.w	r3, r1, r3
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <osMessageQueueNew+0x82>
        mem = 1;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	623b      	str	r3, [r7, #32]
 8007b20:	e014      	b.n	8007b4c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d110      	bne.n	8007b4c <osMessageQueueNew+0xac>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10c      	bne.n	8007b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d108      	bne.n	8007b4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <osMessageQueueNew+0xac>
          mem = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	e001      	b.n	8007b4c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d10b      	bne.n	8007b6a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	9100      	str	r1, [sp, #0]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fac5 	bl	80080f0 <xQueueGenericCreateStatic>
 8007b66:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b68:	e008      	b.n	8007b7c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b70:	2200      	movs	r2, #0
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 fb42 	bl	80081fe <xQueueGenericCreate>
 8007b7a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d003      	beq.n	8007b90 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	61fb      	str	r3, [r7, #28]
 8007b8e:	e001      	b.n	8007b94 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b98:	f001 fc12 	bl	80093c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3728      	adds	r7, #40	@ 0x28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20003eac 	.word	0x20003eac

08007bac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	@ 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bc4:	f3ef 8305 	mrs	r3, IPSR
 8007bc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10f      	bne.n	8007bf0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8007be0:	617b      	str	r3, [r7, #20]
  return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d02c      	beq.n	8007c42 <osMessageQueuePut+0x96>
 8007be8:	4b28      	ldr	r3, [pc, #160]	@ (8007c8c <osMessageQueuePut+0xe0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d128      	bne.n	8007c42 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <osMessageQueuePut+0x56>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <osMessageQueuePut+0x56>
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007c02:	f06f 0303 	mvn.w	r3, #3
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c08:	e039      	b.n	8007c7e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007c0e:	f107 0210 	add.w	r2, r7, #16
 8007c12:	2300      	movs	r3, #0
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	6a38      	ldr	r0, [r7, #32]
 8007c18:	f000 fd94 	bl	8008744 <xQueueGenericSendFromISR>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d003      	beq.n	8007c2a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c22:	f06f 0302 	mvn.w	r3, #2
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c28:	e029      	b.n	8007c7e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d026      	beq.n	8007c7e <osMessageQueuePut+0xd2>
 8007c30:	4b17      	ldr	r3, [pc, #92]	@ (8007c90 <osMessageQueuePut+0xe4>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c40:	e01d      	b.n	8007c7e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <osMessageQueuePut+0xa2>
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d103      	bne.n	8007c56 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007c4e:	f06f 0303 	mvn.w	r3, #3
 8007c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c54:	e014      	b.n	8007c80 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c56:	2300      	movs	r3, #0
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	6a38      	ldr	r0, [r7, #32]
 8007c5e:	f000 fc67 	bl	8008530 <xQueueGenericSend>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d00b      	beq.n	8007c80 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d003      	beq.n	8007c76 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007c6e:	f06f 0301 	mvn.w	r3, #1
 8007c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c74:	e004      	b.n	8007c80 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007c76:	f06f 0302 	mvn.w	r3, #2
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7c:	e000      	b.n	8007c80 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c7e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3728      	adds	r7, #40	@ 0x28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20003eac 	.word	0x20003eac
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	@ 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007caa:	f3ef 8305 	mrs	r3, IPSR
 8007cae:	61fb      	str	r3, [r7, #28]
  return(result);
 8007cb0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cba:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d105      	bne.n	8007cce <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d02c      	beq.n	8007d28 <osMessageQueueGet+0x94>
 8007cce:	4b28      	ldr	r3, [pc, #160]	@ (8007d70 <osMessageQueueGet+0xdc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d128      	bne.n	8007d28 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <osMessageQueueGet+0x54>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d002      	beq.n	8007ce8 <osMessageQueueGet+0x54>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007ce8:	f06f 0303 	mvn.w	r3, #3
 8007cec:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cee:	e038      	b.n	8007d62 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007cf4:	f107 0310 	add.w	r3, r7, #16
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	6a38      	ldr	r0, [r7, #32]
 8007cfe:	f001 f947 	bl	8008f90 <xQueueReceiveFromISR>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d003      	beq.n	8007d10 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007d08:	f06f 0302 	mvn.w	r3, #2
 8007d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d0e:	e028      	b.n	8007d62 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d025      	beq.n	8007d62 <osMessageQueueGet+0xce>
 8007d16:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <osMessageQueueGet+0xe0>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d26:	e01c      	b.n	8007d62 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <osMessageQueueGet+0xa0>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007d34:	f06f 0303 	mvn.w	r3, #3
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3a:	e013      	b.n	8007d64 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	6a38      	ldr	r0, [r7, #32]
 8007d42:	f000 fe3b 	bl	80089bc <xQueueReceive>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d00b      	beq.n	8007d64 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007d52:	f06f 0301 	mvn.w	r3, #1
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d58:	e004      	b.n	8007d64 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007d5a:	f06f 0302 	mvn.w	r3, #2
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d60:	e000      	b.n	8007d64 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3728      	adds	r7, #40	@ 0x28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20003eac 	.word	0x20003eac
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e01e      	b.n	8007dce <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d90:	f3ef 8305 	mrs	r3, IPSR
 8007d94:	617b      	str	r3, [r7, #20]
  return(result);
 8007d96:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10f      	bne.n	8007dbc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007da0:	613b      	str	r3, [r7, #16]
  return(result);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007da8:	f3ef 8311 	mrs	r3, BASEPRI
 8007dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <osMessageQueueGetCount+0x4e>
 8007db4:	4b08      	ldr	r3, [pc, #32]	@ (8007dd8 <osMessageQueueGetCount+0x60>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d104      	bne.n	8007dc6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007dbc:	69b8      	ldr	r0, [r7, #24]
 8007dbe:	f001 f990 	bl	80090e2 <uxQueueMessagesWaitingFromISR>
 8007dc2:	61f8      	str	r0, [r7, #28]
 8007dc4:	e003      	b.n	8007dce <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007dc6:	69b8      	ldr	r0, [r7, #24]
 8007dc8:	f001 f96a 	bl	80090a0 <uxQueueMessagesWaiting>
 8007dcc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007dce:	69fb      	ldr	r3, [r7, #28]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20003eac 	.word	0x20003eac

08007ddc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007de8:	f3ef 8305 	mrs	r3, IPSR
 8007dec:	617b      	str	r3, [r7, #20]
  return(result);
 8007dee:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10f      	bne.n	8007e14 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007df4:	f3ef 8310 	mrs	r3, PRIMASK
 8007df8:	613b      	str	r3, [r7, #16]
  return(result);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d105      	bne.n	8007e0c <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e00:	f3ef 8311 	mrs	r3, BASEPRI
 8007e04:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <osMessageQueueDelete+0x40>
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <osMessageQueueDelete+0x68>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d103      	bne.n	8007e1c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007e14:	f06f 0305 	mvn.w	r3, #5
 8007e18:	61fb      	str	r3, [r7, #28]
 8007e1a:	e00e      	b.n	8007e3a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d103      	bne.n	8007e2a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007e22:	f06f 0303 	mvn.w	r3, #3
 8007e26:	61fb      	str	r3, [r7, #28]
 8007e28:	e007      	b.n	8007e3a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007e2a:	69b8      	ldr	r0, [r7, #24]
 8007e2c:	f001 faf2 	bl	8009414 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007e34:	69b8      	ldr	r0, [r7, #24]
 8007e36:	f001 f975 	bl	8009124 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007e3a:	69fb      	ldr	r3, [r7, #28]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3720      	adds	r7, #32
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20003eac 	.word	0x20003eac

08007e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4a07      	ldr	r2, [pc, #28]	@ (8007e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4a06      	ldr	r2, [pc, #24]	@ (8007e78 <vApplicationGetIdleTaskMemory+0x30>)
 8007e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2280      	movs	r2, #128	@ 0x80
 8007e64:	601a      	str	r2, [r3, #0]
}
 8007e66:	bf00      	nop
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20003eb0 	.word	0x20003eb0
 8007e78:	20003f0c 	.word	0x20003f0c

08007e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a07      	ldr	r2, [pc, #28]	@ (8007ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4a06      	ldr	r2, [pc, #24]	@ (8007eac <vApplicationGetTimerTaskMemory+0x30>)
 8007e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e9a:	601a      	str	r2, [r3, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	2000410c 	.word	0x2000410c
 8007eac:	20004168 	.word	0x20004168

08007eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f103 0208 	add.w	r2, r3, #8
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f103 0208 	add.w	r2, r3, #8
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f103 0208 	add.w	r2, r3, #8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b085      	sub	sp, #20
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	1c5a      	adds	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d103      	bne.n	8007f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e00c      	b.n	8007f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3308      	adds	r3, #8
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e002      	b.n	8007f80 <vListInsert+0x2e>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d2f6      	bcs.n	8007f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	1c5a      	adds	r2, r3, #1
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6892      	ldr	r2, [r2, #8]
 8007fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	6852      	ldr	r2, [r2, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d103      	bne.n	8007ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	1e5a      	subs	r2, r3, #1
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10d      	bne.n	8008048 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	b672      	cpsid	i
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	b662      	cpsie	i
 8008040:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008048:	f003 f998 	bl	800b37c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	441a      	add	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008078:	3b01      	subs	r3, #1
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	441a      	add	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	22ff      	movs	r2, #255	@ 0xff
 800808c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	22ff      	movs	r2, #255	@ 0xff
 8008094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d114      	bne.n	80080c8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01a      	beq.n	80080dc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3310      	adds	r3, #16
 80080aa:	4618      	mov	r0, r3
 80080ac:	f001 ff9c 	bl	8009fe8 <xTaskRemoveFromEventList>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d012      	beq.n	80080dc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <xQueueGenericReset+0xd4>)
 80080b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	e009      	b.n	80080dc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3310      	adds	r3, #16
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff feef 	bl	8007eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3324      	adds	r3, #36	@ 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff feea 	bl	8007eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080dc:	f003 f984 	bl	800b3e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080e0:	2301      	movs	r3, #1
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	@ 0x38
 80080f4:	af02      	add	r7, sp, #8
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800811a:	bf00      	nop
 800811c:	bf00      	nop
 800811e:	e7fd      	b.n	800811c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10d      	bne.n	8008142 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812a:	b672      	cpsid	i
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	b662      	cpsie	i
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <xQueueGenericCreateStatic+0x5e>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <xQueueGenericCreateStatic+0x62>
 800814e:	2301      	movs	r3, #1
 8008150:	e000      	b.n	8008154 <xQueueGenericCreateStatic+0x64>
 8008152:	2300      	movs	r3, #0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10d      	bne.n	8008174 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	b672      	cpsid	i
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	b662      	cpsie	i
 800816c:	623b      	str	r3, [r7, #32]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d102      	bne.n	8008180 <xQueueGenericCreateStatic+0x90>
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <xQueueGenericCreateStatic+0x94>
 8008180:	2301      	movs	r3, #1
 8008182:	e000      	b.n	8008186 <xQueueGenericCreateStatic+0x96>
 8008184:	2300      	movs	r3, #0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d10d      	bne.n	80081a6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818e:	b672      	cpsid	i
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	b662      	cpsie	i
 800819e:	61fb      	str	r3, [r7, #28]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081a6:	2350      	movs	r3, #80	@ 0x50
 80081a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b50      	cmp	r3, #80	@ 0x50
 80081ae:	d00d      	beq.n	80081cc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	b672      	cpsid	i
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	b662      	cpsie	i
 80081c4:	61bb      	str	r3, [r7, #24]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00d      	beq.n	80081f4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 f848 	bl	8008284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3730      	adds	r7, #48	@ 0x30
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b08a      	sub	sp, #40	@ 0x28
 8008202:	af02      	add	r7, sp, #8
 8008204:	60f8      	str	r0, [r7, #12]
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	4613      	mov	r3, r2
 800820a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10d      	bne.n	800822e <xQueueGenericCreate+0x30>
	__asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	b672      	cpsid	i
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	b662      	cpsie	i
 8008226:	613b      	str	r3, [r7, #16]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d102      	bne.n	800823a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
 8008238:	e004      	b.n	8008244 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	fb02 f303 	mul.w	r3, r2, r3
 8008242:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3350      	adds	r3, #80	@ 0x50
 8008248:	4618      	mov	r0, r3
 800824a:	f003 f9c5 	bl	800b5d8 <pvPortMalloc>
 800824e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d011      	beq.n	800827a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3350      	adds	r3, #80	@ 0x50
 800825e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008268:	79fa      	ldrb	r2, [r7, #7]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	68b9      	ldr	r1, [r7, #8]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 f805 	bl	8008284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800827a:	69bb      	ldr	r3, [r7, #24]
	}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
 8008290:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e002      	b.n	80082a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082b2:	2101      	movs	r1, #1
 80082b4:	69b8      	ldr	r0, [r7, #24]
 80082b6:	f7ff feaf 	bl	8008018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	78fa      	ldrb	r2, [r7, #3]
 80082be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b082      	sub	sp, #8
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00e      	beq.n	80082f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082ea:	2300      	movs	r3, #0
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f91d 	bl	8008530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	af00      	add	r7, sp, #0
 8008304:	4603      	mov	r3, r0
 8008306:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008308:	2301      	movs	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	2300      	movs	r3, #0
 800830e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	461a      	mov	r2, r3
 8008314:	6939      	ldr	r1, [r7, #16]
 8008316:	6978      	ldr	r0, [r7, #20]
 8008318:	f7ff ff71 	bl	80081fe <xQueueGenericCreate>
 800831c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff ffd3 	bl	80082ca <prvInitialiseMutex>

		return xNewQueue;
 8008324:	68fb      	ldr	r3, [r7, #12]
	}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af02      	add	r7, sp, #8
 8008334:	4603      	mov	r3, r0
 8008336:	6039      	str	r1, [r7, #0]
 8008338:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800833a:	2301      	movs	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2200      	movs	r2, #0
 800834a:	6939      	ldr	r1, [r7, #16]
 800834c:	6978      	ldr	r0, [r7, #20]
 800834e:	f7ff fecf 	bl	80080f0 <xQueueGenericCreateStatic>
 8008352:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f7ff ffb8 	bl	80082ca <prvInitialiseMutex>

		return xNewQueue;
 800835a:	68fb      	ldr	r3, [r7, #12]
	}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10d      	bne.n	8008392 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
 800838a:	60fb      	str	r3, [r7, #12]
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	e7fd      	b.n	800838e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	689c      	ldr	r4, [r3, #8]
 8008396:	f002 f8c3 	bl	800a520 <xTaskGetCurrentTaskHandle>
 800839a:	4603      	mov	r3, r0
 800839c:	429c      	cmp	r4, r3
 800839e:	d111      	bne.n	80083c4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	1e5a      	subs	r2, r3, #1
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80083b2:	2300      	movs	r3, #0
 80083b4:	2200      	movs	r2, #0
 80083b6:	2100      	movs	r1, #0
 80083b8:	6938      	ldr	r0, [r7, #16]
 80083ba:	f000 f8b9 	bl	8008530 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80083be:	2301      	movs	r3, #1
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e001      	b.n	80083c8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80083c8:	697b      	ldr	r3, [r7, #20]
	}
 80083ca:	4618      	mov	r0, r3
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd90      	pop	{r4, r7, pc}

080083d2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80083d2:	b590      	push	{r4, r7, lr}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	60fb      	str	r3, [r7, #12]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	689c      	ldr	r4, [r3, #8]
 8008406:	f002 f88b 	bl	800a520 <xTaskGetCurrentTaskHandle>
 800840a:	4603      	mov	r3, r0
 800840c:	429c      	cmp	r4, r3
 800840e:	d107      	bne.n	8008420 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800841a:	2301      	movs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e00c      	b.n	800843a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	6938      	ldr	r0, [r7, #16]
 8008424:	f000 fbb2 	bl	8008b8c <xQueueSemaphoreTake>
 8008428:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800843a:	697b      	ldr	r3, [r7, #20]
	}
 800843c:	4618      	mov	r0, r3
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	@ 0x28
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10d      	bne.n	8008472 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845a:	b672      	cpsid	i
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	b662      	cpsie	i
 800846a:	61bb      	str	r3, [r7, #24]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d90d      	bls.n	8008496 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	b672      	cpsid	i
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	b662      	cpsie	i
 800848e:	617b      	str	r3, [r7, #20]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008496:	2302      	movs	r3, #2
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	2100      	movs	r1, #0
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f7ff fe25 	bl	80080f0 <xQueueGenericCreateStatic>
 80084a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80084b4:	69fb      	ldr	r3, [r7, #28]
	}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3720      	adds	r7, #32
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	613b      	str	r3, [r7, #16]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d90d      	bls.n	800850e <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80084f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f6:	b672      	cpsid	i
 80084f8:	f383 8811 	msr	BASEPRI, r3
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	b662      	cpsie	i
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	bf00      	nop
 800850c:	e7fd      	b.n	800850a <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800850e:	2202      	movs	r2, #2
 8008510:	2100      	movs	r1, #0
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff fe73 	bl	80081fe <xQueueGenericCreate>
 8008518:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008526:	697b      	ldr	r3, [r7, #20]
	}
 8008528:	4618      	mov	r0, r3
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08e      	sub	sp, #56	@ 0x38
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800853e:	2300      	movs	r3, #0
 8008540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <xQueueGenericSend+0x38>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	b672      	cpsid	i
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	b662      	cpsie	i
 8008560:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <xQueueGenericSend+0x46>
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <xQueueGenericSend+0x4a>
 8008576:	2301      	movs	r3, #1
 8008578:	e000      	b.n	800857c <xQueueGenericSend+0x4c>
 800857a:	2300      	movs	r3, #0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10d      	bne.n	800859c <xQueueGenericSend+0x6c>
	__asm volatile
 8008580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008584:	b672      	cpsid	i
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	b662      	cpsie	i
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d103      	bne.n	80085aa <xQueueGenericSend+0x7a>
 80085a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <xQueueGenericSend+0x7e>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e000      	b.n	80085b0 <xQueueGenericSend+0x80>
 80085ae:	2300      	movs	r3, #0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <xQueueGenericSend+0xa0>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	b672      	cpsid	i
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	b662      	cpsie	i
 80085c8:	623b      	str	r3, [r7, #32]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d0:	f001 ffb6 	bl	800a540 <xTaskGetSchedulerState>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d102      	bne.n	80085e0 <xQueueGenericSend+0xb0>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <xQueueGenericSend+0xb4>
 80085e0:	2301      	movs	r3, #1
 80085e2:	e000      	b.n	80085e6 <xQueueGenericSend+0xb6>
 80085e4:	2300      	movs	r3, #0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <xQueueGenericSend+0xd6>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	61fb      	str	r3, [r7, #28]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008606:	f002 feb9 	bl	800b37c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <xQueueGenericSend+0xec>
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b02      	cmp	r3, #2
 800861a:	d129      	bne.n	8008670 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	68b9      	ldr	r1, [r7, #8]
 8008620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008622:	f000 fdbd 	bl	80091a0 <prvCopyDataToQueue>
 8008626:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	d010      	beq.n	8008652 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	3324      	adds	r3, #36	@ 0x24
 8008634:	4618      	mov	r0, r3
 8008636:	f001 fcd7 	bl	8009fe8 <xTaskRemoveFromEventList>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d013      	beq.n	8008668 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008640:	4b3f      	ldr	r3, [pc, #252]	@ (8008740 <xQueueGenericSend+0x210>)
 8008642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	e00a      	b.n	8008668 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d007      	beq.n	8008668 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008658:	4b39      	ldr	r3, [pc, #228]	@ (8008740 <xQueueGenericSend+0x210>)
 800865a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008668:	f002 febe 	bl	800b3e8 <vPortExitCritical>
				return pdPASS;
 800866c:	2301      	movs	r3, #1
 800866e:	e063      	b.n	8008738 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d103      	bne.n	800867e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008676:	f002 feb7 	bl	800b3e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800867a:	2300      	movs	r3, #0
 800867c:	e05c      	b.n	8008738 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	2b00      	cmp	r3, #0
 8008682:	d106      	bne.n	8008692 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008684:	f107 0314 	add.w	r3, r7, #20
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fd13 	bl	800a0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800868e:	2301      	movs	r3, #1
 8008690:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008692:	f002 fea9 	bl	800b3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008696:	f001 f9d7 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800869a:	f002 fe6f 	bl	800b37c <vPortEnterCritical>
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d103      	bne.n	80086b4 <xQueueGenericSend+0x184>
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086ba:	b25b      	sxtb	r3, r3
 80086bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c0:	d103      	bne.n	80086ca <xQueueGenericSend+0x19a>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ca:	f002 fe8d 	bl	800b3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ce:	1d3a      	adds	r2, r7, #4
 80086d0:	f107 0314 	add.w	r3, r7, #20
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 fd02 	bl	800a0e0 <xTaskCheckForTimeOut>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d124      	bne.n	800872c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086e4:	f000 fe54 	bl	8009390 <prvIsQueueFull>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d018      	beq.n	8008720 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	3310      	adds	r3, #16
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 fc20 	bl	8009f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086fe:	f000 fddf 	bl	80092c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008702:	f001 f9af 	bl	8009a64 <xTaskResumeAll>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	f47f af7c 	bne.w	8008606 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800870e:	4b0c      	ldr	r3, [pc, #48]	@ (8008740 <xQueueGenericSend+0x210>)
 8008710:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	e772      	b.n	8008606 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008720:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008722:	f000 fdcd 	bl	80092c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008726:	f001 f99d 	bl	8009a64 <xTaskResumeAll>
 800872a:	e76c      	b.n	8008606 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800872c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800872e:	f000 fdc7 	bl	80092c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008732:	f001 f997 	bl	8009a64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008736:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008738:	4618      	mov	r0, r3
 800873a:	3738      	adds	r7, #56	@ 0x38
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	e000ed04 	.word	0xe000ed04

08008744 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08e      	sub	sp, #56	@ 0x38
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	b672      	cpsid	i
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	b662      	cpsie	i
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSendFromISR+0x42>
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <xQueueGenericSendFromISR+0x46>
 8008786:	2301      	movs	r3, #1
 8008788:	e000      	b.n	800878c <xQueueGenericSendFromISR+0x48>
 800878a:	2300      	movs	r3, #0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d10d      	bne.n	80087ac <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	b672      	cpsid	i
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	b662      	cpsie	i
 80087a4:	623b      	str	r3, [r7, #32]
}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	e7fd      	b.n	80087a8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d103      	bne.n	80087ba <xQueueGenericSendFromISR+0x76>
 80087b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d101      	bne.n	80087be <xQueueGenericSendFromISR+0x7a>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericSendFromISR+0x7c>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10d      	bne.n	80087e0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	b672      	cpsid	i
 80087ca:	f383 8811 	msr	BASEPRI, r3
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f3bf 8f4f 	dsb	sy
 80087d6:	b662      	cpsie	i
 80087d8:	61fb      	str	r3, [r7, #28]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087e0:	f002 feb4 	bl	800b54c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087e4:	f3ef 8211 	mrs	r2, BASEPRI
 80087e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ec:	b672      	cpsid	i
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	b662      	cpsie	i
 80087fc:	61ba      	str	r2, [r7, #24]
 80087fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008800:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008802:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <xQueueGenericSendFromISR+0xd2>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d12c      	bne.n	8008870 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800881c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	68b9      	ldr	r1, [r7, #8]
 8008824:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008826:	f000 fcbb 	bl	80091a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800882a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800882e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008832:	d112      	bne.n	800885a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	d016      	beq.n	800886a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	3324      	adds	r3, #36	@ 0x24
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fbd1 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00e      	beq.n	800886a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00b      	beq.n	800886a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	e007      	b.n	800886a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800885a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800885e:	3301      	adds	r3, #1
 8008860:	b2db      	uxtb	r3, r3
 8008862:	b25a      	sxtb	r2, r3
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800886a:	2301      	movs	r3, #1
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800886e:	e001      	b.n	8008874 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008870:	2300      	movs	r3, #0
 8008872:	637b      	str	r3, [r7, #52]	@ 0x34
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800887e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008882:	4618      	mov	r0, r3
 8008884:	3738      	adds	r7, #56	@ 0x38
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b08e      	sub	sp, #56	@ 0x38
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10d      	bne.n	80088ba <xQueueGiveFromISR+0x30>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	b672      	cpsid	i
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	b662      	cpsie	i
 80088b2:	623b      	str	r3, [r7, #32]
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	e7fd      	b.n	80088b6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00d      	beq.n	80088de <xQueueGiveFromISR+0x54>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	b672      	cpsid	i
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	b662      	cpsie	i
 80088d6:	61fb      	str	r3, [r7, #28]
}
 80088d8:	bf00      	nop
 80088da:	bf00      	nop
 80088dc:	e7fd      	b.n	80088da <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d103      	bne.n	80088ee <xQueueGiveFromISR+0x64>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <xQueueGiveFromISR+0x68>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e000      	b.n	80088f4 <xQueueGiveFromISR+0x6a>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10d      	bne.n	8008914 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	61bb      	str	r3, [r7, #24]
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008914:	f002 fe1a 	bl	800b54c <vPortValidateInterruptPriority>
	__asm volatile
 8008918:	f3ef 8211 	mrs	r2, BASEPRI
 800891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008920:	b672      	cpsid	i
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	b662      	cpsie	i
 8008930:	617a      	str	r2, [r7, #20]
 8008932:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008934:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008936:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800893c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008944:	429a      	cmp	r2, r3
 8008946:	d22b      	bcs.n	80089a0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800895a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d112      	bne.n	800898a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	d016      	beq.n	800899a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	3324      	adds	r3, #36	@ 0x24
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fb39 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00e      	beq.n	800899a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e007      	b.n	800899a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800898a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800898e:	3301      	adds	r3, #1
 8008990:	b2db      	uxtb	r3, r3
 8008992:	b25a      	sxtb	r2, r3
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800899a:	2301      	movs	r3, #1
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
 800899e:	e001      	b.n	80089a4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f383 8811 	msr	BASEPRI, r3
}
 80089ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3738      	adds	r7, #56	@ 0x38
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	@ 0x30
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10d      	bne.n	80089f2 <xQueueReceive+0x36>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	b672      	cpsid	i
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	b662      	cpsie	i
 80089ea:	623b      	str	r3, [r7, #32]
}
 80089ec:	bf00      	nop
 80089ee:	bf00      	nop
 80089f0:	e7fd      	b.n	80089ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d103      	bne.n	8008a00 <xQueueReceive+0x44>
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <xQueueReceive+0x48>
 8008a00:	2301      	movs	r3, #1
 8008a02:	e000      	b.n	8008a06 <xQueueReceive+0x4a>
 8008a04:	2300      	movs	r3, #0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <xQueueReceive+0x6a>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	61fb      	str	r3, [r7, #28]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a26:	f001 fd8b 	bl	800a540 <xTaskGetSchedulerState>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d102      	bne.n	8008a36 <xQueueReceive+0x7a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <xQueueReceive+0x7e>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <xQueueReceive+0x80>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10d      	bne.n	8008a5c <xQueueReceive+0xa0>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a44:	b672      	cpsid	i
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	b662      	cpsie	i
 8008a54:	61bb      	str	r3, [r7, #24]
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a5c:	f002 fc8e 	bl	800b37c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01f      	beq.n	8008aac <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a70:	f000 fc00 	bl	8009274 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	1e5a      	subs	r2, r3, #1
 8008a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00f      	beq.n	8008aa4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a86:	3310      	adds	r3, #16
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 faad 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a94:	4b3c      	ldr	r3, [pc, #240]	@ (8008b88 <xQueueReceive+0x1cc>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aa4:	f002 fca0 	bl	800b3e8 <vPortExitCritical>
				return pdPASS;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e069      	b.n	8008b80 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d103      	bne.n	8008aba <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ab2:	f002 fc99 	bl	800b3e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e062      	b.n	8008b80 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac0:	f107 0310 	add.w	r3, r7, #16
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 faf5 	bl	800a0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aca:	2301      	movs	r3, #1
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ace:	f002 fc8b 	bl	800b3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ad2:	f000 ffb9 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ad6:	f002 fc51 	bl	800b37c <vPortEnterCritical>
 8008ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008adc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ae0:	b25b      	sxtb	r3, r3
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d103      	bne.n	8008af0 <xQueueReceive+0x134>
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afc:	d103      	bne.n	8008b06 <xQueueReceive+0x14a>
 8008afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b06:	f002 fc6f 	bl	800b3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	f107 0310 	add.w	r3, r7, #16
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 fae4 	bl	800a0e0 <xTaskCheckForTimeOut>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d123      	bne.n	8008b66 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b20:	f000 fc20 	bl	8009364 <prvIsQueueEmpty>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d017      	beq.n	8008b5a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	3324      	adds	r3, #36	@ 0x24
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fa02 	bl	8009f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b3a:	f000 fbc1 	bl	80092c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b3e:	f000 ff91 	bl	8009a64 <xTaskResumeAll>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d189      	bne.n	8008a5c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008b48:	4b0f      	ldr	r3, [pc, #60]	@ (8008b88 <xQueueReceive+0x1cc>)
 8008b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b4e:	601a      	str	r2, [r3, #0]
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	e780      	b.n	8008a5c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b5c:	f000 fbb0 	bl	80092c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b60:	f000 ff80 	bl	8009a64 <xTaskResumeAll>
 8008b64:	e77a      	b.n	8008a5c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b68:	f000 fbaa 	bl	80092c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b6c:	f000 ff7a 	bl	8009a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b72:	f000 fbf7 	bl	8009364 <prvIsQueueEmpty>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f43f af6f 	beq.w	8008a5c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3730      	adds	r7, #48	@ 0x30
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08e      	sub	sp, #56	@ 0x38
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10d      	bne.n	8008bc4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	b672      	cpsid	i
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	b662      	cpsie	i
 8008bbc:	623b      	str	r3, [r7, #32]
}
 8008bbe:	bf00      	nop
 8008bc0:	bf00      	nop
 8008bc2:	e7fd      	b.n	8008bc0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00d      	beq.n	8008be8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd0:	b672      	cpsid	i
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	b662      	cpsie	i
 8008be0:	61fb      	str	r3, [r7, #28]
}
 8008be2:	bf00      	nop
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008be8:	f001 fcaa 	bl	800a540 <xTaskGetSchedulerState>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <xQueueSemaphoreTake+0x6c>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <xQueueSemaphoreTake+0x70>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e000      	b.n	8008bfe <xQueueSemaphoreTake+0x72>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10d      	bne.n	8008c1e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	b672      	cpsid	i
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	b662      	cpsie	i
 8008c16:	61bb      	str	r3, [r7, #24]
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
 8008c1c:	e7fd      	b.n	8008c1a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c1e:	f002 fbad 	bl	800b37c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c26:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d024      	beq.n	8008c78 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	1e5a      	subs	r2, r3, #1
 8008c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c34:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c3e:	f001 febd 	bl	800a9bc <pvTaskIncrementMutexHeldCount>
 8008c42:	4602      	mov	r2, r0
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00f      	beq.n	8008c70 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c52:	3310      	adds	r3, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 f9c7 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d007      	beq.n	8008c70 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c60:	4b55      	ldr	r3, [pc, #340]	@ (8008db8 <xQueueSemaphoreTake+0x22c>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c70:	f002 fbba 	bl	800b3e8 <vPortExitCritical>
				return pdPASS;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e09a      	b.n	8008dae <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d114      	bne.n	8008ca8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00d      	beq.n	8008ca0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	b672      	cpsid	i
 8008c8a:	f383 8811 	msr	BASEPRI, r3
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f3bf 8f4f 	dsb	sy
 8008c96:	b662      	cpsie	i
 8008c98:	617b      	str	r3, [r7, #20]
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	e7fd      	b.n	8008c9c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ca0:	f002 fba2 	bl	800b3e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	e082      	b.n	8008dae <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 f9fe 	bl	800a0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cbc:	f002 fb94 	bl	800b3e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cc0:	f000 fec2 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cc4:	f002 fb5a 	bl	800b37c <vPortEnterCritical>
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd4:	d103      	bne.n	8008cde <xQueueSemaphoreTake+0x152>
 8008cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cea:	d103      	bne.n	8008cf4 <xQueueSemaphoreTake+0x168>
 8008cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cf4:	f002 fb78 	bl	800b3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cf8:	463a      	mov	r2, r7
 8008cfa:	f107 030c 	add.w	r3, r7, #12
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 f9ed 	bl	800a0e0 <xTaskCheckForTimeOut>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d132      	bne.n	8008d72 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d0e:	f000 fb29 	bl	8009364 <prvIsQueueEmpty>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d026      	beq.n	8008d66 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008d20:	f002 fb2c 	bl	800b37c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f001 fc27 	bl	800a57c <xTaskPriorityInherit>
 8008d2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008d30:	f002 fb5a 	bl	800b3e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d36:	3324      	adds	r3, #36	@ 0x24
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 f8fd 	bl	8009f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d44:	f000 fabc 	bl	80092c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d48:	f000 fe8c 	bl	8009a64 <xTaskResumeAll>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f47f af65 	bne.w	8008c1e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008d54:	4b18      	ldr	r3, [pc, #96]	@ (8008db8 <xQueueSemaphoreTake+0x22c>)
 8008d56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d5a:	601a      	str	r2, [r3, #0]
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	e75b      	b.n	8008c1e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d68:	f000 faaa 	bl	80092c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d6c:	f000 fe7a 	bl	8009a64 <xTaskResumeAll>
 8008d70:	e755      	b.n	8008c1e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d74:	f000 faa4 	bl	80092c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d78:	f000 fe74 	bl	8009a64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d7e:	f000 faf1 	bl	8009364 <prvIsQueueEmpty>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f43f af4a 	beq.w	8008c1e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008d90:	f002 faf4 	bl	800b37c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d96:	f000 f9eb 	bl	8009170 <prvGetDisinheritPriorityAfterTimeout>
 8008d9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fcc6 	bl	800a734 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008da8:	f002 fb1e 	bl	800b3e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3738      	adds	r7, #56	@ 0x38
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08e      	sub	sp, #56	@ 0x38
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10d      	bne.n	8008df2 <xQueuePeek+0x36>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dda:	b672      	cpsid	i
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	b662      	cpsie	i
 8008dea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <xQueuePeek+0x44>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <xQueuePeek+0x48>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e000      	b.n	8008e06 <xQueuePeek+0x4a>
 8008e04:	2300      	movs	r3, #0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10d      	bne.n	8008e26 <xQueuePeek+0x6a>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	623b      	str	r3, [r7, #32]
}
 8008e20:	bf00      	nop
 8008e22:	bf00      	nop
 8008e24:	e7fd      	b.n	8008e22 <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e26:	f001 fb8b 	bl	800a540 <xTaskGetSchedulerState>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <xQueuePeek+0x7a>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <xQueuePeek+0x7e>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e000      	b.n	8008e3c <xQueuePeek+0x80>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10d      	bne.n	8008e5c <xQueuePeek+0xa0>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	61fb      	str	r3, [r7, #28]
}
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e5c:	f002 fa8e 	bl	800b37c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e64:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d021      	beq.n	8008eb0 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e76:	f000 f9fd 	bl	8009274 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e7e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00f      	beq.n	8008ea8 <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8a:	3324      	adds	r3, #36	@ 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 f8ab 	bl	8009fe8 <xTaskRemoveFromEventList>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e98:	4b3c      	ldr	r3, [pc, #240]	@ (8008f8c <xQueuePeek+0x1d0>)
 8008e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ea8:	f002 fa9e 	bl	800b3e8 <vPortExitCritical>
				return pdPASS;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e069      	b.n	8008f84 <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d103      	bne.n	8008ebe <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008eb6:	f002 fa97 	bl	800b3e8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e062      	b.n	8008f84 <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d106      	bne.n	8008ed2 <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ec4:	f107 0314 	add.w	r3, r7, #20
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 f8f3 	bl	800a0b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ed2:	f002 fa89 	bl	800b3e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ed6:	f000 fdb7 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eda:	f002 fa4f 	bl	800b37c <vPortEnterCritical>
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ee4:	b25b      	sxtb	r3, r3
 8008ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eea:	d103      	bne.n	8008ef4 <xQueuePeek+0x138>
 8008eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d103      	bne.n	8008f0a <xQueuePeek+0x14e>
 8008f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f0a:	f002 fa6d 	bl	800b3e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	4611      	mov	r1, r2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f001 f8e2 	bl	800a0e0 <xTaskCheckForTimeOut>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d123      	bne.n	8008f6a <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f24:	f000 fa1e 	bl	8009364 <prvIsQueueEmpty>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d017      	beq.n	8008f5e <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	3324      	adds	r3, #36	@ 0x24
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 f800 	bl	8009f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f3e:	f000 f9bf 	bl	80092c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f42:	f000 fd8f 	bl	8009a64 <xTaskResumeAll>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d187      	bne.n	8008e5c <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f8c <xQueuePeek+0x1d0>)
 8008f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	e77e      	b.n	8008e5c <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8008f5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f60:	f000 f9ae 	bl	80092c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f64:	f000 fd7e 	bl	8009a64 <xTaskResumeAll>
 8008f68:	e778      	b.n	8008e5c <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8008f6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f6c:	f000 f9a8 	bl	80092c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f70:	f000 fd78 	bl	8009a64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f76:	f000 f9f5 	bl	8009364 <prvIsQueueEmpty>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f43f af6d 	beq.w	8008e5c <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	@ 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08e      	sub	sp, #56	@ 0x38
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10d      	bne.n	8008fc2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	b672      	cpsid	i
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	b662      	cpsie	i
 8008fba:	623b      	str	r3, [r7, #32]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <xQueueReceiveFromISR+0x40>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <xQueueReceiveFromISR+0x44>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e000      	b.n	8008fd6 <xQueueReceiveFromISR+0x46>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10d      	bne.n	8008ff6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fde:	b672      	cpsid	i
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	b662      	cpsie	i
 8008fee:	61fb      	str	r3, [r7, #28]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ff6:	f002 faa9 	bl	800b54c <vPortValidateInterruptPriority>
	__asm volatile
 8008ffa:	f3ef 8211 	mrs	r2, BASEPRI
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	61ba      	str	r2, [r7, #24]
 8009014:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009016:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009018:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800901e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d02f      	beq.n	8009086 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009028:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800902c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009034:	f000 f91e 	bl	8009274 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903a:	1e5a      	subs	r2, r3, #1
 800903c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009040:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009048:	d112      	bne.n	8009070 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d016      	beq.n	8009080 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	3310      	adds	r3, #16
 8009056:	4618      	mov	r0, r3
 8009058:	f000 ffc6 	bl	8009fe8 <xTaskRemoveFromEventList>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	e007      	b.n	8009080 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009074:	3301      	adds	r3, #1
 8009076:	b2db      	uxtb	r3, r3
 8009078:	b25a      	sxtb	r2, r3
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009080:	2301      	movs	r3, #1
 8009082:	637b      	str	r3, [r7, #52]	@ 0x34
 8009084:	e001      	b.n	800908a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8009086:	2300      	movs	r3, #0
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
 800908a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f383 8811 	msr	BASEPRI, r3
}
 8009094:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009098:	4618      	mov	r0, r3
 800909a:	3738      	adds	r7, #56	@ 0x38
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10d      	bne.n	80090ca <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	b672      	cpsid	i
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	b662      	cpsie	i
 80090c2:	60bb      	str	r3, [r7, #8]
}
 80090c4:	bf00      	nop
 80090c6:	bf00      	nop
 80090c8:	e7fd      	b.n	80090c6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80090ca:	f002 f957 	bl	800b37c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80090d4:	f002 f988 	bl	800b3e8 <vPortExitCritical>

	return uxReturn;
 80090d8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80090e2:	b480      	push	{r7}
 80090e4:	b087      	sub	sp, #28
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10d      	bne.n	8009110 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	b672      	cpsid	i
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	b662      	cpsie	i
 8009108:	60fb      	str	r3, [r7, #12]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009114:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009116:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009118:	4618      	mov	r0, r3
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <vQueueDelete+0x2e>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800913a:	b672      	cpsid	i
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	b662      	cpsie	i
 800914a:	60bb      	str	r3, [r7, #8]
}
 800914c:	bf00      	nop
 800914e:	bf00      	nop
 8009150:	e7fd      	b.n	800914e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f95e 	bl	8009414 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f002 fb06 	bl	800b774 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009168:	bf00      	nop
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d006      	beq.n	800918e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	e001      	b.n	8009192 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009192:	68fb      	ldr	r3, [r7, #12]
	}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10d      	bne.n	80091da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d14d      	bne.n	8009262 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 fa3e 	bl	800a64c <xTaskPriorityDisinherit>
 80091d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	609a      	str	r2, [r3, #8]
 80091d8:	e043      	b.n	8009262 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d119      	bne.n	8009214 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6858      	ldr	r0, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e8:	461a      	mov	r2, r3
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	f010 fe01 	bl	8019df2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f8:	441a      	add	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	429a      	cmp	r2, r3
 8009208:	d32b      	bcc.n	8009262 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	e026      	b.n	8009262 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68d8      	ldr	r0, [r3, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	461a      	mov	r2, r3
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	f010 fde7 	bl	8019df2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922c:	425b      	negs	r3, r3
 800922e:	441a      	add	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d207      	bcs.n	8009250 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009248:	425b      	negs	r3, r3
 800924a:	441a      	add	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2b02      	cmp	r3, #2
 8009254:	d105      	bne.n	8009262 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	3b01      	subs	r3, #1
 8009260:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800926a:	697b      	ldr	r3, [r7, #20]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009282:	2b00      	cmp	r3, #0
 8009284:	d018      	beq.n	80092b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928e:	441a      	add	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	429a      	cmp	r2, r3
 800929e:	d303      	bcc.n	80092a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68d9      	ldr	r1, [r3, #12]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b0:	461a      	mov	r2, r3
 80092b2:	6838      	ldr	r0, [r7, #0]
 80092b4:	f010 fd9d 	bl	8019df2 <memcpy>
	}
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092c8:	f002 f858 	bl	800b37c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092d4:	e011      	b.n	80092fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d012      	beq.n	8009304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3324      	adds	r3, #36	@ 0x24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f000 fe80 	bl	8009fe8 <xTaskRemoveFromEventList>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092ee:	f000 ff5f 	bl	800a1b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dce9      	bgt.n	80092d6 <prvUnlockQueue+0x16>
 8009302:	e000      	b.n	8009306 <prvUnlockQueue+0x46>
					break;
 8009304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	22ff      	movs	r2, #255	@ 0xff
 800930a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800930e:	f002 f86b 	bl	800b3e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009312:	f002 f833 	bl	800b37c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800931c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800931e:	e011      	b.n	8009344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d012      	beq.n	800934e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3310      	adds	r3, #16
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fe5b 	bl	8009fe8 <xTaskRemoveFromEventList>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009338:	f000 ff3a 	bl	800a1b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800933c:	7bbb      	ldrb	r3, [r7, #14]
 800933e:	3b01      	subs	r3, #1
 8009340:	b2db      	uxtb	r3, r3
 8009342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009348:	2b00      	cmp	r3, #0
 800934a:	dce9      	bgt.n	8009320 <prvUnlockQueue+0x60>
 800934c:	e000      	b.n	8009350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800934e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	22ff      	movs	r2, #255	@ 0xff
 8009354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009358:	f002 f846 	bl	800b3e8 <vPortExitCritical>
}
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800936c:	f002 f806 	bl	800b37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009378:	2301      	movs	r3, #1
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	e001      	b.n	8009382 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800937e:	2300      	movs	r3, #0
 8009380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009382:	f002 f831 	bl	800b3e8 <vPortExitCritical>

	return xReturn;
 8009386:	68fb      	ldr	r3, [r7, #12]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009398:	f001 fff0 	bl	800b37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d102      	bne.n	80093ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80093a8:	2301      	movs	r3, #1
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	e001      	b.n	80093b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f002 f819 	bl	800b3e8 <vPortExitCritical>

	return xReturn;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e014      	b.n	80093fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093d0:	4a0f      	ldr	r2, [pc, #60]	@ (8009410 <vQueueAddToRegistry+0x50>)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093dc:	490c      	ldr	r1, [pc, #48]	@ (8009410 <vQueueAddToRegistry+0x50>)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009410 <vQueueAddToRegistry+0x50>)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4413      	add	r3, r2
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093f2:	e006      	b.n	8009402 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	3301      	adds	r3, #1
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b07      	cmp	r3, #7
 80093fe:	d9e7      	bls.n	80093d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	3714      	adds	r7, #20
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	20004568 	.word	0x20004568

08009414 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
 8009420:	e016      	b.n	8009450 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009422:	4a10      	ldr	r2, [pc, #64]	@ (8009464 <vQueueUnregisterQueue+0x50>)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4413      	add	r3, r2
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	429a      	cmp	r2, r3
 8009430:	d10b      	bne.n	800944a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009432:	4a0c      	ldr	r2, [pc, #48]	@ (8009464 <vQueueUnregisterQueue+0x50>)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2100      	movs	r1, #0
 8009438:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800943c:	4a09      	ldr	r2, [pc, #36]	@ (8009464 <vQueueUnregisterQueue+0x50>)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]
				break;
 8009448:	e006      	b.n	8009458 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3301      	adds	r3, #1
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2b07      	cmp	r3, #7
 8009454:	d9e5      	bls.n	8009422 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009456:	bf00      	nop
 8009458:	bf00      	nop
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	20004568 	.word	0x20004568

08009468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009478:	f001 ff80 	bl	800b37c <vPortEnterCritical>
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009482:	b25b      	sxtb	r3, r3
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d103      	bne.n	8009492 <vQueueWaitForMessageRestricted+0x2a>
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009498:	b25b      	sxtb	r3, r3
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949e:	d103      	bne.n	80094a8 <vQueueWaitForMessageRestricted+0x40>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094a8:	f001 ff9e 	bl	800b3e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	3324      	adds	r3, #36	@ 0x24
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fd65 	bl	8009f8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094c2:	6978      	ldr	r0, [r7, #20]
 80094c4:	f7ff fefc 	bl	80092c0 <prvUnlockQueue>
	}
 80094c8:	bf00      	nop
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b08e      	sub	sp, #56	@ 0x38
 80094d4:	af04      	add	r7, sp, #16
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10d      	bne.n	8009500 <xTaskCreateStatic+0x30>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e8:	b672      	cpsid	i
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	b662      	cpsie	i
 80094f8:	623b      	str	r3, [r7, #32]
}
 80094fa:	bf00      	nop
 80094fc:	bf00      	nop
 80094fe:	e7fd      	b.n	80094fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10d      	bne.n	8009522 <xTaskCreateStatic+0x52>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	b672      	cpsid	i
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	b662      	cpsie	i
 800951a:	61fb      	str	r3, [r7, #28]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009522:	235c      	movs	r3, #92	@ 0x5c
 8009524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	2b5c      	cmp	r3, #92	@ 0x5c
 800952a:	d00d      	beq.n	8009548 <xTaskCreateStatic+0x78>
	__asm volatile
 800952c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009530:	b672      	cpsid	i
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	b662      	cpsie	i
 8009540:	61bb      	str	r3, [r7, #24]
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	e7fd      	b.n	8009544 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009548:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800954a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	d01e      	beq.n	800958e <xTaskCreateStatic+0xbe>
 8009550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01b      	beq.n	800958e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800955a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800955e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	2202      	movs	r2, #2
 8009564:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009568:	2300      	movs	r3, #0
 800956a:	9303      	str	r3, [sp, #12]
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	9302      	str	r3, [sp, #8]
 8009570:	f107 0314 	add.w	r3, r7, #20
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	68b9      	ldr	r1, [r7, #8]
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f850 	bl	8009626 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009588:	f000 f8e0 	bl	800974c <prvAddNewTaskToReadyList>
 800958c:	e001      	b.n	8009592 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800958e:	2300      	movs	r3, #0
 8009590:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009592:	697b      	ldr	r3, [r7, #20]
	}
 8009594:	4618      	mov	r0, r3
 8009596:	3728      	adds	r7, #40	@ 0x28
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b08c      	sub	sp, #48	@ 0x30
 80095a0:	af04      	add	r7, sp, #16
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095ac:	88fb      	ldrh	r3, [r7, #6]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 f811 	bl	800b5d8 <pvPortMalloc>
 80095b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00e      	beq.n	80095dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095be:	205c      	movs	r0, #92	@ 0x5c
 80095c0:	f002 f80a 	bl	800b5d8 <pvPortMalloc>
 80095c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80095d2:	e005      	b.n	80095e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095d4:	6978      	ldr	r0, [r7, #20]
 80095d6:	f002 f8cd 	bl	800b774 <vPortFree>
 80095da:	e001      	b.n	80095e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095dc:	2300      	movs	r3, #0
 80095de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d017      	beq.n	8009616 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095ee:	88fa      	ldrh	r2, [r7, #6]
 80095f0:	2300      	movs	r3, #0
 80095f2:	9303      	str	r3, [sp, #12]
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	9302      	str	r3, [sp, #8]
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 f80e 	bl	8009626 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800960a:	69f8      	ldr	r0, [r7, #28]
 800960c:	f000 f89e 	bl	800974c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009610:	2301      	movs	r3, #1
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	e002      	b.n	800961c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800961c:	69bb      	ldr	r3, [r7, #24]
	}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b088      	sub	sp, #32
 800962a:	af00      	add	r7, sp, #0
 800962c:	60f8      	str	r0, [r7, #12]
 800962e:	60b9      	str	r1, [r7, #8]
 8009630:	607a      	str	r2, [r7, #4]
 8009632:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	461a      	mov	r2, r3
 800963e:	21a5      	movs	r1, #165	@ 0xa5
 8009640:	f010 fb1e 	bl	8019c80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800964e:	440b      	add	r3, r1
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f023 0307 	bic.w	r3, r3, #7
 800965c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00d      	beq.n	8009684 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	b672      	cpsid	i
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	b662      	cpsie	i
 800967c:	617b      	str	r3, [r7, #20]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01f      	beq.n	80096ca <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	e012      	b.n	80096b6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4413      	add	r3, r2
 8009696:	7819      	ldrb	r1, [r3, #0]
 8009698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	3334      	adds	r3, #52	@ 0x34
 80096a0:	460a      	mov	r2, r1
 80096a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d006      	beq.n	80096be <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61fb      	str	r3, [r7, #28]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b0f      	cmp	r3, #15
 80096ba:	d9e9      	bls.n	8009690 <prvInitialiseNewTask+0x6a>
 80096bc:	e000      	b.n	80096c0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80096be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096c8:	e003      	b.n	80096d2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	2b37      	cmp	r3, #55	@ 0x37
 80096d6:	d901      	bls.n	80096dc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096d8:	2337      	movs	r3, #55	@ 0x37
 80096da:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096e0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096e6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	2200      	movs	r2, #0
 80096ec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	3304      	adds	r3, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fbfc 	bl	8007ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	3318      	adds	r3, #24
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7fe fbf7 	bl	8007ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009716:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971a:	2200      	movs	r2, #0
 800971c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	68f9      	ldr	r1, [r7, #12]
 800972a:	69b8      	ldr	r0, [r7, #24]
 800972c:	f001 fd16 	bl	800b15c <pxPortInitialiseStack>
 8009730:	4602      	mov	r2, r0
 8009732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009734:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009742:	bf00      	nop
 8009744:	3720      	adds	r7, #32
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009754:	f001 fe12 	bl	800b37c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009758:	4b2d      	ldr	r3, [pc, #180]	@ (8009810 <prvAddNewTaskToReadyList+0xc4>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3301      	adds	r3, #1
 800975e:	4a2c      	ldr	r2, [pc, #176]	@ (8009810 <prvAddNewTaskToReadyList+0xc4>)
 8009760:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009762:	4b2c      	ldr	r3, [pc, #176]	@ (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d109      	bne.n	800977e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800976a:	4a2a      	ldr	r2, [pc, #168]	@ (8009814 <prvAddNewTaskToReadyList+0xc8>)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009770:	4b27      	ldr	r3, [pc, #156]	@ (8009810 <prvAddNewTaskToReadyList+0xc4>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d110      	bne.n	800979a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009778:	f000 fd3e 	bl	800a1f8 <prvInitialiseTaskLists>
 800977c:	e00d      	b.n	800979a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800977e:	4b26      	ldr	r3, [pc, #152]	@ (8009818 <prvAddNewTaskToReadyList+0xcc>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d109      	bne.n	800979a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009786:	4b23      	ldr	r3, [pc, #140]	@ (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	429a      	cmp	r2, r3
 8009792:	d802      	bhi.n	800979a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009794:	4a1f      	ldr	r2, [pc, #124]	@ (8009814 <prvAddNewTaskToReadyList+0xc8>)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800979a:	4b20      	ldr	r3, [pc, #128]	@ (800981c <prvAddNewTaskToReadyList+0xd0>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3301      	adds	r3, #1
 80097a0:	4a1e      	ldr	r2, [pc, #120]	@ (800981c <prvAddNewTaskToReadyList+0xd0>)
 80097a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80097a4:	4b1d      	ldr	r3, [pc, #116]	@ (800981c <prvAddNewTaskToReadyList+0xd0>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009820 <prvAddNewTaskToReadyList+0xd4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d903      	bls.n	80097c0 <prvAddNewTaskToReadyList+0x74>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097bc:	4a18      	ldr	r2, [pc, #96]	@ (8009820 <prvAddNewTaskToReadyList+0xd4>)
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4a15      	ldr	r2, [pc, #84]	@ (8009824 <prvAddNewTaskToReadyList+0xd8>)
 80097ce:	441a      	add	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3304      	adds	r3, #4
 80097d4:	4619      	mov	r1, r3
 80097d6:	4610      	mov	r0, r2
 80097d8:	f7fe fb97 	bl	8007f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097dc:	f001 fe04 	bl	800b3e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <prvAddNewTaskToReadyList+0xcc>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009814 <prvAddNewTaskToReadyList+0xc8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d207      	bcs.n	8009806 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009828 <prvAddNewTaskToReadyList+0xdc>)
 80097f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20004a7c 	.word	0x20004a7c
 8009814:	200045a8 	.word	0x200045a8
 8009818:	20004a88 	.word	0x20004a88
 800981c:	20004a98 	.word	0x20004a98
 8009820:	20004a84 	.word	0x20004a84
 8009824:	200045ac 	.word	0x200045ac
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01a      	beq.n	8009874 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800983e:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <vTaskDelay+0x68>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00d      	beq.n	8009862 <vTaskDelay+0x36>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	b672      	cpsid	i
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	b662      	cpsie	i
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009862:	f000 f8f1 	bl	8009a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009866:	2100      	movs	r1, #0
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 f8bb 	bl	800a9e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800986e:	f000 f8f9 	bl	8009a64 <xTaskResumeAll>
 8009872:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d107      	bne.n	800988a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800987a:	4b07      	ldr	r3, [pc, #28]	@ (8009898 <vTaskDelay+0x6c>)
 800987c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	20004aa4 	.word	0x20004aa4
 8009898:	e000ed04 	.word	0xe000ed04

0800989c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10d      	bne.n	80098ca <eTaskGetState+0x2e>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	b672      	cpsid	i
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	b662      	cpsie	i
 80098c2:	60bb      	str	r3, [r7, #8]
}
 80098c4:	bf00      	nop
 80098c6:	bf00      	nop
 80098c8:	e7fd      	b.n	80098c6 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80098ca:	4b24      	ldr	r3, [pc, #144]	@ (800995c <eTaskGetState+0xc0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d102      	bne.n	80098da <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80098d4:	2300      	movs	r3, #0
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e03a      	b.n	8009950 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 80098da:	f001 fd4f 	bl	800b37c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80098e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009960 <eTaskGetState+0xc4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098ea:	4b1e      	ldr	r3, [pc, #120]	@ (8009964 <eTaskGetState+0xc8>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80098f0:	f001 fd7a 	bl	800b3e8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d003      	beq.n	8009904 <eTaskGetState+0x68>
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	429a      	cmp	r2, r3
 8009902:	d102      	bne.n	800990a <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009904:	2302      	movs	r3, #2
 8009906:	77fb      	strb	r3, [r7, #31]
 8009908:	e022      	b.n	8009950 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	4a16      	ldr	r2, [pc, #88]	@ (8009968 <eTaskGetState+0xcc>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d112      	bne.n	8009938 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10b      	bne.n	8009932 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b01      	cmp	r3, #1
 8009924:	d102      	bne.n	800992c <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8009926:	2302      	movs	r3, #2
 8009928:	77fb      	strb	r3, [r7, #31]
 800992a:	e011      	b.n	8009950 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 800992c:	2303      	movs	r3, #3
 800992e:	77fb      	strb	r3, [r7, #31]
 8009930:	e00e      	b.n	8009950 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009932:	2302      	movs	r3, #2
 8009934:	77fb      	strb	r3, [r7, #31]
 8009936:	e00b      	b.n	8009950 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4a0c      	ldr	r2, [pc, #48]	@ (800996c <eTaskGetState+0xd0>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d002      	beq.n	8009946 <eTaskGetState+0xaa>
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009946:	2304      	movs	r3, #4
 8009948:	77fb      	strb	r3, [r7, #31]
 800994a:	e001      	b.n	8009950 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800994c:	2301      	movs	r3, #1
 800994e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009950:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009952:	4618      	mov	r0, r3
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	200045a8 	.word	0x200045a8
 8009960:	20004a34 	.word	0x20004a34
 8009964:	20004a38 	.word	0x20004a38
 8009968:	20004a68 	.word	0x20004a68
 800996c:	20004a50 	.word	0x20004a50

08009970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08a      	sub	sp, #40	@ 0x28
 8009974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009976:	2300      	movs	r3, #0
 8009978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800997e:	463a      	mov	r2, r7
 8009980:	1d39      	adds	r1, r7, #4
 8009982:	f107 0308 	add.w	r3, r7, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f7fe fa5e 	bl	8007e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	9202      	str	r2, [sp, #8]
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	2300      	movs	r3, #0
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	2300      	movs	r3, #0
 800999c:	460a      	mov	r2, r1
 800999e:	4924      	ldr	r1, [pc, #144]	@ (8009a30 <vTaskStartScheduler+0xc0>)
 80099a0:	4824      	ldr	r0, [pc, #144]	@ (8009a34 <vTaskStartScheduler+0xc4>)
 80099a2:	f7ff fd95 	bl	80094d0 <xTaskCreateStatic>
 80099a6:	4603      	mov	r3, r0
 80099a8:	4a23      	ldr	r2, [pc, #140]	@ (8009a38 <vTaskStartScheduler+0xc8>)
 80099aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099ac:	4b22      	ldr	r3, [pc, #136]	@ (8009a38 <vTaskStartScheduler+0xc8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	e001      	b.n	80099be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d102      	bne.n	80099ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099c4:	f001 f862 	bl	800aa8c <xTimerCreateTimerTask>
 80099c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d118      	bne.n	8009a02 <vTaskStartScheduler+0x92>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	613b      	str	r3, [r7, #16]
}
 80099e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099e8:	4b14      	ldr	r3, [pc, #80]	@ (8009a3c <vTaskStartScheduler+0xcc>)
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099f0:	4b13      	ldr	r3, [pc, #76]	@ (8009a40 <vTaskStartScheduler+0xd0>)
 80099f2:	2201      	movs	r2, #1
 80099f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099f6:	4b13      	ldr	r3, [pc, #76]	@ (8009a44 <vTaskStartScheduler+0xd4>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099fc:	f001 fc40 	bl	800b280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a00:	e011      	b.n	8009a26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d10d      	bne.n	8009a26 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0e:	b672      	cpsid	i
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	b662      	cpsie	i
 8009a1e:	60fb      	str	r3, [r7, #12]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <vTaskStartScheduler+0xb2>
}
 8009a26:	bf00      	nop
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	0801c1d4 	.word	0x0801c1d4
 8009a34:	0800a1c9 	.word	0x0800a1c9
 8009a38:	20004aa0 	.word	0x20004aa0
 8009a3c:	20004a9c 	.word	0x20004a9c
 8009a40:	20004a88 	.word	0x20004a88
 8009a44:	20004a80 	.word	0x20004a80

08009a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a4c:	4b04      	ldr	r3, [pc, #16]	@ (8009a60 <vTaskSuspendAll+0x18>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3301      	adds	r3, #1
 8009a52:	4a03      	ldr	r2, [pc, #12]	@ (8009a60 <vTaskSuspendAll+0x18>)
 8009a54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a56:	bf00      	nop
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	20004aa4 	.word	0x20004aa4

08009a64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a72:	4b43      	ldr	r3, [pc, #268]	@ (8009b80 <xTaskResumeAll+0x11c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10d      	bne.n	8009a96 <xTaskResumeAll+0x32>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7e:	b672      	cpsid	i
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	b662      	cpsie	i
 8009a8e:	603b      	str	r3, [r7, #0]
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	e7fd      	b.n	8009a92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a96:	f001 fc71 	bl	800b37c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a9a:	4b39      	ldr	r3, [pc, #228]	@ (8009b80 <xTaskResumeAll+0x11c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	4a37      	ldr	r2, [pc, #220]	@ (8009b80 <xTaskResumeAll+0x11c>)
 8009aa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aa4:	4b36      	ldr	r3, [pc, #216]	@ (8009b80 <xTaskResumeAll+0x11c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d162      	bne.n	8009b72 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aac:	4b35      	ldr	r3, [pc, #212]	@ (8009b84 <xTaskResumeAll+0x120>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d05e      	beq.n	8009b72 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ab4:	e02f      	b.n	8009b16 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab6:	4b34      	ldr	r3, [pc, #208]	@ (8009b88 <xTaskResumeAll+0x124>)
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3318      	adds	r3, #24
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fa7e 	bl	8007fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fa79 	bl	8007fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b8c <xTaskResumeAll+0x128>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d903      	bls.n	8009ae6 <xTaskResumeAll+0x82>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b8c <xTaskResumeAll+0x128>)
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4a27      	ldr	r2, [pc, #156]	@ (8009b90 <xTaskResumeAll+0x12c>)
 8009af4:	441a      	add	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3304      	adds	r3, #4
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f7fe fa04 	bl	8007f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b06:	4b23      	ldr	r3, [pc, #140]	@ (8009b94 <xTaskResumeAll+0x130>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d302      	bcc.n	8009b16 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009b10:	4b21      	ldr	r3, [pc, #132]	@ (8009b98 <xTaskResumeAll+0x134>)
 8009b12:	2201      	movs	r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b16:	4b1c      	ldr	r3, [pc, #112]	@ (8009b88 <xTaskResumeAll+0x124>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1cb      	bne.n	8009ab6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b24:	f000 fcdc 	bl	800a4e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b28:	4b1c      	ldr	r3, [pc, #112]	@ (8009b9c <xTaskResumeAll+0x138>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d010      	beq.n	8009b56 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b34:	f000 f8e6 	bl	8009d04 <xTaskIncrementTick>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009b3e:	4b16      	ldr	r3, [pc, #88]	@ (8009b98 <xTaskResumeAll+0x134>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	3b01      	subs	r3, #1
 8009b48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1f1      	bne.n	8009b34 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009b50:	4b12      	ldr	r3, [pc, #72]	@ (8009b9c <xTaskResumeAll+0x138>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b56:	4b10      	ldr	r3, [pc, #64]	@ (8009b98 <xTaskResumeAll+0x134>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d009      	beq.n	8009b72 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b62:	4b0f      	ldr	r3, [pc, #60]	@ (8009ba0 <xTaskResumeAll+0x13c>)
 8009b64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b72:	f001 fc39 	bl	800b3e8 <vPortExitCritical>

	return xAlreadyYielded;
 8009b76:	68bb      	ldr	r3, [r7, #8]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20004aa4 	.word	0x20004aa4
 8009b84:	20004a7c 	.word	0x20004a7c
 8009b88:	20004a3c 	.word	0x20004a3c
 8009b8c:	20004a84 	.word	0x20004a84
 8009b90:	200045ac 	.word	0x200045ac
 8009b94:	200045a8 	.word	0x200045a8
 8009b98:	20004a90 	.word	0x20004a90
 8009b9c:	20004a8c 	.word	0x20004a8c
 8009ba0:	e000ed04 	.word	0xe000ed04

08009ba4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009baa:	4b05      	ldr	r3, [pc, #20]	@ (8009bc0 <xTaskGetTickCount+0x1c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bb0:	687b      	ldr	r3, [r7, #4]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	20004a80 	.word	0x20004a80

08009bc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bca:	f001 fcbf 	bl	800b54c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bd2:	4b04      	ldr	r3, [pc, #16]	@ (8009be4 <xTaskGetTickCountFromISR+0x20>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bd8:	683b      	ldr	r3, [r7, #0]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20004a80 	.word	0x20004a80

08009be8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	2338      	movs	r3, #56	@ 0x38
 8009bfa:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009bfc:	f7ff ff24 	bl	8009a48 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009c00:	4b3a      	ldr	r3, [pc, #232]	@ (8009cec <uxTaskGetSystemState+0x104>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d368      	bcc.n	8009cdc <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	4613      	mov	r3, r2
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	1898      	adds	r0, r3, r2
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4a31      	ldr	r2, [pc, #196]	@ (8009cf0 <uxTaskGetSystemState+0x108>)
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4619      	mov	r1, r3
 8009c32:	f000 fbb5 	bl	800a3a0 <prvListTasksWithinSingleList>
 8009c36:	4602      	mov	r2, r0
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e2      	bne.n	8009c0a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	4613      	mov	r3, r2
 8009c48:	00db      	lsls	r3, r3, #3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	4a27      	ldr	r2, [pc, #156]	@ (8009cf4 <uxTaskGetSystemState+0x10c>)
 8009c56:	6811      	ldr	r1, [r2, #0]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f000 fba0 	bl	800a3a0 <prvListTasksWithinSingleList>
 8009c60:	4602      	mov	r2, r0
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	4413      	add	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	461a      	mov	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	4413      	add	r3, r2
 8009c78:	4a1f      	ldr	r2, [pc, #124]	@ (8009cf8 <uxTaskGetSystemState+0x110>)
 8009c7a:	6811      	ldr	r1, [r2, #0]
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fb8e 	bl	800a3a0 <prvListTasksWithinSingleList>
 8009c84:	4602      	mov	r2, r0
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	4413      	add	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	461a      	mov	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	4917      	ldr	r1, [pc, #92]	@ (8009cfc <uxTaskGetSystemState+0x114>)
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fb7d 	bl	800a3a0 <prvListTasksWithinSingleList>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	4413      	add	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	00db      	lsls	r3, r3, #3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	2203      	movs	r2, #3
 8009cc0:	490f      	ldr	r1, [pc, #60]	@ (8009d00 <uxTaskGetSystemState+0x118>)
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fb6c 	bl	800a3a0 <prvListTasksWithinSingleList>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	4413      	add	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8009cdc:	f7ff fec2 	bl	8009a64 <xTaskResumeAll>

		return uxTask;
 8009ce0:	697b      	ldr	r3, [r7, #20]
	}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20004a7c 	.word	0x20004a7c
 8009cf0:	200045ac 	.word	0x200045ac
 8009cf4:	20004a34 	.word	0x20004a34
 8009cf8:	20004a38 	.word	0x20004a38
 8009cfc:	20004a50 	.word	0x20004a50
 8009d00:	20004a68 	.word	0x20004a68

08009d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d0e:	4b50      	ldr	r3, [pc, #320]	@ (8009e50 <xTaskIncrementTick+0x14c>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 808c 	bne.w	8009e30 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d18:	4b4e      	ldr	r3, [pc, #312]	@ (8009e54 <xTaskIncrementTick+0x150>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d20:	4a4c      	ldr	r2, [pc, #304]	@ (8009e54 <xTaskIncrementTick+0x150>)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d123      	bne.n	8009d74 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8009e58 <xTaskIncrementTick+0x154>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00d      	beq.n	8009d52 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3a:	b672      	cpsid	i
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	b662      	cpsie	i
 8009d4a:	603b      	str	r3, [r7, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	bf00      	nop
 8009d50:	e7fd      	b.n	8009d4e <xTaskIncrementTick+0x4a>
 8009d52:	4b41      	ldr	r3, [pc, #260]	@ (8009e58 <xTaskIncrementTick+0x154>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	4b40      	ldr	r3, [pc, #256]	@ (8009e5c <xTaskIncrementTick+0x158>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e58 <xTaskIncrementTick+0x154>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	4a3e      	ldr	r2, [pc, #248]	@ (8009e5c <xTaskIncrementTick+0x158>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	4b3e      	ldr	r3, [pc, #248]	@ (8009e60 <xTaskIncrementTick+0x15c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e60 <xTaskIncrementTick+0x15c>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	f000 fbb6 	bl	800a4e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d74:	4b3b      	ldr	r3, [pc, #236]	@ (8009e64 <xTaskIncrementTick+0x160>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d349      	bcc.n	8009e12 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d7e:	4b36      	ldr	r3, [pc, #216]	@ (8009e58 <xTaskIncrementTick+0x154>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d88:	4b36      	ldr	r3, [pc, #216]	@ (8009e64 <xTaskIncrementTick+0x160>)
 8009d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8e:	601a      	str	r2, [r3, #0]
					break;
 8009d90:	e03f      	b.n	8009e12 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d92:	4b31      	ldr	r3, [pc, #196]	@ (8009e58 <xTaskIncrementTick+0x154>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d203      	bcs.n	8009db2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009daa:	4a2e      	ldr	r2, [pc, #184]	@ (8009e64 <xTaskIncrementTick+0x160>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009db0:	e02f      	b.n	8009e12 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe f904 	bl	8007fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fe f8fb 	bl	8007fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd2:	4b25      	ldr	r3, [pc, #148]	@ (8009e68 <xTaskIncrementTick+0x164>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d903      	bls.n	8009de2 <xTaskIncrementTick+0xde>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dde:	4a22      	ldr	r2, [pc, #136]	@ (8009e68 <xTaskIncrementTick+0x164>)
 8009de0:	6013      	str	r3, [r2, #0]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4a1f      	ldr	r2, [pc, #124]	@ (8009e6c <xTaskIncrementTick+0x168>)
 8009df0:	441a      	add	r2, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	3304      	adds	r3, #4
 8009df6:	4619      	mov	r1, r3
 8009df8:	4610      	mov	r0, r2
 8009dfa:	f7fe f886 	bl	8007f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e02:	4b1b      	ldr	r3, [pc, #108]	@ (8009e70 <xTaskIncrementTick+0x16c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d3b8      	bcc.n	8009d7e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e10:	e7b5      	b.n	8009d7e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e12:	4b17      	ldr	r3, [pc, #92]	@ (8009e70 <xTaskIncrementTick+0x16c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e18:	4914      	ldr	r1, [pc, #80]	@ (8009e6c <xTaskIncrementTick+0x168>)
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d907      	bls.n	8009e3a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	e004      	b.n	8009e3a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e30:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <xTaskIncrementTick+0x170>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	4a0f      	ldr	r2, [pc, #60]	@ (8009e74 <xTaskIncrementTick+0x170>)
 8009e38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e78 <xTaskIncrementTick+0x174>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e46:	697b      	ldr	r3, [r7, #20]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3718      	adds	r7, #24
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20004aa4 	.word	0x20004aa4
 8009e54:	20004a80 	.word	0x20004a80
 8009e58:	20004a34 	.word	0x20004a34
 8009e5c:	20004a38 	.word	0x20004a38
 8009e60:	20004a94 	.word	0x20004a94
 8009e64:	20004a9c 	.word	0x20004a9c
 8009e68:	20004a84 	.word	0x20004a84
 8009e6c:	200045ac 	.word	0x200045ac
 8009e70:	200045a8 	.word	0x200045a8
 8009e74:	20004a8c 	.word	0x20004a8c
 8009e78:	20004a90 	.word	0x20004a90

08009e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e82:	4b29      	ldr	r3, [pc, #164]	@ (8009f28 <vTaskSwitchContext+0xac>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e8a:	4b28      	ldr	r3, [pc, #160]	@ (8009f2c <vTaskSwitchContext+0xb0>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e90:	e044      	b.n	8009f1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009e92:	4b26      	ldr	r3, [pc, #152]	@ (8009f2c <vTaskSwitchContext+0xb0>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e98:	4b25      	ldr	r3, [pc, #148]	@ (8009f30 <vTaskSwitchContext+0xb4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e013      	b.n	8009ec8 <vTaskSwitchContext+0x4c>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <vTaskSwitchContext+0x46>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	b672      	cpsid	i
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	b662      	cpsie	i
 8009eba:	607b      	str	r3, [r7, #4]
}
 8009ebc:	bf00      	nop
 8009ebe:	bf00      	nop
 8009ec0:	e7fd      	b.n	8009ebe <vTaskSwitchContext+0x42>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	491a      	ldr	r1, [pc, #104]	@ (8009f34 <vTaskSwitchContext+0xb8>)
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0e1      	beq.n	8009ea0 <vTaskSwitchContext+0x24>
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4a13      	ldr	r2, [pc, #76]	@ (8009f34 <vTaskSwitchContext+0xb8>)
 8009ee8:	4413      	add	r3, r2
 8009eea:	60bb      	str	r3, [r7, #8]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	605a      	str	r2, [r3, #4]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	3308      	adds	r3, #8
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d104      	bne.n	8009f0c <vTaskSwitchContext+0x90>
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	605a      	str	r2, [r3, #4]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	4a09      	ldr	r2, [pc, #36]	@ (8009f38 <vTaskSwitchContext+0xbc>)
 8009f14:	6013      	str	r3, [r2, #0]
 8009f16:	4a06      	ldr	r2, [pc, #24]	@ (8009f30 <vTaskSwitchContext+0xb4>)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6013      	str	r3, [r2, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	20004aa4 	.word	0x20004aa4
 8009f2c:	20004a90 	.word	0x20004a90
 8009f30:	20004a84 	.word	0x20004a84
 8009f34:	200045ac 	.word	0x200045ac
 8009f38:	200045a8 	.word	0x200045a8

08009f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	b672      	cpsid	i
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	b662      	cpsie	i
 8009f60:	60fb      	str	r3, [r7, #12]
}
 8009f62:	bf00      	nop
 8009f64:	bf00      	nop
 8009f66:	e7fd      	b.n	8009f64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f68:	4b07      	ldr	r3, [pc, #28]	@ (8009f88 <vTaskPlaceOnEventList+0x4c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	3318      	adds	r3, #24
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f7fd ffee 	bl	8007f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f76:	2101      	movs	r1, #1
 8009f78:	6838      	ldr	r0, [r7, #0]
 8009f7a:	f000 fd33 	bl	800a9e4 <prvAddCurrentTaskToDelayedList>
}
 8009f7e:	bf00      	nop
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	200045a8 	.word	0x200045a8

08009f8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10d      	bne.n	8009fba <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	b672      	cpsid	i
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	b662      	cpsie	i
 8009fb2:	617b      	str	r3, [r7, #20]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fba:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe4 <vTaskPlaceOnEventListRestricted+0x58>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3318      	adds	r3, #24
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68f8      	ldr	r0, [r7, #12]
 8009fc4:	f7fd ffa1 	bl	8007f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d002      	beq.n	8009fd4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fd4:	6879      	ldr	r1, [r7, #4]
 8009fd6:	68b8      	ldr	r0, [r7, #8]
 8009fd8:	f000 fd04 	bl	800a9e4 <prvAddCurrentTaskToDelayedList>
	}
 8009fdc:	bf00      	nop
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	200045a8 	.word	0x200045a8

08009fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10d      	bne.n	800a01a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	b672      	cpsid	i
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	b662      	cpsie	i
 800a012:	60fb      	str	r3, [r7, #12]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	3318      	adds	r3, #24
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd ffd0 	bl	8007fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a024:	4b1d      	ldr	r3, [pc, #116]	@ (800a09c <xTaskRemoveFromEventList+0xb4>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d11d      	bne.n	800a068 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	3304      	adds	r3, #4
 800a030:	4618      	mov	r0, r3
 800a032:	f7fd ffc7 	bl	8007fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03a:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <xTaskRemoveFromEventList+0xb8>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	429a      	cmp	r2, r3
 800a040:	d903      	bls.n	800a04a <xTaskRemoveFromEventList+0x62>
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a046:	4a16      	ldr	r2, [pc, #88]	@ (800a0a0 <xTaskRemoveFromEventList+0xb8>)
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4a13      	ldr	r2, [pc, #76]	@ (800a0a4 <xTaskRemoveFromEventList+0xbc>)
 800a058:	441a      	add	r2, r3
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	3304      	adds	r3, #4
 800a05e:	4619      	mov	r1, r3
 800a060:	4610      	mov	r0, r2
 800a062:	f7fd ff52 	bl	8007f0a <vListInsertEnd>
 800a066:	e005      	b.n	800a074 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	3318      	adds	r3, #24
 800a06c:	4619      	mov	r1, r3
 800a06e:	480e      	ldr	r0, [pc, #56]	@ (800a0a8 <xTaskRemoveFromEventList+0xc0>)
 800a070:	f7fd ff4b 	bl	8007f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a078:	4b0c      	ldr	r3, [pc, #48]	@ (800a0ac <xTaskRemoveFromEventList+0xc4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d905      	bls.n	800a08e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a082:	2301      	movs	r3, #1
 800a084:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a086:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b0 <xTaskRemoveFromEventList+0xc8>)
 800a088:	2201      	movs	r2, #1
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	e001      	b.n	800a092 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a092:	697b      	ldr	r3, [r7, #20]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20004aa4 	.word	0x20004aa4
 800a0a0:	20004a84 	.word	0x20004a84
 800a0a4:	200045ac 	.word	0x200045ac
 800a0a8:	20004a3c 	.word	0x20004a3c
 800a0ac:	200045a8 	.word	0x200045a8
 800a0b0:	20004a90 	.word	0x20004a90

0800a0b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0bc:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <vTaskInternalSetTimeOutState+0x24>)
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <vTaskInternalSetTimeOutState+0x28>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	605a      	str	r2, [r3, #4]
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr
 800a0d8:	20004a94 	.word	0x20004a94
 800a0dc:	20004a80 	.word	0x20004a80

0800a0e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b088      	sub	sp, #32
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10d      	bne.n	800a10c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	b672      	cpsid	i
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	b662      	cpsie	i
 800a104:	613b      	str	r3, [r7, #16]
}
 800a106:	bf00      	nop
 800a108:	bf00      	nop
 800a10a:	e7fd      	b.n	800a108 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10d      	bne.n	800a12e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a116:	b672      	cpsid	i
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	b662      	cpsie	i
 800a126:	60fb      	str	r3, [r7, #12]
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	e7fd      	b.n	800a12a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800a12e:	f001 f925 	bl	800b37c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a132:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a8 <xTaskCheckForTimeOut+0xc8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14a:	d102      	bne.n	800a152 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a14c:	2300      	movs	r3, #0
 800a14e:	61fb      	str	r3, [r7, #28]
 800a150:	e023      	b.n	800a19a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	4b15      	ldr	r3, [pc, #84]	@ (800a1ac <xTaskCheckForTimeOut+0xcc>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d007      	beq.n	800a16e <xTaskCheckForTimeOut+0x8e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	429a      	cmp	r2, r3
 800a166:	d302      	bcc.n	800a16e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a168:	2301      	movs	r3, #1
 800a16a:	61fb      	str	r3, [r7, #28]
 800a16c:	e015      	b.n	800a19a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	429a      	cmp	r2, r3
 800a176:	d20b      	bcs.n	800a190 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ff95 	bl	800a0b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	e004      	b.n	800a19a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a196:	2301      	movs	r3, #1
 800a198:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a19a:	f001 f925 	bl	800b3e8 <vPortExitCritical>

	return xReturn;
 800a19e:	69fb      	ldr	r3, [r7, #28]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	20004a80 	.word	0x20004a80
 800a1ac:	20004a94 	.word	0x20004a94

0800a1b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1b4:	4b03      	ldr	r3, [pc, #12]	@ (800a1c4 <vTaskMissedYield+0x14>)
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]
}
 800a1ba:	bf00      	nop
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	20004a90 	.word	0x20004a90

0800a1c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1d0:	f000 f852 	bl	800a278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1d4:	4b06      	ldr	r3, [pc, #24]	@ (800a1f0 <prvIdleTask+0x28>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d9f9      	bls.n	800a1d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <prvIdleTask+0x2c>)
 800a1de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1ec:	e7f0      	b.n	800a1d0 <prvIdleTask+0x8>
 800a1ee:	bf00      	nop
 800a1f0:	200045ac 	.word	0x200045ac
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1fe:	2300      	movs	r3, #0
 800a200:	607b      	str	r3, [r7, #4]
 800a202:	e00c      	b.n	800a21e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	4413      	add	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4a12      	ldr	r2, [pc, #72]	@ (800a258 <prvInitialiseTaskLists+0x60>)
 800a210:	4413      	add	r3, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fd fe4c 	bl	8007eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3301      	adds	r3, #1
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b37      	cmp	r3, #55	@ 0x37
 800a222:	d9ef      	bls.n	800a204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a224:	480d      	ldr	r0, [pc, #52]	@ (800a25c <prvInitialiseTaskLists+0x64>)
 800a226:	f7fd fe43 	bl	8007eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a22a:	480d      	ldr	r0, [pc, #52]	@ (800a260 <prvInitialiseTaskLists+0x68>)
 800a22c:	f7fd fe40 	bl	8007eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a230:	480c      	ldr	r0, [pc, #48]	@ (800a264 <prvInitialiseTaskLists+0x6c>)
 800a232:	f7fd fe3d 	bl	8007eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a236:	480c      	ldr	r0, [pc, #48]	@ (800a268 <prvInitialiseTaskLists+0x70>)
 800a238:	f7fd fe3a 	bl	8007eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a23c:	480b      	ldr	r0, [pc, #44]	@ (800a26c <prvInitialiseTaskLists+0x74>)
 800a23e:	f7fd fe37 	bl	8007eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a242:	4b0b      	ldr	r3, [pc, #44]	@ (800a270 <prvInitialiseTaskLists+0x78>)
 800a244:	4a05      	ldr	r2, [pc, #20]	@ (800a25c <prvInitialiseTaskLists+0x64>)
 800a246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a248:	4b0a      	ldr	r3, [pc, #40]	@ (800a274 <prvInitialiseTaskLists+0x7c>)
 800a24a:	4a05      	ldr	r2, [pc, #20]	@ (800a260 <prvInitialiseTaskLists+0x68>)
 800a24c:	601a      	str	r2, [r3, #0]
}
 800a24e:	bf00      	nop
 800a250:	3708      	adds	r7, #8
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	200045ac 	.word	0x200045ac
 800a25c:	20004a0c 	.word	0x20004a0c
 800a260:	20004a20 	.word	0x20004a20
 800a264:	20004a3c 	.word	0x20004a3c
 800a268:	20004a50 	.word	0x20004a50
 800a26c:	20004a68 	.word	0x20004a68
 800a270:	20004a34 	.word	0x20004a34
 800a274:	20004a38 	.word	0x20004a38

0800a278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a27e:	e019      	b.n	800a2b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a280:	f001 f87c 	bl	800b37c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a284:	4b10      	ldr	r3, [pc, #64]	@ (800a2c8 <prvCheckTasksWaitingTermination+0x50>)
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	4618      	mov	r0, r3
 800a292:	f7fd fe97 	bl	8007fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a296:	4b0d      	ldr	r3, [pc, #52]	@ (800a2cc <prvCheckTasksWaitingTermination+0x54>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	4a0b      	ldr	r2, [pc, #44]	@ (800a2cc <prvCheckTasksWaitingTermination+0x54>)
 800a29e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d0 <prvCheckTasksWaitingTermination+0x58>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a2d0 <prvCheckTasksWaitingTermination+0x58>)
 800a2a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2aa:	f001 f89d 	bl	800b3e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f8e4 	bl	800a47c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2b4:	4b06      	ldr	r3, [pc, #24]	@ (800a2d0 <prvCheckTasksWaitingTermination+0x58>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e1      	bne.n	800a280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20004a50 	.word	0x20004a50
 800a2cc:	20004a7c 	.word	0x20004a7c
 800a2d0:	20004a64 	.word	0x20004a64

0800a2d4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <vTaskGetInfo+0x1a>
 800a2e8:	4b2c      	ldr	r3, [pc, #176]	@ (800a39c <vTaskGetInfo+0xc8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	e000      	b.n	800a2f0 <vTaskGetInfo+0x1c>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2200      	movs	r2, #0
 800a326:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	2b05      	cmp	r3, #5
 800a32c:	d01a      	beq.n	800a364 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a32e:	4b1b      	ldr	r3, [pc, #108]	@ (800a39c <vTaskGetInfo+0xc8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	429a      	cmp	r2, r3
 800a336:	d103      	bne.n	800a340 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2200      	movs	r2, #0
 800a33c:	731a      	strb	r2, [r3, #12]
 800a33e:	e018      	b.n	800a372 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	2b03      	cmp	r3, #3
 800a34a:	d112      	bne.n	800a372 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a34c:	f7ff fb7c 	bl	8009a48 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2202      	movs	r2, #2
 800a35c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a35e:	f7ff fb81 	bl	8009a64 <xTaskResumeAll>
 800a362:	e006      	b.n	800a372 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a364:	6978      	ldr	r0, [r7, #20]
 800a366:	f7ff fa99 	bl	800989c <eTaskGetState>
 800a36a:	4603      	mov	r3, r0
 800a36c:	461a      	mov	r2, r3
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d009      	beq.n	800a38c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 f861 	bl	800a444 <prvTaskCheckFreeStackSpace>
 800a382:	4603      	mov	r3, r0
 800a384:	461a      	mov	r2, r3
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a38a:	e002      	b.n	800a392 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2200      	movs	r2, #0
 800a390:	841a      	strh	r2, [r3, #32]
	}
 800a392:	bf00      	nop
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200045a8 	.word	0x200045a8

0800a3a0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	@ 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d03f      	beq.n	800a43a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	623b      	str	r3, [r7, #32]
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	605a      	str	r2, [r3, #4]
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	3308      	adds	r3, #8
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d104      	bne.n	800a3de <prvListTasksWithinSingleList+0x3e>
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d104      	bne.n	800a40a <prvListTasksWithinSingleList+0x6a>
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a414:	4613      	mov	r3, r2
 800a416:	00db      	lsls	r3, r3, #3
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	461a      	mov	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	1899      	adds	r1, r3, r2
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	2201      	movs	r2, #1
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff54 	bl	800a2d4 <vTaskGetInfo>
				uxTask++;
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	3301      	adds	r3, #1
 800a430:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	429a      	cmp	r2, r3
 800a438:	d1d5      	bne.n	800a3e6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3728      	adds	r7, #40	@ 0x28
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a450:	e005      	b.n	800a45e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3301      	adds	r3, #1
 800a456:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	2ba5      	cmp	r3, #165	@ 0xa5
 800a464:	d0f5      	beq.n	800a452 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	089b      	lsrs	r3, r3, #2
 800a46a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	b29b      	uxth	r3, r3
	}
 800a470:	4618      	mov	r0, r3
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d108      	bne.n	800a4a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a492:	4618      	mov	r0, r3
 800a494:	f001 f96e 	bl	800b774 <vPortFree>
				vPortFree( pxTCB );
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f96b 	bl	800b774 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a49e:	e01b      	b.n	800a4d8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d103      	bne.n	800a4b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 f962 	bl	800b774 <vPortFree>
	}
 800a4b0:	e012      	b.n	800a4d8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d00d      	beq.n	800a4d8 <prvDeleteTCB+0x5c>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	b672      	cpsid	i
 800a4c2:	f383 8811 	msr	BASEPRI, r3
 800a4c6:	f3bf 8f6f 	isb	sy
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	b662      	cpsie	i
 800a4d0:	60fb      	str	r3, [r7, #12]
}
 800a4d2:	bf00      	nop
 800a4d4:	bf00      	nop
 800a4d6:	e7fd      	b.n	800a4d4 <prvDeleteTCB+0x58>
	}
 800a4d8:	bf00      	nop
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a518 <prvResetNextTaskUnblockTime+0x38>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <prvResetNextTaskUnblockTime+0x3c>)
 800a4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4f8:	e008      	b.n	800a50c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fa:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <prvResetNextTaskUnblockTime+0x38>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	4a04      	ldr	r2, [pc, #16]	@ (800a51c <prvResetNextTaskUnblockTime+0x3c>)
 800a50a:	6013      	str	r3, [r2, #0]
}
 800a50c:	bf00      	nop
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	20004a34 	.word	0x20004a34
 800a51c:	20004a9c 	.word	0x20004a9c

0800a520 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a526:	4b05      	ldr	r3, [pc, #20]	@ (800a53c <xTaskGetCurrentTaskHandle+0x1c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a52c:	687b      	ldr	r3, [r7, #4]
	}
 800a52e:	4618      	mov	r0, r3
 800a530:	370c      	adds	r7, #12
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	200045a8 	.word	0x200045a8

0800a540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a546:	4b0b      	ldr	r3, [pc, #44]	@ (800a574 <xTaskGetSchedulerState+0x34>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a54e:	2301      	movs	r3, #1
 800a550:	607b      	str	r3, [r7, #4]
 800a552:	e008      	b.n	800a566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a554:	4b08      	ldr	r3, [pc, #32]	@ (800a578 <xTaskGetSchedulerState+0x38>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a55c:	2302      	movs	r3, #2
 800a55e:	607b      	str	r3, [r7, #4]
 800a560:	e001      	b.n	800a566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a562:	2300      	movs	r3, #0
 800a564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a566:	687b      	ldr	r3, [r7, #4]
	}
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	20004a88 	.word	0x20004a88
 800a578:	20004aa4 	.word	0x20004aa4

0800a57c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d051      	beq.n	800a636 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a596:	4b2a      	ldr	r3, [pc, #168]	@ (800a640 <xTaskPriorityInherit+0xc4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d241      	bcs.n	800a624 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	db06      	blt.n	800a5b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a8:	4b25      	ldr	r3, [pc, #148]	@ (800a640 <xTaskPriorityInherit+0xc4>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6959      	ldr	r1, [r3, #20]
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5be:	4613      	mov	r3, r2
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4a1f      	ldr	r2, [pc, #124]	@ (800a644 <xTaskPriorityInherit+0xc8>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	d122      	bne.n	800a614 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fd fcf6 	bl	8007fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5d8:	4b19      	ldr	r3, [pc, #100]	@ (800a640 <xTaskPriorityInherit+0xc4>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e6:	4b18      	ldr	r3, [pc, #96]	@ (800a648 <xTaskPriorityInherit+0xcc>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d903      	bls.n	800a5f6 <xTaskPriorityInherit+0x7a>
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f2:	4a15      	ldr	r2, [pc, #84]	@ (800a648 <xTaskPriorityInherit+0xcc>)
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4a10      	ldr	r2, [pc, #64]	@ (800a644 <xTaskPriorityInherit+0xc8>)
 800a604:	441a      	add	r2, r3
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	3304      	adds	r3, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7fd fc7c 	bl	8007f0a <vListInsertEnd>
 800a612:	e004      	b.n	800a61e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a614:	4b0a      	ldr	r3, [pc, #40]	@ (800a640 <xTaskPriorityInherit+0xc4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a61e:	2301      	movs	r3, #1
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	e008      	b.n	800a636 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a628:	4b05      	ldr	r3, [pc, #20]	@ (800a640 <xTaskPriorityInherit+0xc4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62e:	429a      	cmp	r2, r3
 800a630:	d201      	bcs.n	800a636 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a632:	2301      	movs	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a636:	68fb      	ldr	r3, [r7, #12]
	}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	200045a8 	.word	0x200045a8
 800a644:	200045ac 	.word	0x200045ac
 800a648:	20004a84 	.word	0x20004a84

0800a64c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d05c      	beq.n	800a71c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a662:	4b31      	ldr	r3, [pc, #196]	@ (800a728 <xTaskPriorityDisinherit+0xdc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d00d      	beq.n	800a688 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a670:	b672      	cpsid	i
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	b662      	cpsie	i
 800a680:	60fb      	str	r3, [r7, #12]
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10d      	bne.n	800a6ac <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	b672      	cpsid	i
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	b662      	cpsie	i
 800a6a4:	60bb      	str	r3, [r7, #8]
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6b0:	1e5a      	subs	r2, r3, #1
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d02c      	beq.n	800a71c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d128      	bne.n	800a71c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fd fc78 	bl	8007fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a72c <xTaskPriorityDisinherit+0xe0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d903      	bls.n	800a6fc <xTaskPriorityDisinherit+0xb0>
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a72c <xTaskPriorityDisinherit+0xe0>)
 800a6fa:	6013      	str	r3, [r2, #0]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a700:	4613      	mov	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4413      	add	r3, r2
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	4a09      	ldr	r2, [pc, #36]	@ (800a730 <xTaskPriorityDisinherit+0xe4>)
 800a70a:	441a      	add	r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	3304      	adds	r3, #4
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7fd fbf9 	bl	8007f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a71c:	697b      	ldr	r3, [r7, #20]
	}
 800a71e:	4618      	mov	r0, r3
 800a720:	3718      	adds	r7, #24
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	200045a8 	.word	0x200045a8
 800a72c:	20004a84 	.word	0x20004a84
 800a730:	200045ac 	.word	0x200045ac

0800a734 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a742:	2301      	movs	r3, #1
 800a744:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d070      	beq.n	800a82e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10d      	bne.n	800a770 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a758:	b672      	cpsid	i
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	b662      	cpsie	i
 800a768:	60fb      	str	r3, [r7, #12]
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d902      	bls.n	800a780 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	e002      	b.n	800a786 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a784:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78a:	69fa      	ldr	r2, [r7, #28]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d04e      	beq.n	800a82e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	429a      	cmp	r2, r3
 800a798:	d149      	bne.n	800a82e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a79a:	4b27      	ldr	r3, [pc, #156]	@ (800a838 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69ba      	ldr	r2, [r7, #24]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d10d      	bne.n	800a7c0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	b672      	cpsid	i
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	b662      	cpsie	i
 800a7b8:	60bb      	str	r3, [r7, #8]
}
 800a7ba:	bf00      	nop
 800a7bc:	bf00      	nop
 800a7be:	e7fd      	b.n	800a7bc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	69fa      	ldr	r2, [r7, #28]
 800a7ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	db04      	blt.n	800a7de <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	6959      	ldr	r1, [r3, #20]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4413      	add	r3, r2
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	4a13      	ldr	r2, [pc, #76]	@ (800a83c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d11c      	bne.n	800a82e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fd fbe3 	bl	8007fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a802:	4b0f      	ldr	r3, [pc, #60]	@ (800a840 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	d903      	bls.n	800a812 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80e:	4a0c      	ldr	r2, [pc, #48]	@ (800a840 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a810:	6013      	str	r3, [r2, #0]
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4a07      	ldr	r2, [pc, #28]	@ (800a83c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a820:	441a      	add	r2, r3
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	3304      	adds	r3, #4
 800a826:	4619      	mov	r1, r3
 800a828:	4610      	mov	r0, r2
 800a82a:	f7fd fb6e 	bl	8007f0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a82e:	bf00      	nop
 800a830:	3720      	adds	r7, #32
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	200045a8 	.word	0x200045a8
 800a83c:	200045ac 	.word	0x200045ac
 800a840:	20004a84 	.word	0x20004a84

0800a844 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f00f fac6 	bl	8019de2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7f5 fd42 	bl	80002e0 <strlen>
 800a85c:	60f8      	str	r0, [r7, #12]
 800a85e:	e007      	b.n	800a870 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4413      	add	r3, r2
 800a866:	2220      	movs	r2, #32
 800a868:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2b0e      	cmp	r3, #14
 800a874:	d9f4      	bls.n	800a860 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	4413      	add	r3, r2
	}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b089      	sub	sp, #36	@ 0x24
 800a894:	af02      	add	r7, sp, #8
 800a896:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800a89e:	4b45      	ldr	r3, [pc, #276]	@ (800a9b4 <vTaskList+0x124>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a8a4:	4b43      	ldr	r3, [pc, #268]	@ (800a9b4 <vTaskList+0x124>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	4413      	add	r3, r2
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 fe91 	bl	800b5d8 <pvPortMalloc>
 800a8b6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d076      	beq.n	800a9ac <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800a8be:	2200      	movs	r2, #0
 800a8c0:	68f9      	ldr	r1, [r7, #12]
 800a8c2:	68b8      	ldr	r0, [r7, #8]
 800a8c4:	f7ff f990 	bl	8009be8 <uxTaskGetSystemState>
 800a8c8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e066      	b.n	800a99e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	00db      	lsls	r3, r3, #3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	4413      	add	r3, r2
 800a8e0:	7b1b      	ldrb	r3, [r3, #12]
 800a8e2:	2b04      	cmp	r3, #4
 800a8e4:	d81b      	bhi.n	800a91e <vTaskList+0x8e>
 800a8e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ec <vTaskList+0x5c>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a901 	.word	0x0800a901
 800a8f0:	0800a907 	.word	0x0800a907
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a913 	.word	0x0800a913
 800a8fc:	0800a919 	.word	0x0800a919
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800a900:	2358      	movs	r3, #88	@ 0x58
 800a902:	74fb      	strb	r3, [r7, #19]
										break;
 800a904:	e00e      	b.n	800a924 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800a906:	2352      	movs	r3, #82	@ 0x52
 800a908:	74fb      	strb	r3, [r7, #19]
										break;
 800a90a:	e00b      	b.n	800a924 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800a90c:	2342      	movs	r3, #66	@ 0x42
 800a90e:	74fb      	strb	r3, [r7, #19]
										break;
 800a910:	e008      	b.n	800a924 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800a912:	2353      	movs	r3, #83	@ 0x53
 800a914:	74fb      	strb	r3, [r7, #19]
										break;
 800a916:	e005      	b.n	800a924 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800a918:	2344      	movs	r3, #68	@ 0x44
 800a91a:	74fb      	strb	r3, [r7, #19]
										break;
 800a91c:	e002      	b.n	800a924 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800a91e:	2300      	movs	r3, #0
 800a920:	74fb      	strb	r3, [r7, #19]
										break;
 800a922:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4613      	mov	r3, r2
 800a928:	00db      	lsls	r3, r3, #3
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	461a      	mov	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4413      	add	r3, r2
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff ff83 	bl	800a844 <prvWriteNameToBuffer>
 800a93e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a940:	7cf9      	ldrb	r1, [r7, #19]
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4613      	mov	r3, r2
 800a946:	00db      	lsls	r3, r3, #3
 800a948:	4413      	add	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	461a      	mov	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4413      	add	r3, r2
 800a952:	6918      	ldr	r0, [r3, #16]
 800a954:	697a      	ldr	r2, [r7, #20]
 800a956:	4613      	mov	r3, r2
 800a958:	00db      	lsls	r3, r3, #3
 800a95a:	4413      	add	r3, r2
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	461a      	mov	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4413      	add	r3, r2
 800a964:	8c1b      	ldrh	r3, [r3, #32]
 800a966:	461c      	mov	r4, r3
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4613      	mov	r3, r2
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	461a      	mov	r2, r3
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	4413      	add	r3, r2
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	9301      	str	r3, [sp, #4]
 800a97c:	9400      	str	r4, [sp, #0]
 800a97e:	4603      	mov	r3, r0
 800a980:	460a      	mov	r2, r1
 800a982:	490d      	ldr	r1, [pc, #52]	@ (800a9b8 <vTaskList+0x128>)
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f00f f859 	bl	8019a3c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7f5 fca8 	bl	80002e0 <strlen>
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4413      	add	r3, r2
 800a996:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	3301      	adds	r3, #1
 800a99c:	617b      	str	r3, [r7, #20]
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d394      	bcc.n	800a8d0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800a9a6:	68b8      	ldr	r0, [r7, #8]
 800a9a8:	f000 fee4 	bl	800b774 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9ac:	bf00      	nop
 800a9ae:	371c      	adds	r7, #28
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}
 800a9b4:	20004a7c 	.word	0x20004a7c
 800a9b8:	0801c1dc 	.word	0x0801c1dc

0800a9bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a9c0:	4b07      	ldr	r3, [pc, #28]	@ (800a9e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a9c8:	4b05      	ldr	r3, [pc, #20]	@ (800a9e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9ce:	3201      	adds	r2, #1
 800a9d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a9d2:	4b03      	ldr	r3, [pc, #12]	@ (800a9e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
	}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	200045a8 	.word	0x200045a8

0800a9e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9ee:	4b21      	ldr	r3, [pc, #132]	@ (800aa74 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9f4:	4b20      	ldr	r3, [pc, #128]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fd fae2 	bl	8007fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d10a      	bne.n	800aa1e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d007      	beq.n	800aa1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa0e:	4b1a      	ldr	r3, [pc, #104]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4619      	mov	r1, r3
 800aa16:	4819      	ldr	r0, [pc, #100]	@ (800aa7c <prvAddCurrentTaskToDelayedList+0x98>)
 800aa18:	f7fd fa77 	bl	8007f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa1c:	e026      	b.n	800aa6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4413      	add	r3, r2
 800aa24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa26:	4b14      	ldr	r3, [pc, #80]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d209      	bcs.n	800aa4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa36:	4b12      	ldr	r3, [pc, #72]	@ (800aa80 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fd fa85 	bl	8007f52 <vListInsert>
}
 800aa48:	e010      	b.n	800aa6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa84 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3304      	adds	r3, #4
 800aa54:	4619      	mov	r1, r3
 800aa56:	4610      	mov	r0, r2
 800aa58:	f7fd fa7b 	bl	8007f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa5c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d202      	bcs.n	800aa6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa66:	4a08      	ldr	r2, [pc, #32]	@ (800aa88 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	6013      	str	r3, [r2, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20004a80 	.word	0x20004a80
 800aa78:	200045a8 	.word	0x200045a8
 800aa7c:	20004a68 	.word	0x20004a68
 800aa80:	20004a38 	.word	0x20004a38
 800aa84:	20004a34 	.word	0x20004a34
 800aa88:	20004a9c 	.word	0x20004a9c

0800aa8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08a      	sub	sp, #40	@ 0x28
 800aa90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa96:	f000 fb21 	bl	800b0dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ab14 <xTimerCreateTimerTask+0x88>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d021      	beq.n	800aae6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aaaa:	1d3a      	adds	r2, r7, #4
 800aaac:	f107 0108 	add.w	r1, r7, #8
 800aab0:	f107 030c 	add.w	r3, r7, #12
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fd f9e1 	bl	8007e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aaba:	6879      	ldr	r1, [r7, #4]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	9202      	str	r2, [sp, #8]
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	2302      	movs	r3, #2
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	2300      	movs	r3, #0
 800aaca:	460a      	mov	r2, r1
 800aacc:	4912      	ldr	r1, [pc, #72]	@ (800ab18 <xTimerCreateTimerTask+0x8c>)
 800aace:	4813      	ldr	r0, [pc, #76]	@ (800ab1c <xTimerCreateTimerTask+0x90>)
 800aad0:	f7fe fcfe 	bl	80094d0 <xTaskCreateStatic>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4a12      	ldr	r2, [pc, #72]	@ (800ab20 <xTimerCreateTimerTask+0x94>)
 800aad8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aada:	4b11      	ldr	r3, [pc, #68]	@ (800ab20 <xTimerCreateTimerTask+0x94>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aae2:	2301      	movs	r3, #1
 800aae4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10d      	bne.n	800ab08 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf0:	b672      	cpsid	i
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	b662      	cpsie	i
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ab08:	697b      	ldr	r3, [r7, #20]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20004ad8 	.word	0x20004ad8
 800ab18:	0801c1ec 	.word	0x0801c1ec
 800ab1c:	0800ac65 	.word	0x0800ac65
 800ab20:	20004adc 	.word	0x20004adc

0800ab24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b08a      	sub	sp, #40	@ 0x28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10d      	bne.n	800ab58 <xTimerGenericCommand+0x34>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	b672      	cpsid	i
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	b662      	cpsie	i
 800ab50:	623b      	str	r3, [r7, #32]
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab58:	4b19      	ldr	r3, [pc, #100]	@ (800abc0 <xTimerGenericCommand+0x9c>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d02a      	beq.n	800abb6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	dc18      	bgt.n	800aba4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab72:	f7ff fce5 	bl	800a540 <xTaskGetSchedulerState>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d109      	bne.n	800ab90 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab7c:	4b10      	ldr	r3, [pc, #64]	@ (800abc0 <xTimerGenericCommand+0x9c>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	f107 0110 	add.w	r1, r7, #16
 800ab84:	2300      	movs	r3, #0
 800ab86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab88:	f7fd fcd2 	bl	8008530 <xQueueGenericSend>
 800ab8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab8e:	e012      	b.n	800abb6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab90:	4b0b      	ldr	r3, [pc, #44]	@ (800abc0 <xTimerGenericCommand+0x9c>)
 800ab92:	6818      	ldr	r0, [r3, #0]
 800ab94:	f107 0110 	add.w	r1, r7, #16
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f7fd fcc8 	bl	8008530 <xQueueGenericSend>
 800aba0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aba2:	e008      	b.n	800abb6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <xTimerGenericCommand+0x9c>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	f107 0110 	add.w	r1, r7, #16
 800abac:	2300      	movs	r3, #0
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	f7fd fdc8 	bl	8008744 <xQueueGenericSendFromISR>
 800abb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800abb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3728      	adds	r7, #40	@ 0x28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	20004ad8 	.word	0x20004ad8

0800abc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af02      	add	r7, sp, #8
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abce:	4b24      	ldr	r3, [pc, #144]	@ (800ac60 <prvProcessExpiredTimer+0x9c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	3304      	adds	r3, #4
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fd f9f1 	bl	8007fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d025      	beq.n	800ac3c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	699a      	ldr	r2, [r3, #24]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	18d1      	adds	r1, r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	6978      	ldr	r0, [r7, #20]
 800abfe:	f000 f8d7 	bl	800adb0 <prvInsertTimerInActiveList>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d022      	beq.n	800ac4e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	2100      	movs	r1, #0
 800ac12:	6978      	ldr	r0, [r7, #20]
 800ac14:	f7ff ff86 	bl	800ab24 <xTimerGenericCommand>
 800ac18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d116      	bne.n	800ac4e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac24:	b672      	cpsid	i
 800ac26:	f383 8811 	msr	BASEPRI, r3
 800ac2a:	f3bf 8f6f 	isb	sy
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	b662      	cpsie	i
 800ac34:	60fb      	str	r3, [r7, #12]
}
 800ac36:	bf00      	nop
 800ac38:	bf00      	nop
 800ac3a:	e7fd      	b.n	800ac38 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	6978      	ldr	r0, [r7, #20]
 800ac54:	4798      	blx	r3
}
 800ac56:	bf00      	nop
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	20004ad0 	.word	0x20004ad0

0800ac64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4618      	mov	r0, r3
 800ac72:	f000 f859 	bl	800ad28 <prvGetNextExpireTime>
 800ac76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f805 	bl	800ac8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac82:	f000 f8d7 	bl	800ae34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac86:	bf00      	nop
 800ac88:	e7f0      	b.n	800ac6c <prvTimerTask+0x8>
	...

0800ac8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac96:	f7fe fed7 	bl	8009a48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f866 	bl	800ad70 <prvSampleTimeNow>
 800aca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d130      	bne.n	800ad0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <prvProcessTimerOrBlockTask+0x3c>
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d806      	bhi.n	800acc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acba:	f7fe fed3 	bl	8009a64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff ff7f 	bl	800abc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acc6:	e024      	b.n	800ad12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d008      	beq.n	800ace0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acce:	4b13      	ldr	r3, [pc, #76]	@ (800ad1c <prvProcessTimerOrBlockTask+0x90>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <prvProcessTimerOrBlockTask+0x50>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <prvProcessTimerOrBlockTask+0x52>
 800acdc:	2300      	movs	r3, #0
 800acde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ace0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad20 <prvProcessTimerOrBlockTask+0x94>)
 800ace2:	6818      	ldr	r0, [r3, #0]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	4619      	mov	r1, r3
 800acee:	f7fe fbbb 	bl	8009468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acf2:	f7fe feb7 	bl	8009a64 <xTaskResumeAll>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acfc:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <prvProcessTimerOrBlockTask+0x98>)
 800acfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	f3bf 8f6f 	isb	sy
}
 800ad0c:	e001      	b.n	800ad12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad0e:	f7fe fea9 	bl	8009a64 <xTaskResumeAll>
}
 800ad12:	bf00      	nop
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20004ad4 	.word	0x20004ad4
 800ad20:	20004ad8 	.word	0x20004ad8
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad30:	4b0e      	ldr	r3, [pc, #56]	@ (800ad6c <prvGetNextExpireTime+0x44>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d101      	bne.n	800ad3e <prvGetNextExpireTime+0x16>
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	e000      	b.n	800ad40 <prvGetNextExpireTime+0x18>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad4c:	4b07      	ldr	r3, [pc, #28]	@ (800ad6c <prvGetNextExpireTime+0x44>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	60fb      	str	r3, [r7, #12]
 800ad56:	e001      	b.n	800ad5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	20004ad0 	.word	0x20004ad0

0800ad70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad78:	f7fe ff14 	bl	8009ba4 <xTaskGetTickCount>
 800ad7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad7e:	4b0b      	ldr	r3, [pc, #44]	@ (800adac <prvSampleTimeNow+0x3c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d205      	bcs.n	800ad94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad88:	f000 f940 	bl	800b00c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	e002      	b.n	800ad9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad9a:	4a04      	ldr	r2, [pc, #16]	@ (800adac <prvSampleTimeNow+0x3c>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ada0:	68fb      	ldr	r3, [r7, #12]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20004ae0 	.word	0x20004ae0

0800adb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d812      	bhi.n	800adfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	1ad2      	subs	r2, r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d302      	bcc.n	800adea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ade4:	2301      	movs	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	e01b      	b.n	800ae22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adea:	4b10      	ldr	r3, [pc, #64]	@ (800ae2c <prvInsertTimerInActiveList+0x7c>)
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3304      	adds	r3, #4
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7fd f8ac 	bl	8007f52 <vListInsert>
 800adfa:	e012      	b.n	800ae22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d206      	bcs.n	800ae12 <prvInsertTimerInActiveList+0x62>
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d302      	bcc.n	800ae12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	617b      	str	r3, [r7, #20]
 800ae10:	e007      	b.n	800ae22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae12:	4b07      	ldr	r3, [pc, #28]	@ (800ae30 <prvInsertTimerInActiveList+0x80>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3304      	adds	r3, #4
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4610      	mov	r0, r2
 800ae1e:	f7fd f898 	bl	8007f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae22:	697b      	ldr	r3, [r7, #20]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20004ad4 	.word	0x20004ad4
 800ae30:	20004ad0 	.word	0x20004ad0

0800ae34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08e      	sub	sp, #56	@ 0x38
 800ae38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae3a:	e0d4      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da1b      	bge.n	800ae7a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae42:	1d3b      	adds	r3, r7, #4
 800ae44:	3304      	adds	r3, #4
 800ae46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10d      	bne.n	800ae6a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	b672      	cpsid	i
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	b662      	cpsie	i
 800ae62:	61fb      	str	r3, [r7, #28]
}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop
 800ae68:	e7fd      	b.n	800ae66 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae70:	6850      	ldr	r0, [r2, #4]
 800ae72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae74:	6892      	ldr	r2, [r2, #8]
 800ae76:	4611      	mov	r1, r2
 800ae78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f2c0 80b2 	blt.w	800afe6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae90:	3304      	adds	r3, #4
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fd f896 	bl	8007fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae98:	463b      	mov	r3, r7
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff ff68 	bl	800ad70 <prvSampleTimeNow>
 800aea0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	f200 809b 	bhi.w	800afe0 <prvProcessReceivedCommands+0x1ac>
 800aeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb0 <prvProcessReceivedCommands+0x7c>)
 800aeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb0:	0800aed9 	.word	0x0800aed9
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aed9 	.word	0x0800aed9
 800aebc:	0800af53 	.word	0x0800af53
 800aec0:	0800af67 	.word	0x0800af67
 800aec4:	0800afb7 	.word	0x0800afb7
 800aec8:	0800aed9 	.word	0x0800aed9
 800aecc:	0800aed9 	.word	0x0800aed9
 800aed0:	0800af53 	.word	0x0800af53
 800aed4:	0800af67 	.word	0x0800af67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aede:	f043 0301 	orr.w	r3, r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeea:	68ba      	ldr	r2, [r7, #8]
 800aeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	18d1      	adds	r1, r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aef8:	f7ff ff5a 	bl	800adb0 <prvInsertTimerInActiveList>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d070      	beq.n	800afe4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d065      	beq.n	800afe4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	441a      	add	r2, r3
 800af20:	2300      	movs	r3, #0
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	2100      	movs	r1, #0
 800af28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af2a:	f7ff fdfb 	bl	800ab24 <xTimerGenericCommand>
 800af2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d156      	bne.n	800afe4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3a:	b672      	cpsid	i
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	b662      	cpsie	i
 800af4a:	61bb      	str	r3, [r7, #24]
}
 800af4c:	bf00      	nop
 800af4e:	bf00      	nop
 800af50:	e7fd      	b.n	800af4e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af64:	e03f      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af6c:	f043 0301 	orr.w	r3, r3, #1
 800af70:	b2da      	uxtb	r2, r3
 800af72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af78:	68ba      	ldr	r2, [r7, #8]
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10d      	bne.n	800afa2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	b672      	cpsid	i
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	b662      	cpsie	i
 800af9a:	617b      	str	r3, [r7, #20]
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa4:	699a      	ldr	r2, [r3, #24]
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	18d1      	adds	r1, r2, r3
 800afaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afb0:	f7ff fefe 	bl	800adb0 <prvInsertTimerInActiveList>
					break;
 800afb4:	e017      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afbc:	f003 0302 	and.w	r3, r3, #2
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d103      	bne.n	800afcc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800afc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afc6:	f000 fbd5 	bl	800b774 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afca:	e00c      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afd2:	f023 0301 	bic.w	r3, r3, #1
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afde:	e002      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800afe0:	bf00      	nop
 800afe2:	e000      	b.n	800afe6 <prvProcessReceivedCommands+0x1b2>
					break;
 800afe4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afe6:	4b08      	ldr	r3, [pc, #32]	@ (800b008 <prvProcessReceivedCommands+0x1d4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	1d39      	adds	r1, r7, #4
 800afec:	2200      	movs	r2, #0
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fd fce4 	bl	80089bc <xQueueReceive>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f47f af20 	bne.w	800ae3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800affc:	bf00      	nop
 800affe:	bf00      	nop
 800b000:	3730      	adds	r7, #48	@ 0x30
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	20004ad8 	.word	0x20004ad8

0800b00c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b012:	e04b      	b.n	800b0ac <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b014:	4b2f      	ldr	r3, [pc, #188]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3304      	adds	r3, #4
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fc ffc9 	bl	8007fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b040:	f003 0304 	and.w	r3, r3, #4
 800b044:	2b00      	cmp	r3, #0
 800b046:	d031      	beq.n	800b0ac <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4413      	add	r3, r2
 800b050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	429a      	cmp	r2, r3
 800b058:	d90e      	bls.n	800b078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b066:	4b1b      	ldr	r3, [pc, #108]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3304      	adds	r3, #4
 800b06e:	4619      	mov	r1, r3
 800b070:	4610      	mov	r0, r2
 800b072:	f7fc ff6e 	bl	8007f52 <vListInsert>
 800b076:	e019      	b.n	800b0ac <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b078:	2300      	movs	r3, #0
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	2300      	movs	r3, #0
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	2100      	movs	r1, #0
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7ff fd4e 	bl	800ab24 <xTimerGenericCommand>
 800b088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10d      	bne.n	800b0ac <prvSwitchTimerLists+0xa0>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	b672      	cpsid	i
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	b662      	cpsie	i
 800b0a4:	603b      	str	r3, [r7, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ac:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1ae      	bne.n	800b014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0b6:	4b07      	ldr	r3, [pc, #28]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0bc:	4b06      	ldr	r3, [pc, #24]	@ (800b0d8 <prvSwitchTimerLists+0xcc>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a04      	ldr	r2, [pc, #16]	@ (800b0d4 <prvSwitchTimerLists+0xc8>)
 800b0c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0c4:	4a04      	ldr	r2, [pc, #16]	@ (800b0d8 <prvSwitchTimerLists+0xcc>)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6013      	str	r3, [r2, #0]
}
 800b0ca:	bf00      	nop
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20004ad0 	.word	0x20004ad0
 800b0d8:	20004ad4 	.word	0x20004ad4

0800b0dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0e2:	f000 f94b 	bl	800b37c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0e6:	4b15      	ldr	r3, [pc, #84]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d120      	bne.n	800b130 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0ee:	4814      	ldr	r0, [pc, #80]	@ (800b140 <prvCheckForValidListAndQueue+0x64>)
 800b0f0:	f7fc fede 	bl	8007eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0f4:	4813      	ldr	r0, [pc, #76]	@ (800b144 <prvCheckForValidListAndQueue+0x68>)
 800b0f6:	f7fc fedb 	bl	8007eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0fa:	4b13      	ldr	r3, [pc, #76]	@ (800b148 <prvCheckForValidListAndQueue+0x6c>)
 800b0fc:	4a10      	ldr	r2, [pc, #64]	@ (800b140 <prvCheckForValidListAndQueue+0x64>)
 800b0fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b100:	4b12      	ldr	r3, [pc, #72]	@ (800b14c <prvCheckForValidListAndQueue+0x70>)
 800b102:	4a10      	ldr	r2, [pc, #64]	@ (800b144 <prvCheckForValidListAndQueue+0x68>)
 800b104:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b106:	2300      	movs	r3, #0
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <prvCheckForValidListAndQueue+0x74>)
 800b10c:	4a11      	ldr	r2, [pc, #68]	@ (800b154 <prvCheckForValidListAndQueue+0x78>)
 800b10e:	2110      	movs	r1, #16
 800b110:	200a      	movs	r0, #10
 800b112:	f7fc ffed 	bl	80080f0 <xQueueGenericCreateStatic>
 800b116:	4603      	mov	r3, r0
 800b118:	4a08      	ldr	r2, [pc, #32]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b11a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b11c:	4b07      	ldr	r3, [pc, #28]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b124:	4b05      	ldr	r3, [pc, #20]	@ (800b13c <prvCheckForValidListAndQueue+0x60>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	490b      	ldr	r1, [pc, #44]	@ (800b158 <prvCheckForValidListAndQueue+0x7c>)
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7fe f948 	bl	80093c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b130:	f000 f95a 	bl	800b3e8 <vPortExitCritical>
}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	20004ad8 	.word	0x20004ad8
 800b140:	20004aa8 	.word	0x20004aa8
 800b144:	20004abc 	.word	0x20004abc
 800b148:	20004ad0 	.word	0x20004ad0
 800b14c:	20004ad4 	.word	0x20004ad4
 800b150:	20004b84 	.word	0x20004b84
 800b154:	20004ae4 	.word	0x20004ae4
 800b158:	0801c1f4 	.word	0x0801c1f4

0800b15c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3b04      	subs	r3, #4
 800b16c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3b04      	subs	r3, #4
 800b17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f023 0201 	bic.w	r2, r3, #1
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3b04      	subs	r3, #4
 800b18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b18c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1c0 <pxPortInitialiseStack+0x64>)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3b14      	subs	r3, #20
 800b196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3b04      	subs	r3, #4
 800b1a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f06f 0202 	mvn.w	r2, #2
 800b1aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3b20      	subs	r3, #32
 800b1b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	0800b1c5 	.word	0x0800b1c5

0800b1c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ce:	4b15      	ldr	r3, [pc, #84]	@ (800b224 <prvTaskExitError+0x60>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d6:	d00d      	beq.n	800b1f4 <prvTaskExitError+0x30>
	__asm volatile
 800b1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1dc:	b672      	cpsid	i
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	b662      	cpsie	i
 800b1ec:	60fb      	str	r3, [r7, #12]
}
 800b1ee:	bf00      	nop
 800b1f0:	bf00      	nop
 800b1f2:	e7fd      	b.n	800b1f0 <prvTaskExitError+0x2c>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f8:	b672      	cpsid	i
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	b662      	cpsie	i
 800b208:	60bb      	str	r3, [r7, #8]
}
 800b20a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b20c:	bf00      	nop
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0fc      	beq.n	800b20e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	2000000c 	.word	0x2000000c
	...

0800b230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b230:	4b07      	ldr	r3, [pc, #28]	@ (800b250 <pxCurrentTCBConst2>)
 800b232:	6819      	ldr	r1, [r3, #0]
 800b234:	6808      	ldr	r0, [r1, #0]
 800b236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23a:	f380 8809 	msr	PSP, r0
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f380 8811 	msr	BASEPRI, r0
 800b24a:	4770      	bx	lr
 800b24c:	f3af 8000 	nop.w

0800b250 <pxCurrentTCBConst2>:
 800b250:	200045a8 	.word	0x200045a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop

0800b258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b258:	4808      	ldr	r0, [pc, #32]	@ (800b27c <prvPortStartFirstTask+0x24>)
 800b25a:	6800      	ldr	r0, [r0, #0]
 800b25c:	6800      	ldr	r0, [r0, #0]
 800b25e:	f380 8808 	msr	MSP, r0
 800b262:	f04f 0000 	mov.w	r0, #0
 800b266:	f380 8814 	msr	CONTROL, r0
 800b26a:	b662      	cpsie	i
 800b26c:	b661      	cpsie	f
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	df00      	svc	0
 800b278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b27a:	bf00      	nop
 800b27c:	e000ed08 	.word	0xe000ed08

0800b280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b286:	4b37      	ldr	r3, [pc, #220]	@ (800b364 <xPortStartScheduler+0xe4>)
 800b288:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	22ff      	movs	r2, #255	@ 0xff
 800b296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b368 <xPortStartScheduler+0xe8>)
 800b2ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b36c <xPortStartScheduler+0xec>)
 800b2b0:	2207      	movs	r2, #7
 800b2b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2b4:	e009      	b.n	800b2ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b2b6:	4b2d      	ldr	r3, [pc, #180]	@ (800b36c <xPortStartScheduler+0xec>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b36c <xPortStartScheduler+0xec>)
 800b2be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2c0:	78fb      	ldrb	r3, [r7, #3]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ca:	78fb      	ldrb	r3, [r7, #3]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2d2:	2b80      	cmp	r3, #128	@ 0x80
 800b2d4:	d0ef      	beq.n	800b2b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2d6:	4b25      	ldr	r3, [pc, #148]	@ (800b36c <xPortStartScheduler+0xec>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f1c3 0307 	rsb	r3, r3, #7
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d00d      	beq.n	800b2fe <xPortStartScheduler+0x7e>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e6:	b672      	cpsid	i
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	b662      	cpsie	i
 800b2f6:	60bb      	str	r3, [r7, #8]
}
 800b2f8:	bf00      	nop
 800b2fa:	bf00      	nop
 800b2fc:	e7fd      	b.n	800b2fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2fe:	4b1b      	ldr	r3, [pc, #108]	@ (800b36c <xPortStartScheduler+0xec>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	021b      	lsls	r3, r3, #8
 800b304:	4a19      	ldr	r2, [pc, #100]	@ (800b36c <xPortStartScheduler+0xec>)
 800b306:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b308:	4b18      	ldr	r3, [pc, #96]	@ (800b36c <xPortStartScheduler+0xec>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b310:	4a16      	ldr	r2, [pc, #88]	@ (800b36c <xPortStartScheduler+0xec>)
 800b312:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	b2da      	uxtb	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b31c:	4b14      	ldr	r3, [pc, #80]	@ (800b370 <xPortStartScheduler+0xf0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a13      	ldr	r2, [pc, #76]	@ (800b370 <xPortStartScheduler+0xf0>)
 800b322:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b326:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b328:	4b11      	ldr	r3, [pc, #68]	@ (800b370 <xPortStartScheduler+0xf0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a10      	ldr	r2, [pc, #64]	@ (800b370 <xPortStartScheduler+0xf0>)
 800b32e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b332:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b334:	f000 f8dc 	bl	800b4f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b338:	4b0e      	ldr	r3, [pc, #56]	@ (800b374 <xPortStartScheduler+0xf4>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b33e:	f000 f8fb 	bl	800b538 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b342:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <xPortStartScheduler+0xf8>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a0c      	ldr	r2, [pc, #48]	@ (800b378 <xPortStartScheduler+0xf8>)
 800b348:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b34c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b34e:	f7ff ff83 	bl	800b258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b352:	f7fe fd93 	bl	8009e7c <vTaskSwitchContext>
	prvTaskExitError();
 800b356:	f7ff ff35 	bl	800b1c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	e000e400 	.word	0xe000e400
 800b368:	20004bd4 	.word	0x20004bd4
 800b36c:	20004bd8 	.word	0x20004bd8
 800b370:	e000ed20 	.word	0xe000ed20
 800b374:	2000000c 	.word	0x2000000c
 800b378:	e000ef34 	.word	0xe000ef34

0800b37c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b386:	b672      	cpsid	i
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	b662      	cpsie	i
 800b396:	607b      	str	r3, [r7, #4]
}
 800b398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b39a:	4b11      	ldr	r3, [pc, #68]	@ (800b3e0 <vPortEnterCritical+0x64>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	4a0f      	ldr	r2, [pc, #60]	@ (800b3e0 <vPortEnterCritical+0x64>)
 800b3a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3a4:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e0 <vPortEnterCritical+0x64>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d112      	bne.n	800b3d2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e4 <vPortEnterCritical+0x68>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00d      	beq.n	800b3d2 <vPortEnterCritical+0x56>
	__asm volatile
 800b3b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ba:	b672      	cpsid	i
 800b3bc:	f383 8811 	msr	BASEPRI, r3
 800b3c0:	f3bf 8f6f 	isb	sy
 800b3c4:	f3bf 8f4f 	dsb	sy
 800b3c8:	b662      	cpsie	i
 800b3ca:	603b      	str	r3, [r7, #0]
}
 800b3cc:	bf00      	nop
 800b3ce:	bf00      	nop
 800b3d0:	e7fd      	b.n	800b3ce <vPortEnterCritical+0x52>
	}
}
 800b3d2:	bf00      	nop
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	2000000c 	.word	0x2000000c
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3ee:	4b13      	ldr	r3, [pc, #76]	@ (800b43c <vPortExitCritical+0x54>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10d      	bne.n	800b412 <vPortExitCritical+0x2a>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3fa:	b672      	cpsid	i
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	b662      	cpsie	i
 800b40a:	607b      	str	r3, [r7, #4]
}
 800b40c:	bf00      	nop
 800b40e:	bf00      	nop
 800b410:	e7fd      	b.n	800b40e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b412:	4b0a      	ldr	r3, [pc, #40]	@ (800b43c <vPortExitCritical+0x54>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3b01      	subs	r3, #1
 800b418:	4a08      	ldr	r2, [pc, #32]	@ (800b43c <vPortExitCritical+0x54>)
 800b41a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b41c:	4b07      	ldr	r3, [pc, #28]	@ (800b43c <vPortExitCritical+0x54>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d105      	bne.n	800b430 <vPortExitCritical+0x48>
 800b424:	2300      	movs	r3, #0
 800b426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	f383 8811 	msr	BASEPRI, r3
}
 800b42e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	2000000c 	.word	0x2000000c

0800b440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b440:	f3ef 8009 	mrs	r0, PSP
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	4b15      	ldr	r3, [pc, #84]	@ (800b4a0 <pxCurrentTCBConst>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	f01e 0f10 	tst.w	lr, #16
 800b450:	bf08      	it	eq
 800b452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45a:	6010      	str	r0, [r2, #0]
 800b45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b460:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b464:	b672      	cpsid	i
 800b466:	f380 8811 	msr	BASEPRI, r0
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	b662      	cpsie	i
 800b474:	f7fe fd02 	bl	8009e7c <vTaskSwitchContext>
 800b478:	f04f 0000 	mov.w	r0, #0
 800b47c:	f380 8811 	msr	BASEPRI, r0
 800b480:	bc09      	pop	{r0, r3}
 800b482:	6819      	ldr	r1, [r3, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48a:	f01e 0f10 	tst.w	lr, #16
 800b48e:	bf08      	it	eq
 800b490:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b494:	f380 8809 	msr	PSP, r0
 800b498:	f3bf 8f6f 	isb	sy
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop

0800b4a0 <pxCurrentTCBConst>:
 800b4a0:	200045a8 	.word	0x200045a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop

0800b4a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	b672      	cpsid	i
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	b662      	cpsie	i
 800b4c2:	607b      	str	r3, [r7, #4]
}
 800b4c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4c6:	f7fe fc1d 	bl	8009d04 <xTaskIncrementTick>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4d0:	4b06      	ldr	r3, [pc, #24]	@ (800b4ec <SysTick_Handler+0x44>)
 800b4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	f383 8811 	msr	BASEPRI, r3
}
 800b4e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b524 <vPortSetupTimerInterrupt+0x34>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b528 <vPortSetupTimerInterrupt+0x38>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b500:	4b0a      	ldr	r3, [pc, #40]	@ (800b52c <vPortSetupTimerInterrupt+0x3c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a0a      	ldr	r2, [pc, #40]	@ (800b530 <vPortSetupTimerInterrupt+0x40>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	099b      	lsrs	r3, r3, #6
 800b50c:	4a09      	ldr	r2, [pc, #36]	@ (800b534 <vPortSetupTimerInterrupt+0x44>)
 800b50e:	3b01      	subs	r3, #1
 800b510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b512:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <vPortSetupTimerInterrupt+0x34>)
 800b514:	2207      	movs	r2, #7
 800b516:	601a      	str	r2, [r3, #0]
}
 800b518:	bf00      	nop
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	e000e010 	.word	0xe000e010
 800b528:	e000e018 	.word	0xe000e018
 800b52c:	20000000 	.word	0x20000000
 800b530:	10624dd3 	.word	0x10624dd3
 800b534:	e000e014 	.word	0xe000e014

0800b538 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b538:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b548 <vPortEnableVFP+0x10>
 800b53c:	6801      	ldr	r1, [r0, #0]
 800b53e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b542:	6001      	str	r1, [r0, #0]
 800b544:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b546:	bf00      	nop
 800b548:	e000ed88 	.word	0xe000ed88

0800b54c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b552:	f3ef 8305 	mrs	r3, IPSR
 800b556:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b0f      	cmp	r3, #15
 800b55c:	d917      	bls.n	800b58e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b55e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5c8 <vPortValidateInterruptPriority+0x7c>)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4413      	add	r3, r2
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b568:	4b18      	ldr	r3, [pc, #96]	@ (800b5cc <vPortValidateInterruptPriority+0x80>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	7afa      	ldrb	r2, [r7, #11]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d20d      	bcs.n	800b58e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b576:	b672      	cpsid	i
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	b662      	cpsie	i
 800b586:	607b      	str	r3, [r7, #4]
}
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b58e:	4b10      	ldr	r3, [pc, #64]	@ (800b5d0 <vPortValidateInterruptPriority+0x84>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b596:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d4 <vPortValidateInterruptPriority+0x88>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d90d      	bls.n	800b5ba <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a2:	b672      	cpsid	i
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	b662      	cpsie	i
 800b5b2:	603b      	str	r3, [r7, #0]
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	e7fd      	b.n	800b5b6 <vPortValidateInterruptPriority+0x6a>
	}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	e000e3f0 	.word	0xe000e3f0
 800b5cc:	20004bd4 	.word	0x20004bd4
 800b5d0:	e000ed0c 	.word	0xe000ed0c
 800b5d4:	20004bd8 	.word	0x20004bd8

0800b5d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b08a      	sub	sp, #40	@ 0x28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5e4:	f7fe fa30 	bl	8009a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5e8:	4b5d      	ldr	r3, [pc, #372]	@ (800b760 <pvPortMalloc+0x188>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d101      	bne.n	800b5f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5f0:	f000 f938 	bl	800b864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5f4:	4b5b      	ldr	r3, [pc, #364]	@ (800b764 <pvPortMalloc+0x18c>)
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f040 8094 	bne.w	800b72a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d020      	beq.n	800b64a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b608:	2208      	movs	r2, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4413      	add	r3, r2
 800b60e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f003 0307 	and.w	r3, r3, #7
 800b616:	2b00      	cmp	r3, #0
 800b618:	d017      	beq.n	800b64a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f023 0307 	bic.w	r3, r3, #7
 800b620:	3308      	adds	r3, #8
 800b622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f003 0307 	and.w	r3, r3, #7
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00d      	beq.n	800b64a <pvPortMalloc+0x72>
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b632:	b672      	cpsid	i
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	b662      	cpsie	i
 800b642:	617b      	str	r3, [r7, #20]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d06c      	beq.n	800b72a <pvPortMalloc+0x152>
 800b650:	4b45      	ldr	r3, [pc, #276]	@ (800b768 <pvPortMalloc+0x190>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d867      	bhi.n	800b72a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b65a:	4b44      	ldr	r3, [pc, #272]	@ (800b76c <pvPortMalloc+0x194>)
 800b65c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b65e:	4b43      	ldr	r3, [pc, #268]	@ (800b76c <pvPortMalloc+0x194>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b664:	e004      	b.n	800b670 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d903      	bls.n	800b682 <pvPortMalloc+0xaa>
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f1      	bne.n	800b666 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b682:	4b37      	ldr	r3, [pc, #220]	@ (800b760 <pvPortMalloc+0x188>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b688:	429a      	cmp	r2, r3
 800b68a:	d04e      	beq.n	800b72a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2208      	movs	r2, #8
 800b692:	4413      	add	r3, r2
 800b694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	2308      	movs	r3, #8
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d922      	bls.n	800b6f4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	f003 0307 	and.w	r3, r3, #7
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00d      	beq.n	800b6dc <pvPortMalloc+0x104>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	b672      	cpsid	i
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	b662      	cpsie	i
 800b6d4:	613b      	str	r3, [r7, #16]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	685a      	ldr	r2, [r3, #4]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	1ad2      	subs	r2, r2, r3
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ee:	69b8      	ldr	r0, [r7, #24]
 800b6f0:	f000 f91a 	bl	800b928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b768 <pvPortMalloc+0x190>)
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	4a1a      	ldr	r2, [pc, #104]	@ (800b768 <pvPortMalloc+0x190>)
 800b700:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b702:	4b19      	ldr	r3, [pc, #100]	@ (800b768 <pvPortMalloc+0x190>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b1a      	ldr	r3, [pc, #104]	@ (800b770 <pvPortMalloc+0x198>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d203      	bcs.n	800b716 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b70e:	4b16      	ldr	r3, [pc, #88]	@ (800b768 <pvPortMalloc+0x190>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a17      	ldr	r2, [pc, #92]	@ (800b770 <pvPortMalloc+0x198>)
 800b714:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	4b12      	ldr	r3, [pc, #72]	@ (800b764 <pvPortMalloc+0x18c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	431a      	orrs	r2, r3
 800b720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b722:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b72a:	f7fe f99b 	bl	8009a64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f003 0307 	and.w	r3, r3, #7
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00d      	beq.n	800b754 <pvPortMalloc+0x17c>
	__asm volatile
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	b672      	cpsid	i
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	b662      	cpsie	i
 800b74c:	60fb      	str	r3, [r7, #12]
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	e7fd      	b.n	800b750 <pvPortMalloc+0x178>
	return pvReturn;
 800b754:	69fb      	ldr	r3, [r7, #28]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3728      	adds	r7, #40	@ 0x28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	2000c3e4 	.word	0x2000c3e4
 800b764:	2000c3f0 	.word	0x2000c3f0
 800b768:	2000c3e8 	.word	0x2000c3e8
 800b76c:	2000c3dc 	.word	0x2000c3dc
 800b770:	2000c3ec 	.word	0x2000c3ec

0800b774 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d04e      	beq.n	800b824 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b786:	2308      	movs	r3, #8
 800b788:	425b      	negs	r3, r3
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	4413      	add	r3, r2
 800b78e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	4b24      	ldr	r3, [pc, #144]	@ (800b82c <vPortFree+0xb8>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4013      	ands	r3, r2
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10d      	bne.n	800b7be <vPortFree+0x4a>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a6:	b672      	cpsid	i
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	b662      	cpsie	i
 800b7b6:	60fb      	str	r3, [r7, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00d      	beq.n	800b7e2 <vPortFree+0x6e>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	b672      	cpsid	i
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	b662      	cpsie	i
 800b7da:	60bb      	str	r3, [r7, #8]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	4b11      	ldr	r3, [pc, #68]	@ (800b82c <vPortFree+0xb8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d019      	beq.n	800b824 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d115      	bne.n	800b824 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b82c <vPortFree+0xb8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	43db      	mvns	r3, r3
 800b802:	401a      	ands	r2, r3
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b808:	f7fe f91e 	bl	8009a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	4b07      	ldr	r3, [pc, #28]	@ (800b830 <vPortFree+0xbc>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4413      	add	r3, r2
 800b816:	4a06      	ldr	r2, [pc, #24]	@ (800b830 <vPortFree+0xbc>)
 800b818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b81a:	6938      	ldr	r0, [r7, #16]
 800b81c:	f000 f884 	bl	800b928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b820:	f7fe f920 	bl	8009a64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b824:	bf00      	nop
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	2000c3f0 	.word	0x2000c3f0
 800b830:	2000c3e8 	.word	0x2000c3e8

0800b834 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b838:	4b03      	ldr	r3, [pc, #12]	@ (800b848 <xPortGetFreeHeapSize+0x14>)
 800b83a:	681b      	ldr	r3, [r3, #0]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	2000c3e8 	.word	0x2000c3e8

0800b84c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800b850:	4b03      	ldr	r3, [pc, #12]	@ (800b860 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800b852:	681b      	ldr	r3, [r3, #0]
}
 800b854:	4618      	mov	r0, r3
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	2000c3ec 	.word	0x2000c3ec

0800b864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b86a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800b86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b870:	4b27      	ldr	r3, [pc, #156]	@ (800b910 <prvHeapInit+0xac>)
 800b872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3307      	adds	r3, #7
 800b882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	4a1f      	ldr	r2, [pc, #124]	@ (800b910 <prvHeapInit+0xac>)
 800b894:	4413      	add	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b89c:	4a1d      	ldr	r2, [pc, #116]	@ (800b914 <prvHeapInit+0xb0>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <prvHeapInit+0xb0>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8b0:	2208      	movs	r2, #8
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0307 	bic.w	r3, r3, #7
 800b8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4a15      	ldr	r2, [pc, #84]	@ (800b918 <prvHeapInit+0xb4>)
 800b8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8c6:	4b14      	ldr	r3, [pc, #80]	@ (800b918 <prvHeapInit+0xb4>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ce:	4b12      	ldr	r3, [pc, #72]	@ (800b918 <prvHeapInit+0xb4>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	1ad2      	subs	r2, r2, r3
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b918 <prvHeapInit+0xb4>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b91c <prvHeapInit+0xb8>)
 800b8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4a09      	ldr	r2, [pc, #36]	@ (800b920 <prvHeapInit+0xbc>)
 800b8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8fc:	4b09      	ldr	r3, [pc, #36]	@ (800b924 <prvHeapInit+0xc0>)
 800b8fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b902:	601a      	str	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	20004bdc 	.word	0x20004bdc
 800b914:	2000c3dc 	.word	0x2000c3dc
 800b918:	2000c3e4 	.word	0x2000c3e4
 800b91c:	2000c3ec 	.word	0x2000c3ec
 800b920:	2000c3e8 	.word	0x2000c3e8
 800b924:	2000c3f0 	.word	0x2000c3f0

0800b928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b930:	4b28      	ldr	r3, [pc, #160]	@ (800b9d4 <prvInsertBlockIntoFreeList+0xac>)
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	e002      	b.n	800b93c <prvInsertBlockIntoFreeList+0x14>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	429a      	cmp	r2, r3
 800b944:	d8f7      	bhi.n	800b936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	4413      	add	r3, r2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	429a      	cmp	r2, r3
 800b956:	d108      	bne.n	800b96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	441a      	add	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	441a      	add	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d118      	bne.n	800b9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b15      	ldr	r3, [pc, #84]	@ (800b9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d00d      	beq.n	800b9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	441a      	add	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	e008      	b.n	800b9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	e003      	b.n	800b9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d002      	beq.n	800b9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000c3dc 	.word	0x2000c3dc
 800b9d8:	2000c3e4 	.word	0x2000c3e4

0800b9dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	330c      	adds	r3, #12
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f002 fa29 	bl	800de48 <tcpip_send_msg_wait_sem>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d103      	bne.n	800ba0a <netconn_apimsg+0x2e>
    return apimsg->err;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ba08:	e001      	b.n	800ba0e <netconn_apimsg+0x32>
  }
  return err;
 800ba0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08c      	sub	sp, #48	@ 0x30
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	603a      	str	r2, [r7, #0]
 800ba22:	71fb      	strb	r3, [r7, #7]
 800ba24:	460b      	mov	r3, r1
 800ba26:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ba28:	79fb      	ldrb	r3, [r7, #7]
 800ba2a:	6839      	ldr	r1, [r7, #0]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 f923 	bl	800cc78 <netconn_alloc>
 800ba32:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800ba34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d054      	beq.n	800bae4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ba3a:	79bb      	ldrb	r3, [r7, #6]
 800ba3c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ba3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba40:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ba42:	f107 0308 	add.w	r3, r7, #8
 800ba46:	4619      	mov	r1, r3
 800ba48:	4829      	ldr	r0, [pc, #164]	@ (800baf0 <netconn_new_with_proto_and_callback+0xd8>)
 800ba4a:	f7ff ffc7 	bl	800b9dc <netconn_apimsg>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800ba54:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d043      	beq.n	800bae4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ba5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <netconn_new_with_proto_and_callback+0x58>
 800ba64:	4b23      	ldr	r3, [pc, #140]	@ (800baf4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba66:	22a3      	movs	r2, #163	@ 0xa3
 800ba68:	4923      	ldr	r1, [pc, #140]	@ (800baf8 <netconn_new_with_proto_and_callback+0xe0>)
 800ba6a:	4824      	ldr	r0, [pc, #144]	@ (800bafc <netconn_new_with_proto_and_callback+0xe4>)
 800ba6c:	f00d ff42 	bl	80198f4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba72:	3310      	adds	r3, #16
 800ba74:	4618      	mov	r0, r3
 800ba76:	f00d f8dd 	bl	8018c34 <sys_mbox_valid>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d105      	bne.n	800ba8c <netconn_new_with_proto_and_callback+0x74>
 800ba80:	4b1c      	ldr	r3, [pc, #112]	@ (800baf4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba82:	22a4      	movs	r2, #164	@ 0xa4
 800ba84:	491e      	ldr	r1, [pc, #120]	@ (800bb00 <netconn_new_with_proto_and_callback+0xe8>)
 800ba86:	481d      	ldr	r0, [pc, #116]	@ (800bafc <netconn_new_with_proto_and_callback+0xe4>)
 800ba88:	f00d ff34 	bl	80198f4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ba8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8e:	3314      	adds	r3, #20
 800ba90:	4618      	mov	r0, r3
 800ba92:	f00d f8cf 	bl	8018c34 <sys_mbox_valid>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d005      	beq.n	800baa8 <netconn_new_with_proto_and_callback+0x90>
 800ba9c:	4b15      	ldr	r3, [pc, #84]	@ (800baf4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba9e:	22a6      	movs	r2, #166	@ 0xa6
 800baa0:	4918      	ldr	r1, [pc, #96]	@ (800bb04 <netconn_new_with_proto_and_callback+0xec>)
 800baa2:	4816      	ldr	r0, [pc, #88]	@ (800bafc <netconn_new_with_proto_and_callback+0xe4>)
 800baa4:	f00d ff26 	bl	80198f4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800baa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baaa:	330c      	adds	r3, #12
 800baac:	4618      	mov	r0, r3
 800baae:	f00d f94f 	bl	8018d50 <sys_sem_valid>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d105      	bne.n	800bac4 <netconn_new_with_proto_and_callback+0xac>
 800bab8:	4b0e      	ldr	r3, [pc, #56]	@ (800baf4 <netconn_new_with_proto_and_callback+0xdc>)
 800baba:	22a9      	movs	r2, #169	@ 0xa9
 800babc:	4912      	ldr	r1, [pc, #72]	@ (800bb08 <netconn_new_with_proto_and_callback+0xf0>)
 800babe:	480f      	ldr	r0, [pc, #60]	@ (800bafc <netconn_new_with_proto_and_callback+0xe4>)
 800bac0:	f00d ff18 	bl	80198f4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800bac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac6:	330c      	adds	r3, #12
 800bac8:	4618      	mov	r0, r3
 800baca:	f00d f934 	bl	8018d36 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800bace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad0:	3310      	adds	r3, #16
 800bad2:	4618      	mov	r0, r3
 800bad4:	f00d f83a 	bl	8018b4c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800bad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bada:	2007      	movs	r0, #7
 800badc:	f002 ff1c 	bl	800e918 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	e000      	b.n	800bae6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800bae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3730      	adds	r7, #48	@ 0x30
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	0800cc4d 	.word	0x0800cc4d
 800baf4:	0801c1fc 	.word	0x0801c1fc
 800baf8:	0801c230 	.word	0x0801c230
 800bafc:	0801c254 	.word	0x0801c254
 800bb00:	0801c27c 	.word	0x0801c27c
 800bb04:	0801c294 	.word	0x0801c294
 800bb08:	0801c2b8 	.word	0x0801c2b8

0800bb0c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b08c      	sub	sp, #48	@ 0x30
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e014      	b.n	800bb48 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bb22:	2329      	movs	r3, #41	@ 0x29
 800bb24:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800bb26:	f107 030c 	add.w	r3, r7, #12
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	4808      	ldr	r0, [pc, #32]	@ (800bb50 <netconn_prepare_delete+0x44>)
 800bb2e:	f7ff ff55 	bl	800b9dc <netconn_apimsg>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800bb38:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <netconn_prepare_delete+0x3a>
    return err;
 800bb40:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb44:	e000      	b.n	800bb48 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3730      	adds	r7, #48	@ 0x30
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	0800d1b9 	.word	0x0800d1b9

0800bb54 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <netconn_delete+0x12>
    return ERR_OK;
 800bb62:	2300      	movs	r3, #0
 800bb64:	e00d      	b.n	800bb82 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f7ff ffd0 	bl	800bb0c <netconn_prepare_delete>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800bb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d102      	bne.n	800bb7e <netconn_delete+0x2a>
    netconn_free(conn);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f001 f8eb 	bl	800cd54 <netconn_free>
  }
  return err;
 800bb7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
	...

0800bb8c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08e      	sub	sp, #56	@ 0x38
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	60b9      	str	r1, [r7, #8]
 800bb96:	4613      	mov	r3, r2
 800bb98:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d109      	bne.n	800bbb4 <netconn_bind+0x28>
 800bba0:	4b11      	ldr	r3, [pc, #68]	@ (800bbe8 <netconn_bind+0x5c>)
 800bba2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800bba6:	4911      	ldr	r1, [pc, #68]	@ (800bbec <netconn_bind+0x60>)
 800bba8:	4811      	ldr	r0, [pc, #68]	@ (800bbf0 <netconn_bind+0x64>)
 800bbaa:	f00d fea3 	bl	80198f4 <iprintf>
 800bbae:	f06f 030f 	mvn.w	r3, #15
 800bbb2:	e015      	b.n	800bbe0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800bbba:	4b0e      	ldr	r3, [pc, #56]	@ (800bbf4 <netconn_bind+0x68>)
 800bbbc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bbc6:	88fb      	ldrh	r3, [r7, #6]
 800bbc8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800bbca:	f107 0314 	add.w	r3, r7, #20
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4809      	ldr	r0, [pc, #36]	@ (800bbf8 <netconn_bind+0x6c>)
 800bbd2:	f7ff ff03 	bl	800b9dc <netconn_apimsg>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bbdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3738      	adds	r7, #56	@ 0x38
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	0801c1fc 	.word	0x0801c1fc
 800bbec:	0801c334 	.word	0x0801c334
 800bbf0:	0801c254 	.word	0x0801c254
 800bbf4:	0801f660 	.word	0x0801f660
 800bbf8:	0800d381 	.word	0x0800d381

0800bbfc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08c      	sub	sp, #48	@ 0x30
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	460b      	mov	r3, r1
 800bc06:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d109      	bne.n	800bc22 <netconn_listen_with_backlog+0x26>
 800bc0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bc44 <netconn_listen_with_backlog+0x48>)
 800bc10:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800bc14:	490c      	ldr	r1, [pc, #48]	@ (800bc48 <netconn_listen_with_backlog+0x4c>)
 800bc16:	480d      	ldr	r0, [pc, #52]	@ (800bc4c <netconn_listen_with_backlog+0x50>)
 800bc18:	f00d fe6c 	bl	80198f4 <iprintf>
 800bc1c:	f06f 030f 	mvn.w	r3, #15
 800bc20:	e00c      	b.n	800bc3c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800bc26:	f107 030c 	add.w	r3, r7, #12
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4808      	ldr	r0, [pc, #32]	@ (800bc50 <netconn_listen_with_backlog+0x54>)
 800bc2e:	f7ff fed5 	bl	800b9dc <netconn_apimsg>
 800bc32:	4603      	mov	r3, r0
 800bc34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bc38:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3730      	adds	r7, #48	@ 0x30
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0801c1fc 	.word	0x0801c1fc
 800bc48:	0801c3b4 	.word	0x0801c3b4
 800bc4c:	0801c254 	.word	0x0801c254
 800bc50:	0800d3f5 	.word	0x0800d3f5

0800bc54 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d109      	bne.n	800bc78 <netconn_accept+0x24>
 800bc64:	4b3d      	ldr	r3, [pc, #244]	@ (800bd5c <netconn_accept+0x108>)
 800bc66:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bc6a:	493d      	ldr	r1, [pc, #244]	@ (800bd60 <netconn_accept+0x10c>)
 800bc6c:	483d      	ldr	r0, [pc, #244]	@ (800bd64 <netconn_accept+0x110>)
 800bc6e:	f00d fe41 	bl	80198f4 <iprintf>
 800bc72:	f06f 030f 	mvn.w	r3, #15
 800bc76:	e06c      	b.n	800bd52 <netconn_accept+0xfe>
  *new_conn = NULL;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d109      	bne.n	800bc98 <netconn_accept+0x44>
 800bc84:	4b35      	ldr	r3, [pc, #212]	@ (800bd5c <netconn_accept+0x108>)
 800bc86:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800bc8a:	4937      	ldr	r1, [pc, #220]	@ (800bd68 <netconn_accept+0x114>)
 800bc8c:	4835      	ldr	r0, [pc, #212]	@ (800bd64 <netconn_accept+0x110>)
 800bc8e:	f00d fe31 	bl	80198f4 <iprintf>
 800bc92:	f06f 030f 	mvn.w	r3, #15
 800bc96:	e05c      	b.n	800bd52 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 fb6c 	bl	800c376 <netconn_err>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800bca2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d002      	beq.n	800bcb0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800bcaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bcae:	e050      	b.n	800bd52 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f00c ffbd 	bl	8018c34 <sys_mbox_valid>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d005      	beq.n	800bccc <netconn_accept+0x78>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7f1b      	ldrb	r3, [r3, #28]
 800bcc4:	f003 0301 	and.w	r3, r3, #1
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800bccc:	f06f 030e 	mvn.w	r3, #14
 800bcd0:	e03f      	b.n	800bd52 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7f1b      	ldrb	r3, [r3, #28]
 800bcd6:	f003 0302 	and.w	r3, r3, #2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00e      	beq.n	800bcfc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	3314      	adds	r3, #20
 800bce2:	f107 020c 	add.w	r2, r7, #12
 800bce6:	4611      	mov	r1, r2
 800bce8:	4618      	mov	r0, r3
 800bcea:	f00c ff8c 	bl	8018c06 <sys_arch_mbox_tryfetch>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf4:	d10a      	bne.n	800bd0c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800bcf6:	f06f 0306 	mvn.w	r3, #6
 800bcfa:	e02a      	b.n	800bd52 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3314      	adds	r3, #20
 800bd00:	f107 010c 	add.w	r1, r7, #12
 800bd04:	2200      	movs	r2, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f00c ff4c 	bl	8018ba4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d005      	beq.n	800bd20 <netconn_accept+0xcc>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f107 0213 	add.w	r2, r7, #19
 800bd26:	4611      	mov	r1, r2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f000 fb75 	bl	800c418 <lwip_netconn_is_err_msg>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d002      	beq.n	800bd3a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800bd34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd38:	e00b      	b.n	800bd52 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800bd40:	f06f 030e 	mvn.w	r3, #14
 800bd44:	e005      	b.n	800bd52 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bd50:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	0801c1fc 	.word	0x0801c1fc
 800bd60:	0801c3d4 	.word	0x0801c3d4
 800bd64:	0801c254 	.word	0x0801c254
 800bd68:	0801c3f4 	.word	0x0801c3f4

0800bd6c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	4613      	mov	r3, r2
 800bd78:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <netconn_recv_data+0x2c>
 800bd84:	4b58      	ldr	r3, [pc, #352]	@ (800bee8 <netconn_recv_data+0x17c>)
 800bd86:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800bd8a:	4958      	ldr	r1, [pc, #352]	@ (800beec <netconn_recv_data+0x180>)
 800bd8c:	4858      	ldr	r0, [pc, #352]	@ (800bef0 <netconn_recv_data+0x184>)
 800bd8e:	f00d fdb1 	bl	80198f4 <iprintf>
 800bd92:	f06f 030f 	mvn.w	r3, #15
 800bd96:	e0a2      	b.n	800bede <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <netconn_recv_data+0x4c>
 800bda4:	4b50      	ldr	r3, [pc, #320]	@ (800bee8 <netconn_recv_data+0x17c>)
 800bda6:	f240 224a 	movw	r2, #586	@ 0x24a
 800bdaa:	4952      	ldr	r1, [pc, #328]	@ (800bef4 <netconn_recv_data+0x188>)
 800bdac:	4850      	ldr	r0, [pc, #320]	@ (800bef0 <netconn_recv_data+0x184>)
 800bdae:	f00d fda1 	bl	80198f4 <iprintf>
 800bdb2:	f06f 030f 	mvn.w	r3, #15
 800bdb6:	e092      	b.n	800bede <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3310      	adds	r3, #16
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f00c ff39 	bl	8018c34 <sys_mbox_valid>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10e      	bne.n	800bde6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 fad4 	bl	800c376 <netconn_err>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bdd2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d002      	beq.n	800bde0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bdda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bdde:	e07e      	b.n	800bede <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bde0:	f06f 030a 	mvn.w	r3, #10
 800bde4:	e07b      	b.n	800bede <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	7f1b      	ldrb	r3, [r3, #28]
 800bdea:	f003 0302 	and.w	r3, r3, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10f      	bne.n	800be12 <netconn_recv_data+0xa6>
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	7f1b      	ldrb	r3, [r3, #28]
 800be00:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800be04:	2b00      	cmp	r3, #0
 800be06:	d104      	bne.n	800be12 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d023      	beq.n	800be5a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3310      	adds	r3, #16
 800be16:	f107 0218 	add.w	r2, r7, #24
 800be1a:	4611      	mov	r1, r2
 800be1c:	4618      	mov	r0, r3
 800be1e:	f00c fef2 	bl	8018c06 <sys_arch_mbox_tryfetch>
 800be22:	4603      	mov	r3, r0
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be28:	d11f      	bne.n	800be6a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 faa3 	bl	800c376 <netconn_err>
 800be30:	4603      	mov	r3, r0
 800be32:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800be34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800be3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be40:	e04d      	b.n	800bede <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	7f1b      	ldrb	r3, [r3, #28]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d002      	beq.n	800be54 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800be4e:	f06f 030a 	mvn.w	r3, #10
 800be52:	e044      	b.n	800bede <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800be54:	f06f 0306 	mvn.w	r3, #6
 800be58:	e041      	b.n	800bede <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3310      	adds	r3, #16
 800be5e:	f107 0118 	add.w	r1, r7, #24
 800be62:	2200      	movs	r2, #0
 800be64:	4618      	mov	r0, r3
 800be66:	f00c fe9d 	bl	8018ba4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be72:	2b10      	cmp	r3, #16
 800be74:	d117      	bne.n	800bea6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	f107 0217 	add.w	r2, r7, #23
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 faca 	bl	800c418 <lwip_netconn_is_err_msg>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d009      	beq.n	800be9e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800be8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be8e:	f113 0f0f 	cmn.w	r3, #15
 800be92:	d101      	bne.n	800be98 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	e022      	b.n	800bede <netconn_recv_data+0x172>
      }
      return err;
 800be98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be9c:	e01f      	b.n	800bede <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	891b      	ldrh	r3, [r3, #8]
 800bea2:	83fb      	strh	r3, [r7, #30]
 800bea4:	e00d      	b.n	800bec2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d106      	bne.n	800beba <netconn_recv_data+0x14e>
 800beac:	4b0e      	ldr	r3, [pc, #56]	@ (800bee8 <netconn_recv_data+0x17c>)
 800beae:	f240 2291 	movw	r2, #657	@ 0x291
 800beb2:	4911      	ldr	r1, [pc, #68]	@ (800bef8 <netconn_recv_data+0x18c>)
 800beb4:	480e      	ldr	r0, [pc, #56]	@ (800bef0 <netconn_recv_data+0x184>)
 800beb6:	f00d fd1d 	bl	80198f4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	891b      	ldrh	r3, [r3, #8]
 800bec0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d005      	beq.n	800bed6 <netconn_recv_data+0x16a>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	8bfa      	ldrh	r2, [r7, #30]
 800bed0:	2101      	movs	r1, #1
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bed6:	69ba      	ldr	r2, [r7, #24]
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3720      	adds	r7, #32
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	0801c1fc 	.word	0x0801c1fc
 800beec:	0801c414 	.word	0x0801c414
 800bef0:	0801c254 	.word	0x0801c254
 800bef4:	0801c434 	.word	0x0801c434
 800bef8:	0801c450 	.word	0x0801c450

0800befc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d005      	beq.n	800bf1a <netconn_tcp_recvd_msg+0x1e>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf16:	2b10      	cmp	r3, #16
 800bf18:	d009      	beq.n	800bf2e <netconn_tcp_recvd_msg+0x32>
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf4c <netconn_tcp_recvd_msg+0x50>)
 800bf1c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800bf20:	490b      	ldr	r1, [pc, #44]	@ (800bf50 <netconn_tcp_recvd_msg+0x54>)
 800bf22:	480c      	ldr	r0, [pc, #48]	@ (800bf54 <netconn_tcp_recvd_msg+0x58>)
 800bf24:	f00d fce6 	bl	80198f4 <iprintf>
 800bf28:	f06f 030f 	mvn.w	r3, #15
 800bf2c:	e00a      	b.n	800bf44 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800bf3a:	6879      	ldr	r1, [r7, #4]
 800bf3c:	4806      	ldr	r0, [pc, #24]	@ (800bf58 <netconn_tcp_recvd_msg+0x5c>)
 800bf3e:	f7ff fd4d 	bl	800b9dc <netconn_apimsg>
 800bf42:	4603      	mov	r3, r0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	0801c1fc 	.word	0x0801c1fc
 800bf50:	0801c45c 	.word	0x0801c45c
 800bf54:	0801c254 	.word	0x0801c254
 800bf58:	0800d525 	.word	0x0800d525

0800bf5c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b090      	sub	sp, #64	@ 0x40
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f00c fe60 	bl	8018c34 <sys_mbox_valid>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800bf7a:	f06f 030a 	mvn.w	r3, #10
 800bf7e:	e06d      	b.n	800c05c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	7f1b      	ldrb	r3, [r3, #28]
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	da07      	bge.n	800bf9a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	7f1b      	ldrb	r3, [r3, #28]
 800bf8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800bf98:	e039      	b.n	800c00e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f7ff fee3 	bl	800bd6c <netconn_recv_data>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800bfac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800bfb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfb8:	e050      	b.n	800c05c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	f003 0308 	and.w	r3, r3, #8
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10e      	bne.n	800bfe8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d002      	beq.n	800bfd6 <netconn_recv_data_tcp+0x7a>
 800bfd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd2:	891b      	ldrh	r3, [r3, #8]
 800bfd4:	e000      	b.n	800bfd8 <netconn_recv_data_tcp+0x7c>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800bfda:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfdc:	f107 0214 	add.w	r2, r7, #20
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff ff8a 	bl	800befc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d134      	bne.n	800c058 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	f003 0310 	and.w	r3, r3, #16
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d009      	beq.n	800c00c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	7f1b      	ldrb	r3, [r3, #28]
 800bffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c000:	b2da      	uxtb	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c006:	f06f 0306 	mvn.w	r3, #6
 800c00a:	e027      	b.n	800c05c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c00c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c012:	2b00      	cmp	r3, #0
 800c014:	d005      	beq.n	800c022 <netconn_recv_data_tcp+0xc6>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c01a:	2200      	movs	r2, #0
 800c01c:	2101      	movs	r1, #1
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10f      	bne.n	800c04a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 f9a3 	bl	800c376 <netconn_err>
 800c030:	4603      	mov	r3, r0
 800c032:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800c036:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <netconn_recv_data_tcp+0xe8>
          return err;
 800c03e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c042:	e00b      	b.n	800c05c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c044:	f06f 030d 	mvn.w	r3, #13
 800c048:	e008      	b.n	800c05c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c04a:	2101      	movs	r1, #1
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 f955 	bl	800c2fc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c052:	f06f 030e 	mvn.w	r3, #14
 800c056:	e001      	b.n	800c05c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c058:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3740      	adds	r7, #64	@ 0x40
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <netconn_recv+0x28>
 800c078:	4b32      	ldr	r3, [pc, #200]	@ (800c144 <netconn_recv+0xe0>)
 800c07a:	f240 3263 	movw	r2, #867	@ 0x363
 800c07e:	4932      	ldr	r1, [pc, #200]	@ (800c148 <netconn_recv+0xe4>)
 800c080:	4832      	ldr	r0, [pc, #200]	@ (800c14c <netconn_recv+0xe8>)
 800c082:	f00d fc37 	bl	80198f4 <iprintf>
 800c086:	f06f 030f 	mvn.w	r3, #15
 800c08a:	e056      	b.n	800c13a <netconn_recv+0xd6>
  *new_buf = NULL;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d109      	bne.n	800c0ac <netconn_recv+0x48>
 800c098:	4b2a      	ldr	r3, [pc, #168]	@ (800c144 <netconn_recv+0xe0>)
 800c09a:	f240 3265 	movw	r2, #869	@ 0x365
 800c09e:	492c      	ldr	r1, [pc, #176]	@ (800c150 <netconn_recv+0xec>)
 800c0a0:	482a      	ldr	r0, [pc, #168]	@ (800c14c <netconn_recv+0xe8>)
 800c0a2:	f00d fc27 	bl	80198f4 <iprintf>
 800c0a6:	f06f 030f 	mvn.w	r3, #15
 800c0aa:	e046      	b.n	800c13a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d13a      	bne.n	800c12e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c0bc:	2006      	movs	r0, #6
 800c0be:	f002 fbd9 	bl	800e874 <memp_malloc>
 800c0c2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <netconn_recv+0x6c>
      return ERR_MEM;
 800c0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ce:	e034      	b.n	800c13a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c0d0:	f107 030c 	add.w	r3, r7, #12
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7ff ff3f 	bl	800bf5c <netconn_recv_data_tcp>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c0e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d006      	beq.n	800c0f8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c0ea:	6979      	ldr	r1, [r7, #20]
 800c0ec:	2006      	movs	r0, #6
 800c0ee:	f002 fc13 	bl	800e918 <memp_free>
      return err;
 800c0f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0f6:	e020      	b.n	800c13a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <netconn_recv+0xa8>
 800c0fe:	4b11      	ldr	r3, [pc, #68]	@ (800c144 <netconn_recv+0xe0>)
 800c100:	f240 3279 	movw	r2, #889	@ 0x379
 800c104:	4913      	ldr	r1, [pc, #76]	@ (800c154 <netconn_recv+0xf0>)
 800c106:	4811      	ldr	r0, [pc, #68]	@ (800c14c <netconn_recv+0xe8>)
 800c108:	f00d fbf4 	bl	80198f4 <iprintf>

    buf->p = p;
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2200      	movs	r2, #0
 800c11c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2200      	movs	r2, #0
 800c122:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c12a:	2300      	movs	r3, #0
 800c12c:	e005      	b.n	800c13a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c12e:	2200      	movs	r2, #0
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff fe1a 	bl	800bd6c <netconn_recv_data>
 800c138:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	0801c1fc 	.word	0x0801c1fc
 800c148:	0801c414 	.word	0x0801c414
 800c14c:	0801c254 	.word	0x0801c254
 800c150:	0801c434 	.word	0x0801c434
 800c154:	0801c4ac 	.word	0x0801c4ac

0800c158 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af02      	add	r7, sp, #8
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c16e:	78fa      	ldrb	r2, [r7, #3]
 800c170:	f107 0110 	add.w	r1, r7, #16
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	9300      	str	r3, [sp, #0]
 800c178:	4613      	mov	r3, r2
 800c17a:	2201      	movs	r2, #1
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f000 f805 	bl	800c18c <netconn_write_vectors_partly>
 800c182:	4603      	mov	r3, r0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b092      	sub	sp, #72	@ 0x48
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	4611      	mov	r1, r2
 800c198:	461a      	mov	r2, r3
 800c19a:	460b      	mov	r3, r1
 800c19c:	80fb      	strh	r3, [r7, #6]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d109      	bne.n	800c1bc <netconn_write_vectors_partly+0x30>
 800c1a8:	4b4e      	ldr	r3, [pc, #312]	@ (800c2e4 <netconn_write_vectors_partly+0x158>)
 800c1aa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c1ae:	494e      	ldr	r1, [pc, #312]	@ (800c2e8 <netconn_write_vectors_partly+0x15c>)
 800c1b0:	484e      	ldr	r0, [pc, #312]	@ (800c2ec <netconn_write_vectors_partly+0x160>)
 800c1b2:	f00d fb9f 	bl	80198f4 <iprintf>
 800c1b6:	f06f 030f 	mvn.w	r3, #15
 800c1ba:	e08e      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1c4:	2b10      	cmp	r3, #16
 800c1c6:	d009      	beq.n	800c1dc <netconn_write_vectors_partly+0x50>
 800c1c8:	4b46      	ldr	r3, [pc, #280]	@ (800c2e4 <netconn_write_vectors_partly+0x158>)
 800c1ca:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c1ce:	4948      	ldr	r1, [pc, #288]	@ (800c2f0 <netconn_write_vectors_partly+0x164>)
 800c1d0:	4846      	ldr	r0, [pc, #280]	@ (800c2ec <netconn_write_vectors_partly+0x160>)
 800c1d2:	f00d fb8f 	bl	80198f4 <iprintf>
 800c1d6:	f06f 0305 	mvn.w	r3, #5
 800c1da:	e07e      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	7f1b      	ldrb	r3, [r3, #28]
 800c1e0:	f003 0302 	and.w	r3, r3, #2
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <netconn_write_vectors_partly+0x66>
 800c1e8:	797b      	ldrb	r3, [r7, #5]
 800c1ea:	f003 0304 	and.w	r3, r3, #4
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <netconn_write_vectors_partly+0x6a>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e000      	b.n	800c1f8 <netconn_write_vectors_partly+0x6c>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c1fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c200:	2b00      	cmp	r3, #0
 800c202:	d005      	beq.n	800c210 <netconn_write_vectors_partly+0x84>
 800c204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c206:	2b00      	cmp	r3, #0
 800c208:	d102      	bne.n	800c210 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c20a:	f06f 0305 	mvn.w	r3, #5
 800c20e:	e064      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c214:	2300      	movs	r3, #0
 800c216:	643b      	str	r3, [r7, #64]	@ 0x40
 800c218:	e015      	b.n	800c246 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	4413      	add	r3, r2
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c226:	4413      	add	r3, r2
 800c228:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c22c:	00db      	lsls	r3, r3, #3
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	4413      	add	r3, r2
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c236:	429a      	cmp	r2, r3
 800c238:	d202      	bcs.n	800c240 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c23a:	f06f 0305 	mvn.w	r3, #5
 800c23e:	e04c      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c240:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c242:	3301      	adds	r3, #1
 800c244:	643b      	str	r3, [r7, #64]	@ 0x40
 800c246:	88fb      	ldrh	r3, [r7, #6]
 800c248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c24a:	429a      	cmp	r2, r3
 800c24c:	dbe5      	blt.n	800c21a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c24e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c250:	2b00      	cmp	r3, #0
 800c252:	d101      	bne.n	800c258 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	e040      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da0a      	bge.n	800c274 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c25e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c264:	f06f 0305 	mvn.w	r3, #5
 800c268:	e037      	b.n	800c2da <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c26a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c26e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c27c:	88fb      	ldrh	r3, [r7, #6]
 800c27e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c280:	2300      	movs	r3, #0
 800c282:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c284:	797b      	ldrb	r3, [r7, #5]
 800c286:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c28a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c28c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c292:	f107 0314 	add.w	r3, r7, #20
 800c296:	4619      	mov	r1, r3
 800c298:	4816      	ldr	r0, [pc, #88]	@ (800c2f4 <netconn_write_vectors_partly+0x168>)
 800c29a:	f7ff fb9f 	bl	800b9dc <netconn_apimsg>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c2a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d114      	bne.n	800c2d6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c2ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d002      	beq.n	800c2b8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c2b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2b6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c2b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10a      	bne.n	800c2d6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d006      	beq.n	800c2d6 <netconn_write_vectors_partly+0x14a>
 800c2c8:	4b06      	ldr	r3, [pc, #24]	@ (800c2e4 <netconn_write_vectors_partly+0x158>)
 800c2ca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c2ce:	490a      	ldr	r1, [pc, #40]	@ (800c2f8 <netconn_write_vectors_partly+0x16c>)
 800c2d0:	4806      	ldr	r0, [pc, #24]	@ (800c2ec <netconn_write_vectors_partly+0x160>)
 800c2d2:	f00d fb0f 	bl	80198f4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c2d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3748      	adds	r7, #72	@ 0x48
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0801c1fc 	.word	0x0801c1fc
 800c2e8:	0801c4d4 	.word	0x0801c4d4
 800c2ec:	0801c254 	.word	0x0801c254
 800c2f0:	0801c4f0 	.word	0x0801c4f0
 800c2f4:	0800d929 	.word	0x0800d929
 800c2f8:	0801c514 	.word	0x0801c514

0800c2fc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b08c      	sub	sp, #48	@ 0x30
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d109      	bne.n	800c322 <netconn_close_shutdown+0x26>
 800c30e:	4b0f      	ldr	r3, [pc, #60]	@ (800c34c <netconn_close_shutdown+0x50>)
 800c310:	f240 4247 	movw	r2, #1095	@ 0x447
 800c314:	490e      	ldr	r1, [pc, #56]	@ (800c350 <netconn_close_shutdown+0x54>)
 800c316:	480f      	ldr	r0, [pc, #60]	@ (800c354 <netconn_close_shutdown+0x58>)
 800c318:	f00d faec 	bl	80198f4 <iprintf>
 800c31c:	f06f 030f 	mvn.w	r3, #15
 800c320:	e010      	b.n	800c344 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c326:	78fb      	ldrb	r3, [r7, #3]
 800c328:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c32a:	2329      	movs	r3, #41	@ 0x29
 800c32c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c32e:	f107 030c 	add.w	r3, r7, #12
 800c332:	4619      	mov	r1, r3
 800c334:	4808      	ldr	r0, [pc, #32]	@ (800c358 <netconn_close_shutdown+0x5c>)
 800c336:	f7ff fb51 	bl	800b9dc <netconn_apimsg>
 800c33a:	4603      	mov	r3, r0
 800c33c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c340:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c344:	4618      	mov	r0, r3
 800c346:	3730      	adds	r7, #48	@ 0x30
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	0801c1fc 	.word	0x0801c1fc
 800c350:	0801c538 	.word	0x0801c538
 800c354:	0801c254 	.word	0x0801c254
 800c358:	0800da41 	.word	0x0800da41

0800c35c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800c364:	2103      	movs	r1, #3
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff ffc8 	bl	800c2fc <netconn_close_shutdown>
 800c36c:	4603      	mov	r3, r0
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <netconn_err+0x12>
    return ERR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	e00d      	b.n	800c3a4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c388:	f00c fd5e 	bl	8018e48 <sys_arch_protect>
 800c38c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7a1b      	ldrb	r3, [r3, #8]
 800c392:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f00c fd62 	bl	8018e64 <sys_arch_unprotect>
  return err;
 800c3a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ba:	f113 0f0d 	cmn.w	r3, #13
 800c3be:	d009      	beq.n	800c3d4 <lwip_netconn_err_to_msg+0x28>
 800c3c0:	f113 0f0d 	cmn.w	r3, #13
 800c3c4:	dc0c      	bgt.n	800c3e0 <lwip_netconn_err_to_msg+0x34>
 800c3c6:	f113 0f0f 	cmn.w	r3, #15
 800c3ca:	d007      	beq.n	800c3dc <lwip_netconn_err_to_msg+0x30>
 800c3cc:	f113 0f0e 	cmn.w	r3, #14
 800c3d0:	d002      	beq.n	800c3d8 <lwip_netconn_err_to_msg+0x2c>
 800c3d2:	e005      	b.n	800c3e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <lwip_netconn_err_to_msg+0x54>)
 800c3d6:	e00e      	b.n	800c3f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c404 <lwip_netconn_err_to_msg+0x58>)
 800c3da:	e00c      	b.n	800c3f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c408 <lwip_netconn_err_to_msg+0x5c>)
 800c3de:	e00a      	b.n	800c3f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c3e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d005      	beq.n	800c3f4 <lwip_netconn_err_to_msg+0x48>
 800c3e8:	4b08      	ldr	r3, [pc, #32]	@ (800c40c <lwip_netconn_err_to_msg+0x60>)
 800c3ea:	227d      	movs	r2, #125	@ 0x7d
 800c3ec:	4908      	ldr	r1, [pc, #32]	@ (800c410 <lwip_netconn_err_to_msg+0x64>)
 800c3ee:	4809      	ldr	r0, [pc, #36]	@ (800c414 <lwip_netconn_err_to_msg+0x68>)
 800c3f0:	f00d fa80 	bl	80198f4 <iprintf>
      return NULL;
 800c3f4:	2300      	movs	r3, #0
  }
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	0801f54c 	.word	0x0801f54c
 800c404:	0801f54d 	.word	0x0801f54d
 800c408:	0801f54e 	.word	0x0801f54e
 800c40c:	0801c554 	.word	0x0801c554
 800c410:	0801c588 	.word	0x0801c588
 800c414:	0801c598 	.word	0x0801c598

0800c418 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d105      	bne.n	800c434 <lwip_netconn_is_err_msg+0x1c>
 800c428:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <lwip_netconn_is_err_msg+0x5c>)
 800c42a:	2285      	movs	r2, #133	@ 0x85
 800c42c:	4912      	ldr	r1, [pc, #72]	@ (800c478 <lwip_netconn_is_err_msg+0x60>)
 800c42e:	4813      	ldr	r0, [pc, #76]	@ (800c47c <lwip_netconn_is_err_msg+0x64>)
 800c430:	f00d fa60 	bl	80198f4 <iprintf>

  if (msg == &netconn_aborted) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a12      	ldr	r2, [pc, #72]	@ (800c480 <lwip_netconn_is_err_msg+0x68>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d104      	bne.n	800c446 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	22f3      	movs	r2, #243	@ 0xf3
 800c440:	701a      	strb	r2, [r3, #0]
    return 1;
 800c442:	2301      	movs	r3, #1
 800c444:	e012      	b.n	800c46c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a0e      	ldr	r2, [pc, #56]	@ (800c484 <lwip_netconn_is_err_msg+0x6c>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d104      	bne.n	800c458 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	22f2      	movs	r2, #242	@ 0xf2
 800c452:	701a      	strb	r2, [r3, #0]
    return 1;
 800c454:	2301      	movs	r3, #1
 800c456:	e009      	b.n	800c46c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a0b      	ldr	r2, [pc, #44]	@ (800c488 <lwip_netconn_is_err_msg+0x70>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d104      	bne.n	800c46a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	22f1      	movs	r2, #241	@ 0xf1
 800c464:	701a      	strb	r2, [r3, #0]
    return 1;
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	0801c554 	.word	0x0801c554
 800c478:	0801c5c0 	.word	0x0801c5c0
 800c47c:	0801c598 	.word	0x0801c598
 800c480:	0801f54c 	.word	0x0801f54c
 800c484:	0801f54d 	.word	0x0801f54d
 800c488:	0801f54e 	.word	0x0801f54e

0800c48c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d105      	bne.n	800c4ac <recv_udp+0x20>
 800c4a0:	4b34      	ldr	r3, [pc, #208]	@ (800c574 <recv_udp+0xe8>)
 800c4a2:	22e5      	movs	r2, #229	@ 0xe5
 800c4a4:	4934      	ldr	r1, [pc, #208]	@ (800c578 <recv_udp+0xec>)
 800c4a6:	4835      	ldr	r0, [pc, #212]	@ (800c57c <recv_udp+0xf0>)
 800c4a8:	f00d fa24 	bl	80198f4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d105      	bne.n	800c4be <recv_udp+0x32>
 800c4b2:	4b30      	ldr	r3, [pc, #192]	@ (800c574 <recv_udp+0xe8>)
 800c4b4:	22e6      	movs	r2, #230	@ 0xe6
 800c4b6:	4932      	ldr	r1, [pc, #200]	@ (800c580 <recv_udp+0xf4>)
 800c4b8:	4830      	ldr	r0, [pc, #192]	@ (800c57c <recv_udp+0xf0>)
 800c4ba:	f00d fa1b 	bl	80198f4 <iprintf>
  conn = (struct netconn *)arg;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d103      	bne.n	800c4d0 <recv_udp+0x44>
    pbuf_free(p);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f003 f8c9 	bl	800f660 <pbuf_free>
    return;
 800c4ce:	e04d      	b.n	800c56c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d005      	beq.n	800c4e6 <recv_udp+0x5a>
 800c4da:	4b26      	ldr	r3, [pc, #152]	@ (800c574 <recv_udp+0xe8>)
 800c4dc:	22ee      	movs	r2, #238	@ 0xee
 800c4de:	4929      	ldr	r1, [pc, #164]	@ (800c584 <recv_udp+0xf8>)
 800c4e0:	4826      	ldr	r0, [pc, #152]	@ (800c57c <recv_udp+0xf0>)
 800c4e2:	f00d fa07 	bl	80198f4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	3310      	adds	r3, #16
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f00c fba2 	bl	8018c34 <sys_mbox_valid>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d103      	bne.n	800c4fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f003 f8b2 	bl	800f660 <pbuf_free>
    return;
 800c4fc:	e036      	b.n	800c56c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c4fe:	2006      	movs	r0, #6
 800c500:	f002 f9b8 	bl	800e874 <memp_malloc>
 800c504:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d103      	bne.n	800c514 <recv_udp+0x88>
    pbuf_free(p);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f003 f8a7 	bl	800f660 <pbuf_free>
    return;
 800c512:	e02b      	b.n	800c56c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <recv_udp+0xa0>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	e000      	b.n	800c52e <recv_udp+0xa2>
 800c52c:	2300      	movs	r3, #0
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c536:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	891b      	ldrh	r3, [r3, #8]
 800c53c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	3310      	adds	r3, #16
 800c542:	69b9      	ldr	r1, [r7, #24]
 800c544:	4618      	mov	r0, r3
 800c546:	f00c fb13 	bl	8018b70 <sys_mbox_trypost>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d003      	beq.n	800c558 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f001 fb01 	bl	800db58 <netbuf_delete>
    return;
 800c556:	e009      	b.n	800c56c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d005      	beq.n	800c56c <recv_udp+0xe0>
 800c560:	69fb      	ldr	r3, [r7, #28]
 800c562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c564:	8afa      	ldrh	r2, [r7, #22]
 800c566:	2100      	movs	r1, #0
 800c568:	69f8      	ldr	r0, [r7, #28]
 800c56a:	4798      	blx	r3
  }
}
 800c56c:	3720      	adds	r7, #32
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	0801c554 	.word	0x0801c554
 800c578:	0801c5cc 	.word	0x0801c5cc
 800c57c:	0801c598 	.word	0x0801c598
 800c580:	0801c5f0 	.word	0x0801c5f0
 800c584:	0801c610 	.word	0x0801c610

0800c588 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b088      	sub	sp, #32
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <recv_tcp+0x22>
 800c59c:	4b36      	ldr	r3, [pc, #216]	@ (800c678 <recv_tcp+0xf0>)
 800c59e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c5a2:	4936      	ldr	r1, [pc, #216]	@ (800c67c <recv_tcp+0xf4>)
 800c5a4:	4836      	ldr	r0, [pc, #216]	@ (800c680 <recv_tcp+0xf8>)
 800c5a6:	f00d f9a5 	bl	80198f4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d106      	bne.n	800c5be <recv_tcp+0x36>
 800c5b0:	4b31      	ldr	r3, [pc, #196]	@ (800c678 <recv_tcp+0xf0>)
 800c5b2:	f240 122d 	movw	r2, #301	@ 0x12d
 800c5b6:	4933      	ldr	r1, [pc, #204]	@ (800c684 <recv_tcp+0xfc>)
 800c5b8:	4831      	ldr	r0, [pc, #196]	@ (800c680 <recv_tcp+0xf8>)
 800c5ba:	f00d f99b 	bl	80198f4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c5be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d006      	beq.n	800c5d4 <recv_tcp+0x4c>
 800c5c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c678 <recv_tcp+0xf0>)
 800c5c8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800c5cc:	492e      	ldr	r1, [pc, #184]	@ (800c688 <recv_tcp+0x100>)
 800c5ce:	482c      	ldr	r0, [pc, #176]	@ (800c680 <recv_tcp+0xf8>)
 800c5d0:	f00d f990 	bl	80198f4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d102      	bne.n	800c5e4 <recv_tcp+0x5c>
    return ERR_VAL;
 800c5de:	f06f 0305 	mvn.w	r3, #5
 800c5e2:	e045      	b.n	800c670 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d006      	beq.n	800c5fc <recv_tcp+0x74>
 800c5ee:	4b22      	ldr	r3, [pc, #136]	@ (800c678 <recv_tcp+0xf0>)
 800c5f0:	f240 1235 	movw	r2, #309	@ 0x135
 800c5f4:	4925      	ldr	r1, [pc, #148]	@ (800c68c <recv_tcp+0x104>)
 800c5f6:	4822      	ldr	r0, [pc, #136]	@ (800c680 <recv_tcp+0xf8>)
 800c5f8:	f00d f97c 	bl	80198f4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	3310      	adds	r3, #16
 800c600:	4618      	mov	r0, r3
 800c602:	f00c fb17 	bl	8018c34 <sys_mbox_valid>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10d      	bne.n	800c628 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d008      	beq.n	800c624 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	891b      	ldrh	r3, [r3, #8]
 800c616:	4619      	mov	r1, r3
 800c618:	68b8      	ldr	r0, [r7, #8]
 800c61a:	f003 ffd9 	bl	80105d0 <tcp_recved>
      pbuf_free(p);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f003 f81e 	bl	800f660 <pbuf_free>
    }
    return ERR_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	e023      	b.n	800c670 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d005      	beq.n	800c63a <recv_tcp+0xb2>
    msg = p;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	891b      	ldrh	r3, [r3, #8]
 800c636:	83fb      	strh	r3, [r7, #30]
 800c638:	e003      	b.n	800c642 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c63a:	4b15      	ldr	r3, [pc, #84]	@ (800c690 <recv_tcp+0x108>)
 800c63c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	3310      	adds	r3, #16
 800c646:	69b9      	ldr	r1, [r7, #24]
 800c648:	4618      	mov	r0, r3
 800c64a:	f00c fa91 	bl	8018b70 <sys_mbox_trypost>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c654:	f04f 33ff 	mov.w	r3, #4294967295
 800c658:	e00a      	b.n	800c670 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d005      	beq.n	800c66e <recv_tcp+0xe6>
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c666:	8bfa      	ldrh	r2, [r7, #30]
 800c668:	2100      	movs	r1, #0
 800c66a:	6978      	ldr	r0, [r7, #20]
 800c66c:	4798      	blx	r3
  }

  return ERR_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3720      	adds	r7, #32
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	0801c554 	.word	0x0801c554
 800c67c:	0801c630 	.word	0x0801c630
 800c680:	0801c598 	.word	0x0801c598
 800c684:	0801c654 	.word	0x0801c654
 800c688:	0801c674 	.word	0x0801c674
 800c68c:	0801c68c 	.word	0x0801c68c
 800c690:	0801f54e 	.word	0x0801f54e

0800c694 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <poll_tcp+0x22>
 800c6a8:	4b29      	ldr	r3, [pc, #164]	@ (800c750 <poll_tcp+0xbc>)
 800c6aa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800c6ae:	4929      	ldr	r1, [pc, #164]	@ (800c754 <poll_tcp+0xc0>)
 800c6b0:	4829      	ldr	r0, [pc, #164]	@ (800c758 <poll_tcp+0xc4>)
 800c6b2:	f00d f91f 	bl	80198f4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	2b01      	cmp	r3, #1
 800c6bc:	d104      	bne.n	800c6c8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c6be:	2101      	movs	r1, #1
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 ff65 	bl	800d590 <lwip_netconn_do_writemore>
 800c6c6:	e016      	b.n	800c6f6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	785b      	ldrb	r3, [r3, #1]
 800c6cc:	2b04      	cmp	r3, #4
 800c6ce:	d112      	bne.n	800c6f6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a1b      	ldr	r3, [r3, #32]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00a      	beq.n	800c6ee <poll_tcp+0x5a>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6a1b      	ldr	r3, [r3, #32]
 800c6dc:	7a5b      	ldrb	r3, [r3, #9]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d005      	beq.n	800c6ee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	7a5a      	ldrb	r2, [r3, #9]
 800c6e8:	3a01      	subs	r2, #1
 800c6ea:	b2d2      	uxtb	r2, r2
 800c6ec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 fbf7 	bl	800cee4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	7f1b      	ldrb	r3, [r3, #28]
 800c6fa:	f003 0310 	and.w	r3, r3, #16
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d021      	beq.n	800c746 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d01d      	beq.n	800c746 <poll_tcp+0xb2>
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c712:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c716:	d316      	bcc.n	800c746 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c720:	2b04      	cmp	r3, #4
 800c722:	d810      	bhi.n	800c746 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	7f1b      	ldrb	r3, [r3, #28]
 800c728:	f023 0310 	bic.w	r3, r3, #16
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <poll_tcp+0xb2>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73e:	2200      	movs	r2, #0
 800c740:	2102      	movs	r1, #2
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3710      	adds	r7, #16
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	0801c554 	.word	0x0801c554
 800c754:	0801c6ac 	.word	0x0801c6ac
 800c758:	0801c598 	.word	0x0801c598

0800c75c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b086      	sub	sp, #24
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	4613      	mov	r3, r2
 800c768:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d106      	bne.n	800c782 <sent_tcp+0x26>
 800c774:	4b20      	ldr	r3, [pc, #128]	@ (800c7f8 <sent_tcp+0x9c>)
 800c776:	f240 1293 	movw	r2, #403	@ 0x193
 800c77a:	4920      	ldr	r1, [pc, #128]	@ (800c7fc <sent_tcp+0xa0>)
 800c77c:	4820      	ldr	r0, [pc, #128]	@ (800c800 <sent_tcp+0xa4>)
 800c77e:	f00d f8b9 	bl	80198f4 <iprintf>

  if (conn) {
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d032      	beq.n	800c7ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	785b      	ldrb	r3, [r3, #1]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d104      	bne.n	800c79a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c790:	2101      	movs	r1, #1
 800c792:	6978      	ldr	r0, [r7, #20]
 800c794:	f000 fefc 	bl	800d590 <lwip_netconn_do_writemore>
 800c798:	e007      	b.n	800c7aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	785b      	ldrb	r3, [r3, #1]
 800c79e:	2b04      	cmp	r3, #4
 800c7a0:	d103      	bne.n	800c7aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	6978      	ldr	r0, [r7, #20]
 800c7a6:	f000 fb9d 	bl	800cee4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d01d      	beq.n	800c7ee <sent_tcp+0x92>
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c7ba:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c7be:	d316      	bcc.n	800c7ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c7c8:	2b04      	cmp	r3, #4
 800c7ca:	d810      	bhi.n	800c7ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	7f1b      	ldrb	r3, [r3, #28]
 800c7d0:	f023 0310 	bic.w	r3, r3, #16
 800c7d4:	b2da      	uxtb	r2, r3
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d005      	beq.n	800c7ee <sent_tcp+0x92>
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e6:	88fa      	ldrh	r2, [r7, #6]
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	6978      	ldr	r0, [r7, #20]
 800c7ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3718      	adds	r7, #24
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	0801c554 	.word	0x0801c554
 800c7fc:	0801c6ac 	.word	0x0801c6ac
 800c800:	0801c598 	.word	0x0801c598

0800c804 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d106      	bne.n	800c828 <err_tcp+0x24>
 800c81a:	4b5f      	ldr	r3, [pc, #380]	@ (800c998 <err_tcp+0x194>)
 800c81c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c820:	495e      	ldr	r1, [pc, #376]	@ (800c99c <err_tcp+0x198>)
 800c822:	485f      	ldr	r0, [pc, #380]	@ (800c9a0 <err_tcp+0x19c>)
 800c824:	f00d f866 	bl	80198f4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c828:	f00c fb0e 	bl	8018e48 <sys_arch_protect>
 800c82c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	2200      	movs	r2, #0
 800c832:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	78fa      	ldrb	r2, [r7, #3]
 800c838:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c83a:	69fb      	ldr	r3, [r7, #28]
 800c83c:	7f1b      	ldrb	r3, [r3, #28]
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	b2da      	uxtb	r2, r3
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	785b      	ldrb	r3, [r3, #1]
 800c84c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	2200      	movs	r2, #0
 800c852:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c854:	69b8      	ldr	r0, [r7, #24]
 800c856:	f00c fb05 	bl	8018e64 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d005      	beq.n	800c86e <err_tcp+0x6a>
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c866:	2200      	movs	r2, #0
 800c868:	2104      	movs	r1, #4
 800c86a:	69f8      	ldr	r0, [r7, #28]
 800c86c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c872:	2b00      	cmp	r3, #0
 800c874:	d005      	beq.n	800c882 <err_tcp+0x7e>
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	69f8      	ldr	r0, [r7, #28]
 800c880:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	d005      	beq.n	800c896 <err_tcp+0x92>
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88e:	2200      	movs	r2, #0
 800c890:	2102      	movs	r1, #2
 800c892:	69f8      	ldr	r0, [r7, #28]
 800c894:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7ff fd86 	bl	800c3ac <lwip_netconn_err_to_msg>
 800c8a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	3310      	adds	r3, #16
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f00c f9c4 	bl	8018c34 <sys_mbox_valid>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d005      	beq.n	800c8be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	3310      	adds	r3, #16
 800c8b6:	6939      	ldr	r1, [r7, #16]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f00c f959 	bl	8018b70 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f00c f9b6 	bl	8018c34 <sys_mbox_valid>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d005      	beq.n	800c8da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	6939      	ldr	r1, [r7, #16]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f00c f94b 	bl	8018b70 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d005      	beq.n	800c8ec <err_tcp+0xe8>
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b04      	cmp	r3, #4
 800c8e4:	d002      	beq.n	800c8ec <err_tcp+0xe8>
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d143      	bne.n	800c974 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	7f1b      	ldrb	r3, [r3, #28]
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bf14      	ite	ne
 800c8f8:	2301      	movne	r3, #1
 800c8fa:	2300      	moveq	r3, #0
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	7f1b      	ldrb	r3, [r3, #28]
 800c904:	f023 0304 	bic.w	r3, r3, #4
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d13b      	bne.n	800c98c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	6a1b      	ldr	r3, [r3, #32]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d106      	bne.n	800c92a <err_tcp+0x126>
 800c91c:	4b1e      	ldr	r3, [pc, #120]	@ (800c998 <err_tcp+0x194>)
 800c91e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c922:	4920      	ldr	r1, [pc, #128]	@ (800c9a4 <err_tcp+0x1a0>)
 800c924:	481e      	ldr	r0, [pc, #120]	@ (800c9a0 <err_tcp+0x19c>)
 800c926:	f00c ffe5 	bl	80198f4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2b04      	cmp	r3, #4
 800c92e:	d104      	bne.n	800c93a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	2200      	movs	r2, #0
 800c936:	711a      	strb	r2, [r3, #4]
 800c938:	e003      	b.n	800c942 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	330c      	adds	r3, #12
 800c94a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c94c:	68b8      	ldr	r0, [r7, #8]
 800c94e:	f00c f9ff 	bl	8018d50 <sys_sem_valid>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <err_tcp+0x162>
 800c958:	4b0f      	ldr	r3, [pc, #60]	@ (800c998 <err_tcp+0x194>)
 800c95a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c95e:	4912      	ldr	r1, [pc, #72]	@ (800c9a8 <err_tcp+0x1a4>)
 800c960:	480f      	ldr	r0, [pc, #60]	@ (800c9a0 <err_tcp+0x19c>)
 800c962:	f00c ffc7 	bl	80198f4 <iprintf>
      conn->current_msg = NULL;
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	2200      	movs	r2, #0
 800c96a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c96c:	68b8      	ldr	r0, [r7, #8]
 800c96e:	f00c f9d5 	bl	8018d1c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c972:	e00b      	b.n	800c98c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d008      	beq.n	800c98e <err_tcp+0x18a>
 800c97c:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <err_tcp+0x194>)
 800c97e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c982:	490a      	ldr	r1, [pc, #40]	@ (800c9ac <err_tcp+0x1a8>)
 800c984:	4806      	ldr	r0, [pc, #24]	@ (800c9a0 <err_tcp+0x19c>)
 800c986:	f00c ffb5 	bl	80198f4 <iprintf>
  }
}
 800c98a:	e000      	b.n	800c98e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c98c:	bf00      	nop
}
 800c98e:	bf00      	nop
 800c990:	3720      	adds	r7, #32
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	0801c554 	.word	0x0801c554
 800c99c:	0801c6ac 	.word	0x0801c6ac
 800c9a0:	0801c598 	.word	0x0801c598
 800c9a4:	0801c6bc 	.word	0x0801c6bc
 800c9a8:	0801c6d8 	.word	0x0801c6d8
 800c9ac:	0801c6f4 	.word	0x0801c6f4

0800c9b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f004 fccd 	bl	8011360 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c9c6:	490a      	ldr	r1, [pc, #40]	@ (800c9f0 <setup_tcp+0x40>)
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f004 fcdb 	bl	8011384 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c9ce:	4909      	ldr	r1, [pc, #36]	@ (800c9f4 <setup_tcp+0x44>)
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f004 fcf9 	bl	80113c8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c9d6:	2202      	movs	r2, #2
 800c9d8:	4907      	ldr	r1, [pc, #28]	@ (800c9f8 <setup_tcp+0x48>)
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f004 fd50 	bl	8011480 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c9e0:	4906      	ldr	r1, [pc, #24]	@ (800c9fc <setup_tcp+0x4c>)
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f004 fd12 	bl	801140c <tcp_err>
}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	0800c589 	.word	0x0800c589
 800c9f4:	0800c75d 	.word	0x0800c75d
 800c9f8:	0800c695 	.word	0x0800c695
 800c9fc:	0800c805 	.word	0x0800c805

0800ca00 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ca00:	b590      	push	{r4, r7, lr}
 800ca02:	b089      	sub	sp, #36	@ 0x24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ca12:	69fb      	ldr	r3, [r7, #28]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <accept_function+0x1e>
    return ERR_VAL;
 800ca18:	f06f 0305 	mvn.w	r3, #5
 800ca1c:	e0a1      	b.n	800cb62 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ca1e:	69fb      	ldr	r3, [r7, #28]
 800ca20:	3314      	adds	r3, #20
 800ca22:	4618      	mov	r0, r3
 800ca24:	f00c f906 	bl	8018c34 <sys_mbox_valid>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ca2e:	f06f 0305 	mvn.w	r3, #5
 800ca32:	e096      	b.n	800cb62 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d11b      	bne.n	800ca72 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	f103 0414 	add.w	r4, r3, #20
 800ca40:	f06f 000c 	mvn.w	r0, #12
 800ca44:	f7ff fcb2 	bl	800c3ac <lwip_netconn_err_to_msg>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f00c f88f 	bl	8018b70 <sys_mbox_trypost>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d109      	bne.n	800ca6c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d005      	beq.n	800ca6c <accept_function+0x6c>
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca64:	2200      	movs	r2, #0
 800ca66:	2100      	movs	r1, #0
 800ca68:	69f8      	ldr	r0, [r7, #28]
 800ca6a:	4798      	blx	r3
    }
    return ERR_VAL;
 800ca6c:	f06f 0305 	mvn.w	r3, #5
 800ca70:	e077      	b.n	800cb62 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ca72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <accept_function+0x88>
 800ca7a:	4b3c      	ldr	r3, [pc, #240]	@ (800cb6c <accept_function+0x16c>)
 800ca7c:	f240 222a 	movw	r2, #554	@ 0x22a
 800ca80:	493b      	ldr	r1, [pc, #236]	@ (800cb70 <accept_function+0x170>)
 800ca82:	483c      	ldr	r0, [pc, #240]	@ (800cb74 <accept_function+0x174>)
 800ca84:	f00c ff36 	bl	80198f4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ca88:	69fb      	ldr	r3, [r7, #28]
 800ca8a:	781a      	ldrb	r2, [r3, #0]
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca90:	4619      	mov	r1, r3
 800ca92:	4610      	mov	r0, r2
 800ca94:	f000 f8f0 	bl	800cc78 <netconn_alloc>
 800ca98:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ca9a:	69bb      	ldr	r3, [r7, #24]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d11b      	bne.n	800cad8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f103 0414 	add.w	r4, r3, #20
 800caa6:	f06f 000c 	mvn.w	r0, #12
 800caaa:	f7ff fc7f 	bl	800c3ac <lwip_netconn_err_to_msg>
 800caae:	4603      	mov	r3, r0
 800cab0:	4619      	mov	r1, r3
 800cab2:	4620      	mov	r0, r4
 800cab4:	f00c f85c 	bl	8018b70 <sys_mbox_trypost>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d109      	bne.n	800cad2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d005      	beq.n	800cad2 <accept_function+0xd2>
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	69f8      	ldr	r0, [r7, #28]
 800cad0:	4798      	blx	r3
    }
    return ERR_MEM;
 800cad2:	f04f 33ff 	mov.w	r3, #4294967295
 800cad6:	e044      	b.n	800cb62 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800cade:	69b8      	ldr	r0, [r7, #24]
 800cae0:	f7ff ff66 	bl	800c9b0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	3314      	adds	r3, #20
 800cae8:	69b9      	ldr	r1, [r7, #24]
 800caea:	4618      	mov	r0, r3
 800caec:	f00c f840 	bl	8018b70 <sys_mbox_trypost>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d02a      	beq.n	800cb4c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800cafc:	2100      	movs	r1, #0
 800cafe:	6978      	ldr	r0, [r7, #20]
 800cb00:	f004 fc2e 	bl	8011360 <tcp_arg>
    tcp_recv(pcb, NULL);
 800cb04:	2100      	movs	r1, #0
 800cb06:	6978      	ldr	r0, [r7, #20]
 800cb08:	f004 fc3c 	bl	8011384 <tcp_recv>
    tcp_sent(pcb, NULL);
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	6978      	ldr	r0, [r7, #20]
 800cb10:	f004 fc5a 	bl	80113c8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800cb14:	2200      	movs	r2, #0
 800cb16:	2100      	movs	r1, #0
 800cb18:	6978      	ldr	r0, [r7, #20]
 800cb1a:	f004 fcb1 	bl	8011480 <tcp_poll>
    tcp_err(pcb, NULL);
 800cb1e:	2100      	movs	r1, #0
 800cb20:	6978      	ldr	r0, [r7, #20]
 800cb22:	f004 fc73 	bl	801140c <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	3310      	adds	r3, #16
 800cb30:	4618      	mov	r0, r3
 800cb32:	f00c f80b 	bl	8018b4c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	3310      	adds	r3, #16
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f00c f88b 	bl	8018c56 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800cb40:	69b8      	ldr	r0, [r7, #24]
 800cb42:	f000 f907 	bl	800cd54 <netconn_free>
    return ERR_MEM;
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4a:	e00a      	b.n	800cb62 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <accept_function+0x160>
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	69f8      	ldr	r0, [r7, #28]
 800cb5e:	4798      	blx	r3
  }

  return ERR_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3724      	adds	r7, #36	@ 0x24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd90      	pop	{r4, r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	0801c554 	.word	0x0801c554
 800cb70:	0801c710 	.word	0x0801c710
 800cb74:	0801c598 	.word	0x0801c598

0800cb78 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800cb78:	b590      	push	{r4, r7, lr}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800cb80:	2300      	movs	r3, #0
 800cb82:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d006      	beq.n	800cb9c <pcb_new+0x24>
 800cb8e:	4b2b      	ldr	r3, [pc, #172]	@ (800cc3c <pcb_new+0xc4>)
 800cb90:	f240 2265 	movw	r2, #613	@ 0x265
 800cb94:	492a      	ldr	r1, [pc, #168]	@ (800cc40 <pcb_new+0xc8>)
 800cb96:	482b      	ldr	r0, [pc, #172]	@ (800cc44 <pcb_new+0xcc>)
 800cb98:	f00c feac 	bl	80198f4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cba6:	2b10      	cmp	r3, #16
 800cba8:	d022      	beq.n	800cbf0 <pcb_new+0x78>
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d133      	bne.n	800cc16 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681c      	ldr	r4, [r3, #0]
 800cbb2:	7bfb      	ldrb	r3, [r7, #15]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f009 fcac 	bl	8016512 <udp_new_ip_type>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d02a      	beq.n	800cc1e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b22      	cmp	r3, #34	@ 0x22
 800cbd0:	d104      	bne.n	800cbdc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6858      	ldr	r0, [r3, #4]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4917      	ldr	r1, [pc, #92]	@ (800cc48 <pcb_new+0xd0>)
 800cbea:	f009 fc19 	bl	8016420 <udp_recv>
      }
      break;
 800cbee:	e016      	b.n	800cc1e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681c      	ldr	r4, [r3, #0]
 800cbf4:	7bfb      	ldrb	r3, [r7, #15]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f004 fba4 	bl	8011344 <tcp_new_ip_type>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00b      	beq.n	800cc22 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff fece 	bl	800c9b0 <setup_tcp>
      }
      break;
 800cc14:	e005      	b.n	800cc22 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	22fa      	movs	r2, #250	@ 0xfa
 800cc1a:	711a      	strb	r2, [r3, #4]
      return;
 800cc1c:	e00a      	b.n	800cc34 <pcb_new+0xbc>
      break;
 800cc1e:	bf00      	nop
 800cc20:	e000      	b.n	800cc24 <pcb_new+0xac>
      break;
 800cc22:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d102      	bne.n	800cc34 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	22ff      	movs	r2, #255	@ 0xff
 800cc32:	711a      	strb	r2, [r3, #4]
  }
}
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0801c554 	.word	0x0801c554
 800cc40:	0801c738 	.word	0x0801c738
 800cc44:	0801c598 	.word	0x0801c598
 800cc48:	0800c48d 	.word	0x0800c48d

0800cc4c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b084      	sub	sp, #16
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d102      	bne.n	800cc6e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f7ff ff85 	bl	800cb78 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cc6e:	bf00      	nop
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cc88:	2007      	movs	r0, #7
 800cc8a:	f001 fdf3 	bl	800e874 <memp_malloc>
 800cc8e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <netconn_alloc+0x22>
    return NULL;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e052      	b.n	800cd40 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	79fa      	ldrb	r2, [r7, #7]
 800cca4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccb2:	2b10      	cmp	r3, #16
 800ccb4:	d004      	beq.n	800ccc0 <netconn_alloc+0x48>
 800ccb6:	2b20      	cmp	r3, #32
 800ccb8:	d105      	bne.n	800ccc6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ccba:	2306      	movs	r3, #6
 800ccbc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ccbe:	e00a      	b.n	800ccd6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ccc0:	2306      	movs	r3, #6
 800ccc2:	617b      	str	r3, [r7, #20]
      break;
 800ccc4:	e007      	b.n	800ccd6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ccc6:	4b20      	ldr	r3, [pc, #128]	@ (800cd48 <netconn_alloc+0xd0>)
 800ccc8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800cccc:	491f      	ldr	r1, [pc, #124]	@ (800cd4c <netconn_alloc+0xd4>)
 800ccce:	4820      	ldr	r0, [pc, #128]	@ (800cd50 <netconn_alloc+0xd8>)
 800ccd0:	f00c fe10 	bl	80198f4 <iprintf>
      goto free_and_return;
 800ccd4:	e02f      	b.n	800cd36 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	3310      	adds	r3, #16
 800ccda:	6979      	ldr	r1, [r7, #20]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f00b ff1b 	bl	8018b18 <sys_mbox_new>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d125      	bne.n	800cd34 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	330c      	adds	r3, #12
 800ccec:	2100      	movs	r1, #0
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f00b ffbe 	bl	8018c70 <sys_sem_new>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d005      	beq.n	800cd06 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3310      	adds	r3, #16
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f00b ff24 	bl	8018b4c <sys_mbox_free>
    goto free_and_return;
 800cd04:	e017      	b.n	800cd36 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3314      	adds	r3, #20
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f00b ffa3 	bl	8018c56 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f04f 32ff 	mov.w	r2, #4294967295
 800cd1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7cfa      	ldrb	r2, [r7, #19]
 800cd2e:	771a      	strb	r2, [r3, #28]
  return conn;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	e005      	b.n	800cd40 <netconn_alloc+0xc8>
    goto free_and_return;
 800cd34:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	2007      	movs	r0, #7
 800cd3a:	f001 fded 	bl	800e918 <memp_free>
  return NULL;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	0801c554 	.word	0x0801c554
 800cd4c:	0801c758 	.word	0x0801c758
 800cd50:	0801c598 	.word	0x0801c598

0800cd54 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d006      	beq.n	800cd72 <netconn_free+0x1e>
 800cd64:	4b1b      	ldr	r3, [pc, #108]	@ (800cdd4 <netconn_free+0x80>)
 800cd66:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cd6a:	491b      	ldr	r1, [pc, #108]	@ (800cdd8 <netconn_free+0x84>)
 800cd6c:	481b      	ldr	r0, [pc, #108]	@ (800cddc <netconn_free+0x88>)
 800cd6e:	f00c fdc1 	bl	80198f4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3310      	adds	r3, #16
 800cd76:	4618      	mov	r0, r3
 800cd78:	f00b ff5c 	bl	8018c34 <sys_mbox_valid>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d006      	beq.n	800cd90 <netconn_free+0x3c>
 800cd82:	4b14      	ldr	r3, [pc, #80]	@ (800cdd4 <netconn_free+0x80>)
 800cd84:	f240 3223 	movw	r2, #803	@ 0x323
 800cd88:	4915      	ldr	r1, [pc, #84]	@ (800cde0 <netconn_free+0x8c>)
 800cd8a:	4814      	ldr	r0, [pc, #80]	@ (800cddc <netconn_free+0x88>)
 800cd8c:	f00c fdb2 	bl	80198f4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3314      	adds	r3, #20
 800cd94:	4618      	mov	r0, r3
 800cd96:	f00b ff4d 	bl	8018c34 <sys_mbox_valid>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <netconn_free+0x5a>
 800cda0:	4b0c      	ldr	r3, [pc, #48]	@ (800cdd4 <netconn_free+0x80>)
 800cda2:	f240 3226 	movw	r2, #806	@ 0x326
 800cda6:	490f      	ldr	r1, [pc, #60]	@ (800cde4 <netconn_free+0x90>)
 800cda8:	480c      	ldr	r0, [pc, #48]	@ (800cddc <netconn_free+0x88>)
 800cdaa:	f00c fda3 	bl	80198f4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	330c      	adds	r3, #12
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f00b ffbf 	bl	8018d36 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	330c      	adds	r3, #12
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f00b ffd8 	bl	8018d72 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800cdc2:	6879      	ldr	r1, [r7, #4]
 800cdc4:	2007      	movs	r0, #7
 800cdc6:	f001 fda7 	bl	800e918 <memp_free>
}
 800cdca:	bf00      	nop
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0801c554 	.word	0x0801c554
 800cdd8:	0801c780 	.word	0x0801c780
 800cddc:	0801c598 	.word	0x0801c598
 800cde0:	0801c7b0 	.word	0x0801c7b0
 800cde4:	0801c7ec 	.word	0x0801c7ec

0800cde8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	3310      	adds	r3, #16
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f00b ff1d 	bl	8018c34 <sys_mbox_valid>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d02f      	beq.n	800ce60 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce00:	e018      	b.n	800ce34 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce0a:	2b10      	cmp	r3, #16
 800ce0c:	d10e      	bne.n	800ce2c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f107 020f 	add.w	r2, r7, #15
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fafe 	bl	800c418 <lwip_netconn_is_err_msg>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d108      	bne.n	800ce34 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f002 fc1b 	bl	800f660 <pbuf_free>
 800ce2a:	e003      	b.n	800ce34 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 fe92 	bl	800db58 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3310      	adds	r3, #16
 800ce38:	f107 0210 	add.w	r2, r7, #16
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f00b fee1 	bl	8018c06 <sys_arch_mbox_tryfetch>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4a:	d1da      	bne.n	800ce02 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	3310      	adds	r3, #16
 800ce50:	4618      	mov	r0, r3
 800ce52:	f00b fe7b 	bl	8018b4c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	3310      	adds	r3, #16
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f00b fefb 	bl	8018c56 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3314      	adds	r3, #20
 800ce64:	4618      	mov	r0, r3
 800ce66:	f00b fee5 	bl	8018c34 <sys_mbox_valid>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d034      	beq.n	800ceda <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce70:	e01d      	b.n	800ceae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f107 020e 	add.w	r2, r7, #14
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff facc 	bl	800c418 <lwip_netconn_is_err_msg>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d113      	bne.n	800ceae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ce8a:	6978      	ldr	r0, [r7, #20]
 800ce8c:	f7ff ffac 	bl	800cde8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d007      	beq.n	800cea8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f003 f9cf 	bl	8010240 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800cea8:	6978      	ldr	r0, [r7, #20]
 800ceaa:	f7ff ff53 	bl	800cd54 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3314      	adds	r3, #20
 800ceb2:	f107 0210 	add.w	r2, r7, #16
 800ceb6:	4611      	mov	r1, r2
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f00b fea4 	bl	8018c06 <sys_arch_mbox_tryfetch>
 800cebe:	4603      	mov	r3, r0
 800cec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cec4:	d1d5      	bne.n	800ce72 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	3314      	adds	r3, #20
 800ceca:	4618      	mov	r0, r3
 800cecc:	f00b fe3e 	bl	8018b4c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	3314      	adds	r3, #20
 800ced4:	4618      	mov	r0, r3
 800ced6:	f00b febe 	bl	8018c56 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ceda:	bf00      	nop
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d106      	bne.n	800cf08 <lwip_netconn_do_close_internal+0x24>
 800cefa:	4b87      	ldr	r3, [pc, #540]	@ (800d118 <lwip_netconn_do_close_internal+0x234>)
 800cefc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800cf00:	4986      	ldr	r1, [pc, #536]	@ (800d11c <lwip_netconn_do_close_internal+0x238>)
 800cf02:	4887      	ldr	r0, [pc, #540]	@ (800d120 <lwip_netconn_do_close_internal+0x23c>)
 800cf04:	f00c fcf6 	bl	80198f4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf10:	2b10      	cmp	r3, #16
 800cf12:	d006      	beq.n	800cf22 <lwip_netconn_do_close_internal+0x3e>
 800cf14:	4b80      	ldr	r3, [pc, #512]	@ (800d118 <lwip_netconn_do_close_internal+0x234>)
 800cf16:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800cf1a:	4982      	ldr	r1, [pc, #520]	@ (800d124 <lwip_netconn_do_close_internal+0x240>)
 800cf1c:	4880      	ldr	r0, [pc, #512]	@ (800d120 <lwip_netconn_do_close_internal+0x23c>)
 800cf1e:	f00c fce9 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	785b      	ldrb	r3, [r3, #1]
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	d006      	beq.n	800cf38 <lwip_netconn_do_close_internal+0x54>
 800cf2a:	4b7b      	ldr	r3, [pc, #492]	@ (800d118 <lwip_netconn_do_close_internal+0x234>)
 800cf2c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800cf30:	497d      	ldr	r1, [pc, #500]	@ (800d128 <lwip_netconn_do_close_internal+0x244>)
 800cf32:	487b      	ldr	r0, [pc, #492]	@ (800d120 <lwip_netconn_do_close_internal+0x23c>)
 800cf34:	f00c fcde 	bl	80198f4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d106      	bne.n	800cf4e <lwip_netconn_do_close_internal+0x6a>
 800cf40:	4b75      	ldr	r3, [pc, #468]	@ (800d118 <lwip_netconn_do_close_internal+0x234>)
 800cf42:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800cf46:	4979      	ldr	r1, [pc, #484]	@ (800d12c <lwip_netconn_do_close_internal+0x248>)
 800cf48:	4875      	ldr	r0, [pc, #468]	@ (800d120 <lwip_netconn_do_close_internal+0x23c>)
 800cf4a:	f00c fcd3 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <lwip_netconn_do_close_internal+0x80>
 800cf56:	4b70      	ldr	r3, [pc, #448]	@ (800d118 <lwip_netconn_do_close_internal+0x234>)
 800cf58:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cf5c:	4974      	ldr	r1, [pc, #464]	@ (800d130 <lwip_netconn_do_close_internal+0x24c>)
 800cf5e:	4870      	ldr	r0, [pc, #448]	@ (800d120 <lwip_netconn_do_close_internal+0x23c>)
 800cf60:	f00c fcc8 	bl	80198f4 <iprintf>

  tpcb = conn->pcb.tcp;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	7a1b      	ldrb	r3, [r3, #8]
 800cf70:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800cf7a:	7bfb      	ldrb	r3, [r7, #15]
 800cf7c:	f003 0302 	and.w	r3, r3, #2
 800cf80:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
 800cf84:	2b03      	cmp	r3, #3
 800cf86:	d102      	bne.n	800cf8e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	75bb      	strb	r3, [r7, #22]
 800cf8c:	e01f      	b.n	800cfce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00e      	beq.n	800cfb2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800cf98:	2b05      	cmp	r3, #5
 800cf9a:	d007      	beq.n	800cfac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800cfa0:	2b06      	cmp	r3, #6
 800cfa2:	d003      	beq.n	800cfac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800cfa8:	2b08      	cmp	r3, #8
 800cfaa:	d102      	bne.n	800cfb2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	75bb      	strb	r3, [r7, #22]
 800cfb0:	e00d      	b.n	800cfce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800cfb2:	7b7b      	ldrb	r3, [r7, #13]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d008      	beq.n	800cfca <lwip_netconn_do_close_internal+0xe6>
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	8b5b      	ldrh	r3, [r3, #26]
 800cfbc:	f003 0310 	and.w	r3, r3, #16
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	75bb      	strb	r3, [r7, #22]
 800cfc8:	e001      	b.n	800cfce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800cfce:	7dbb      	ldrb	r3, [r7, #22]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	6938      	ldr	r0, [r7, #16]
 800cfd8:	f004 f9c2 	bl	8011360 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	7d1b      	ldrb	r3, [r3, #20]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d104      	bne.n	800cfee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	6938      	ldr	r0, [r7, #16]
 800cfe8:	f004 fa32 	bl	8011450 <tcp_accept>
 800cfec:	e01d      	b.n	800d02a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800cfee:	7bbb      	ldrb	r3, [r7, #14]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d007      	beq.n	800d004 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cff4:	2100      	movs	r1, #0
 800cff6:	6938      	ldr	r0, [r7, #16]
 800cff8:	f004 f9c4 	bl	8011384 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cffc:	2100      	movs	r1, #0
 800cffe:	6938      	ldr	r0, [r7, #16]
 800d000:	f004 fa26 	bl	8011450 <tcp_accept>
    }
    if (shut_tx) {
 800d004:	7b7b      	ldrb	r3, [r7, #13]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d003      	beq.n	800d012 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d00a:	2100      	movs	r1, #0
 800d00c:	6938      	ldr	r0, [r7, #16]
 800d00e:	f004 f9db 	bl	80113c8 <tcp_sent>
    }
    if (shut_close) {
 800d012:	7dbb      	ldrb	r3, [r7, #22]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d008      	beq.n	800d02a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d018:	2200      	movs	r2, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	6938      	ldr	r0, [r7, #16]
 800d01e:	f004 fa2f 	bl	8011480 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d022:	2100      	movs	r1, #0
 800d024:	6938      	ldr	r0, [r7, #16]
 800d026:	f004 f9f1 	bl	801140c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d02a:	7dbb      	ldrb	r3, [r7, #22]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d030:	6938      	ldr	r0, [r7, #16]
 800d032:	f002 ffbf 	bl	800ffb4 <tcp_close>
 800d036:	4603      	mov	r3, r0
 800d038:	75fb      	strb	r3, [r7, #23]
 800d03a:	e007      	b.n	800d04c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d03c:	7bbb      	ldrb	r3, [r7, #14]
 800d03e:	7b7a      	ldrb	r2, [r7, #13]
 800d040:	4619      	mov	r1, r3
 800d042:	6938      	ldr	r0, [r7, #16]
 800d044:	f002 ffe2 	bl	801000c <tcp_shutdown>
 800d048:	4603      	mov	r3, r0
 800d04a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d04c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d102      	bne.n	800d05a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d054:	2301      	movs	r3, #1
 800d056:	757b      	strb	r3, [r7, #21]
 800d058:	e016      	b.n	800d088 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d062:	d10f      	bne.n	800d084 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	7a5b      	ldrb	r3, [r3, #9]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10c      	bne.n	800d088 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d06e:	2301      	movs	r3, #1
 800d070:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d072:	7dbb      	ldrb	r3, [r7, #22]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d007      	beq.n	800d088 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d078:	6938      	ldr	r0, [r7, #16]
 800d07a:	f003 f8e1 	bl	8010240 <tcp_abort>
          err = ERR_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	75fb      	strb	r3, [r7, #23]
 800d082:	e001      	b.n	800d088 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d084:	2301      	movs	r3, #1
 800d086:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d088:	7d7b      	ldrb	r3, [r7, #21]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d052      	beq.n	800d134 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	330c      	adds	r3, #12
 800d096:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a1b      	ldr	r3, [r3, #32]
 800d09c:	7dfa      	ldrb	r2, [r7, #23]
 800d09e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d129      	bne.n	800d108 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d0b4:	7dbb      	ldrb	r3, [r7, #22]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00c      	beq.n	800d0d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d005      	beq.n	800d0d4 <lwip_netconn_do_close_internal+0x1f0>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2104      	movs	r1, #4
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	4798      	blx	r3
      }
      if (shut_rx) {
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d005      	beq.n	800d0ee <lwip_netconn_do_close_internal+0x20a>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	2100      	movs	r1, #0
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	4798      	blx	r3
      }
      if (shut_tx) {
 800d0ee:	7b7b      	ldrb	r3, [r7, #13]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d009      	beq.n	800d108 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d005      	beq.n	800d108 <lwip_netconn_do_close_internal+0x224>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d100:	2200      	movs	r2, #0
 800d102:	2102      	movs	r1, #2
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d108:	78fb      	ldrb	r3, [r7, #3]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d10e:	68b8      	ldr	r0, [r7, #8]
 800d110:	f00b fe04 	bl	8018d1c <sys_sem_signal>
    }
    return ERR_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	e03c      	b.n	800d192 <lwip_netconn_do_close_internal+0x2ae>
 800d118:	0801c554 	.word	0x0801c554
 800d11c:	0801c828 	.word	0x0801c828
 800d120:	0801c598 	.word	0x0801c598
 800d124:	0801c838 	.word	0x0801c838
 800d128:	0801c858 	.word	0x0801c858
 800d12c:	0801c87c 	.word	0x0801c87c
 800d130:	0801c6bc 	.word	0x0801c6bc
  }
  if (!close_finished) {
 800d134:	7d7b      	ldrb	r3, [r7, #21]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d11e      	bne.n	800d178 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	7d1b      	ldrb	r3, [r3, #20]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d106      	bne.n	800d150 <lwip_netconn_do_close_internal+0x26c>
 800d142:	4b16      	ldr	r3, [pc, #88]	@ (800d19c <lwip_netconn_do_close_internal+0x2b8>)
 800d144:	f240 4241 	movw	r2, #1089	@ 0x441
 800d148:	4915      	ldr	r1, [pc, #84]	@ (800d1a0 <lwip_netconn_do_close_internal+0x2bc>)
 800d14a:	4816      	ldr	r0, [pc, #88]	@ (800d1a4 <lwip_netconn_do_close_internal+0x2c0>)
 800d14c:	f00c fbd2 	bl	80198f4 <iprintf>
    if (shut_tx) {
 800d150:	7b7b      	ldrb	r3, [r7, #13]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d156:	4914      	ldr	r1, [pc, #80]	@ (800d1a8 <lwip_netconn_do_close_internal+0x2c4>)
 800d158:	6938      	ldr	r0, [r7, #16]
 800d15a:	f004 f935 	bl	80113c8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d15e:	2201      	movs	r2, #1
 800d160:	4912      	ldr	r1, [pc, #72]	@ (800d1ac <lwip_netconn_do_close_internal+0x2c8>)
 800d162:	6938      	ldr	r0, [r7, #16]
 800d164:	f004 f98c 	bl	8011480 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d168:	4911      	ldr	r1, [pc, #68]	@ (800d1b0 <lwip_netconn_do_close_internal+0x2cc>)
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f004 f94e 	bl	801140c <tcp_err>
    tcp_arg(tpcb, conn);
 800d170:	6879      	ldr	r1, [r7, #4]
 800d172:	6938      	ldr	r0, [r7, #16]
 800d174:	f004 f8f4 	bl	8011360 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <lwip_netconn_do_close_internal+0x2aa>
 800d180:	4b06      	ldr	r3, [pc, #24]	@ (800d19c <lwip_netconn_do_close_internal+0x2b8>)
 800d182:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d186:	490b      	ldr	r1, [pc, #44]	@ (800d1b4 <lwip_netconn_do_close_internal+0x2d0>)
 800d188:	4806      	ldr	r0, [pc, #24]	@ (800d1a4 <lwip_netconn_do_close_internal+0x2c0>)
 800d18a:	f00c fbb3 	bl	80198f4 <iprintf>
  return err;
 800d18e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	0801c554 	.word	0x0801c554
 800d1a0:	0801c890 	.word	0x0801c890
 800d1a4:	0801c598 	.word	0x0801c598
 800d1a8:	0800c75d 	.word	0x0800c75d
 800d1ac:	0800c695 	.word	0x0800c695
 800d1b0:	0800c805 	.word	0x0800c805
 800d1b4:	0801c8b4 	.word	0x0801c8b4

0800d1b8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	785b      	ldrb	r3, [r3, #1]
 800d1ca:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d1cc:	7afb      	ldrb	r3, [r7, #11]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00d      	beq.n	800d1ee <lwip_netconn_do_delconn+0x36>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1dc:	2b10      	cmp	r3, #16
 800d1de:	d006      	beq.n	800d1ee <lwip_netconn_do_delconn+0x36>
 800d1e0:	4b60      	ldr	r3, [pc, #384]	@ (800d364 <lwip_netconn_do_delconn+0x1ac>)
 800d1e2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d1e6:	4960      	ldr	r1, [pc, #384]	@ (800d368 <lwip_netconn_do_delconn+0x1b0>)
 800d1e8:	4860      	ldr	r0, [pc, #384]	@ (800d36c <lwip_netconn_do_delconn+0x1b4>)
 800d1ea:	f00c fb83 	bl	80198f4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d1ee:	7afb      	ldrb	r3, [r7, #11]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d005      	beq.n	800d200 <lwip_netconn_do_delconn+0x48>
 800d1f4:	7afb      	ldrb	r3, [r7, #11]
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d002      	beq.n	800d200 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d1fa:	7afb      	ldrb	r3, [r7, #11]
 800d1fc:	2b03      	cmp	r3, #3
 800d1fe:	d109      	bne.n	800d214 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d200:	7afb      	ldrb	r3, [r7, #11]
 800d202:	2b03      	cmp	r3, #3
 800d204:	d10a      	bne.n	800d21c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	7f1b      	ldrb	r3, [r3, #28]
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	2b00      	cmp	r3, #0
 800d212:	d103      	bne.n	800d21c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	22fb      	movs	r2, #251	@ 0xfb
 800d218:	711a      	strb	r2, [r3, #4]
 800d21a:	e097      	b.n	800d34c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d21c:	7afb      	ldrb	r3, [r7, #11]
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d10d      	bne.n	800d23e <lwip_netconn_do_delconn+0x86>
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	7f1b      	ldrb	r3, [r3, #28]
 800d228:	f003 0304 	and.w	r3, r3, #4
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d106      	bne.n	800d23e <lwip_netconn_do_delconn+0x86>
 800d230:	4b4c      	ldr	r3, [pc, #304]	@ (800d364 <lwip_netconn_do_delconn+0x1ac>)
 800d232:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d236:	494e      	ldr	r1, [pc, #312]	@ (800d370 <lwip_netconn_do_delconn+0x1b8>)
 800d238:	484c      	ldr	r0, [pc, #304]	@ (800d36c <lwip_netconn_do_delconn+0x1b4>)
 800d23a:	f00c fb5b 	bl	80198f4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	f7ff fdcd 	bl	800cde8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d05f      	beq.n	800d318 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	781b      	ldrb	r3, [r3, #0]
 800d25e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d262:	2b10      	cmp	r3, #16
 800d264:	d00d      	beq.n	800d282 <lwip_netconn_do_delconn+0xca>
 800d266:	2b20      	cmp	r3, #32
 800d268:	d151      	bne.n	800d30e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f009 f8f0 	bl	8016460 <udp_remove>
          break;
 800d280:	e046      	b.n	800d310 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <lwip_netconn_do_delconn+0xe2>
 800d28c:	4b35      	ldr	r3, [pc, #212]	@ (800d364 <lwip_netconn_do_delconn+0x1ac>)
 800d28e:	f240 4294 	movw	r2, #1172	@ 0x494
 800d292:	4938      	ldr	r1, [pc, #224]	@ (800d374 <lwip_netconn_do_delconn+0x1bc>)
 800d294:	4835      	ldr	r0, [pc, #212]	@ (800d36c <lwip_netconn_do_delconn+0x1b4>)
 800d296:	f00c fb2d 	bl	80198f4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2204      	movs	r2, #4
 800d2a0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2203      	movs	r2, #3
 800d2a6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7ff fe14 	bl	800cee4 <lwip_netconn_do_close_internal>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d04b      	beq.n	800d35a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	785b      	ldrb	r3, [r3, #1]
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	d006      	beq.n	800d2da <lwip_netconn_do_delconn+0x122>
 800d2cc:	4b25      	ldr	r3, [pc, #148]	@ (800d364 <lwip_netconn_do_delconn+0x1ac>)
 800d2ce:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d2d2:	4929      	ldr	r1, [pc, #164]	@ (800d378 <lwip_netconn_do_delconn+0x1c0>)
 800d2d4:	4825      	ldr	r0, [pc, #148]	@ (800d36c <lwip_netconn_do_delconn+0x1b4>)
 800d2d6:	f00c fb0d 	bl	80198f4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d2da:	4828      	ldr	r0, [pc, #160]	@ (800d37c <lwip_netconn_do_delconn+0x1c4>)
 800d2dc:	f00b fd87 	bl	8018dee <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	330c      	adds	r3, #12
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f00b fce6 	bl	8018cba <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d2ee:	4823      	ldr	r0, [pc, #140]	@ (800d37c <lwip_netconn_do_delconn+0x1c4>)
 800d2f0:	f00b fd6e 	bl	8018dd0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	785b      	ldrb	r3, [r3, #1]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d02d      	beq.n	800d35a <lwip_netconn_do_delconn+0x1a2>
 800d2fe:	4b19      	ldr	r3, [pc, #100]	@ (800d364 <lwip_netconn_do_delconn+0x1ac>)
 800d300:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d304:	491c      	ldr	r1, [pc, #112]	@ (800d378 <lwip_netconn_do_delconn+0x1c0>)
 800d306:	4819      	ldr	r0, [pc, #100]	@ (800d36c <lwip_netconn_do_delconn+0x1b4>)
 800d308:	f00c faf4 	bl	80198f4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d30c:	e025      	b.n	800d35a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d30e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2200      	movs	r2, #0
 800d316:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d007      	beq.n	800d332 <lwip_netconn_do_delconn+0x17a>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	6810      	ldr	r0, [r2, #0]
 800d32c:	2200      	movs	r2, #0
 800d32e:	2100      	movs	r1, #0
 800d330:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d007      	beq.n	800d34c <lwip_netconn_do_delconn+0x194>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	6810      	ldr	r0, [r2, #0]
 800d346:	2200      	movs	r2, #0
 800d348:	2102      	movs	r1, #2
 800d34a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	330c      	adds	r3, #12
 800d352:	4618      	mov	r0, r3
 800d354:	f00b fcfc 	bl	8018d50 <sys_sem_valid>
 800d358:	e000      	b.n	800d35c <lwip_netconn_do_delconn+0x1a4>
          return;
 800d35a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	0801c554 	.word	0x0801c554
 800d368:	0801c8c4 	.word	0x0801c8c4
 800d36c:	0801c598 	.word	0x0801c598
 800d370:	0801c8d8 	.word	0x0801c8d8
 800d374:	0801c8f8 	.word	0x0801c8f8
 800d378:	0801c914 	.word	0x0801c914
 800d37c:	2000c400 	.word	0x2000c400

0800d380 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d025      	beq.n	800d3e2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d3a0:	2b10      	cmp	r3, #16
 800d3a2:	d00e      	beq.n	800d3c2 <lwip_netconn_do_bind+0x42>
 800d3a4:	2b20      	cmp	r3, #32
 800d3a6:	d119      	bne.n	800d3dc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	6858      	ldr	r0, [r3, #4]
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	6899      	ldr	r1, [r3, #8]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	899b      	ldrh	r3, [r3, #12]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f008 ffaa 	bl	8016310 <udp_bind>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	73fb      	strb	r3, [r7, #15]
        break;
 800d3c0:	e011      	b.n	800d3e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	6858      	ldr	r0, [r3, #4]
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	6899      	ldr	r1, [r3, #8]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	899b      	ldrh	r3, [r3, #12]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	f002 ff41 	bl	8010258 <tcp_bind>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	73fb      	strb	r3, [r7, #15]
        break;
 800d3da:	e004      	b.n	800d3e6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d3dc:	23fa      	movs	r3, #250	@ 0xfa
 800d3de:	73fb      	strb	r3, [r7, #15]
        break;
 800d3e0:	e001      	b.n	800d3e6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d3e2:	23fa      	movs	r3, #250	@ 0xfa
 800d3e4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	7bfa      	ldrb	r2, [r7, #15]
 800d3ea:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d3ec:	bf00      	nop
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d07f      	beq.n	800d50a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d414:	2b10      	cmp	r3, #16
 800d416:	d175      	bne.n	800d504 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	785b      	ldrb	r3, [r3, #1]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d165      	bne.n	800d4ee <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	7d1b      	ldrb	r3, [r3, #20]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d42e:	23fa      	movs	r3, #250	@ 0xfa
 800d430:	72fb      	strb	r3, [r7, #11]
 800d432:	e06c      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d434:	23ff      	movs	r3, #255	@ 0xff
 800d436:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	f107 020b 	add.w	r2, r7, #11
 800d442:	7cf9      	ldrb	r1, [r7, #19]
 800d444:	4618      	mov	r0, r3
 800d446:	f002 ffbf 	bl	80103c8 <tcp_listen_with_backlog_and_err>
 800d44a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d05d      	beq.n	800d50e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	3310      	adds	r3, #16
 800d458:	4618      	mov	r0, r3
 800d45a:	f00b fbeb 	bl	8018c34 <sys_mbox_valid>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00b      	beq.n	800d47c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	3310      	adds	r3, #16
 800d46a:	4618      	mov	r0, r3
 800d46c:	f00b fb6e 	bl	8018b4c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3310      	adds	r3, #16
 800d476:	4618      	mov	r0, r3
 800d478:	f00b fbed 	bl	8018c56 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3314      	adds	r3, #20
 800d486:	4618      	mov	r0, r3
 800d488:	f00b fbd4 	bl	8018c34 <sys_mbox_valid>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d108      	bne.n	800d4a4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	3314      	adds	r3, #20
 800d498:	2106      	movs	r1, #6
 800d49a:	4618      	mov	r0, r3
 800d49c:	f00b fb3c 	bl	8018b18 <sys_mbox_new>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d4a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d118      	bne.n	800d4de <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2202      	movs	r2, #2
 800d4b2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	4610      	mov	r0, r2
 800d4ca:	f003 ff49 	bl	8011360 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	4912      	ldr	r1, [pc, #72]	@ (800d520 <lwip_netconn_do_listen+0x12c>)
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f003 ffba 	bl	8011450 <tcp_accept>
 800d4dc:	e017      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f002 fd68 	bl	800ffb4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	605a      	str	r2, [r3, #4]
 800d4ec:	e00f      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d102      	bne.n	800d4fe <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	72fb      	strb	r3, [r7, #11]
 800d4fc:	e007      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800d4fe:	23f5      	movs	r3, #245	@ 0xf5
 800d500:	72fb      	strb	r3, [r7, #11]
 800d502:	e004      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800d504:	23f0      	movs	r3, #240	@ 0xf0
 800d506:	72fb      	strb	r3, [r7, #11]
 800d508:	e001      	b.n	800d50e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800d50a:	23f5      	movs	r3, #245	@ 0xf5
 800d50c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800d50e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d516:	bf00      	nop
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	0800ca01 	.word	0x0800ca01

0800d524 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b086      	sub	sp, #24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	2200      	movs	r2, #0
 800d534:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d022      	beq.n	800d586 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d54a:	2b10      	cmp	r3, #16
 800d54c:	d11b      	bne.n	800d586 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	689b      	ldr	r3, [r3, #8]
 800d552:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d55a:	d202      	bcs.n	800d562 <lwip_netconn_do_recv+0x3e>
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	b29b      	uxth	r3, r3
 800d560:	e001      	b.n	800d566 <lwip_netconn_do_recv+0x42>
 800d562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d566:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	89fa      	ldrh	r2, [r7, #14]
 800d570:	4611      	mov	r1, r2
 800d572:	4618      	mov	r0, r3
 800d574:	f003 f82c 	bl	80105d0 <tcp_recved>
        remaining -= recved;
 800d578:	89fb      	ldrh	r3, [r7, #14]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d1e6      	bne.n	800d554 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d586:	bf00      	nop
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d59c:	2300      	movs	r3, #0
 800d59e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d106      	bne.n	800d5b4 <lwip_netconn_do_writemore+0x24>
 800d5a6:	4b96      	ldr	r3, [pc, #600]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d5a8:	f240 6273 	movw	r2, #1651	@ 0x673
 800d5ac:	4995      	ldr	r1, [pc, #596]	@ (800d804 <lwip_netconn_do_writemore+0x274>)
 800d5ae:	4896      	ldr	r0, [pc, #600]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d5b0:	f00c f9a0 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	785b      	ldrb	r3, [r3, #1]
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	d006      	beq.n	800d5ca <lwip_netconn_do_writemore+0x3a>
 800d5bc:	4b90      	ldr	r3, [pc, #576]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d5be:	f240 6274 	movw	r2, #1652	@ 0x674
 800d5c2:	4992      	ldr	r1, [pc, #584]	@ (800d80c <lwip_netconn_do_writemore+0x27c>)
 800d5c4:	4890      	ldr	r0, [pc, #576]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d5c6:	f00c f995 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a1b      	ldr	r3, [r3, #32]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <lwip_netconn_do_writemore+0x50>
 800d5d2:	4b8b      	ldr	r3, [pc, #556]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d5d4:	f240 6275 	movw	r2, #1653	@ 0x675
 800d5d8:	498d      	ldr	r1, [pc, #564]	@ (800d810 <lwip_netconn_do_writemore+0x280>)
 800d5da:	488b      	ldr	r0, [pc, #556]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d5dc:	f00c f98a 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d106      	bne.n	800d5f6 <lwip_netconn_do_writemore+0x66>
 800d5e8:	4b85      	ldr	r3, [pc, #532]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d5ea:	f240 6276 	movw	r2, #1654	@ 0x676
 800d5ee:	4989      	ldr	r1, [pc, #548]	@ (800d814 <lwip_netconn_do_writemore+0x284>)
 800d5f0:	4885      	ldr	r0, [pc, #532]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d5f2:	f00c f97f 	bl	80198f4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	699a      	ldr	r2, [r3, #24]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a1b      	ldr	r3, [r3, #32]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	429a      	cmp	r2, r3
 800d604:	d306      	bcc.n	800d614 <lwip_netconn_do_writemore+0x84>
 800d606:	4b7e      	ldr	r3, [pc, #504]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d608:	f240 6277 	movw	r2, #1655	@ 0x677
 800d60c:	4982      	ldr	r1, [pc, #520]	@ (800d818 <lwip_netconn_do_writemore+0x288>)
 800d60e:	487e      	ldr	r0, [pc, #504]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d610:	f00c f970 	bl	80198f4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	899b      	ldrh	r3, [r3, #12]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d106      	bne.n	800d62c <lwip_netconn_do_writemore+0x9c>
 800d61e:	4b78      	ldr	r3, [pc, #480]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d620:	f240 6279 	movw	r2, #1657	@ 0x679
 800d624:	497d      	ldr	r1, [pc, #500]	@ (800d81c <lwip_netconn_do_writemore+0x28c>)
 800d626:	4878      	ldr	r0, [pc, #480]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d628:	f00c f964 	bl	80198f4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a1b      	ldr	r3, [r3, #32]
 800d630:	7f1b      	ldrb	r3, [r3, #28]
 800d632:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7f1b      	ldrb	r3, [r3, #28]
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d104      	bne.n	800d64a <lwip_netconn_do_writemore+0xba>
 800d640:	7ebb      	ldrb	r3, [r7, #26]
 800d642:	f003 0304 	and.w	r3, r3, #4
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <lwip_netconn_do_writemore+0xbe>
 800d64a:	2301      	movs	r3, #1
 800d64c:	e000      	b.n	800d650 <lwip_netconn_do_writemore+0xc0>
 800d64e:	2300      	movs	r3, #0
 800d650:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	4413      	add	r3, r2
 800d662:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6a1b      	ldr	r3, [r3, #32]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d67c:	d307      	bcc.n	800d68e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d67e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d682:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d684:	7ebb      	ldrb	r3, [r7, #26]
 800d686:	f043 0302 	orr.w	r3, r3, #2
 800d68a:	76bb      	strb	r3, [r7, #26]
 800d68c:	e001      	b.n	800d692 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d69a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d69c:	89fa      	ldrh	r2, [r7, #14]
 800d69e:	8bbb      	ldrh	r3, [r7, #28]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d216      	bcs.n	800d6d2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d6a4:	89fb      	ldrh	r3, [r7, #14]
 800d6a6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d6a8:	7e3b      	ldrb	r3, [r7, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00d      	beq.n	800d6ca <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d6ae:	8bbb      	ldrh	r3, [r7, #28]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10e      	bne.n	800d6d2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	699b      	ldr	r3, [r3, #24]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <lwip_netconn_do_writemore+0x134>
 800d6be:	f06f 0306 	mvn.w	r3, #6
 800d6c2:	e000      	b.n	800d6c6 <lwip_netconn_do_writemore+0x136>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d6c8:	e07d      	b.n	800d7c6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d6ca:	7ebb      	ldrb	r3, [r7, #26]
 800d6cc:	f043 0302 	orr.w	r3, r3, #2
 800d6d0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6a1b      	ldr	r3, [r3, #32]
 800d6d6:	691a      	ldr	r2, [r3, #16]
 800d6d8:	8bbb      	ldrh	r3, [r7, #28]
 800d6da:	441a      	add	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d906      	bls.n	800d6f6 <lwip_netconn_do_writemore+0x166>
 800d6e8:	4b45      	ldr	r3, [pc, #276]	@ (800d800 <lwip_netconn_do_writemore+0x270>)
 800d6ea:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d6ee:	494c      	ldr	r1, [pc, #304]	@ (800d820 <lwip_netconn_do_writemore+0x290>)
 800d6f0:	4845      	ldr	r0, [pc, #276]	@ (800d808 <lwip_netconn_do_writemore+0x278>)
 800d6f2:	f00c f8ff 	bl	80198f4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d6f6:	8bbb      	ldrh	r3, [r7, #28]
 800d6f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d103      	bne.n	800d708 <lwip_netconn_do_writemore+0x178>
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d706:	d209      	bcs.n	800d71c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d70c:	8bba      	ldrh	r2, [r7, #28]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d10b      	bne.n	800d72a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	899b      	ldrh	r3, [r3, #12]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d906      	bls.n	800d72a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d71c:	2301      	movs	r3, #1
 800d71e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d720:	7ebb      	ldrb	r3, [r7, #26]
 800d722:	f043 0302 	orr.w	r3, r3, #2
 800d726:	76bb      	strb	r3, [r7, #26]
 800d728:	e001      	b.n	800d72e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6858      	ldr	r0, [r3, #4]
 800d732:	7ebb      	ldrb	r3, [r7, #26]
 800d734:	8bba      	ldrh	r2, [r7, #28]
 800d736:	6979      	ldr	r1, [r7, #20]
 800d738:	f006 fd4e 	bl	80141d8 <tcp_write>
 800d73c:	4603      	mov	r3, r0
 800d73e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d740:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d12c      	bne.n	800d7a2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	6999      	ldr	r1, [r3, #24]
 800d74e:	8bba      	ldrh	r2, [r7, #28]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	440a      	add	r2, r1
 800d756:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	6919      	ldr	r1, [r3, #16]
 800d75e:	8bba      	ldrh	r2, [r7, #28]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	440a      	add	r2, r1
 800d766:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a1b      	ldr	r3, [r3, #32]
 800d76c:	691a      	ldr	r2, [r3, #16]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	429a      	cmp	r2, r3
 800d778:	d113      	bne.n	800d7a2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6a1b      	ldr	r3, [r3, #32]
 800d77e:	899a      	ldrh	r2, [r3, #12]
 800d780:	3a01      	subs	r2, #1
 800d782:	b292      	uxth	r2, r2
 800d784:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	899b      	ldrh	r3, [r3, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d008      	beq.n	800d7a2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	689a      	ldr	r2, [r3, #8]
 800d796:	3208      	adds	r2, #8
 800d798:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a1b      	ldr	r3, [r3, #32]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d7a2:	7e7b      	ldrb	r3, [r7, #25]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <lwip_netconn_do_writemore+0x222>
 800d7a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f43f af50 	beq.w	800d652 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d7b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <lwip_netconn_do_writemore+0x234>
 800d7ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c2:	d146      	bne.n	800d852 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d7c4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d7c6:	7e3b      	ldrb	r3, [r7, #24]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d02b      	beq.n	800d824 <lwip_netconn_do_writemore+0x294>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a1b      	ldr	r3, [r3, #32]
 800d7d0:	699a      	ldr	r2, [r3, #24]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a1b      	ldr	r3, [r3, #32]
 800d7d6:	695b      	ldr	r3, [r3, #20]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d223      	bcs.n	800d824 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <lwip_netconn_do_writemore+0x260>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2103      	movs	r1, #3
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	7f1b      	ldrb	r3, [r3, #28]
 800d7f4:	f043 0310 	orr.w	r3, r3, #16
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	771a      	strb	r2, [r3, #28]
 800d7fe:	e028      	b.n	800d852 <lwip_netconn_do_writemore+0x2c2>
 800d800:	0801c554 	.word	0x0801c554
 800d804:	0801c6ac 	.word	0x0801c6ac
 800d808:	0801c598 	.word	0x0801c598
 800d80c:	0801c9b4 	.word	0x0801c9b4
 800d810:	0801c6bc 	.word	0x0801c6bc
 800d814:	0801c9d4 	.word	0x0801c9d4
 800d818:	0801c9ec 	.word	0x0801c9ec
 800d81c:	0801ca2c 	.word	0x0801ca2c
 800d820:	0801ca54 	.word	0x0801ca54
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d82c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d830:	d305      	bcc.n	800d83e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	d909      	bls.n	800d852 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d842:	2b00      	cmp	r3, #0
 800d844:	d005      	beq.n	800d852 <lwip_netconn_do_writemore+0x2c2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d84a:	2200      	movs	r2, #0
 800d84c:	2103      	movs	r1, #3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d852:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d11d      	bne.n	800d896 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a1b      	ldr	r3, [r3, #32]
 800d85e:	699a      	ldr	r2, [r3, #24]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a1b      	ldr	r3, [r3, #32]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	429a      	cmp	r2, r3
 800d868:	d002      	beq.n	800d870 <lwip_netconn_do_writemore+0x2e0>
 800d86a:	7e3b      	ldrb	r3, [r7, #24]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d870:	2301      	movs	r3, #1
 800d872:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	f007 fa97 	bl	8014dac <tcp_output>
 800d87e:	4603      	mov	r3, r0
 800d880:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d882:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d886:	f113 0f04 	cmn.w	r3, #4
 800d88a:	d12c      	bne.n	800d8e6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d88c:	7b3b      	ldrb	r3, [r7, #12]
 800d88e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d890:	2301      	movs	r3, #1
 800d892:	76fb      	strb	r3, [r7, #27]
 800d894:	e027      	b.n	800d8e6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d896:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89e:	d120      	bne.n	800d8e2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f007 fa81 	bl	8014dac <tcp_output>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d8ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d8b2:	f113 0f04 	cmn.w	r3, #4
 800d8b6:	d104      	bne.n	800d8c2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d8b8:	7b7b      	ldrb	r3, [r7, #13]
 800d8ba:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	76fb      	strb	r3, [r7, #27]
 800d8c0:	e011      	b.n	800d8e6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d8c2:	7e3b      	ldrb	r3, [r7, #24]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00e      	beq.n	800d8e6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a1b      	ldr	r3, [r3, #32]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <lwip_netconn_do_writemore+0x348>
 800d8d2:	f06f 0306 	mvn.w	r3, #6
 800d8d6:	e000      	b.n	800d8da <lwip_netconn_do_writemore+0x34a>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d8dc:	2301      	movs	r3, #1
 800d8de:	76fb      	strb	r3, [r7, #27]
 800d8e0:	e001      	b.n	800d8e6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d8e6:	7efb      	ldrb	r3, [r7, #27]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d015      	beq.n	800d918 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	330c      	adds	r3, #12
 800d8f4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	7ffa      	ldrb	r2, [r7, #31]
 800d8fc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2200      	movs	r2, #0
 800d902:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d006      	beq.n	800d91e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d910:	68b8      	ldr	r0, [r7, #8]
 800d912:	f00b fa03 	bl	8018d1c <sys_sem_signal>
 800d916:	e002      	b.n	800d91e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d918:	f04f 33ff 	mov.w	r3, #4294967295
 800d91c:	e000      	b.n	800d920 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d91e:	2300      	movs	r3, #0
}
 800d920:	4618      	mov	r0, r3
 800d922:	3720      	adds	r7, #32
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4618      	mov	r0, r3
 800d93a:	f7fe fd1c 	bl	800c376 <netconn_err>
 800d93e:	4603      	mov	r3, r0
 800d940:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d166      	bne.n	800da18 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d954:	2b10      	cmp	r3, #16
 800d956:	d15d      	bne.n	800da14 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	785b      	ldrb	r3, [r3, #1]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d002      	beq.n	800d968 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d962:	23fb      	movs	r3, #251	@ 0xfb
 800d964:	73fb      	strb	r3, [r7, #15]
 800d966:	e057      	b.n	800da18 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d04d      	beq.n	800da0e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2201      	movs	r2, #1
 800d978:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	6a1b      	ldr	r3, [r3, #32]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d006      	beq.n	800d992 <lwip_netconn_do_write+0x6a>
 800d984:	4b28      	ldr	r3, [pc, #160]	@ (800da28 <lwip_netconn_do_write+0x100>)
 800d986:	f240 7223 	movw	r2, #1827	@ 0x723
 800d98a:	4928      	ldr	r1, [pc, #160]	@ (800da2c <lwip_netconn_do_write+0x104>)
 800d98c:	4828      	ldr	r0, [pc, #160]	@ (800da30 <lwip_netconn_do_write+0x108>)
 800d98e:	f00b ffb1 	bl	80198f4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d106      	bne.n	800d9a8 <lwip_netconn_do_write+0x80>
 800d99a:	4b23      	ldr	r3, [pc, #140]	@ (800da28 <lwip_netconn_do_write+0x100>)
 800d99c:	f240 7224 	movw	r2, #1828	@ 0x724
 800d9a0:	4924      	ldr	r1, [pc, #144]	@ (800da34 <lwip_netconn_do_write+0x10c>)
 800d9a2:	4823      	ldr	r0, [pc, #140]	@ (800da30 <lwip_netconn_do_write+0x108>)
 800d9a4:	f00b ffa6 	bl	80198f4 <iprintf>
        msg->conn->current_msg = msg;
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fdea 	bl	800d590 <lwip_netconn_do_writemore>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d02e      	beq.n	800da20 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	785b      	ldrb	r3, [r3, #1]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d006      	beq.n	800d9da <lwip_netconn_do_write+0xb2>
 800d9cc:	4b16      	ldr	r3, [pc, #88]	@ (800da28 <lwip_netconn_do_write+0x100>)
 800d9ce:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d9d2:	4919      	ldr	r1, [pc, #100]	@ (800da38 <lwip_netconn_do_write+0x110>)
 800d9d4:	4816      	ldr	r0, [pc, #88]	@ (800da30 <lwip_netconn_do_write+0x108>)
 800d9d6:	f00b ff8d 	bl	80198f4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d9da:	4818      	ldr	r0, [pc, #96]	@ (800da3c <lwip_netconn_do_write+0x114>)
 800d9dc:	f00b fa07 	bl	8018dee <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	2100      	movs	r1, #0
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f00b f966 	bl	8018cba <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d9ee:	4813      	ldr	r0, [pc, #76]	@ (800da3c <lwip_netconn_do_write+0x114>)
 800d9f0:	f00b f9ee 	bl	8018dd0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	785b      	ldrb	r3, [r3, #1]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d110      	bne.n	800da20 <lwip_netconn_do_write+0xf8>
 800d9fe:	4b0a      	ldr	r3, [pc, #40]	@ (800da28 <lwip_netconn_do_write+0x100>)
 800da00:	f240 722c 	movw	r2, #1836	@ 0x72c
 800da04:	490c      	ldr	r1, [pc, #48]	@ (800da38 <lwip_netconn_do_write+0x110>)
 800da06:	480a      	ldr	r0, [pc, #40]	@ (800da30 <lwip_netconn_do_write+0x108>)
 800da08:	f00b ff74 	bl	80198f4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800da0c:	e008      	b.n	800da20 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800da0e:	23f5      	movs	r3, #245	@ 0xf5
 800da10:	73fb      	strb	r3, [r7, #15]
 800da12:	e001      	b.n	800da18 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800da14:	23fa      	movs	r3, #250	@ 0xfa
 800da16:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	7bfa      	ldrb	r2, [r7, #15]
 800da1c:	711a      	strb	r2, [r3, #4]
 800da1e:	e000      	b.n	800da22 <lwip_netconn_do_write+0xfa>
        return;
 800da20:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}
 800da28:	0801c554 	.word	0x0801c554
 800da2c:	0801c8f8 	.word	0x0801c8f8
 800da30:	0801c598 	.word	0x0801c598
 800da34:	0801ca80 	.word	0x0801ca80
 800da38:	0801c914 	.word	0x0801c914
 800da3c:	2000c400 	.word	0x2000c400

0800da40 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	785b      	ldrb	r3, [r3, #1]
 800da52:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d069      	beq.n	800db32 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800da68:	2b10      	cmp	r3, #16
 800da6a:	d162      	bne.n	800db32 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800da70:	2b03      	cmp	r3, #3
 800da72:	d002      	beq.n	800da7a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800da74:	7afb      	ldrb	r3, [r7, #11]
 800da76:	2b02      	cmp	r3, #2
 800da78:	d05b      	beq.n	800db32 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800da7a:	7afb      	ldrb	r3, [r7, #11]
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d103      	bne.n	800da88 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	22f5      	movs	r2, #245	@ 0xf5
 800da84:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800da86:	e059      	b.n	800db3c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800da88:	7afb      	ldrb	r3, [r7, #11]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d103      	bne.n	800da96 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	22fb      	movs	r2, #251	@ 0xfb
 800da92:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800da94:	e052      	b.n	800db3c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	7a1b      	ldrb	r3, [r3, #8]
 800da9a:	f003 0301 	and.w	r3, r3, #1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d004      	beq.n	800daac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff f99e 	bl	800cde8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d006      	beq.n	800dac4 <lwip_netconn_do_close+0x84>
 800dab6:	4b23      	ldr	r3, [pc, #140]	@ (800db44 <lwip_netconn_do_close+0x104>)
 800dab8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800dabc:	4922      	ldr	r1, [pc, #136]	@ (800db48 <lwip_netconn_do_close+0x108>)
 800dabe:	4823      	ldr	r0, [pc, #140]	@ (800db4c <lwip_netconn_do_close+0x10c>)
 800dac0:	f00b ff18 	bl	80198f4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2204      	movs	r2, #4
 800daca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68fa      	ldr	r2, [r7, #12]
 800dad2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff fa02 	bl	800cee4 <lwip_netconn_do_close_internal>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d029      	beq.n	800db3a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	785b      	ldrb	r3, [r3, #1]
 800daec:	2b04      	cmp	r3, #4
 800daee:	d006      	beq.n	800dafe <lwip_netconn_do_close+0xbe>
 800daf0:	4b14      	ldr	r3, [pc, #80]	@ (800db44 <lwip_netconn_do_close+0x104>)
 800daf2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800daf6:	4916      	ldr	r1, [pc, #88]	@ (800db50 <lwip_netconn_do_close+0x110>)
 800daf8:	4814      	ldr	r0, [pc, #80]	@ (800db4c <lwip_netconn_do_close+0x10c>)
 800dafa:	f00b fefb 	bl	80198f4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800dafe:	4815      	ldr	r0, [pc, #84]	@ (800db54 <lwip_netconn_do_close+0x114>)
 800db00:	f00b f975 	bl	8018dee <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	330c      	adds	r3, #12
 800db0a:	2100      	movs	r1, #0
 800db0c:	4618      	mov	r0, r3
 800db0e:	f00b f8d4 	bl	8018cba <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800db12:	4810      	ldr	r0, [pc, #64]	@ (800db54 <lwip_netconn_do_close+0x114>)
 800db14:	f00b f95c 	bl	8018dd0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	785b      	ldrb	r3, [r3, #1]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00b      	beq.n	800db3a <lwip_netconn_do_close+0xfa>
 800db22:	4b08      	ldr	r3, [pc, #32]	@ (800db44 <lwip_netconn_do_close+0x104>)
 800db24:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800db28:	4909      	ldr	r1, [pc, #36]	@ (800db50 <lwip_netconn_do_close+0x110>)
 800db2a:	4808      	ldr	r0, [pc, #32]	@ (800db4c <lwip_netconn_do_close+0x10c>)
 800db2c:	f00b fee2 	bl	80198f4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800db30:	e003      	b.n	800db3a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	22f5      	movs	r2, #245	@ 0xf5
 800db36:	711a      	strb	r2, [r3, #4]
 800db38:	e000      	b.n	800db3c <lwip_netconn_do_close+0xfc>
      return;
 800db3a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	0801c554 	.word	0x0801c554
 800db48:	0801c8f8 	.word	0x0801c8f8
 800db4c:	0801c598 	.word	0x0801c598
 800db50:	0801c914 	.word	0x0801c914
 800db54:	2000c400 	.word	0x2000c400

0800db58 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d013      	beq.n	800db8e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00b      	beq.n	800db86 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4618      	mov	r0, r3
 800db74:	f001 fd74 	bl	800f660 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	605a      	str	r2, [r3, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	685a      	ldr	r2, [r3, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	2006      	movs	r0, #6
 800db8a:	f000 fec5 	bl	800e918 <memp_free>
  }
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800dba2:	f008 f9bb 	bl	8015f1c <sys_timeouts_sleeptime>
 800dba6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d10b      	bne.n	800dbc8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800dbb0:	4813      	ldr	r0, [pc, #76]	@ (800dc00 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbb2:	f00b f91c 	bl	8018dee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f00a fff2 	bl	8018ba4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800dbc0:	480f      	ldr	r0, [pc, #60]	@ (800dc00 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbc2:	f00b f905 	bl	8018dd0 <sys_mutex_lock>
    return;
 800dbc6:	e018      	b.n	800dbfa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800dbce:	f008 f96b 	bl	8015ea8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dbd2:	e7e6      	b.n	800dba2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800dbd4:	480a      	ldr	r0, [pc, #40]	@ (800dc00 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbd6:	f00b f90a 	bl	8018dee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	6839      	ldr	r1, [r7, #0]
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f00a ffe0 	bl	8018ba4 <sys_arch_mbox_fetch>
 800dbe4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800dbe6:	4806      	ldr	r0, [pc, #24]	@ (800dc00 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbe8:	f00b f8f2 	bl	8018dd0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf2:	d102      	bne.n	800dbfa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800dbf4:	f008 f958 	bl	8015ea8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dbf8:	e7d3      	b.n	800dba2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	2000c400 	.word	0x2000c400

0800dc04 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b084      	sub	sp, #16
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dc0c:	4810      	ldr	r0, [pc, #64]	@ (800dc50 <tcpip_thread+0x4c>)
 800dc0e:	f00b f8df 	bl	8018dd0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dc12:	4b10      	ldr	r3, [pc, #64]	@ (800dc54 <tcpip_thread+0x50>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d005      	beq.n	800dc26 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dc1a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc54 <tcpip_thread+0x50>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a0e      	ldr	r2, [pc, #56]	@ (800dc58 <tcpip_thread+0x54>)
 800dc20:	6812      	ldr	r2, [r2, #0]
 800dc22:	4610      	mov	r0, r2
 800dc24:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	480b      	ldr	r0, [pc, #44]	@ (800dc5c <tcpip_thread+0x58>)
 800dc2e:	f7ff ffb3 	bl	800db98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d106      	bne.n	800dc46 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dc38:	4b09      	ldr	r3, [pc, #36]	@ (800dc60 <tcpip_thread+0x5c>)
 800dc3a:	2291      	movs	r2, #145	@ 0x91
 800dc3c:	4909      	ldr	r1, [pc, #36]	@ (800dc64 <tcpip_thread+0x60>)
 800dc3e:	480a      	ldr	r0, [pc, #40]	@ (800dc68 <tcpip_thread+0x64>)
 800dc40:	f00b fe58 	bl	80198f4 <iprintf>
      continue;
 800dc44:	e003      	b.n	800dc4e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 f80f 	bl	800dc6c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc4e:	e7ea      	b.n	800dc26 <tcpip_thread+0x22>
 800dc50:	2000c400 	.word	0x2000c400
 800dc54:	2000c3f4 	.word	0x2000c3f4
 800dc58:	2000c3f8 	.word	0x2000c3f8
 800dc5c:	2000c3fc 	.word	0x2000c3fc
 800dc60:	0801caac 	.word	0x0801caac
 800dc64:	0801cadc 	.word	0x0801cadc
 800dc68:	0801cafc 	.word	0x0801cafc

0800dc6c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d026      	beq.n	800dcca <tcpip_thread_handle_msg+0x5e>
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	dc2b      	bgt.n	800dcd8 <tcpip_thread_handle_msg+0x6c>
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <tcpip_thread_handle_msg+0x1e>
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d015      	beq.n	800dcb4 <tcpip_thread_handle_msg+0x48>
 800dc88:	e026      	b.n	800dcd8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	687a      	ldr	r2, [r7, #4]
 800dc90:	6850      	ldr	r0, [r2, #4]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	6892      	ldr	r2, [r2, #8]
 800dc96:	4611      	mov	r1, r2
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d004      	beq.n	800dcaa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f001 fcdb 	bl	800f660 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dcaa:	6879      	ldr	r1, [r7, #4]
 800dcac:	2009      	movs	r0, #9
 800dcae:	f000 fe33 	bl	800e918 <memp_free>
      break;
 800dcb2:	e018      	b.n	800dce6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	6892      	ldr	r2, [r2, #8]
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dcc0:	6879      	ldr	r1, [r7, #4]
 800dcc2:	2008      	movs	r0, #8
 800dcc4:	f000 fe28 	bl	800e918 <memp_free>
      break;
 800dcc8:	e00d      	b.n	800dce6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6892      	ldr	r2, [r2, #8]
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	4798      	blx	r3
      break;
 800dcd6:	e006      	b.n	800dce6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dcd8:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <tcpip_thread_handle_msg+0x84>)
 800dcda:	22cf      	movs	r2, #207	@ 0xcf
 800dcdc:	4905      	ldr	r1, [pc, #20]	@ (800dcf4 <tcpip_thread_handle_msg+0x88>)
 800dcde:	4806      	ldr	r0, [pc, #24]	@ (800dcf8 <tcpip_thread_handle_msg+0x8c>)
 800dce0:	f00b fe08 	bl	80198f4 <iprintf>
      break;
 800dce4:	bf00      	nop
  }
}
 800dce6:	bf00      	nop
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	0801caac 	.word	0x0801caac
 800dcf4:	0801cadc 	.word	0x0801cadc
 800dcf8:	0801cafc 	.word	0x0801cafc

0800dcfc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dd08:	481a      	ldr	r0, [pc, #104]	@ (800dd74 <tcpip_inpkt+0x78>)
 800dd0a:	f00a ff93 	bl	8018c34 <sys_mbox_valid>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d105      	bne.n	800dd20 <tcpip_inpkt+0x24>
 800dd14:	4b18      	ldr	r3, [pc, #96]	@ (800dd78 <tcpip_inpkt+0x7c>)
 800dd16:	22fc      	movs	r2, #252	@ 0xfc
 800dd18:	4918      	ldr	r1, [pc, #96]	@ (800dd7c <tcpip_inpkt+0x80>)
 800dd1a:	4819      	ldr	r0, [pc, #100]	@ (800dd80 <tcpip_inpkt+0x84>)
 800dd1c:	f00b fdea 	bl	80198f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dd20:	2009      	movs	r0, #9
 800dd22:	f000 fda7 	bl	800e874 <memp_malloc>
 800dd26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d102      	bne.n	800dd34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd32:	e01a      	b.n	800dd6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	68fa      	ldr	r2, [r7, #12]
 800dd3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dd4c:	6979      	ldr	r1, [r7, #20]
 800dd4e:	4809      	ldr	r0, [pc, #36]	@ (800dd74 <tcpip_inpkt+0x78>)
 800dd50:	f00a ff0e 	bl	8018b70 <sys_mbox_trypost>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d006      	beq.n	800dd68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dd5a:	6979      	ldr	r1, [r7, #20]
 800dd5c:	2009      	movs	r0, #9
 800dd5e:	f000 fddb 	bl	800e918 <memp_free>
    return ERR_MEM;
 800dd62:	f04f 33ff 	mov.w	r3, #4294967295
 800dd66:	e000      	b.n	800dd6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dd68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2000c3fc 	.word	0x2000c3fc
 800dd78:	0801caac 	.word	0x0801caac
 800dd7c:	0801cb24 	.word	0x0801cb24
 800dd80:	0801cafc 	.word	0x0801cafc

0800dd84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd94:	f003 0318 	and.w	r3, r3, #24
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d006      	beq.n	800ddaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dd9c:	4a08      	ldr	r2, [pc, #32]	@ (800ddc0 <tcpip_input+0x3c>)
 800dd9e:	6839      	ldr	r1, [r7, #0]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff ffab 	bl	800dcfc <tcpip_inpkt>
 800dda6:	4603      	mov	r3, r0
 800dda8:	e005      	b.n	800ddb6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ddaa:	4a06      	ldr	r2, [pc, #24]	@ (800ddc4 <tcpip_input+0x40>)
 800ddac:	6839      	ldr	r1, [r7, #0]
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7ff ffa4 	bl	800dcfc <tcpip_inpkt>
 800ddb4:	4603      	mov	r3, r0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	0801896d 	.word	0x0801896d
 800ddc4:	08017875 	.word	0x08017875

0800ddc8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ddd2:	4819      	ldr	r0, [pc, #100]	@ (800de38 <tcpip_try_callback+0x70>)
 800ddd4:	f00a ff2e 	bl	8018c34 <sys_mbox_valid>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <tcpip_try_callback+0x24>
 800ddde:	4b17      	ldr	r3, [pc, #92]	@ (800de3c <tcpip_try_callback+0x74>)
 800dde0:	f240 125d 	movw	r2, #349	@ 0x15d
 800dde4:	4916      	ldr	r1, [pc, #88]	@ (800de40 <tcpip_try_callback+0x78>)
 800dde6:	4817      	ldr	r0, [pc, #92]	@ (800de44 <tcpip_try_callback+0x7c>)
 800dde8:	f00b fd84 	bl	80198f4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ddec:	2008      	movs	r0, #8
 800ddee:	f000 fd41 	bl	800e874 <memp_malloc>
 800ddf2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ddfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ddfe:	e017      	b.n	800de30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2201      	movs	r2, #1
 800de04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800de12:	68f9      	ldr	r1, [r7, #12]
 800de14:	4808      	ldr	r0, [pc, #32]	@ (800de38 <tcpip_try_callback+0x70>)
 800de16:	f00a feab 	bl	8018b70 <sys_mbox_trypost>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d006      	beq.n	800de2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800de20:	68f9      	ldr	r1, [r7, #12]
 800de22:	2008      	movs	r0, #8
 800de24:	f000 fd78 	bl	800e918 <memp_free>
    return ERR_MEM;
 800de28:	f04f 33ff 	mov.w	r3, #4294967295
 800de2c:	e000      	b.n	800de30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	2000c3fc 	.word	0x2000c3fc
 800de3c:	0801caac 	.word	0x0801caac
 800de40:	0801cb24 	.word	0x0801cb24
 800de44:	0801cafc 	.word	0x0801cafc

0800de48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800de54:	4806      	ldr	r0, [pc, #24]	@ (800de70 <tcpip_send_msg_wait_sem+0x28>)
 800de56:	f00a ffbb 	bl	8018dd0 <sys_mutex_lock>
  fn(apimsg);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	68b8      	ldr	r0, [r7, #8]
 800de5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800de60:	4803      	ldr	r0, [pc, #12]	@ (800de70 <tcpip_send_msg_wait_sem+0x28>)
 800de62:	f00a ffc4 	bl	8018dee <sys_mutex_unlock>
  return ERR_OK;
 800de66:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	2000c400 	.word	0x2000c400

0800de74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af02      	add	r7, sp, #8
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800de7e:	f000 f871 	bl	800df64 <lwip_init>

  tcpip_init_done = initfunc;
 800de82:	4a17      	ldr	r2, [pc, #92]	@ (800dee0 <tcpip_init+0x6c>)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800de88:	4a16      	ldr	r2, [pc, #88]	@ (800dee4 <tcpip_init+0x70>)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800de8e:	2106      	movs	r1, #6
 800de90:	4815      	ldr	r0, [pc, #84]	@ (800dee8 <tcpip_init+0x74>)
 800de92:	f00a fe41 	bl	8018b18 <sys_mbox_new>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d006      	beq.n	800deaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800de9c:	4b13      	ldr	r3, [pc, #76]	@ (800deec <tcpip_init+0x78>)
 800de9e:	f240 2261 	movw	r2, #609	@ 0x261
 800dea2:	4913      	ldr	r1, [pc, #76]	@ (800def0 <tcpip_init+0x7c>)
 800dea4:	4813      	ldr	r0, [pc, #76]	@ (800def4 <tcpip_init+0x80>)
 800dea6:	f00b fd25 	bl	80198f4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800deaa:	4813      	ldr	r0, [pc, #76]	@ (800def8 <tcpip_init+0x84>)
 800deac:	f00a ff7a 	bl	8018da4 <sys_mutex_new>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d006      	beq.n	800dec4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800deb6:	4b0d      	ldr	r3, [pc, #52]	@ (800deec <tcpip_init+0x78>)
 800deb8:	f240 2265 	movw	r2, #613	@ 0x265
 800debc:	490f      	ldr	r1, [pc, #60]	@ (800defc <tcpip_init+0x88>)
 800debe:	480d      	ldr	r0, [pc, #52]	@ (800def4 <tcpip_init+0x80>)
 800dec0:	f00b fd18 	bl	80198f4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dec4:	2318      	movs	r3, #24
 800dec6:	9300      	str	r3, [sp, #0]
 800dec8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800decc:	2200      	movs	r2, #0
 800dece:	490c      	ldr	r1, [pc, #48]	@ (800df00 <tcpip_init+0x8c>)
 800ded0:	480c      	ldr	r0, [pc, #48]	@ (800df04 <tcpip_init+0x90>)
 800ded2:	f00a ff99 	bl	8018e08 <sys_thread_new>
}
 800ded6:	bf00      	nop
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	2000c3f4 	.word	0x2000c3f4
 800dee4:	2000c3f8 	.word	0x2000c3f8
 800dee8:	2000c3fc 	.word	0x2000c3fc
 800deec:	0801caac 	.word	0x0801caac
 800def0:	0801cb34 	.word	0x0801cb34
 800def4:	0801cafc 	.word	0x0801cafc
 800def8:	2000c400 	.word	0x2000c400
 800defc:	0801cb58 	.word	0x0801cb58
 800df00:	0800dc05 	.word	0x0800dc05
 800df04:	0801cb7c 	.word	0x0801cb7c

0800df08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	4603      	mov	r3, r0
 800df10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800df12:	88fb      	ldrh	r3, [r7, #6]
 800df14:	021b      	lsls	r3, r3, #8
 800df16:	b21a      	sxth	r2, r3
 800df18:	88fb      	ldrh	r3, [r7, #6]
 800df1a:	0a1b      	lsrs	r3, r3, #8
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	b21b      	sxth	r3, r3
 800df20:	4313      	orrs	r3, r2
 800df22:	b21b      	sxth	r3, r3
 800df24:	b29b      	uxth	r3, r3
}
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	061a      	lsls	r2, r3, #24
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	021b      	lsls	r3, r3, #8
 800df42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df46:	431a      	orrs	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	0a1b      	lsrs	r3, r3, #8
 800df4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df50:	431a      	orrs	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	0e1b      	lsrs	r3, r3, #24
 800df56:	4313      	orrs	r3, r2
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800df6e:	f00a ff0d 	bl	8018d8c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800df72:	f000 f8d5 	bl	800e120 <mem_init>
  memp_init();
 800df76:	f000 fc31 	bl	800e7dc <memp_init>
  pbuf_init();
  netif_init();
 800df7a:	f000 fcf7 	bl	800e96c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800df7e:	f008 f805 	bl	8015f8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800df82:	f001 fe07 	bl	800fb94 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800df86:	f007 ff47 	bl	8015e18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800df8a:	bf00      	nop
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800df9e:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <ptr_to_mem+0x20>)
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	88fb      	ldrh	r3, [r7, #6]
 800dfa4:	4413      	add	r3, r2
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	370c      	adds	r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	2000ec30 	.word	0x2000ec30

0800dfb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dfc0:	4b05      	ldr	r3, [pc, #20]	@ (800dfd8 <mem_to_ptr+0x20>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	b29b      	uxth	r3, r3
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	370c      	adds	r7, #12
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	2000ec30 	.word	0x2000ec30

0800dfdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dfe4:	4b45      	ldr	r3, [pc, #276]	@ (800e0fc <plug_holes+0x120>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d206      	bcs.n	800dffc <plug_holes+0x20>
 800dfee:	4b44      	ldr	r3, [pc, #272]	@ (800e100 <plug_holes+0x124>)
 800dff0:	f240 12df 	movw	r2, #479	@ 0x1df
 800dff4:	4943      	ldr	r1, [pc, #268]	@ (800e104 <plug_holes+0x128>)
 800dff6:	4844      	ldr	r0, [pc, #272]	@ (800e108 <plug_holes+0x12c>)
 800dff8:	f00b fc7c 	bl	80198f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dffc:	4b43      	ldr	r3, [pc, #268]	@ (800e10c <plug_holes+0x130>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	429a      	cmp	r2, r3
 800e004:	d306      	bcc.n	800e014 <plug_holes+0x38>
 800e006:	4b3e      	ldr	r3, [pc, #248]	@ (800e100 <plug_holes+0x124>)
 800e008:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e00c:	4940      	ldr	r1, [pc, #256]	@ (800e110 <plug_holes+0x134>)
 800e00e:	483e      	ldr	r0, [pc, #248]	@ (800e108 <plug_holes+0x12c>)
 800e010:	f00b fc70 	bl	80198f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	791b      	ldrb	r3, [r3, #4]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d006      	beq.n	800e02a <plug_holes+0x4e>
 800e01c:	4b38      	ldr	r3, [pc, #224]	@ (800e100 <plug_holes+0x124>)
 800e01e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e022:	493c      	ldr	r1, [pc, #240]	@ (800e114 <plug_holes+0x138>)
 800e024:	4838      	ldr	r0, [pc, #224]	@ (800e108 <plug_holes+0x12c>)
 800e026:	f00b fc65 	bl	80198f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e032:	d906      	bls.n	800e042 <plug_holes+0x66>
 800e034:	4b32      	ldr	r3, [pc, #200]	@ (800e100 <plug_holes+0x124>)
 800e036:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800e03a:	4937      	ldr	r1, [pc, #220]	@ (800e118 <plug_holes+0x13c>)
 800e03c:	4832      	ldr	r0, [pc, #200]	@ (800e108 <plug_holes+0x12c>)
 800e03e:	f00b fc59 	bl	80198f4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff ffa4 	bl	800df94 <ptr_to_mem>
 800e04c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	429a      	cmp	r2, r3
 800e054:	d024      	beq.n	800e0a0 <plug_holes+0xc4>
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	791b      	ldrb	r3, [r3, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d120      	bne.n	800e0a0 <plug_holes+0xc4>
 800e05e:	4b2b      	ldr	r3, [pc, #172]	@ (800e10c <plug_holes+0x130>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	429a      	cmp	r2, r3
 800e066:	d01b      	beq.n	800e0a0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e068:	4b2c      	ldr	r3, [pc, #176]	@ (800e11c <plug_holes+0x140>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d102      	bne.n	800e078 <plug_holes+0x9c>
      lfree = mem;
 800e072:	4a2a      	ldr	r2, [pc, #168]	@ (800e11c <plug_holes+0x140>)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	881a      	ldrh	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e088:	d00a      	beq.n	800e0a0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff ff80 	bl	800df94 <ptr_to_mem>
 800e094:	4604      	mov	r4, r0
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff ff8e 	bl	800dfb8 <mem_to_ptr>
 800e09c:	4603      	mov	r3, r0
 800e09e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	885b      	ldrh	r3, [r3, #2]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff ff75 	bl	800df94 <ptr_to_mem>
 800e0aa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e0ac:	68ba      	ldr	r2, [r7, #8]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d01f      	beq.n	800e0f4 <plug_holes+0x118>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	791b      	ldrb	r3, [r3, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d11b      	bne.n	800e0f4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e0bc:	4b17      	ldr	r3, [pc, #92]	@ (800e11c <plug_holes+0x140>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d102      	bne.n	800e0cc <plug_holes+0xf0>
      lfree = pmem;
 800e0c6:	4a15      	ldr	r2, [pc, #84]	@ (800e11c <plug_holes+0x140>)
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	881a      	ldrh	r2, [r3, #0]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e0dc:	d00a      	beq.n	800e0f4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	881b      	ldrh	r3, [r3, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7ff ff56 	bl	800df94 <ptr_to_mem>
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	68b8      	ldr	r0, [r7, #8]
 800e0ec:	f7ff ff64 	bl	800dfb8 <mem_to_ptr>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e0f4:	bf00      	nop
 800e0f6:	3714      	adds	r7, #20
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd90      	pop	{r4, r7, pc}
 800e0fc:	2000ec30 	.word	0x2000ec30
 800e100:	0801cb8c 	.word	0x0801cb8c
 800e104:	0801cbbc 	.word	0x0801cbbc
 800e108:	0801cbd4 	.word	0x0801cbd4
 800e10c:	2000ec34 	.word	0x2000ec34
 800e110:	0801cbfc 	.word	0x0801cbfc
 800e114:	0801cc18 	.word	0x0801cc18
 800e118:	0801cc34 	.word	0x0801cc34
 800e11c:	2000ec3c 	.word	0x2000ec3c

0800e120 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e126:	4b1f      	ldr	r3, [pc, #124]	@ (800e1a4 <mem_init+0x84>)
 800e128:	3303      	adds	r3, #3
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	461a      	mov	r2, r3
 800e130:	4b1d      	ldr	r3, [pc, #116]	@ (800e1a8 <mem_init+0x88>)
 800e132:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e134:	4b1c      	ldr	r3, [pc, #112]	@ (800e1a8 <mem_init+0x88>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e140:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e14e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800e152:	f7ff ff1f 	bl	800df94 <ptr_to_mem>
 800e156:	4603      	mov	r3, r0
 800e158:	4a14      	ldr	r2, [pc, #80]	@ (800e1ac <mem_init+0x8c>)
 800e15a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e15c:	4b13      	ldr	r3, [pc, #76]	@ (800e1ac <mem_init+0x8c>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2201      	movs	r2, #1
 800e162:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e164:	4b11      	ldr	r3, [pc, #68]	@ (800e1ac <mem_init+0x8c>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e16c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e16e:	4b0f      	ldr	r3, [pc, #60]	@ (800e1ac <mem_init+0x8c>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e176:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e178:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a8 <mem_init+0x88>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b0 <mem_init+0x90>)
 800e17e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e180:	480c      	ldr	r0, [pc, #48]	@ (800e1b4 <mem_init+0x94>)
 800e182:	f00a fe0f 	bl	8018da4 <sys_mutex_new>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d006      	beq.n	800e19a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e18c:	4b0a      	ldr	r3, [pc, #40]	@ (800e1b8 <mem_init+0x98>)
 800e18e:	f240 221f 	movw	r2, #543	@ 0x21f
 800e192:	490a      	ldr	r1, [pc, #40]	@ (800e1bc <mem_init+0x9c>)
 800e194:	480a      	ldr	r0, [pc, #40]	@ (800e1c0 <mem_init+0xa0>)
 800e196:	f00b fbad 	bl	80198f4 <iprintf>
  }
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	2000c41c 	.word	0x2000c41c
 800e1a8:	2000ec30 	.word	0x2000ec30
 800e1ac:	2000ec34 	.word	0x2000ec34
 800e1b0:	2000ec3c 	.word	0x2000ec3c
 800e1b4:	2000ec38 	.word	0x2000ec38
 800e1b8:	0801cb8c 	.word	0x0801cb8c
 800e1bc:	0801cc60 	.word	0x0801cc60
 800e1c0:	0801cbd4 	.word	0x0801cbd4

0800e1c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7ff fef3 	bl	800dfb8 <mem_to_ptr>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	881b      	ldrh	r3, [r3, #0]
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7ff feda 	bl	800df94 <ptr_to_mem>
 800e1e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	885b      	ldrh	r3, [r3, #2]
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f7ff fed4 	bl	800df94 <ptr_to_mem>
 800e1ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e1f6:	d818      	bhi.n	800e22a <mem_link_valid+0x66>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	885b      	ldrh	r3, [r3, #2]
 800e1fc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e200:	d813      	bhi.n	800e22a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e206:	8afa      	ldrh	r2, [r7, #22]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d004      	beq.n	800e216 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	881b      	ldrh	r3, [r3, #0]
 800e210:	8afa      	ldrh	r2, [r7, #22]
 800e212:	429a      	cmp	r2, r3
 800e214:	d109      	bne.n	800e22a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e216:	4b08      	ldr	r3, [pc, #32]	@ (800e238 <mem_link_valid+0x74>)
 800e218:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d006      	beq.n	800e22e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	885b      	ldrh	r3, [r3, #2]
 800e224:	8afa      	ldrh	r2, [r7, #22]
 800e226:	429a      	cmp	r2, r3
 800e228:	d001      	beq.n	800e22e <mem_link_valid+0x6a>
    return 0;
 800e22a:	2300      	movs	r3, #0
 800e22c:	e000      	b.n	800e230 <mem_link_valid+0x6c>
  }
  return 1;
 800e22e:	2301      	movs	r3, #1
}
 800e230:	4618      	mov	r0, r3
 800e232:	3718      	adds	r7, #24
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2000ec34 	.word	0x2000ec34

0800e23c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d070      	beq.n	800e32c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f003 0303 	and.w	r3, r3, #3
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00d      	beq.n	800e270 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e254:	4b37      	ldr	r3, [pc, #220]	@ (800e334 <mem_free+0xf8>)
 800e256:	f240 2273 	movw	r2, #627	@ 0x273
 800e25a:	4937      	ldr	r1, [pc, #220]	@ (800e338 <mem_free+0xfc>)
 800e25c:	4837      	ldr	r0, [pc, #220]	@ (800e33c <mem_free+0x100>)
 800e25e:	f00b fb49 	bl	80198f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e262:	f00a fdf1 	bl	8018e48 <sys_arch_protect>
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f00a fdfb 	bl	8018e64 <sys_arch_unprotect>
    return;
 800e26e:	e05e      	b.n	800e32e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3b08      	subs	r3, #8
 800e274:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e276:	4b32      	ldr	r3, [pc, #200]	@ (800e340 <mem_free+0x104>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d306      	bcc.n	800e28e <mem_free+0x52>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f103 020c 	add.w	r2, r3, #12
 800e286:	4b2f      	ldr	r3, [pc, #188]	@ (800e344 <mem_free+0x108>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d90d      	bls.n	800e2aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e28e:	4b29      	ldr	r3, [pc, #164]	@ (800e334 <mem_free+0xf8>)
 800e290:	f240 227f 	movw	r2, #639	@ 0x27f
 800e294:	492c      	ldr	r1, [pc, #176]	@ (800e348 <mem_free+0x10c>)
 800e296:	4829      	ldr	r0, [pc, #164]	@ (800e33c <mem_free+0x100>)
 800e298:	f00b fb2c 	bl	80198f4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e29c:	f00a fdd4 	bl	8018e48 <sys_arch_protect>
 800e2a0:	6138      	str	r0, [r7, #16]
 800e2a2:	6938      	ldr	r0, [r7, #16]
 800e2a4:	f00a fdde 	bl	8018e64 <sys_arch_unprotect>
    return;
 800e2a8:	e041      	b.n	800e32e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e2aa:	4828      	ldr	r0, [pc, #160]	@ (800e34c <mem_free+0x110>)
 800e2ac:	f00a fd90 	bl	8018dd0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	791b      	ldrb	r3, [r3, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d110      	bne.n	800e2da <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e2b8:	4b1e      	ldr	r3, [pc, #120]	@ (800e334 <mem_free+0xf8>)
 800e2ba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e2be:	4924      	ldr	r1, [pc, #144]	@ (800e350 <mem_free+0x114>)
 800e2c0:	481e      	ldr	r0, [pc, #120]	@ (800e33c <mem_free+0x100>)
 800e2c2:	f00b fb17 	bl	80198f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2c6:	4821      	ldr	r0, [pc, #132]	@ (800e34c <mem_free+0x110>)
 800e2c8:	f00a fd91 	bl	8018dee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2cc:	f00a fdbc 	bl	8018e48 <sys_arch_protect>
 800e2d0:	6178      	str	r0, [r7, #20]
 800e2d2:	6978      	ldr	r0, [r7, #20]
 800e2d4:	f00a fdc6 	bl	8018e64 <sys_arch_unprotect>
    return;
 800e2d8:	e029      	b.n	800e32e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e2da:	69f8      	ldr	r0, [r7, #28]
 800e2dc:	f7ff ff72 	bl	800e1c4 <mem_link_valid>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d110      	bne.n	800e308 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e2e6:	4b13      	ldr	r3, [pc, #76]	@ (800e334 <mem_free+0xf8>)
 800e2e8:	f240 2295 	movw	r2, #661	@ 0x295
 800e2ec:	4919      	ldr	r1, [pc, #100]	@ (800e354 <mem_free+0x118>)
 800e2ee:	4813      	ldr	r0, [pc, #76]	@ (800e33c <mem_free+0x100>)
 800e2f0:	f00b fb00 	bl	80198f4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2f4:	4815      	ldr	r0, [pc, #84]	@ (800e34c <mem_free+0x110>)
 800e2f6:	f00a fd7a 	bl	8018dee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2fa:	f00a fda5 	bl	8018e48 <sys_arch_protect>
 800e2fe:	61b8      	str	r0, [r7, #24]
 800e300:	69b8      	ldr	r0, [r7, #24]
 800e302:	f00a fdaf 	bl	8018e64 <sys_arch_unprotect>
    return;
 800e306:	e012      	b.n	800e32e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	2200      	movs	r2, #0
 800e30c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e30e:	4b12      	ldr	r3, [pc, #72]	@ (800e358 <mem_free+0x11c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	429a      	cmp	r2, r3
 800e316:	d202      	bcs.n	800e31e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e318:	4a0f      	ldr	r2, [pc, #60]	@ (800e358 <mem_free+0x11c>)
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e31e:	69f8      	ldr	r0, [r7, #28]
 800e320:	f7ff fe5c 	bl	800dfdc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e324:	4809      	ldr	r0, [pc, #36]	@ (800e34c <mem_free+0x110>)
 800e326:	f00a fd62 	bl	8018dee <sys_mutex_unlock>
 800e32a:	e000      	b.n	800e32e <mem_free+0xf2>
    return;
 800e32c:	bf00      	nop
}
 800e32e:	3720      	adds	r7, #32
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0801cb8c 	.word	0x0801cb8c
 800e338:	0801cc7c 	.word	0x0801cc7c
 800e33c:	0801cbd4 	.word	0x0801cbd4
 800e340:	2000ec30 	.word	0x2000ec30
 800e344:	2000ec34 	.word	0x2000ec34
 800e348:	0801cca0 	.word	0x0801cca0
 800e34c:	2000ec38 	.word	0x2000ec38
 800e350:	0801ccbc 	.word	0x0801ccbc
 800e354:	0801cce4 	.word	0x0801cce4
 800e358:	2000ec3c 	.word	0x2000ec3c

0800e35c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e368:	887b      	ldrh	r3, [r7, #2]
 800e36a:	3303      	adds	r3, #3
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	f023 0303 	bic.w	r3, r3, #3
 800e372:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e374:	8bfb      	ldrh	r3, [r7, #30]
 800e376:	2b0b      	cmp	r3, #11
 800e378:	d801      	bhi.n	800e37e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e37a:	230c      	movs	r3, #12
 800e37c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e37e:	8bfb      	ldrh	r3, [r7, #30]
 800e380:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e384:	d803      	bhi.n	800e38e <mem_trim+0x32>
 800e386:	8bfa      	ldrh	r2, [r7, #30]
 800e388:	887b      	ldrh	r3, [r7, #2]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d201      	bcs.n	800e392 <mem_trim+0x36>
    return NULL;
 800e38e:	2300      	movs	r3, #0
 800e390:	e0d8      	b.n	800e544 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e392:	4b6e      	ldr	r3, [pc, #440]	@ (800e54c <mem_trim+0x1f0>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d304      	bcc.n	800e3a6 <mem_trim+0x4a>
 800e39c:	4b6c      	ldr	r3, [pc, #432]	@ (800e550 <mem_trim+0x1f4>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d306      	bcc.n	800e3b4 <mem_trim+0x58>
 800e3a6:	4b6b      	ldr	r3, [pc, #428]	@ (800e554 <mem_trim+0x1f8>)
 800e3a8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e3ac:	496a      	ldr	r1, [pc, #424]	@ (800e558 <mem_trim+0x1fc>)
 800e3ae:	486b      	ldr	r0, [pc, #428]	@ (800e55c <mem_trim+0x200>)
 800e3b0:	f00b faa0 	bl	80198f4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e3b4:	4b65      	ldr	r3, [pc, #404]	@ (800e54c <mem_trim+0x1f0>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d304      	bcc.n	800e3c8 <mem_trim+0x6c>
 800e3be:	4b64      	ldr	r3, [pc, #400]	@ (800e550 <mem_trim+0x1f4>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d307      	bcc.n	800e3d8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e3c8:	f00a fd3e 	bl	8018e48 <sys_arch_protect>
 800e3cc:	60b8      	str	r0, [r7, #8]
 800e3ce:	68b8      	ldr	r0, [r7, #8]
 800e3d0:	f00a fd48 	bl	8018e64 <sys_arch_unprotect>
    return rmem;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	e0b5      	b.n	800e544 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	3b08      	subs	r3, #8
 800e3dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e3de:	69b8      	ldr	r0, [r7, #24]
 800e3e0:	f7ff fdea 	bl	800dfb8 <mem_to_ptr>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	881a      	ldrh	r2, [r3, #0]
 800e3ec:	8afb      	ldrh	r3, [r7, #22]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	3b08      	subs	r3, #8
 800e3f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e3f6:	8bfa      	ldrh	r2, [r7, #30]
 800e3f8:	8abb      	ldrh	r3, [r7, #20]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d906      	bls.n	800e40c <mem_trim+0xb0>
 800e3fe:	4b55      	ldr	r3, [pc, #340]	@ (800e554 <mem_trim+0x1f8>)
 800e400:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e404:	4956      	ldr	r1, [pc, #344]	@ (800e560 <mem_trim+0x204>)
 800e406:	4855      	ldr	r0, [pc, #340]	@ (800e55c <mem_trim+0x200>)
 800e408:	f00b fa74 	bl	80198f4 <iprintf>
  if (newsize > size) {
 800e40c:	8bfa      	ldrh	r2, [r7, #30]
 800e40e:	8abb      	ldrh	r3, [r7, #20]
 800e410:	429a      	cmp	r2, r3
 800e412:	d901      	bls.n	800e418 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e414:	2300      	movs	r3, #0
 800e416:	e095      	b.n	800e544 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e418:	8bfa      	ldrh	r2, [r7, #30]
 800e41a:	8abb      	ldrh	r3, [r7, #20]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d101      	bne.n	800e424 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	e08f      	b.n	800e544 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e424:	484f      	ldr	r0, [pc, #316]	@ (800e564 <mem_trim+0x208>)
 800e426:	f00a fcd3 	bl	8018dd0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fdb0 	bl	800df94 <ptr_to_mem>
 800e434:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	791b      	ldrb	r3, [r3, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d13f      	bne.n	800e4be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e446:	d106      	bne.n	800e456 <mem_trim+0xfa>
 800e448:	4b42      	ldr	r3, [pc, #264]	@ (800e554 <mem_trim+0x1f8>)
 800e44a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e44e:	4946      	ldr	r1, [pc, #280]	@ (800e568 <mem_trim+0x20c>)
 800e450:	4842      	ldr	r0, [pc, #264]	@ (800e55c <mem_trim+0x200>)
 800e452:	f00b fa4f 	bl	80198f4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	881b      	ldrh	r3, [r3, #0]
 800e45a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e45c:	8afa      	ldrh	r2, [r7, #22]
 800e45e:	8bfb      	ldrh	r3, [r7, #30]
 800e460:	4413      	add	r3, r2
 800e462:	b29b      	uxth	r3, r3
 800e464:	3308      	adds	r3, #8
 800e466:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e468:	4b40      	ldr	r3, [pc, #256]	@ (800e56c <mem_trim+0x210>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d106      	bne.n	800e480 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e472:	89fb      	ldrh	r3, [r7, #14]
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff fd8d 	bl	800df94 <ptr_to_mem>
 800e47a:	4603      	mov	r3, r0
 800e47c:	4a3b      	ldr	r2, [pc, #236]	@ (800e56c <mem_trim+0x210>)
 800e47e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e480:	89fb      	ldrh	r3, [r7, #14]
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff fd86 	bl	800df94 <ptr_to_mem>
 800e488:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	2200      	movs	r2, #0
 800e48e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	89ba      	ldrh	r2, [r7, #12]
 800e494:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	8afa      	ldrh	r2, [r7, #22]
 800e49a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	89fa      	ldrh	r2, [r7, #14]
 800e4a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	881b      	ldrh	r3, [r3, #0]
 800e4a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e4aa:	d047      	beq.n	800e53c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	881b      	ldrh	r3, [r3, #0]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff fd6f 	bl	800df94 <ptr_to_mem>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	89fb      	ldrh	r3, [r7, #14]
 800e4ba:	8053      	strh	r3, [r2, #2]
 800e4bc:	e03e      	b.n	800e53c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e4be:	8bfb      	ldrh	r3, [r7, #30]
 800e4c0:	f103 0214 	add.w	r2, r3, #20
 800e4c4:	8abb      	ldrh	r3, [r7, #20]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d838      	bhi.n	800e53c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e4ca:	8afa      	ldrh	r2, [r7, #22]
 800e4cc:	8bfb      	ldrh	r3, [r7, #30]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e4de:	d106      	bne.n	800e4ee <mem_trim+0x192>
 800e4e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e554 <mem_trim+0x1f8>)
 800e4e2:	f240 3216 	movw	r2, #790	@ 0x316
 800e4e6:	4920      	ldr	r1, [pc, #128]	@ (800e568 <mem_trim+0x20c>)
 800e4e8:	481c      	ldr	r0, [pc, #112]	@ (800e55c <mem_trim+0x200>)
 800e4ea:	f00b fa03 	bl	80198f4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e4ee:	89fb      	ldrh	r3, [r7, #14]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fd4f 	bl	800df94 <ptr_to_mem>
 800e4f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e4f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e56c <mem_trim+0x210>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	693a      	ldr	r2, [r7, #16]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d202      	bcs.n	800e508 <mem_trim+0x1ac>
      lfree = mem2;
 800e502:	4a1a      	ldr	r2, [pc, #104]	@ (800e56c <mem_trim+0x210>)
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	2200      	movs	r2, #0
 800e50c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	881a      	ldrh	r2, [r3, #0]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	8afa      	ldrh	r2, [r7, #22]
 800e51a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	89fa      	ldrh	r2, [r7, #14]
 800e520:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	881b      	ldrh	r3, [r3, #0]
 800e526:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e52a:	d007      	beq.n	800e53c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff fd2f 	bl	800df94 <ptr_to_mem>
 800e536:	4602      	mov	r2, r0
 800e538:	89fb      	ldrh	r3, [r7, #14]
 800e53a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e53c:	4809      	ldr	r0, [pc, #36]	@ (800e564 <mem_trim+0x208>)
 800e53e:	f00a fc56 	bl	8018dee <sys_mutex_unlock>
  return rmem;
 800e542:	687b      	ldr	r3, [r7, #4]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3720      	adds	r7, #32
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}
 800e54c:	2000ec30 	.word	0x2000ec30
 800e550:	2000ec34 	.word	0x2000ec34
 800e554:	0801cb8c 	.word	0x0801cb8c
 800e558:	0801cd18 	.word	0x0801cd18
 800e55c:	0801cbd4 	.word	0x0801cbd4
 800e560:	0801cd30 	.word	0x0801cd30
 800e564:	2000ec38 	.word	0x2000ec38
 800e568:	0801cd50 	.word	0x0801cd50
 800e56c:	2000ec3c 	.word	0x2000ec3c

0800e570 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b088      	sub	sp, #32
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e57a:	88fb      	ldrh	r3, [r7, #6]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <mem_malloc+0x14>
    return NULL;
 800e580:	2300      	movs	r3, #0
 800e582:	e0e2      	b.n	800e74a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e584:	88fb      	ldrh	r3, [r7, #6]
 800e586:	3303      	adds	r3, #3
 800e588:	b29b      	uxth	r3, r3
 800e58a:	f023 0303 	bic.w	r3, r3, #3
 800e58e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e590:	8bbb      	ldrh	r3, [r7, #28]
 800e592:	2b0b      	cmp	r3, #11
 800e594:	d801      	bhi.n	800e59a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e596:	230c      	movs	r3, #12
 800e598:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e59a:	8bbb      	ldrh	r3, [r7, #28]
 800e59c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e5a0:	d803      	bhi.n	800e5aa <mem_malloc+0x3a>
 800e5a2:	8bba      	ldrh	r2, [r7, #28]
 800e5a4:	88fb      	ldrh	r3, [r7, #6]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d201      	bcs.n	800e5ae <mem_malloc+0x3e>
    return NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	e0cd      	b.n	800e74a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e5ae:	4869      	ldr	r0, [pc, #420]	@ (800e754 <mem_malloc+0x1e4>)
 800e5b0:	f00a fc0e 	bl	8018dd0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e5b4:	4b68      	ldr	r3, [pc, #416]	@ (800e758 <mem_malloc+0x1e8>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff fcfd 	bl	800dfb8 <mem_to_ptr>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	83fb      	strh	r3, [r7, #30]
 800e5c2:	e0b7      	b.n	800e734 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e5c4:	8bfb      	ldrh	r3, [r7, #30]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff fce4 	bl	800df94 <ptr_to_mem>
 800e5cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	791b      	ldrb	r3, [r3, #4]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f040 80a7 	bne.w	800e726 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	881b      	ldrh	r3, [r3, #0]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	8bfb      	ldrh	r3, [r7, #30]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	f1a3 0208 	sub.w	r2, r3, #8
 800e5e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	f0c0 809c 	bcc.w	800e726 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	8bfb      	ldrh	r3, [r7, #30]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	f1a3 0208 	sub.w	r2, r3, #8
 800e5fc:	8bbb      	ldrh	r3, [r7, #28]
 800e5fe:	3314      	adds	r3, #20
 800e600:	429a      	cmp	r2, r3
 800e602:	d333      	bcc.n	800e66c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e604:	8bfa      	ldrh	r2, [r7, #30]
 800e606:	8bbb      	ldrh	r3, [r7, #28]
 800e608:	4413      	add	r3, r2
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	3308      	adds	r3, #8
 800e60e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e610:	8a7b      	ldrh	r3, [r7, #18]
 800e612:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e616:	d106      	bne.n	800e626 <mem_malloc+0xb6>
 800e618:	4b50      	ldr	r3, [pc, #320]	@ (800e75c <mem_malloc+0x1ec>)
 800e61a:	f240 3287 	movw	r2, #903	@ 0x387
 800e61e:	4950      	ldr	r1, [pc, #320]	@ (800e760 <mem_malloc+0x1f0>)
 800e620:	4850      	ldr	r0, [pc, #320]	@ (800e764 <mem_malloc+0x1f4>)
 800e622:	f00b f967 	bl	80198f4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e626:	8a7b      	ldrh	r3, [r7, #18]
 800e628:	4618      	mov	r0, r3
 800e62a:	f7ff fcb3 	bl	800df94 <ptr_to_mem>
 800e62e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2200      	movs	r2, #0
 800e634:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	881a      	ldrh	r2, [r3, #0]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	8bfa      	ldrh	r2, [r7, #30]
 800e642:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	8a7a      	ldrh	r2, [r7, #18]
 800e648:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2201      	movs	r2, #1
 800e64e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	881b      	ldrh	r3, [r3, #0]
 800e654:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e658:	d00b      	beq.n	800e672 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	4618      	mov	r0, r3
 800e660:	f7ff fc98 	bl	800df94 <ptr_to_mem>
 800e664:	4602      	mov	r2, r0
 800e666:	8a7b      	ldrh	r3, [r7, #18]
 800e668:	8053      	strh	r3, [r2, #2]
 800e66a:	e002      	b.n	800e672 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2201      	movs	r2, #1
 800e670:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e672:	4b39      	ldr	r3, [pc, #228]	@ (800e758 <mem_malloc+0x1e8>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d127      	bne.n	800e6cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e67c:	4b36      	ldr	r3, [pc, #216]	@ (800e758 <mem_malloc+0x1e8>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e682:	e005      	b.n	800e690 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e684:	69bb      	ldr	r3, [r7, #24]
 800e686:	881b      	ldrh	r3, [r3, #0]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7ff fc83 	bl	800df94 <ptr_to_mem>
 800e68e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	791b      	ldrb	r3, [r3, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d004      	beq.n	800e6a2 <mem_malloc+0x132>
 800e698:	4b33      	ldr	r3, [pc, #204]	@ (800e768 <mem_malloc+0x1f8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	69ba      	ldr	r2, [r7, #24]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d1f0      	bne.n	800e684 <mem_malloc+0x114>
          }
          lfree = cur;
 800e6a2:	4a2d      	ldr	r2, [pc, #180]	@ (800e758 <mem_malloc+0x1e8>)
 800e6a4:	69bb      	ldr	r3, [r7, #24]
 800e6a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800e758 <mem_malloc+0x1e8>)
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	4b2e      	ldr	r3, [pc, #184]	@ (800e768 <mem_malloc+0x1f8>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d00b      	beq.n	800e6cc <mem_malloc+0x15c>
 800e6b4:	4b28      	ldr	r3, [pc, #160]	@ (800e758 <mem_malloc+0x1e8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	791b      	ldrb	r3, [r3, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d006      	beq.n	800e6cc <mem_malloc+0x15c>
 800e6be:	4b27      	ldr	r3, [pc, #156]	@ (800e75c <mem_malloc+0x1ec>)
 800e6c0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e6c4:	4929      	ldr	r1, [pc, #164]	@ (800e76c <mem_malloc+0x1fc>)
 800e6c6:	4827      	ldr	r0, [pc, #156]	@ (800e764 <mem_malloc+0x1f4>)
 800e6c8:	f00b f914 	bl	80198f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e6cc:	4821      	ldr	r0, [pc, #132]	@ (800e754 <mem_malloc+0x1e4>)
 800e6ce:	f00a fb8e 	bl	8018dee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e6d2:	8bba      	ldrh	r2, [r7, #28]
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	3308      	adds	r3, #8
 800e6da:	4a23      	ldr	r2, [pc, #140]	@ (800e768 <mem_malloc+0x1f8>)
 800e6dc:	6812      	ldr	r2, [r2, #0]
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	d906      	bls.n	800e6f0 <mem_malloc+0x180>
 800e6e2:	4b1e      	ldr	r3, [pc, #120]	@ (800e75c <mem_malloc+0x1ec>)
 800e6e4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e6e8:	4921      	ldr	r1, [pc, #132]	@ (800e770 <mem_malloc+0x200>)
 800e6ea:	481e      	ldr	r0, [pc, #120]	@ (800e764 <mem_malloc+0x1f4>)
 800e6ec:	f00b f902 	bl	80198f4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	f003 0303 	and.w	r3, r3, #3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d006      	beq.n	800e708 <mem_malloc+0x198>
 800e6fa:	4b18      	ldr	r3, [pc, #96]	@ (800e75c <mem_malloc+0x1ec>)
 800e6fc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e700:	491c      	ldr	r1, [pc, #112]	@ (800e774 <mem_malloc+0x204>)
 800e702:	4818      	ldr	r0, [pc, #96]	@ (800e764 <mem_malloc+0x1f4>)
 800e704:	f00b f8f6 	bl	80198f4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	f003 0303 	and.w	r3, r3, #3
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d006      	beq.n	800e720 <mem_malloc+0x1b0>
 800e712:	4b12      	ldr	r3, [pc, #72]	@ (800e75c <mem_malloc+0x1ec>)
 800e714:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e718:	4917      	ldr	r1, [pc, #92]	@ (800e778 <mem_malloc+0x208>)
 800e71a:	4812      	ldr	r0, [pc, #72]	@ (800e764 <mem_malloc+0x1f4>)
 800e71c:	f00b f8ea 	bl	80198f4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	3308      	adds	r3, #8
 800e724:	e011      	b.n	800e74a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e726:	8bfb      	ldrh	r3, [r7, #30]
 800e728:	4618      	mov	r0, r3
 800e72a:	f7ff fc33 	bl	800df94 <ptr_to_mem>
 800e72e:	4603      	mov	r3, r0
 800e730:	881b      	ldrh	r3, [r3, #0]
 800e732:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e734:	8bfa      	ldrh	r2, [r7, #30]
 800e736:	8bbb      	ldrh	r3, [r7, #28]
 800e738:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800e73c:	429a      	cmp	r2, r3
 800e73e:	f4ff af41 	bcc.w	800e5c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e742:	4804      	ldr	r0, [pc, #16]	@ (800e754 <mem_malloc+0x1e4>)
 800e744:	f00a fb53 	bl	8018dee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3720      	adds	r7, #32
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	2000ec38 	.word	0x2000ec38
 800e758:	2000ec3c 	.word	0x2000ec3c
 800e75c:	0801cb8c 	.word	0x0801cb8c
 800e760:	0801cd50 	.word	0x0801cd50
 800e764:	0801cbd4 	.word	0x0801cbd4
 800e768:	2000ec34 	.word	0x2000ec34
 800e76c:	0801cd64 	.word	0x0801cd64
 800e770:	0801cd80 	.word	0x0801cd80
 800e774:	0801cdb0 	.word	0x0801cdb0
 800e778:	0801cde0 	.word	0x0801cde0

0800e77c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	3303      	adds	r3, #3
 800e792:	f023 0303 	bic.w	r3, r3, #3
 800e796:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e798:	2300      	movs	r3, #0
 800e79a:	60fb      	str	r3, [r7, #12]
 800e79c:	e011      	b.n	800e7c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	689b      	ldr	r3, [r3, #8]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	881b      	ldrh	r3, [r3, #0]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	60fb      	str	r3, [r7, #12]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	dbe7      	blt.n	800e79e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e7ce:	bf00      	nop
 800e7d0:	bf00      	nop
 800e7d2:	3714      	adds	r7, #20
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	80fb      	strh	r3, [r7, #6]
 800e7e6:	e009      	b.n	800e7fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e7e8:	88fb      	ldrh	r3, [r7, #6]
 800e7ea:	4a08      	ldr	r2, [pc, #32]	@ (800e80c <memp_init+0x30>)
 800e7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff ffc3 	bl	800e77c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7f6:	88fb      	ldrh	r3, [r7, #6]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	80fb      	strh	r3, [r7, #6]
 800e7fc:	88fb      	ldrh	r3, [r7, #6]
 800e7fe:	2b0c      	cmp	r3, #12
 800e800:	d9f2      	bls.n	800e7e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e802:	bf00      	nop
 800e804:	bf00      	nop
 800e806:	3708      	adds	r7, #8
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0801f5ec 	.word	0x0801f5ec

0800e810 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e818:	f00a fb16 	bl	8018e48 <sys_arch_protect>
 800e81c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d015      	beq.n	800e858 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	689b      	ldr	r3, [r3, #8]
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	6812      	ldr	r2, [r2, #0]
 800e834:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	f003 0303 	and.w	r3, r3, #3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d006      	beq.n	800e84e <do_memp_malloc_pool+0x3e>
 800e840:	4b09      	ldr	r3, [pc, #36]	@ (800e868 <do_memp_malloc_pool+0x58>)
 800e842:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e846:	4909      	ldr	r1, [pc, #36]	@ (800e86c <do_memp_malloc_pool+0x5c>)
 800e848:	4809      	ldr	r0, [pc, #36]	@ (800e870 <do_memp_malloc_pool+0x60>)
 800e84a:	f00b f853 	bl	80198f4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f00a fb08 	bl	8018e64 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	e003      	b.n	800e860 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f00a fb03 	bl	8018e64 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e85e:	2300      	movs	r3, #0
}
 800e860:	4618      	mov	r0, r3
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	0801ce04 	.word	0x0801ce04
 800e86c:	0801ce34 	.word	0x0801ce34
 800e870:	0801ce58 	.word	0x0801ce58

0800e874 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b084      	sub	sp, #16
 800e878:	af00      	add	r7, sp, #0
 800e87a:	4603      	mov	r3, r0
 800e87c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	2b0c      	cmp	r3, #12
 800e882:	d908      	bls.n	800e896 <memp_malloc+0x22>
 800e884:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b0 <memp_malloc+0x3c>)
 800e886:	f240 1257 	movw	r2, #343	@ 0x157
 800e88a:	490a      	ldr	r1, [pc, #40]	@ (800e8b4 <memp_malloc+0x40>)
 800e88c:	480a      	ldr	r0, [pc, #40]	@ (800e8b8 <memp_malloc+0x44>)
 800e88e:	f00b f831 	bl	80198f4 <iprintf>
 800e892:	2300      	movs	r3, #0
 800e894:	e008      	b.n	800e8a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e896:	79fb      	ldrb	r3, [r7, #7]
 800e898:	4a08      	ldr	r2, [pc, #32]	@ (800e8bc <memp_malloc+0x48>)
 800e89a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7ff ffb6 	bl	800e810 <do_memp_malloc_pool>
 800e8a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	0801ce04 	.word	0x0801ce04
 800e8b4:	0801ce94 	.word	0x0801ce94
 800e8b8:	0801ce58 	.word	0x0801ce58
 800e8bc:	0801f5ec 	.word	0x0801f5ec

0800e8c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b084      	sub	sp, #16
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	f003 0303 	and.w	r3, r3, #3
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d006      	beq.n	800e8e2 <do_memp_free_pool+0x22>
 800e8d4:	4b0d      	ldr	r3, [pc, #52]	@ (800e90c <do_memp_free_pool+0x4c>)
 800e8d6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e8da:	490d      	ldr	r1, [pc, #52]	@ (800e910 <do_memp_free_pool+0x50>)
 800e8dc:	480d      	ldr	r0, [pc, #52]	@ (800e914 <do_memp_free_pool+0x54>)
 800e8de:	f00b f809 	bl	80198f4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e8e6:	f00a faaf 	bl	8018e48 <sys_arch_protect>
 800e8ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e8fe:	68b8      	ldr	r0, [r7, #8]
 800e900:	f00a fab0 	bl	8018e64 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e904:	bf00      	nop
 800e906:	3710      	adds	r7, #16
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	0801ce04 	.word	0x0801ce04
 800e910:	0801ceb4 	.word	0x0801ceb4
 800e914:	0801ce58 	.word	0x0801ce58

0800e918 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	6039      	str	r1, [r7, #0]
 800e922:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	2b0c      	cmp	r3, #12
 800e928:	d907      	bls.n	800e93a <memp_free+0x22>
 800e92a:	4b0c      	ldr	r3, [pc, #48]	@ (800e95c <memp_free+0x44>)
 800e92c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e930:	490b      	ldr	r1, [pc, #44]	@ (800e960 <memp_free+0x48>)
 800e932:	480c      	ldr	r0, [pc, #48]	@ (800e964 <memp_free+0x4c>)
 800e934:	f00a ffde 	bl	80198f4 <iprintf>
 800e938:	e00c      	b.n	800e954 <memp_free+0x3c>

  if (mem == NULL) {
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d008      	beq.n	800e952 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e940:	79fb      	ldrb	r3, [r7, #7]
 800e942:	4a09      	ldr	r2, [pc, #36]	@ (800e968 <memp_free+0x50>)
 800e944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7ff ffb8 	bl	800e8c0 <do_memp_free_pool>
 800e950:	e000      	b.n	800e954 <memp_free+0x3c>
    return;
 800e952:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	0801ce04 	.word	0x0801ce04
 800e960:	0801ced4 	.word	0x0801ced4
 800e964:	0801ce58 	.word	0x0801ce58
 800e968:	0801f5ec 	.word	0x0801f5ec

0800e96c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e970:	bf00      	nop
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
	...

0800e97c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d108      	bne.n	800e9a2 <netif_add+0x26>
 800e990:	4b57      	ldr	r3, [pc, #348]	@ (800eaf0 <netif_add+0x174>)
 800e992:	f240 1227 	movw	r2, #295	@ 0x127
 800e996:	4957      	ldr	r1, [pc, #348]	@ (800eaf4 <netif_add+0x178>)
 800e998:	4857      	ldr	r0, [pc, #348]	@ (800eaf8 <netif_add+0x17c>)
 800e99a:	f00a ffab 	bl	80198f4 <iprintf>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	e0a2      	b.n	800eae8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d108      	bne.n	800e9ba <netif_add+0x3e>
 800e9a8:	4b51      	ldr	r3, [pc, #324]	@ (800eaf0 <netif_add+0x174>)
 800e9aa:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e9ae:	4953      	ldr	r1, [pc, #332]	@ (800eafc <netif_add+0x180>)
 800e9b0:	4851      	ldr	r0, [pc, #324]	@ (800eaf8 <netif_add+0x17c>)
 800e9b2:	f00a ff9f 	bl	80198f4 <iprintf>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e096      	b.n	800eae8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e9c0:	4b4f      	ldr	r3, [pc, #316]	@ (800eb00 <netif_add+0x184>)
 800e9c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d101      	bne.n	800e9ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e9ca:	4b4d      	ldr	r3, [pc, #308]	@ (800eb00 <netif_add+0x184>)
 800e9cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e9d4:	4b4a      	ldr	r3, [pc, #296]	@ (800eb00 <netif_add+0x184>)
 800e9d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4a45      	ldr	r2, [pc, #276]	@ (800eb04 <netif_add+0x188>)
 800e9ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2200      	movs	r2, #0
 800ea02:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6a3a      	ldr	r2, [r7, #32]
 800ea08:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ea0a:	4b3f      	ldr	r3, [pc, #252]	@ (800eb08 <netif_add+0x18c>)
 800ea0c:	781a      	ldrb	r2, [r3, #0]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea18:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	68b9      	ldr	r1, [r7, #8]
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 f913 	bl	800ec4c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	4798      	blx	r3
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d001      	beq.n	800ea36 <netif_add+0xba>
    return NULL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e058      	b.n	800eae8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea3c:	2bff      	cmp	r3, #255	@ 0xff
 800ea3e:	d103      	bne.n	800ea48 <netif_add+0xcc>
        netif->num = 0;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea4c:	4b2f      	ldr	r3, [pc, #188]	@ (800eb0c <netif_add+0x190>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	e02b      	b.n	800eaac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ea54:	697a      	ldr	r2, [r7, #20]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d106      	bne.n	800ea6a <netif_add+0xee>
 800ea5c:	4b24      	ldr	r3, [pc, #144]	@ (800eaf0 <netif_add+0x174>)
 800ea5e:	f240 128b 	movw	r2, #395	@ 0x18b
 800ea62:	492b      	ldr	r1, [pc, #172]	@ (800eb10 <netif_add+0x194>)
 800ea64:	4824      	ldr	r0, [pc, #144]	@ (800eaf8 <netif_add+0x17c>)
 800ea66:	f00a ff45 	bl	80198f4 <iprintf>
        num_netifs++;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	2bff      	cmp	r3, #255	@ 0xff
 800ea74:	dd06      	ble.n	800ea84 <netif_add+0x108>
 800ea76:	4b1e      	ldr	r3, [pc, #120]	@ (800eaf0 <netif_add+0x174>)
 800ea78:	f240 128d 	movw	r2, #397	@ 0x18d
 800ea7c:	4925      	ldr	r1, [pc, #148]	@ (800eb14 <netif_add+0x198>)
 800ea7e:	481e      	ldr	r0, [pc, #120]	@ (800eaf8 <netif_add+0x17c>)
 800ea80:	f00a ff38 	bl	80198f4 <iprintf>
        if (netif2->num == netif->num) {
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d108      	bne.n	800eaa6 <netif_add+0x12a>
          netif->num++;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	b2da      	uxtb	r2, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800eaa4:	e005      	b.n	800eab2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	617b      	str	r3, [r7, #20]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1d0      	bne.n	800ea54 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d1be      	bne.n	800ea36 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eabe:	2bfe      	cmp	r3, #254	@ 0xfe
 800eac0:	d103      	bne.n	800eaca <netif_add+0x14e>
    netif_num = 0;
 800eac2:	4b11      	ldr	r3, [pc, #68]	@ (800eb08 <netif_add+0x18c>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	701a      	strb	r2, [r3, #0]
 800eac8:	e006      	b.n	800ead8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ead0:	3301      	adds	r3, #1
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	4b0c      	ldr	r3, [pc, #48]	@ (800eb08 <netif_add+0x18c>)
 800ead6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ead8:	4b0c      	ldr	r3, [pc, #48]	@ (800eb0c <netif_add+0x190>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800eae0:	4a0a      	ldr	r2, [pc, #40]	@ (800eb0c <netif_add+0x190>)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800eae6:	68fb      	ldr	r3, [r7, #12]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	0801cef0 	.word	0x0801cef0
 800eaf4:	0801cf84 	.word	0x0801cf84
 800eaf8:	0801cf40 	.word	0x0801cf40
 800eafc:	0801cfa0 	.word	0x0801cfa0
 800eb00:	0801f660 	.word	0x0801f660
 800eb04:	0800ef27 	.word	0x0800ef27
 800eb08:	20011d14 	.word	0x20011d14
 800eb0c:	20011d0c 	.word	0x20011d0c
 800eb10:	0801cfc4 	.word	0x0801cfc4
 800eb14:	0801cfd8 	.word	0x0801cfd8

0800eb18 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800eb22:	6839      	ldr	r1, [r7, #0]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f002 fe51 	bl	80117cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800eb2a:	6839      	ldr	r1, [r7, #0]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f007 fcfd 	bl	801652c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
	...

0800eb3c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d106      	bne.n	800eb5c <netif_do_set_ipaddr+0x20>
 800eb4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc4 <netif_do_set_ipaddr+0x88>)
 800eb50:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800eb54:	491c      	ldr	r1, [pc, #112]	@ (800ebc8 <netif_do_set_ipaddr+0x8c>)
 800eb56:	481d      	ldr	r0, [pc, #116]	@ (800ebcc <netif_do_set_ipaddr+0x90>)
 800eb58:	f00a fecc 	bl	80198f4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <netif_do_set_ipaddr+0x34>
 800eb62:	4b18      	ldr	r3, [pc, #96]	@ (800ebc4 <netif_do_set_ipaddr+0x88>)
 800eb64:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800eb68:	4917      	ldr	r1, [pc, #92]	@ (800ebc8 <netif_do_set_ipaddr+0x8c>)
 800eb6a:	4818      	ldr	r0, [pc, #96]	@ (800ebcc <netif_do_set_ipaddr+0x90>)
 800eb6c:	f00a fec2 	bl	80198f4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3304      	adds	r3, #4
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d01c      	beq.n	800ebb8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	3304      	adds	r3, #4
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800eb8e:	f107 0314 	add.w	r3, r7, #20
 800eb92:	4619      	mov	r1, r3
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f7ff ffbf 	bl	800eb18 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d002      	beq.n	800eba6 <netif_do_set_ipaddr+0x6a>
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	e000      	b.n	800eba8 <netif_do_set_ipaddr+0x6c>
 800eba6:	2300      	movs	r3, #0
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ebac:	2101      	movs	r1, #1
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f000 f8d2 	bl	800ed58 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e000      	b.n	800ebba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3718      	adds	r7, #24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	0801cef0 	.word	0x0801cef0
 800ebc8:	0801d008 	.word	0x0801d008
 800ebcc:	0801cf40 	.word	0x0801cf40

0800ebd0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d00a      	beq.n	800ec00 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <netif_do_set_netmask+0x26>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	e000      	b.n	800ebf8 <netif_do_set_netmask+0x28>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e000      	b.n	800ec02 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3714      	adds	r7, #20
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ec0e:	b480      	push	{r7}
 800ec10:	b085      	sub	sp, #20
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	60f8      	str	r0, [r7, #12]
 800ec16:	60b9      	str	r1, [r7, #8]
 800ec18:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	330c      	adds	r3, #12
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d00a      	beq.n	800ec3e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d002      	beq.n	800ec34 <netif_do_set_gw+0x26>
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	e000      	b.n	800ec36 <netif_do_set_gw+0x28>
 800ec34:	2300      	movs	r3, #0
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	e000      	b.n	800ec40 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b088      	sub	sp, #32
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ec68:	4b1c      	ldr	r3, [pc, #112]	@ (800ecdc <netif_set_addr+0x90>)
 800ec6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d101      	bne.n	800ec76 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ec72:	4b1a      	ldr	r3, [pc, #104]	@ (800ecdc <netif_set_addr+0x90>)
 800ec74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d101      	bne.n	800ec80 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ec7c:	4b17      	ldr	r3, [pc, #92]	@ (800ecdc <netif_set_addr+0x90>)
 800ec7e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d003      	beq.n	800ec8e <netif_set_addr+0x42>
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d101      	bne.n	800ec92 <netif_set_addr+0x46>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e000      	b.n	800ec94 <netif_set_addr+0x48>
 800ec92:	2300      	movs	r3, #0
 800ec94:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d006      	beq.n	800ecaa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ec9c:	f107 0310 	add.w	r3, r7, #16
 800eca0:	461a      	mov	r2, r3
 800eca2:	68b9      	ldr	r1, [r7, #8]
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f7ff ff49 	bl	800eb3c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ecaa:	69fa      	ldr	r2, [r7, #28]
 800ecac:	6879      	ldr	r1, [r7, #4]
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff ff8e 	bl	800ebd0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f7ff ffa8 	bl	800ec0e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d106      	bne.n	800ecd2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ecc4:	f107 0310 	add.w	r3, r7, #16
 800ecc8:	461a      	mov	r2, r3
 800ecca:	68b9      	ldr	r1, [r7, #8]
 800eccc:	68f8      	ldr	r0, [r7, #12]
 800ecce:	f7ff ff35 	bl	800eb3c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ecd2:	bf00      	nop
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	0801f660 	.word	0x0801f660

0800ece0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ece8:	4a04      	ldr	r2, [pc, #16]	@ (800ecfc <netif_set_default+0x1c>)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ecee:	bf00      	nop
 800ecf0:	370c      	adds	r7, #12
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	20011d10 	.word	0x20011d10

0800ed00 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d107      	bne.n	800ed1e <netif_set_up+0x1e>
 800ed0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ed4c <netif_set_up+0x4c>)
 800ed10:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ed14:	490e      	ldr	r1, [pc, #56]	@ (800ed50 <netif_set_up+0x50>)
 800ed16:	480f      	ldr	r0, [pc, #60]	@ (800ed54 <netif_set_up+0x54>)
 800ed18:	f00a fdec 	bl	80198f4 <iprintf>
 800ed1c:	e013      	b.n	800ed46 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed24:	f003 0301 	and.w	r3, r3, #1
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d10c      	bne.n	800ed46 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed32:	f043 0301 	orr.w	r3, r3, #1
 800ed36:	b2da      	uxtb	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed3e:	2103      	movs	r1, #3
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 f809 	bl	800ed58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	0801cef0 	.word	0x0801cef0
 800ed50:	0801d078 	.word	0x0801d078
 800ed54:	0801cf40 	.word	0x0801cf40

0800ed58 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d106      	bne.n	800ed78 <netif_issue_reports+0x20>
 800ed6a:	4b18      	ldr	r3, [pc, #96]	@ (800edcc <netif_issue_reports+0x74>)
 800ed6c:	f240 326d 	movw	r2, #877	@ 0x36d
 800ed70:	4917      	ldr	r1, [pc, #92]	@ (800edd0 <netif_issue_reports+0x78>)
 800ed72:	4818      	ldr	r0, [pc, #96]	@ (800edd4 <netif_issue_reports+0x7c>)
 800ed74:	f00a fdbe 	bl	80198f4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed7e:	f003 0304 	and.w	r3, r3, #4
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d01e      	beq.n	800edc4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed8c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d017      	beq.n	800edc4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed94:	78fb      	ldrb	r3, [r7, #3]
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d013      	beq.n	800edc6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	3304      	adds	r3, #4
 800eda2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00e      	beq.n	800edc6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edae:	f003 0308 	and.w	r3, r3, #8
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d007      	beq.n	800edc6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3304      	adds	r3, #4
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f008 fb1f 	bl	8017400 <etharp_request>
 800edc2:	e000      	b.n	800edc6 <netif_issue_reports+0x6e>
    return;
 800edc4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0801cef0 	.word	0x0801cef0
 800edd0:	0801d094 	.word	0x0801d094
 800edd4:	0801cf40 	.word	0x0801cf40

0800edd8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b082      	sub	sp, #8
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d107      	bne.n	800edf6 <netif_set_down+0x1e>
 800ede6:	4b12      	ldr	r3, [pc, #72]	@ (800ee30 <netif_set_down+0x58>)
 800ede8:	f240 329b 	movw	r2, #923	@ 0x39b
 800edec:	4911      	ldr	r1, [pc, #68]	@ (800ee34 <netif_set_down+0x5c>)
 800edee:	4812      	ldr	r0, [pc, #72]	@ (800ee38 <netif_set_down+0x60>)
 800edf0:	f00a fd80 	bl	80198f4 <iprintf>
 800edf4:	e019      	b.n	800ee2a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d012      	beq.n	800ee2a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee0a:	f023 0301 	bic.w	r3, r3, #1
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee1c:	f003 0308 	and.w	r3, r3, #8
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f007 fea9 	bl	8016b7c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	0801cef0 	.word	0x0801cef0
 800ee34:	0801d0b8 	.word	0x0801d0b8
 800ee38:	0801cf40 	.word	0x0801cf40

0800ee3c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d107      	bne.n	800ee5a <netif_set_link_up+0x1e>
 800ee4a:	4b13      	ldr	r3, [pc, #76]	@ (800ee98 <netif_set_link_up+0x5c>)
 800ee4c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ee50:	4912      	ldr	r1, [pc, #72]	@ (800ee9c <netif_set_link_up+0x60>)
 800ee52:	4813      	ldr	r0, [pc, #76]	@ (800eea0 <netif_set_link_up+0x64>)
 800ee54:	f00a fd4e 	bl	80198f4 <iprintf>
 800ee58:	e01b      	b.n	800ee92 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee60:	f003 0304 	and.w	r3, r3, #4
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d114      	bne.n	800ee92 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee6e:	f043 0304 	orr.w	r3, r3, #4
 800ee72:	b2da      	uxtb	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ee7a:	2103      	movs	r1, #3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff ff6b 	bl	800ed58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	69db      	ldr	r3, [r3, #28]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d003      	beq.n	800ee92 <netif_set_link_up+0x56>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	69db      	ldr	r3, [r3, #28]
 800ee8e:	6878      	ldr	r0, [r7, #4]
 800ee90:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ee92:	3708      	adds	r7, #8
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	0801cef0 	.word	0x0801cef0
 800ee9c:	0801d0d8 	.word	0x0801d0d8
 800eea0:	0801cf40 	.word	0x0801cf40

0800eea4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d107      	bne.n	800eec2 <netif_set_link_down+0x1e>
 800eeb2:	4b11      	ldr	r3, [pc, #68]	@ (800eef8 <netif_set_link_down+0x54>)
 800eeb4:	f240 4206 	movw	r2, #1030	@ 0x406
 800eeb8:	4910      	ldr	r1, [pc, #64]	@ (800eefc <netif_set_link_down+0x58>)
 800eeba:	4811      	ldr	r0, [pc, #68]	@ (800ef00 <netif_set_link_down+0x5c>)
 800eebc:	f00a fd1a 	bl	80198f4 <iprintf>
 800eec0:	e017      	b.n	800eef2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eec8:	f003 0304 	and.w	r3, r3, #4
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d010      	beq.n	800eef2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eed6:	f023 0304 	bic.w	r3, r3, #4
 800eeda:	b2da      	uxtb	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d003      	beq.n	800eef2 <netif_set_link_down+0x4e>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	69db      	ldr	r3, [r3, #28]
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eef2:	3708      	adds	r7, #8
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	0801cef0 	.word	0x0801cef0
 800eefc:	0801d0fc 	.word	0x0801d0fc
 800ef00:	0801cf40 	.word	0x0801cf40

0800ef04 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d002      	beq.n	800ef1a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	61da      	str	r2, [r3, #28]
  }
}
 800ef1a:	bf00      	nop
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ef26:	b480      	push	{r7}
 800ef28:	b085      	sub	sp, #20
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	60f8      	str	r0, [r7, #12]
 800ef2e:	60b9      	str	r1, [r7, #8]
 800ef30:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ef32:	f06f 030b 	mvn.w	r3, #11
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
	...

0800ef44 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d013      	beq.n	800ef7c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ef54:	4b0d      	ldr	r3, [pc, #52]	@ (800ef8c <netif_get_by_index+0x48>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	60fb      	str	r3, [r7, #12]
 800ef5a:	e00c      	b.n	800ef76 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef62:	3301      	adds	r3, #1
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	79fa      	ldrb	r2, [r7, #7]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d101      	bne.n	800ef70 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	e006      	b.n	800ef7e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	60fb      	str	r3, [r7, #12]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d1ef      	bne.n	800ef5c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	20011d0c 	.word	0x20011d0c

0800ef90 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ef96:	f009 ff57 	bl	8018e48 <sys_arch_protect>
 800ef9a:	6038      	str	r0, [r7, #0]
 800ef9c:	4b0d      	ldr	r3, [pc, #52]	@ (800efd4 <pbuf_free_ooseq+0x44>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	701a      	strb	r2, [r3, #0]
 800efa2:	6838      	ldr	r0, [r7, #0]
 800efa4:	f009 ff5e 	bl	8018e64 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efa8:	4b0b      	ldr	r3, [pc, #44]	@ (800efd8 <pbuf_free_ooseq+0x48>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	607b      	str	r3, [r7, #4]
 800efae:	e00a      	b.n	800efc6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d003      	beq.n	800efc0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f002 fc45 	bl	8011848 <tcp_free_ooseq>
      return;
 800efbe:	e005      	b.n	800efcc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	607b      	str	r3, [r7, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d1f1      	bne.n	800efb0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800efcc:	3708      	adds	r7, #8
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	20011d15 	.word	0x20011d15
 800efd8:	20011d24 	.word	0x20011d24

0800efdc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800efe4:	f7ff ffd4 	bl	800ef90 <pbuf_free_ooseq>
}
 800efe8:	bf00      	nop
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b082      	sub	sp, #8
 800eff4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800eff6:	f009 ff27 	bl	8018e48 <sys_arch_protect>
 800effa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800effc:	4b0f      	ldr	r3, [pc, #60]	@ (800f03c <pbuf_pool_is_empty+0x4c>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f002:	4b0e      	ldr	r3, [pc, #56]	@ (800f03c <pbuf_pool_is_empty+0x4c>)
 800f004:	2201      	movs	r2, #1
 800f006:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f009 ff2b 	bl	8018e64 <sys_arch_unprotect>

  if (!queued) {
 800f00e:	78fb      	ldrb	r3, [r7, #3]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10f      	bne.n	800f034 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f014:	2100      	movs	r1, #0
 800f016:	480a      	ldr	r0, [pc, #40]	@ (800f040 <pbuf_pool_is_empty+0x50>)
 800f018:	f7fe fed6 	bl	800ddc8 <tcpip_try_callback>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <pbuf_pool_is_empty+0x44>
 800f022:	f009 ff11 	bl	8018e48 <sys_arch_protect>
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	4b04      	ldr	r3, [pc, #16]	@ (800f03c <pbuf_pool_is_empty+0x4c>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	701a      	strb	r2, [r3, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f009 ff18 	bl	8018e64 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f034:	bf00      	nop
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	20011d15 	.word	0x20011d15
 800f040:	0800efdd 	.word	0x0800efdd

0800f044 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	4611      	mov	r1, r2
 800f050:	461a      	mov	r2, r3
 800f052:	460b      	mov	r3, r1
 800f054:	80fb      	strh	r3, [r7, #6]
 800f056:	4613      	mov	r3, r2
 800f058:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	88fa      	ldrh	r2, [r7, #6]
 800f06a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	88ba      	ldrh	r2, [r7, #4]
 800f070:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f072:	8b3b      	ldrh	r3, [r7, #24]
 800f074:	b2da      	uxtb	r2, r3
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	7f3a      	ldrb	r2, [r7, #28]
 800f07e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2201      	movs	r2, #1
 800f084:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	73da      	strb	r2, [r3, #15]
}
 800f08c:	bf00      	nop
 800f08e:	3714      	adds	r7, #20
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08c      	sub	sp, #48	@ 0x30
 800f09c:	af02      	add	r7, sp, #8
 800f09e:	4603      	mov	r3, r0
 800f0a0:	71fb      	strb	r3, [r7, #7]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	80bb      	strh	r3, [r7, #4]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f0aa:	79fb      	ldrb	r3, [r7, #7]
 800f0ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f0ae:	887b      	ldrh	r3, [r7, #2]
 800f0b0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f0b4:	d07f      	beq.n	800f1b6 <pbuf_alloc+0x11e>
 800f0b6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f0ba:	f300 80c8 	bgt.w	800f24e <pbuf_alloc+0x1b6>
 800f0be:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f0c2:	d010      	beq.n	800f0e6 <pbuf_alloc+0x4e>
 800f0c4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f0c8:	f300 80c1 	bgt.w	800f24e <pbuf_alloc+0x1b6>
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d002      	beq.n	800f0d6 <pbuf_alloc+0x3e>
 800f0d0:	2b41      	cmp	r3, #65	@ 0x41
 800f0d2:	f040 80bc 	bne.w	800f24e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f0d6:	887a      	ldrh	r2, [r7, #2]
 800f0d8:	88bb      	ldrh	r3, [r7, #4]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	2000      	movs	r0, #0
 800f0de:	f000 f8d1 	bl	800f284 <pbuf_alloc_reference>
 800f0e2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800f0e4:	e0bd      	b.n	800f262 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f0ee:	88bb      	ldrh	r3, [r7, #4]
 800f0f0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f0f2:	200c      	movs	r0, #12
 800f0f4:	f7ff fbbe 	bl	800e874 <memp_malloc>
 800f0f8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d109      	bne.n	800f114 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f100:	f7ff ff76 	bl	800eff0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f10a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f10c:	f000 faa8 	bl	800f660 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f110:	2300      	movs	r3, #0
 800f112:	e0a7      	b.n	800f264 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f114:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f116:	3303      	adds	r3, #3
 800f118:	b29b      	uxth	r3, r3
 800f11a:	f023 0303 	bic.w	r3, r3, #3
 800f11e:	b29b      	uxth	r3, r3
 800f120:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800f124:	b29b      	uxth	r3, r3
 800f126:	8b7a      	ldrh	r2, [r7, #26]
 800f128:	4293      	cmp	r3, r2
 800f12a:	bf28      	it	cs
 800f12c:	4613      	movcs	r3, r2
 800f12e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f130:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f132:	3310      	adds	r3, #16
 800f134:	693a      	ldr	r2, [r7, #16]
 800f136:	4413      	add	r3, r2
 800f138:	3303      	adds	r3, #3
 800f13a:	f023 0303 	bic.w	r3, r3, #3
 800f13e:	4618      	mov	r0, r3
 800f140:	89f9      	ldrh	r1, [r7, #14]
 800f142:	8b7a      	ldrh	r2, [r7, #26]
 800f144:	2300      	movs	r3, #0
 800f146:	9301      	str	r3, [sp, #4]
 800f148:	887b      	ldrh	r3, [r7, #2]
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	460b      	mov	r3, r1
 800f14e:	4601      	mov	r1, r0
 800f150:	6938      	ldr	r0, [r7, #16]
 800f152:	f7ff ff77 	bl	800f044 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	f003 0303 	and.w	r3, r3, #3
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d006      	beq.n	800f170 <pbuf_alloc+0xd8>
 800f162:	4b42      	ldr	r3, [pc, #264]	@ (800f26c <pbuf_alloc+0x1d4>)
 800f164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f168:	4941      	ldr	r1, [pc, #260]	@ (800f270 <pbuf_alloc+0x1d8>)
 800f16a:	4842      	ldr	r0, [pc, #264]	@ (800f274 <pbuf_alloc+0x1dc>)
 800f16c:	f00a fbc2 	bl	80198f4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f170:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f172:	3303      	adds	r3, #3
 800f174:	f023 0303 	bic.w	r3, r3, #3
 800f178:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800f17c:	d106      	bne.n	800f18c <pbuf_alloc+0xf4>
 800f17e:	4b3b      	ldr	r3, [pc, #236]	@ (800f26c <pbuf_alloc+0x1d4>)
 800f180:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f184:	493c      	ldr	r1, [pc, #240]	@ (800f278 <pbuf_alloc+0x1e0>)
 800f186:	483b      	ldr	r0, [pc, #236]	@ (800f274 <pbuf_alloc+0x1dc>)
 800f188:	f00a fbb4 	bl	80198f4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d102      	bne.n	800f198 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	627b      	str	r3, [r7, #36]	@ 0x24
 800f196:	e002      	b.n	800f19e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f1a2:	8b7a      	ldrh	r2, [r7, #26]
 800f1a4:	89fb      	ldrh	r3, [r7, #14]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f1ae:	8b7b      	ldrh	r3, [r7, #26]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d19e      	bne.n	800f0f2 <pbuf_alloc+0x5a>
      break;
 800f1b4:	e055      	b.n	800f262 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f1b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1b8:	3303      	adds	r3, #3
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	f023 0303 	bic.w	r3, r3, #3
 800f1c0:	b29a      	uxth	r2, r3
 800f1c2:	88bb      	ldrh	r3, [r7, #4]
 800f1c4:	3303      	adds	r3, #3
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	f023 0303 	bic.w	r3, r3, #3
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	4413      	add	r3, r2
 800f1d0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f1d2:	8b3b      	ldrh	r3, [r7, #24]
 800f1d4:	3310      	adds	r3, #16
 800f1d6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f1d8:	8b3a      	ldrh	r2, [r7, #24]
 800f1da:	88bb      	ldrh	r3, [r7, #4]
 800f1dc:	3303      	adds	r3, #3
 800f1de:	f023 0303 	bic.w	r3, r3, #3
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d306      	bcc.n	800f1f4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f1e6:	8afa      	ldrh	r2, [r7, #22]
 800f1e8:	88bb      	ldrh	r3, [r7, #4]
 800f1ea:	3303      	adds	r3, #3
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d201      	bcs.n	800f1f8 <pbuf_alloc+0x160>
        return NULL;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	e035      	b.n	800f264 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f1f8:	8afb      	ldrh	r3, [r7, #22]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7ff f9b8 	bl	800e570 <mem_malloc>
 800f200:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f204:	2b00      	cmp	r3, #0
 800f206:	d101      	bne.n	800f20c <pbuf_alloc+0x174>
        return NULL;
 800f208:	2300      	movs	r3, #0
 800f20a:	e02b      	b.n	800f264 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f20c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f20e:	3310      	adds	r3, #16
 800f210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f212:	4413      	add	r3, r2
 800f214:	3303      	adds	r3, #3
 800f216:	f023 0303 	bic.w	r3, r3, #3
 800f21a:	4618      	mov	r0, r3
 800f21c:	88b9      	ldrh	r1, [r7, #4]
 800f21e:	88ba      	ldrh	r2, [r7, #4]
 800f220:	2300      	movs	r3, #0
 800f222:	9301      	str	r3, [sp, #4]
 800f224:	887b      	ldrh	r3, [r7, #2]
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	460b      	mov	r3, r1
 800f22a:	4601      	mov	r1, r0
 800f22c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f22e:	f7ff ff09 	bl	800f044 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	f003 0303 	and.w	r3, r3, #3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d010      	beq.n	800f260 <pbuf_alloc+0x1c8>
 800f23e:	4b0b      	ldr	r3, [pc, #44]	@ (800f26c <pbuf_alloc+0x1d4>)
 800f240:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f244:	490d      	ldr	r1, [pc, #52]	@ (800f27c <pbuf_alloc+0x1e4>)
 800f246:	480b      	ldr	r0, [pc, #44]	@ (800f274 <pbuf_alloc+0x1dc>)
 800f248:	f00a fb54 	bl	80198f4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f24c:	e008      	b.n	800f260 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f24e:	4b07      	ldr	r3, [pc, #28]	@ (800f26c <pbuf_alloc+0x1d4>)
 800f250:	f240 1227 	movw	r2, #295	@ 0x127
 800f254:	490a      	ldr	r1, [pc, #40]	@ (800f280 <pbuf_alloc+0x1e8>)
 800f256:	4807      	ldr	r0, [pc, #28]	@ (800f274 <pbuf_alloc+0x1dc>)
 800f258:	f00a fb4c 	bl	80198f4 <iprintf>
      return NULL;
 800f25c:	2300      	movs	r3, #0
 800f25e:	e001      	b.n	800f264 <pbuf_alloc+0x1cc>
      break;
 800f260:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f264:	4618      	mov	r0, r3
 800f266:	3728      	adds	r7, #40	@ 0x28
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	0801d120 	.word	0x0801d120
 800f270:	0801d150 	.word	0x0801d150
 800f274:	0801d180 	.word	0x0801d180
 800f278:	0801d1a8 	.word	0x0801d1a8
 800f27c:	0801d1dc 	.word	0x0801d1dc
 800f280:	0801d208 	.word	0x0801d208

0800f284 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af02      	add	r7, sp, #8
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	460b      	mov	r3, r1
 800f28e:	807b      	strh	r3, [r7, #2]
 800f290:	4613      	mov	r3, r2
 800f292:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f294:	883b      	ldrh	r3, [r7, #0]
 800f296:	2b41      	cmp	r3, #65	@ 0x41
 800f298:	d009      	beq.n	800f2ae <pbuf_alloc_reference+0x2a>
 800f29a:	883b      	ldrh	r3, [r7, #0]
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d006      	beq.n	800f2ae <pbuf_alloc_reference+0x2a>
 800f2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800f2e0 <pbuf_alloc_reference+0x5c>)
 800f2a2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f2a6:	490f      	ldr	r1, [pc, #60]	@ (800f2e4 <pbuf_alloc_reference+0x60>)
 800f2a8:	480f      	ldr	r0, [pc, #60]	@ (800f2e8 <pbuf_alloc_reference+0x64>)
 800f2aa:	f00a fb23 	bl	80198f4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f2ae:	200b      	movs	r0, #11
 800f2b0:	f7ff fae0 	bl	800e874 <memp_malloc>
 800f2b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d101      	bne.n	800f2c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	e00b      	b.n	800f2d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f2c0:	8879      	ldrh	r1, [r7, #2]
 800f2c2:	887a      	ldrh	r2, [r7, #2]
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	883b      	ldrh	r3, [r7, #0]
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7ff feb7 	bl	800f044 <pbuf_init_alloced_pbuf>
  return p;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	0801d120 	.word	0x0801d120
 800f2e4:	0801d224 	.word	0x0801d224
 800f2e8:	0801d180 	.word	0x0801d180

0800f2ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af02      	add	r7, sp, #8
 800f2f2:	607b      	str	r3, [r7, #4]
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	81bb      	strh	r3, [r7, #12]
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f300:	7bfb      	ldrb	r3, [r7, #15]
 800f302:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f304:	8a7b      	ldrh	r3, [r7, #18]
 800f306:	3303      	adds	r3, #3
 800f308:	f023 0203 	bic.w	r2, r3, #3
 800f30c:	89bb      	ldrh	r3, [r7, #12]
 800f30e:	441a      	add	r2, r3
 800f310:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f312:	429a      	cmp	r2, r3
 800f314:	d901      	bls.n	800f31a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f316:	2300      	movs	r3, #0
 800f318:	e018      	b.n	800f34c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f320:	8a7b      	ldrh	r3, [r7, #18]
 800f322:	3303      	adds	r3, #3
 800f324:	f023 0303 	bic.w	r3, r3, #3
 800f328:	6a3a      	ldr	r2, [r7, #32]
 800f32a:	4413      	add	r3, r2
 800f32c:	617b      	str	r3, [r7, #20]
 800f32e:	e001      	b.n	800f334 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f330:	2300      	movs	r3, #0
 800f332:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	89b9      	ldrh	r1, [r7, #12]
 800f338:	89ba      	ldrh	r2, [r7, #12]
 800f33a:	2302      	movs	r3, #2
 800f33c:	9301      	str	r3, [sp, #4]
 800f33e:	897b      	ldrh	r3, [r7, #10]
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	460b      	mov	r3, r1
 800f344:	6979      	ldr	r1, [r7, #20]
 800f346:	f7ff fe7d 	bl	800f044 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f34a:	687b      	ldr	r3, [r7, #4]
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3718      	adds	r7, #24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b084      	sub	sp, #16
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	460b      	mov	r3, r1
 800f35e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d106      	bne.n	800f374 <pbuf_realloc+0x20>
 800f366:	4b3a      	ldr	r3, [pc, #232]	@ (800f450 <pbuf_realloc+0xfc>)
 800f368:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f36c:	4939      	ldr	r1, [pc, #228]	@ (800f454 <pbuf_realloc+0x100>)
 800f36e:	483a      	ldr	r0, [pc, #232]	@ (800f458 <pbuf_realloc+0x104>)
 800f370:	f00a fac0 	bl	80198f4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	891b      	ldrh	r3, [r3, #8]
 800f378:	887a      	ldrh	r2, [r7, #2]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d263      	bcs.n	800f446 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	891a      	ldrh	r2, [r3, #8]
 800f382:	887b      	ldrh	r3, [r7, #2]
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f388:	887b      	ldrh	r3, [r7, #2]
 800f38a:	817b      	strh	r3, [r7, #10]
  q = p;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f390:	e018      	b.n	800f3c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	895b      	ldrh	r3, [r3, #10]
 800f396:	897a      	ldrh	r2, [r7, #10]
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	891a      	ldrh	r2, [r3, #8]
 800f3a0:	893b      	ldrh	r3, [r7, #8]
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <pbuf_realloc+0x70>
 800f3b6:	4b26      	ldr	r3, [pc, #152]	@ (800f450 <pbuf_realloc+0xfc>)
 800f3b8:	f240 12af 	movw	r2, #431	@ 0x1af
 800f3bc:	4927      	ldr	r1, [pc, #156]	@ (800f45c <pbuf_realloc+0x108>)
 800f3be:	4826      	ldr	r0, [pc, #152]	@ (800f458 <pbuf_realloc+0x104>)
 800f3c0:	f00a fa98 	bl	80198f4 <iprintf>
  while (rem_len > q->len) {
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	895b      	ldrh	r3, [r3, #10]
 800f3c8:	897a      	ldrh	r2, [r7, #10]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d8e1      	bhi.n	800f392 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	7b1b      	ldrb	r3, [r3, #12]
 800f3d2:	f003 030f 	and.w	r3, r3, #15
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d121      	bne.n	800f41e <pbuf_realloc+0xca>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	895b      	ldrh	r3, [r3, #10]
 800f3de:	897a      	ldrh	r2, [r7, #10]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d01c      	beq.n	800f41e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	7b5b      	ldrb	r3, [r3, #13]
 800f3e8:	f003 0302 	and.w	r3, r3, #2
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d116      	bne.n	800f41e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	685a      	ldr	r2, [r3, #4]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	1ad3      	subs	r3, r2, r3
 800f3f8:	b29a      	uxth	r2, r3
 800f3fa:	897b      	ldrh	r3, [r7, #10]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	4619      	mov	r1, r3
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f7fe ffaa 	bl	800e35c <mem_trim>
 800f408:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d106      	bne.n	800f41e <pbuf_realloc+0xca>
 800f410:	4b0f      	ldr	r3, [pc, #60]	@ (800f450 <pbuf_realloc+0xfc>)
 800f412:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f416:	4912      	ldr	r1, [pc, #72]	@ (800f460 <pbuf_realloc+0x10c>)
 800f418:	480f      	ldr	r0, [pc, #60]	@ (800f458 <pbuf_realloc+0x104>)
 800f41a:	f00a fa6b 	bl	80198f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	897a      	ldrh	r2, [r7, #10]
 800f422:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	895a      	ldrh	r2, [r3, #10]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4618      	mov	r0, r3
 800f43a:	f000 f911 	bl	800f660 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	e000      	b.n	800f448 <pbuf_realloc+0xf4>
    return;
 800f446:	bf00      	nop

}
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	0801d120 	.word	0x0801d120
 800f454:	0801d238 	.word	0x0801d238
 800f458:	0801d180 	.word	0x0801d180
 800f45c:	0801d250 	.word	0x0801d250
 800f460:	0801d268 	.word	0x0801d268

0800f464 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	4613      	mov	r3, r2
 800f470:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d106      	bne.n	800f486 <pbuf_add_header_impl+0x22>
 800f478:	4b2b      	ldr	r3, [pc, #172]	@ (800f528 <pbuf_add_header_impl+0xc4>)
 800f47a:	f240 12df 	movw	r2, #479	@ 0x1df
 800f47e:	492b      	ldr	r1, [pc, #172]	@ (800f52c <pbuf_add_header_impl+0xc8>)
 800f480:	482b      	ldr	r0, [pc, #172]	@ (800f530 <pbuf_add_header_impl+0xcc>)
 800f482:	f00a fa37 	bl	80198f4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d003      	beq.n	800f494 <pbuf_add_header_impl+0x30>
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f492:	d301      	bcc.n	800f498 <pbuf_add_header_impl+0x34>
    return 1;
 800f494:	2301      	movs	r3, #1
 800f496:	e043      	b.n	800f520 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d101      	bne.n	800f4a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	e03e      	b.n	800f520 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	891a      	ldrh	r2, [r3, #8]
 800f4aa:	8a7b      	ldrh	r3, [r7, #18]
 800f4ac:	4413      	add	r3, r2
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	8a7a      	ldrh	r2, [r7, #18]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d901      	bls.n	800f4ba <pbuf_add_header_impl+0x56>
    return 1;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	e032      	b.n	800f520 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	7b1b      	ldrb	r3, [r3, #12]
 800f4be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f4c0:	8a3b      	ldrh	r3, [r7, #16]
 800f4c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00c      	beq.n	800f4e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	425b      	negs	r3, r3
 800f4d2:	4413      	add	r3, r2
 800f4d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	3310      	adds	r3, #16
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d20d      	bcs.n	800f4fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	e01d      	b.n	800f520 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d006      	beq.n	800f4f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	425b      	negs	r3, r3
 800f4f2:	4413      	add	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]
 800f4f6:	e001      	b.n	800f4fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e011      	b.n	800f520 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	895a      	ldrh	r2, [r3, #10]
 800f506:	8a7b      	ldrh	r3, [r7, #18]
 800f508:	4413      	add	r3, r2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	891a      	ldrh	r2, [r3, #8]
 800f514:	8a7b      	ldrh	r3, [r7, #18]
 800f516:	4413      	add	r3, r2
 800f518:	b29a      	uxth	r2, r3
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	811a      	strh	r2, [r3, #8]


  return 0;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3718      	adds	r7, #24
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	0801d120 	.word	0x0801d120
 800f52c:	0801d284 	.word	0x0801d284
 800f530:	0801d180 	.word	0x0801d180

0800f534 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f53e:	2200      	movs	r2, #0
 800f540:	6839      	ldr	r1, [r7, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff ff8e 	bl	800f464 <pbuf_add_header_impl>
 800f548:	4603      	mov	r3, r0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
	...

0800f554 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d106      	bne.n	800f572 <pbuf_remove_header+0x1e>
 800f564:	4b20      	ldr	r3, [pc, #128]	@ (800f5e8 <pbuf_remove_header+0x94>)
 800f566:	f240 224b 	movw	r2, #587	@ 0x24b
 800f56a:	4920      	ldr	r1, [pc, #128]	@ (800f5ec <pbuf_remove_header+0x98>)
 800f56c:	4820      	ldr	r0, [pc, #128]	@ (800f5f0 <pbuf_remove_header+0x9c>)
 800f56e:	f00a f9c1 	bl	80198f4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d003      	beq.n	800f580 <pbuf_remove_header+0x2c>
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f57e:	d301      	bcc.n	800f584 <pbuf_remove_header+0x30>
    return 1;
 800f580:	2301      	movs	r3, #1
 800f582:	e02c      	b.n	800f5de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <pbuf_remove_header+0x3a>
    return 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	e027      	b.n	800f5de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	895b      	ldrh	r3, [r3, #10]
 800f596:	89fa      	ldrh	r2, [r7, #14]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d908      	bls.n	800f5ae <pbuf_remove_header+0x5a>
 800f59c:	4b12      	ldr	r3, [pc, #72]	@ (800f5e8 <pbuf_remove_header+0x94>)
 800f59e:	f240 2255 	movw	r2, #597	@ 0x255
 800f5a2:	4914      	ldr	r1, [pc, #80]	@ (800f5f4 <pbuf_remove_header+0xa0>)
 800f5a4:	4812      	ldr	r0, [pc, #72]	@ (800f5f0 <pbuf_remove_header+0x9c>)
 800f5a6:	f00a f9a5 	bl	80198f4 <iprintf>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e017      	b.n	800f5de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	685a      	ldr	r2, [r3, #4]
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	441a      	add	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	895a      	ldrh	r2, [r3, #10]
 800f5c4:	89fb      	ldrh	r3, [r7, #14]
 800f5c6:	1ad3      	subs	r3, r2, r3
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	891a      	ldrh	r2, [r3, #8]
 800f5d2:	89fb      	ldrh	r3, [r7, #14]
 800f5d4:	1ad3      	subs	r3, r2, r3
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	3710      	adds	r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	0801d120 	.word	0x0801d120
 800f5ec:	0801d284 	.word	0x0801d284
 800f5f0:	0801d180 	.word	0x0801d180
 800f5f4:	0801d290 	.word	0x0801d290

0800f5f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	460b      	mov	r3, r1
 800f602:	807b      	strh	r3, [r7, #2]
 800f604:	4613      	mov	r3, r2
 800f606:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	da08      	bge.n	800f622 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f614:	425b      	negs	r3, r3
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff ff9b 	bl	800f554 <pbuf_remove_header>
 800f61e:	4603      	mov	r3, r0
 800f620:	e007      	b.n	800f632 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f622:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f626:	787a      	ldrb	r2, [r7, #1]
 800f628:	4619      	mov	r1, r3
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f7ff ff1a 	bl	800f464 <pbuf_add_header_impl>
 800f630:	4603      	mov	r3, r0
  }
}
 800f632:	4618      	mov	r0, r3
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b082      	sub	sp, #8
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	460b      	mov	r3, r1
 800f644:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f64a:	2201      	movs	r2, #1
 800f64c:	4619      	mov	r1, r3
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7ff ffd2 	bl	800f5f8 <pbuf_header_impl>
 800f654:	4603      	mov	r3, r0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
	...

0800f660 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10b      	bne.n	800f686 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d106      	bne.n	800f682 <pbuf_free+0x22>
 800f674:	4b3b      	ldr	r3, [pc, #236]	@ (800f764 <pbuf_free+0x104>)
 800f676:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f67a:	493b      	ldr	r1, [pc, #236]	@ (800f768 <pbuf_free+0x108>)
 800f67c:	483b      	ldr	r0, [pc, #236]	@ (800f76c <pbuf_free+0x10c>)
 800f67e:	f00a f939 	bl	80198f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f682:	2300      	movs	r3, #0
 800f684:	e069      	b.n	800f75a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f68a:	e062      	b.n	800f752 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f68c:	f009 fbdc 	bl	8018e48 <sys_arch_protect>
 800f690:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	7b9b      	ldrb	r3, [r3, #14]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d106      	bne.n	800f6a8 <pbuf_free+0x48>
 800f69a:	4b32      	ldr	r3, [pc, #200]	@ (800f764 <pbuf_free+0x104>)
 800f69c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f6a0:	4933      	ldr	r1, [pc, #204]	@ (800f770 <pbuf_free+0x110>)
 800f6a2:	4832      	ldr	r0, [pc, #200]	@ (800f76c <pbuf_free+0x10c>)
 800f6a4:	f00a f926 	bl	80198f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	7b9b      	ldrb	r3, [r3, #14]
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	739a      	strb	r2, [r3, #14]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7b9b      	ldrb	r3, [r3, #14]
 800f6b8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f6ba:	69b8      	ldr	r0, [r7, #24]
 800f6bc:	f009 fbd2 	bl	8018e64 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d143      	bne.n	800f74e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	7b1b      	ldrb	r3, [r3, #12]
 800f6d0:	f003 030f 	and.w	r3, r3, #15
 800f6d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	7b5b      	ldrb	r3, [r3, #13]
 800f6da:	f003 0302 	and.w	r3, r3, #2
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d011      	beq.n	800f706 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	691b      	ldr	r3, [r3, #16]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d106      	bne.n	800f6fc <pbuf_free+0x9c>
 800f6ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f764 <pbuf_free+0x104>)
 800f6f0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f6f4:	491f      	ldr	r1, [pc, #124]	@ (800f774 <pbuf_free+0x114>)
 800f6f6:	481d      	ldr	r0, [pc, #116]	@ (800f76c <pbuf_free+0x10c>)
 800f6f8:	f00a f8fc 	bl	80198f4 <iprintf>
        pc->custom_free_function(p);
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	6878      	ldr	r0, [r7, #4]
 800f702:	4798      	blx	r3
 800f704:	e01d      	b.n	800f742 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f706:	7bfb      	ldrb	r3, [r7, #15]
 800f708:	2b02      	cmp	r3, #2
 800f70a:	d104      	bne.n	800f716 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	200c      	movs	r0, #12
 800f710:	f7ff f902 	bl	800e918 <memp_free>
 800f714:	e015      	b.n	800f742 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f716:	7bfb      	ldrb	r3, [r7, #15]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d104      	bne.n	800f726 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f71c:	6879      	ldr	r1, [r7, #4]
 800f71e:	200b      	movs	r0, #11
 800f720:	f7ff f8fa 	bl	800e918 <memp_free>
 800f724:	e00d      	b.n	800f742 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f726:	7bfb      	ldrb	r3, [r7, #15]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d103      	bne.n	800f734 <pbuf_free+0xd4>
          mem_free(p);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f7fe fd85 	bl	800e23c <mem_free>
 800f732:	e006      	b.n	800f742 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f734:	4b0b      	ldr	r3, [pc, #44]	@ (800f764 <pbuf_free+0x104>)
 800f736:	f240 320f 	movw	r2, #783	@ 0x30f
 800f73a:	490f      	ldr	r1, [pc, #60]	@ (800f778 <pbuf_free+0x118>)
 800f73c:	480b      	ldr	r0, [pc, #44]	@ (800f76c <pbuf_free+0x10c>)
 800f73e:	f00a f8d9 	bl	80198f4 <iprintf>
        }
      }
      count++;
 800f742:	7ffb      	ldrb	r3, [r7, #31]
 800f744:	3301      	adds	r3, #1
 800f746:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	607b      	str	r3, [r7, #4]
 800f74c:	e001      	b.n	800f752 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d199      	bne.n	800f68c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f758:	7ffb      	ldrb	r3, [r7, #31]
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3720      	adds	r7, #32
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	0801d120 	.word	0x0801d120
 800f768:	0801d284 	.word	0x0801d284
 800f76c:	0801d180 	.word	0x0801d180
 800f770:	0801d2b0 	.word	0x0801d2b0
 800f774:	0801d2c8 	.word	0x0801d2c8
 800f778:	0801d2ec 	.word	0x0801d2ec

0800f77c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f788:	e005      	b.n	800f796 <pbuf_clen+0x1a>
    ++len;
 800f78a:	89fb      	ldrh	r3, [r7, #14]
 800f78c:	3301      	adds	r3, #1
 800f78e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1f6      	bne.n	800f78a <pbuf_clen+0xe>
  }
  return len;
 800f79c:	89fb      	ldrh	r3, [r7, #14]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3714      	adds	r7, #20
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a8:	4770      	bx	lr
	...

0800f7ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d016      	beq.n	800f7e8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f7ba:	f009 fb45 	bl	8018e48 <sys_arch_protect>
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	7b9b      	ldrb	r3, [r3, #14]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	739a      	strb	r2, [r3, #14]
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f009 fb49 	bl	8018e64 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	7b9b      	ldrb	r3, [r3, #14]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <pbuf_ref+0x3c>
 800f7da:	4b05      	ldr	r3, [pc, #20]	@ (800f7f0 <pbuf_ref+0x44>)
 800f7dc:	f240 3242 	movw	r2, #834	@ 0x342
 800f7e0:	4904      	ldr	r1, [pc, #16]	@ (800f7f4 <pbuf_ref+0x48>)
 800f7e2:	4805      	ldr	r0, [pc, #20]	@ (800f7f8 <pbuf_ref+0x4c>)
 800f7e4:	f00a f886 	bl	80198f4 <iprintf>
  }
}
 800f7e8:	bf00      	nop
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	0801d120 	.word	0x0801d120
 800f7f4:	0801d300 	.word	0x0801d300
 800f7f8:	0801d180 	.word	0x0801d180

0800f7fc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <pbuf_cat+0x16>
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d107      	bne.n	800f822 <pbuf_cat+0x26>
 800f812:	4b20      	ldr	r3, [pc, #128]	@ (800f894 <pbuf_cat+0x98>)
 800f814:	f240 3259 	movw	r2, #857	@ 0x359
 800f818:	491f      	ldr	r1, [pc, #124]	@ (800f898 <pbuf_cat+0x9c>)
 800f81a:	4820      	ldr	r0, [pc, #128]	@ (800f89c <pbuf_cat+0xa0>)
 800f81c:	f00a f86a 	bl	80198f4 <iprintf>
 800f820:	e034      	b.n	800f88c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e00a      	b.n	800f83e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	891a      	ldrh	r2, [r3, #8]
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	891b      	ldrh	r3, [r3, #8]
 800f830:	4413      	add	r3, r2
 800f832:	b29a      	uxth	r2, r3
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60fb      	str	r3, [r7, #12]
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1f0      	bne.n	800f828 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	891a      	ldrh	r2, [r3, #8]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	895b      	ldrh	r3, [r3, #10]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d006      	beq.n	800f860 <pbuf_cat+0x64>
 800f852:	4b10      	ldr	r3, [pc, #64]	@ (800f894 <pbuf_cat+0x98>)
 800f854:	f240 3262 	movw	r2, #866	@ 0x362
 800f858:	4911      	ldr	r1, [pc, #68]	@ (800f8a0 <pbuf_cat+0xa4>)
 800f85a:	4810      	ldr	r0, [pc, #64]	@ (800f89c <pbuf_cat+0xa0>)
 800f85c:	f00a f84a 	bl	80198f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d006      	beq.n	800f876 <pbuf_cat+0x7a>
 800f868:	4b0a      	ldr	r3, [pc, #40]	@ (800f894 <pbuf_cat+0x98>)
 800f86a:	f240 3263 	movw	r2, #867	@ 0x363
 800f86e:	490d      	ldr	r1, [pc, #52]	@ (800f8a4 <pbuf_cat+0xa8>)
 800f870:	480a      	ldr	r0, [pc, #40]	@ (800f89c <pbuf_cat+0xa0>)
 800f872:	f00a f83f 	bl	80198f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	891a      	ldrh	r2, [r3, #8]
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	891b      	ldrh	r3, [r3, #8]
 800f87e:	4413      	add	r3, r2
 800f880:	b29a      	uxth	r2, r3
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	683a      	ldr	r2, [r7, #0]
 800f88a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	0801d120 	.word	0x0801d120
 800f898:	0801d314 	.word	0x0801d314
 800f89c:	0801d180 	.word	0x0801d180
 800f8a0:	0801d34c 	.word	0x0801d34c
 800f8a4:	0801d37c 	.word	0x0801d37c

0800f8a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b086      	sub	sp, #24
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	617b      	str	r3, [r7, #20]
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d008      	beq.n	800f8d2 <pbuf_copy+0x2a>
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d005      	beq.n	800f8d2 <pbuf_copy+0x2a>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	891a      	ldrh	r2, [r3, #8]
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	891b      	ldrh	r3, [r3, #8]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d209      	bcs.n	800f8e6 <pbuf_copy+0x3e>
 800f8d2:	4b57      	ldr	r3, [pc, #348]	@ (800fa30 <pbuf_copy+0x188>)
 800f8d4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f8d8:	4956      	ldr	r1, [pc, #344]	@ (800fa34 <pbuf_copy+0x18c>)
 800f8da:	4857      	ldr	r0, [pc, #348]	@ (800fa38 <pbuf_copy+0x190>)
 800f8dc:	f00a f80a 	bl	80198f4 <iprintf>
 800f8e0:	f06f 030f 	mvn.w	r3, #15
 800f8e4:	e09f      	b.n	800fa26 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	895b      	ldrh	r3, [r3, #10]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	1ad2      	subs	r2, r2, r3
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	895b      	ldrh	r3, [r3, #10]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	1acb      	subs	r3, r1, r3
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d306      	bcc.n	800f90c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	895b      	ldrh	r3, [r3, #10]
 800f902:	461a      	mov	r2, r3
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	60fb      	str	r3, [r7, #12]
 800f90a:	e005      	b.n	800f918 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	895b      	ldrh	r3, [r3, #10]
 800f910:	461a      	mov	r2, r3
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	18d0      	adds	r0, r2, r3
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	685a      	ldr	r2, [r3, #4]
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	4413      	add	r3, r2
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	4619      	mov	r1, r3
 800f92c:	f00a fa61 	bl	8019df2 <memcpy>
    offset_to += len;
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	4413      	add	r3, r2
 800f936:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f938:	693a      	ldr	r2, [r7, #16]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	4413      	add	r3, r2
 800f93e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	895b      	ldrh	r3, [r3, #10]
 800f944:	461a      	mov	r2, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	4293      	cmp	r3, r2
 800f94a:	d906      	bls.n	800f95a <pbuf_copy+0xb2>
 800f94c:	4b38      	ldr	r3, [pc, #224]	@ (800fa30 <pbuf_copy+0x188>)
 800f94e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f952:	493a      	ldr	r1, [pc, #232]	@ (800fa3c <pbuf_copy+0x194>)
 800f954:	4838      	ldr	r0, [pc, #224]	@ (800fa38 <pbuf_copy+0x190>)
 800f956:	f009 ffcd 	bl	80198f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	895b      	ldrh	r3, [r3, #10]
 800f95e:	461a      	mov	r2, r3
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	4293      	cmp	r3, r2
 800f964:	d906      	bls.n	800f974 <pbuf_copy+0xcc>
 800f966:	4b32      	ldr	r3, [pc, #200]	@ (800fa30 <pbuf_copy+0x188>)
 800f968:	f240 32da 	movw	r2, #986	@ 0x3da
 800f96c:	4934      	ldr	r1, [pc, #208]	@ (800fa40 <pbuf_copy+0x198>)
 800f96e:	4832      	ldr	r0, [pc, #200]	@ (800fa38 <pbuf_copy+0x190>)
 800f970:	f009 ffc0 	bl	80198f4 <iprintf>
    if (offset_from >= p_from->len) {
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	895b      	ldrh	r3, [r3, #10]
 800f978:	461a      	mov	r2, r3
 800f97a:	693b      	ldr	r3, [r7, #16]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d304      	bcc.n	800f98a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f980:	2300      	movs	r3, #0
 800f982:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	895b      	ldrh	r3, [r3, #10]
 800f98e:	461a      	mov	r2, r3
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	4293      	cmp	r3, r2
 800f994:	d114      	bne.n	800f9c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f996:	2300      	movs	r3, #0
 800f998:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10c      	bne.n	800f9c0 <pbuf_copy+0x118>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d009      	beq.n	800f9c0 <pbuf_copy+0x118>
 800f9ac:	4b20      	ldr	r3, [pc, #128]	@ (800fa30 <pbuf_copy+0x188>)
 800f9ae:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f9b2:	4924      	ldr	r1, [pc, #144]	@ (800fa44 <pbuf_copy+0x19c>)
 800f9b4:	4820      	ldr	r0, [pc, #128]	@ (800fa38 <pbuf_copy+0x190>)
 800f9b6:	f009 ff9d 	bl	80198f4 <iprintf>
 800f9ba:	f06f 030f 	mvn.w	r3, #15
 800f9be:	e032      	b.n	800fa26 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d013      	beq.n	800f9ee <pbuf_copy+0x146>
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	895a      	ldrh	r2, [r3, #10]
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	891b      	ldrh	r3, [r3, #8]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d10d      	bne.n	800f9ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d009      	beq.n	800f9ee <pbuf_copy+0x146>
 800f9da:	4b15      	ldr	r3, [pc, #84]	@ (800fa30 <pbuf_copy+0x188>)
 800f9dc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f9e0:	4919      	ldr	r1, [pc, #100]	@ (800fa48 <pbuf_copy+0x1a0>)
 800f9e2:	4815      	ldr	r0, [pc, #84]	@ (800fa38 <pbuf_copy+0x190>)
 800f9e4:	f009 ff86 	bl	80198f4 <iprintf>
 800f9e8:	f06f 0305 	mvn.w	r3, #5
 800f9ec:	e01b      	b.n	800fa26 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d013      	beq.n	800fa1c <pbuf_copy+0x174>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	895a      	ldrh	r2, [r3, #10]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	891b      	ldrh	r3, [r3, #8]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d10d      	bne.n	800fa1c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d009      	beq.n	800fa1c <pbuf_copy+0x174>
 800fa08:	4b09      	ldr	r3, [pc, #36]	@ (800fa30 <pbuf_copy+0x188>)
 800fa0a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800fa0e:	490e      	ldr	r1, [pc, #56]	@ (800fa48 <pbuf_copy+0x1a0>)
 800fa10:	4809      	ldr	r0, [pc, #36]	@ (800fa38 <pbuf_copy+0x190>)
 800fa12:	f009 ff6f 	bl	80198f4 <iprintf>
 800fa16:	f06f 0305 	mvn.w	r3, #5
 800fa1a:	e004      	b.n	800fa26 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f47f af61 	bne.w	800f8e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fa24:	2300      	movs	r3, #0
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3718      	adds	r7, #24
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	0801d120 	.word	0x0801d120
 800fa34:	0801d3c8 	.word	0x0801d3c8
 800fa38:	0801d180 	.word	0x0801d180
 800fa3c:	0801d3f8 	.word	0x0801d3f8
 800fa40:	0801d410 	.word	0x0801d410
 800fa44:	0801d42c 	.word	0x0801d42c
 800fa48:	0801d43c 	.word	0x0801d43c

0800fa4c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b088      	sub	sp, #32
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	4611      	mov	r1, r2
 800fa58:	461a      	mov	r2, r3
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	80fb      	strh	r3, [r7, #6]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fa62:	2300      	movs	r3, #0
 800fa64:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d108      	bne.n	800fa82 <pbuf_copy_partial+0x36>
 800fa70:	4b2b      	ldr	r3, [pc, #172]	@ (800fb20 <pbuf_copy_partial+0xd4>)
 800fa72:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fa76:	492b      	ldr	r1, [pc, #172]	@ (800fb24 <pbuf_copy_partial+0xd8>)
 800fa78:	482b      	ldr	r0, [pc, #172]	@ (800fb28 <pbuf_copy_partial+0xdc>)
 800fa7a:	f009 ff3b 	bl	80198f4 <iprintf>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	e04a      	b.n	800fb18 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d108      	bne.n	800fa9a <pbuf_copy_partial+0x4e>
 800fa88:	4b25      	ldr	r3, [pc, #148]	@ (800fb20 <pbuf_copy_partial+0xd4>)
 800fa8a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800fa8e:	4927      	ldr	r1, [pc, #156]	@ (800fb2c <pbuf_copy_partial+0xe0>)
 800fa90:	4825      	ldr	r0, [pc, #148]	@ (800fb28 <pbuf_copy_partial+0xdc>)
 800fa92:	f009 ff2f 	bl	80198f4 <iprintf>
 800fa96:	2300      	movs	r3, #0
 800fa98:	e03e      	b.n	800fb18 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	61fb      	str	r3, [r7, #28]
 800fa9e:	e034      	b.n	800fb0a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800faa0:	88bb      	ldrh	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00a      	beq.n	800fabc <pbuf_copy_partial+0x70>
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	895b      	ldrh	r3, [r3, #10]
 800faaa:	88ba      	ldrh	r2, [r7, #4]
 800faac:	429a      	cmp	r2, r3
 800faae:	d305      	bcc.n	800fabc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	895b      	ldrh	r3, [r3, #10]
 800fab4:	88ba      	ldrh	r2, [r7, #4]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	80bb      	strh	r3, [r7, #4]
 800faba:	e023      	b.n	800fb04 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	895a      	ldrh	r2, [r3, #10]
 800fac0:	88bb      	ldrh	r3, [r7, #4]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fac6:	8b3a      	ldrh	r2, [r7, #24]
 800fac8:	88fb      	ldrh	r3, [r7, #6]
 800faca:	429a      	cmp	r2, r3
 800facc:	d901      	bls.n	800fad2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800face:	88fb      	ldrh	r3, [r7, #6]
 800fad0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fad2:	8b7b      	ldrh	r3, [r7, #26]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	18d0      	adds	r0, r2, r3
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	685a      	ldr	r2, [r3, #4]
 800fadc:	88bb      	ldrh	r3, [r7, #4]
 800fade:	4413      	add	r3, r2
 800fae0:	8b3a      	ldrh	r2, [r7, #24]
 800fae2:	4619      	mov	r1, r3
 800fae4:	f00a f985 	bl	8019df2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fae8:	8afa      	ldrh	r2, [r7, #22]
 800faea:	8b3b      	ldrh	r3, [r7, #24]
 800faec:	4413      	add	r3, r2
 800faee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800faf0:	8b7a      	ldrh	r2, [r7, #26]
 800faf2:	8b3b      	ldrh	r3, [r7, #24]
 800faf4:	4413      	add	r3, r2
 800faf6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800faf8:	88fa      	ldrh	r2, [r7, #6]
 800fafa:	8b3b      	ldrh	r3, [r7, #24]
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	61fb      	str	r3, [r7, #28]
 800fb0a:	88fb      	ldrh	r3, [r7, #6]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d002      	beq.n	800fb16 <pbuf_copy_partial+0xca>
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1c4      	bne.n	800faa0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fb16:	8afb      	ldrh	r3, [r7, #22]
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3720      	adds	r7, #32
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	0801d120 	.word	0x0801d120
 800fb24:	0801d468 	.word	0x0801d468
 800fb28:	0801d180 	.word	0x0801d180
 800fb2c:	0801d488 	.word	0x0801d488

0800fb30 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	4603      	mov	r3, r0
 800fb38:	603a      	str	r2, [r7, #0]
 800fb3a:	71fb      	strb	r3, [r7, #7]
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	8919      	ldrh	r1, [r3, #8]
 800fb44:	88ba      	ldrh	r2, [r7, #4]
 800fb46:	79fb      	ldrb	r3, [r7, #7]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7ff faa5 	bl	800f098 <pbuf_alloc>
 800fb4e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d101      	bne.n	800fb5a <pbuf_clone+0x2a>
    return NULL;
 800fb56:	2300      	movs	r3, #0
 800fb58:	e011      	b.n	800fb7e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	68f8      	ldr	r0, [r7, #12]
 800fb5e:	f7ff fea3 	bl	800f8a8 <pbuf_copy>
 800fb62:	4603      	mov	r3, r0
 800fb64:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fb66:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d006      	beq.n	800fb7c <pbuf_clone+0x4c>
 800fb6e:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <pbuf_clone+0x58>)
 800fb70:	f240 5224 	movw	r2, #1316	@ 0x524
 800fb74:	4905      	ldr	r1, [pc, #20]	@ (800fb8c <pbuf_clone+0x5c>)
 800fb76:	4806      	ldr	r0, [pc, #24]	@ (800fb90 <pbuf_clone+0x60>)
 800fb78:	f009 febc 	bl	80198f4 <iprintf>
  return q;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	0801d120 	.word	0x0801d120
 800fb8c:	0801d594 	.word	0x0801d594
 800fb90:	0801d180 	.word	0x0801d180

0800fb94 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb98:	f009 f974 	bl	8018e84 <rand>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fba4:	b29b      	uxth	r3, r3
 800fba6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	4b01      	ldr	r3, [pc, #4]	@ (800fbb4 <tcp_init+0x20>)
 800fbae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fbb0:	bf00      	nop
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20000010 	.word	0x20000010

0800fbb8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	7d1b      	ldrb	r3, [r3, #20]
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	d105      	bne.n	800fbd4 <tcp_free+0x1c>
 800fbc8:	4b06      	ldr	r3, [pc, #24]	@ (800fbe4 <tcp_free+0x2c>)
 800fbca:	22d4      	movs	r2, #212	@ 0xd4
 800fbcc:	4906      	ldr	r1, [pc, #24]	@ (800fbe8 <tcp_free+0x30>)
 800fbce:	4807      	ldr	r0, [pc, #28]	@ (800fbec <tcp_free+0x34>)
 800fbd0:	f009 fe90 	bl	80198f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fbd4:	6879      	ldr	r1, [r7, #4]
 800fbd6:	2001      	movs	r0, #1
 800fbd8:	f7fe fe9e 	bl	800e918 <memp_free>
}
 800fbdc:	bf00      	nop
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	0801d620 	.word	0x0801d620
 800fbe8:	0801d650 	.word	0x0801d650
 800fbec:	0801d664 	.word	0x0801d664

0800fbf0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	7d1b      	ldrb	r3, [r3, #20]
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d105      	bne.n	800fc0c <tcp_free_listen+0x1c>
 800fc00:	4b06      	ldr	r3, [pc, #24]	@ (800fc1c <tcp_free_listen+0x2c>)
 800fc02:	22df      	movs	r2, #223	@ 0xdf
 800fc04:	4906      	ldr	r1, [pc, #24]	@ (800fc20 <tcp_free_listen+0x30>)
 800fc06:	4807      	ldr	r0, [pc, #28]	@ (800fc24 <tcp_free_listen+0x34>)
 800fc08:	f009 fe74 	bl	80198f4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fc0c:	6879      	ldr	r1, [r7, #4]
 800fc0e:	2002      	movs	r0, #2
 800fc10:	f7fe fe82 	bl	800e918 <memp_free>
}
 800fc14:	bf00      	nop
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	0801d620 	.word	0x0801d620
 800fc20:	0801d68c 	.word	0x0801d68c
 800fc24:	0801d664 	.word	0x0801d664

0800fc28 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fc2c:	f001 f8a8 	bl	8010d80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fc30:	4b07      	ldr	r3, [pc, #28]	@ (800fc50 <tcp_tmr+0x28>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	3301      	adds	r3, #1
 800fc36:	b2da      	uxtb	r2, r3
 800fc38:	4b05      	ldr	r3, [pc, #20]	@ (800fc50 <tcp_tmr+0x28>)
 800fc3a:	701a      	strb	r2, [r3, #0]
 800fc3c:	4b04      	ldr	r3, [pc, #16]	@ (800fc50 <tcp_tmr+0x28>)
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	f003 0301 	and.w	r3, r3, #1
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fc48:	f000 fd58 	bl	80106fc <tcp_slowtmr>
  }
}
 800fc4c:	bf00      	nop
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	20011d2d 	.word	0x20011d2d

0800fc54 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d105      	bne.n	800fc70 <tcp_remove_listener+0x1c>
 800fc64:	4b0d      	ldr	r3, [pc, #52]	@ (800fc9c <tcp_remove_listener+0x48>)
 800fc66:	22ff      	movs	r2, #255	@ 0xff
 800fc68:	490d      	ldr	r1, [pc, #52]	@ (800fca0 <tcp_remove_listener+0x4c>)
 800fc6a:	480e      	ldr	r0, [pc, #56]	@ (800fca4 <tcp_remove_listener+0x50>)
 800fc6c:	f009 fe42 	bl	80198f4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	60fb      	str	r3, [r7, #12]
 800fc74:	e00a      	b.n	800fc8c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	d102      	bne.n	800fc86 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	60fb      	str	r3, [r7, #12]
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d1f1      	bne.n	800fc76 <tcp_remove_listener+0x22>
    }
  }
}
 800fc92:	bf00      	nop
 800fc94:	bf00      	nop
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	0801d620 	.word	0x0801d620
 800fca0:	0801d6a8 	.word	0x0801d6a8
 800fca4:	0801d664 	.word	0x0801d664

0800fca8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d106      	bne.n	800fcc4 <tcp_listen_closed+0x1c>
 800fcb6:	4b14      	ldr	r3, [pc, #80]	@ (800fd08 <tcp_listen_closed+0x60>)
 800fcb8:	f240 1211 	movw	r2, #273	@ 0x111
 800fcbc:	4913      	ldr	r1, [pc, #76]	@ (800fd0c <tcp_listen_closed+0x64>)
 800fcbe:	4814      	ldr	r0, [pc, #80]	@ (800fd10 <tcp_listen_closed+0x68>)
 800fcc0:	f009 fe18 	bl	80198f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	7d1b      	ldrb	r3, [r3, #20]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d006      	beq.n	800fcda <tcp_listen_closed+0x32>
 800fccc:	4b0e      	ldr	r3, [pc, #56]	@ (800fd08 <tcp_listen_closed+0x60>)
 800fcce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800fcd2:	4910      	ldr	r1, [pc, #64]	@ (800fd14 <tcp_listen_closed+0x6c>)
 800fcd4:	480e      	ldr	r0, [pc, #56]	@ (800fd10 <tcp_listen_closed+0x68>)
 800fcd6:	f009 fe0d 	bl	80198f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fcda:	2301      	movs	r3, #1
 800fcdc:	60fb      	str	r3, [r7, #12]
 800fcde:	e00b      	b.n	800fcf8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fce0:	4a0d      	ldr	r2, [pc, #52]	@ (800fd18 <tcp_listen_closed+0x70>)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	6879      	ldr	r1, [r7, #4]
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff ffb1 	bl	800fc54 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	60fb      	str	r3, [r7, #12]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d9f0      	bls.n	800fce0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fcfe:	bf00      	nop
 800fd00:	bf00      	nop
 800fd02:	3710      	adds	r7, #16
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	0801d620 	.word	0x0801d620
 800fd0c:	0801d6d0 	.word	0x0801d6d0
 800fd10:	0801d664 	.word	0x0801d664
 800fd14:	0801d6dc 	.word	0x0801d6dc
 800fd18:	0801f638 	.word	0x0801f638

0800fd1c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fd1c:	b5b0      	push	{r4, r5, r7, lr}
 800fd1e:	b088      	sub	sp, #32
 800fd20:	af04      	add	r7, sp, #16
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	460b      	mov	r3, r1
 800fd26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d106      	bne.n	800fd3c <tcp_close_shutdown+0x20>
 800fd2e:	4b63      	ldr	r3, [pc, #396]	@ (800febc <tcp_close_shutdown+0x1a0>)
 800fd30:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fd34:	4962      	ldr	r1, [pc, #392]	@ (800fec0 <tcp_close_shutdown+0x1a4>)
 800fd36:	4863      	ldr	r0, [pc, #396]	@ (800fec4 <tcp_close_shutdown+0x1a8>)
 800fd38:	f009 fddc 	bl	80198f4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fd3c:	78fb      	ldrb	r3, [r7, #3]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d066      	beq.n	800fe10 <tcp_close_shutdown+0xf4>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	7d1b      	ldrb	r3, [r3, #20]
 800fd46:	2b04      	cmp	r3, #4
 800fd48:	d003      	beq.n	800fd52 <tcp_close_shutdown+0x36>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	7d1b      	ldrb	r3, [r3, #20]
 800fd4e:	2b07      	cmp	r3, #7
 800fd50:	d15e      	bne.n	800fe10 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d104      	bne.n	800fd64 <tcp_close_shutdown+0x48>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd5e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fd62:	d055      	beq.n	800fe10 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	8b5b      	ldrh	r3, [r3, #26]
 800fd68:	f003 0310 	and.w	r3, r3, #16
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d106      	bne.n	800fd7e <tcp_close_shutdown+0x62>
 800fd70:	4b52      	ldr	r3, [pc, #328]	@ (800febc <tcp_close_shutdown+0x1a0>)
 800fd72:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fd76:	4954      	ldr	r1, [pc, #336]	@ (800fec8 <tcp_close_shutdown+0x1ac>)
 800fd78:	4852      	ldr	r0, [pc, #328]	@ (800fec4 <tcp_close_shutdown+0x1a8>)
 800fd7a:	f009 fdbb 	bl	80198f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fd86:	687d      	ldr	r5, [r7, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	8ad2      	ldrh	r2, [r2, #22]
 800fd90:	6879      	ldr	r1, [r7, #4]
 800fd92:	8b09      	ldrh	r1, [r1, #24]
 800fd94:	9102      	str	r1, [sp, #8]
 800fd96:	9201      	str	r2, [sp, #4]
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	462b      	mov	r3, r5
 800fd9c:	4622      	mov	r2, r4
 800fd9e:	4601      	mov	r1, r0
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f005 fdb7 	bl	8015914 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f001 fb9a 	bl	80114e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fdac:	4b47      	ldr	r3, [pc, #284]	@ (800fecc <tcp_close_shutdown+0x1b0>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d105      	bne.n	800fdc2 <tcp_close_shutdown+0xa6>
 800fdb6:	4b45      	ldr	r3, [pc, #276]	@ (800fecc <tcp_close_shutdown+0x1b0>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	4a43      	ldr	r2, [pc, #268]	@ (800fecc <tcp_close_shutdown+0x1b0>)
 800fdbe:	6013      	str	r3, [r2, #0]
 800fdc0:	e013      	b.n	800fdea <tcp_close_shutdown+0xce>
 800fdc2:	4b42      	ldr	r3, [pc, #264]	@ (800fecc <tcp_close_shutdown+0x1b0>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	60fb      	str	r3, [r7, #12]
 800fdc8:	e00c      	b.n	800fde4 <tcp_close_shutdown+0xc8>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d104      	bne.n	800fdde <tcp_close_shutdown+0xc2>
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68da      	ldr	r2, [r3, #12]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	60da      	str	r2, [r3, #12]
 800fddc:	e005      	b.n	800fdea <tcp_close_shutdown+0xce>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	60fb      	str	r3, [r7, #12]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1ef      	bne.n	800fdca <tcp_close_shutdown+0xae>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	60da      	str	r2, [r3, #12]
 800fdf0:	4b37      	ldr	r3, [pc, #220]	@ (800fed0 <tcp_close_shutdown+0x1b4>)
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fdf6:	4b37      	ldr	r3, [pc, #220]	@ (800fed4 <tcp_close_shutdown+0x1b8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d102      	bne.n	800fe06 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fe00:	f004 f82e 	bl	8013e60 <tcp_trigger_input_pcb_close>
 800fe04:	e002      	b.n	800fe0c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fed6 	bl	800fbb8 <tcp_free>
      }
      return ERR_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e050      	b.n	800feb2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	7d1b      	ldrb	r3, [r3, #20]
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	d03b      	beq.n	800fe90 <tcp_close_shutdown+0x174>
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	dc44      	bgt.n	800fea6 <tcp_close_shutdown+0x18a>
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <tcp_close_shutdown+0x10a>
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d02a      	beq.n	800fe7a <tcp_close_shutdown+0x15e>
 800fe24:	e03f      	b.n	800fea6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8adb      	ldrh	r3, [r3, #22]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d021      	beq.n	800fe72 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe2e:	4b2a      	ldr	r3, [pc, #168]	@ (800fed8 <tcp_close_shutdown+0x1bc>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d105      	bne.n	800fe44 <tcp_close_shutdown+0x128>
 800fe38:	4b27      	ldr	r3, [pc, #156]	@ (800fed8 <tcp_close_shutdown+0x1bc>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	4a26      	ldr	r2, [pc, #152]	@ (800fed8 <tcp_close_shutdown+0x1bc>)
 800fe40:	6013      	str	r3, [r2, #0]
 800fe42:	e013      	b.n	800fe6c <tcp_close_shutdown+0x150>
 800fe44:	4b24      	ldr	r3, [pc, #144]	@ (800fed8 <tcp_close_shutdown+0x1bc>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60bb      	str	r3, [r7, #8]
 800fe4a:	e00c      	b.n	800fe66 <tcp_close_shutdown+0x14a>
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d104      	bne.n	800fe60 <tcp_close_shutdown+0x144>
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	68da      	ldr	r2, [r3, #12]
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	60da      	str	r2, [r3, #12]
 800fe5e:	e005      	b.n	800fe6c <tcp_close_shutdown+0x150>
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	60bb      	str	r3, [r7, #8]
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1ef      	bne.n	800fe4c <tcp_close_shutdown+0x130>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff fea0 	bl	800fbb8 <tcp_free>
      break;
 800fe78:	e01a      	b.n	800feb0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7ff ff14 	bl	800fca8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fe80:	6879      	ldr	r1, [r7, #4]
 800fe82:	4816      	ldr	r0, [pc, #88]	@ (800fedc <tcp_close_shutdown+0x1c0>)
 800fe84:	f001 fb7c 	bl	8011580 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff feb1 	bl	800fbf0 <tcp_free_listen>
      break;
 800fe8e:	e00f      	b.n	800feb0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe90:	6879      	ldr	r1, [r7, #4]
 800fe92:	480e      	ldr	r0, [pc, #56]	@ (800fecc <tcp_close_shutdown+0x1b0>)
 800fe94:	f001 fb74 	bl	8011580 <tcp_pcb_remove>
 800fe98:	4b0d      	ldr	r3, [pc, #52]	@ (800fed0 <tcp_close_shutdown+0x1b4>)
 800fe9a:	2201      	movs	r2, #1
 800fe9c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7ff fe8a 	bl	800fbb8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fea4:	e004      	b.n	800feb0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f81a 	bl	800fee0 <tcp_close_shutdown_fin>
 800feac:	4603      	mov	r3, r0
 800feae:	e000      	b.n	800feb2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	4618      	mov	r0, r3
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bdb0      	pop	{r4, r5, r7, pc}
 800feba:	bf00      	nop
 800febc:	0801d620 	.word	0x0801d620
 800fec0:	0801d6f4 	.word	0x0801d6f4
 800fec4:	0801d664 	.word	0x0801d664
 800fec8:	0801d714 	.word	0x0801d714
 800fecc:	20011d24 	.word	0x20011d24
 800fed0:	20011d2c 	.word	0x20011d2c
 800fed4:	20011d64 	.word	0x20011d64
 800fed8:	20011d1c 	.word	0x20011d1c
 800fedc:	20011d20 	.word	0x20011d20

0800fee0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d106      	bne.n	800fefc <tcp_close_shutdown_fin+0x1c>
 800feee:	4b2e      	ldr	r3, [pc, #184]	@ (800ffa8 <tcp_close_shutdown_fin+0xc8>)
 800fef0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fef4:	492d      	ldr	r1, [pc, #180]	@ (800ffac <tcp_close_shutdown_fin+0xcc>)
 800fef6:	482e      	ldr	r0, [pc, #184]	@ (800ffb0 <tcp_close_shutdown_fin+0xd0>)
 800fef8:	f009 fcfc 	bl	80198f4 <iprintf>

  switch (pcb->state) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	7d1b      	ldrb	r3, [r3, #20]
 800ff00:	2b07      	cmp	r3, #7
 800ff02:	d020      	beq.n	800ff46 <tcp_close_shutdown_fin+0x66>
 800ff04:	2b07      	cmp	r3, #7
 800ff06:	dc2b      	bgt.n	800ff60 <tcp_close_shutdown_fin+0x80>
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	d002      	beq.n	800ff12 <tcp_close_shutdown_fin+0x32>
 800ff0c:	2b04      	cmp	r3, #4
 800ff0e:	d00d      	beq.n	800ff2c <tcp_close_shutdown_fin+0x4c>
 800ff10:	e026      	b.n	800ff60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f004 fe0c 	bl	8014b30 <tcp_send_fin>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d11f      	bne.n	800ff64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2205      	movs	r2, #5
 800ff28:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff2a:	e01b      	b.n	800ff64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f004 fdff 	bl	8014b30 <tcp_send_fin>
 800ff32:	4603      	mov	r3, r0
 800ff34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d114      	bne.n	800ff68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2205      	movs	r2, #5
 800ff42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff44:	e010      	b.n	800ff68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f004 fdf2 	bl	8014b30 <tcp_send_fin>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d109      	bne.n	800ff6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2209      	movs	r2, #9
 800ff5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff5e:	e005      	b.n	800ff6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	e01c      	b.n	800ff9e <tcp_close_shutdown_fin+0xbe>
      break;
 800ff64:	bf00      	nop
 800ff66:	e002      	b.n	800ff6e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff68:	bf00      	nop
 800ff6a:	e000      	b.n	800ff6e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ff6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d103      	bne.n	800ff7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f004 ff18 	bl	8014dac <tcp_output>
 800ff7c:	e00d      	b.n	800ff9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ff7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff86:	d108      	bne.n	800ff9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	8b5b      	ldrh	r3, [r3, #26]
 800ff8c:	f043 0308 	orr.w	r3, r3, #8
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ff96:	2300      	movs	r3, #0
 800ff98:	e001      	b.n	800ff9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ff9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	0801d620 	.word	0x0801d620
 800ffac:	0801d6d0 	.word	0x0801d6d0
 800ffb0:	0801d664 	.word	0x0801d664

0800ffb4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d109      	bne.n	800ffd6 <tcp_close+0x22>
 800ffc2:	4b0f      	ldr	r3, [pc, #60]	@ (8010000 <tcp_close+0x4c>)
 800ffc4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ffc8:	490e      	ldr	r1, [pc, #56]	@ (8010004 <tcp_close+0x50>)
 800ffca:	480f      	ldr	r0, [pc, #60]	@ (8010008 <tcp_close+0x54>)
 800ffcc:	f009 fc92 	bl	80198f4 <iprintf>
 800ffd0:	f06f 030f 	mvn.w	r3, #15
 800ffd4:	e00f      	b.n	800fff6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7d1b      	ldrb	r3, [r3, #20]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d006      	beq.n	800ffec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8b5b      	ldrh	r3, [r3, #26]
 800ffe2:	f043 0310 	orr.w	r3, r3, #16
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ffec:	2101      	movs	r1, #1
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7ff fe94 	bl	800fd1c <tcp_close_shutdown>
 800fff4:	4603      	mov	r3, r0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	0801d620 	.word	0x0801d620
 8010004:	0801d730 	.word	0x0801d730
 8010008:	0801d664 	.word	0x0801d664

0801000c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d109      	bne.n	8010032 <tcp_shutdown+0x26>
 801001e:	4b26      	ldr	r3, [pc, #152]	@ (80100b8 <tcp_shutdown+0xac>)
 8010020:	f240 2207 	movw	r2, #519	@ 0x207
 8010024:	4925      	ldr	r1, [pc, #148]	@ (80100bc <tcp_shutdown+0xb0>)
 8010026:	4826      	ldr	r0, [pc, #152]	@ (80100c0 <tcp_shutdown+0xb4>)
 8010028:	f009 fc64 	bl	80198f4 <iprintf>
 801002c:	f06f 030f 	mvn.w	r3, #15
 8010030:	e03d      	b.n	80100ae <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	7d1b      	ldrb	r3, [r3, #20]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d102      	bne.n	8010040 <tcp_shutdown+0x34>
    return ERR_CONN;
 801003a:	f06f 030a 	mvn.w	r3, #10
 801003e:	e036      	b.n	80100ae <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d01b      	beq.n	801007e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	8b5b      	ldrh	r3, [r3, #26]
 801004a:	f043 0310 	orr.w	r3, r3, #16
 801004e:	b29a      	uxth	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d005      	beq.n	8010066 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801005a:	2101      	movs	r1, #1
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff fe5d 	bl	800fd1c <tcp_close_shutdown>
 8010062:	4603      	mov	r3, r0
 8010064:	e023      	b.n	80100ae <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801006a:	2b00      	cmp	r3, #0
 801006c:	d007      	beq.n	801007e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010072:	4618      	mov	r0, r3
 8010074:	f7ff faf4 	bl	800f660 <pbuf_free>
      pcb->refused_data = NULL;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2200      	movs	r2, #0
 801007c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d013      	beq.n	80100ac <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	7d1b      	ldrb	r3, [r3, #20]
 8010088:	2b04      	cmp	r3, #4
 801008a:	dc02      	bgt.n	8010092 <tcp_shutdown+0x86>
 801008c:	2b03      	cmp	r3, #3
 801008e:	da02      	bge.n	8010096 <tcp_shutdown+0x8a>
 8010090:	e009      	b.n	80100a6 <tcp_shutdown+0x9a>
 8010092:	2b07      	cmp	r3, #7
 8010094:	d107      	bne.n	80100a6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	b2db      	uxtb	r3, r3
 801009a:	4619      	mov	r1, r3
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f7ff fe3d 	bl	800fd1c <tcp_close_shutdown>
 80100a2:	4603      	mov	r3, r0
 80100a4:	e003      	b.n	80100ae <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80100a6:	f06f 030a 	mvn.w	r3, #10
 80100aa:	e000      	b.n	80100ae <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80100ac:	2300      	movs	r3, #0
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3710      	adds	r7, #16
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	0801d620 	.word	0x0801d620
 80100bc:	0801d748 	.word	0x0801d748
 80100c0:	0801d664 	.word	0x0801d664

080100c4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b08e      	sub	sp, #56	@ 0x38
 80100c8:	af04      	add	r7, sp, #16
 80100ca:	6078      	str	r0, [r7, #4]
 80100cc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d107      	bne.n	80100e4 <tcp_abandon+0x20>
 80100d4:	4b52      	ldr	r3, [pc, #328]	@ (8010220 <tcp_abandon+0x15c>)
 80100d6:	f240 223d 	movw	r2, #573	@ 0x23d
 80100da:	4952      	ldr	r1, [pc, #328]	@ (8010224 <tcp_abandon+0x160>)
 80100dc:	4852      	ldr	r0, [pc, #328]	@ (8010228 <tcp_abandon+0x164>)
 80100de:	f009 fc09 	bl	80198f4 <iprintf>
 80100e2:	e099      	b.n	8010218 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	7d1b      	ldrb	r3, [r3, #20]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d106      	bne.n	80100fa <tcp_abandon+0x36>
 80100ec:	4b4c      	ldr	r3, [pc, #304]	@ (8010220 <tcp_abandon+0x15c>)
 80100ee:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80100f2:	494e      	ldr	r1, [pc, #312]	@ (801022c <tcp_abandon+0x168>)
 80100f4:	484c      	ldr	r0, [pc, #304]	@ (8010228 <tcp_abandon+0x164>)
 80100f6:	f009 fbfd 	bl	80198f4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7d1b      	ldrb	r3, [r3, #20]
 80100fe:	2b0a      	cmp	r3, #10
 8010100:	d107      	bne.n	8010112 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010102:	6879      	ldr	r1, [r7, #4]
 8010104:	484a      	ldr	r0, [pc, #296]	@ (8010230 <tcp_abandon+0x16c>)
 8010106:	f001 fa3b 	bl	8011580 <tcp_pcb_remove>
    tcp_free(pcb);
 801010a:	6878      	ldr	r0, [r7, #4]
 801010c:	f7ff fd54 	bl	800fbb8 <tcp_free>
 8010110:	e082      	b.n	8010218 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801011e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010124:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801012c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	7d1b      	ldrb	r3, [r3, #20]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d126      	bne.n	801018a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	8adb      	ldrh	r3, [r3, #22]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d02e      	beq.n	80101a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010144:	4b3b      	ldr	r3, [pc, #236]	@ (8010234 <tcp_abandon+0x170>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	429a      	cmp	r2, r3
 801014c:	d105      	bne.n	801015a <tcp_abandon+0x96>
 801014e:	4b39      	ldr	r3, [pc, #228]	@ (8010234 <tcp_abandon+0x170>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	4a37      	ldr	r2, [pc, #220]	@ (8010234 <tcp_abandon+0x170>)
 8010156:	6013      	str	r3, [r2, #0]
 8010158:	e013      	b.n	8010182 <tcp_abandon+0xbe>
 801015a:	4b36      	ldr	r3, [pc, #216]	@ (8010234 <tcp_abandon+0x170>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	61fb      	str	r3, [r7, #28]
 8010160:	e00c      	b.n	801017c <tcp_abandon+0xb8>
 8010162:	69fb      	ldr	r3, [r7, #28]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	687a      	ldr	r2, [r7, #4]
 8010168:	429a      	cmp	r2, r3
 801016a:	d104      	bne.n	8010176 <tcp_abandon+0xb2>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	68da      	ldr	r2, [r3, #12]
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	60da      	str	r2, [r3, #12]
 8010174:	e005      	b.n	8010182 <tcp_abandon+0xbe>
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	61fb      	str	r3, [r7, #28]
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d1ef      	bne.n	8010162 <tcp_abandon+0x9e>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	60da      	str	r2, [r3, #12]
 8010188:	e00b      	b.n	80101a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8adb      	ldrh	r3, [r3, #22]
 8010192:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010194:	6879      	ldr	r1, [r7, #4]
 8010196:	4828      	ldr	r0, [pc, #160]	@ (8010238 <tcp_abandon+0x174>)
 8010198:	f001 f9f2 	bl	8011580 <tcp_pcb_remove>
 801019c:	4b27      	ldr	r3, [pc, #156]	@ (801023c <tcp_abandon+0x178>)
 801019e:	2201      	movs	r2, #1
 80101a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d004      	beq.n	80101b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101ae:	4618      	mov	r0, r3
 80101b0:	f000 fec6 	bl	8010f40 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d004      	beq.n	80101c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 febd 	bl	8010f40 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d004      	beq.n	80101d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 feb4 	bl	8010f40 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00e      	beq.n	80101fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80101de:	6879      	ldr	r1, [r7, #4]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	3304      	adds	r3, #4
 80101e4:	687a      	ldr	r2, [r7, #4]
 80101e6:	8b12      	ldrh	r2, [r2, #24]
 80101e8:	9202      	str	r2, [sp, #8]
 80101ea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80101ec:	9201      	str	r2, [sp, #4]
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	460b      	mov	r3, r1
 80101f2:	697a      	ldr	r2, [r7, #20]
 80101f4:	69b9      	ldr	r1, [r7, #24]
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f005 fb8c 	bl	8015914 <tcp_rst>
    }
    last_state = pcb->state;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	7d1b      	ldrb	r3, [r3, #20]
 8010200:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7ff fcd8 	bl	800fbb8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d004      	beq.n	8010218 <tcp_abandon+0x154>
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	f06f 010c 	mvn.w	r1, #12
 8010214:	68f8      	ldr	r0, [r7, #12]
 8010216:	4798      	blx	r3
  }
}
 8010218:	3728      	adds	r7, #40	@ 0x28
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	0801d620 	.word	0x0801d620
 8010224:	0801d764 	.word	0x0801d764
 8010228:	0801d664 	.word	0x0801d664
 801022c:	0801d780 	.word	0x0801d780
 8010230:	20011d28 	.word	0x20011d28
 8010234:	20011d1c 	.word	0x20011d1c
 8010238:	20011d24 	.word	0x20011d24
 801023c:	20011d2c 	.word	0x20011d2c

08010240 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010248:	2101      	movs	r1, #1
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7ff ff3a 	bl	80100c4 <tcp_abandon>
}
 8010250:	bf00      	nop
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b088      	sub	sp, #32
 801025c:	af00      	add	r7, sp, #0
 801025e:	60f8      	str	r0, [r7, #12]
 8010260:	60b9      	str	r1, [r7, #8]
 8010262:	4613      	mov	r3, r2
 8010264:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010266:	2304      	movs	r3, #4
 8010268:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d101      	bne.n	8010274 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010270:	4b3e      	ldr	r3, [pc, #248]	@ (801036c <tcp_bind+0x114>)
 8010272:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d109      	bne.n	801028e <tcp_bind+0x36>
 801027a:	4b3d      	ldr	r3, [pc, #244]	@ (8010370 <tcp_bind+0x118>)
 801027c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8010280:	493c      	ldr	r1, [pc, #240]	@ (8010374 <tcp_bind+0x11c>)
 8010282:	483d      	ldr	r0, [pc, #244]	@ (8010378 <tcp_bind+0x120>)
 8010284:	f009 fb36 	bl	80198f4 <iprintf>
 8010288:	f06f 030f 	mvn.w	r3, #15
 801028c:	e06a      	b.n	8010364 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	7d1b      	ldrb	r3, [r3, #20]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d009      	beq.n	80102aa <tcp_bind+0x52>
 8010296:	4b36      	ldr	r3, [pc, #216]	@ (8010370 <tcp_bind+0x118>)
 8010298:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801029c:	4937      	ldr	r1, [pc, #220]	@ (801037c <tcp_bind+0x124>)
 801029e:	4836      	ldr	r0, [pc, #216]	@ (8010378 <tcp_bind+0x120>)
 80102a0:	f009 fb28 	bl	80198f4 <iprintf>
 80102a4:	f06f 0305 	mvn.w	r3, #5
 80102a8:	e05c      	b.n	8010364 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80102aa:	88fb      	ldrh	r3, [r7, #6]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d109      	bne.n	80102c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80102b0:	f000 f9de 	bl	8010670 <tcp_new_port>
 80102b4:	4603      	mov	r3, r0
 80102b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80102b8:	88fb      	ldrh	r3, [r7, #6]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d135      	bne.n	801032a <tcp_bind+0xd2>
      return ERR_BUF;
 80102be:	f06f 0301 	mvn.w	r3, #1
 80102c2:	e04f      	b.n	8010364 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80102c4:	2300      	movs	r3, #0
 80102c6:	61fb      	str	r3, [r7, #28]
 80102c8:	e02b      	b.n	8010322 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80102ca:	4a2d      	ldr	r2, [pc, #180]	@ (8010380 <tcp_bind+0x128>)
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	61bb      	str	r3, [r7, #24]
 80102d6:	e01e      	b.n	8010316 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	8adb      	ldrh	r3, [r3, #22]
 80102dc:	88fa      	ldrh	r2, [r7, #6]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d116      	bne.n	8010310 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80102e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d010      	beq.n	801030a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00c      	beq.n	801030a <tcp_bind+0xb2>
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d009      	beq.n	801030a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d005      	beq.n	801030a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010306:	429a      	cmp	r2, r3
 8010308:	d102      	bne.n	8010310 <tcp_bind+0xb8>
              return ERR_USE;
 801030a:	f06f 0307 	mvn.w	r3, #7
 801030e:	e029      	b.n	8010364 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	68db      	ldr	r3, [r3, #12]
 8010314:	61bb      	str	r3, [r7, #24]
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1dd      	bne.n	80102d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	3301      	adds	r3, #1
 8010320:	61fb      	str	r3, [r7, #28]
 8010322:	69fa      	ldr	r2, [r7, #28]
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	429a      	cmp	r2, r3
 8010328:	dbcf      	blt.n	80102ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d00c      	beq.n	801034a <tcp_bind+0xf2>
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d008      	beq.n	801034a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <tcp_bind+0xec>
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	e000      	b.n	8010346 <tcp_bind+0xee>
 8010344:	2300      	movs	r3, #0
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	88fa      	ldrh	r2, [r7, #6]
 801034e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010350:	4b0c      	ldr	r3, [pc, #48]	@ (8010384 <tcp_bind+0x12c>)
 8010352:	681a      	ldr	r2, [r3, #0]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	60da      	str	r2, [r3, #12]
 8010358:	4a0a      	ldr	r2, [pc, #40]	@ (8010384 <tcp_bind+0x12c>)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	f005 fc9b 	bl	8015c98 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3720      	adds	r7, #32
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	0801f660 	.word	0x0801f660
 8010370:	0801d620 	.word	0x0801d620
 8010374:	0801d7b4 	.word	0x0801d7b4
 8010378:	0801d664 	.word	0x0801d664
 801037c:	0801d7cc 	.word	0x0801d7cc
 8010380:	0801f638 	.word	0x0801f638
 8010384:	20011d1c 	.word	0x20011d1c

08010388 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	4613      	mov	r3, r2
 8010394:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <tcp_accept_null+0x22>
 801039c:	4b07      	ldr	r3, [pc, #28]	@ (80103bc <tcp_accept_null+0x34>)
 801039e:	f240 320f 	movw	r2, #783	@ 0x30f
 80103a2:	4907      	ldr	r1, [pc, #28]	@ (80103c0 <tcp_accept_null+0x38>)
 80103a4:	4807      	ldr	r0, [pc, #28]	@ (80103c4 <tcp_accept_null+0x3c>)
 80103a6:	f009 faa5 	bl	80198f4 <iprintf>

  tcp_abort(pcb);
 80103aa:	68b8      	ldr	r0, [r7, #8]
 80103ac:	f7ff ff48 	bl	8010240 <tcp_abort>

  return ERR_ABRT;
 80103b0:	f06f 030c 	mvn.w	r3, #12
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	0801d620 	.word	0x0801d620
 80103c0:	0801d7f4 	.word	0x0801d7f4
 80103c4:	0801d664 	.word	0x0801d664

080103c8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	460b      	mov	r3, r1
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80103d6:	2300      	movs	r3, #0
 80103d8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d109      	bne.n	80103f4 <tcp_listen_with_backlog_and_err+0x2c>
 80103e0:	4b47      	ldr	r3, [pc, #284]	@ (8010500 <tcp_listen_with_backlog_and_err+0x138>)
 80103e2:	f240 3259 	movw	r2, #857	@ 0x359
 80103e6:	4947      	ldr	r1, [pc, #284]	@ (8010504 <tcp_listen_with_backlog_and_err+0x13c>)
 80103e8:	4847      	ldr	r0, [pc, #284]	@ (8010508 <tcp_listen_with_backlog_and_err+0x140>)
 80103ea:	f009 fa83 	bl	80198f4 <iprintf>
 80103ee:	23f0      	movs	r3, #240	@ 0xf0
 80103f0:	76fb      	strb	r3, [r7, #27]
 80103f2:	e079      	b.n	80104e8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	7d1b      	ldrb	r3, [r3, #20]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d009      	beq.n	8010410 <tcp_listen_with_backlog_and_err+0x48>
 80103fc:	4b40      	ldr	r3, [pc, #256]	@ (8010500 <tcp_listen_with_backlog_and_err+0x138>)
 80103fe:	f240 325a 	movw	r2, #858	@ 0x35a
 8010402:	4942      	ldr	r1, [pc, #264]	@ (801050c <tcp_listen_with_backlog_and_err+0x144>)
 8010404:	4840      	ldr	r0, [pc, #256]	@ (8010508 <tcp_listen_with_backlog_and_err+0x140>)
 8010406:	f009 fa75 	bl	80198f4 <iprintf>
 801040a:	23f1      	movs	r3, #241	@ 0xf1
 801040c:	76fb      	strb	r3, [r7, #27]
 801040e:	e06b      	b.n	80104e8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	7d1b      	ldrb	r3, [r3, #20]
 8010414:	2b01      	cmp	r3, #1
 8010416:	d104      	bne.n	8010422 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801041c:	23f7      	movs	r3, #247	@ 0xf7
 801041e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010420:	e062      	b.n	80104e8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010422:	2002      	movs	r0, #2
 8010424:	f7fe fa26 	bl	800e874 <memp_malloc>
 8010428:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d102      	bne.n	8010436 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010430:	23ff      	movs	r3, #255	@ 0xff
 8010432:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010434:	e058      	b.n	80104e8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	691a      	ldr	r2, [r3, #16]
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	8ada      	ldrh	r2, [r3, #22]
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010446:	69fb      	ldr	r3, [r7, #28]
 8010448:	2201      	movs	r2, #1
 801044a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	7d5a      	ldrb	r2, [r3, #21]
 8010450:	69fb      	ldr	r3, [r7, #28]
 8010452:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	7a5a      	ldrb	r2, [r3, #9]
 8010458:	69fb      	ldr	r3, [r7, #28]
 801045a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	2200      	movs	r2, #0
 8010460:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	7ada      	ldrb	r2, [r3, #11]
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	7a9a      	ldrb	r2, [r3, #10]
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	8adb      	ldrh	r3, [r3, #22]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d021      	beq.n	80104c6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010482:	4b23      	ldr	r3, [pc, #140]	@ (8010510 <tcp_listen_with_backlog_and_err+0x148>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	429a      	cmp	r2, r3
 801048a:	d105      	bne.n	8010498 <tcp_listen_with_backlog_and_err+0xd0>
 801048c:	4b20      	ldr	r3, [pc, #128]	@ (8010510 <tcp_listen_with_backlog_and_err+0x148>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	4a1f      	ldr	r2, [pc, #124]	@ (8010510 <tcp_listen_with_backlog_and_err+0x148>)
 8010494:	6013      	str	r3, [r2, #0]
 8010496:	e013      	b.n	80104c0 <tcp_listen_with_backlog_and_err+0xf8>
 8010498:	4b1d      	ldr	r3, [pc, #116]	@ (8010510 <tcp_listen_with_backlog_and_err+0x148>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	617b      	str	r3, [r7, #20]
 801049e:	e00c      	b.n	80104ba <tcp_listen_with_backlog_and_err+0xf2>
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	68fa      	ldr	r2, [r7, #12]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d104      	bne.n	80104b4 <tcp_listen_with_backlog_and_err+0xec>
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	68da      	ldr	r2, [r3, #12]
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	60da      	str	r2, [r3, #12]
 80104b2:	e005      	b.n	80104c0 <tcp_listen_with_backlog_and_err+0xf8>
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	617b      	str	r3, [r7, #20]
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d1ef      	bne.n	80104a0 <tcp_listen_with_backlog_and_err+0xd8>
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80104c6:	68f8      	ldr	r0, [r7, #12]
 80104c8:	f7ff fb76 	bl	800fbb8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	4a11      	ldr	r2, [pc, #68]	@ (8010514 <tcp_listen_with_backlog_and_err+0x14c>)
 80104d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80104d2:	4b11      	ldr	r3, [pc, #68]	@ (8010518 <tcp_listen_with_backlog_and_err+0x150>)
 80104d4:	681a      	ldr	r2, [r3, #0]
 80104d6:	69fb      	ldr	r3, [r7, #28]
 80104d8:	60da      	str	r2, [r3, #12]
 80104da:	4a0f      	ldr	r2, [pc, #60]	@ (8010518 <tcp_listen_with_backlog_and_err+0x150>)
 80104dc:	69fb      	ldr	r3, [r7, #28]
 80104de:	6013      	str	r3, [r2, #0]
 80104e0:	f005 fbda 	bl	8015c98 <tcp_timer_needed>
  res = ERR_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	7efa      	ldrb	r2, [r7, #27]
 80104f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80104f4:	69fb      	ldr	r3, [r7, #28]
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3720      	adds	r7, #32
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	0801d620 	.word	0x0801d620
 8010504:	0801d814 	.word	0x0801d814
 8010508:	0801d664 	.word	0x0801d664
 801050c:	0801d844 	.word	0x0801d844
 8010510:	20011d1c 	.word	0x20011d1c
 8010514:	08010389 	.word	0x08010389
 8010518:	20011d20 	.word	0x20011d20

0801051c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_update_rcv_ann_wnd+0x1c>
 801052a:	4b25      	ldr	r3, [pc, #148]	@ (80105c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801052c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010530:	4924      	ldr	r1, [pc, #144]	@ (80105c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010532:	4825      	ldr	r0, [pc, #148]	@ (80105c8 <tcp_update_rcv_ann_wnd+0xac>)
 8010534:	f009 f9de 	bl	80198f4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801053c:	687a      	ldr	r2, [r7, #4]
 801053e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010540:	4413      	add	r3, r2
 8010542:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801054c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8010550:	bf28      	it	cs
 8010552:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8010556:	b292      	uxth	r2, r2
 8010558:	4413      	add	r3, r2
 801055a:	68fa      	ldr	r2, [r7, #12]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	2b00      	cmp	r3, #0
 8010560:	db08      	blt.n	8010574 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	e020      	b.n	80105b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801057c:	1ad3      	subs	r3, r2, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	dd03      	ble.n	801058a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010588:	e014      	b.n	80105b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801059c:	d306      	bcc.n	80105ac <tcp_update_rcv_ann_wnd+0x90>
 801059e:	4b08      	ldr	r3, [pc, #32]	@ (80105c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80105a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80105a4:	4909      	ldr	r1, [pc, #36]	@ (80105cc <tcp_update_rcv_ann_wnd+0xb0>)
 80105a6:	4808      	ldr	r0, [pc, #32]	@ (80105c8 <tcp_update_rcv_ann_wnd+0xac>)
 80105a8:	f009 f9a4 	bl	80198f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80105b4:	2300      	movs	r3, #0
  }
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3710      	adds	r7, #16
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	0801d620 	.word	0x0801d620
 80105c4:	0801d87c 	.word	0x0801d87c
 80105c8:	0801d664 	.word	0x0801d664
 80105cc:	0801d8a0 	.word	0x0801d8a0

080105d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	460b      	mov	r3, r1
 80105da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d107      	bne.n	80105f2 <tcp_recved+0x22>
 80105e2:	4b1f      	ldr	r3, [pc, #124]	@ (8010660 <tcp_recved+0x90>)
 80105e4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80105e8:	491e      	ldr	r1, [pc, #120]	@ (8010664 <tcp_recved+0x94>)
 80105ea:	481f      	ldr	r0, [pc, #124]	@ (8010668 <tcp_recved+0x98>)
 80105ec:	f009 f982 	bl	80198f4 <iprintf>
 80105f0:	e032      	b.n	8010658 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d106      	bne.n	8010608 <tcp_recved+0x38>
 80105fa:	4b19      	ldr	r3, [pc, #100]	@ (8010660 <tcp_recved+0x90>)
 80105fc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010600:	491a      	ldr	r1, [pc, #104]	@ (801066c <tcp_recved+0x9c>)
 8010602:	4819      	ldr	r0, [pc, #100]	@ (8010668 <tcp_recved+0x98>)
 8010604:	f009 f976 	bl	80198f4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801060c:	887b      	ldrh	r3, [r7, #2]
 801060e:	4413      	add	r3, r2
 8010610:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010612:	89fb      	ldrh	r3, [r7, #14]
 8010614:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010618:	d804      	bhi.n	8010624 <tcp_recved+0x54>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801061e:	89fa      	ldrh	r2, [r7, #14]
 8010620:	429a      	cmp	r2, r3
 8010622:	d204      	bcs.n	801062e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801062a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801062c:	e002      	b.n	8010634 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	89fa      	ldrh	r2, [r7, #14]
 8010632:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff ff71 	bl	801051c <tcp_update_rcv_ann_wnd>
 801063a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010642:	d309      	bcc.n	8010658 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8b5b      	ldrh	r3, [r3, #26]
 8010648:	f043 0302 	orr.w	r3, r3, #2
 801064c:	b29a      	uxth	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f004 fbaa 	bl	8014dac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	0801d620 	.word	0x0801d620
 8010664:	0801d8bc 	.word	0x0801d8bc
 8010668:	0801d664 	.word	0x0801d664
 801066c:	0801d8d4 	.word	0x0801d8d4

08010670 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010676:	2300      	movs	r3, #0
 8010678:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801067a:	4b1e      	ldr	r3, [pc, #120]	@ (80106f4 <tcp_new_port+0x84>)
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	3301      	adds	r3, #1
 8010680:	b29a      	uxth	r2, r3
 8010682:	4b1c      	ldr	r3, [pc, #112]	@ (80106f4 <tcp_new_port+0x84>)
 8010684:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010686:	4b1b      	ldr	r3, [pc, #108]	@ (80106f4 <tcp_new_port+0x84>)
 8010688:	881b      	ldrh	r3, [r3, #0]
 801068a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801068e:	4293      	cmp	r3, r2
 8010690:	d103      	bne.n	801069a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010692:	4b18      	ldr	r3, [pc, #96]	@ (80106f4 <tcp_new_port+0x84>)
 8010694:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010698:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801069a:	2300      	movs	r3, #0
 801069c:	71fb      	strb	r3, [r7, #7]
 801069e:	e01e      	b.n	80106de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80106a0:	79fb      	ldrb	r3, [r7, #7]
 80106a2:	4a15      	ldr	r2, [pc, #84]	@ (80106f8 <tcp_new_port+0x88>)
 80106a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	e011      	b.n	80106d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	8ada      	ldrh	r2, [r3, #22]
 80106b2:	4b10      	ldr	r3, [pc, #64]	@ (80106f4 <tcp_new_port+0x84>)
 80106b4:	881b      	ldrh	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d108      	bne.n	80106cc <tcp_new_port+0x5c>
        n++;
 80106ba:	88bb      	ldrh	r3, [r7, #4]
 80106bc:	3301      	adds	r3, #1
 80106be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80106c0:	88bb      	ldrh	r3, [r7, #4]
 80106c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80106c6:	d3d8      	bcc.n	801067a <tcp_new_port+0xa>
          return 0;
 80106c8:	2300      	movs	r3, #0
 80106ca:	e00d      	b.n	80106e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	603b      	str	r3, [r7, #0]
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1ea      	bne.n	80106ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80106d8:	79fb      	ldrb	r3, [r7, #7]
 80106da:	3301      	adds	r3, #1
 80106dc:	71fb      	strb	r3, [r7, #7]
 80106de:	79fb      	ldrb	r3, [r7, #7]
 80106e0:	2b03      	cmp	r3, #3
 80106e2:	d9dd      	bls.n	80106a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80106e4:	4b03      	ldr	r3, [pc, #12]	@ (80106f4 <tcp_new_port+0x84>)
 80106e6:	881b      	ldrh	r3, [r3, #0]
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	20000010 	.word	0x20000010
 80106f8:	0801f638 	.word	0x0801f638

080106fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80106fc:	b5b0      	push	{r4, r5, r7, lr}
 80106fe:	b090      	sub	sp, #64	@ 0x40
 8010700:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8010708:	4b95      	ldr	r3, [pc, #596]	@ (8010960 <tcp_slowtmr+0x264>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	3301      	adds	r3, #1
 801070e:	4a94      	ldr	r2, [pc, #592]	@ (8010960 <tcp_slowtmr+0x264>)
 8010710:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010712:	4b94      	ldr	r3, [pc, #592]	@ (8010964 <tcp_slowtmr+0x268>)
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	3301      	adds	r3, #1
 8010718:	b2da      	uxtb	r2, r3
 801071a:	4b92      	ldr	r3, [pc, #584]	@ (8010964 <tcp_slowtmr+0x268>)
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	e000      	b.n	8010722 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010720:	bf00      	nop
  prev = NULL;
 8010722:	2300      	movs	r3, #0
 8010724:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010726:	4b90      	ldr	r3, [pc, #576]	@ (8010968 <tcp_slowtmr+0x26c>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801072c:	e29d      	b.n	8010c6a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801072e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010730:	7d1b      	ldrb	r3, [r3, #20]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d106      	bne.n	8010744 <tcp_slowtmr+0x48>
 8010736:	4b8d      	ldr	r3, [pc, #564]	@ (801096c <tcp_slowtmr+0x270>)
 8010738:	f240 42be 	movw	r2, #1214	@ 0x4be
 801073c:	498c      	ldr	r1, [pc, #560]	@ (8010970 <tcp_slowtmr+0x274>)
 801073e:	488d      	ldr	r0, [pc, #564]	@ (8010974 <tcp_slowtmr+0x278>)
 8010740:	f009 f8d8 	bl	80198f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010746:	7d1b      	ldrb	r3, [r3, #20]
 8010748:	2b01      	cmp	r3, #1
 801074a:	d106      	bne.n	801075a <tcp_slowtmr+0x5e>
 801074c:	4b87      	ldr	r3, [pc, #540]	@ (801096c <tcp_slowtmr+0x270>)
 801074e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010752:	4989      	ldr	r1, [pc, #548]	@ (8010978 <tcp_slowtmr+0x27c>)
 8010754:	4887      	ldr	r0, [pc, #540]	@ (8010974 <tcp_slowtmr+0x278>)
 8010756:	f009 f8cd 	bl	80198f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801075a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075c:	7d1b      	ldrb	r3, [r3, #20]
 801075e:	2b0a      	cmp	r3, #10
 8010760:	d106      	bne.n	8010770 <tcp_slowtmr+0x74>
 8010762:	4b82      	ldr	r3, [pc, #520]	@ (801096c <tcp_slowtmr+0x270>)
 8010764:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010768:	4984      	ldr	r1, [pc, #528]	@ (801097c <tcp_slowtmr+0x280>)
 801076a:	4882      	ldr	r0, [pc, #520]	@ (8010974 <tcp_slowtmr+0x278>)
 801076c:	f009 f8c2 	bl	80198f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010772:	7f9a      	ldrb	r2, [r3, #30]
 8010774:	4b7b      	ldr	r3, [pc, #492]	@ (8010964 <tcp_slowtmr+0x268>)
 8010776:	781b      	ldrb	r3, [r3, #0]
 8010778:	429a      	cmp	r2, r3
 801077a:	d105      	bne.n	8010788 <tcp_slowtmr+0x8c>
      prev = pcb;
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010786:	e270      	b.n	8010c6a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010788:	4b76      	ldr	r3, [pc, #472]	@ (8010964 <tcp_slowtmr+0x268>)
 801078a:	781a      	ldrb	r2, [r3, #0]
 801078c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010796:	2300      	movs	r3, #0
 8010798:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801079c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801079e:	7d1b      	ldrb	r3, [r3, #20]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	d10a      	bne.n	80107ba <tcp_slowtmr+0xbe>
 80107a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80107aa:	2b05      	cmp	r3, #5
 80107ac:	d905      	bls.n	80107ba <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80107ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107b2:	3301      	adds	r3, #1
 80107b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107b8:	e11e      	b.n	80109f8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80107ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80107c0:	2b0b      	cmp	r3, #11
 80107c2:	d905      	bls.n	80107d0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80107c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107c8:	3301      	adds	r3, #1
 80107ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107ce:	e113      	b.n	80109f8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80107d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d075      	beq.n	80108c6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80107da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d006      	beq.n	80107f0 <tcp_slowtmr+0xf4>
 80107e2:	4b62      	ldr	r3, [pc, #392]	@ (801096c <tcp_slowtmr+0x270>)
 80107e4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80107e8:	4965      	ldr	r1, [pc, #404]	@ (8010980 <tcp_slowtmr+0x284>)
 80107ea:	4862      	ldr	r0, [pc, #392]	@ (8010974 <tcp_slowtmr+0x278>)
 80107ec:	f009 f882 	bl	80198f4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80107f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d106      	bne.n	8010806 <tcp_slowtmr+0x10a>
 80107f8:	4b5c      	ldr	r3, [pc, #368]	@ (801096c <tcp_slowtmr+0x270>)
 80107fa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80107fe:	4961      	ldr	r1, [pc, #388]	@ (8010984 <tcp_slowtmr+0x288>)
 8010800:	485c      	ldr	r0, [pc, #368]	@ (8010974 <tcp_slowtmr+0x278>)
 8010802:	f009 f877 	bl	80198f4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010808:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801080c:	2b0b      	cmp	r3, #11
 801080e:	d905      	bls.n	801081c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010814:	3301      	adds	r3, #1
 8010816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801081a:	e0ed      	b.n	80109f8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801081c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010822:	3b01      	subs	r3, #1
 8010824:	4a58      	ldr	r2, [pc, #352]	@ (8010988 <tcp_slowtmr+0x28c>)
 8010826:	5cd3      	ldrb	r3, [r2, r3]
 8010828:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801082a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010830:	7c7a      	ldrb	r2, [r7, #17]
 8010832:	429a      	cmp	r2, r3
 8010834:	d907      	bls.n	8010846 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010838:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801083c:	3301      	adds	r3, #1
 801083e:	b2da      	uxtb	r2, r3
 8010840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010842:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010848:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801084c:	7c7a      	ldrb	r2, [r7, #17]
 801084e:	429a      	cmp	r2, r3
 8010850:	f200 80d2 	bhi.w	80109f8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010854:	2301      	movs	r3, #1
 8010856:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801085a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801085e:	2b00      	cmp	r3, #0
 8010860:	d108      	bne.n	8010874 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010862:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010864:	f005 f94a 	bl	8015afc <tcp_zero_window_probe>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d014      	beq.n	8010898 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801086e:	2300      	movs	r3, #0
 8010870:	623b      	str	r3, [r7, #32]
 8010872:	e011      	b.n	8010898 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801087a:	4619      	mov	r1, r3
 801087c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801087e:	f004 f80f 	bl	80148a0 <tcp_split_unsent_seg>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d107      	bne.n	8010898 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801088a:	f004 fa8f 	bl	8014dac <tcp_output>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d101      	bne.n	8010898 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 80ac 	beq.w	80109f8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80108a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80108a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80108ae:	2b06      	cmp	r3, #6
 80108b0:	f200 80a2 	bhi.w	80109f8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80108ba:	3301      	adds	r3, #1
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80108c4:	e098      	b.n	80109f8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80108c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	db0f      	blt.n	80108f0 <tcp_slowtmr+0x1f4>
 80108d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108d6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80108da:	4293      	cmp	r3, r2
 80108dc:	d008      	beq.n	80108f0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80108de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	3301      	adds	r3, #1
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	b21a      	sxth	r2, r3
 80108ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ee:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80108f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80108f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108f8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80108fc:	429a      	cmp	r2, r3
 80108fe:	db7b      	blt.n	80109f8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010900:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010902:	f004 fd47 	bl	8015394 <tcp_rexmit_rto_prepare>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d007      	beq.n	801091c <tcp_slowtmr+0x220>
 801090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010910:	2b00      	cmp	r3, #0
 8010912:	d171      	bne.n	80109f8 <tcp_slowtmr+0x2fc>
 8010914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010918:	2b00      	cmp	r3, #0
 801091a:	d06d      	beq.n	80109f8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801091c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091e:	7d1b      	ldrb	r3, [r3, #20]
 8010920:	2b02      	cmp	r3, #2
 8010922:	d03a      	beq.n	801099a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801092a:	2b0c      	cmp	r3, #12
 801092c:	bf28      	it	cs
 801092e:	230c      	movcs	r3, #12
 8010930:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010934:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010938:	10db      	asrs	r3, r3, #3
 801093a:	b21b      	sxth	r3, r3
 801093c:	461a      	mov	r2, r3
 801093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010940:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010944:	4413      	add	r3, r2
 8010946:	7efa      	ldrb	r2, [r7, #27]
 8010948:	4910      	ldr	r1, [pc, #64]	@ (801098c <tcp_slowtmr+0x290>)
 801094a:	5c8a      	ldrb	r2, [r1, r2]
 801094c:	4093      	lsls	r3, r2
 801094e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010956:	4293      	cmp	r3, r2
 8010958:	dc1a      	bgt.n	8010990 <tcp_slowtmr+0x294>
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	b21a      	sxth	r2, r3
 801095e:	e019      	b.n	8010994 <tcp_slowtmr+0x298>
 8010960:	20011d18 	.word	0x20011d18
 8010964:	20011d2e 	.word	0x20011d2e
 8010968:	20011d24 	.word	0x20011d24
 801096c:	0801d620 	.word	0x0801d620
 8010970:	0801d964 	.word	0x0801d964
 8010974:	0801d664 	.word	0x0801d664
 8010978:	0801d990 	.word	0x0801d990
 801097c:	0801d9bc 	.word	0x0801d9bc
 8010980:	0801d9ec 	.word	0x0801d9ec
 8010984:	0801da20 	.word	0x0801da20
 8010988:	0801f630 	.word	0x0801f630
 801098c:	0801f620 	.word	0x0801f620
 8010990:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099c:	2200      	movs	r2, #0
 801099e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80109a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80109a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80109ac:	4293      	cmp	r3, r2
 80109ae:	bf28      	it	cs
 80109b0:	4613      	movcs	r3, r2
 80109b2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80109b4:	8a7b      	ldrh	r3, [r7, #18]
 80109b6:	085b      	lsrs	r3, r3, #1
 80109b8:	b29a      	uxth	r2, r3
 80109ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80109c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80109c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	b29b      	uxth	r3, r3
 80109ce:	429a      	cmp	r2, r3
 80109d0:	d206      	bcs.n	80109e0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80109d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109d6:	005b      	lsls	r3, r3, #1
 80109d8:	b29a      	uxth	r2, r3
 80109da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80109e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80109e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80109ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ec:	2200      	movs	r2, #0
 80109ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80109f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109f4:	f004 fd3e 	bl	8015474 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80109f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fa:	7d1b      	ldrb	r3, [r3, #20]
 80109fc:	2b06      	cmp	r3, #6
 80109fe:	d111      	bne.n	8010a24 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a02:	8b5b      	ldrh	r3, [r3, #26]
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a12:	6a1b      	ldr	r3, [r3, #32]
 8010a14:	1ad3      	subs	r3, r2, r3
 8010a16:	2b28      	cmp	r3, #40	@ 0x28
 8010a18:	d904      	bls.n	8010a24 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a1e:	3301      	adds	r3, #1
 8010a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a26:	7a5b      	ldrb	r3, [r3, #9]
 8010a28:	f003 0308 	and.w	r3, r3, #8
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d04a      	beq.n	8010ac6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a32:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010a34:	2b04      	cmp	r3, #4
 8010a36:	d003      	beq.n	8010a40 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010a3c:	2b07      	cmp	r3, #7
 8010a3e:	d142      	bne.n	8010ac6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a40:	4b8f      	ldr	r3, [pc, #572]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a46:	6a1b      	ldr	r3, [r3, #32]
 8010a48:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a50:	4b8c      	ldr	r3, [pc, #560]	@ (8010c84 <tcp_slowtmr+0x588>)
 8010a52:	440b      	add	r3, r1
 8010a54:	498c      	ldr	r1, [pc, #560]	@ (8010c88 <tcp_slowtmr+0x58c>)
 8010a56:	fba1 1303 	umull	r1, r3, r1, r3
 8010a5a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d90a      	bls.n	8010a76 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a64:	3301      	adds	r3, #1
 8010a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a6e:	3301      	adds	r3, #1
 8010a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010a74:	e027      	b.n	8010ac6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a76:	4b82      	ldr	r3, [pc, #520]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7c:	6a1b      	ldr	r3, [r3, #32]
 8010a7e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a82:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a88:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8010c8c <tcp_slowtmr+0x590>)
 8010a90:	fb00 f303 	mul.w	r3, r0, r3
 8010a94:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010a96:	497c      	ldr	r1, [pc, #496]	@ (8010c88 <tcp_slowtmr+0x58c>)
 8010a98:	fba1 1303 	umull	r1, r3, r1, r3
 8010a9c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d911      	bls.n	8010ac6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010aa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010aa4:	f004 ffea 	bl	8015a7c <tcp_keepalive>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010aae:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d107      	bne.n	8010ac6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010abc:	3301      	adds	r3, #1
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d011      	beq.n	8010af2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010ace:	4b6c      	ldr	r3, [pc, #432]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad4:	6a1b      	ldr	r3, [r3, #32]
 8010ad6:	1ad2      	subs	r2, r2, r3
 8010ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ada:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010ade:	4619      	mov	r1, r3
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	005b      	lsls	r3, r3, #1
 8010ae4:	440b      	add	r3, r1
 8010ae6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d302      	bcc.n	8010af2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010aee:	f000 feab 	bl	8011848 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af4:	7d1b      	ldrb	r3, [r3, #20]
 8010af6:	2b03      	cmp	r3, #3
 8010af8:	d10b      	bne.n	8010b12 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010afa:	4b61      	ldr	r3, [pc, #388]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b00:	6a1b      	ldr	r3, [r3, #32]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	2b28      	cmp	r3, #40	@ 0x28
 8010b06:	d904      	bls.n	8010b12 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b14:	7d1b      	ldrb	r3, [r3, #20]
 8010b16:	2b09      	cmp	r3, #9
 8010b18:	d10b      	bne.n	8010b32 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010b1a:	4b59      	ldr	r3, [pc, #356]	@ (8010c80 <tcp_slowtmr+0x584>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	1ad3      	subs	r3, r2, r3
 8010b24:	2bf0      	cmp	r3, #240	@ 0xf0
 8010b26:	d904      	bls.n	8010b32 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d060      	beq.n	8010bfc <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b40:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010b42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b44:	f000 fccc 	bl	80114e0 <tcp_pcb_purge>
      if (prev != NULL) {
 8010b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d010      	beq.n	8010b70 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010b4e:	4b50      	ldr	r3, [pc, #320]	@ (8010c90 <tcp_slowtmr+0x594>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d106      	bne.n	8010b66 <tcp_slowtmr+0x46a>
 8010b58:	4b4e      	ldr	r3, [pc, #312]	@ (8010c94 <tcp_slowtmr+0x598>)
 8010b5a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010b5e:	494e      	ldr	r1, [pc, #312]	@ (8010c98 <tcp_slowtmr+0x59c>)
 8010b60:	484e      	ldr	r0, [pc, #312]	@ (8010c9c <tcp_slowtmr+0x5a0>)
 8010b62:	f008 fec7 	bl	80198f4 <iprintf>
        prev->next = pcb->next;
 8010b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b68:	68da      	ldr	r2, [r3, #12]
 8010b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b6c:	60da      	str	r2, [r3, #12]
 8010b6e:	e00f      	b.n	8010b90 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010b70:	4b47      	ldr	r3, [pc, #284]	@ (8010c90 <tcp_slowtmr+0x594>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d006      	beq.n	8010b88 <tcp_slowtmr+0x48c>
 8010b7a:	4b46      	ldr	r3, [pc, #280]	@ (8010c94 <tcp_slowtmr+0x598>)
 8010b7c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010b80:	4947      	ldr	r1, [pc, #284]	@ (8010ca0 <tcp_slowtmr+0x5a4>)
 8010b82:	4846      	ldr	r0, [pc, #280]	@ (8010c9c <tcp_slowtmr+0x5a0>)
 8010b84:	f008 feb6 	bl	80198f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	4a40      	ldr	r2, [pc, #256]	@ (8010c90 <tcp_slowtmr+0x594>)
 8010b8e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010b90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d013      	beq.n	8010bc0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010ba0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ba8:	8ad2      	ldrh	r2, [r2, #22]
 8010baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010bac:	8b09      	ldrh	r1, [r1, #24]
 8010bae:	9102      	str	r1, [sp, #8]
 8010bb0:	9201      	str	r2, [sp, #4]
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	4622      	mov	r2, r4
 8010bb8:	4601      	mov	r1, r0
 8010bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bbc:	f004 feaa 	bl	8015914 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc8:	7d1b      	ldrb	r3, [r3, #20]
 8010bca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010bd6:	6838      	ldr	r0, [r7, #0]
 8010bd8:	f7fe ffee 	bl	800fbb8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010bdc:	4b31      	ldr	r3, [pc, #196]	@ (8010ca4 <tcp_slowtmr+0x5a8>)
 8010bde:	2200      	movs	r2, #0
 8010be0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <tcp_slowtmr+0x4f6>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f06f 010c 	mvn.w	r1, #12
 8010bee:	68b8      	ldr	r0, [r7, #8]
 8010bf0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8010ca4 <tcp_slowtmr+0x5a8>)
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d037      	beq.n	8010c6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010bfa:	e592      	b.n	8010722 <tcp_slowtmr+0x26>
      prev = pcb;
 8010bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c08:	7f1b      	ldrb	r3, [r3, #28]
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c14:	7f1a      	ldrb	r2, [r3, #28]
 8010c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c18:	7f5b      	ldrb	r3, [r3, #29]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d325      	bcc.n	8010c6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c20:	2200      	movs	r2, #0
 8010c22:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010c24:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca4 <tcp_slowtmr+0x5a8>)
 8010c26:	2200      	movs	r2, #0
 8010c28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d00b      	beq.n	8010c4c <tcp_slowtmr+0x550>
 8010c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c3c:	6912      	ldr	r2, [r2, #16]
 8010c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c40:	4610      	mov	r0, r2
 8010c42:	4798      	blx	r3
 8010c44:	4603      	mov	r3, r0
 8010c46:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010c4a:	e002      	b.n	8010c52 <tcp_slowtmr+0x556>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010c52:	4b14      	ldr	r3, [pc, #80]	@ (8010ca4 <tcp_slowtmr+0x5a8>)
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f47f ad62 	bne.w	8010720 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010c5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d102      	bne.n	8010c6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c66:	f004 f8a1 	bl	8014dac <tcp_output>
  while (pcb != NULL) {
 8010c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f47f ad5e 	bne.w	801072e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010c72:	2300      	movs	r3, #0
 8010c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010c76:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca8 <tcp_slowtmr+0x5ac>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010c7c:	e069      	b.n	8010d52 <tcp_slowtmr+0x656>
 8010c7e:	bf00      	nop
 8010c80:	20011d18 	.word	0x20011d18
 8010c84:	000a4cb8 	.word	0x000a4cb8
 8010c88:	10624dd3 	.word	0x10624dd3
 8010c8c:	000124f8 	.word	0x000124f8
 8010c90:	20011d24 	.word	0x20011d24
 8010c94:	0801d620 	.word	0x0801d620
 8010c98:	0801da58 	.word	0x0801da58
 8010c9c:	0801d664 	.word	0x0801d664
 8010ca0:	0801da84 	.word	0x0801da84
 8010ca4:	20011d2c 	.word	0x20011d2c
 8010ca8:	20011d28 	.word	0x20011d28
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cae:	7d1b      	ldrb	r3, [r3, #20]
 8010cb0:	2b0a      	cmp	r3, #10
 8010cb2:	d006      	beq.n	8010cc2 <tcp_slowtmr+0x5c6>
 8010cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8010d64 <tcp_slowtmr+0x668>)
 8010cb6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010cba:	492b      	ldr	r1, [pc, #172]	@ (8010d68 <tcp_slowtmr+0x66c>)
 8010cbc:	482b      	ldr	r0, [pc, #172]	@ (8010d6c <tcp_slowtmr+0x670>)
 8010cbe:	f008 fe19 	bl	80198f4 <iprintf>
    pcb_remove = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010cc8:	4b29      	ldr	r3, [pc, #164]	@ (8010d70 <tcp_slowtmr+0x674>)
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cce:	6a1b      	ldr	r3, [r3, #32]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	2bf0      	cmp	r3, #240	@ 0xf0
 8010cd4:	d904      	bls.n	8010ce0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cda:	3301      	adds	r3, #1
 8010cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d02f      	beq.n	8010d48 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010ce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cea:	f000 fbf9 	bl	80114e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d010      	beq.n	8010d16 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8010d74 <tcp_slowtmr+0x678>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d106      	bne.n	8010d0c <tcp_slowtmr+0x610>
 8010cfe:	4b19      	ldr	r3, [pc, #100]	@ (8010d64 <tcp_slowtmr+0x668>)
 8010d00:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010d04:	491c      	ldr	r1, [pc, #112]	@ (8010d78 <tcp_slowtmr+0x67c>)
 8010d06:	4819      	ldr	r0, [pc, #100]	@ (8010d6c <tcp_slowtmr+0x670>)
 8010d08:	f008 fdf4 	bl	80198f4 <iprintf>
        prev->next = pcb->next;
 8010d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d0e:	68da      	ldr	r2, [r3, #12]
 8010d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d12:	60da      	str	r2, [r3, #12]
 8010d14:	e00f      	b.n	8010d36 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010d16:	4b17      	ldr	r3, [pc, #92]	@ (8010d74 <tcp_slowtmr+0x678>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d006      	beq.n	8010d2e <tcp_slowtmr+0x632>
 8010d20:	4b10      	ldr	r3, [pc, #64]	@ (8010d64 <tcp_slowtmr+0x668>)
 8010d22:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010d26:	4915      	ldr	r1, [pc, #84]	@ (8010d7c <tcp_slowtmr+0x680>)
 8010d28:	4810      	ldr	r0, [pc, #64]	@ (8010d6c <tcp_slowtmr+0x670>)
 8010d2a:	f008 fde3 	bl	80198f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	4a10      	ldr	r2, [pc, #64]	@ (8010d74 <tcp_slowtmr+0x678>)
 8010d34:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d38:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010d40:	69f8      	ldr	r0, [r7, #28]
 8010d42:	f7fe ff39 	bl	800fbb8 <tcp_free>
 8010d46:	e004      	b.n	8010d52 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1a9      	bne.n	8010cac <tcp_slowtmr+0x5b0>
    }
  }
}
 8010d58:	bf00      	nop
 8010d5a:	bf00      	nop
 8010d5c:	3730      	adds	r7, #48	@ 0x30
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bdb0      	pop	{r4, r5, r7, pc}
 8010d62:	bf00      	nop
 8010d64:	0801d620 	.word	0x0801d620
 8010d68:	0801dab0 	.word	0x0801dab0
 8010d6c:	0801d664 	.word	0x0801d664
 8010d70:	20011d18 	.word	0x20011d18
 8010d74:	20011d28 	.word	0x20011d28
 8010d78:	0801dae0 	.word	0x0801dae0
 8010d7c:	0801db08 	.word	0x0801db08

08010d80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010d86:	4b2d      	ldr	r3, [pc, #180]	@ (8010e3c <tcp_fasttmr+0xbc>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	3301      	adds	r3, #1
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8010e3c <tcp_fasttmr+0xbc>)
 8010d90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010d92:	4b2b      	ldr	r3, [pc, #172]	@ (8010e40 <tcp_fasttmr+0xc0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010d98:	e048      	b.n	8010e2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	7f9a      	ldrb	r2, [r3, #30]
 8010d9e:	4b27      	ldr	r3, [pc, #156]	@ (8010e3c <tcp_fasttmr+0xbc>)
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d03f      	beq.n	8010e26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010da6:	4b25      	ldr	r3, [pc, #148]	@ (8010e3c <tcp_fasttmr+0xbc>)
 8010da8:	781a      	ldrb	r2, [r3, #0]
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	8b5b      	ldrh	r3, [r3, #26]
 8010db2:	f003 0301 	and.w	r3, r3, #1
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d010      	beq.n	8010ddc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8b5b      	ldrh	r3, [r3, #26]
 8010dbe:	f043 0302 	orr.w	r3, r3, #2
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f003 ffef 	bl	8014dac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f023 0303 	bic.w	r3, r3, #3
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8b5b      	ldrh	r3, [r3, #26]
 8010de0:	f003 0308 	and.w	r3, r3, #8
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d009      	beq.n	8010dfc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	8b5b      	ldrh	r3, [r3, #26]
 8010dec:	f023 0308 	bic.w	r3, r3, #8
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff f872 	bl	800fee0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00a      	beq.n	8010e20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8010e44 <tcp_fasttmr+0xc4>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 f819 	bl	8010e48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010e16:	4b0b      	ldr	r3, [pc, #44]	@ (8010e44 <tcp_fasttmr+0xc4>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d000      	beq.n	8010e20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010e1e:	e7b8      	b.n	8010d92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	607b      	str	r3, [r7, #4]
 8010e24:	e002      	b.n	8010e2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d1b3      	bne.n	8010d9a <tcp_fasttmr+0x1a>
    }
  }
}
 8010e32:	bf00      	nop
 8010e34:	bf00      	nop
 8010e36:	3708      	adds	r7, #8
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	20011d2e 	.word	0x20011d2e
 8010e40:	20011d24 	.word	0x20011d24
 8010e44:	20011d2c 	.word	0x20011d2c

08010e48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010e48:	b590      	push	{r4, r7, lr}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d109      	bne.n	8010e6a <tcp_process_refused_data+0x22>
 8010e56:	4b37      	ldr	r3, [pc, #220]	@ (8010f34 <tcp_process_refused_data+0xec>)
 8010e58:	f240 6209 	movw	r2, #1545	@ 0x609
 8010e5c:	4936      	ldr	r1, [pc, #216]	@ (8010f38 <tcp_process_refused_data+0xf0>)
 8010e5e:	4837      	ldr	r0, [pc, #220]	@ (8010f3c <tcp_process_refused_data+0xf4>)
 8010e60:	f008 fd48 	bl	80198f4 <iprintf>
 8010e64:	f06f 030f 	mvn.w	r3, #15
 8010e68:	e060      	b.n	8010f2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e6e:	7b5b      	ldrb	r3, [r3, #13]
 8010e70:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e76:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d00b      	beq.n	8010ea0 <tcp_process_refused_data+0x58>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6918      	ldr	r0, [r3, #16]
 8010e92:	2300      	movs	r3, #0
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	6879      	ldr	r1, [r7, #4]
 8010e98:	47a0      	blx	r4
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	73fb      	strb	r3, [r7, #15]
 8010e9e:	e007      	b.n	8010eb0 <tcp_process_refused_data+0x68>
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	68ba      	ldr	r2, [r7, #8]
 8010ea4:	6879      	ldr	r1, [r7, #4]
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	f000 f8a4 	bl	8010ff4 <tcp_recv_null>
 8010eac:	4603      	mov	r3, r0
 8010eae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d12a      	bne.n	8010f0e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010eb8:	7bbb      	ldrb	r3, [r7, #14]
 8010eba:	f003 0320 	and.w	r3, r3, #32
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d033      	beq.n	8010f2a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ec6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010eca:	d005      	beq.n	8010ed8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00b      	beq.n	8010efa <tcp_process_refused_data+0xb2>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6918      	ldr	r0, [r3, #16]
 8010eec:	2300      	movs	r3, #0
 8010eee:	2200      	movs	r2, #0
 8010ef0:	6879      	ldr	r1, [r7, #4]
 8010ef2:	47a0      	blx	r4
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	73fb      	strb	r3, [r7, #15]
 8010ef8:	e001      	b.n	8010efe <tcp_process_refused_data+0xb6>
 8010efa:	2300      	movs	r3, #0
 8010efc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f02:	f113 0f0d 	cmn.w	r3, #13
 8010f06:	d110      	bne.n	8010f2a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010f08:	f06f 030c 	mvn.w	r3, #12
 8010f0c:	e00e      	b.n	8010f2c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f12:	f113 0f0d 	cmn.w	r3, #13
 8010f16:	d102      	bne.n	8010f1e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010f18:	f06f 030c 	mvn.w	r3, #12
 8010f1c:	e006      	b.n	8010f2c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	68ba      	ldr	r2, [r7, #8]
 8010f22:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010f24:	f06f 0304 	mvn.w	r3, #4
 8010f28:	e000      	b.n	8010f2c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3714      	adds	r7, #20
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd90      	pop	{r4, r7, pc}
 8010f34:	0801d620 	.word	0x0801d620
 8010f38:	0801db30 	.word	0x0801db30
 8010f3c:	0801d664 	.word	0x0801d664

08010f40 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010f48:	e007      	b.n	8010f5a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 f80a 	bl	8010f6a <tcp_seg_free>
    seg = next;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1f4      	bne.n	8010f4a <tcp_segs_free+0xa>
  }
}
 8010f60:	bf00      	nop
 8010f62:	bf00      	nop
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00c      	beq.n	8010f92 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d004      	beq.n	8010f8a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fe fb6b 	bl	800f660 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010f8a:	6879      	ldr	r1, [r7, #4]
 8010f8c:	2003      	movs	r0, #3
 8010f8e:	f7fd fcc3 	bl	800e918 <memp_free>
  }
}
 8010f92:	bf00      	nop
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
	...

08010f9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d106      	bne.n	8010fb8 <tcp_seg_copy+0x1c>
 8010faa:	4b0f      	ldr	r3, [pc, #60]	@ (8010fe8 <tcp_seg_copy+0x4c>)
 8010fac:	f240 6282 	movw	r2, #1666	@ 0x682
 8010fb0:	490e      	ldr	r1, [pc, #56]	@ (8010fec <tcp_seg_copy+0x50>)
 8010fb2:	480f      	ldr	r0, [pc, #60]	@ (8010ff0 <tcp_seg_copy+0x54>)
 8010fb4:	f008 fc9e 	bl	80198f4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010fb8:	2003      	movs	r0, #3
 8010fba:	f7fd fc5b 	bl	800e874 <memp_malloc>
 8010fbe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <tcp_seg_copy+0x2e>
    return NULL;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	e00a      	b.n	8010fe0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010fca:	2210      	movs	r2, #16
 8010fcc:	6879      	ldr	r1, [r7, #4]
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	f008 ff0f 	bl	8019df2 <memcpy>
  pbuf_ref(cseg->p);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7fe fbe7 	bl	800f7ac <pbuf_ref>
  return cseg;
 8010fde:	68fb      	ldr	r3, [r7, #12]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	0801d620 	.word	0x0801d620
 8010fec:	0801db74 	.word	0x0801db74
 8010ff0:	0801d664 	.word	0x0801d664

08010ff4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	60b9      	str	r1, [r7, #8]
 8010ffe:	607a      	str	r2, [r7, #4]
 8011000:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d109      	bne.n	801101c <tcp_recv_null+0x28>
 8011008:	4b12      	ldr	r3, [pc, #72]	@ (8011054 <tcp_recv_null+0x60>)
 801100a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801100e:	4912      	ldr	r1, [pc, #72]	@ (8011058 <tcp_recv_null+0x64>)
 8011010:	4812      	ldr	r0, [pc, #72]	@ (801105c <tcp_recv_null+0x68>)
 8011012:	f008 fc6f 	bl	80198f4 <iprintf>
 8011016:	f06f 030f 	mvn.w	r3, #15
 801101a:	e016      	b.n	801104a <tcp_recv_null+0x56>

  if (p != NULL) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d009      	beq.n	8011036 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	4619      	mov	r1, r3
 8011028:	68b8      	ldr	r0, [r7, #8]
 801102a:	f7ff fad1 	bl	80105d0 <tcp_recved>
    pbuf_free(p);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7fe fb16 	bl	800f660 <pbuf_free>
 8011034:	e008      	b.n	8011048 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d104      	bne.n	8011048 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801103e:	68b8      	ldr	r0, [r7, #8]
 8011040:	f7fe ffb8 	bl	800ffb4 <tcp_close>
 8011044:	4603      	mov	r3, r0
 8011046:	e000      	b.n	801104a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	0801d620 	.word	0x0801d620
 8011058:	0801db90 	.word	0x0801db90
 801105c:	0801d664 	.word	0x0801d664

08011060 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b086      	sub	sp, #24
 8011064:	af00      	add	r7, sp, #0
 8011066:	4603      	mov	r3, r0
 8011068:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801106e:	2b00      	cmp	r3, #0
 8011070:	db01      	blt.n	8011076 <tcp_kill_prio+0x16>
 8011072:	79fb      	ldrb	r3, [r7, #7]
 8011074:	e000      	b.n	8011078 <tcp_kill_prio+0x18>
 8011076:	237f      	movs	r3, #127	@ 0x7f
 8011078:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801107a:	7afb      	ldrb	r3, [r7, #11]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d034      	beq.n	80110ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011080:	7afb      	ldrb	r3, [r7, #11]
 8011082:	3b01      	subs	r3, #1
 8011084:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011086:	2300      	movs	r3, #0
 8011088:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801108a:	2300      	movs	r3, #0
 801108c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801108e:	4b19      	ldr	r3, [pc, #100]	@ (80110f4 <tcp_kill_prio+0x94>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	617b      	str	r3, [r7, #20]
 8011094:	e01f      	b.n	80110d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	7d5b      	ldrb	r3, [r3, #21]
 801109a:	7afa      	ldrb	r2, [r7, #11]
 801109c:	429a      	cmp	r2, r3
 801109e:	d80c      	bhi.n	80110ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80110a0:	697b      	ldr	r3, [r7, #20]
 80110a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80110a4:	7afa      	ldrb	r2, [r7, #11]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d112      	bne.n	80110d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80110aa:	4b13      	ldr	r3, [pc, #76]	@ (80110f8 <tcp_kill_prio+0x98>)
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d80a      	bhi.n	80110d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80110ba:	4b0f      	ldr	r3, [pc, #60]	@ (80110f8 <tcp_kill_prio+0x98>)
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	6a1b      	ldr	r3, [r3, #32]
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	7d5b      	ldrb	r3, [r3, #21]
 80110ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	617b      	str	r3, [r7, #20]
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1dc      	bne.n	8011096 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d004      	beq.n	80110ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80110e2:	6938      	ldr	r0, [r7, #16]
 80110e4:	f7ff f8ac 	bl	8010240 <tcp_abort>
 80110e8:	e000      	b.n	80110ec <tcp_kill_prio+0x8c>
    return;
 80110ea:	bf00      	nop
  }
}
 80110ec:	3718      	adds	r7, #24
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20011d24 	.word	0x20011d24
 80110f8:	20011d18 	.word	0x20011d18

080110fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	4603      	mov	r3, r0
 8011104:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011106:	79fb      	ldrb	r3, [r7, #7]
 8011108:	2b08      	cmp	r3, #8
 801110a:	d009      	beq.n	8011120 <tcp_kill_state+0x24>
 801110c:	79fb      	ldrb	r3, [r7, #7]
 801110e:	2b09      	cmp	r3, #9
 8011110:	d006      	beq.n	8011120 <tcp_kill_state+0x24>
 8011112:	4b1a      	ldr	r3, [pc, #104]	@ (801117c <tcp_kill_state+0x80>)
 8011114:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011118:	4919      	ldr	r1, [pc, #100]	@ (8011180 <tcp_kill_state+0x84>)
 801111a:	481a      	ldr	r0, [pc, #104]	@ (8011184 <tcp_kill_state+0x88>)
 801111c:	f008 fbea 	bl	80198f4 <iprintf>

  inactivity = 0;
 8011120:	2300      	movs	r3, #0
 8011122:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011124:	2300      	movs	r3, #0
 8011126:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011128:	4b17      	ldr	r3, [pc, #92]	@ (8011188 <tcp_kill_state+0x8c>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	617b      	str	r3, [r7, #20]
 801112e:	e017      	b.n	8011160 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	7d1b      	ldrb	r3, [r3, #20]
 8011134:	79fa      	ldrb	r2, [r7, #7]
 8011136:	429a      	cmp	r2, r3
 8011138:	d10f      	bne.n	801115a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801113a:	4b14      	ldr	r3, [pc, #80]	@ (801118c <tcp_kill_state+0x90>)
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	68fa      	ldr	r2, [r7, #12]
 8011146:	429a      	cmp	r2, r3
 8011148:	d807      	bhi.n	801115a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801114a:	4b10      	ldr	r3, [pc, #64]	@ (801118c <tcp_kill_state+0x90>)
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	6a1b      	ldr	r3, [r3, #32]
 8011152:	1ad3      	subs	r3, r2, r3
 8011154:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	617b      	str	r3, [r7, #20]
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1e4      	bne.n	8011130 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d003      	beq.n	8011174 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801116c:	2100      	movs	r1, #0
 801116e:	6938      	ldr	r0, [r7, #16]
 8011170:	f7fe ffa8 	bl	80100c4 <tcp_abandon>
  }
}
 8011174:	bf00      	nop
 8011176:	3718      	adds	r7, #24
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}
 801117c:	0801d620 	.word	0x0801d620
 8011180:	0801dbac 	.word	0x0801dbac
 8011184:	0801d664 	.word	0x0801d664
 8011188:	20011d24 	.word	0x20011d24
 801118c:	20011d18 	.word	0x20011d18

08011190 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801119a:	2300      	movs	r3, #0
 801119c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801119e:	4b12      	ldr	r3, [pc, #72]	@ (80111e8 <tcp_kill_timewait+0x58>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	60fb      	str	r3, [r7, #12]
 80111a4:	e012      	b.n	80111cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80111a6:	4b11      	ldr	r3, [pc, #68]	@ (80111ec <tcp_kill_timewait+0x5c>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d807      	bhi.n	80111c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80111b6:	4b0d      	ldr	r3, [pc, #52]	@ (80111ec <tcp_kill_timewait+0x5c>)
 80111b8:	681a      	ldr	r2, [r3, #0]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6a1b      	ldr	r3, [r3, #32]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	68db      	ldr	r3, [r3, #12]
 80111ca:	60fb      	str	r3, [r7, #12]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1e9      	bne.n	80111a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d002      	beq.n	80111de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80111d8:	68b8      	ldr	r0, [r7, #8]
 80111da:	f7ff f831 	bl	8010240 <tcp_abort>
  }
}
 80111de:	bf00      	nop
 80111e0:	3710      	adds	r7, #16
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd80      	pop	{r7, pc}
 80111e6:	bf00      	nop
 80111e8:	20011d28 	.word	0x20011d28
 80111ec:	20011d18 	.word	0x20011d18

080111f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80111f6:	4b10      	ldr	r3, [pc, #64]	@ (8011238 <tcp_handle_closepend+0x48>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80111fc:	e014      	b.n	8011228 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	8b5b      	ldrh	r3, [r3, #26]
 8011208:	f003 0308 	and.w	r3, r3, #8
 801120c:	2b00      	cmp	r3, #0
 801120e:	d009      	beq.n	8011224 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	8b5b      	ldrh	r3, [r3, #26]
 8011214:	f023 0308 	bic.w	r3, r3, #8
 8011218:	b29a      	uxth	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7fe fe5e 	bl	800fee0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d1e7      	bne.n	80111fe <tcp_handle_closepend+0xe>
  }
}
 801122e:	bf00      	nop
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20011d24 	.word	0x20011d24

0801123c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	4603      	mov	r3, r0
 8011244:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011246:	2001      	movs	r0, #1
 8011248:	f7fd fb14 	bl	800e874 <memp_malloc>
 801124c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d126      	bne.n	80112a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011254:	f7ff ffcc 	bl	80111f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011258:	f7ff ff9a 	bl	8011190 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801125c:	2001      	movs	r0, #1
 801125e:	f7fd fb09 	bl	800e874 <memp_malloc>
 8011262:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d11b      	bne.n	80112a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801126a:	2009      	movs	r0, #9
 801126c:	f7ff ff46 	bl	80110fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011270:	2001      	movs	r0, #1
 8011272:	f7fd faff 	bl	800e874 <memp_malloc>
 8011276:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d111      	bne.n	80112a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801127e:	2008      	movs	r0, #8
 8011280:	f7ff ff3c 	bl	80110fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011284:	2001      	movs	r0, #1
 8011286:	f7fd faf5 	bl	800e874 <memp_malloc>
 801128a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d107      	bne.n	80112a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	4618      	mov	r0, r3
 8011296:	f7ff fee3 	bl	8011060 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801129a:	2001      	movs	r0, #1
 801129c:	f7fd faea 	bl	800e874 <memp_malloc>
 80112a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d03f      	beq.n	8011328 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80112a8:	229c      	movs	r2, #156	@ 0x9c
 80112aa:	2100      	movs	r1, #0
 80112ac:	68f8      	ldr	r0, [r7, #12]
 80112ae:	f008 fce7 	bl	8019c80 <memset>
    pcb->prio = prio;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	79fa      	ldrb	r2, [r7, #7]
 80112b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80112be:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80112c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	22ff      	movs	r2, #255	@ 0xff
 80112d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80112de:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2206      	movs	r2, #6
 80112e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2206      	movs	r2, #6
 80112ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112f4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2201      	movs	r2, #1
 80112fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80112fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011334 <tcp_alloc+0xf8>)
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011306:	4b0c      	ldr	r3, [pc, #48]	@ (8011338 <tcp_alloc+0xfc>)
 8011308:	781a      	ldrb	r2, [r3, #0]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011314:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	4a08      	ldr	r2, [pc, #32]	@ (801133c <tcp_alloc+0x100>)
 801131c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	4a07      	ldr	r2, [pc, #28]	@ (8011340 <tcp_alloc+0x104>)
 8011324:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011328:	68fb      	ldr	r3, [r7, #12]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	20011d18 	.word	0x20011d18
 8011338:	20011d2e 	.word	0x20011d2e
 801133c:	08010ff5 	.word	0x08010ff5
 8011340:	006ddd00 	.word	0x006ddd00

08011344 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	4603      	mov	r3, r0
 801134c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801134e:	2040      	movs	r0, #64	@ 0x40
 8011350:	f7ff ff74 	bl	801123c <tcp_alloc>
 8011354:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011356:	68fb      	ldr	r3, [r7, #12]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d002      	beq.n	8011376 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	683a      	ldr	r2, [r7, #0]
 8011374:	611a      	str	r2, [r3, #16]
  }
}
 8011376:	bf00      	nop
 8011378:	370c      	adds	r7, #12
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
	...

08011384 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b082      	sub	sp, #8
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00e      	beq.n	80113b2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	7d1b      	ldrb	r3, [r3, #20]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d106      	bne.n	80113aa <tcp_recv+0x26>
 801139c:	4b07      	ldr	r3, [pc, #28]	@ (80113bc <tcp_recv+0x38>)
 801139e:	f240 72df 	movw	r2, #2015	@ 0x7df
 80113a2:	4907      	ldr	r1, [pc, #28]	@ (80113c0 <tcp_recv+0x3c>)
 80113a4:	4807      	ldr	r0, [pc, #28]	@ (80113c4 <tcp_recv+0x40>)
 80113a6:	f008 faa5 	bl	80198f4 <iprintf>
    pcb->recv = recv;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	683a      	ldr	r2, [r7, #0]
 80113ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80113b2:	bf00      	nop
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	0801d620 	.word	0x0801d620
 80113c0:	0801dbbc 	.word	0x0801dbbc
 80113c4:	0801d664 	.word	0x0801d664

080113c8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d00e      	beq.n	80113f6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	7d1b      	ldrb	r3, [r3, #20]
 80113dc:	2b01      	cmp	r3, #1
 80113de:	d106      	bne.n	80113ee <tcp_sent+0x26>
 80113e0:	4b07      	ldr	r3, [pc, #28]	@ (8011400 <tcp_sent+0x38>)
 80113e2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80113e6:	4907      	ldr	r1, [pc, #28]	@ (8011404 <tcp_sent+0x3c>)
 80113e8:	4807      	ldr	r0, [pc, #28]	@ (8011408 <tcp_sent+0x40>)
 80113ea:	f008 fa83 	bl	80198f4 <iprintf>
    pcb->sent = sent;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	683a      	ldr	r2, [r7, #0]
 80113f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80113f6:	bf00      	nop
 80113f8:	3708      	adds	r7, #8
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	0801d620 	.word	0x0801d620
 8011404:	0801dbe4 	.word	0x0801dbe4
 8011408:	0801d664 	.word	0x0801d664

0801140c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00e      	beq.n	801143a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d106      	bne.n	8011432 <tcp_err+0x26>
 8011424:	4b07      	ldr	r3, [pc, #28]	@ (8011444 <tcp_err+0x38>)
 8011426:	f640 020d 	movw	r2, #2061	@ 0x80d
 801142a:	4907      	ldr	r1, [pc, #28]	@ (8011448 <tcp_err+0x3c>)
 801142c:	4807      	ldr	r0, [pc, #28]	@ (801144c <tcp_err+0x40>)
 801142e:	f008 fa61 	bl	80198f4 <iprintf>
    pcb->errf = err;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801143a:	bf00      	nop
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	0801d620 	.word	0x0801d620
 8011448:	0801dc0c 	.word	0x0801dc0c
 801144c:	0801d664 	.word	0x0801d664

08011450 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011450:	b480      	push	{r7}
 8011452:	b085      	sub	sp, #20
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d008      	beq.n	8011472 <tcp_accept+0x22>
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	7d1b      	ldrb	r3, [r3, #20]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d104      	bne.n	8011472 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	619a      	str	r2, [r3, #24]
  }
}
 8011472:	bf00      	nop
 8011474:	3714      	adds	r7, #20
 8011476:	46bd      	mov	sp, r7
 8011478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147c:	4770      	bx	lr
	...

08011480 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	4613      	mov	r3, r2
 801148c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d107      	bne.n	80114a4 <tcp_poll+0x24>
 8011494:	4b0e      	ldr	r3, [pc, #56]	@ (80114d0 <tcp_poll+0x50>)
 8011496:	f640 023d 	movw	r2, #2109	@ 0x83d
 801149a:	490e      	ldr	r1, [pc, #56]	@ (80114d4 <tcp_poll+0x54>)
 801149c:	480e      	ldr	r0, [pc, #56]	@ (80114d8 <tcp_poll+0x58>)
 801149e:	f008 fa29 	bl	80198f4 <iprintf>
 80114a2:	e011      	b.n	80114c8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	7d1b      	ldrb	r3, [r3, #20]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d106      	bne.n	80114ba <tcp_poll+0x3a>
 80114ac:	4b08      	ldr	r3, [pc, #32]	@ (80114d0 <tcp_poll+0x50>)
 80114ae:	f640 023e 	movw	r2, #2110	@ 0x83e
 80114b2:	490a      	ldr	r1, [pc, #40]	@ (80114dc <tcp_poll+0x5c>)
 80114b4:	4808      	ldr	r0, [pc, #32]	@ (80114d8 <tcp_poll+0x58>)
 80114b6:	f008 fa1d 	bl	80198f4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	79fa      	ldrb	r2, [r7, #7]
 80114c6:	775a      	strb	r2, [r3, #29]
}
 80114c8:	3710      	adds	r7, #16
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	0801d620 	.word	0x0801d620
 80114d4:	0801dc34 	.word	0x0801dc34
 80114d8:	0801d664 	.word	0x0801d664
 80114dc:	0801dc4c 	.word	0x0801dc4c

080114e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d107      	bne.n	80114fe <tcp_pcb_purge+0x1e>
 80114ee:	4b21      	ldr	r3, [pc, #132]	@ (8011574 <tcp_pcb_purge+0x94>)
 80114f0:	f640 0251 	movw	r2, #2129	@ 0x851
 80114f4:	4920      	ldr	r1, [pc, #128]	@ (8011578 <tcp_pcb_purge+0x98>)
 80114f6:	4821      	ldr	r0, [pc, #132]	@ (801157c <tcp_pcb_purge+0x9c>)
 80114f8:	f008 f9fc 	bl	80198f4 <iprintf>
 80114fc:	e037      	b.n	801156e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7d1b      	ldrb	r3, [r3, #20]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d033      	beq.n	801156e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801150a:	2b0a      	cmp	r3, #10
 801150c:	d02f      	beq.n	801156e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011512:	2b01      	cmp	r3, #1
 8011514:	d02b      	beq.n	801156e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801151a:	2b00      	cmp	r3, #0
 801151c:	d007      	beq.n	801152e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011522:	4618      	mov	r0, r3
 8011524:	f7fe f89c 	bl	800f660 <pbuf_free>
      pcb->refused_data = NULL;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011532:	2b00      	cmp	r3, #0
 8011534:	d002      	beq.n	801153c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 f986 	bl	8011848 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011542:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff fcf9 	bl	8010f40 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fcf4 	bl	8010f40 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2200      	movs	r2, #0
 801155c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	2200      	movs	r2, #0
 801156a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}
 8011574:	0801d620 	.word	0x0801d620
 8011578:	0801dc6c 	.word	0x0801dc6c
 801157c:	0801d664 	.word	0x0801d664

08011580 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d106      	bne.n	801159e <tcp_pcb_remove+0x1e>
 8011590:	4b3e      	ldr	r3, [pc, #248]	@ (801168c <tcp_pcb_remove+0x10c>)
 8011592:	f640 0283 	movw	r2, #2179	@ 0x883
 8011596:	493e      	ldr	r1, [pc, #248]	@ (8011690 <tcp_pcb_remove+0x110>)
 8011598:	483e      	ldr	r0, [pc, #248]	@ (8011694 <tcp_pcb_remove+0x114>)
 801159a:	f008 f9ab 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d106      	bne.n	80115b2 <tcp_pcb_remove+0x32>
 80115a4:	4b39      	ldr	r3, [pc, #228]	@ (801168c <tcp_pcb_remove+0x10c>)
 80115a6:	f640 0284 	movw	r2, #2180	@ 0x884
 80115aa:	493b      	ldr	r1, [pc, #236]	@ (8011698 <tcp_pcb_remove+0x118>)
 80115ac:	4839      	ldr	r0, [pc, #228]	@ (8011694 <tcp_pcb_remove+0x114>)
 80115ae:	f008 f9a1 	bl	80198f4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	683a      	ldr	r2, [r7, #0]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d105      	bne.n	80115c8 <tcp_pcb_remove+0x48>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	68da      	ldr	r2, [r3, #12]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	601a      	str	r2, [r3, #0]
 80115c6:	e013      	b.n	80115f0 <tcp_pcb_remove+0x70>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	60fb      	str	r3, [r7, #12]
 80115ce:	e00c      	b.n	80115ea <tcp_pcb_remove+0x6a>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	683a      	ldr	r2, [r7, #0]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d104      	bne.n	80115e4 <tcp_pcb_remove+0x64>
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	68da      	ldr	r2, [r3, #12]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	60da      	str	r2, [r3, #12]
 80115e2:	e005      	b.n	80115f0 <tcp_pcb_remove+0x70>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d1ef      	bne.n	80115d0 <tcp_pcb_remove+0x50>
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2200      	movs	r2, #0
 80115f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80115f6:	6838      	ldr	r0, [r7, #0]
 80115f8:	f7ff ff72 	bl	80114e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	7d1b      	ldrb	r3, [r3, #20]
 8011600:	2b0a      	cmp	r3, #10
 8011602:	d013      	beq.n	801162c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011608:	2b01      	cmp	r3, #1
 801160a:	d00f      	beq.n	801162c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	8b5b      	ldrh	r3, [r3, #26]
 8011610:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011614:	2b00      	cmp	r3, #0
 8011616:	d009      	beq.n	801162c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	8b5b      	ldrh	r3, [r3, #26]
 801161c:	f043 0302 	orr.w	r3, r3, #2
 8011620:	b29a      	uxth	r2, r3
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011626:	6838      	ldr	r0, [r7, #0]
 8011628:	f003 fbc0 	bl	8014dac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	7d1b      	ldrb	r3, [r3, #20]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d020      	beq.n	8011676 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011638:	2b00      	cmp	r3, #0
 801163a:	d006      	beq.n	801164a <tcp_pcb_remove+0xca>
 801163c:	4b13      	ldr	r3, [pc, #76]	@ (801168c <tcp_pcb_remove+0x10c>)
 801163e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011642:	4916      	ldr	r1, [pc, #88]	@ (801169c <tcp_pcb_remove+0x11c>)
 8011644:	4813      	ldr	r0, [pc, #76]	@ (8011694 <tcp_pcb_remove+0x114>)
 8011646:	f008 f955 	bl	80198f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801164e:	2b00      	cmp	r3, #0
 8011650:	d006      	beq.n	8011660 <tcp_pcb_remove+0xe0>
 8011652:	4b0e      	ldr	r3, [pc, #56]	@ (801168c <tcp_pcb_remove+0x10c>)
 8011654:	f640 0294 	movw	r2, #2196	@ 0x894
 8011658:	4911      	ldr	r1, [pc, #68]	@ (80116a0 <tcp_pcb_remove+0x120>)
 801165a:	480e      	ldr	r0, [pc, #56]	@ (8011694 <tcp_pcb_remove+0x114>)
 801165c:	f008 f94a 	bl	80198f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011664:	2b00      	cmp	r3, #0
 8011666:	d006      	beq.n	8011676 <tcp_pcb_remove+0xf6>
 8011668:	4b08      	ldr	r3, [pc, #32]	@ (801168c <tcp_pcb_remove+0x10c>)
 801166a:	f640 0296 	movw	r2, #2198	@ 0x896
 801166e:	490d      	ldr	r1, [pc, #52]	@ (80116a4 <tcp_pcb_remove+0x124>)
 8011670:	4808      	ldr	r0, [pc, #32]	@ (8011694 <tcp_pcb_remove+0x114>)
 8011672:	f008 f93f 	bl	80198f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2200      	movs	r2, #0
 801167a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	2200      	movs	r2, #0
 8011680:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011682:	bf00      	nop
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	0801d620 	.word	0x0801d620
 8011690:	0801dc88 	.word	0x0801dc88
 8011694:	0801d664 	.word	0x0801d664
 8011698:	0801dca4 	.word	0x0801dca4
 801169c:	0801dcc4 	.word	0x0801dcc4
 80116a0:	0801dcdc 	.word	0x0801dcdc
 80116a4:	0801dcf8 	.word	0x0801dcf8

080116a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d106      	bne.n	80116c4 <tcp_next_iss+0x1c>
 80116b6:	4b0a      	ldr	r3, [pc, #40]	@ (80116e0 <tcp_next_iss+0x38>)
 80116b8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80116bc:	4909      	ldr	r1, [pc, #36]	@ (80116e4 <tcp_next_iss+0x3c>)
 80116be:	480a      	ldr	r0, [pc, #40]	@ (80116e8 <tcp_next_iss+0x40>)
 80116c0:	f008 f918 	bl	80198f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80116c4:	4b09      	ldr	r3, [pc, #36]	@ (80116ec <tcp_next_iss+0x44>)
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	4b09      	ldr	r3, [pc, #36]	@ (80116f0 <tcp_next_iss+0x48>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	4413      	add	r3, r2
 80116ce:	4a07      	ldr	r2, [pc, #28]	@ (80116ec <tcp_next_iss+0x44>)
 80116d0:	6013      	str	r3, [r2, #0]
  return iss;
 80116d2:	4b06      	ldr	r3, [pc, #24]	@ (80116ec <tcp_next_iss+0x44>)
 80116d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	0801d620 	.word	0x0801d620
 80116e4:	0801dd10 	.word	0x0801dd10
 80116e8:	0801d664 	.word	0x0801d664
 80116ec:	20000014 	.word	0x20000014
 80116f0:	20011d18 	.word	0x20011d18

080116f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b086      	sub	sp, #24
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	4603      	mov	r3, r0
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	607a      	str	r2, [r7, #4]
 8011700:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d106      	bne.n	8011716 <tcp_eff_send_mss_netif+0x22>
 8011708:	4b14      	ldr	r3, [pc, #80]	@ (801175c <tcp_eff_send_mss_netif+0x68>)
 801170a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801170e:	4914      	ldr	r1, [pc, #80]	@ (8011760 <tcp_eff_send_mss_netif+0x6c>)
 8011710:	4814      	ldr	r0, [pc, #80]	@ (8011764 <tcp_eff_send_mss_netif+0x70>)
 8011712:	f008 f8ef 	bl	80198f4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d101      	bne.n	8011720 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801171c:	89fb      	ldrh	r3, [r7, #14]
 801171e:	e019      	b.n	8011754 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011724:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011726:	8afb      	ldrh	r3, [r7, #22]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d012      	beq.n	8011752 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801172c:	2328      	movs	r3, #40	@ 0x28
 801172e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011730:	8afa      	ldrh	r2, [r7, #22]
 8011732:	8abb      	ldrh	r3, [r7, #20]
 8011734:	429a      	cmp	r2, r3
 8011736:	d904      	bls.n	8011742 <tcp_eff_send_mss_netif+0x4e>
 8011738:	8afa      	ldrh	r2, [r7, #22]
 801173a:	8abb      	ldrh	r3, [r7, #20]
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	b29b      	uxth	r3, r3
 8011740:	e000      	b.n	8011744 <tcp_eff_send_mss_netif+0x50>
 8011742:	2300      	movs	r3, #0
 8011744:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011746:	8a7a      	ldrh	r2, [r7, #18]
 8011748:	89fb      	ldrh	r3, [r7, #14]
 801174a:	4293      	cmp	r3, r2
 801174c:	bf28      	it	cs
 801174e:	4613      	movcs	r3, r2
 8011750:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011752:	89fb      	ldrh	r3, [r7, #14]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3718      	adds	r7, #24
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	0801d620 	.word	0x0801d620
 8011760:	0801dd2c 	.word	0x0801dd2c
 8011764:	0801d664 	.word	0x0801d664

08011768 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d119      	bne.n	80117b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801177c:	4b10      	ldr	r3, [pc, #64]	@ (80117c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801177e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011782:	4910      	ldr	r1, [pc, #64]	@ (80117c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011784:	4810      	ldr	r0, [pc, #64]	@ (80117c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011786:	f008 f8b5 	bl	80198f4 <iprintf>

  while (pcb != NULL) {
 801178a:	e011      	b.n	80117b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	429a      	cmp	r2, r3
 8011796:	d108      	bne.n	80117aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801179e:	68f8      	ldr	r0, [r7, #12]
 80117a0:	f7fe fd4e 	bl	8010240 <tcp_abort>
      pcb = next;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	60fb      	str	r3, [r7, #12]
 80117a8:	e002      	b.n	80117b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d1ea      	bne.n	801178c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80117b6:	bf00      	nop
 80117b8:	bf00      	nop
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	0801d620 	.word	0x0801d620
 80117c4:	0801dd54 	.word	0x0801dd54
 80117c8:	0801d664 	.word	0x0801d664

080117cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b084      	sub	sp, #16
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d02a      	beq.n	8011832 <tcp_netif_ip_addr_changed+0x66>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d026      	beq.n	8011832 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80117e4:	4b15      	ldr	r3, [pc, #84]	@ (801183c <tcp_netif_ip_addr_changed+0x70>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4619      	mov	r1, r3
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f7ff ffbc 	bl	8011768 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80117f0:	4b13      	ldr	r3, [pc, #76]	@ (8011840 <tcp_netif_ip_addr_changed+0x74>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4619      	mov	r1, r3
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff ffb6 	bl	8011768 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d017      	beq.n	8011832 <tcp_netif_ip_addr_changed+0x66>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d013      	beq.n	8011832 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801180a:	4b0e      	ldr	r3, [pc, #56]	@ (8011844 <tcp_netif_ip_addr_changed+0x78>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	60fb      	str	r3, [r7, #12]
 8011810:	e00c      	b.n	801182c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	429a      	cmp	r2, r3
 801181c:	d103      	bne.n	8011826 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1ef      	bne.n	8011812 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011832:	bf00      	nop
 8011834:	3710      	adds	r7, #16
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	20011d24 	.word	0x20011d24
 8011840:	20011d1c 	.word	0x20011d1c
 8011844:	20011d20 	.word	0x20011d20

08011848 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011854:	2b00      	cmp	r3, #0
 8011856:	d007      	beq.n	8011868 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801185c:	4618      	mov	r0, r3
 801185e:	f7ff fb6f 	bl	8010f40 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2200      	movs	r2, #0
 8011866:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011868:	bf00      	nop
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}

08011870 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011870:	b590      	push	{r4, r7, lr}
 8011872:	b08d      	sub	sp, #52	@ 0x34
 8011874:	af04      	add	r7, sp, #16
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d105      	bne.n	801188c <tcp_input+0x1c>
 8011880:	4b9b      	ldr	r3, [pc, #620]	@ (8011af0 <tcp_input+0x280>)
 8011882:	2283      	movs	r2, #131	@ 0x83
 8011884:	499b      	ldr	r1, [pc, #620]	@ (8011af4 <tcp_input+0x284>)
 8011886:	489c      	ldr	r0, [pc, #624]	@ (8011af8 <tcp_input+0x288>)
 8011888:	f008 f834 	bl	80198f4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	4a9a      	ldr	r2, [pc, #616]	@ (8011afc <tcp_input+0x28c>)
 8011892:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	895b      	ldrh	r3, [r3, #10]
 8011898:	2b13      	cmp	r3, #19
 801189a:	f240 83d1 	bls.w	8012040 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801189e:	4b98      	ldr	r3, [pc, #608]	@ (8011b00 <tcp_input+0x290>)
 80118a0:	695b      	ldr	r3, [r3, #20]
 80118a2:	4a97      	ldr	r2, [pc, #604]	@ (8011b00 <tcp_input+0x290>)
 80118a4:	6812      	ldr	r2, [r2, #0]
 80118a6:	4611      	mov	r1, r2
 80118a8:	4618      	mov	r0, r3
 80118aa:	f006 f9df 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f040 83c7 	bne.w	8012044 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80118b6:	4b92      	ldr	r3, [pc, #584]	@ (8011b00 <tcp_input+0x290>)
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80118be:	2be0      	cmp	r3, #224	@ 0xe0
 80118c0:	f000 83c0 	beq.w	8012044 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80118c4:	4b8d      	ldr	r3, [pc, #564]	@ (8011afc <tcp_input+0x28c>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	899b      	ldrh	r3, [r3, #12]
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fc fb1b 	bl	800df08 <lwip_htons>
 80118d2:	4603      	mov	r3, r0
 80118d4:	0b1b      	lsrs	r3, r3, #12
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80118de:	7cbb      	ldrb	r3, [r7, #18]
 80118e0:	2b13      	cmp	r3, #19
 80118e2:	f240 83b1 	bls.w	8012048 <tcp_input+0x7d8>
 80118e6:	7cbb      	ldrb	r3, [r7, #18]
 80118e8:	b29a      	uxth	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	891b      	ldrh	r3, [r3, #8]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	f200 83aa 	bhi.w	8012048 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80118f4:	7cbb      	ldrb	r3, [r7, #18]
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	3b14      	subs	r3, #20
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	4b81      	ldr	r3, [pc, #516]	@ (8011b04 <tcp_input+0x294>)
 80118fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011900:	4b81      	ldr	r3, [pc, #516]	@ (8011b08 <tcp_input+0x298>)
 8011902:	2200      	movs	r2, #0
 8011904:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	895a      	ldrh	r2, [r3, #10]
 801190a:	7cbb      	ldrb	r3, [r7, #18]
 801190c:	b29b      	uxth	r3, r3
 801190e:	429a      	cmp	r2, r3
 8011910:	d309      	bcc.n	8011926 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011912:	4b7c      	ldr	r3, [pc, #496]	@ (8011b04 <tcp_input+0x294>)
 8011914:	881a      	ldrh	r2, [r3, #0]
 8011916:	4b7d      	ldr	r3, [pc, #500]	@ (8011b0c <tcp_input+0x29c>)
 8011918:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801191a:	7cbb      	ldrb	r3, [r7, #18]
 801191c:	4619      	mov	r1, r3
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7fd fe18 	bl	800f554 <pbuf_remove_header>
 8011924:	e04e      	b.n	80119c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d105      	bne.n	801193a <tcp_input+0xca>
 801192e:	4b70      	ldr	r3, [pc, #448]	@ (8011af0 <tcp_input+0x280>)
 8011930:	22c2      	movs	r2, #194	@ 0xc2
 8011932:	4977      	ldr	r1, [pc, #476]	@ (8011b10 <tcp_input+0x2a0>)
 8011934:	4870      	ldr	r0, [pc, #448]	@ (8011af8 <tcp_input+0x288>)
 8011936:	f007 ffdd 	bl	80198f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801193a:	2114      	movs	r1, #20
 801193c:	6878      	ldr	r0, [r7, #4]
 801193e:	f7fd fe09 	bl	800f554 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	895a      	ldrh	r2, [r3, #10]
 8011946:	4b71      	ldr	r3, [pc, #452]	@ (8011b0c <tcp_input+0x29c>)
 8011948:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801194a:	4b6e      	ldr	r3, [pc, #440]	@ (8011b04 <tcp_input+0x294>)
 801194c:	881a      	ldrh	r2, [r3, #0]
 801194e:	4b6f      	ldr	r3, [pc, #444]	@ (8011b0c <tcp_input+0x29c>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011956:	4b6d      	ldr	r3, [pc, #436]	@ (8011b0c <tcp_input+0x29c>)
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	4619      	mov	r1, r3
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7fd fdf9 	bl	800f554 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	895b      	ldrh	r3, [r3, #10]
 8011968:	8a3a      	ldrh	r2, [r7, #16]
 801196a:	429a      	cmp	r2, r3
 801196c:	f200 836e 	bhi.w	801204c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	4a64      	ldr	r2, [pc, #400]	@ (8011b08 <tcp_input+0x298>)
 8011978:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	8a3a      	ldrh	r2, [r7, #16]
 8011980:	4611      	mov	r1, r2
 8011982:	4618      	mov	r0, r3
 8011984:	f7fd fde6 	bl	800f554 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	891a      	ldrh	r2, [r3, #8]
 801198c:	8a3b      	ldrh	r3, [r7, #16]
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	b29a      	uxth	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	895b      	ldrh	r3, [r3, #10]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d005      	beq.n	80119aa <tcp_input+0x13a>
 801199e:	4b54      	ldr	r3, [pc, #336]	@ (8011af0 <tcp_input+0x280>)
 80119a0:	22df      	movs	r2, #223	@ 0xdf
 80119a2:	495c      	ldr	r1, [pc, #368]	@ (8011b14 <tcp_input+0x2a4>)
 80119a4:	4854      	ldr	r0, [pc, #336]	@ (8011af8 <tcp_input+0x288>)
 80119a6:	f007 ffa5 	bl	80198f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	891a      	ldrh	r2, [r3, #8]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	891b      	ldrh	r3, [r3, #8]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d005      	beq.n	80119c4 <tcp_input+0x154>
 80119b8:	4b4d      	ldr	r3, [pc, #308]	@ (8011af0 <tcp_input+0x280>)
 80119ba:	22e0      	movs	r2, #224	@ 0xe0
 80119bc:	4956      	ldr	r1, [pc, #344]	@ (8011b18 <tcp_input+0x2a8>)
 80119be:	484e      	ldr	r0, [pc, #312]	@ (8011af8 <tcp_input+0x288>)
 80119c0:	f007 ff98 	bl	80198f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80119c4:	4b4d      	ldr	r3, [pc, #308]	@ (8011afc <tcp_input+0x28c>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4a4b      	ldr	r2, [pc, #300]	@ (8011afc <tcp_input+0x28c>)
 80119ce:	6814      	ldr	r4, [r2, #0]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7fc fa99 	bl	800df08 <lwip_htons>
 80119d6:	4603      	mov	r3, r0
 80119d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80119da:	4b48      	ldr	r3, [pc, #288]	@ (8011afc <tcp_input+0x28c>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	885b      	ldrh	r3, [r3, #2]
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4a46      	ldr	r2, [pc, #280]	@ (8011afc <tcp_input+0x28c>)
 80119e4:	6814      	ldr	r4, [r2, #0]
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fc fa8e 	bl	800df08 <lwip_htons>
 80119ec:	4603      	mov	r3, r0
 80119ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80119f0:	4b42      	ldr	r3, [pc, #264]	@ (8011afc <tcp_input+0x28c>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	685b      	ldr	r3, [r3, #4]
 80119f6:	4a41      	ldr	r2, [pc, #260]	@ (8011afc <tcp_input+0x28c>)
 80119f8:	6814      	ldr	r4, [r2, #0]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fc fa99 	bl	800df32 <lwip_htonl>
 8011a00:	4603      	mov	r3, r0
 8011a02:	6063      	str	r3, [r4, #4]
 8011a04:	6863      	ldr	r3, [r4, #4]
 8011a06:	4a45      	ldr	r2, [pc, #276]	@ (8011b1c <tcp_input+0x2ac>)
 8011a08:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8011afc <tcp_input+0x28c>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	689b      	ldr	r3, [r3, #8]
 8011a10:	4a3a      	ldr	r2, [pc, #232]	@ (8011afc <tcp_input+0x28c>)
 8011a12:	6814      	ldr	r4, [r2, #0]
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7fc fa8c 	bl	800df32 <lwip_htonl>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	60a3      	str	r3, [r4, #8]
 8011a1e:	68a3      	ldr	r3, [r4, #8]
 8011a20:	4a3f      	ldr	r2, [pc, #252]	@ (8011b20 <tcp_input+0x2b0>)
 8011a22:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011a24:	4b35      	ldr	r3, [pc, #212]	@ (8011afc <tcp_input+0x28c>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	89db      	ldrh	r3, [r3, #14]
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	4a33      	ldr	r2, [pc, #204]	@ (8011afc <tcp_input+0x28c>)
 8011a2e:	6814      	ldr	r4, [r2, #0]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fc fa69 	bl	800df08 <lwip_htons>
 8011a36:	4603      	mov	r3, r0
 8011a38:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011a3a:	4b30      	ldr	r3, [pc, #192]	@ (8011afc <tcp_input+0x28c>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	899b      	ldrh	r3, [r3, #12]
 8011a40:	b29b      	uxth	r3, r3
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fc fa60 	bl	800df08 <lwip_htons>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	4b34      	ldr	r3, [pc, #208]	@ (8011b24 <tcp_input+0x2b4>)
 8011a54:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	891a      	ldrh	r2, [r3, #8]
 8011a5a:	4b33      	ldr	r3, [pc, #204]	@ (8011b28 <tcp_input+0x2b8>)
 8011a5c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011a5e:	4b31      	ldr	r3, [pc, #196]	@ (8011b24 <tcp_input+0x2b4>)
 8011a60:	781b      	ldrb	r3, [r3, #0]
 8011a62:	f003 0303 	and.w	r3, r3, #3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d00c      	beq.n	8011a84 <tcp_input+0x214>
    tcplen++;
 8011a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b28 <tcp_input+0x2b8>)
 8011a6c:	881b      	ldrh	r3, [r3, #0]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	b29a      	uxth	r2, r3
 8011a72:	4b2d      	ldr	r3, [pc, #180]	@ (8011b28 <tcp_input+0x2b8>)
 8011a74:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	891a      	ldrh	r2, [r3, #8]
 8011a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8011b28 <tcp_input+0x2b8>)
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	f200 82e6 	bhi.w	8012050 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011a84:	2300      	movs	r3, #0
 8011a86:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a88:	4b28      	ldr	r3, [pc, #160]	@ (8011b2c <tcp_input+0x2bc>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	61fb      	str	r3, [r7, #28]
 8011a8e:	e09d      	b.n	8011bcc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	7d1b      	ldrb	r3, [r3, #20]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d105      	bne.n	8011aa4 <tcp_input+0x234>
 8011a98:	4b15      	ldr	r3, [pc, #84]	@ (8011af0 <tcp_input+0x280>)
 8011a9a:	22fb      	movs	r2, #251	@ 0xfb
 8011a9c:	4924      	ldr	r1, [pc, #144]	@ (8011b30 <tcp_input+0x2c0>)
 8011a9e:	4816      	ldr	r0, [pc, #88]	@ (8011af8 <tcp_input+0x288>)
 8011aa0:	f007 ff28 	bl	80198f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	7d1b      	ldrb	r3, [r3, #20]
 8011aa8:	2b0a      	cmp	r3, #10
 8011aaa:	d105      	bne.n	8011ab8 <tcp_input+0x248>
 8011aac:	4b10      	ldr	r3, [pc, #64]	@ (8011af0 <tcp_input+0x280>)
 8011aae:	22fc      	movs	r2, #252	@ 0xfc
 8011ab0:	4920      	ldr	r1, [pc, #128]	@ (8011b34 <tcp_input+0x2c4>)
 8011ab2:	4811      	ldr	r0, [pc, #68]	@ (8011af8 <tcp_input+0x288>)
 8011ab4:	f007 ff1e 	bl	80198f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011ab8:	69fb      	ldr	r3, [r7, #28]
 8011aba:	7d1b      	ldrb	r3, [r3, #20]
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d105      	bne.n	8011acc <tcp_input+0x25c>
 8011ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8011af0 <tcp_input+0x280>)
 8011ac2:	22fd      	movs	r2, #253	@ 0xfd
 8011ac4:	491c      	ldr	r1, [pc, #112]	@ (8011b38 <tcp_input+0x2c8>)
 8011ac6:	480c      	ldr	r0, [pc, #48]	@ (8011af8 <tcp_input+0x288>)
 8011ac8:	f007 ff14 	bl	80198f4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	7a1b      	ldrb	r3, [r3, #8]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d033      	beq.n	8011b3c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	7a1a      	ldrb	r2, [r3, #8]
 8011ad8:	4b09      	ldr	r3, [pc, #36]	@ (8011b00 <tcp_input+0x290>)
 8011ada:	685b      	ldr	r3, [r3, #4]
 8011adc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d029      	beq.n	8011b3c <tcp_input+0x2cc>
      prev = pcb;
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	61bb      	str	r3, [r7, #24]
      continue;
 8011aec:	e06b      	b.n	8011bc6 <tcp_input+0x356>
 8011aee:	bf00      	nop
 8011af0:	0801dd88 	.word	0x0801dd88
 8011af4:	0801ddbc 	.word	0x0801ddbc
 8011af8:	0801ddd4 	.word	0x0801ddd4
 8011afc:	20011d40 	.word	0x20011d40
 8011b00:	2000c404 	.word	0x2000c404
 8011b04:	20011d44 	.word	0x20011d44
 8011b08:	20011d48 	.word	0x20011d48
 8011b0c:	20011d46 	.word	0x20011d46
 8011b10:	0801ddfc 	.word	0x0801ddfc
 8011b14:	0801de0c 	.word	0x0801de0c
 8011b18:	0801de18 	.word	0x0801de18
 8011b1c:	20011d50 	.word	0x20011d50
 8011b20:	20011d54 	.word	0x20011d54
 8011b24:	20011d5c 	.word	0x20011d5c
 8011b28:	20011d5a 	.word	0x20011d5a
 8011b2c:	20011d24 	.word	0x20011d24
 8011b30:	0801de38 	.word	0x0801de38
 8011b34:	0801de60 	.word	0x0801de60
 8011b38:	0801de8c 	.word	0x0801de8c
    }

    if (pcb->remote_port == tcphdr->src &&
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	8b1a      	ldrh	r2, [r3, #24]
 8011b40:	4b72      	ldr	r3, [pc, #456]	@ (8011d0c <tcp_input+0x49c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d13a      	bne.n	8011bc2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	8ada      	ldrh	r2, [r3, #22]
 8011b50:	4b6e      	ldr	r3, [pc, #440]	@ (8011d0c <tcp_input+0x49c>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	885b      	ldrh	r3, [r3, #2]
 8011b56:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d132      	bne.n	8011bc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	4b6b      	ldr	r3, [pc, #428]	@ (8011d10 <tcp_input+0x4a0>)
 8011b62:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d12c      	bne.n	8011bc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	681a      	ldr	r2, [r3, #0]
 8011b6c:	4b68      	ldr	r3, [pc, #416]	@ (8011d10 <tcp_input+0x4a0>)
 8011b6e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b70:	429a      	cmp	r2, r3
 8011b72:	d126      	bne.n	8011bc2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	68db      	ldr	r3, [r3, #12]
 8011b78:	69fa      	ldr	r2, [r7, #28]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d106      	bne.n	8011b8c <tcp_input+0x31c>
 8011b7e:	4b65      	ldr	r3, [pc, #404]	@ (8011d14 <tcp_input+0x4a4>)
 8011b80:	f240 120d 	movw	r2, #269	@ 0x10d
 8011b84:	4964      	ldr	r1, [pc, #400]	@ (8011d18 <tcp_input+0x4a8>)
 8011b86:	4865      	ldr	r0, [pc, #404]	@ (8011d1c <tcp_input+0x4ac>)
 8011b88:	f007 feb4 	bl	80198f4 <iprintf>
      if (prev != NULL) {
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d00a      	beq.n	8011ba8 <tcp_input+0x338>
        prev->next = pcb->next;
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	68da      	ldr	r2, [r3, #12]
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011b9a:	4b61      	ldr	r3, [pc, #388]	@ (8011d20 <tcp_input+0x4b0>)
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8011d20 <tcp_input+0x4b0>)
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	69fa      	ldr	r2, [r7, #28]
 8011bae:	429a      	cmp	r2, r3
 8011bb0:	d111      	bne.n	8011bd6 <tcp_input+0x366>
 8011bb2:	4b58      	ldr	r3, [pc, #352]	@ (8011d14 <tcp_input+0x4a4>)
 8011bb4:	f240 1215 	movw	r2, #277	@ 0x115
 8011bb8:	495a      	ldr	r1, [pc, #360]	@ (8011d24 <tcp_input+0x4b4>)
 8011bba:	4858      	ldr	r0, [pc, #352]	@ (8011d1c <tcp_input+0x4ac>)
 8011bbc:	f007 fe9a 	bl	80198f4 <iprintf>
      break;
 8011bc0:	e009      	b.n	8011bd6 <tcp_input+0x366>
    }
    prev = pcb;
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	61fb      	str	r3, [r7, #28]
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f47f af5e 	bne.w	8011a90 <tcp_input+0x220>
 8011bd4:	e000      	b.n	8011bd8 <tcp_input+0x368>
      break;
 8011bd6:	bf00      	nop
  }

  if (pcb == NULL) {
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f040 80aa 	bne.w	8011d34 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011be0:	4b51      	ldr	r3, [pc, #324]	@ (8011d28 <tcp_input+0x4b8>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	61fb      	str	r3, [r7, #28]
 8011be6:	e03f      	b.n	8011c68 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	7d1b      	ldrb	r3, [r3, #20]
 8011bec:	2b0a      	cmp	r3, #10
 8011bee:	d006      	beq.n	8011bfe <tcp_input+0x38e>
 8011bf0:	4b48      	ldr	r3, [pc, #288]	@ (8011d14 <tcp_input+0x4a4>)
 8011bf2:	f240 121f 	movw	r2, #287	@ 0x11f
 8011bf6:	494d      	ldr	r1, [pc, #308]	@ (8011d2c <tcp_input+0x4bc>)
 8011bf8:	4848      	ldr	r0, [pc, #288]	@ (8011d1c <tcp_input+0x4ac>)
 8011bfa:	f007 fe7b 	bl	80198f4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	7a1b      	ldrb	r3, [r3, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d009      	beq.n	8011c1a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c06:	69fb      	ldr	r3, [r7, #28]
 8011c08:	7a1a      	ldrb	r2, [r3, #8]
 8011c0a:	4b41      	ldr	r3, [pc, #260]	@ (8011d10 <tcp_input+0x4a0>)
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c12:	3301      	adds	r3, #1
 8011c14:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d122      	bne.n	8011c60 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	8b1a      	ldrh	r2, [r3, #24]
 8011c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8011d0c <tcp_input+0x49c>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	881b      	ldrh	r3, [r3, #0]
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d11b      	bne.n	8011c62 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	8ada      	ldrh	r2, [r3, #22]
 8011c2e:	4b37      	ldr	r3, [pc, #220]	@ (8011d0c <tcp_input+0x49c>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	885b      	ldrh	r3, [r3, #2]
 8011c34:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d113      	bne.n	8011c62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	685a      	ldr	r2, [r3, #4]
 8011c3e:	4b34      	ldr	r3, [pc, #208]	@ (8011d10 <tcp_input+0x4a0>)
 8011c40:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d10d      	bne.n	8011c62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	681a      	ldr	r2, [r3, #0]
 8011c4a:	4b31      	ldr	r3, [pc, #196]	@ (8011d10 <tcp_input+0x4a0>)
 8011c4c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d107      	bne.n	8011c62 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011c52:	69f8      	ldr	r0, [r7, #28]
 8011c54:	f000 fb56 	bl	8012304 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f7fd fd01 	bl	800f660 <pbuf_free>
        return;
 8011c5e:	e1fd      	b.n	801205c <tcp_input+0x7ec>
        continue;
 8011c60:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	68db      	ldr	r3, [r3, #12]
 8011c66:	61fb      	str	r3, [r7, #28]
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1bc      	bne.n	8011be8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c72:	4b2f      	ldr	r3, [pc, #188]	@ (8011d30 <tcp_input+0x4c0>)
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	617b      	str	r3, [r7, #20]
 8011c78:	e02a      	b.n	8011cd0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	7a1b      	ldrb	r3, [r3, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00c      	beq.n	8011c9c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	7a1a      	ldrb	r2, [r3, #8]
 8011c86:	4b22      	ldr	r3, [pc, #136]	@ (8011d10 <tcp_input+0x4a0>)
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c8e:	3301      	adds	r3, #1
 8011c90:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d002      	beq.n	8011c9c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	61bb      	str	r3, [r7, #24]
        continue;
 8011c9a:	e016      	b.n	8011cca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	8ada      	ldrh	r2, [r3, #22]
 8011ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8011d0c <tcp_input+0x49c>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	885b      	ldrh	r3, [r3, #2]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d10c      	bne.n	8011cc6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	681a      	ldr	r2, [r3, #0]
 8011cb0:	4b17      	ldr	r3, [pc, #92]	@ (8011d10 <tcp_input+0x4a0>)
 8011cb2:	695b      	ldr	r3, [r3, #20]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d00f      	beq.n	8011cd8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00d      	beq.n	8011cda <tcp_input+0x46a>
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d009      	beq.n	8011cda <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d1d1      	bne.n	8011c7a <tcp_input+0x40a>
 8011cd6:	e000      	b.n	8011cda <tcp_input+0x46a>
            break;
 8011cd8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d029      	beq.n	8011d34 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011ce0:	69bb      	ldr	r3, [r7, #24]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00a      	beq.n	8011cfc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	68da      	ldr	r2, [r3, #12]
 8011cea:	69bb      	ldr	r3, [r7, #24]
 8011cec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011cee:	4b10      	ldr	r3, [pc, #64]	@ (8011d30 <tcp_input+0x4c0>)
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8011d30 <tcp_input+0x4c0>)
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011cfc:	6978      	ldr	r0, [r7, #20]
 8011cfe:	f000 fa03 	bl	8012108 <tcp_listen_input>
      }
      pbuf_free(p);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f7fd fcac 	bl	800f660 <pbuf_free>
      return;
 8011d08:	e1a8      	b.n	801205c <tcp_input+0x7ec>
 8011d0a:	bf00      	nop
 8011d0c:	20011d40 	.word	0x20011d40
 8011d10:	2000c404 	.word	0x2000c404
 8011d14:	0801dd88 	.word	0x0801dd88
 8011d18:	0801deb4 	.word	0x0801deb4
 8011d1c:	0801ddd4 	.word	0x0801ddd4
 8011d20:	20011d24 	.word	0x20011d24
 8011d24:	0801dee0 	.word	0x0801dee0
 8011d28:	20011d28 	.word	0x20011d28
 8011d2c:	0801df0c 	.word	0x0801df0c
 8011d30:	20011d20 	.word	0x20011d20
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 8158 	beq.w	8011fec <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011d3c:	4b95      	ldr	r3, [pc, #596]	@ (8011f94 <tcp_input+0x724>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	891a      	ldrh	r2, [r3, #8]
 8011d46:	4b93      	ldr	r3, [pc, #588]	@ (8011f94 <tcp_input+0x724>)
 8011d48:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011d4a:	4a92      	ldr	r2, [pc, #584]	@ (8011f94 <tcp_input+0x724>)
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011d50:	4b91      	ldr	r3, [pc, #580]	@ (8011f98 <tcp_input+0x728>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	4a8f      	ldr	r2, [pc, #572]	@ (8011f94 <tcp_input+0x724>)
 8011d56:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011d58:	4b90      	ldr	r3, [pc, #576]	@ (8011f9c <tcp_input+0x72c>)
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011d5e:	4b90      	ldr	r3, [pc, #576]	@ (8011fa0 <tcp_input+0x730>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011d64:	4b8f      	ldr	r3, [pc, #572]	@ (8011fa4 <tcp_input+0x734>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011d6a:	4b8f      	ldr	r3, [pc, #572]	@ (8011fa8 <tcp_input+0x738>)
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	f003 0308 	and.w	r3, r3, #8
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d006      	beq.n	8011d84 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	7b5b      	ldrb	r3, [r3, #13]
 8011d7a:	f043 0301 	orr.w	r3, r3, #1
 8011d7e:	b2da      	uxtb	r2, r3
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d017      	beq.n	8011dbc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d8c:	69f8      	ldr	r0, [r7, #28]
 8011d8e:	f7ff f85b 	bl	8010e48 <tcp_process_refused_data>
 8011d92:	4603      	mov	r3, r0
 8011d94:	f113 0f0d 	cmn.w	r3, #13
 8011d98:	d007      	beq.n	8011daa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00c      	beq.n	8011dbc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011da2:	4b82      	ldr	r3, [pc, #520]	@ (8011fac <tcp_input+0x73c>)
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d008      	beq.n	8011dbc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	f040 80e3 	bne.w	8011f7a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011db4:	69f8      	ldr	r0, [r7, #28]
 8011db6:	f003 fdff 	bl	80159b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011dba:	e0de      	b.n	8011f7a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011dbc:	4a7c      	ldr	r2, [pc, #496]	@ (8011fb0 <tcp_input+0x740>)
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011dc2:	69f8      	ldr	r0, [r7, #28]
 8011dc4:	f000 fb18 	bl	80123f8 <tcp_process>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011dcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011dd0:	f113 0f0d 	cmn.w	r3, #13
 8011dd4:	f000 80d3 	beq.w	8011f7e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011dd8:	4b71      	ldr	r3, [pc, #452]	@ (8011fa0 <tcp_input+0x730>)
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	f003 0308 	and.w	r3, r3, #8
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d015      	beq.n	8011e10 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d008      	beq.n	8011e00 <tcp_input+0x590>
 8011dee:	69fb      	ldr	r3, [r7, #28]
 8011df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011df4:	69fa      	ldr	r2, [r7, #28]
 8011df6:	6912      	ldr	r2, [r2, #16]
 8011df8:	f06f 010d 	mvn.w	r1, #13
 8011dfc:	4610      	mov	r0, r2
 8011dfe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011e00:	69f9      	ldr	r1, [r7, #28]
 8011e02:	486c      	ldr	r0, [pc, #432]	@ (8011fb4 <tcp_input+0x744>)
 8011e04:	f7ff fbbc 	bl	8011580 <tcp_pcb_remove>
        tcp_free(pcb);
 8011e08:	69f8      	ldr	r0, [r7, #28]
 8011e0a:	f7fd fed5 	bl	800fbb8 <tcp_free>
 8011e0e:	e0da      	b.n	8011fc6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011e14:	4b63      	ldr	r3, [pc, #396]	@ (8011fa4 <tcp_input+0x734>)
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d01d      	beq.n	8011e58 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011e1c:	4b61      	ldr	r3, [pc, #388]	@ (8011fa4 <tcp_input+0x734>)
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d00a      	beq.n	8011e42 <tcp_input+0x5d2>
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e32:	69fa      	ldr	r2, [r7, #28]
 8011e34:	6910      	ldr	r0, [r2, #16]
 8011e36:	89fa      	ldrh	r2, [r7, #14]
 8011e38:	69f9      	ldr	r1, [r7, #28]
 8011e3a:	4798      	blx	r3
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	74fb      	strb	r3, [r7, #19]
 8011e40:	e001      	b.n	8011e46 <tcp_input+0x5d6>
 8011e42:	2300      	movs	r3, #0
 8011e44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011e46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e4a:	f113 0f0d 	cmn.w	r3, #13
 8011e4e:	f000 8098 	beq.w	8011f82 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011e52:	4b54      	ldr	r3, [pc, #336]	@ (8011fa4 <tcp_input+0x734>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011e58:	69f8      	ldr	r0, [r7, #28]
 8011e5a:	f000 f915 	bl	8012088 <tcp_input_delayed_close>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	f040 8090 	bne.w	8011f86 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011e66:	4b4d      	ldr	r3, [pc, #308]	@ (8011f9c <tcp_input+0x72c>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d041      	beq.n	8011ef2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d006      	beq.n	8011e84 <tcp_input+0x614>
 8011e76:	4b50      	ldr	r3, [pc, #320]	@ (8011fb8 <tcp_input+0x748>)
 8011e78:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e7c:	494f      	ldr	r1, [pc, #316]	@ (8011fbc <tcp_input+0x74c>)
 8011e7e:	4850      	ldr	r0, [pc, #320]	@ (8011fc0 <tcp_input+0x750>)
 8011e80:	f007 fd38 	bl	80198f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	8b5b      	ldrh	r3, [r3, #26]
 8011e88:	f003 0310 	and.w	r3, r3, #16
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d008      	beq.n	8011ea2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011e90:	4b42      	ldr	r3, [pc, #264]	@ (8011f9c <tcp_input+0x72c>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fd fbe3 	bl	800f660 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011e9a:	69f8      	ldr	r0, [r7, #28]
 8011e9c:	f7fe f9d0 	bl	8010240 <tcp_abort>
            goto aborted;
 8011ea0:	e091      	b.n	8011fc6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00c      	beq.n	8011ec6 <tcp_input+0x656>
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	6918      	ldr	r0, [r3, #16]
 8011eb6:	4b39      	ldr	r3, [pc, #228]	@ (8011f9c <tcp_input+0x72c>)
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	69f9      	ldr	r1, [r7, #28]
 8011ebe:	47a0      	blx	r4
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	74fb      	strb	r3, [r7, #19]
 8011ec4:	e008      	b.n	8011ed8 <tcp_input+0x668>
 8011ec6:	4b35      	ldr	r3, [pc, #212]	@ (8011f9c <tcp_input+0x72c>)
 8011ec8:	681a      	ldr	r2, [r3, #0]
 8011eca:	2300      	movs	r3, #0
 8011ecc:	69f9      	ldr	r1, [r7, #28]
 8011ece:	2000      	movs	r0, #0
 8011ed0:	f7ff f890 	bl	8010ff4 <tcp_recv_null>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011ed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011edc:	f113 0f0d 	cmn.w	r3, #13
 8011ee0:	d053      	beq.n	8011f8a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011ee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d003      	beq.n	8011ef2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011eea:	4b2c      	ldr	r3, [pc, #176]	@ (8011f9c <tcp_input+0x72c>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8011fa0 <tcp_input+0x730>)
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d030      	beq.n	8011f60 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d009      	beq.n	8011f1a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f0a:	7b5a      	ldrb	r2, [r3, #13]
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f10:	f042 0220 	orr.w	r2, r2, #32
 8011f14:	b2d2      	uxtb	r2, r2
 8011f16:	735a      	strb	r2, [r3, #13]
 8011f18:	e022      	b.n	8011f60 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f1e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011f22:	d005      	beq.n	8011f30 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011f24:	69fb      	ldr	r3, [r7, #28]
 8011f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f28:	3301      	adds	r3, #1
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00b      	beq.n	8011f52 <tcp_input+0x6e2>
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	6918      	ldr	r0, [r3, #16]
 8011f44:	2300      	movs	r3, #0
 8011f46:	2200      	movs	r2, #0
 8011f48:	69f9      	ldr	r1, [r7, #28]
 8011f4a:	47a0      	blx	r4
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	74fb      	strb	r3, [r7, #19]
 8011f50:	e001      	b.n	8011f56 <tcp_input+0x6e6>
 8011f52:	2300      	movs	r3, #0
 8011f54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011f56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f5a:	f113 0f0d 	cmn.w	r3, #13
 8011f5e:	d016      	beq.n	8011f8e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011f60:	4b13      	ldr	r3, [pc, #76]	@ (8011fb0 <tcp_input+0x740>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011f66:	69f8      	ldr	r0, [r7, #28]
 8011f68:	f000 f88e 	bl	8012088 <tcp_input_delayed_close>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d128      	bne.n	8011fc4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011f72:	69f8      	ldr	r0, [r7, #28]
 8011f74:	f002 ff1a 	bl	8014dac <tcp_output>
 8011f78:	e025      	b.n	8011fc6 <tcp_input+0x756>
        goto aborted;
 8011f7a:	bf00      	nop
 8011f7c:	e023      	b.n	8011fc6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011f7e:	bf00      	nop
 8011f80:	e021      	b.n	8011fc6 <tcp_input+0x756>
              goto aborted;
 8011f82:	bf00      	nop
 8011f84:	e01f      	b.n	8011fc6 <tcp_input+0x756>
          goto aborted;
 8011f86:	bf00      	nop
 8011f88:	e01d      	b.n	8011fc6 <tcp_input+0x756>
            goto aborted;
 8011f8a:	bf00      	nop
 8011f8c:	e01b      	b.n	8011fc6 <tcp_input+0x756>
              goto aborted;
 8011f8e:	bf00      	nop
 8011f90:	e019      	b.n	8011fc6 <tcp_input+0x756>
 8011f92:	bf00      	nop
 8011f94:	20011d30 	.word	0x20011d30
 8011f98:	20011d40 	.word	0x20011d40
 8011f9c:	20011d60 	.word	0x20011d60
 8011fa0:	20011d5d 	.word	0x20011d5d
 8011fa4:	20011d58 	.word	0x20011d58
 8011fa8:	20011d5c 	.word	0x20011d5c
 8011fac:	20011d5a 	.word	0x20011d5a
 8011fb0:	20011d64 	.word	0x20011d64
 8011fb4:	20011d24 	.word	0x20011d24
 8011fb8:	0801dd88 	.word	0x0801dd88
 8011fbc:	0801df3c 	.word	0x0801df3c
 8011fc0:	0801ddd4 	.word	0x0801ddd4
          goto aborted;
 8011fc4:	bf00      	nop
    tcp_input_pcb = NULL;
 8011fc6:	4b27      	ldr	r3, [pc, #156]	@ (8012064 <tcp_input+0x7f4>)
 8011fc8:	2200      	movs	r2, #0
 8011fca:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011fcc:	4b26      	ldr	r3, [pc, #152]	@ (8012068 <tcp_input+0x7f8>)
 8011fce:	2200      	movs	r2, #0
 8011fd0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011fd2:	4b26      	ldr	r3, [pc, #152]	@ (801206c <tcp_input+0x7fc>)
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d03f      	beq.n	801205a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011fda:	4b24      	ldr	r3, [pc, #144]	@ (801206c <tcp_input+0x7fc>)
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fd fb3e 	bl	800f660 <pbuf_free>
      inseg.p = NULL;
 8011fe4:	4b21      	ldr	r3, [pc, #132]	@ (801206c <tcp_input+0x7fc>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011fea:	e036      	b.n	801205a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011fec:	4b20      	ldr	r3, [pc, #128]	@ (8012070 <tcp_input+0x800>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	899b      	ldrh	r3, [r3, #12]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fb ff87 	bl	800df08 <lwip_htons>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	f003 0304 	and.w	r3, r3, #4
 8012002:	2b00      	cmp	r3, #0
 8012004:	d118      	bne.n	8012038 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012006:	4b1b      	ldr	r3, [pc, #108]	@ (8012074 <tcp_input+0x804>)
 8012008:	6819      	ldr	r1, [r3, #0]
 801200a:	4b1b      	ldr	r3, [pc, #108]	@ (8012078 <tcp_input+0x808>)
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	461a      	mov	r2, r3
 8012010:	4b1a      	ldr	r3, [pc, #104]	@ (801207c <tcp_input+0x80c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012016:	4b16      	ldr	r3, [pc, #88]	@ (8012070 <tcp_input+0x800>)
 8012018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801201a:	885b      	ldrh	r3, [r3, #2]
 801201c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801201e:	4a14      	ldr	r2, [pc, #80]	@ (8012070 <tcp_input+0x800>)
 8012020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012022:	8812      	ldrh	r2, [r2, #0]
 8012024:	b292      	uxth	r2, r2
 8012026:	9202      	str	r2, [sp, #8]
 8012028:	9301      	str	r3, [sp, #4]
 801202a:	4b15      	ldr	r3, [pc, #84]	@ (8012080 <tcp_input+0x810>)
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	4b15      	ldr	r3, [pc, #84]	@ (8012084 <tcp_input+0x814>)
 8012030:	4602      	mov	r2, r0
 8012032:	2000      	movs	r0, #0
 8012034:	f003 fc6e 	bl	8015914 <tcp_rst>
    pbuf_free(p);
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f7fd fb11 	bl	800f660 <pbuf_free>
  return;
 801203e:	e00c      	b.n	801205a <tcp_input+0x7ea>
    goto dropped;
 8012040:	bf00      	nop
 8012042:	e006      	b.n	8012052 <tcp_input+0x7e2>
    goto dropped;
 8012044:	bf00      	nop
 8012046:	e004      	b.n	8012052 <tcp_input+0x7e2>
    goto dropped;
 8012048:	bf00      	nop
 801204a:	e002      	b.n	8012052 <tcp_input+0x7e2>
      goto dropped;
 801204c:	bf00      	nop
 801204e:	e000      	b.n	8012052 <tcp_input+0x7e2>
      goto dropped;
 8012050:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012052:	6878      	ldr	r0, [r7, #4]
 8012054:	f7fd fb04 	bl	800f660 <pbuf_free>
 8012058:	e000      	b.n	801205c <tcp_input+0x7ec>
  return;
 801205a:	bf00      	nop
}
 801205c:	3724      	adds	r7, #36	@ 0x24
 801205e:	46bd      	mov	sp, r7
 8012060:	bd90      	pop	{r4, r7, pc}
 8012062:	bf00      	nop
 8012064:	20011d64 	.word	0x20011d64
 8012068:	20011d60 	.word	0x20011d60
 801206c:	20011d30 	.word	0x20011d30
 8012070:	20011d40 	.word	0x20011d40
 8012074:	20011d54 	.word	0x20011d54
 8012078:	20011d5a 	.word	0x20011d5a
 801207c:	20011d50 	.word	0x20011d50
 8012080:	2000c414 	.word	0x2000c414
 8012084:	2000c418 	.word	0x2000c418

08012088 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <tcp_input_delayed_close+0x1c>
 8012096:	4b17      	ldr	r3, [pc, #92]	@ (80120f4 <tcp_input_delayed_close+0x6c>)
 8012098:	f240 225a 	movw	r2, #602	@ 0x25a
 801209c:	4916      	ldr	r1, [pc, #88]	@ (80120f8 <tcp_input_delayed_close+0x70>)
 801209e:	4817      	ldr	r0, [pc, #92]	@ (80120fc <tcp_input_delayed_close+0x74>)
 80120a0:	f007 fc28 	bl	80198f4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80120a4:	4b16      	ldr	r3, [pc, #88]	@ (8012100 <tcp_input_delayed_close+0x78>)
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	f003 0310 	and.w	r3, r3, #16
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d01c      	beq.n	80120ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	8b5b      	ldrh	r3, [r3, #26]
 80120b4:	f003 0310 	and.w	r3, r3, #16
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d10d      	bne.n	80120d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d008      	beq.n	80120d8 <tcp_input_delayed_close+0x50>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	6912      	ldr	r2, [r2, #16]
 80120d0:	f06f 010e 	mvn.w	r1, #14
 80120d4:	4610      	mov	r0, r2
 80120d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80120d8:	6879      	ldr	r1, [r7, #4]
 80120da:	480a      	ldr	r0, [pc, #40]	@ (8012104 <tcp_input_delayed_close+0x7c>)
 80120dc:	f7ff fa50 	bl	8011580 <tcp_pcb_remove>
    tcp_free(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7fd fd69 	bl	800fbb8 <tcp_free>
    return 1;
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80120ea:	2300      	movs	r3, #0
}
 80120ec:	4618      	mov	r0, r3
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	0801dd88 	.word	0x0801dd88
 80120f8:	0801df58 	.word	0x0801df58
 80120fc:	0801ddd4 	.word	0x0801ddd4
 8012100:	20011d5d 	.word	0x20011d5d
 8012104:	20011d24 	.word	0x20011d24

08012108 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012108:	b590      	push	{r4, r7, lr}
 801210a:	b08b      	sub	sp, #44	@ 0x2c
 801210c:	af04      	add	r7, sp, #16
 801210e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012110:	4b6f      	ldr	r3, [pc, #444]	@ (80122d0 <tcp_listen_input+0x1c8>)
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	f003 0304 	and.w	r3, r3, #4
 8012118:	2b00      	cmp	r3, #0
 801211a:	f040 80d2 	bne.w	80122c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d106      	bne.n	8012132 <tcp_listen_input+0x2a>
 8012124:	4b6b      	ldr	r3, [pc, #428]	@ (80122d4 <tcp_listen_input+0x1cc>)
 8012126:	f240 2281 	movw	r2, #641	@ 0x281
 801212a:	496b      	ldr	r1, [pc, #428]	@ (80122d8 <tcp_listen_input+0x1d0>)
 801212c:	486b      	ldr	r0, [pc, #428]	@ (80122dc <tcp_listen_input+0x1d4>)
 801212e:	f007 fbe1 	bl	80198f4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012132:	4b67      	ldr	r3, [pc, #412]	@ (80122d0 <tcp_listen_input+0x1c8>)
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	f003 0310 	and.w	r3, r3, #16
 801213a:	2b00      	cmp	r3, #0
 801213c:	d019      	beq.n	8012172 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801213e:	4b68      	ldr	r3, [pc, #416]	@ (80122e0 <tcp_listen_input+0x1d8>)
 8012140:	6819      	ldr	r1, [r3, #0]
 8012142:	4b68      	ldr	r3, [pc, #416]	@ (80122e4 <tcp_listen_input+0x1dc>)
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	461a      	mov	r2, r3
 8012148:	4b67      	ldr	r3, [pc, #412]	@ (80122e8 <tcp_listen_input+0x1e0>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801214e:	4b67      	ldr	r3, [pc, #412]	@ (80122ec <tcp_listen_input+0x1e4>)
 8012150:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012152:	885b      	ldrh	r3, [r3, #2]
 8012154:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012156:	4a65      	ldr	r2, [pc, #404]	@ (80122ec <tcp_listen_input+0x1e4>)
 8012158:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801215a:	8812      	ldrh	r2, [r2, #0]
 801215c:	b292      	uxth	r2, r2
 801215e:	9202      	str	r2, [sp, #8]
 8012160:	9301      	str	r3, [sp, #4]
 8012162:	4b63      	ldr	r3, [pc, #396]	@ (80122f0 <tcp_listen_input+0x1e8>)
 8012164:	9300      	str	r3, [sp, #0]
 8012166:	4b63      	ldr	r3, [pc, #396]	@ (80122f4 <tcp_listen_input+0x1ec>)
 8012168:	4602      	mov	r2, r0
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f003 fbd2 	bl	8015914 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012170:	e0a9      	b.n	80122c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012172:	4b57      	ldr	r3, [pc, #348]	@ (80122d0 <tcp_listen_input+0x1c8>)
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	f003 0302 	and.w	r3, r3, #2
 801217a:	2b00      	cmp	r3, #0
 801217c:	f000 80a3 	beq.w	80122c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	7d5b      	ldrb	r3, [r3, #21]
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff f859 	bl	801123c <tcp_alloc>
 801218a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d111      	bne.n	80121b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	699b      	ldr	r3, [r3, #24]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00a      	beq.n	80121b0 <tcp_listen_input+0xa8>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	699b      	ldr	r3, [r3, #24]
 801219e:	687a      	ldr	r2, [r7, #4]
 80121a0:	6910      	ldr	r0, [r2, #16]
 80121a2:	f04f 32ff 	mov.w	r2, #4294967295
 80121a6:	2100      	movs	r1, #0
 80121a8:	4798      	blx	r3
 80121aa:	4603      	mov	r3, r0
 80121ac:	73bb      	strb	r3, [r7, #14]
      return;
 80121ae:	e08b      	b.n	80122c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80121b0:	23f0      	movs	r3, #240	@ 0xf0
 80121b2:	73bb      	strb	r3, [r7, #14]
      return;
 80121b4:	e088      	b.n	80122c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80121b6:	4b50      	ldr	r3, [pc, #320]	@ (80122f8 <tcp_listen_input+0x1f0>)
 80121b8:	695a      	ldr	r2, [r3, #20]
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80121be:	4b4e      	ldr	r3, [pc, #312]	@ (80122f8 <tcp_listen_input+0x1f0>)
 80121c0:	691a      	ldr	r2, [r3, #16]
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8ada      	ldrh	r2, [r3, #22]
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80121ce:	4b47      	ldr	r3, [pc, #284]	@ (80122ec <tcp_listen_input+0x1e4>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	881b      	ldrh	r3, [r3, #0]
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	2203      	movs	r2, #3
 80121de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80121e0:	4b41      	ldr	r3, [pc, #260]	@ (80122e8 <tcp_listen_input+0x1e0>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80121f2:	6978      	ldr	r0, [r7, #20]
 80121f4:	f7ff fa58 	bl	80116a8 <tcp_next_iss>
 80121f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	693a      	ldr	r2, [r7, #16]
 8012204:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	693a      	ldr	r2, [r7, #16]
 801220a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	693a      	ldr	r2, [r7, #16]
 8012210:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012212:	4b35      	ldr	r3, [pc, #212]	@ (80122e8 <tcp_listen_input+0x1e0>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	1e5a      	subs	r2, r3, #1
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	691a      	ldr	r2, [r3, #16]
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	687a      	ldr	r2, [r7, #4]
 8012228:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	7a5b      	ldrb	r3, [r3, #9]
 801222e:	f003 030c 	and.w	r3, r3, #12
 8012232:	b2da      	uxtb	r2, r3
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7a1a      	ldrb	r2, [r3, #8]
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012240:	4b2e      	ldr	r3, [pc, #184]	@ (80122fc <tcp_listen_input+0x1f4>)
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	60da      	str	r2, [r3, #12]
 8012248:	4a2c      	ldr	r2, [pc, #176]	@ (80122fc <tcp_listen_input+0x1f4>)
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	6013      	str	r3, [r2, #0]
 801224e:	f003 fd23 	bl	8015c98 <tcp_timer_needed>
 8012252:	4b2b      	ldr	r3, [pc, #172]	@ (8012300 <tcp_listen_input+0x1f8>)
 8012254:	2201      	movs	r2, #1
 8012256:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012258:	6978      	ldr	r0, [r7, #20]
 801225a:	f001 fd8b 	bl	8013d74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801225e:	4b23      	ldr	r3, [pc, #140]	@ (80122ec <tcp_listen_input+0x1e4>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	89db      	ldrh	r3, [r3, #14]
 8012264:	b29a      	uxth	r2, r3
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	3304      	adds	r3, #4
 8012280:	4618      	mov	r0, r3
 8012282:	f005 fa5d 	bl	8017740 <ip4_route>
 8012286:	4601      	mov	r1, r0
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	3304      	adds	r3, #4
 801228c:	461a      	mov	r2, r3
 801228e:	4620      	mov	r0, r4
 8012290:	f7ff fa30 	bl	80116f4 <tcp_eff_send_mss_netif>
 8012294:	4603      	mov	r3, r0
 8012296:	461a      	mov	r2, r3
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801229c:	2112      	movs	r1, #18
 801229e:	6978      	ldr	r0, [r7, #20]
 80122a0:	f002 fc96 	bl	8014bd0 <tcp_enqueue_flags>
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80122a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d004      	beq.n	80122ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80122b0:	2100      	movs	r1, #0
 80122b2:	6978      	ldr	r0, [r7, #20]
 80122b4:	f7fd ff06 	bl	80100c4 <tcp_abandon>
      return;
 80122b8:	e006      	b.n	80122c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80122ba:	6978      	ldr	r0, [r7, #20]
 80122bc:	f002 fd76 	bl	8014dac <tcp_output>
  return;
 80122c0:	e001      	b.n	80122c6 <tcp_listen_input+0x1be>
    return;
 80122c2:	bf00      	nop
 80122c4:	e000      	b.n	80122c8 <tcp_listen_input+0x1c0>
  return;
 80122c6:	bf00      	nop
}
 80122c8:	371c      	adds	r7, #28
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd90      	pop	{r4, r7, pc}
 80122ce:	bf00      	nop
 80122d0:	20011d5c 	.word	0x20011d5c
 80122d4:	0801dd88 	.word	0x0801dd88
 80122d8:	0801df80 	.word	0x0801df80
 80122dc:	0801ddd4 	.word	0x0801ddd4
 80122e0:	20011d54 	.word	0x20011d54
 80122e4:	20011d5a 	.word	0x20011d5a
 80122e8:	20011d50 	.word	0x20011d50
 80122ec:	20011d40 	.word	0x20011d40
 80122f0:	2000c414 	.word	0x2000c414
 80122f4:	2000c418 	.word	0x2000c418
 80122f8:	2000c404 	.word	0x2000c404
 80122fc:	20011d24 	.word	0x20011d24
 8012300:	20011d2c 	.word	0x20011d2c

08012304 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012304:	b580      	push	{r7, lr}
 8012306:	b086      	sub	sp, #24
 8012308:	af04      	add	r7, sp, #16
 801230a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801230c:	4b2f      	ldr	r3, [pc, #188]	@ (80123cc <tcp_timewait_input+0xc8>)
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	f003 0304 	and.w	r3, r3, #4
 8012314:	2b00      	cmp	r3, #0
 8012316:	d153      	bne.n	80123c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d106      	bne.n	801232c <tcp_timewait_input+0x28>
 801231e:	4b2c      	ldr	r3, [pc, #176]	@ (80123d0 <tcp_timewait_input+0xcc>)
 8012320:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012324:	492b      	ldr	r1, [pc, #172]	@ (80123d4 <tcp_timewait_input+0xd0>)
 8012326:	482c      	ldr	r0, [pc, #176]	@ (80123d8 <tcp_timewait_input+0xd4>)
 8012328:	f007 fae4 	bl	80198f4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801232c:	4b27      	ldr	r3, [pc, #156]	@ (80123cc <tcp_timewait_input+0xc8>)
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	f003 0302 	and.w	r3, r3, #2
 8012334:	2b00      	cmp	r3, #0
 8012336:	d02a      	beq.n	801238e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012338:	4b28      	ldr	r3, [pc, #160]	@ (80123dc <tcp_timewait_input+0xd8>)
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	2b00      	cmp	r3, #0
 8012344:	db2d      	blt.n	80123a2 <tcp_timewait_input+0x9e>
 8012346:	4b25      	ldr	r3, [pc, #148]	@ (80123dc <tcp_timewait_input+0xd8>)
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801234e:	6879      	ldr	r1, [r7, #4]
 8012350:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012352:	440b      	add	r3, r1
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	dc23      	bgt.n	80123a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801235a:	4b21      	ldr	r3, [pc, #132]	@ (80123e0 <tcp_timewait_input+0xdc>)
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	4b21      	ldr	r3, [pc, #132]	@ (80123e4 <tcp_timewait_input+0xe0>)
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	461a      	mov	r2, r3
 8012364:	4b1d      	ldr	r3, [pc, #116]	@ (80123dc <tcp_timewait_input+0xd8>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801236a:	4b1f      	ldr	r3, [pc, #124]	@ (80123e8 <tcp_timewait_input+0xe4>)
 801236c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801236e:	885b      	ldrh	r3, [r3, #2]
 8012370:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012372:	4a1d      	ldr	r2, [pc, #116]	@ (80123e8 <tcp_timewait_input+0xe4>)
 8012374:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012376:	8812      	ldrh	r2, [r2, #0]
 8012378:	b292      	uxth	r2, r2
 801237a:	9202      	str	r2, [sp, #8]
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	4b1b      	ldr	r3, [pc, #108]	@ (80123ec <tcp_timewait_input+0xe8>)
 8012380:	9300      	str	r3, [sp, #0]
 8012382:	4b1b      	ldr	r3, [pc, #108]	@ (80123f0 <tcp_timewait_input+0xec>)
 8012384:	4602      	mov	r2, r0
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f003 fac4 	bl	8015914 <tcp_rst>
      return;
 801238c:	e01b      	b.n	80123c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801238e:	4b0f      	ldr	r3, [pc, #60]	@ (80123cc <tcp_timewait_input+0xc8>)
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	f003 0301 	and.w	r3, r3, #1
 8012396:	2b00      	cmp	r3, #0
 8012398:	d003      	beq.n	80123a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801239a:	4b16      	ldr	r3, [pc, #88]	@ (80123f4 <tcp_timewait_input+0xf0>)
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80123a2:	4b10      	ldr	r3, [pc, #64]	@ (80123e4 <tcp_timewait_input+0xe0>)
 80123a4:	881b      	ldrh	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00c      	beq.n	80123c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	8b5b      	ldrh	r3, [r3, #26]
 80123ae:	f043 0302 	orr.w	r3, r3, #2
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f002 fcf7 	bl	8014dac <tcp_output>
  }
  return;
 80123be:	e001      	b.n	80123c4 <tcp_timewait_input+0xc0>
    return;
 80123c0:	bf00      	nop
 80123c2:	e000      	b.n	80123c6 <tcp_timewait_input+0xc2>
  return;
 80123c4:	bf00      	nop
}
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	20011d5c 	.word	0x20011d5c
 80123d0:	0801dd88 	.word	0x0801dd88
 80123d4:	0801dfa0 	.word	0x0801dfa0
 80123d8:	0801ddd4 	.word	0x0801ddd4
 80123dc:	20011d50 	.word	0x20011d50
 80123e0:	20011d54 	.word	0x20011d54
 80123e4:	20011d5a 	.word	0x20011d5a
 80123e8:	20011d40 	.word	0x20011d40
 80123ec:	2000c414 	.word	0x2000c414
 80123f0:	2000c418 	.word	0x2000c418
 80123f4:	20011d18 	.word	0x20011d18

080123f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b08d      	sub	sp, #52	@ 0x34
 80123fc:	af04      	add	r7, sp, #16
 80123fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012404:	2300      	movs	r3, #0
 8012406:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d106      	bne.n	801241c <tcp_process+0x24>
 801240e:	4b9d      	ldr	r3, [pc, #628]	@ (8012684 <tcp_process+0x28c>)
 8012410:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012414:	499c      	ldr	r1, [pc, #624]	@ (8012688 <tcp_process+0x290>)
 8012416:	489d      	ldr	r0, [pc, #628]	@ (801268c <tcp_process+0x294>)
 8012418:	f007 fa6c 	bl	80198f4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801241c:	4b9c      	ldr	r3, [pc, #624]	@ (8012690 <tcp_process+0x298>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	f003 0304 	and.w	r3, r3, #4
 8012424:	2b00      	cmp	r3, #0
 8012426:	d04e      	beq.n	80124c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	7d1b      	ldrb	r3, [r3, #20]
 801242c:	2b02      	cmp	r3, #2
 801242e:	d108      	bne.n	8012442 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012434:	4b97      	ldr	r3, [pc, #604]	@ (8012694 <tcp_process+0x29c>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	429a      	cmp	r2, r3
 801243a:	d123      	bne.n	8012484 <tcp_process+0x8c>
        acceptable = 1;
 801243c:	2301      	movs	r3, #1
 801243e:	76fb      	strb	r3, [r7, #27]
 8012440:	e020      	b.n	8012484 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012446:	4b94      	ldr	r3, [pc, #592]	@ (8012698 <tcp_process+0x2a0>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	429a      	cmp	r2, r3
 801244c:	d102      	bne.n	8012454 <tcp_process+0x5c>
        acceptable = 1;
 801244e:	2301      	movs	r3, #1
 8012450:	76fb      	strb	r3, [r7, #27]
 8012452:	e017      	b.n	8012484 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012454:	4b90      	ldr	r3, [pc, #576]	@ (8012698 <tcp_process+0x2a0>)
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801245c:	1ad3      	subs	r3, r2, r3
 801245e:	2b00      	cmp	r3, #0
 8012460:	db10      	blt.n	8012484 <tcp_process+0x8c>
 8012462:	4b8d      	ldr	r3, [pc, #564]	@ (8012698 <tcp_process+0x2a0>)
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801246a:	6879      	ldr	r1, [r7, #4]
 801246c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801246e:	440b      	add	r3, r1
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	2b00      	cmp	r3, #0
 8012474:	dc06      	bgt.n	8012484 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8b5b      	ldrh	r3, [r3, #26]
 801247a:	f043 0302 	orr.w	r3, r3, #2
 801247e:	b29a      	uxth	r2, r3
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012484:	7efb      	ldrb	r3, [r7, #27]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d01b      	beq.n	80124c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	7d1b      	ldrb	r3, [r3, #20]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d106      	bne.n	80124a0 <tcp_process+0xa8>
 8012492:	4b7c      	ldr	r3, [pc, #496]	@ (8012684 <tcp_process+0x28c>)
 8012494:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012498:	4980      	ldr	r1, [pc, #512]	@ (801269c <tcp_process+0x2a4>)
 801249a:	487c      	ldr	r0, [pc, #496]	@ (801268c <tcp_process+0x294>)
 801249c:	f007 fa2a 	bl	80198f4 <iprintf>
      recv_flags |= TF_RESET;
 80124a0:	4b7f      	ldr	r3, [pc, #508]	@ (80126a0 <tcp_process+0x2a8>)
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	f043 0308 	orr.w	r3, r3, #8
 80124a8:	b2da      	uxtb	r2, r3
 80124aa:	4b7d      	ldr	r3, [pc, #500]	@ (80126a0 <tcp_process+0x2a8>)
 80124ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	8b5b      	ldrh	r3, [r3, #26]
 80124b2:	f023 0301 	bic.w	r3, r3, #1
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80124bc:	f06f 030d 	mvn.w	r3, #13
 80124c0:	e37a      	b.n	8012bb8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80124c2:	2300      	movs	r3, #0
 80124c4:	e378      	b.n	8012bb8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80124c6:	4b72      	ldr	r3, [pc, #456]	@ (8012690 <tcp_process+0x298>)
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	f003 0302 	and.w	r3, r3, #2
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d010      	beq.n	80124f4 <tcp_process+0xfc>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	7d1b      	ldrb	r3, [r3, #20]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d00c      	beq.n	80124f4 <tcp_process+0xfc>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	7d1b      	ldrb	r3, [r3, #20]
 80124de:	2b03      	cmp	r3, #3
 80124e0:	d008      	beq.n	80124f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	8b5b      	ldrh	r3, [r3, #26]
 80124e6:	f043 0302 	orr.w	r3, r3, #2
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80124f0:	2300      	movs	r3, #0
 80124f2:	e361      	b.n	8012bb8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	8b5b      	ldrh	r3, [r3, #26]
 80124f8:	f003 0310 	and.w	r3, r3, #16
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d103      	bne.n	8012508 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012500:	4b68      	ldr	r3, [pc, #416]	@ (80126a4 <tcp_process+0x2ac>)
 8012502:	681a      	ldr	r2, [r3, #0]
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2200      	movs	r2, #0
 8012514:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f001 fc2b 	bl	8013d74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	7d1b      	ldrb	r3, [r3, #20]
 8012522:	3b02      	subs	r3, #2
 8012524:	2b07      	cmp	r3, #7
 8012526:	f200 8337 	bhi.w	8012b98 <tcp_process+0x7a0>
 801252a:	a201      	add	r2, pc, #4	@ (adr r2, 8012530 <tcp_process+0x138>)
 801252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012530:	08012551 	.word	0x08012551
 8012534:	08012781 	.word	0x08012781
 8012538:	080128f9 	.word	0x080128f9
 801253c:	08012923 	.word	0x08012923
 8012540:	08012a47 	.word	0x08012a47
 8012544:	080128f9 	.word	0x080128f9
 8012548:	08012ad3 	.word	0x08012ad3
 801254c:	08012b63 	.word	0x08012b63
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012550:	4b4f      	ldr	r3, [pc, #316]	@ (8012690 <tcp_process+0x298>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	f003 0310 	and.w	r3, r3, #16
 8012558:	2b00      	cmp	r3, #0
 801255a:	f000 80e4 	beq.w	8012726 <tcp_process+0x32e>
 801255e:	4b4c      	ldr	r3, [pc, #304]	@ (8012690 <tcp_process+0x298>)
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	2b00      	cmp	r3, #0
 8012568:	f000 80dd 	beq.w	8012726 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	4b48      	ldr	r3, [pc, #288]	@ (8012694 <tcp_process+0x29c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	f040 80d5 	bne.w	8012726 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801257c:	4b46      	ldr	r3, [pc, #280]	@ (8012698 <tcp_process+0x2a0>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	1c5a      	adds	r2, r3, #1
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801258e:	4b41      	ldr	r3, [pc, #260]	@ (8012694 <tcp_process+0x29c>)
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012596:	4b44      	ldr	r3, [pc, #272]	@ (80126a8 <tcp_process+0x2b0>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	89db      	ldrh	r3, [r3, #14]
 801259c:	b29a      	uxth	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80125b0:	4b39      	ldr	r3, [pc, #228]	@ (8012698 <tcp_process+0x2a0>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	1e5a      	subs	r2, r3, #1
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2204      	movs	r2, #4
 80125be:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	3304      	adds	r3, #4
 80125c8:	4618      	mov	r0, r3
 80125ca:	f005 f8b9 	bl	8017740 <ip4_route>
 80125ce:	4601      	mov	r1, r0
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	3304      	adds	r3, #4
 80125d4:	461a      	mov	r2, r3
 80125d6:	4620      	mov	r0, r4
 80125d8:	f7ff f88c 	bl	80116f4 <tcp_eff_send_mss_netif>
 80125dc:	4603      	mov	r3, r0
 80125de:	461a      	mov	r2, r3
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125e8:	009a      	lsls	r2, r3, #2
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125ee:	005b      	lsls	r3, r3, #1
 80125f0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80125f4:	428b      	cmp	r3, r1
 80125f6:	bf38      	it	cc
 80125f8:	460b      	movcc	r3, r1
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d204      	bcs.n	8012608 <tcp_process+0x210>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	b29b      	uxth	r3, r3
 8012606:	e00d      	b.n	8012624 <tcp_process+0x22c>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801260c:	005b      	lsls	r3, r3, #1
 801260e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012612:	4293      	cmp	r3, r2
 8012614:	d904      	bls.n	8012620 <tcp_process+0x228>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801261a:	005b      	lsls	r3, r3, #1
 801261c:	b29b      	uxth	r3, r3
 801261e:	e001      	b.n	8012624 <tcp_process+0x22c>
 8012620:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012630:	2b00      	cmp	r3, #0
 8012632:	d106      	bne.n	8012642 <tcp_process+0x24a>
 8012634:	4b13      	ldr	r3, [pc, #76]	@ (8012684 <tcp_process+0x28c>)
 8012636:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801263a:	491c      	ldr	r1, [pc, #112]	@ (80126ac <tcp_process+0x2b4>)
 801263c:	4813      	ldr	r0, [pc, #76]	@ (801268c <tcp_process+0x294>)
 801263e:	f007 f959 	bl	80198f4 <iprintf>
        --pcb->snd_queuelen;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012648:	3b01      	subs	r3, #1
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012656:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012658:	69fb      	ldr	r3, [r7, #28]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d12a      	bne.n	80126b4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012662:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d106      	bne.n	8012678 <tcp_process+0x280>
 801266a:	4b06      	ldr	r3, [pc, #24]	@ (8012684 <tcp_process+0x28c>)
 801266c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012670:	490f      	ldr	r1, [pc, #60]	@ (80126b0 <tcp_process+0x2b8>)
 8012672:	4806      	ldr	r0, [pc, #24]	@ (801268c <tcp_process+0x294>)
 8012674:	f007 f93e 	bl	80198f4 <iprintf>
          pcb->unsent = rseg->next;
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012680:	e01c      	b.n	80126bc <tcp_process+0x2c4>
 8012682:	bf00      	nop
 8012684:	0801dd88 	.word	0x0801dd88
 8012688:	0801dfc0 	.word	0x0801dfc0
 801268c:	0801ddd4 	.word	0x0801ddd4
 8012690:	20011d5c 	.word	0x20011d5c
 8012694:	20011d54 	.word	0x20011d54
 8012698:	20011d50 	.word	0x20011d50
 801269c:	0801dfdc 	.word	0x0801dfdc
 80126a0:	20011d5d 	.word	0x20011d5d
 80126a4:	20011d18 	.word	0x20011d18
 80126a8:	20011d40 	.word	0x20011d40
 80126ac:	0801dffc 	.word	0x0801dffc
 80126b0:	0801e014 	.word	0x0801e014
        } else {
          pcb->unacked = rseg->next;
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80126bc:	69f8      	ldr	r0, [r7, #28]
 80126be:	f7fe fc54 	bl	8010f6a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d104      	bne.n	80126d4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80126d0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80126d2:	e006      	b.n	80126e2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2200      	movs	r2, #0
 80126d8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d00a      	beq.n	8012702 <tcp_process+0x30a>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80126f2:	687a      	ldr	r2, [r7, #4]
 80126f4:	6910      	ldr	r0, [r2, #16]
 80126f6:	2200      	movs	r2, #0
 80126f8:	6879      	ldr	r1, [r7, #4]
 80126fa:	4798      	blx	r3
 80126fc:	4603      	mov	r3, r0
 80126fe:	76bb      	strb	r3, [r7, #26]
 8012700:	e001      	b.n	8012706 <tcp_process+0x30e>
 8012702:	2300      	movs	r3, #0
 8012704:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012706:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801270a:	f113 0f0d 	cmn.w	r3, #13
 801270e:	d102      	bne.n	8012716 <tcp_process+0x31e>
          return ERR_ABRT;
 8012710:	f06f 030c 	mvn.w	r3, #12
 8012714:	e250      	b.n	8012bb8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	8b5b      	ldrh	r3, [r3, #26]
 801271a:	f043 0302 	orr.w	r3, r3, #2
 801271e:	b29a      	uxth	r2, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012724:	e23a      	b.n	8012b9c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012726:	4b98      	ldr	r3, [pc, #608]	@ (8012988 <tcp_process+0x590>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	f003 0310 	and.w	r3, r3, #16
 801272e:	2b00      	cmp	r3, #0
 8012730:	f000 8234 	beq.w	8012b9c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012734:	4b95      	ldr	r3, [pc, #596]	@ (801298c <tcp_process+0x594>)
 8012736:	6819      	ldr	r1, [r3, #0]
 8012738:	4b95      	ldr	r3, [pc, #596]	@ (8012990 <tcp_process+0x598>)
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	461a      	mov	r2, r3
 801273e:	4b95      	ldr	r3, [pc, #596]	@ (8012994 <tcp_process+0x59c>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012744:	4b94      	ldr	r3, [pc, #592]	@ (8012998 <tcp_process+0x5a0>)
 8012746:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012748:	885b      	ldrh	r3, [r3, #2]
 801274a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801274c:	4a92      	ldr	r2, [pc, #584]	@ (8012998 <tcp_process+0x5a0>)
 801274e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012750:	8812      	ldrh	r2, [r2, #0]
 8012752:	b292      	uxth	r2, r2
 8012754:	9202      	str	r2, [sp, #8]
 8012756:	9301      	str	r3, [sp, #4]
 8012758:	4b90      	ldr	r3, [pc, #576]	@ (801299c <tcp_process+0x5a4>)
 801275a:	9300      	str	r3, [sp, #0]
 801275c:	4b90      	ldr	r3, [pc, #576]	@ (80129a0 <tcp_process+0x5a8>)
 801275e:	4602      	mov	r2, r0
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f003 f8d7 	bl	8015914 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801276c:	2b05      	cmp	r3, #5
 801276e:	f200 8215 	bhi.w	8012b9c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2200      	movs	r2, #0
 8012776:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f002 fea3 	bl	80154c4 <tcp_rexmit_rto>
      break;
 801277e:	e20d      	b.n	8012b9c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012780:	4b81      	ldr	r3, [pc, #516]	@ (8012988 <tcp_process+0x590>)
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	f003 0310 	and.w	r3, r3, #16
 8012788:	2b00      	cmp	r3, #0
 801278a:	f000 80a1 	beq.w	80128d0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801278e:	4b7f      	ldr	r3, [pc, #508]	@ (801298c <tcp_process+0x594>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	3b01      	subs	r3, #1
 801279a:	2b00      	cmp	r3, #0
 801279c:	db7e      	blt.n	801289c <tcp_process+0x4a4>
 801279e:	4b7b      	ldr	r3, [pc, #492]	@ (801298c <tcp_process+0x594>)
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	dc77      	bgt.n	801289c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2204      	movs	r2, #4
 80127b0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d102      	bne.n	80127c0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80127ba:	23fa      	movs	r3, #250	@ 0xfa
 80127bc:	76bb      	strb	r3, [r7, #26]
 80127be:	e01d      	b.n	80127fc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127c4:	699b      	ldr	r3, [r3, #24]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d106      	bne.n	80127d8 <tcp_process+0x3e0>
 80127ca:	4b76      	ldr	r3, [pc, #472]	@ (80129a4 <tcp_process+0x5ac>)
 80127cc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80127d0:	4975      	ldr	r1, [pc, #468]	@ (80129a8 <tcp_process+0x5b0>)
 80127d2:	4876      	ldr	r0, [pc, #472]	@ (80129ac <tcp_process+0x5b4>)
 80127d4:	f007 f88e 	bl	80198f4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127dc:	699b      	ldr	r3, [r3, #24]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d00a      	beq.n	80127f8 <tcp_process+0x400>
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127e6:	699b      	ldr	r3, [r3, #24]
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	6910      	ldr	r0, [r2, #16]
 80127ec:	2200      	movs	r2, #0
 80127ee:	6879      	ldr	r1, [r7, #4]
 80127f0:	4798      	blx	r3
 80127f2:	4603      	mov	r3, r0
 80127f4:	76bb      	strb	r3, [r7, #26]
 80127f6:	e001      	b.n	80127fc <tcp_process+0x404>
 80127f8:	23f0      	movs	r3, #240	@ 0xf0
 80127fa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80127fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00a      	beq.n	801281a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012804:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012808:	f113 0f0d 	cmn.w	r3, #13
 801280c:	d002      	beq.n	8012814 <tcp_process+0x41c>
              tcp_abort(pcb);
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7fd fd16 	bl	8010240 <tcp_abort>
            }
            return ERR_ABRT;
 8012814:	f06f 030c 	mvn.w	r3, #12
 8012818:	e1ce      	b.n	8012bb8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fae0 	bl	8012de0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012820:	4b63      	ldr	r3, [pc, #396]	@ (80129b0 <tcp_process+0x5b8>)
 8012822:	881b      	ldrh	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d005      	beq.n	8012834 <tcp_process+0x43c>
            recv_acked--;
 8012828:	4b61      	ldr	r3, [pc, #388]	@ (80129b0 <tcp_process+0x5b8>)
 801282a:	881b      	ldrh	r3, [r3, #0]
 801282c:	3b01      	subs	r3, #1
 801282e:	b29a      	uxth	r2, r3
 8012830:	4b5f      	ldr	r3, [pc, #380]	@ (80129b0 <tcp_process+0x5b8>)
 8012832:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012838:	009a      	lsls	r2, r3, #2
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012844:	428b      	cmp	r3, r1
 8012846:	bf38      	it	cc
 8012848:	460b      	movcc	r3, r1
 801284a:	429a      	cmp	r2, r3
 801284c:	d204      	bcs.n	8012858 <tcp_process+0x460>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012852:	009b      	lsls	r3, r3, #2
 8012854:	b29b      	uxth	r3, r3
 8012856:	e00d      	b.n	8012874 <tcp_process+0x47c>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012862:	4293      	cmp	r3, r2
 8012864:	d904      	bls.n	8012870 <tcp_process+0x478>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	b29b      	uxth	r3, r3
 801286e:	e001      	b.n	8012874 <tcp_process+0x47c>
 8012870:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801287a:	4b4e      	ldr	r3, [pc, #312]	@ (80129b4 <tcp_process+0x5bc>)
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	f003 0320 	and.w	r3, r3, #32
 8012882:	2b00      	cmp	r3, #0
 8012884:	d037      	beq.n	80128f6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	8b5b      	ldrh	r3, [r3, #26]
 801288a:	f043 0302 	orr.w	r3, r3, #2
 801288e:	b29a      	uxth	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2207      	movs	r2, #7
 8012898:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801289a:	e02c      	b.n	80128f6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801289c:	4b3b      	ldr	r3, [pc, #236]	@ (801298c <tcp_process+0x594>)
 801289e:	6819      	ldr	r1, [r3, #0]
 80128a0:	4b3b      	ldr	r3, [pc, #236]	@ (8012990 <tcp_process+0x598>)
 80128a2:	881b      	ldrh	r3, [r3, #0]
 80128a4:	461a      	mov	r2, r3
 80128a6:	4b3b      	ldr	r3, [pc, #236]	@ (8012994 <tcp_process+0x59c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128ac:	4b3a      	ldr	r3, [pc, #232]	@ (8012998 <tcp_process+0x5a0>)
 80128ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128b0:	885b      	ldrh	r3, [r3, #2]
 80128b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128b4:	4a38      	ldr	r2, [pc, #224]	@ (8012998 <tcp_process+0x5a0>)
 80128b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128b8:	8812      	ldrh	r2, [r2, #0]
 80128ba:	b292      	uxth	r2, r2
 80128bc:	9202      	str	r2, [sp, #8]
 80128be:	9301      	str	r3, [sp, #4]
 80128c0:	4b36      	ldr	r3, [pc, #216]	@ (801299c <tcp_process+0x5a4>)
 80128c2:	9300      	str	r3, [sp, #0]
 80128c4:	4b36      	ldr	r3, [pc, #216]	@ (80129a0 <tcp_process+0x5a8>)
 80128c6:	4602      	mov	r2, r0
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f003 f823 	bl	8015914 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80128ce:	e167      	b.n	8012ba0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80128d0:	4b2d      	ldr	r3, [pc, #180]	@ (8012988 <tcp_process+0x590>)
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	f003 0302 	and.w	r3, r3, #2
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f000 8161 	beq.w	8012ba0 <tcp_process+0x7a8>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128e2:	1e5a      	subs	r2, r3, #1
 80128e4:	4b2b      	ldr	r3, [pc, #172]	@ (8012994 <tcp_process+0x59c>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	f040 8159 	bne.w	8012ba0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f002 fe0a 	bl	8015508 <tcp_rexmit>
      break;
 80128f4:	e154      	b.n	8012ba0 <tcp_process+0x7a8>
 80128f6:	e153      	b.n	8012ba0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 fa71 	bl	8012de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80128fe:	4b2d      	ldr	r3, [pc, #180]	@ (80129b4 <tcp_process+0x5bc>)
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	f003 0320 	and.w	r3, r3, #32
 8012906:	2b00      	cmp	r3, #0
 8012908:	f000 814c 	beq.w	8012ba4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	8b5b      	ldrh	r3, [r3, #26]
 8012910:	f043 0302 	orr.w	r3, r3, #2
 8012914:	b29a      	uxth	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2207      	movs	r2, #7
 801291e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012920:	e140      	b.n	8012ba4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f000 fa5c 	bl	8012de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012928:	4b22      	ldr	r3, [pc, #136]	@ (80129b4 <tcp_process+0x5bc>)
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f003 0320 	and.w	r3, r3, #32
 8012930:	2b00      	cmp	r3, #0
 8012932:	d071      	beq.n	8012a18 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012934:	4b14      	ldr	r3, [pc, #80]	@ (8012988 <tcp_process+0x590>)
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	f003 0310 	and.w	r3, r3, #16
 801293c:	2b00      	cmp	r3, #0
 801293e:	d060      	beq.n	8012a02 <tcp_process+0x60a>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012944:	4b11      	ldr	r3, [pc, #68]	@ (801298c <tcp_process+0x594>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	429a      	cmp	r2, r3
 801294a:	d15a      	bne.n	8012a02 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012950:	2b00      	cmp	r3, #0
 8012952:	d156      	bne.n	8012a02 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	8b5b      	ldrh	r3, [r3, #26]
 8012958:	f043 0302 	orr.w	r3, r3, #2
 801295c:	b29a      	uxth	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f7fe fdbc 	bl	80114e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012968:	4b13      	ldr	r3, [pc, #76]	@ (80129b8 <tcp_process+0x5c0>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	429a      	cmp	r2, r3
 8012970:	d105      	bne.n	801297e <tcp_process+0x586>
 8012972:	4b11      	ldr	r3, [pc, #68]	@ (80129b8 <tcp_process+0x5c0>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	4a0f      	ldr	r2, [pc, #60]	@ (80129b8 <tcp_process+0x5c0>)
 801297a:	6013      	str	r3, [r2, #0]
 801297c:	e02e      	b.n	80129dc <tcp_process+0x5e4>
 801297e:	4b0e      	ldr	r3, [pc, #56]	@ (80129b8 <tcp_process+0x5c0>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	e027      	b.n	80129d6 <tcp_process+0x5de>
 8012986:	bf00      	nop
 8012988:	20011d5c 	.word	0x20011d5c
 801298c:	20011d54 	.word	0x20011d54
 8012990:	20011d5a 	.word	0x20011d5a
 8012994:	20011d50 	.word	0x20011d50
 8012998:	20011d40 	.word	0x20011d40
 801299c:	2000c414 	.word	0x2000c414
 80129a0:	2000c418 	.word	0x2000c418
 80129a4:	0801dd88 	.word	0x0801dd88
 80129a8:	0801e028 	.word	0x0801e028
 80129ac:	0801ddd4 	.word	0x0801ddd4
 80129b0:	20011d58 	.word	0x20011d58
 80129b4:	20011d5d 	.word	0x20011d5d
 80129b8:	20011d24 	.word	0x20011d24
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	687a      	ldr	r2, [r7, #4]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d104      	bne.n	80129d0 <tcp_process+0x5d8>
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	68da      	ldr	r2, [r3, #12]
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	60da      	str	r2, [r3, #12]
 80129ce:	e005      	b.n	80129dc <tcp_process+0x5e4>
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	68db      	ldr	r3, [r3, #12]
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d1ef      	bne.n	80129bc <tcp_process+0x5c4>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	60da      	str	r2, [r3, #12]
 80129e2:	4b77      	ldr	r3, [pc, #476]	@ (8012bc0 <tcp_process+0x7c8>)
 80129e4:	2201      	movs	r2, #1
 80129e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	220a      	movs	r2, #10
 80129ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80129ee:	4b75      	ldr	r3, [pc, #468]	@ (8012bc4 <tcp_process+0x7cc>)
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	60da      	str	r2, [r3, #12]
 80129f6:	4a73      	ldr	r2, [pc, #460]	@ (8012bc4 <tcp_process+0x7cc>)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6013      	str	r3, [r2, #0]
 80129fc:	f003 f94c 	bl	8015c98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012a00:	e0d2      	b.n	8012ba8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	8b5b      	ldrh	r3, [r3, #26]
 8012a06:	f043 0302 	orr.w	r3, r3, #2
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2208      	movs	r2, #8
 8012a14:	751a      	strb	r2, [r3, #20]
      break;
 8012a16:	e0c7      	b.n	8012ba8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a18:	4b6b      	ldr	r3, [pc, #428]	@ (8012bc8 <tcp_process+0x7d0>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	f003 0310 	and.w	r3, r3, #16
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f000 80c1 	beq.w	8012ba8 <tcp_process+0x7b0>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a2a:	4b68      	ldr	r3, [pc, #416]	@ (8012bcc <tcp_process+0x7d4>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	f040 80ba 	bne.w	8012ba8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f040 80b5 	bne.w	8012ba8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2206      	movs	r2, #6
 8012a42:	751a      	strb	r2, [r3, #20]
      break;
 8012a44:	e0b0      	b.n	8012ba8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 f9ca 	bl	8012de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012a4c:	4b60      	ldr	r3, [pc, #384]	@ (8012bd0 <tcp_process+0x7d8>)
 8012a4e:	781b      	ldrb	r3, [r3, #0]
 8012a50:	f003 0320 	and.w	r3, r3, #32
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f000 80a9 	beq.w	8012bac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	8b5b      	ldrh	r3, [r3, #26]
 8012a5e:	f043 0302 	orr.w	r3, r3, #2
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7fe fd39 	bl	80114e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012a6e:	4b59      	ldr	r3, [pc, #356]	@ (8012bd4 <tcp_process+0x7dc>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d105      	bne.n	8012a84 <tcp_process+0x68c>
 8012a78:	4b56      	ldr	r3, [pc, #344]	@ (8012bd4 <tcp_process+0x7dc>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	4a55      	ldr	r2, [pc, #340]	@ (8012bd4 <tcp_process+0x7dc>)
 8012a80:	6013      	str	r3, [r2, #0]
 8012a82:	e013      	b.n	8012aac <tcp_process+0x6b4>
 8012a84:	4b53      	ldr	r3, [pc, #332]	@ (8012bd4 <tcp_process+0x7dc>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	613b      	str	r3, [r7, #16]
 8012a8a:	e00c      	b.n	8012aa6 <tcp_process+0x6ae>
 8012a8c:	693b      	ldr	r3, [r7, #16]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d104      	bne.n	8012aa0 <tcp_process+0x6a8>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	68da      	ldr	r2, [r3, #12]
 8012a9a:	693b      	ldr	r3, [r7, #16]
 8012a9c:	60da      	str	r2, [r3, #12]
 8012a9e:	e005      	b.n	8012aac <tcp_process+0x6b4>
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	68db      	ldr	r3, [r3, #12]
 8012aa4:	613b      	str	r3, [r7, #16]
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d1ef      	bne.n	8012a8c <tcp_process+0x694>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	60da      	str	r2, [r3, #12]
 8012ab2:	4b43      	ldr	r3, [pc, #268]	@ (8012bc0 <tcp_process+0x7c8>)
 8012ab4:	2201      	movs	r2, #1
 8012ab6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	220a      	movs	r2, #10
 8012abc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012abe:	4b41      	ldr	r3, [pc, #260]	@ (8012bc4 <tcp_process+0x7cc>)
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	60da      	str	r2, [r3, #12]
 8012ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8012bc4 <tcp_process+0x7cc>)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6013      	str	r3, [r2, #0]
 8012acc:	f003 f8e4 	bl	8015c98 <tcp_timer_needed>
      }
      break;
 8012ad0:	e06c      	b.n	8012bac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f000 f984 	bl	8012de0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8012bc8 <tcp_process+0x7d0>)
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	f003 0310 	and.w	r3, r3, #16
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d065      	beq.n	8012bb0 <tcp_process+0x7b8>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ae8:	4b38      	ldr	r3, [pc, #224]	@ (8012bcc <tcp_process+0x7d4>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d15f      	bne.n	8012bb0 <tcp_process+0x7b8>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d15b      	bne.n	8012bb0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7fe fcf1 	bl	80114e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012afe:	4b35      	ldr	r3, [pc, #212]	@ (8012bd4 <tcp_process+0x7dc>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d105      	bne.n	8012b14 <tcp_process+0x71c>
 8012b08:	4b32      	ldr	r3, [pc, #200]	@ (8012bd4 <tcp_process+0x7dc>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	4a31      	ldr	r2, [pc, #196]	@ (8012bd4 <tcp_process+0x7dc>)
 8012b10:	6013      	str	r3, [r2, #0]
 8012b12:	e013      	b.n	8012b3c <tcp_process+0x744>
 8012b14:	4b2f      	ldr	r3, [pc, #188]	@ (8012bd4 <tcp_process+0x7dc>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60fb      	str	r3, [r7, #12]
 8012b1a:	e00c      	b.n	8012b36 <tcp_process+0x73e>
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	68db      	ldr	r3, [r3, #12]
 8012b20:	687a      	ldr	r2, [r7, #4]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d104      	bne.n	8012b30 <tcp_process+0x738>
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	68da      	ldr	r2, [r3, #12]
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	60da      	str	r2, [r3, #12]
 8012b2e:	e005      	b.n	8012b3c <tcp_process+0x744>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	60fb      	str	r3, [r7, #12]
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d1ef      	bne.n	8012b1c <tcp_process+0x724>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	60da      	str	r2, [r3, #12]
 8012b42:	4b1f      	ldr	r3, [pc, #124]	@ (8012bc0 <tcp_process+0x7c8>)
 8012b44:	2201      	movs	r2, #1
 8012b46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	220a      	movs	r2, #10
 8012b4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8012bc4 <tcp_process+0x7cc>)
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	60da      	str	r2, [r3, #12]
 8012b56:	4a1b      	ldr	r2, [pc, #108]	@ (8012bc4 <tcp_process+0x7cc>)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6013      	str	r3, [r2, #0]
 8012b5c:	f003 f89c 	bl	8015c98 <tcp_timer_needed>
      }
      break;
 8012b60:	e026      	b.n	8012bb0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f93c 	bl	8012de0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012b68:	4b17      	ldr	r3, [pc, #92]	@ (8012bc8 <tcp_process+0x7d0>)
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	f003 0310 	and.w	r3, r3, #16
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d01f      	beq.n	8012bb4 <tcp_process+0x7bc>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b78:	4b14      	ldr	r3, [pc, #80]	@ (8012bcc <tcp_process+0x7d4>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d119      	bne.n	8012bb4 <tcp_process+0x7bc>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d115      	bne.n	8012bb4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012b88:	4b11      	ldr	r3, [pc, #68]	@ (8012bd0 <tcp_process+0x7d8>)
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	f043 0310 	orr.w	r3, r3, #16
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	4b0f      	ldr	r3, [pc, #60]	@ (8012bd0 <tcp_process+0x7d8>)
 8012b94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012b96:	e00d      	b.n	8012bb4 <tcp_process+0x7bc>
    default:
      break;
 8012b98:	bf00      	nop
 8012b9a:	e00c      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012b9c:	bf00      	nop
 8012b9e:	e00a      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012ba0:	bf00      	nop
 8012ba2:	e008      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012ba4:	bf00      	nop
 8012ba6:	e006      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012ba8:	bf00      	nop
 8012baa:	e004      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012bac:	bf00      	nop
 8012bae:	e002      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012bb0:	bf00      	nop
 8012bb2:	e000      	b.n	8012bb6 <tcp_process+0x7be>
      break;
 8012bb4:	bf00      	nop
  }
  return ERR_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3724      	adds	r7, #36	@ 0x24
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd90      	pop	{r4, r7, pc}
 8012bc0:	20011d2c 	.word	0x20011d2c
 8012bc4:	20011d28 	.word	0x20011d28
 8012bc8:	20011d5c 	.word	0x20011d5c
 8012bcc:	20011d54 	.word	0x20011d54
 8012bd0:	20011d5d 	.word	0x20011d5d
 8012bd4:	20011d24 	.word	0x20011d24

08012bd8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012bd8:	b590      	push	{r4, r7, lr}
 8012bda:	b085      	sub	sp, #20
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
 8012be0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d106      	bne.n	8012bf6 <tcp_oos_insert_segment+0x1e>
 8012be8:	4b3b      	ldr	r3, [pc, #236]	@ (8012cd8 <tcp_oos_insert_segment+0x100>)
 8012bea:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012bee:	493b      	ldr	r1, [pc, #236]	@ (8012cdc <tcp_oos_insert_segment+0x104>)
 8012bf0:	483b      	ldr	r0, [pc, #236]	@ (8012ce0 <tcp_oos_insert_segment+0x108>)
 8012bf2:	f006 fe7f 	bl	80198f4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	68db      	ldr	r3, [r3, #12]
 8012bfa:	899b      	ldrh	r3, [r3, #12]
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7fb f982 	bl	800df08 <lwip_htons>
 8012c04:	4603      	mov	r3, r0
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d028      	beq.n	8012c62 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012c10:	6838      	ldr	r0, [r7, #0]
 8012c12:	f7fe f995 	bl	8010f40 <tcp_segs_free>
    next = NULL;
 8012c16:	2300      	movs	r3, #0
 8012c18:	603b      	str	r3, [r7, #0]
 8012c1a:	e056      	b.n	8012cca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	68db      	ldr	r3, [r3, #12]
 8012c20:	899b      	ldrh	r3, [r3, #12]
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7fb f96f 	bl	800df08 <lwip_htons>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	f003 0301 	and.w	r3, r3, #1
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00d      	beq.n	8012c52 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	68db      	ldr	r3, [r3, #12]
 8012c3a:	899b      	ldrh	r3, [r3, #12]
 8012c3c:	b29c      	uxth	r4, r3
 8012c3e:	2001      	movs	r0, #1
 8012c40:	f7fb f962 	bl	800df08 <lwip_htons>
 8012c44:	4603      	mov	r3, r0
 8012c46:	461a      	mov	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	4322      	orrs	r2, r4
 8012c4e:	b292      	uxth	r2, r2
 8012c50:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f7fe f984 	bl	8010f6a <tcp_seg_free>
    while (next &&
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00e      	beq.n	8012c86 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	891b      	ldrh	r3, [r3, #8]
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ce4 <tcp_oos_insert_segment+0x10c>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	441a      	add	r2, r3
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	685b      	ldr	r3, [r3, #4]
 8012c7a:	6839      	ldr	r1, [r7, #0]
 8012c7c:	8909      	ldrh	r1, [r1, #8]
 8012c7e:	440b      	add	r3, r1
 8012c80:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	daca      	bge.n	8012c1c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d01e      	beq.n	8012cca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	891b      	ldrh	r3, [r3, #8]
 8012c90:	461a      	mov	r2, r3
 8012c92:	4b14      	ldr	r3, [pc, #80]	@ (8012ce4 <tcp_oos_insert_segment+0x10c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	441a      	add	r2, r3
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dd12      	ble.n	8012cca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce4 <tcp_oos_insert_segment+0x10c>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	1ad3      	subs	r3, r2, r3
 8012cb4:	b29a      	uxth	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	685a      	ldr	r2, [r3, #4]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	891b      	ldrh	r3, [r3, #8]
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	4610      	mov	r0, r2
 8012cc6:	f7fc fb45 	bl	800f354 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	683a      	ldr	r2, [r7, #0]
 8012cce:	601a      	str	r2, [r3, #0]
}
 8012cd0:	bf00      	nop
 8012cd2:	3714      	adds	r7, #20
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd90      	pop	{r4, r7, pc}
 8012cd8:	0801dd88 	.word	0x0801dd88
 8012cdc:	0801e048 	.word	0x0801e048
 8012ce0:	0801ddd4 	.word	0x0801ddd4
 8012ce4:	20011d50 	.word	0x20011d50

08012ce8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012ce8:	b5b0      	push	{r4, r5, r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]
 8012cf4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012cf6:	e03e      	b.n	8012d76 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	685b      	ldr	r3, [r3, #4]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fc fd38 	bl	800f77c <pbuf_clen>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d16:	8a7a      	ldrh	r2, [r7, #18]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d906      	bls.n	8012d2a <tcp_free_acked_segments+0x42>
 8012d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8012dc8 <tcp_free_acked_segments+0xe0>)
 8012d1e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012d22:	492a      	ldr	r1, [pc, #168]	@ (8012dcc <tcp_free_acked_segments+0xe4>)
 8012d24:	482a      	ldr	r0, [pc, #168]	@ (8012dd0 <tcp_free_acked_segments+0xe8>)
 8012d26:	f006 fde5 	bl	80198f4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012d30:	8a7b      	ldrh	r3, [r7, #18]
 8012d32:	1ad3      	subs	r3, r2, r3
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	891a      	ldrh	r2, [r3, #8]
 8012d40:	4b24      	ldr	r3, [pc, #144]	@ (8012dd4 <tcp_free_acked_segments+0xec>)
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	4413      	add	r3, r2
 8012d46:	b29a      	uxth	r2, r3
 8012d48:	4b22      	ldr	r3, [pc, #136]	@ (8012dd4 <tcp_free_acked_segments+0xec>)
 8012d4a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012d4c:	6978      	ldr	r0, [r7, #20]
 8012d4e:	f7fe f90c 	bl	8010f6a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00c      	beq.n	8012d76 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d109      	bne.n	8012d76 <tcp_free_acked_segments+0x8e>
 8012d62:	683b      	ldr	r3, [r7, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d106      	bne.n	8012d76 <tcp_free_acked_segments+0x8e>
 8012d68:	4b17      	ldr	r3, [pc, #92]	@ (8012dc8 <tcp_free_acked_segments+0xe0>)
 8012d6a:	f240 4261 	movw	r2, #1121	@ 0x461
 8012d6e:	491a      	ldr	r1, [pc, #104]	@ (8012dd8 <tcp_free_acked_segments+0xf0>)
 8012d70:	4817      	ldr	r0, [pc, #92]	@ (8012dd0 <tcp_free_acked_segments+0xe8>)
 8012d72:	f006 fdbf 	bl	80198f4 <iprintf>
  while (seg_list != NULL &&
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d020      	beq.n	8012dbe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fb f8d5 	bl	800df32 <lwip_htonl>
 8012d88:	4604      	mov	r4, r0
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	891b      	ldrh	r3, [r3, #8]
 8012d8e:	461d      	mov	r5, r3
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	899b      	ldrh	r3, [r3, #12]
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fb f8b5 	bl	800df08 <lwip_htons>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	f003 0303 	and.w	r3, r3, #3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d001      	beq.n	8012dae <tcp_free_acked_segments+0xc6>
 8012daa:	2301      	movs	r3, #1
 8012dac:	e000      	b.n	8012db0 <tcp_free_acked_segments+0xc8>
 8012dae:	2300      	movs	r3, #0
 8012db0:	442b      	add	r3, r5
 8012db2:	18e2      	adds	r2, r4, r3
 8012db4:	4b09      	ldr	r3, [pc, #36]	@ (8012ddc <tcp_free_acked_segments+0xf4>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	dd9c      	ble.n	8012cf8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3718      	adds	r7, #24
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8012dc8:	0801dd88 	.word	0x0801dd88
 8012dcc:	0801e070 	.word	0x0801e070
 8012dd0:	0801ddd4 	.word	0x0801ddd4
 8012dd4:	20011d58 	.word	0x20011d58
 8012dd8:	0801e098 	.word	0x0801e098
 8012ddc:	20011d54 	.word	0x20011d54

08012de0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012de0:	b5b0      	push	{r4, r5, r7, lr}
 8012de2:	b094      	sub	sp, #80	@ 0x50
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d106      	bne.n	8012e00 <tcp_receive+0x20>
 8012df2:	4b91      	ldr	r3, [pc, #580]	@ (8013038 <tcp_receive+0x258>)
 8012df4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012df8:	4990      	ldr	r1, [pc, #576]	@ (801303c <tcp_receive+0x25c>)
 8012dfa:	4891      	ldr	r0, [pc, #580]	@ (8013040 <tcp_receive+0x260>)
 8012dfc:	f006 fd7a 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	7d1b      	ldrb	r3, [r3, #20]
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	d806      	bhi.n	8012e16 <tcp_receive+0x36>
 8012e08:	4b8b      	ldr	r3, [pc, #556]	@ (8013038 <tcp_receive+0x258>)
 8012e0a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012e0e:	498d      	ldr	r1, [pc, #564]	@ (8013044 <tcp_receive+0x264>)
 8012e10:	488b      	ldr	r0, [pc, #556]	@ (8013040 <tcp_receive+0x260>)
 8012e12:	f006 fd6f 	bl	80198f4 <iprintf>

  if (flags & TCP_ACK) {
 8012e16:	4b8c      	ldr	r3, [pc, #560]	@ (8013048 <tcp_receive+0x268>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	f003 0310 	and.w	r3, r3, #16
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	f000 8264 	beq.w	80132ec <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e30:	4413      	add	r3, r2
 8012e32:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e38:	4b84      	ldr	r3, [pc, #528]	@ (801304c <tcp_receive+0x26c>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	1ad3      	subs	r3, r2, r3
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	db1b      	blt.n	8012e7a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e46:	4b81      	ldr	r3, [pc, #516]	@ (801304c <tcp_receive+0x26c>)
 8012e48:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d106      	bne.n	8012e5c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e52:	4b7f      	ldr	r3, [pc, #508]	@ (8013050 <tcp_receive+0x270>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	db0e      	blt.n	8012e7a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e60:	4b7b      	ldr	r3, [pc, #492]	@ (8013050 <tcp_receive+0x270>)
 8012e62:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d125      	bne.n	8012eb4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e68:	4b7a      	ldr	r3, [pc, #488]	@ (8013054 <tcp_receive+0x274>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	89db      	ldrh	r3, [r3, #14]
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d91c      	bls.n	8012eb4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012e7a:	4b76      	ldr	r3, [pc, #472]	@ (8013054 <tcp_receive+0x274>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	89db      	ldrh	r3, [r3, #14]
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d205      	bcs.n	8012ea4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012ea4:	4b69      	ldr	r3, [pc, #420]	@ (801304c <tcp_receive+0x26c>)
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012eac:	4b68      	ldr	r3, [pc, #416]	@ (8013050 <tcp_receive+0x270>)
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012eb4:	4b66      	ldr	r3, [pc, #408]	@ (8013050 <tcp_receive+0x270>)
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ebc:	1ad3      	subs	r3, r2, r3
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	dc58      	bgt.n	8012f74 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012ec2:	4b65      	ldr	r3, [pc, #404]	@ (8013058 <tcp_receive+0x278>)
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d14b      	bne.n	8012f62 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012ed4:	4413      	add	r3, r2
 8012ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ed8:	429a      	cmp	r2, r3
 8012eda:	d142      	bne.n	8012f62 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	db3d      	blt.n	8012f62 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012eea:	4b59      	ldr	r3, [pc, #356]	@ (8013050 <tcp_receive+0x270>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d137      	bne.n	8012f62 <tcp_receive+0x182>
              found_dupack = 1;
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012efc:	2bff      	cmp	r3, #255	@ 0xff
 8012efe:	d007      	beq.n	8012f10 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f06:	3301      	adds	r3, #1
 8012f08:	b2da      	uxtb	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f16:	2b03      	cmp	r3, #3
 8012f18:	d91b      	bls.n	8012f52 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f24:	4413      	add	r3, r2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d30a      	bcc.n	8012f48 <tcp_receive+0x168>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f3c:	4413      	add	r3, r2
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012f46:	e004      	b.n	8012f52 <tcp_receive+0x172>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d902      	bls.n	8012f62 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f002 fb3f 	bl	80155e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	f040 8161 	bne.w	801322c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012f72:	e15b      	b.n	801322c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f74:	4b36      	ldr	r3, [pc, #216]	@ (8013050 <tcp_receive+0x270>)
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f2c0 814e 	blt.w	8013222 <tcp_receive+0x442>
 8012f86:	4b32      	ldr	r3, [pc, #200]	@ (8013050 <tcp_receive+0x270>)
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f300 8146 	bgt.w	8013222 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	8b5b      	ldrh	r3, [r3, #26]
 8012f9a:	f003 0304 	and.w	r3, r3, #4
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d010      	beq.n	8012fc4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	8b5b      	ldrh	r3, [r3, #26]
 8012fa6:	f023 0304 	bic.w	r3, r3, #4
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012fd2:	10db      	asrs	r3, r3, #3
 8012fd4:	b21b      	sxth	r3, r3
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4413      	add	r3, r2
 8012fe2:	b29b      	uxth	r3, r3
 8012fe4:	b21a      	sxth	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012fec:	4b18      	ldr	r3, [pc, #96]	@ (8013050 <tcp_receive+0x270>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	b29a      	uxth	r2, r3
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	1ad3      	subs	r3, r2, r3
 8012ffa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013004:	4b12      	ldr	r3, [pc, #72]	@ (8013050 <tcp_receive+0x270>)
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7d1b      	ldrb	r3, [r3, #20]
 8013010:	2b03      	cmp	r3, #3
 8013012:	f240 8097 	bls.w	8013144 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013022:	429a      	cmp	r2, r3
 8013024:	d245      	bcs.n	80130b2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	8b5b      	ldrh	r3, [r3, #26]
 801302a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801302e:	2b00      	cmp	r3, #0
 8013030:	d014      	beq.n	801305c <tcp_receive+0x27c>
 8013032:	2301      	movs	r3, #1
 8013034:	e013      	b.n	801305e <tcp_receive+0x27e>
 8013036:	bf00      	nop
 8013038:	0801dd88 	.word	0x0801dd88
 801303c:	0801e0b8 	.word	0x0801e0b8
 8013040:	0801ddd4 	.word	0x0801ddd4
 8013044:	0801e0d4 	.word	0x0801e0d4
 8013048:	20011d5c 	.word	0x20011d5c
 801304c:	20011d50 	.word	0x20011d50
 8013050:	20011d54 	.word	0x20011d54
 8013054:	20011d40 	.word	0x20011d40
 8013058:	20011d5a 	.word	0x20011d5a
 801305c:	2302      	movs	r3, #2
 801305e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013062:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013066:	b29a      	uxth	r2, r3
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801306c:	fb12 f303 	smulbb	r3, r2, r3
 8013070:	b29b      	uxth	r3, r3
 8013072:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013074:	4293      	cmp	r3, r2
 8013076:	bf28      	it	cs
 8013078:	4613      	movcs	r3, r2
 801307a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013082:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013084:	4413      	add	r3, r2
 8013086:	b29a      	uxth	r2, r3
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801308e:	429a      	cmp	r2, r3
 8013090:	d309      	bcc.n	80130a6 <tcp_receive+0x2c6>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013098:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801309a:	4413      	add	r3, r2
 801309c:	b29a      	uxth	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80130a4:	e04e      	b.n	8013144 <tcp_receive+0x364>
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80130b0:	e048      	b.n	8013144 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80130ba:	4413      	add	r3, r2
 80130bc:	b29a      	uxth	r2, r3
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d309      	bcc.n	80130dc <tcp_receive+0x2fc>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80130d0:	4413      	add	r3, r2
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80130da:	e004      	b.n	80130e6 <tcp_receive+0x306>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d326      	bcc.n	8013144 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013102:	1ad3      	subs	r3, r2, r3
 8013104:	b29a      	uxth	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013116:	4413      	add	r3, r2
 8013118:	b29a      	uxth	r2, r3
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013120:	429a      	cmp	r2, r3
 8013122:	d30a      	bcc.n	801313a <tcp_receive+0x35a>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801312e:	4413      	add	r3, r2
 8013130:	b29a      	uxth	r2, r3
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013138:	e004      	b.n	8013144 <tcp_receive+0x364>
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801314c:	4a98      	ldr	r2, [pc, #608]	@ (80133b0 <tcp_receive+0x5d0>)
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f7ff fdca 	bl	8012ce8 <tcp_free_acked_segments>
 8013154:	4602      	mov	r2, r0
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013162:	4a94      	ldr	r2, [pc, #592]	@ (80133b4 <tcp_receive+0x5d4>)
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f7ff fdbf 	bl	8012ce8 <tcp_free_acked_segments>
 801316a:	4602      	mov	r2, r0
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013174:	2b00      	cmp	r3, #0
 8013176:	d104      	bne.n	8013182 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801317e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013180:	e002      	b.n	8013188 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2200      	movs	r2, #0
 801318c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013192:	2b00      	cmp	r3, #0
 8013194:	d103      	bne.n	801319e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80131a4:	4b84      	ldr	r3, [pc, #528]	@ (80133b8 <tcp_receive+0x5d8>)
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	4413      	add	r3, r2
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8b5b      	ldrh	r3, [r3, #26]
 80131b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d035      	beq.n	801322a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d118      	bne.n	80131f8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d00c      	beq.n	80131e8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131d6:	68db      	ldr	r3, [r3, #12]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fa fea9 	bl	800df32 <lwip_htonl>
 80131e0:	4603      	mov	r3, r0
 80131e2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	dc20      	bgt.n	801322a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	8b5b      	ldrh	r3, [r3, #26]
 80131ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131f6:	e018      	b.n	801322a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	f7fa fe94 	bl	800df32 <lwip_htonl>
 801320a:	4603      	mov	r3, r0
 801320c:	1ae3      	subs	r3, r4, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	dc0b      	bgt.n	801322a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	8b5b      	ldrh	r3, [r3, #26]
 8013216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801321a:	b29a      	uxth	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013220:	e003      	b.n	801322a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f002 fbc8 	bl	80159b8 <tcp_send_empty_ack>
 8013228:	e000      	b.n	801322c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801322a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013230:	2b00      	cmp	r3, #0
 8013232:	d05b      	beq.n	80132ec <tcp_receive+0x50c>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013238:	4b60      	ldr	r3, [pc, #384]	@ (80133bc <tcp_receive+0x5dc>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	da54      	bge.n	80132ec <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013242:	4b5f      	ldr	r3, [pc, #380]	@ (80133c0 <tcp_receive+0x5e0>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	b29a      	uxth	r2, r3
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801324c:	b29b      	uxth	r3, r3
 801324e:	1ad3      	subs	r3, r2, r3
 8013250:	b29b      	uxth	r3, r3
 8013252:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013256:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013260:	10db      	asrs	r3, r3, #3
 8013262:	b21b      	sxth	r3, r3
 8013264:	b29b      	uxth	r3, r3
 8013266:	1ad3      	subs	r3, r2, r3
 8013268:	b29b      	uxth	r3, r3
 801326a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013274:	b29a      	uxth	r2, r3
 8013276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801327a:	4413      	add	r3, r2
 801327c:	b29b      	uxth	r3, r3
 801327e:	b21a      	sxth	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013284:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013288:	2b00      	cmp	r3, #0
 801328a:	da05      	bge.n	8013298 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801328c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013290:	425b      	negs	r3, r3
 8013292:	b29b      	uxth	r3, r3
 8013294:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013298:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80132a2:	109b      	asrs	r3, r3, #2
 80132a4:	b21b      	sxth	r3, r3
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	1ad3      	subs	r3, r2, r3
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80132bc:	4413      	add	r3, r2
 80132be:	b29b      	uxth	r3, r3
 80132c0:	b21a      	sxth	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80132cc:	10db      	asrs	r3, r3, #3
 80132ce:	b21b      	sxth	r3, r3
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80132d8:	b29b      	uxth	r3, r3
 80132da:	4413      	add	r3, r2
 80132dc:	b29b      	uxth	r3, r3
 80132de:	b21a      	sxth	r2, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2200      	movs	r2, #0
 80132ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80132ec:	4b35      	ldr	r3, [pc, #212]	@ (80133c4 <tcp_receive+0x5e4>)
 80132ee:	881b      	ldrh	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f000 84df 	beq.w	8013cb4 <tcp_receive+0xed4>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	7d1b      	ldrb	r3, [r3, #20]
 80132fa:	2b06      	cmp	r3, #6
 80132fc:	f200 84da 	bhi.w	8013cb4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013304:	4b30      	ldr	r3, [pc, #192]	@ (80133c8 <tcp_receive+0x5e8>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	3b01      	subs	r3, #1
 801330c:	2b00      	cmp	r3, #0
 801330e:	f2c0 808f 	blt.w	8013430 <tcp_receive+0x650>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013316:	4b2b      	ldr	r3, [pc, #172]	@ (80133c4 <tcp_receive+0x5e4>)
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	4619      	mov	r1, r3
 801331c:	4b2a      	ldr	r3, [pc, #168]	@ (80133c8 <tcp_receive+0x5e8>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	440b      	add	r3, r1
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	3301      	adds	r3, #1
 8013326:	2b00      	cmp	r3, #0
 8013328:	f300 8082 	bgt.w	8013430 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801332c:	4b27      	ldr	r3, [pc, #156]	@ (80133cc <tcp_receive+0x5ec>)
 801332e:	685b      	ldr	r3, [r3, #4]
 8013330:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013336:	4b24      	ldr	r3, [pc, #144]	@ (80133c8 <tcp_receive+0x5e8>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	1ad3      	subs	r3, r2, r3
 801333c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801333e:	4b23      	ldr	r3, [pc, #140]	@ (80133cc <tcp_receive+0x5ec>)
 8013340:	685b      	ldr	r3, [r3, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <tcp_receive+0x574>
 8013346:	4b22      	ldr	r3, [pc, #136]	@ (80133d0 <tcp_receive+0x5f0>)
 8013348:	f240 5294 	movw	r2, #1428	@ 0x594
 801334c:	4921      	ldr	r1, [pc, #132]	@ (80133d4 <tcp_receive+0x5f4>)
 801334e:	4822      	ldr	r0, [pc, #136]	@ (80133d8 <tcp_receive+0x5f8>)
 8013350:	f006 fad0 	bl	80198f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013356:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801335a:	4293      	cmp	r3, r2
 801335c:	d906      	bls.n	801336c <tcp_receive+0x58c>
 801335e:	4b1c      	ldr	r3, [pc, #112]	@ (80133d0 <tcp_receive+0x5f0>)
 8013360:	f240 5295 	movw	r2, #1429	@ 0x595
 8013364:	491d      	ldr	r1, [pc, #116]	@ (80133dc <tcp_receive+0x5fc>)
 8013366:	481c      	ldr	r0, [pc, #112]	@ (80133d8 <tcp_receive+0x5f8>)
 8013368:	f006 fac4 	bl	80198f4 <iprintf>
      off = (u16_t)off32;
 801336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801336e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013372:	4b16      	ldr	r3, [pc, #88]	@ (80133cc <tcp_receive+0x5ec>)
 8013374:	685b      	ldr	r3, [r3, #4]
 8013376:	891b      	ldrh	r3, [r3, #8]
 8013378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801337c:	429a      	cmp	r2, r3
 801337e:	d906      	bls.n	801338e <tcp_receive+0x5ae>
 8013380:	4b13      	ldr	r3, [pc, #76]	@ (80133d0 <tcp_receive+0x5f0>)
 8013382:	f240 5297 	movw	r2, #1431	@ 0x597
 8013386:	4916      	ldr	r1, [pc, #88]	@ (80133e0 <tcp_receive+0x600>)
 8013388:	4813      	ldr	r0, [pc, #76]	@ (80133d8 <tcp_receive+0x5f8>)
 801338a:	f006 fab3 	bl	80198f4 <iprintf>
      inseg.len -= off;
 801338e:	4b0f      	ldr	r3, [pc, #60]	@ (80133cc <tcp_receive+0x5ec>)
 8013390:	891a      	ldrh	r2, [r3, #8]
 8013392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013396:	1ad3      	subs	r3, r2, r3
 8013398:	b29a      	uxth	r2, r3
 801339a:	4b0c      	ldr	r3, [pc, #48]	@ (80133cc <tcp_receive+0x5ec>)
 801339c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801339e:	4b0b      	ldr	r3, [pc, #44]	@ (80133cc <tcp_receive+0x5ec>)
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	891a      	ldrh	r2, [r3, #8]
 80133a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80133a8:	1ad3      	subs	r3, r2, r3
 80133aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80133ac:	e02a      	b.n	8013404 <tcp_receive+0x624>
 80133ae:	bf00      	nop
 80133b0:	0801e0f0 	.word	0x0801e0f0
 80133b4:	0801e0f8 	.word	0x0801e0f8
 80133b8:	20011d58 	.word	0x20011d58
 80133bc:	20011d54 	.word	0x20011d54
 80133c0:	20011d18 	.word	0x20011d18
 80133c4:	20011d5a 	.word	0x20011d5a
 80133c8:	20011d50 	.word	0x20011d50
 80133cc:	20011d30 	.word	0x20011d30
 80133d0:	0801dd88 	.word	0x0801dd88
 80133d4:	0801e100 	.word	0x0801e100
 80133d8:	0801ddd4 	.word	0x0801ddd4
 80133dc:	0801e110 	.word	0x0801e110
 80133e0:	0801e120 	.word	0x0801e120
        off -= p->len;
 80133e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133e6:	895b      	ldrh	r3, [r3, #10]
 80133e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80133f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133f4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80133f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133fa:	2200      	movs	r2, #0
 80133fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80133fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013406:	895b      	ldrh	r3, [r3, #10]
 8013408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801340c:	429a      	cmp	r2, r3
 801340e:	d8e9      	bhi.n	80133e4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013414:	4619      	mov	r1, r3
 8013416:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013418:	f7fc f89c 	bl	800f554 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013420:	4a90      	ldr	r2, [pc, #576]	@ (8013664 <tcp_receive+0x884>)
 8013422:	6013      	str	r3, [r2, #0]
 8013424:	4b90      	ldr	r3, [pc, #576]	@ (8013668 <tcp_receive+0x888>)
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	4a8e      	ldr	r2, [pc, #568]	@ (8013664 <tcp_receive+0x884>)
 801342a:	6812      	ldr	r2, [r2, #0]
 801342c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801342e:	e00d      	b.n	801344c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013430:	4b8c      	ldr	r3, [pc, #560]	@ (8013664 <tcp_receive+0x884>)
 8013432:	681a      	ldr	r2, [r3, #0]
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013438:	1ad3      	subs	r3, r2, r3
 801343a:	2b00      	cmp	r3, #0
 801343c:	da06      	bge.n	801344c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	8b5b      	ldrh	r3, [r3, #26]
 8013442:	f043 0302 	orr.w	r3, r3, #2
 8013446:	b29a      	uxth	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801344c:	4b85      	ldr	r3, [pc, #532]	@ (8013664 <tcp_receive+0x884>)
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013454:	1ad3      	subs	r3, r2, r3
 8013456:	2b00      	cmp	r3, #0
 8013458:	f2c0 8427 	blt.w	8013caa <tcp_receive+0xeca>
 801345c:	4b81      	ldr	r3, [pc, #516]	@ (8013664 <tcp_receive+0x884>)
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013464:	6879      	ldr	r1, [r7, #4]
 8013466:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013468:	440b      	add	r3, r1
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	3301      	adds	r3, #1
 801346e:	2b00      	cmp	r3, #0
 8013470:	f300 841b 	bgt.w	8013caa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013478:	4b7a      	ldr	r3, [pc, #488]	@ (8013664 <tcp_receive+0x884>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	429a      	cmp	r2, r3
 801347e:	f040 8298 	bne.w	80139b2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013482:	4b79      	ldr	r3, [pc, #484]	@ (8013668 <tcp_receive+0x888>)
 8013484:	891c      	ldrh	r4, [r3, #8]
 8013486:	4b78      	ldr	r3, [pc, #480]	@ (8013668 <tcp_receive+0x888>)
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	899b      	ldrh	r3, [r3, #12]
 801348c:	b29b      	uxth	r3, r3
 801348e:	4618      	mov	r0, r3
 8013490:	f7fa fd3a 	bl	800df08 <lwip_htons>
 8013494:	4603      	mov	r3, r0
 8013496:	b2db      	uxtb	r3, r3
 8013498:	f003 0303 	and.w	r3, r3, #3
 801349c:	2b00      	cmp	r3, #0
 801349e:	d001      	beq.n	80134a4 <tcp_receive+0x6c4>
 80134a0:	2301      	movs	r3, #1
 80134a2:	e000      	b.n	80134a6 <tcp_receive+0x6c6>
 80134a4:	2300      	movs	r3, #0
 80134a6:	4423      	add	r3, r4
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	4b70      	ldr	r3, [pc, #448]	@ (801366c <tcp_receive+0x88c>)
 80134ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134b2:	4b6e      	ldr	r3, [pc, #440]	@ (801366c <tcp_receive+0x88c>)
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	429a      	cmp	r2, r3
 80134b8:	d274      	bcs.n	80135a4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80134ba:	4b6b      	ldr	r3, [pc, #428]	@ (8013668 <tcp_receive+0x888>)
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	899b      	ldrh	r3, [r3, #12]
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fa fd20 	bl	800df08 <lwip_htons>
 80134c8:	4603      	mov	r3, r0
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	f003 0301 	and.w	r3, r3, #1
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d01e      	beq.n	8013512 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80134d4:	4b64      	ldr	r3, [pc, #400]	@ (8013668 <tcp_receive+0x888>)
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	899b      	ldrh	r3, [r3, #12]
 80134da:	b29b      	uxth	r3, r3
 80134dc:	b21b      	sxth	r3, r3
 80134de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80134e2:	b21c      	sxth	r4, r3
 80134e4:	4b60      	ldr	r3, [pc, #384]	@ (8013668 <tcp_receive+0x888>)
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	899b      	ldrh	r3, [r3, #12]
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fa fd0b 	bl	800df08 <lwip_htons>
 80134f2:	4603      	mov	r3, r0
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fa fd03 	bl	800df08 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	b21b      	sxth	r3, r3
 8013506:	4323      	orrs	r3, r4
 8013508:	b21a      	sxth	r2, r3
 801350a:	4b57      	ldr	r3, [pc, #348]	@ (8013668 <tcp_receive+0x888>)
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	b292      	uxth	r2, r2
 8013510:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013516:	4b54      	ldr	r3, [pc, #336]	@ (8013668 <tcp_receive+0x888>)
 8013518:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801351a:	4b53      	ldr	r3, [pc, #332]	@ (8013668 <tcp_receive+0x888>)
 801351c:	68db      	ldr	r3, [r3, #12]
 801351e:	899b      	ldrh	r3, [r3, #12]
 8013520:	b29b      	uxth	r3, r3
 8013522:	4618      	mov	r0, r3
 8013524:	f7fa fcf0 	bl	800df08 <lwip_htons>
 8013528:	4603      	mov	r3, r0
 801352a:	b2db      	uxtb	r3, r3
 801352c:	f003 0302 	and.w	r3, r3, #2
 8013530:	2b00      	cmp	r3, #0
 8013532:	d005      	beq.n	8013540 <tcp_receive+0x760>
            inseg.len -= 1;
 8013534:	4b4c      	ldr	r3, [pc, #304]	@ (8013668 <tcp_receive+0x888>)
 8013536:	891b      	ldrh	r3, [r3, #8]
 8013538:	3b01      	subs	r3, #1
 801353a:	b29a      	uxth	r2, r3
 801353c:	4b4a      	ldr	r3, [pc, #296]	@ (8013668 <tcp_receive+0x888>)
 801353e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013540:	4b49      	ldr	r3, [pc, #292]	@ (8013668 <tcp_receive+0x888>)
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	4a48      	ldr	r2, [pc, #288]	@ (8013668 <tcp_receive+0x888>)
 8013546:	8912      	ldrh	r2, [r2, #8]
 8013548:	4611      	mov	r1, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f7fb ff02 	bl	800f354 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013550:	4b45      	ldr	r3, [pc, #276]	@ (8013668 <tcp_receive+0x888>)
 8013552:	891c      	ldrh	r4, [r3, #8]
 8013554:	4b44      	ldr	r3, [pc, #272]	@ (8013668 <tcp_receive+0x888>)
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	899b      	ldrh	r3, [r3, #12]
 801355a:	b29b      	uxth	r3, r3
 801355c:	4618      	mov	r0, r3
 801355e:	f7fa fcd3 	bl	800df08 <lwip_htons>
 8013562:	4603      	mov	r3, r0
 8013564:	b2db      	uxtb	r3, r3
 8013566:	f003 0303 	and.w	r3, r3, #3
 801356a:	2b00      	cmp	r3, #0
 801356c:	d001      	beq.n	8013572 <tcp_receive+0x792>
 801356e:	2301      	movs	r3, #1
 8013570:	e000      	b.n	8013574 <tcp_receive+0x794>
 8013572:	2300      	movs	r3, #0
 8013574:	4423      	add	r3, r4
 8013576:	b29a      	uxth	r2, r3
 8013578:	4b3c      	ldr	r3, [pc, #240]	@ (801366c <tcp_receive+0x88c>)
 801357a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801357c:	4b3b      	ldr	r3, [pc, #236]	@ (801366c <tcp_receive+0x88c>)
 801357e:	881b      	ldrh	r3, [r3, #0]
 8013580:	461a      	mov	r2, r3
 8013582:	4b38      	ldr	r3, [pc, #224]	@ (8013664 <tcp_receive+0x884>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	441a      	add	r2, r3
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801358c:	6879      	ldr	r1, [r7, #4]
 801358e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013590:	440b      	add	r3, r1
 8013592:	429a      	cmp	r2, r3
 8013594:	d006      	beq.n	80135a4 <tcp_receive+0x7c4>
 8013596:	4b36      	ldr	r3, [pc, #216]	@ (8013670 <tcp_receive+0x890>)
 8013598:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801359c:	4935      	ldr	r1, [pc, #212]	@ (8013674 <tcp_receive+0x894>)
 801359e:	4836      	ldr	r0, [pc, #216]	@ (8013678 <tcp_receive+0x898>)
 80135a0:	f006 f9a8 	bl	80198f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f000 80e6 	beq.w	801377a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80135ae:	4b2e      	ldr	r3, [pc, #184]	@ (8013668 <tcp_receive+0x888>)
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	899b      	ldrh	r3, [r3, #12]
 80135b4:	b29b      	uxth	r3, r3
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fa fca6 	bl	800df08 <lwip_htons>
 80135bc:	4603      	mov	r3, r0
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	f003 0301 	and.w	r3, r3, #1
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d010      	beq.n	80135ea <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80135c8:	e00a      	b.n	80135e0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135ce:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80135da:	68f8      	ldr	r0, [r7, #12]
 80135dc:	f7fd fcc5 	bl	8010f6a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1f0      	bne.n	80135ca <tcp_receive+0x7ea>
 80135e8:	e0c7      	b.n	801377a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80135f0:	e051      	b.n	8013696 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80135f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135f4:	68db      	ldr	r3, [r3, #12]
 80135f6:	899b      	ldrh	r3, [r3, #12]
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7fa fc84 	bl	800df08 <lwip_htons>
 8013600:	4603      	mov	r3, r0
 8013602:	b2db      	uxtb	r3, r3
 8013604:	f003 0301 	and.w	r3, r3, #1
 8013608:	2b00      	cmp	r3, #0
 801360a:	d03c      	beq.n	8013686 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801360c:	4b16      	ldr	r3, [pc, #88]	@ (8013668 <tcp_receive+0x888>)
 801360e:	68db      	ldr	r3, [r3, #12]
 8013610:	899b      	ldrh	r3, [r3, #12]
 8013612:	b29b      	uxth	r3, r3
 8013614:	4618      	mov	r0, r3
 8013616:	f7fa fc77 	bl	800df08 <lwip_htons>
 801361a:	4603      	mov	r3, r0
 801361c:	b2db      	uxtb	r3, r3
 801361e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013622:	2b00      	cmp	r3, #0
 8013624:	d12f      	bne.n	8013686 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013626:	4b10      	ldr	r3, [pc, #64]	@ (8013668 <tcp_receive+0x888>)
 8013628:	68db      	ldr	r3, [r3, #12]
 801362a:	899b      	ldrh	r3, [r3, #12]
 801362c:	b29c      	uxth	r4, r3
 801362e:	2001      	movs	r0, #1
 8013630:	f7fa fc6a 	bl	800df08 <lwip_htons>
 8013634:	4603      	mov	r3, r0
 8013636:	461a      	mov	r2, r3
 8013638:	4b0b      	ldr	r3, [pc, #44]	@ (8013668 <tcp_receive+0x888>)
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	4322      	orrs	r2, r4
 801363e:	b292      	uxth	r2, r2
 8013640:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013642:	4b09      	ldr	r3, [pc, #36]	@ (8013668 <tcp_receive+0x888>)
 8013644:	891c      	ldrh	r4, [r3, #8]
 8013646:	4b08      	ldr	r3, [pc, #32]	@ (8013668 <tcp_receive+0x888>)
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	899b      	ldrh	r3, [r3, #12]
 801364c:	b29b      	uxth	r3, r3
 801364e:	4618      	mov	r0, r3
 8013650:	f7fa fc5a 	bl	800df08 <lwip_htons>
 8013654:	4603      	mov	r3, r0
 8013656:	b2db      	uxtb	r3, r3
 8013658:	f003 0303 	and.w	r3, r3, #3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00d      	beq.n	801367c <tcp_receive+0x89c>
 8013660:	2301      	movs	r3, #1
 8013662:	e00c      	b.n	801367e <tcp_receive+0x89e>
 8013664:	20011d50 	.word	0x20011d50
 8013668:	20011d30 	.word	0x20011d30
 801366c:	20011d5a 	.word	0x20011d5a
 8013670:	0801dd88 	.word	0x0801dd88
 8013674:	0801e130 	.word	0x0801e130
 8013678:	0801ddd4 	.word	0x0801ddd4
 801367c:	2300      	movs	r3, #0
 801367e:	4423      	add	r3, r4
 8013680:	b29a      	uxth	r2, r3
 8013682:	4b98      	ldr	r3, [pc, #608]	@ (80138e4 <tcp_receive+0xb04>)
 8013684:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013688:	613b      	str	r3, [r7, #16]
              next = next->next;
 801368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013690:	6938      	ldr	r0, [r7, #16]
 8013692:	f7fd fc6a 	bl	8010f6a <tcp_seg_free>
            while (next &&
 8013696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00e      	beq.n	80136ba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801369c:	4b91      	ldr	r3, [pc, #580]	@ (80138e4 <tcp_receive+0xb04>)
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	461a      	mov	r2, r3
 80136a2:	4b91      	ldr	r3, [pc, #580]	@ (80138e8 <tcp_receive+0xb08>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	441a      	add	r2, r3
 80136a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80136b0:	8909      	ldrh	r1, [r1, #8]
 80136b2:	440b      	add	r3, r1
 80136b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	da9b      	bge.n	80135f2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80136ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d059      	beq.n	8013774 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80136c0:	4b88      	ldr	r3, [pc, #544]	@ (80138e4 <tcp_receive+0xb04>)
 80136c2:	881b      	ldrh	r3, [r3, #0]
 80136c4:	461a      	mov	r2, r3
 80136c6:	4b88      	ldr	r3, [pc, #544]	@ (80138e8 <tcp_receive+0xb08>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	441a      	add	r2, r3
 80136cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	dd4d      	ble.n	8013774 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80136d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	b29a      	uxth	r2, r3
 80136e0:	4b81      	ldr	r3, [pc, #516]	@ (80138e8 <tcp_receive+0xb08>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	1ad3      	subs	r3, r2, r3
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	4b80      	ldr	r3, [pc, #512]	@ (80138ec <tcp_receive+0xb0c>)
 80136ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80136ee:	4b7f      	ldr	r3, [pc, #508]	@ (80138ec <tcp_receive+0xb0c>)
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	899b      	ldrh	r3, [r3, #12]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fa fc06 	bl	800df08 <lwip_htons>
 80136fc:	4603      	mov	r3, r0
 80136fe:	b2db      	uxtb	r3, r3
 8013700:	f003 0302 	and.w	r3, r3, #2
 8013704:	2b00      	cmp	r3, #0
 8013706:	d005      	beq.n	8013714 <tcp_receive+0x934>
                inseg.len -= 1;
 8013708:	4b78      	ldr	r3, [pc, #480]	@ (80138ec <tcp_receive+0xb0c>)
 801370a:	891b      	ldrh	r3, [r3, #8]
 801370c:	3b01      	subs	r3, #1
 801370e:	b29a      	uxth	r2, r3
 8013710:	4b76      	ldr	r3, [pc, #472]	@ (80138ec <tcp_receive+0xb0c>)
 8013712:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013714:	4b75      	ldr	r3, [pc, #468]	@ (80138ec <tcp_receive+0xb0c>)
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	4a74      	ldr	r2, [pc, #464]	@ (80138ec <tcp_receive+0xb0c>)
 801371a:	8912      	ldrh	r2, [r2, #8]
 801371c:	4611      	mov	r1, r2
 801371e:	4618      	mov	r0, r3
 8013720:	f7fb fe18 	bl	800f354 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013724:	4b71      	ldr	r3, [pc, #452]	@ (80138ec <tcp_receive+0xb0c>)
 8013726:	891c      	ldrh	r4, [r3, #8]
 8013728:	4b70      	ldr	r3, [pc, #448]	@ (80138ec <tcp_receive+0xb0c>)
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	899b      	ldrh	r3, [r3, #12]
 801372e:	b29b      	uxth	r3, r3
 8013730:	4618      	mov	r0, r3
 8013732:	f7fa fbe9 	bl	800df08 <lwip_htons>
 8013736:	4603      	mov	r3, r0
 8013738:	b2db      	uxtb	r3, r3
 801373a:	f003 0303 	and.w	r3, r3, #3
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <tcp_receive+0x966>
 8013742:	2301      	movs	r3, #1
 8013744:	e000      	b.n	8013748 <tcp_receive+0x968>
 8013746:	2300      	movs	r3, #0
 8013748:	4423      	add	r3, r4
 801374a:	b29a      	uxth	r2, r3
 801374c:	4b65      	ldr	r3, [pc, #404]	@ (80138e4 <tcp_receive+0xb04>)
 801374e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013750:	4b64      	ldr	r3, [pc, #400]	@ (80138e4 <tcp_receive+0xb04>)
 8013752:	881b      	ldrh	r3, [r3, #0]
 8013754:	461a      	mov	r2, r3
 8013756:	4b64      	ldr	r3, [pc, #400]	@ (80138e8 <tcp_receive+0xb08>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	441a      	add	r2, r3
 801375c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	429a      	cmp	r2, r3
 8013764:	d006      	beq.n	8013774 <tcp_receive+0x994>
 8013766:	4b62      	ldr	r3, [pc, #392]	@ (80138f0 <tcp_receive+0xb10>)
 8013768:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801376c:	4961      	ldr	r1, [pc, #388]	@ (80138f4 <tcp_receive+0xb14>)
 801376e:	4862      	ldr	r0, [pc, #392]	@ (80138f8 <tcp_receive+0xb18>)
 8013770:	f006 f8c0 	bl	80198f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013778:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801377a:	4b5a      	ldr	r3, [pc, #360]	@ (80138e4 <tcp_receive+0xb04>)
 801377c:	881b      	ldrh	r3, [r3, #0]
 801377e:	461a      	mov	r2, r3
 8013780:	4b59      	ldr	r3, [pc, #356]	@ (80138e8 <tcp_receive+0xb08>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	441a      	add	r2, r3
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801378e:	4b55      	ldr	r3, [pc, #340]	@ (80138e4 <tcp_receive+0xb04>)
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	429a      	cmp	r2, r3
 8013794:	d206      	bcs.n	80137a4 <tcp_receive+0x9c4>
 8013796:	4b56      	ldr	r3, [pc, #344]	@ (80138f0 <tcp_receive+0xb10>)
 8013798:	f240 6207 	movw	r2, #1543	@ 0x607
 801379c:	4957      	ldr	r1, [pc, #348]	@ (80138fc <tcp_receive+0xb1c>)
 801379e:	4856      	ldr	r0, [pc, #344]	@ (80138f8 <tcp_receive+0xb18>)
 80137a0:	f006 f8a8 	bl	80198f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80137a8:	4b4e      	ldr	r3, [pc, #312]	@ (80138e4 <tcp_receive+0xb04>)
 80137aa:	881b      	ldrh	r3, [r3, #0]
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7fc feb1 	bl	801051c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80137ba:	4b4c      	ldr	r3, [pc, #304]	@ (80138ec <tcp_receive+0xb0c>)
 80137bc:	685b      	ldr	r3, [r3, #4]
 80137be:	891b      	ldrh	r3, [r3, #8]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d006      	beq.n	80137d2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80137c4:	4b49      	ldr	r3, [pc, #292]	@ (80138ec <tcp_receive+0xb0c>)
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	4a4d      	ldr	r2, [pc, #308]	@ (8013900 <tcp_receive+0xb20>)
 80137ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80137cc:	4b47      	ldr	r3, [pc, #284]	@ (80138ec <tcp_receive+0xb0c>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80137d2:	4b46      	ldr	r3, [pc, #280]	@ (80138ec <tcp_receive+0xb0c>)
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	899b      	ldrh	r3, [r3, #12]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fa fb94 	bl	800df08 <lwip_htons>
 80137e0:	4603      	mov	r3, r0
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	f003 0301 	and.w	r3, r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	f000 80b8 	beq.w	801395e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80137ee:	4b45      	ldr	r3, [pc, #276]	@ (8013904 <tcp_receive+0xb24>)
 80137f0:	781b      	ldrb	r3, [r3, #0]
 80137f2:	f043 0320 	orr.w	r3, r3, #32
 80137f6:	b2da      	uxtb	r2, r3
 80137f8:	4b42      	ldr	r3, [pc, #264]	@ (8013904 <tcp_receive+0xb24>)
 80137fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80137fc:	e0af      	b.n	801395e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013802:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	4a36      	ldr	r2, [pc, #216]	@ (80138e8 <tcp_receive+0xb08>)
 801380e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	891b      	ldrh	r3, [r3, #8]
 8013814:	461c      	mov	r4, r3
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	899b      	ldrh	r3, [r3, #12]
 801381c:	b29b      	uxth	r3, r3
 801381e:	4618      	mov	r0, r3
 8013820:	f7fa fb72 	bl	800df08 <lwip_htons>
 8013824:	4603      	mov	r3, r0
 8013826:	b2db      	uxtb	r3, r3
 8013828:	f003 0303 	and.w	r3, r3, #3
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <tcp_receive+0xa54>
 8013830:	2301      	movs	r3, #1
 8013832:	e000      	b.n	8013836 <tcp_receive+0xa56>
 8013834:	2300      	movs	r3, #0
 8013836:	191a      	adds	r2, r3, r4
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801383c:	441a      	add	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013846:	461c      	mov	r4, r3
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	891b      	ldrh	r3, [r3, #8]
 801384c:	461d      	mov	r5, r3
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	68db      	ldr	r3, [r3, #12]
 8013852:	899b      	ldrh	r3, [r3, #12]
 8013854:	b29b      	uxth	r3, r3
 8013856:	4618      	mov	r0, r3
 8013858:	f7fa fb56 	bl	800df08 <lwip_htons>
 801385c:	4603      	mov	r3, r0
 801385e:	b2db      	uxtb	r3, r3
 8013860:	f003 0303 	and.w	r3, r3, #3
 8013864:	2b00      	cmp	r3, #0
 8013866:	d001      	beq.n	801386c <tcp_receive+0xa8c>
 8013868:	2301      	movs	r3, #1
 801386a:	e000      	b.n	801386e <tcp_receive+0xa8e>
 801386c:	2300      	movs	r3, #0
 801386e:	442b      	add	r3, r5
 8013870:	429c      	cmp	r4, r3
 8013872:	d206      	bcs.n	8013882 <tcp_receive+0xaa2>
 8013874:	4b1e      	ldr	r3, [pc, #120]	@ (80138f0 <tcp_receive+0xb10>)
 8013876:	f240 622b 	movw	r2, #1579	@ 0x62b
 801387a:	4923      	ldr	r1, [pc, #140]	@ (8013908 <tcp_receive+0xb28>)
 801387c:	481e      	ldr	r0, [pc, #120]	@ (80138f8 <tcp_receive+0xb18>)
 801387e:	f006 f839 	bl	80198f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	891b      	ldrh	r3, [r3, #8]
 8013886:	461c      	mov	r4, r3
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	899b      	ldrh	r3, [r3, #12]
 801388e:	b29b      	uxth	r3, r3
 8013890:	4618      	mov	r0, r3
 8013892:	f7fa fb39 	bl	800df08 <lwip_htons>
 8013896:	4603      	mov	r3, r0
 8013898:	b2db      	uxtb	r3, r3
 801389a:	f003 0303 	and.w	r3, r3, #3
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d001      	beq.n	80138a6 <tcp_receive+0xac6>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e000      	b.n	80138a8 <tcp_receive+0xac8>
 80138a6:	2300      	movs	r3, #0
 80138a8:	1919      	adds	r1, r3, r4
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80138ae:	b28b      	uxth	r3, r1
 80138b0:	1ad3      	subs	r3, r2, r3
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f7fc fe2f 	bl	801051c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	891b      	ldrh	r3, [r3, #8]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d028      	beq.n	801391a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80138c8:	4b0d      	ldr	r3, [pc, #52]	@ (8013900 <tcp_receive+0xb20>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d01d      	beq.n	801390c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80138d0:	4b0b      	ldr	r3, [pc, #44]	@ (8013900 <tcp_receive+0xb20>)
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	4619      	mov	r1, r3
 80138da:	4610      	mov	r0, r2
 80138dc:	f7fb ff8e 	bl	800f7fc <pbuf_cat>
 80138e0:	e018      	b.n	8013914 <tcp_receive+0xb34>
 80138e2:	bf00      	nop
 80138e4:	20011d5a 	.word	0x20011d5a
 80138e8:	20011d50 	.word	0x20011d50
 80138ec:	20011d30 	.word	0x20011d30
 80138f0:	0801dd88 	.word	0x0801dd88
 80138f4:	0801e168 	.word	0x0801e168
 80138f8:	0801ddd4 	.word	0x0801ddd4
 80138fc:	0801e1a4 	.word	0x0801e1a4
 8013900:	20011d60 	.word	0x20011d60
 8013904:	20011d5d 	.word	0x20011d5d
 8013908:	0801e1c4 	.word	0x0801e1c4
            } else {
              recv_data = cseg->p;
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	4a70      	ldr	r2, [pc, #448]	@ (8013ad4 <tcp_receive+0xcf4>)
 8013912:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	2200      	movs	r2, #0
 8013918:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	899b      	ldrh	r3, [r3, #12]
 8013920:	b29b      	uxth	r3, r3
 8013922:	4618      	mov	r0, r3
 8013924:	f7fa faf0 	bl	800df08 <lwip_htons>
 8013928:	4603      	mov	r3, r0
 801392a:	b2db      	uxtb	r3, r3
 801392c:	f003 0301 	and.w	r3, r3, #1
 8013930:	2b00      	cmp	r3, #0
 8013932:	d00d      	beq.n	8013950 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013934:	4b68      	ldr	r3, [pc, #416]	@ (8013ad8 <tcp_receive+0xcf8>)
 8013936:	781b      	ldrb	r3, [r3, #0]
 8013938:	f043 0320 	orr.w	r3, r3, #32
 801393c:	b2da      	uxtb	r2, r3
 801393e:	4b66      	ldr	r3, [pc, #408]	@ (8013ad8 <tcp_receive+0xcf8>)
 8013940:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	7d1b      	ldrb	r3, [r3, #20]
 8013946:	2b04      	cmp	r3, #4
 8013948:	d102      	bne.n	8013950 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	2207      	movs	r2, #7
 801394e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013958:	68b8      	ldr	r0, [r7, #8]
 801395a:	f7fd fb06 	bl	8010f6a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013962:	2b00      	cmp	r3, #0
 8013964:	d008      	beq.n	8013978 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	685a      	ldr	r2, [r3, #4]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013972:	429a      	cmp	r2, r3
 8013974:	f43f af43 	beq.w	80137fe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	8b5b      	ldrh	r3, [r3, #26]
 801397c:	f003 0301 	and.w	r3, r3, #1
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00e      	beq.n	80139a2 <tcp_receive+0xbc2>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	8b5b      	ldrh	r3, [r3, #26]
 8013988:	f023 0301 	bic.w	r3, r3, #1
 801398c:	b29a      	uxth	r2, r3
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	835a      	strh	r2, [r3, #26]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8b5b      	ldrh	r3, [r3, #26]
 8013996:	f043 0302 	orr.w	r3, r3, #2
 801399a:	b29a      	uxth	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80139a0:	e187      	b.n	8013cb2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	8b5b      	ldrh	r3, [r3, #26]
 80139a6:	f043 0301 	orr.w	r3, r3, #1
 80139aa:	b29a      	uxth	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80139b0:	e17f      	b.n	8013cb2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d106      	bne.n	80139c8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80139ba:	4848      	ldr	r0, [pc, #288]	@ (8013adc <tcp_receive+0xcfc>)
 80139bc:	f7fd faee 	bl	8010f9c <tcp_seg_copy>
 80139c0:	4602      	mov	r2, r0
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80139c6:	e16c      	b.n	8013ca2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80139c8:	2300      	movs	r3, #0
 80139ca:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139d2:	e156      	b.n	8013c82 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80139d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	685a      	ldr	r2, [r3, #4]
 80139da:	4b41      	ldr	r3, [pc, #260]	@ (8013ae0 <tcp_receive+0xd00>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	429a      	cmp	r2, r3
 80139e0:	d11d      	bne.n	8013a1e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80139e2:	4b3e      	ldr	r3, [pc, #248]	@ (8013adc <tcp_receive+0xcfc>)
 80139e4:	891a      	ldrh	r2, [r3, #8]
 80139e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e8:	891b      	ldrh	r3, [r3, #8]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	f240 814e 	bls.w	8013c8c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80139f0:	483a      	ldr	r0, [pc, #232]	@ (8013adc <tcp_receive+0xcfc>)
 80139f2:	f7fd fad3 	bl	8010f9c <tcp_seg_copy>
 80139f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	f000 8148 	beq.w	8013c90 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d003      	beq.n	8013a0e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a08:	697a      	ldr	r2, [r7, #20]
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	e002      	b.n	8013a14 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	697a      	ldr	r2, [r7, #20]
 8013a12:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013a14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013a16:	6978      	ldr	r0, [r7, #20]
 8013a18:	f7ff f8de 	bl	8012bd8 <tcp_oos_insert_segment>
                }
                break;
 8013a1c:	e138      	b.n	8013c90 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d117      	bne.n	8013a54 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013a24:	4b2e      	ldr	r3, [pc, #184]	@ (8013ae0 <tcp_receive+0xd00>)
 8013a26:	681a      	ldr	r2, [r3, #0]
 8013a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	da57      	bge.n	8013ae4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a34:	4829      	ldr	r0, [pc, #164]	@ (8013adc <tcp_receive+0xcfc>)
 8013a36:	f7fd fab1 	bl	8010f9c <tcp_seg_copy>
 8013a3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	f000 8128 	beq.w	8013c94 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	69ba      	ldr	r2, [r7, #24]
 8013a48:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013a4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013a4c:	69b8      	ldr	r0, [r7, #24]
 8013a4e:	f7ff f8c3 	bl	8012bd8 <tcp_oos_insert_segment>
                  }
                  break;
 8013a52:	e11f      	b.n	8013c94 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013a54:	4b22      	ldr	r3, [pc, #136]	@ (8013ae0 <tcp_receive+0xd00>)
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	3b01      	subs	r3, #1
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	db3e      	blt.n	8013ae4 <tcp_receive+0xd04>
 8013a66:	4b1e      	ldr	r3, [pc, #120]	@ (8013ae0 <tcp_receive+0xd00>)
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6c:	68db      	ldr	r3, [r3, #12]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	3301      	adds	r3, #1
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	dc35      	bgt.n	8013ae4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a78:	4818      	ldr	r0, [pc, #96]	@ (8013adc <tcp_receive+0xcfc>)
 8013a7a:	f7fd fa8f 	bl	8010f9c <tcp_seg_copy>
 8013a7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013a80:	69fb      	ldr	r3, [r7, #28]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f000 8108 	beq.w	8013c98 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a8a:	68db      	ldr	r3, [r3, #12]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a90:	8912      	ldrh	r2, [r2, #8]
 8013a92:	441a      	add	r2, r3
 8013a94:	4b12      	ldr	r3, [pc, #72]	@ (8013ae0 <tcp_receive+0xd00>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	1ad3      	subs	r3, r2, r3
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	dd12      	ble.n	8013ac4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013a9e:	4b10      	ldr	r3, [pc, #64]	@ (8013ae0 <tcp_receive+0xd00>)
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	1ad3      	subs	r3, r2, r3
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ab2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ab6:	685a      	ldr	r2, [r3, #4]
 8013ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aba:	891b      	ldrh	r3, [r3, #8]
 8013abc:	4619      	mov	r1, r3
 8013abe:	4610      	mov	r0, r2
 8013ac0:	f7fb fc48 	bl	800f354 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac6:	69fa      	ldr	r2, [r7, #28]
 8013ac8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013aca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013acc:	69f8      	ldr	r0, [r7, #28]
 8013ace:	f7ff f883 	bl	8012bd8 <tcp_oos_insert_segment>
                  }
                  break;
 8013ad2:	e0e1      	b.n	8013c98 <tcp_receive+0xeb8>
 8013ad4:	20011d60 	.word	0x20011d60
 8013ad8:	20011d5d 	.word	0x20011d5d
 8013adc:	20011d30 	.word	0x20011d30
 8013ae0:	20011d50 	.word	0x20011d50
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f040 80c5 	bne.w	8013c7c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013af2:	4b7f      	ldr	r3, [pc, #508]	@ (8013cf0 <tcp_receive+0xf10>)
 8013af4:	681a      	ldr	r2, [r3, #0]
 8013af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f340 80bc 	ble.w	8013c7c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	899b      	ldrh	r3, [r3, #12]
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fa f9fb 	bl	800df08 <lwip_htons>
 8013b12:	4603      	mov	r3, r0
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	f003 0301 	and.w	r3, r3, #1
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f040 80be 	bne.w	8013c9c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013b20:	4874      	ldr	r0, [pc, #464]	@ (8013cf4 <tcp_receive+0xf14>)
 8013b22:	f7fd fa3b 	bl	8010f9c <tcp_seg_copy>
 8013b26:	4602      	mov	r2, r0
 8013b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	f000 80b5 	beq.w	8013ca0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b3e:	8912      	ldrh	r2, [r2, #8]
 8013b40:	441a      	add	r2, r3
 8013b42:	4b6b      	ldr	r3, [pc, #428]	@ (8013cf0 <tcp_receive+0xf10>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	1ad3      	subs	r3, r2, r3
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	dd12      	ble.n	8013b72 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013b4c:	4b68      	ldr	r3, [pc, #416]	@ (8013cf0 <tcp_receive+0xf10>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	b29b      	uxth	r3, r3
 8013b5a:	1ad3      	subs	r3, r2, r3
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b64:	685a      	ldr	r2, [r3, #4]
 8013b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b68:	891b      	ldrh	r3, [r3, #8]
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	4610      	mov	r0, r2
 8013b6e:	f7fb fbf1 	bl	800f354 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013b72:	4b61      	ldr	r3, [pc, #388]	@ (8013cf8 <tcp_receive+0xf18>)
 8013b74:	881b      	ldrh	r3, [r3, #0]
 8013b76:	461a      	mov	r2, r3
 8013b78:	4b5d      	ldr	r3, [pc, #372]	@ (8013cf0 <tcp_receive+0xf10>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	441a      	add	r2, r3
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b82:	6879      	ldr	r1, [r7, #4]
 8013b84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013b86:	440b      	add	r3, r1
 8013b88:	1ad3      	subs	r3, r2, r3
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f340 8088 	ble.w	8013ca0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	68db      	ldr	r3, [r3, #12]
 8013b96:	899b      	ldrh	r3, [r3, #12]
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fa f9b4 	bl	800df08 <lwip_htons>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	b2db      	uxtb	r3, r3
 8013ba4:	f003 0301 	and.w	r3, r3, #1
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d021      	beq.n	8013bf0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	68db      	ldr	r3, [r3, #12]
 8013bb2:	899b      	ldrh	r3, [r3, #12]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	b21b      	sxth	r3, r3
 8013bb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013bbc:	b21c      	sxth	r4, r3
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	899b      	ldrh	r3, [r3, #12]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fa f99d 	bl	800df08 <lwip_htons>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f7fa f995 	bl	800df08 <lwip_htons>
 8013bde:	4603      	mov	r3, r0
 8013be0:	b21b      	sxth	r3, r3
 8013be2:	4323      	orrs	r3, r4
 8013be4:	b21a      	sxth	r2, r3
 8013be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	68db      	ldr	r3, [r3, #12]
 8013bec:	b292      	uxth	r2, r2
 8013bee:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b299      	uxth	r1, r3
 8013bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8013cf0 <tcp_receive+0xf10>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	1a8a      	subs	r2, r1, r2
 8013c0a:	b292      	uxth	r2, r2
 8013c0c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	891b      	ldrh	r3, [r3, #8]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	4610      	mov	r0, r2
 8013c1e:	f7fb fb99 	bl	800f354 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	891c      	ldrh	r4, [r3, #8]
 8013c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	899b      	ldrh	r3, [r3, #12]
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fa f968 	bl	800df08 <lwip_htons>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	b2db      	uxtb	r3, r3
 8013c3c:	f003 0303 	and.w	r3, r3, #3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d001      	beq.n	8013c48 <tcp_receive+0xe68>
 8013c44:	2301      	movs	r3, #1
 8013c46:	e000      	b.n	8013c4a <tcp_receive+0xe6a>
 8013c48:	2300      	movs	r3, #0
 8013c4a:	4423      	add	r3, r4
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8013cf8 <tcp_receive+0xf18>)
 8013c50:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013c52:	4b29      	ldr	r3, [pc, #164]	@ (8013cf8 <tcp_receive+0xf18>)
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	461a      	mov	r2, r3
 8013c58:	4b25      	ldr	r3, [pc, #148]	@ (8013cf0 <tcp_receive+0xf10>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	441a      	add	r2, r3
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c62:	6879      	ldr	r1, [r7, #4]
 8013c64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013c66:	440b      	add	r3, r1
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d019      	beq.n	8013ca0 <tcp_receive+0xec0>
 8013c6c:	4b23      	ldr	r3, [pc, #140]	@ (8013cfc <tcp_receive+0xf1c>)
 8013c6e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013c72:	4923      	ldr	r1, [pc, #140]	@ (8013d00 <tcp_receive+0xf20>)
 8013c74:	4823      	ldr	r0, [pc, #140]	@ (8013d04 <tcp_receive+0xf24>)
 8013c76:	f005 fe3d 	bl	80198f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013c7a:	e011      	b.n	8013ca0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f47f aea5 	bne.w	80139d4 <tcp_receive+0xbf4>
 8013c8a:	e00a      	b.n	8013ca2 <tcp_receive+0xec2>
                break;
 8013c8c:	bf00      	nop
 8013c8e:	e008      	b.n	8013ca2 <tcp_receive+0xec2>
                break;
 8013c90:	bf00      	nop
 8013c92:	e006      	b.n	8013ca2 <tcp_receive+0xec2>
                  break;
 8013c94:	bf00      	nop
 8013c96:	e004      	b.n	8013ca2 <tcp_receive+0xec2>
                  break;
 8013c98:	bf00      	nop
 8013c9a:	e002      	b.n	8013ca2 <tcp_receive+0xec2>
                  break;
 8013c9c:	bf00      	nop
 8013c9e:	e000      	b.n	8013ca2 <tcp_receive+0xec2>
                break;
 8013ca0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f001 fe88 	bl	80159b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013ca8:	e003      	b.n	8013cb2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f001 fe84 	bl	80159b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013cb0:	e01a      	b.n	8013ce8 <tcp_receive+0xf08>
 8013cb2:	e019      	b.n	8013ce8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8013cf0 <tcp_receive+0xf10>)
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	db0a      	blt.n	8013cd8 <tcp_receive+0xef8>
 8013cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8013cf0 <tcp_receive+0xf10>)
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cca:	6879      	ldr	r1, [r7, #4]
 8013ccc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013cce:	440b      	add	r3, r1
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	dd07      	ble.n	8013ce8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	8b5b      	ldrh	r3, [r3, #26]
 8013cdc:	f043 0302 	orr.w	r3, r3, #2
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013ce6:	e7ff      	b.n	8013ce8 <tcp_receive+0xf08>
 8013ce8:	bf00      	nop
 8013cea:	3750      	adds	r7, #80	@ 0x50
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bdb0      	pop	{r4, r5, r7, pc}
 8013cf0:	20011d50 	.word	0x20011d50
 8013cf4:	20011d30 	.word	0x20011d30
 8013cf8:	20011d5a 	.word	0x20011d5a
 8013cfc:	0801dd88 	.word	0x0801dd88
 8013d00:	0801e130 	.word	0x0801e130
 8013d04:	0801ddd4 	.word	0x0801ddd4

08013d08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013d0e:	4b15      	ldr	r3, [pc, #84]	@ (8013d64 <tcp_get_next_optbyte+0x5c>)
 8013d10:	881b      	ldrh	r3, [r3, #0]
 8013d12:	1c5a      	adds	r2, r3, #1
 8013d14:	b291      	uxth	r1, r2
 8013d16:	4a13      	ldr	r2, [pc, #76]	@ (8013d64 <tcp_get_next_optbyte+0x5c>)
 8013d18:	8011      	strh	r1, [r2, #0]
 8013d1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013d1c:	4b12      	ldr	r3, [pc, #72]	@ (8013d68 <tcp_get_next_optbyte+0x60>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d004      	beq.n	8013d2e <tcp_get_next_optbyte+0x26>
 8013d24:	4b11      	ldr	r3, [pc, #68]	@ (8013d6c <tcp_get_next_optbyte+0x64>)
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	88fa      	ldrh	r2, [r7, #6]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d208      	bcs.n	8013d40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013d2e:	4b10      	ldr	r3, [pc, #64]	@ (8013d70 <tcp_get_next_optbyte+0x68>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	3314      	adds	r3, #20
 8013d34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013d36:	88fb      	ldrh	r3, [r7, #6]
 8013d38:	683a      	ldr	r2, [r7, #0]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	e00b      	b.n	8013d58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013d40:	88fb      	ldrh	r3, [r7, #6]
 8013d42:	b2da      	uxtb	r2, r3
 8013d44:	4b09      	ldr	r3, [pc, #36]	@ (8013d6c <tcp_get_next_optbyte+0x64>)
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	b2db      	uxtb	r3, r3
 8013d4a:	1ad3      	subs	r3, r2, r3
 8013d4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013d4e:	4b06      	ldr	r3, [pc, #24]	@ (8013d68 <tcp_get_next_optbyte+0x60>)
 8013d50:	681a      	ldr	r2, [r3, #0]
 8013d52:	797b      	ldrb	r3, [r7, #5]
 8013d54:	4413      	add	r3, r2
 8013d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr
 8013d64:	20011d4c 	.word	0x20011d4c
 8013d68:	20011d48 	.word	0x20011d48
 8013d6c:	20011d46 	.word	0x20011d46
 8013d70:	20011d40 	.word	0x20011d40

08013d74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b084      	sub	sp, #16
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d106      	bne.n	8013d90 <tcp_parseopt+0x1c>
 8013d82:	4b32      	ldr	r3, [pc, #200]	@ (8013e4c <tcp_parseopt+0xd8>)
 8013d84:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013d88:	4931      	ldr	r1, [pc, #196]	@ (8013e50 <tcp_parseopt+0xdc>)
 8013d8a:	4832      	ldr	r0, [pc, #200]	@ (8013e54 <tcp_parseopt+0xe0>)
 8013d8c:	f005 fdb2 	bl	80198f4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013d90:	4b31      	ldr	r3, [pc, #196]	@ (8013e58 <tcp_parseopt+0xe4>)
 8013d92:	881b      	ldrh	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d056      	beq.n	8013e46 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013d98:	4b30      	ldr	r3, [pc, #192]	@ (8013e5c <tcp_parseopt+0xe8>)
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	801a      	strh	r2, [r3, #0]
 8013d9e:	e046      	b.n	8013e2e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013da0:	f7ff ffb2 	bl	8013d08 <tcp_get_next_optbyte>
 8013da4:	4603      	mov	r3, r0
 8013da6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013da8:	7bfb      	ldrb	r3, [r7, #15]
 8013daa:	2b02      	cmp	r3, #2
 8013dac:	d006      	beq.n	8013dbc <tcp_parseopt+0x48>
 8013dae:	2b02      	cmp	r3, #2
 8013db0:	dc2a      	bgt.n	8013e08 <tcp_parseopt+0x94>
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d042      	beq.n	8013e3c <tcp_parseopt+0xc8>
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d038      	beq.n	8013e2c <tcp_parseopt+0xb8>
 8013dba:	e025      	b.n	8013e08 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013dbc:	f7ff ffa4 	bl	8013d08 <tcp_get_next_optbyte>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	2b04      	cmp	r3, #4
 8013dc4:	d13c      	bne.n	8013e40 <tcp_parseopt+0xcc>
 8013dc6:	4b25      	ldr	r3, [pc, #148]	@ (8013e5c <tcp_parseopt+0xe8>)
 8013dc8:	881b      	ldrh	r3, [r3, #0]
 8013dca:	3301      	adds	r3, #1
 8013dcc:	4a22      	ldr	r2, [pc, #136]	@ (8013e58 <tcp_parseopt+0xe4>)
 8013dce:	8812      	ldrh	r2, [r2, #0]
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	da35      	bge.n	8013e40 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013dd4:	f7ff ff98 	bl	8013d08 <tcp_get_next_optbyte>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	021b      	lsls	r3, r3, #8
 8013ddc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013dde:	f7ff ff93 	bl	8013d08 <tcp_get_next_optbyte>
 8013de2:	4603      	mov	r3, r0
 8013de4:	461a      	mov	r2, r3
 8013de6:	89bb      	ldrh	r3, [r7, #12]
 8013de8:	4313      	orrs	r3, r2
 8013dea:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013dec:	89bb      	ldrh	r3, [r7, #12]
 8013dee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013df2:	d804      	bhi.n	8013dfe <tcp_parseopt+0x8a>
 8013df4:	89bb      	ldrh	r3, [r7, #12]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d001      	beq.n	8013dfe <tcp_parseopt+0x8a>
 8013dfa:	89ba      	ldrh	r2, [r7, #12]
 8013dfc:	e001      	b.n	8013e02 <tcp_parseopt+0x8e>
 8013dfe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013e06:	e012      	b.n	8013e2e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013e08:	f7ff ff7e 	bl	8013d08 <tcp_get_next_optbyte>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013e10:	7afb      	ldrb	r3, [r7, #11]
 8013e12:	2b01      	cmp	r3, #1
 8013e14:	d916      	bls.n	8013e44 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013e16:	7afb      	ldrb	r3, [r7, #11]
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	4b10      	ldr	r3, [pc, #64]	@ (8013e5c <tcp_parseopt+0xe8>)
 8013e1c:	881b      	ldrh	r3, [r3, #0]
 8013e1e:	4413      	add	r3, r2
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	3b02      	subs	r3, #2
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	4b0d      	ldr	r3, [pc, #52]	@ (8013e5c <tcp_parseopt+0xe8>)
 8013e28:	801a      	strh	r2, [r3, #0]
 8013e2a:	e000      	b.n	8013e2e <tcp_parseopt+0xba>
          break;
 8013e2c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8013e5c <tcp_parseopt+0xe8>)
 8013e30:	881a      	ldrh	r2, [r3, #0]
 8013e32:	4b09      	ldr	r3, [pc, #36]	@ (8013e58 <tcp_parseopt+0xe4>)
 8013e34:	881b      	ldrh	r3, [r3, #0]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d3b2      	bcc.n	8013da0 <tcp_parseopt+0x2c>
 8013e3a:	e004      	b.n	8013e46 <tcp_parseopt+0xd2>
          return;
 8013e3c:	bf00      	nop
 8013e3e:	e002      	b.n	8013e46 <tcp_parseopt+0xd2>
            return;
 8013e40:	bf00      	nop
 8013e42:	e000      	b.n	8013e46 <tcp_parseopt+0xd2>
            return;
 8013e44:	bf00      	nop
      }
    }
  }
}
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	0801dd88 	.word	0x0801dd88
 8013e50:	0801e1ec 	.word	0x0801e1ec
 8013e54:	0801ddd4 	.word	0x0801ddd4
 8013e58:	20011d44 	.word	0x20011d44
 8013e5c:	20011d4c 	.word	0x20011d4c

08013e60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013e60:	b480      	push	{r7}
 8013e62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013e64:	4b05      	ldr	r3, [pc, #20]	@ (8013e7c <tcp_trigger_input_pcb_close+0x1c>)
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	f043 0310 	orr.w	r3, r3, #16
 8013e6c:	b2da      	uxtb	r2, r3
 8013e6e:	4b03      	ldr	r3, [pc, #12]	@ (8013e7c <tcp_trigger_input_pcb_close+0x1c>)
 8013e70:	701a      	strb	r2, [r3, #0]
}
 8013e72:	bf00      	nop
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr
 8013e7c:	20011d5d 	.word	0x20011d5d

08013e80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	60f8      	str	r0, [r7, #12]
 8013e88:	60b9      	str	r1, [r7, #8]
 8013e8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d00a      	beq.n	8013ea8 <tcp_route+0x28>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	7a1b      	ldrb	r3, [r3, #8]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d006      	beq.n	8013ea8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	7a1b      	ldrb	r3, [r3, #8]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fb f850 	bl	800ef44 <netif_get_by_index>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	e003      	b.n	8013eb0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f003 fc49 	bl	8017740 <ip4_route>
 8013eae:	4603      	mov	r3, r0
  }
}
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3710      	adds	r7, #16
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013eb8:	b590      	push	{r4, r7, lr}
 8013eba:	b087      	sub	sp, #28
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	603b      	str	r3, [r7, #0]
 8013ec4:	4613      	mov	r3, r2
 8013ec6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d105      	bne.n	8013eda <tcp_create_segment+0x22>
 8013ece:	4b43      	ldr	r3, [pc, #268]	@ (8013fdc <tcp_create_segment+0x124>)
 8013ed0:	22a3      	movs	r2, #163	@ 0xa3
 8013ed2:	4943      	ldr	r1, [pc, #268]	@ (8013fe0 <tcp_create_segment+0x128>)
 8013ed4:	4843      	ldr	r0, [pc, #268]	@ (8013fe4 <tcp_create_segment+0x12c>)
 8013ed6:	f005 fd0d 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d105      	bne.n	8013eec <tcp_create_segment+0x34>
 8013ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8013fdc <tcp_create_segment+0x124>)
 8013ee2:	22a4      	movs	r2, #164	@ 0xa4
 8013ee4:	4940      	ldr	r1, [pc, #256]	@ (8013fe8 <tcp_create_segment+0x130>)
 8013ee6:	483f      	ldr	r0, [pc, #252]	@ (8013fe4 <tcp_create_segment+0x12c>)
 8013ee8:	f005 fd04 	bl	80198f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013eec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013ef0:	009b      	lsls	r3, r3, #2
 8013ef2:	b2db      	uxtb	r3, r3
 8013ef4:	f003 0304 	and.w	r3, r3, #4
 8013ef8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013efa:	2003      	movs	r0, #3
 8013efc:	f7fa fcba 	bl	800e874 <memp_malloc>
 8013f00:	6138      	str	r0, [r7, #16]
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d104      	bne.n	8013f12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013f08:	68b8      	ldr	r0, [r7, #8]
 8013f0a:	f7fb fba9 	bl	800f660 <pbuf_free>
    return NULL;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	e060      	b.n	8013fd4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013f18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	891a      	ldrh	r2, [r3, #8]
 8013f2a:	7dfb      	ldrb	r3, [r7, #23]
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	429a      	cmp	r2, r3
 8013f30:	d205      	bcs.n	8013f3e <tcp_create_segment+0x86>
 8013f32:	4b2a      	ldr	r3, [pc, #168]	@ (8013fdc <tcp_create_segment+0x124>)
 8013f34:	22b0      	movs	r2, #176	@ 0xb0
 8013f36:	492d      	ldr	r1, [pc, #180]	@ (8013fec <tcp_create_segment+0x134>)
 8013f38:	482a      	ldr	r0, [pc, #168]	@ (8013fe4 <tcp_create_segment+0x12c>)
 8013f3a:	f005 fcdb 	bl	80198f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	891a      	ldrh	r2, [r3, #8]
 8013f42:	7dfb      	ldrb	r3, [r7, #23]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013f4e:	2114      	movs	r1, #20
 8013f50:	68b8      	ldr	r0, [r7, #8]
 8013f52:	f7fb faef 	bl	800f534 <pbuf_add_header>
 8013f56:	4603      	mov	r3, r0
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d004      	beq.n	8013f66 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013f5c:	6938      	ldr	r0, [r7, #16]
 8013f5e:	f7fd f804 	bl	8010f6a <tcp_seg_free>
    return NULL;
 8013f62:	2300      	movs	r3, #0
 8013f64:	e036      	b.n	8013fd4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	685a      	ldr	r2, [r3, #4]
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	8ada      	ldrh	r2, [r3, #22]
 8013f74:	693b      	ldr	r3, [r7, #16]
 8013f76:	68dc      	ldr	r4, [r3, #12]
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f7f9 ffc5 	bl	800df08 <lwip_htons>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	8b1a      	ldrh	r2, [r3, #24]
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	68dc      	ldr	r4, [r3, #12]
 8013f8a:	4610      	mov	r0, r2
 8013f8c:	f7f9 ffbc 	bl	800df08 <lwip_htons>
 8013f90:	4603      	mov	r3, r0
 8013f92:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	68dc      	ldr	r4, [r3, #12]
 8013f98:	6838      	ldr	r0, [r7, #0]
 8013f9a:	f7f9 ffca 	bl	800df32 <lwip_htonl>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013fa2:	7dfb      	ldrb	r3, [r7, #23]
 8013fa4:	089b      	lsrs	r3, r3, #2
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	3305      	adds	r3, #5
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	031b      	lsls	r3, r3, #12
 8013fae:	b29a      	uxth	r2, r3
 8013fb0:	79fb      	ldrb	r3, [r7, #7]
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	4313      	orrs	r3, r2
 8013fb6:	b29a      	uxth	r2, r3
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	68dc      	ldr	r4, [r3, #12]
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	f7f9 ffa3 	bl	800df08 <lwip_htons>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	68db      	ldr	r3, [r3, #12]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	749a      	strb	r2, [r3, #18]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	74da      	strb	r2, [r3, #19]
  return seg;
 8013fd2:	693b      	ldr	r3, [r7, #16]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	371c      	adds	r7, #28
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	bd90      	pop	{r4, r7, pc}
 8013fdc:	0801e208 	.word	0x0801e208
 8013fe0:	0801e23c 	.word	0x0801e23c
 8013fe4:	0801e25c 	.word	0x0801e25c
 8013fe8:	0801e284 	.word	0x0801e284
 8013fec:	0801e2a8 	.word	0x0801e2a8

08013ff0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b086      	sub	sp, #24
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	607b      	str	r3, [r7, #4]
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	73fb      	strb	r3, [r7, #15]
 8013ffc:	460b      	mov	r3, r1
 8013ffe:	81bb      	strh	r3, [r7, #12]
 8014000:	4613      	mov	r3, r2
 8014002:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014004:	89bb      	ldrh	r3, [r7, #12]
 8014006:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d105      	bne.n	801401a <tcp_pbuf_prealloc+0x2a>
 801400e:	4b30      	ldr	r3, [pc, #192]	@ (80140d0 <tcp_pbuf_prealloc+0xe0>)
 8014010:	22e8      	movs	r2, #232	@ 0xe8
 8014012:	4930      	ldr	r1, [pc, #192]	@ (80140d4 <tcp_pbuf_prealloc+0xe4>)
 8014014:	4830      	ldr	r0, [pc, #192]	@ (80140d8 <tcp_pbuf_prealloc+0xe8>)
 8014016:	f005 fc6d 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801401a:	6a3b      	ldr	r3, [r7, #32]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d105      	bne.n	801402c <tcp_pbuf_prealloc+0x3c>
 8014020:	4b2b      	ldr	r3, [pc, #172]	@ (80140d0 <tcp_pbuf_prealloc+0xe0>)
 8014022:	22e9      	movs	r2, #233	@ 0xe9
 8014024:	492d      	ldr	r1, [pc, #180]	@ (80140dc <tcp_pbuf_prealloc+0xec>)
 8014026:	482c      	ldr	r0, [pc, #176]	@ (80140d8 <tcp_pbuf_prealloc+0xe8>)
 8014028:	f005 fc64 	bl	80198f4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801402c:	89ba      	ldrh	r2, [r7, #12]
 801402e:	897b      	ldrh	r3, [r7, #10]
 8014030:	429a      	cmp	r2, r3
 8014032:	d221      	bcs.n	8014078 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014038:	f003 0302 	and.w	r3, r3, #2
 801403c:	2b00      	cmp	r3, #0
 801403e:	d111      	bne.n	8014064 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014040:	6a3b      	ldr	r3, [r7, #32]
 8014042:	8b5b      	ldrh	r3, [r3, #26]
 8014044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014048:	2b00      	cmp	r3, #0
 801404a:	d115      	bne.n	8014078 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801404c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014050:	2b00      	cmp	r3, #0
 8014052:	d007      	beq.n	8014064 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014054:	6a3b      	ldr	r3, [r7, #32]
 8014056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8014058:	2b00      	cmp	r3, #0
 801405a:	d103      	bne.n	8014064 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801405c:	6a3b      	ldr	r3, [r7, #32]
 801405e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8014060:	2b00      	cmp	r3, #0
 8014062:	d009      	beq.n	8014078 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014064:	89bb      	ldrh	r3, [r7, #12]
 8014066:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801406a:	f023 0203 	bic.w	r2, r3, #3
 801406e:	897b      	ldrh	r3, [r7, #10]
 8014070:	4293      	cmp	r3, r2
 8014072:	bf28      	it	cs
 8014074:	4613      	movcs	r3, r2
 8014076:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014078:	8af9      	ldrh	r1, [r7, #22]
 801407a:	7bfb      	ldrb	r3, [r7, #15]
 801407c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014080:	4618      	mov	r0, r3
 8014082:	f7fb f809 	bl	800f098 <pbuf_alloc>
 8014086:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d101      	bne.n	8014092 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801408e:	2300      	movs	r3, #0
 8014090:	e019      	b.n	80140c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d006      	beq.n	80140a8 <tcp_pbuf_prealloc+0xb8>
 801409a:	4b0d      	ldr	r3, [pc, #52]	@ (80140d0 <tcp_pbuf_prealloc+0xe0>)
 801409c:	f240 120b 	movw	r2, #267	@ 0x10b
 80140a0:	490f      	ldr	r1, [pc, #60]	@ (80140e0 <tcp_pbuf_prealloc+0xf0>)
 80140a2:	480d      	ldr	r0, [pc, #52]	@ (80140d8 <tcp_pbuf_prealloc+0xe8>)
 80140a4:	f005 fc26 	bl	80198f4 <iprintf>
  *oversize = p->len - length;
 80140a8:	693b      	ldr	r3, [r7, #16]
 80140aa:	895a      	ldrh	r2, [r3, #10]
 80140ac:	89bb      	ldrh	r3, [r7, #12]
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	89ba      	ldrh	r2, [r7, #12]
 80140ba:	811a      	strh	r2, [r3, #8]
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	891a      	ldrh	r2, [r3, #8]
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	815a      	strh	r2, [r3, #10]
  return p;
 80140c4:	693b      	ldr	r3, [r7, #16]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3718      	adds	r7, #24
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}
 80140ce:	bf00      	nop
 80140d0:	0801e208 	.word	0x0801e208
 80140d4:	0801e2c0 	.word	0x0801e2c0
 80140d8:	0801e25c 	.word	0x0801e25c
 80140dc:	0801e2e4 	.word	0x0801e2e4
 80140e0:	0801e304 	.word	0x0801e304

080140e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	460b      	mov	r3, r1
 80140ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d106      	bne.n	8014104 <tcp_write_checks+0x20>
 80140f6:	4b33      	ldr	r3, [pc, #204]	@ (80141c4 <tcp_write_checks+0xe0>)
 80140f8:	f240 1233 	movw	r2, #307	@ 0x133
 80140fc:	4932      	ldr	r1, [pc, #200]	@ (80141c8 <tcp_write_checks+0xe4>)
 80140fe:	4833      	ldr	r0, [pc, #204]	@ (80141cc <tcp_write_checks+0xe8>)
 8014100:	f005 fbf8 	bl	80198f4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	7d1b      	ldrb	r3, [r3, #20]
 8014108:	2b04      	cmp	r3, #4
 801410a:	d00e      	beq.n	801412a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014110:	2b07      	cmp	r3, #7
 8014112:	d00a      	beq.n	801412a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014118:	2b02      	cmp	r3, #2
 801411a:	d006      	beq.n	801412a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014120:	2b03      	cmp	r3, #3
 8014122:	d002      	beq.n	801412a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014124:	f06f 030a 	mvn.w	r3, #10
 8014128:	e048      	b.n	80141bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801412a:	887b      	ldrh	r3, [r7, #2]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d101      	bne.n	8014134 <tcp_write_checks+0x50>
    return ERR_OK;
 8014130:	2300      	movs	r3, #0
 8014132:	e043      	b.n	80141bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801413a:	887a      	ldrh	r2, [r7, #2]
 801413c:	429a      	cmp	r2, r3
 801413e:	d909      	bls.n	8014154 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	8b5b      	ldrh	r3, [r3, #26]
 8014144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014148:	b29a      	uxth	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801414e:	f04f 33ff 	mov.w	r3, #4294967295
 8014152:	e033      	b.n	80141bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801415a:	2b08      	cmp	r3, #8
 801415c:	d909      	bls.n	8014172 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	8b5b      	ldrh	r3, [r3, #26]
 8014162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801416c:	f04f 33ff 	mov.w	r3, #4294967295
 8014170:	e024      	b.n	80141bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00f      	beq.n	801419c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014180:	2b00      	cmp	r3, #0
 8014182:	d11a      	bne.n	80141ba <tcp_write_checks+0xd6>
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014188:	2b00      	cmp	r3, #0
 801418a:	d116      	bne.n	80141ba <tcp_write_checks+0xd6>
 801418c:	4b0d      	ldr	r3, [pc, #52]	@ (80141c4 <tcp_write_checks+0xe0>)
 801418e:	f240 1255 	movw	r2, #341	@ 0x155
 8014192:	490f      	ldr	r1, [pc, #60]	@ (80141d0 <tcp_write_checks+0xec>)
 8014194:	480d      	ldr	r0, [pc, #52]	@ (80141cc <tcp_write_checks+0xe8>)
 8014196:	f005 fbad 	bl	80198f4 <iprintf>
 801419a:	e00e      	b.n	80141ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d103      	bne.n	80141ac <tcp_write_checks+0xc8>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d006      	beq.n	80141ba <tcp_write_checks+0xd6>
 80141ac:	4b05      	ldr	r3, [pc, #20]	@ (80141c4 <tcp_write_checks+0xe0>)
 80141ae:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80141b2:	4908      	ldr	r1, [pc, #32]	@ (80141d4 <tcp_write_checks+0xf0>)
 80141b4:	4805      	ldr	r0, [pc, #20]	@ (80141cc <tcp_write_checks+0xe8>)
 80141b6:	f005 fb9d 	bl	80198f4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	0801e208 	.word	0x0801e208
 80141c8:	0801e318 	.word	0x0801e318
 80141cc:	0801e25c 	.word	0x0801e25c
 80141d0:	0801e338 	.word	0x0801e338
 80141d4:	0801e374 	.word	0x0801e374

080141d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80141d8:	b590      	push	{r4, r7, lr}
 80141da:	b09b      	sub	sp, #108	@ 0x6c
 80141dc:	af04      	add	r7, sp, #16
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	4611      	mov	r1, r2
 80141e4:	461a      	mov	r2, r3
 80141e6:	460b      	mov	r3, r1
 80141e8:	80fb      	strh	r3, [r7, #6]
 80141ea:	4613      	mov	r3, r2
 80141ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80141ee:	2300      	movs	r3, #0
 80141f0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80141f2:	2300      	movs	r3, #0
 80141f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80141f6:	2300      	movs	r3, #0
 80141f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80141fa:	2300      	movs	r3, #0
 80141fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141fe:	2300      	movs	r3, #0
 8014200:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014202:	2300      	movs	r3, #0
 8014204:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014208:	2300      	movs	r3, #0
 801420a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801420e:	2300      	movs	r3, #0
 8014210:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014212:	2300      	movs	r3, #0
 8014214:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d109      	bne.n	8014234 <tcp_write+0x5c>
 8014220:	4ba4      	ldr	r3, [pc, #656]	@ (80144b4 <tcp_write+0x2dc>)
 8014222:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8014226:	49a4      	ldr	r1, [pc, #656]	@ (80144b8 <tcp_write+0x2e0>)
 8014228:	48a4      	ldr	r0, [pc, #656]	@ (80144bc <tcp_write+0x2e4>)
 801422a:	f005 fb63 	bl	80198f4 <iprintf>
 801422e:	f06f 030f 	mvn.w	r3, #15
 8014232:	e32a      	b.n	801488a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801423a:	085b      	lsrs	r3, r3, #1
 801423c:	b29a      	uxth	r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014242:	4293      	cmp	r3, r2
 8014244:	bf28      	it	cs
 8014246:	4613      	movcs	r3, r2
 8014248:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801424a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801424c:	2b00      	cmp	r3, #0
 801424e:	d102      	bne.n	8014256 <tcp_write+0x7e>
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014254:	e000      	b.n	8014258 <tcp_write+0x80>
 8014256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014258:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d109      	bne.n	8014274 <tcp_write+0x9c>
 8014260:	4b94      	ldr	r3, [pc, #592]	@ (80144b4 <tcp_write+0x2dc>)
 8014262:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8014266:	4996      	ldr	r1, [pc, #600]	@ (80144c0 <tcp_write+0x2e8>)
 8014268:	4894      	ldr	r0, [pc, #592]	@ (80144bc <tcp_write+0x2e4>)
 801426a:	f005 fb43 	bl	80198f4 <iprintf>
 801426e:	f06f 030f 	mvn.w	r3, #15
 8014272:	e30a      	b.n	801488a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014274:	88fb      	ldrh	r3, [r7, #6]
 8014276:	4619      	mov	r1, r3
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	f7ff ff33 	bl	80140e4 <tcp_write_checks>
 801427e:	4603      	mov	r3, r0
 8014280:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8014284:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014288:	2b00      	cmp	r3, #0
 801428a:	d002      	beq.n	8014292 <tcp_write+0xba>
    return err;
 801428c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014290:	e2fb      	b.n	801488a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014298:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801429c:	2300      	movs	r3, #0
 801429e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	f000 80f6 	beq.w	8014498 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80142b2:	e002      	b.n	80142ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80142b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80142ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1f8      	bne.n	80142b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80142c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142c4:	7a9b      	ldrb	r3, [r3, #10]
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	f003 0304 	and.w	r3, r3, #4
 80142ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80142d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80142d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142d4:	891b      	ldrh	r3, [r3, #8]
 80142d6:	4619      	mov	r1, r3
 80142d8:	8c3b      	ldrh	r3, [r7, #32]
 80142da:	440b      	add	r3, r1
 80142dc:	429a      	cmp	r2, r3
 80142de:	da06      	bge.n	80142ee <tcp_write+0x116>
 80142e0:	4b74      	ldr	r3, [pc, #464]	@ (80144b4 <tcp_write+0x2dc>)
 80142e2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80142e6:	4977      	ldr	r1, [pc, #476]	@ (80144c4 <tcp_write+0x2ec>)
 80142e8:	4874      	ldr	r0, [pc, #464]	@ (80144bc <tcp_write+0x2e4>)
 80142ea:	f005 fb03 	bl	80198f4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80142ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142f0:	891a      	ldrh	r2, [r3, #8]
 80142f2:	8c3b      	ldrh	r3, [r7, #32]
 80142f4:	4413      	add	r3, r2
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014304:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014306:	8a7b      	ldrh	r3, [r7, #18]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d026      	beq.n	801435a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801430c:	8a7b      	ldrh	r3, [r7, #18]
 801430e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014310:	429a      	cmp	r2, r3
 8014312:	d206      	bcs.n	8014322 <tcp_write+0x14a>
 8014314:	4b67      	ldr	r3, [pc, #412]	@ (80144b4 <tcp_write+0x2dc>)
 8014316:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801431a:	496b      	ldr	r1, [pc, #428]	@ (80144c8 <tcp_write+0x2f0>)
 801431c:	4867      	ldr	r0, [pc, #412]	@ (80144bc <tcp_write+0x2e4>)
 801431e:	f005 fae9 	bl	80198f4 <iprintf>
      seg = last_unsent;
 8014322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014324:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014326:	8a7b      	ldrh	r3, [r7, #18]
 8014328:	88fa      	ldrh	r2, [r7, #6]
 801432a:	4293      	cmp	r3, r2
 801432c:	bf28      	it	cs
 801432e:	4613      	movcs	r3, r2
 8014330:	b29b      	uxth	r3, r3
 8014332:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014334:	4293      	cmp	r3, r2
 8014336:	bf28      	it	cs
 8014338:	4613      	movcs	r3, r2
 801433a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801433c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014340:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014342:	4413      	add	r3, r2
 8014344:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8014348:	8a7a      	ldrh	r2, [r7, #18]
 801434a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	b29b      	uxth	r3, r3
 8014350:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014352:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014354:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014356:	1ad3      	subs	r3, r2, r3
 8014358:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801435a:	8a7b      	ldrh	r3, [r7, #18]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d00b      	beq.n	8014378 <tcp_write+0x1a0>
 8014360:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014364:	88fb      	ldrh	r3, [r7, #6]
 8014366:	429a      	cmp	r2, r3
 8014368:	d006      	beq.n	8014378 <tcp_write+0x1a0>
 801436a:	4b52      	ldr	r3, [pc, #328]	@ (80144b4 <tcp_write+0x2dc>)
 801436c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014370:	4956      	ldr	r1, [pc, #344]	@ (80144cc <tcp_write+0x2f4>)
 8014372:	4852      	ldr	r0, [pc, #328]	@ (80144bc <tcp_write+0x2e4>)
 8014374:	f005 fabe 	bl	80198f4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801437c:	88fb      	ldrh	r3, [r7, #6]
 801437e:	429a      	cmp	r2, r3
 8014380:	f080 8167 	bcs.w	8014652 <tcp_write+0x47a>
 8014384:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014386:	2b00      	cmp	r3, #0
 8014388:	f000 8163 	beq.w	8014652 <tcp_write+0x47a>
 801438c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801438e:	891b      	ldrh	r3, [r3, #8]
 8014390:	2b00      	cmp	r3, #0
 8014392:	f000 815e 	beq.w	8014652 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014396:	88fa      	ldrh	r2, [r7, #6]
 8014398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801439c:	1ad2      	subs	r2, r2, r3
 801439e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80143a0:	4293      	cmp	r3, r2
 80143a2:	bfa8      	it	ge
 80143a4:	4613      	movge	r3, r2
 80143a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80143a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80143ac:	797b      	ldrb	r3, [r7, #5]
 80143ae:	f003 0301 	and.w	r3, r3, #1
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d027      	beq.n	8014406 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80143b6:	f107 0012 	add.w	r0, r7, #18
 80143ba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80143bc:	8bf9      	ldrh	r1, [r7, #30]
 80143be:	2301      	movs	r3, #1
 80143c0:	9302      	str	r3, [sp, #8]
 80143c2:	797b      	ldrb	r3, [r7, #5]
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	9300      	str	r3, [sp, #0]
 80143ca:	4603      	mov	r3, r0
 80143cc:	2000      	movs	r0, #0
 80143ce:	f7ff fe0f 	bl	8013ff0 <tcp_pbuf_prealloc>
 80143d2:	6578      	str	r0, [r7, #84]	@ 0x54
 80143d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	f000 8225 	beq.w	8014826 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80143dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143de:	6858      	ldr	r0, [r3, #4]
 80143e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80143e4:	68ba      	ldr	r2, [r7, #8]
 80143e6:	4413      	add	r3, r2
 80143e8:	8bfa      	ldrh	r2, [r7, #30]
 80143ea:	4619      	mov	r1, r3
 80143ec:	f005 fd01 	bl	8019df2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80143f0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80143f2:	f7fb f9c3 	bl	800f77c <pbuf_clen>
 80143f6:	4603      	mov	r3, r0
 80143f8:	461a      	mov	r2, r3
 80143fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80143fe:	4413      	add	r3, r2
 8014400:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014404:	e041      	b.n	801448a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	637b      	str	r3, [r7, #52]	@ 0x34
 801440c:	e002      	b.n	8014414 <tcp_write+0x23c>
 801440e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	637b      	str	r3, [r7, #52]	@ 0x34
 8014414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1f8      	bne.n	801440e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801441e:	7b1b      	ldrb	r3, [r3, #12]
 8014420:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d115      	bne.n	8014454 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801442e:	8952      	ldrh	r2, [r2, #10]
 8014430:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014432:	68ba      	ldr	r2, [r7, #8]
 8014434:	429a      	cmp	r2, r3
 8014436:	d10d      	bne.n	8014454 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801443c:	2b00      	cmp	r3, #0
 801443e:	d006      	beq.n	801444e <tcp_write+0x276>
 8014440:	4b1c      	ldr	r3, [pc, #112]	@ (80144b4 <tcp_write+0x2dc>)
 8014442:	f240 2231 	movw	r2, #561	@ 0x231
 8014446:	4922      	ldr	r1, [pc, #136]	@ (80144d0 <tcp_write+0x2f8>)
 8014448:	481c      	ldr	r0, [pc, #112]	@ (80144bc <tcp_write+0x2e4>)
 801444a:	f005 fa53 	bl	80198f4 <iprintf>
          extendlen = seglen;
 801444e:	8bfb      	ldrh	r3, [r7, #30]
 8014450:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8014452:	e01a      	b.n	801448a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014454:	8bfb      	ldrh	r3, [r7, #30]
 8014456:	2201      	movs	r2, #1
 8014458:	4619      	mov	r1, r3
 801445a:	2000      	movs	r0, #0
 801445c:	f7fa fe1c 	bl	800f098 <pbuf_alloc>
 8014460:	6578      	str	r0, [r7, #84]	@ 0x54
 8014462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014464:	2b00      	cmp	r3, #0
 8014466:	f000 81e0 	beq.w	801482a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801446a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801446e:	68ba      	ldr	r2, [r7, #8]
 8014470:	441a      	add	r2, r3
 8014472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014474:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014476:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014478:	f7fb f980 	bl	800f77c <pbuf_clen>
 801447c:	4603      	mov	r3, r0
 801447e:	461a      	mov	r2, r3
 8014480:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014484:	4413      	add	r3, r2
 8014486:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801448a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801448e:	8bfb      	ldrh	r3, [r7, #30]
 8014490:	4413      	add	r3, r2
 8014492:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8014496:	e0dc      	b.n	8014652 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f000 80d7 	beq.w	8014652 <tcp_write+0x47a>
 80144a4:	4b03      	ldr	r3, [pc, #12]	@ (80144b4 <tcp_write+0x2dc>)
 80144a6:	f240 224a 	movw	r2, #586	@ 0x24a
 80144aa:	490a      	ldr	r1, [pc, #40]	@ (80144d4 <tcp_write+0x2fc>)
 80144ac:	4803      	ldr	r0, [pc, #12]	@ (80144bc <tcp_write+0x2e4>)
 80144ae:	f005 fa21 	bl	80198f4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80144b2:	e0ce      	b.n	8014652 <tcp_write+0x47a>
 80144b4:	0801e208 	.word	0x0801e208
 80144b8:	0801e3a8 	.word	0x0801e3a8
 80144bc:	0801e25c 	.word	0x0801e25c
 80144c0:	0801e3c0 	.word	0x0801e3c0
 80144c4:	0801e3f4 	.word	0x0801e3f4
 80144c8:	0801e40c 	.word	0x0801e40c
 80144cc:	0801e42c 	.word	0x0801e42c
 80144d0:	0801e44c 	.word	0x0801e44c
 80144d4:	0801e478 	.word	0x0801e478
    struct pbuf *p;
    u16_t left = len - pos;
 80144d8:	88fa      	ldrh	r2, [r7, #6]
 80144da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80144de:	1ad3      	subs	r3, r2, r3
 80144e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80144e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144ea:	1ad3      	subs	r3, r2, r3
 80144ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80144ee:	8b7a      	ldrh	r2, [r7, #26]
 80144f0:	8bbb      	ldrh	r3, [r7, #28]
 80144f2:	4293      	cmp	r3, r2
 80144f4:	bf28      	it	cs
 80144f6:	4613      	movcs	r3, r2
 80144f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80144fa:	797b      	ldrb	r3, [r7, #5]
 80144fc:	f003 0301 	and.w	r3, r3, #1
 8014500:	2b00      	cmp	r3, #0
 8014502:	d036      	beq.n	8014572 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014504:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014508:	b29a      	uxth	r2, r3
 801450a:	8b3b      	ldrh	r3, [r7, #24]
 801450c:	4413      	add	r3, r2
 801450e:	b299      	uxth	r1, r3
 8014510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014512:	2b00      	cmp	r3, #0
 8014514:	bf0c      	ite	eq
 8014516:	2301      	moveq	r3, #1
 8014518:	2300      	movne	r3, #0
 801451a:	b2db      	uxtb	r3, r3
 801451c:	f107 0012 	add.w	r0, r7, #18
 8014520:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014522:	9302      	str	r3, [sp, #8]
 8014524:	797b      	ldrb	r3, [r7, #5]
 8014526:	9301      	str	r3, [sp, #4]
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	4603      	mov	r3, r0
 801452e:	2036      	movs	r0, #54	@ 0x36
 8014530:	f7ff fd5e 	bl	8013ff0 <tcp_pbuf_prealloc>
 8014534:	6338      	str	r0, [r7, #48]	@ 0x30
 8014536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 8178 	beq.w	801482e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801453e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014540:	895b      	ldrh	r3, [r3, #10]
 8014542:	8b3a      	ldrh	r2, [r7, #24]
 8014544:	429a      	cmp	r2, r3
 8014546:	d906      	bls.n	8014556 <tcp_write+0x37e>
 8014548:	4b8c      	ldr	r3, [pc, #560]	@ (801477c <tcp_write+0x5a4>)
 801454a:	f240 2266 	movw	r2, #614	@ 0x266
 801454e:	498c      	ldr	r1, [pc, #560]	@ (8014780 <tcp_write+0x5a8>)
 8014550:	488c      	ldr	r0, [pc, #560]	@ (8014784 <tcp_write+0x5ac>)
 8014552:	f005 f9cf 	bl	80198f4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014558:	685a      	ldr	r2, [r3, #4]
 801455a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801455e:	18d0      	adds	r0, r2, r3
 8014560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	4413      	add	r3, r2
 8014568:	8b3a      	ldrh	r2, [r7, #24]
 801456a:	4619      	mov	r1, r3
 801456c:	f005 fc41 	bl	8019df2 <memcpy>
 8014570:	e02f      	b.n	80145d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014572:	8a7b      	ldrh	r3, [r7, #18]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d006      	beq.n	8014586 <tcp_write+0x3ae>
 8014578:	4b80      	ldr	r3, [pc, #512]	@ (801477c <tcp_write+0x5a4>)
 801457a:	f240 2271 	movw	r2, #625	@ 0x271
 801457e:	4982      	ldr	r1, [pc, #520]	@ (8014788 <tcp_write+0x5b0>)
 8014580:	4880      	ldr	r0, [pc, #512]	@ (8014784 <tcp_write+0x5ac>)
 8014582:	f005 f9b7 	bl	80198f4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014586:	8b3b      	ldrh	r3, [r7, #24]
 8014588:	2201      	movs	r2, #1
 801458a:	4619      	mov	r1, r3
 801458c:	2036      	movs	r0, #54	@ 0x36
 801458e:	f7fa fd83 	bl	800f098 <pbuf_alloc>
 8014592:	6178      	str	r0, [r7, #20]
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	2b00      	cmp	r3, #0
 8014598:	f000 814b 	beq.w	8014832 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801459c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145a0:	68ba      	ldr	r2, [r7, #8]
 80145a2:	441a      	add	r2, r3
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80145a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80145b2:	4619      	mov	r1, r3
 80145b4:	2036      	movs	r0, #54	@ 0x36
 80145b6:	f7fa fd6f 	bl	800f098 <pbuf_alloc>
 80145ba:	6338      	str	r0, [r7, #48]	@ 0x30
 80145bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d103      	bne.n	80145ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80145c2:	6978      	ldr	r0, [r7, #20]
 80145c4:	f7fb f84c 	bl	800f660 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80145c8:	e136      	b.n	8014838 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80145ca:	6979      	ldr	r1, [r7, #20]
 80145cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145ce:	f7fb f915 	bl	800f7fc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80145d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145d4:	f7fb f8d2 	bl	800f77c <pbuf_clen>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145e0:	4413      	add	r3, r2
 80145e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80145e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145ea:	2b09      	cmp	r3, #9
 80145ec:	d903      	bls.n	80145f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80145ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145f0:	f7fb f836 	bl	800f660 <pbuf_free>
      goto memerr;
 80145f4:	e120      	b.n	8014838 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80145fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145fe:	441a      	add	r2, r3
 8014600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014604:	9300      	str	r3, [sp, #0]
 8014606:	4613      	mov	r3, r2
 8014608:	2200      	movs	r2, #0
 801460a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801460c:	68f8      	ldr	r0, [r7, #12]
 801460e:	f7ff fc53 	bl	8013eb8 <tcp_create_segment>
 8014612:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014616:	2b00      	cmp	r3, #0
 8014618:	f000 810d 	beq.w	8014836 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801461c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801461e:	2b00      	cmp	r3, #0
 8014620:	d102      	bne.n	8014628 <tcp_write+0x450>
      queue = seg;
 8014622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014624:	647b      	str	r3, [r7, #68]	@ 0x44
 8014626:	e00c      	b.n	8014642 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801462a:	2b00      	cmp	r3, #0
 801462c:	d106      	bne.n	801463c <tcp_write+0x464>
 801462e:	4b53      	ldr	r3, [pc, #332]	@ (801477c <tcp_write+0x5a4>)
 8014630:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014634:	4955      	ldr	r1, [pc, #340]	@ (801478c <tcp_write+0x5b4>)
 8014636:	4853      	ldr	r0, [pc, #332]	@ (8014784 <tcp_write+0x5ac>)
 8014638:	f005 f95c 	bl	80198f4 <iprintf>
      prev_seg->next = seg;
 801463c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801463e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014640:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014644:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014646:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801464a:	8b3b      	ldrh	r3, [r7, #24]
 801464c:	4413      	add	r3, r2
 801464e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014652:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014656:	88fb      	ldrh	r3, [r7, #6]
 8014658:	429a      	cmp	r2, r3
 801465a:	f4ff af3d 	bcc.w	80144d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801465e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014660:	2b00      	cmp	r3, #0
 8014662:	d02c      	beq.n	80146be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801466a:	e01e      	b.n	80146aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801466c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801466e:	891a      	ldrh	r2, [r3, #8]
 8014670:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014672:	4413      	add	r3, r2
 8014674:	b29a      	uxth	r2, r3
 8014676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014678:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801467a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d110      	bne.n	80146a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014688:	8952      	ldrh	r2, [r2, #10]
 801468a:	4413      	add	r3, r2
 801468c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801468e:	68b9      	ldr	r1, [r7, #8]
 8014690:	4618      	mov	r0, r3
 8014692:	f005 fbae 	bl	8019df2 <memcpy>
        p->len += oversize_used;
 8014696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014698:	895a      	ldrh	r2, [r3, #10]
 801469a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801469c:	4413      	add	r3, r2
 801469e:	b29a      	uxth	r2, r3
 80146a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80146a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d1dd      	bne.n	801466c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80146b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146b2:	891a      	ldrh	r2, [r3, #8]
 80146b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80146b6:	4413      	add	r3, r2
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80146be:	8a7a      	ldrh	r2, [r7, #18]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80146c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d018      	beq.n	80146fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80146cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d106      	bne.n	80146e0 <tcp_write+0x508>
 80146d2:	4b2a      	ldr	r3, [pc, #168]	@ (801477c <tcp_write+0x5a4>)
 80146d4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80146d8:	492d      	ldr	r1, [pc, #180]	@ (8014790 <tcp_write+0x5b8>)
 80146da:	482a      	ldr	r0, [pc, #168]	@ (8014784 <tcp_write+0x5ac>)
 80146dc:	f005 f90a 	bl	80198f4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80146e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fb f888 	bl	800f7fc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80146ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146ee:	891a      	ldrh	r2, [r3, #8]
 80146f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146f2:	891b      	ldrh	r3, [r3, #8]
 80146f4:	4413      	add	r3, r2
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146fa:	811a      	strh	r2, [r3, #8]
 80146fc:	e037      	b.n	801476e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80146fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014700:	2b00      	cmp	r3, #0
 8014702:	d034      	beq.n	801476e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014706:	2b00      	cmp	r3, #0
 8014708:	d003      	beq.n	8014712 <tcp_write+0x53a>
 801470a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <tcp_write+0x548>
 8014712:	4b1a      	ldr	r3, [pc, #104]	@ (801477c <tcp_write+0x5a4>)
 8014714:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014718:	491e      	ldr	r1, [pc, #120]	@ (8014794 <tcp_write+0x5bc>)
 801471a:	481a      	ldr	r0, [pc, #104]	@ (8014784 <tcp_write+0x5ac>)
 801471c:	f005 f8ea 	bl	80198f4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014726:	e009      	b.n	801473c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801472a:	891a      	ldrh	r2, [r3, #8]
 801472c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801472e:	4413      	add	r3, r2
 8014730:	b29a      	uxth	r2, r3
 8014732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014734:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d1f1      	bne.n	8014728 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014746:	891a      	ldrh	r2, [r3, #8]
 8014748:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801474a:	4413      	add	r3, r2
 801474c:	b29a      	uxth	r2, r3
 801474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014750:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014754:	895a      	ldrh	r2, [r3, #10]
 8014756:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014758:	4413      	add	r3, r2
 801475a:	b29a      	uxth	r2, r3
 801475c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801475e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014762:	891a      	ldrh	r2, [r3, #8]
 8014764:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014766:	4413      	add	r3, r2
 8014768:	b29a      	uxth	r2, r3
 801476a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801476c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801476e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014770:	2b00      	cmp	r3, #0
 8014772:	d111      	bne.n	8014798 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014778:	66da      	str	r2, [r3, #108]	@ 0x6c
 801477a:	e010      	b.n	801479e <tcp_write+0x5c6>
 801477c:	0801e208 	.word	0x0801e208
 8014780:	0801e4a8 	.word	0x0801e4a8
 8014784:	0801e25c 	.word	0x0801e25c
 8014788:	0801e4e8 	.word	0x0801e4e8
 801478c:	0801e4f8 	.word	0x0801e4f8
 8014790:	0801e50c 	.word	0x0801e50c
 8014794:	0801e544 	.word	0x0801e544
  } else {
    last_unsent->next = queue;
 8014798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801479a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801479c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80147a2:	88fb      	ldrh	r3, [r7, #6]
 80147a4:	441a      	add	r2, r3
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80147b0:	88fb      	ldrh	r3, [r7, #6]
 80147b2:	1ad3      	subs	r3, r2, r3
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80147c2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d00e      	beq.n	80147ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d10a      	bne.n	80147ee <tcp_write+0x616>
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d106      	bne.n	80147ee <tcp_write+0x616>
 80147e0:	4b2c      	ldr	r3, [pc, #176]	@ (8014894 <tcp_write+0x6bc>)
 80147e2:	f240 3212 	movw	r2, #786	@ 0x312
 80147e6:	492c      	ldr	r1, [pc, #176]	@ (8014898 <tcp_write+0x6c0>)
 80147e8:	482c      	ldr	r0, [pc, #176]	@ (801489c <tcp_write+0x6c4>)
 80147ea:	f005 f883 	bl	80198f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80147ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d016      	beq.n	8014822 <tcp_write+0x64a>
 80147f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147f6:	68db      	ldr	r3, [r3, #12]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d012      	beq.n	8014822 <tcp_write+0x64a>
 80147fc:	797b      	ldrb	r3, [r7, #5]
 80147fe:	f003 0302 	and.w	r3, r3, #2
 8014802:	2b00      	cmp	r3, #0
 8014804:	d10d      	bne.n	8014822 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	899b      	ldrh	r3, [r3, #12]
 801480c:	b29c      	uxth	r4, r3
 801480e:	2008      	movs	r0, #8
 8014810:	f7f9 fb7a 	bl	800df08 <lwip_htons>
 8014814:	4603      	mov	r3, r0
 8014816:	461a      	mov	r2, r3
 8014818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	4322      	orrs	r2, r4
 801481e:	b292      	uxth	r2, r2
 8014820:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014822:	2300      	movs	r3, #0
 8014824:	e031      	b.n	801488a <tcp_write+0x6b2>
          goto memerr;
 8014826:	bf00      	nop
 8014828:	e006      	b.n	8014838 <tcp_write+0x660>
            goto memerr;
 801482a:	bf00      	nop
 801482c:	e004      	b.n	8014838 <tcp_write+0x660>
        goto memerr;
 801482e:	bf00      	nop
 8014830:	e002      	b.n	8014838 <tcp_write+0x660>
        goto memerr;
 8014832:	bf00      	nop
 8014834:	e000      	b.n	8014838 <tcp_write+0x660>
      goto memerr;
 8014836:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	8b5b      	ldrh	r3, [r3, #26]
 801483c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014840:	b29a      	uxth	r2, r3
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801484c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801484e:	f7fa ff07 	bl	800f660 <pbuf_free>
  }
  if (queue != NULL) {
 8014852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014854:	2b00      	cmp	r3, #0
 8014856:	d002      	beq.n	801485e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014858:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801485a:	f7fc fb71 	bl	8010f40 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014864:	2b00      	cmp	r3, #0
 8014866:	d00e      	beq.n	8014886 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801486c:	2b00      	cmp	r3, #0
 801486e:	d10a      	bne.n	8014886 <tcp_write+0x6ae>
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014874:	2b00      	cmp	r3, #0
 8014876:	d106      	bne.n	8014886 <tcp_write+0x6ae>
 8014878:	4b06      	ldr	r3, [pc, #24]	@ (8014894 <tcp_write+0x6bc>)
 801487a:	f240 3227 	movw	r2, #807	@ 0x327
 801487e:	4906      	ldr	r1, [pc, #24]	@ (8014898 <tcp_write+0x6c0>)
 8014880:	4806      	ldr	r0, [pc, #24]	@ (801489c <tcp_write+0x6c4>)
 8014882:	f005 f837 	bl	80198f4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014886:	f04f 33ff 	mov.w	r3, #4294967295
}
 801488a:	4618      	mov	r0, r3
 801488c:	375c      	adds	r7, #92	@ 0x5c
 801488e:	46bd      	mov	sp, r7
 8014890:	bd90      	pop	{r4, r7, pc}
 8014892:	bf00      	nop
 8014894:	0801e208 	.word	0x0801e208
 8014898:	0801e57c 	.word	0x0801e57c
 801489c:	0801e25c 	.word	0x0801e25c

080148a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80148a0:	b590      	push	{r4, r7, lr}
 80148a2:	b08b      	sub	sp, #44	@ 0x2c
 80148a4:	af02      	add	r7, sp, #8
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80148ac:	2300      	movs	r3, #0
 80148ae:	61fb      	str	r3, [r7, #28]
 80148b0:	2300      	movs	r3, #0
 80148b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80148b4:	2300      	movs	r3, #0
 80148b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d106      	bne.n	80148cc <tcp_split_unsent_seg+0x2c>
 80148be:	4b95      	ldr	r3, [pc, #596]	@ (8014b14 <tcp_split_unsent_seg+0x274>)
 80148c0:	f240 324b 	movw	r2, #843	@ 0x34b
 80148c4:	4994      	ldr	r1, [pc, #592]	@ (8014b18 <tcp_split_unsent_seg+0x278>)
 80148c6:	4895      	ldr	r0, [pc, #596]	@ (8014b1c <tcp_split_unsent_seg+0x27c>)
 80148c8:	f005 f814 	bl	80198f4 <iprintf>

  useg = pcb->unsent;
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d102      	bne.n	80148de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80148d8:	f04f 33ff 	mov.w	r3, #4294967295
 80148dc:	e116      	b.n	8014b0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80148de:	887b      	ldrh	r3, [r7, #2]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d109      	bne.n	80148f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80148e4:	4b8b      	ldr	r3, [pc, #556]	@ (8014b14 <tcp_split_unsent_seg+0x274>)
 80148e6:	f240 3253 	movw	r2, #851	@ 0x353
 80148ea:	498d      	ldr	r1, [pc, #564]	@ (8014b20 <tcp_split_unsent_seg+0x280>)
 80148ec:	488b      	ldr	r0, [pc, #556]	@ (8014b1c <tcp_split_unsent_seg+0x27c>)
 80148ee:	f005 f801 	bl	80198f4 <iprintf>
    return ERR_VAL;
 80148f2:	f06f 0305 	mvn.w	r3, #5
 80148f6:	e109      	b.n	8014b0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80148f8:	697b      	ldr	r3, [r7, #20]
 80148fa:	891b      	ldrh	r3, [r3, #8]
 80148fc:	887a      	ldrh	r2, [r7, #2]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d301      	bcc.n	8014906 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014902:	2300      	movs	r3, #0
 8014904:	e102      	b.n	8014b0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801490a:	887a      	ldrh	r2, [r7, #2]
 801490c:	429a      	cmp	r2, r3
 801490e:	d906      	bls.n	801491e <tcp_split_unsent_seg+0x7e>
 8014910:	4b80      	ldr	r3, [pc, #512]	@ (8014b14 <tcp_split_unsent_seg+0x274>)
 8014912:	f240 325b 	movw	r2, #859	@ 0x35b
 8014916:	4983      	ldr	r1, [pc, #524]	@ (8014b24 <tcp_split_unsent_seg+0x284>)
 8014918:	4880      	ldr	r0, [pc, #512]	@ (8014b1c <tcp_split_unsent_seg+0x27c>)
 801491a:	f004 ffeb 	bl	80198f4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	891b      	ldrh	r3, [r3, #8]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d106      	bne.n	8014934 <tcp_split_unsent_seg+0x94>
 8014926:	4b7b      	ldr	r3, [pc, #492]	@ (8014b14 <tcp_split_unsent_seg+0x274>)
 8014928:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801492c:	497e      	ldr	r1, [pc, #504]	@ (8014b28 <tcp_split_unsent_seg+0x288>)
 801492e:	487b      	ldr	r0, [pc, #492]	@ (8014b1c <tcp_split_unsent_seg+0x27c>)
 8014930:	f004 ffe0 	bl	80198f4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014934:	697b      	ldr	r3, [r7, #20]
 8014936:	7a9b      	ldrb	r3, [r3, #10]
 8014938:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801493a:	7bfb      	ldrb	r3, [r7, #15]
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	b2db      	uxtb	r3, r3
 8014940:	f003 0304 	and.w	r3, r3, #4
 8014944:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014946:	697b      	ldr	r3, [r7, #20]
 8014948:	891a      	ldrh	r2, [r3, #8]
 801494a:	887b      	ldrh	r3, [r7, #2]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014950:	7bbb      	ldrb	r3, [r7, #14]
 8014952:	b29a      	uxth	r2, r3
 8014954:	89bb      	ldrh	r3, [r7, #12]
 8014956:	4413      	add	r3, r2
 8014958:	b29b      	uxth	r3, r3
 801495a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801495e:	4619      	mov	r1, r3
 8014960:	2036      	movs	r0, #54	@ 0x36
 8014962:	f7fa fb99 	bl	800f098 <pbuf_alloc>
 8014966:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	2b00      	cmp	r3, #0
 801496c:	f000 80b7 	beq.w	8014ade <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	891a      	ldrh	r2, [r3, #8]
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	891b      	ldrh	r3, [r3, #8]
 801497a:	1ad3      	subs	r3, r2, r3
 801497c:	b29a      	uxth	r2, r3
 801497e:	887b      	ldrh	r3, [r7, #2]
 8014980:	4413      	add	r3, r2
 8014982:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	6858      	ldr	r0, [r3, #4]
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	685a      	ldr	r2, [r3, #4]
 801498c:	7bbb      	ldrb	r3, [r7, #14]
 801498e:	18d1      	adds	r1, r2, r3
 8014990:	897b      	ldrh	r3, [r7, #10]
 8014992:	89ba      	ldrh	r2, [r7, #12]
 8014994:	f7fb f85a 	bl	800fa4c <pbuf_copy_partial>
 8014998:	4603      	mov	r3, r0
 801499a:	461a      	mov	r2, r3
 801499c:	89bb      	ldrh	r3, [r7, #12]
 801499e:	4293      	cmp	r3, r2
 80149a0:	f040 809f 	bne.w	8014ae2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	68db      	ldr	r3, [r3, #12]
 80149a8:	899b      	ldrh	r3, [r3, #12]
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7f9 faab 	bl	800df08 <lwip_htons>
 80149b2:	4603      	mov	r3, r0
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80149ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80149bc:	2300      	movs	r3, #0
 80149be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80149c0:	7efb      	ldrb	r3, [r7, #27]
 80149c2:	f003 0308 	and.w	r3, r3, #8
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d007      	beq.n	80149da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80149ca:	7efb      	ldrb	r3, [r7, #27]
 80149cc:	f023 0308 	bic.w	r3, r3, #8
 80149d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80149d2:	7ebb      	ldrb	r3, [r7, #26]
 80149d4:	f043 0308 	orr.w	r3, r3, #8
 80149d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80149da:	7efb      	ldrb	r3, [r7, #27]
 80149dc:	f003 0301 	and.w	r3, r3, #1
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d007      	beq.n	80149f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80149e4:	7efb      	ldrb	r3, [r7, #27]
 80149e6:	f023 0301 	bic.w	r3, r3, #1
 80149ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80149ec:	7ebb      	ldrb	r3, [r7, #26]
 80149ee:	f043 0301 	orr.w	r3, r3, #1
 80149f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7f9 fa99 	bl	800df32 <lwip_htonl>
 8014a00:	4602      	mov	r2, r0
 8014a02:	887b      	ldrh	r3, [r7, #2]
 8014a04:	18d1      	adds	r1, r2, r3
 8014a06:	7eba      	ldrb	r2, [r7, #26]
 8014a08:	7bfb      	ldrb	r3, [r7, #15]
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	6939      	ldr	r1, [r7, #16]
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f7ff fa51 	bl	8013eb8 <tcp_create_segment>
 8014a16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014a18:	69fb      	ldr	r3, [r7, #28]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d063      	beq.n	8014ae6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f7fa feaa 	bl	800f77c <pbuf_clen>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a32:	1a9b      	subs	r3, r3, r2
 8014a34:	b29a      	uxth	r2, r3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	6858      	ldr	r0, [r3, #4]
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	891a      	ldrh	r2, [r3, #8]
 8014a46:	89bb      	ldrh	r3, [r7, #12]
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	f7fa fc81 	bl	800f354 <pbuf_realloc>
  useg->len -= remainder;
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	891a      	ldrh	r2, [r3, #8]
 8014a56:	89bb      	ldrh	r3, [r7, #12]
 8014a58:	1ad3      	subs	r3, r2, r3
 8014a5a:	b29a      	uxth	r2, r3
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	899b      	ldrh	r3, [r3, #12]
 8014a66:	b29c      	uxth	r4, r3
 8014a68:	7efb      	ldrb	r3, [r7, #27]
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7f9 fa4b 	bl	800df08 <lwip_htons>
 8014a72:	4603      	mov	r3, r0
 8014a74:	461a      	mov	r2, r3
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	68db      	ldr	r3, [r3, #12]
 8014a7a:	4322      	orrs	r2, r4
 8014a7c:	b292      	uxth	r2, r2
 8014a7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7fa fe79 	bl	800f77c <pbuf_clen>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a94:	4413      	add	r3, r2
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7fa fe6a 	bl	800f77c <pbuf_clen>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	461a      	mov	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ab2:	4413      	add	r3, r2
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	681a      	ldr	r2, [r3, #0]
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014ac4:	697b      	ldr	r3, [r7, #20]
 8014ac6:	69fa      	ldr	r2, [r7, #28]
 8014ac8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014aca:	69fb      	ldr	r3, [r7, #28]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d103      	bne.n	8014ada <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	e016      	b.n	8014b0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014ade:	bf00      	nop
 8014ae0:	e002      	b.n	8014ae8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ae2:	bf00      	nop
 8014ae4:	e000      	b.n	8014ae8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ae6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d006      	beq.n	8014afc <tcp_split_unsent_seg+0x25c>
 8014aee:	4b09      	ldr	r3, [pc, #36]	@ (8014b14 <tcp_split_unsent_seg+0x274>)
 8014af0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014af4:	490d      	ldr	r1, [pc, #52]	@ (8014b2c <tcp_split_unsent_seg+0x28c>)
 8014af6:	4809      	ldr	r0, [pc, #36]	@ (8014b1c <tcp_split_unsent_seg+0x27c>)
 8014af8:	f004 fefc 	bl	80198f4 <iprintf>
  if (p != NULL) {
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d002      	beq.n	8014b08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014b02:	6938      	ldr	r0, [r7, #16]
 8014b04:	f7fa fdac 	bl	800f660 <pbuf_free>
  }

  return ERR_MEM;
 8014b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3724      	adds	r7, #36	@ 0x24
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd90      	pop	{r4, r7, pc}
 8014b14:	0801e208 	.word	0x0801e208
 8014b18:	0801e59c 	.word	0x0801e59c
 8014b1c:	0801e25c 	.word	0x0801e25c
 8014b20:	0801e5c0 	.word	0x0801e5c0
 8014b24:	0801e5e4 	.word	0x0801e5e4
 8014b28:	0801e5f4 	.word	0x0801e5f4
 8014b2c:	0801e604 	.word	0x0801e604

08014b30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014b30:	b590      	push	{r4, r7, lr}
 8014b32:	b085      	sub	sp, #20
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d106      	bne.n	8014b4c <tcp_send_fin+0x1c>
 8014b3e:	4b21      	ldr	r3, [pc, #132]	@ (8014bc4 <tcp_send_fin+0x94>)
 8014b40:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014b44:	4920      	ldr	r1, [pc, #128]	@ (8014bc8 <tcp_send_fin+0x98>)
 8014b46:	4821      	ldr	r0, [pc, #132]	@ (8014bcc <tcp_send_fin+0x9c>)
 8014b48:	f004 fed4 	bl	80198f4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d02e      	beq.n	8014bb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b58:	60fb      	str	r3, [r7, #12]
 8014b5a:	e002      	b.n	8014b62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d1f8      	bne.n	8014b5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	899b      	ldrh	r3, [r3, #12]
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7f9 f9c8 	bl	800df08 <lwip_htons>
 8014b78:	4603      	mov	r3, r0
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	f003 0307 	and.w	r3, r3, #7
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d116      	bne.n	8014bb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	68db      	ldr	r3, [r3, #12]
 8014b88:	899b      	ldrh	r3, [r3, #12]
 8014b8a:	b29c      	uxth	r4, r3
 8014b8c:	2001      	movs	r0, #1
 8014b8e:	f7f9 f9bb 	bl	800df08 <lwip_htons>
 8014b92:	4603      	mov	r3, r0
 8014b94:	461a      	mov	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	4322      	orrs	r2, r4
 8014b9c:	b292      	uxth	r2, r2
 8014b9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	8b5b      	ldrh	r3, [r3, #26]
 8014ba4:	f043 0320 	orr.w	r3, r3, #32
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	e004      	b.n	8014bbc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014bb2:	2101      	movs	r1, #1
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f000 f80b 	bl	8014bd0 <tcp_enqueue_flags>
 8014bba:	4603      	mov	r3, r0
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3714      	adds	r7, #20
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd90      	pop	{r4, r7, pc}
 8014bc4:	0801e208 	.word	0x0801e208
 8014bc8:	0801e610 	.word	0x0801e610
 8014bcc:	0801e25c 	.word	0x0801e25c

08014bd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08a      	sub	sp, #40	@ 0x28
 8014bd4:	af02      	add	r7, sp, #8
 8014bd6:	6078      	str	r0, [r7, #4]
 8014bd8:	460b      	mov	r3, r1
 8014bda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014be0:	2300      	movs	r3, #0
 8014be2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014be4:	78fb      	ldrb	r3, [r7, #3]
 8014be6:	f003 0303 	and.w	r3, r3, #3
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d106      	bne.n	8014bfc <tcp_enqueue_flags+0x2c>
 8014bee:	4b67      	ldr	r3, [pc, #412]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014bf0:	f240 4211 	movw	r2, #1041	@ 0x411
 8014bf4:	4966      	ldr	r1, [pc, #408]	@ (8014d90 <tcp_enqueue_flags+0x1c0>)
 8014bf6:	4867      	ldr	r0, [pc, #412]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014bf8:	f004 fe7c 	bl	80198f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d106      	bne.n	8014c10 <tcp_enqueue_flags+0x40>
 8014c02:	4b62      	ldr	r3, [pc, #392]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014c04:	f240 4213 	movw	r2, #1043	@ 0x413
 8014c08:	4963      	ldr	r1, [pc, #396]	@ (8014d98 <tcp_enqueue_flags+0x1c8>)
 8014c0a:	4862      	ldr	r0, [pc, #392]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014c0c:	f004 fe72 	bl	80198f4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014c10:	78fb      	ldrb	r3, [r7, #3]
 8014c12:	f003 0302 	and.w	r3, r3, #2
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d001      	beq.n	8014c1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c1e:	7ffb      	ldrb	r3, [r7, #31]
 8014c20:	009b      	lsls	r3, r3, #2
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	f003 0304 	and.w	r3, r3, #4
 8014c28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014c2a:	7dfb      	ldrb	r3, [r7, #23]
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c32:	4619      	mov	r1, r3
 8014c34:	2036      	movs	r0, #54	@ 0x36
 8014c36:	f7fa fa2f 	bl	800f098 <pbuf_alloc>
 8014c3a:	6138      	str	r0, [r7, #16]
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d109      	bne.n	8014c56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	8b5b      	ldrh	r3, [r3, #26]
 8014c46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c50:	f04f 33ff 	mov.w	r3, #4294967295
 8014c54:	e095      	b.n	8014d82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	895a      	ldrh	r2, [r3, #10]
 8014c5a:	7dfb      	ldrb	r3, [r7, #23]
 8014c5c:	b29b      	uxth	r3, r3
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d206      	bcs.n	8014c70 <tcp_enqueue_flags+0xa0>
 8014c62:	4b4a      	ldr	r3, [pc, #296]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014c64:	f240 4239 	movw	r2, #1081	@ 0x439
 8014c68:	494c      	ldr	r1, [pc, #304]	@ (8014d9c <tcp_enqueue_flags+0x1cc>)
 8014c6a:	484a      	ldr	r0, [pc, #296]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014c6c:	f004 fe42 	bl	80198f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014c74:	78fa      	ldrb	r2, [r7, #3]
 8014c76:	7ffb      	ldrb	r3, [r7, #31]
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	6939      	ldr	r1, [r7, #16]
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f7ff f91a 	bl	8013eb8 <tcp_create_segment>
 8014c84:	60f8      	str	r0, [r7, #12]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d109      	bne.n	8014ca0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	8b5b      	ldrh	r3, [r3, #26]
 8014c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9e:	e070      	b.n	8014d82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	68db      	ldr	r3, [r3, #12]
 8014ca4:	f003 0303 	and.w	r3, r3, #3
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d006      	beq.n	8014cba <tcp_enqueue_flags+0xea>
 8014cac:	4b37      	ldr	r3, [pc, #220]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014cae:	f240 4242 	movw	r2, #1090	@ 0x442
 8014cb2:	493b      	ldr	r1, [pc, #236]	@ (8014da0 <tcp_enqueue_flags+0x1d0>)
 8014cb4:	4837      	ldr	r0, [pc, #220]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014cb6:	f004 fe1d 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	891b      	ldrh	r3, [r3, #8]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d006      	beq.n	8014cd0 <tcp_enqueue_flags+0x100>
 8014cc2:	4b32      	ldr	r3, [pc, #200]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014cc4:	f240 4243 	movw	r2, #1091	@ 0x443
 8014cc8:	4936      	ldr	r1, [pc, #216]	@ (8014da4 <tcp_enqueue_flags+0x1d4>)
 8014cca:	4832      	ldr	r0, [pc, #200]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014ccc:	f004 fe12 	bl	80198f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d103      	bne.n	8014ce0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014cde:	e00d      	b.n	8014cfc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ce4:	61bb      	str	r3, [r7, #24]
 8014ce6:	e002      	b.n	8014cee <tcp_enqueue_flags+0x11e>
 8014ce8:	69bb      	ldr	r3, [r7, #24]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	61bb      	str	r3, [r7, #24]
 8014cee:	69bb      	ldr	r3, [r7, #24]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d1f8      	bne.n	8014ce8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	68fa      	ldr	r2, [r7, #12]
 8014cfa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014d04:	78fb      	ldrb	r3, [r7, #3]
 8014d06:	f003 0302 	and.w	r3, r3, #2
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d104      	bne.n	8014d18 <tcp_enqueue_flags+0x148>
 8014d0e:	78fb      	ldrb	r3, [r7, #3]
 8014d10:	f003 0301 	and.w	r3, r3, #1
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d004      	beq.n	8014d22 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d1c:	1c5a      	adds	r2, r3, #1
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014d22:	78fb      	ldrb	r3, [r7, #3]
 8014d24:	f003 0301 	and.w	r3, r3, #1
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d006      	beq.n	8014d3a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	8b5b      	ldrh	r3, [r3, #26]
 8014d30:	f043 0320 	orr.w	r3, r3, #32
 8014d34:	b29a      	uxth	r2, r3
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7fa fd1c 	bl	800f77c <pbuf_clen>
 8014d44:	4603      	mov	r3, r0
 8014d46:	461a      	mov	r2, r3
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d4e:	4413      	add	r3, r2
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d00e      	beq.n	8014d80 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d10a      	bne.n	8014d80 <tcp_enqueue_flags+0x1b0>
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d106      	bne.n	8014d80 <tcp_enqueue_flags+0x1b0>
 8014d72:	4b06      	ldr	r3, [pc, #24]	@ (8014d8c <tcp_enqueue_flags+0x1bc>)
 8014d74:	f240 4265 	movw	r2, #1125	@ 0x465
 8014d78:	490b      	ldr	r1, [pc, #44]	@ (8014da8 <tcp_enqueue_flags+0x1d8>)
 8014d7a:	4806      	ldr	r0, [pc, #24]	@ (8014d94 <tcp_enqueue_flags+0x1c4>)
 8014d7c:	f004 fdba 	bl	80198f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014d80:	2300      	movs	r3, #0
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3720      	adds	r7, #32
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	0801e208 	.word	0x0801e208
 8014d90:	0801e62c 	.word	0x0801e62c
 8014d94:	0801e25c 	.word	0x0801e25c
 8014d98:	0801e684 	.word	0x0801e684
 8014d9c:	0801e6a4 	.word	0x0801e6a4
 8014da0:	0801e6e0 	.word	0x0801e6e0
 8014da4:	0801e6f8 	.word	0x0801e6f8
 8014da8:	0801e724 	.word	0x0801e724

08014dac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014dac:	b5b0      	push	{r4, r5, r7, lr}
 8014dae:	b08a      	sub	sp, #40	@ 0x28
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d106      	bne.n	8014dc8 <tcp_output+0x1c>
 8014dba:	4b8a      	ldr	r3, [pc, #552]	@ (8014fe4 <tcp_output+0x238>)
 8014dbc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014dc0:	4989      	ldr	r1, [pc, #548]	@ (8014fe8 <tcp_output+0x23c>)
 8014dc2:	488a      	ldr	r0, [pc, #552]	@ (8014fec <tcp_output+0x240>)
 8014dc4:	f004 fd96 	bl	80198f4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7d1b      	ldrb	r3, [r3, #20]
 8014dcc:	2b01      	cmp	r3, #1
 8014dce:	d106      	bne.n	8014dde <tcp_output+0x32>
 8014dd0:	4b84      	ldr	r3, [pc, #528]	@ (8014fe4 <tcp_output+0x238>)
 8014dd2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014dd6:	4986      	ldr	r1, [pc, #536]	@ (8014ff0 <tcp_output+0x244>)
 8014dd8:	4884      	ldr	r0, [pc, #528]	@ (8014fec <tcp_output+0x240>)
 8014dda:	f004 fd8b 	bl	80198f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014dde:	4b85      	ldr	r3, [pc, #532]	@ (8014ff4 <tcp_output+0x248>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d101      	bne.n	8014dec <tcp_output+0x40>
    return ERR_OK;
 8014de8:	2300      	movs	r3, #0
 8014dea:	e1ce      	b.n	801518a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014df8:	4293      	cmp	r3, r2
 8014dfa:	bf28      	it	cs
 8014dfc:	4613      	movcs	r3, r2
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d10b      	bne.n	8014e26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	8b5b      	ldrh	r3, [r3, #26]
 8014e12:	f003 0302 	and.w	r3, r3, #2
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	f000 81aa 	beq.w	8015170 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f000 fdcb 	bl	80159b8 <tcp_send_empty_ack>
 8014e22:	4603      	mov	r3, r0
 8014e24:	e1b1      	b.n	801518a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014e26:	6879      	ldr	r1, [r7, #4]
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	3304      	adds	r3, #4
 8014e2c:	461a      	mov	r2, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f7ff f826 	bl	8013e80 <tcp_route>
 8014e34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d102      	bne.n	8014e42 <tcp_output+0x96>
    return ERR_RTE;
 8014e3c:	f06f 0303 	mvn.w	r3, #3
 8014e40:	e1a3      	b.n	801518a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d003      	beq.n	8014e50 <tcp_output+0xa4>
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d111      	bne.n	8014e74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014e50:	697b      	ldr	r3, [r7, #20]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d002      	beq.n	8014e5c <tcp_output+0xb0>
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	3304      	adds	r3, #4
 8014e5a:	e000      	b.n	8014e5e <tcp_output+0xb2>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <tcp_output+0xc0>
      return ERR_RTE;
 8014e66:	f06f 0303 	mvn.w	r3, #3
 8014e6a:	e18e      	b.n	801518a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014e6c:	693b      	ldr	r3, [r7, #16]
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e76:	68db      	ldr	r3, [r3, #12]
 8014e78:	685b      	ldr	r3, [r3, #4]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7f9 f859 	bl	800df32 <lwip_htonl>
 8014e80:	4602      	mov	r2, r0
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e86:	1ad3      	subs	r3, r2, r3
 8014e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e8a:	8912      	ldrh	r2, [r2, #8]
 8014e8c:	4413      	add	r3, r2
 8014e8e:	69ba      	ldr	r2, [r7, #24]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d227      	bcs.n	8014ee4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e9a:	461a      	mov	r2, r3
 8014e9c:	69bb      	ldr	r3, [r7, #24]
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	d114      	bne.n	8014ecc <tcp_output+0x120>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d110      	bne.n	8014ecc <tcp_output+0x120>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d10b      	bne.n	8014ecc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2201      	movs	r2, #1
 8014ec0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	8b5b      	ldrh	r3, [r3, #26]
 8014ed0:	f003 0302 	and.w	r3, r3, #2
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	f000 814d 	beq.w	8015174 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 fd6c 	bl	80159b8 <tcp_send_empty_ack>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	e152      	b.n	801518a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ef0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014ef2:	6a3b      	ldr	r3, [r7, #32]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	f000 811c 	beq.w	8015132 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014efa:	e002      	b.n	8014f02 <tcp_output+0x156>
 8014efc:	6a3b      	ldr	r3, [r7, #32]
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	623b      	str	r3, [r7, #32]
 8014f02:	6a3b      	ldr	r3, [r7, #32]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1f8      	bne.n	8014efc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014f0a:	e112      	b.n	8015132 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	899b      	ldrh	r3, [r3, #12]
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	4618      	mov	r0, r3
 8014f16:	f7f8 fff7 	bl	800df08 <lwip_htons>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	b2db      	uxtb	r3, r3
 8014f1e:	f003 0304 	and.w	r3, r3, #4
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d006      	beq.n	8014f34 <tcp_output+0x188>
 8014f26:	4b2f      	ldr	r3, [pc, #188]	@ (8014fe4 <tcp_output+0x238>)
 8014f28:	f240 5236 	movw	r2, #1334	@ 0x536
 8014f2c:	4932      	ldr	r1, [pc, #200]	@ (8014ff8 <tcp_output+0x24c>)
 8014f2e:	482f      	ldr	r0, [pc, #188]	@ (8014fec <tcp_output+0x240>)
 8014f30:	f004 fce0 	bl	80198f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d01f      	beq.n	8014f7c <tcp_output+0x1d0>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	8b5b      	ldrh	r3, [r3, #26]
 8014f40:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d119      	bne.n	8014f7c <tcp_output+0x1d0>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d00b      	beq.n	8014f68 <tcp_output+0x1bc>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d110      	bne.n	8014f7c <tcp_output+0x1d0>
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f5e:	891a      	ldrh	r2, [r3, #8]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f64:	429a      	cmp	r2, r3
 8014f66:	d209      	bcs.n	8014f7c <tcp_output+0x1d0>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d004      	beq.n	8014f7c <tcp_output+0x1d0>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f78:	2b08      	cmp	r3, #8
 8014f7a:	d901      	bls.n	8014f80 <tcp_output+0x1d4>
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e000      	b.n	8014f82 <tcp_output+0x1d6>
 8014f80:	2300      	movs	r3, #0
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d106      	bne.n	8014f94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	8b5b      	ldrh	r3, [r3, #26]
 8014f8a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	f000 80e4 	beq.w	801515c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	7d1b      	ldrb	r3, [r3, #20]
 8014f98:	2b02      	cmp	r3, #2
 8014f9a:	d00d      	beq.n	8014fb8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	899b      	ldrh	r3, [r3, #12]
 8014fa2:	b29c      	uxth	r4, r3
 8014fa4:	2010      	movs	r0, #16
 8014fa6:	f7f8 ffaf 	bl	800df08 <lwip_htons>
 8014faa:	4603      	mov	r3, r0
 8014fac:	461a      	mov	r2, r3
 8014fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb0:	68db      	ldr	r3, [r3, #12]
 8014fb2:	4322      	orrs	r2, r4
 8014fb4:	b292      	uxth	r2, r2
 8014fb6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014fb8:	697a      	ldr	r2, [r7, #20]
 8014fba:	6879      	ldr	r1, [r7, #4]
 8014fbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014fbe:	f000 f909 	bl	80151d4 <tcp_output_segment>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d016      	beq.n	8014ffc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	8b5b      	ldrh	r3, [r3, #26]
 8014fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014fd6:	b29a      	uxth	r2, r3
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	835a      	strh	r2, [r3, #26]
      return err;
 8014fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fe0:	e0d3      	b.n	801518a <tcp_output+0x3de>
 8014fe2:	bf00      	nop
 8014fe4:	0801e208 	.word	0x0801e208
 8014fe8:	0801e74c 	.word	0x0801e74c
 8014fec:	0801e25c 	.word	0x0801e25c
 8014ff0:	0801e764 	.word	0x0801e764
 8014ff4:	20011d64 	.word	0x20011d64
 8014ff8:	0801e78c 	.word	0x0801e78c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	7d1b      	ldrb	r3, [r3, #20]
 8015008:	2b02      	cmp	r3, #2
 801500a:	d006      	beq.n	801501a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	8b5b      	ldrh	r3, [r3, #26]
 8015010:	f023 0303 	bic.w	r3, r3, #3
 8015014:	b29a      	uxth	r2, r3
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501c:	68db      	ldr	r3, [r3, #12]
 801501e:	685b      	ldr	r3, [r3, #4]
 8015020:	4618      	mov	r0, r3
 8015022:	f7f8 ff86 	bl	800df32 <lwip_htonl>
 8015026:	4604      	mov	r4, r0
 8015028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502a:	891b      	ldrh	r3, [r3, #8]
 801502c:	461d      	mov	r5, r3
 801502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	899b      	ldrh	r3, [r3, #12]
 8015034:	b29b      	uxth	r3, r3
 8015036:	4618      	mov	r0, r3
 8015038:	f7f8 ff66 	bl	800df08 <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	b2db      	uxtb	r3, r3
 8015040:	f003 0303 	and.w	r3, r3, #3
 8015044:	2b00      	cmp	r3, #0
 8015046:	d001      	beq.n	801504c <tcp_output+0x2a0>
 8015048:	2301      	movs	r3, #1
 801504a:	e000      	b.n	801504e <tcp_output+0x2a2>
 801504c:	2300      	movs	r3, #0
 801504e:	442b      	add	r3, r5
 8015050:	4423      	add	r3, r4
 8015052:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	1ad3      	subs	r3, r2, r3
 801505c:	2b00      	cmp	r3, #0
 801505e:	da02      	bge.n	8015066 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015068:	891b      	ldrh	r3, [r3, #8]
 801506a:	461c      	mov	r4, r3
 801506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	899b      	ldrh	r3, [r3, #12]
 8015072:	b29b      	uxth	r3, r3
 8015074:	4618      	mov	r0, r3
 8015076:	f7f8 ff47 	bl	800df08 <lwip_htons>
 801507a:	4603      	mov	r3, r0
 801507c:	b2db      	uxtb	r3, r3
 801507e:	f003 0303 	and.w	r3, r3, #3
 8015082:	2b00      	cmp	r3, #0
 8015084:	d001      	beq.n	801508a <tcp_output+0x2de>
 8015086:	2301      	movs	r3, #1
 8015088:	e000      	b.n	801508c <tcp_output+0x2e0>
 801508a:	2300      	movs	r3, #0
 801508c:	4423      	add	r3, r4
 801508e:	2b00      	cmp	r3, #0
 8015090:	d049      	beq.n	8015126 <tcp_output+0x37a>
      seg->next = NULL;
 8015092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015094:	2200      	movs	r2, #0
 8015096:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801509c:	2b00      	cmp	r3, #0
 801509e:	d105      	bne.n	80150ac <tcp_output+0x300>
        pcb->unacked = seg;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150a4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80150a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a8:	623b      	str	r3, [r7, #32]
 80150aa:	e03f      	b.n	801512c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80150ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ae:	68db      	ldr	r3, [r3, #12]
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7f8 ff3d 	bl	800df32 <lwip_htonl>
 80150b8:	4604      	mov	r4, r0
 80150ba:	6a3b      	ldr	r3, [r7, #32]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f8 ff36 	bl	800df32 <lwip_htonl>
 80150c6:	4603      	mov	r3, r0
 80150c8:	1ae3      	subs	r3, r4, r3
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	da24      	bge.n	8015118 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	3370      	adds	r3, #112	@ 0x70
 80150d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150d4:	e002      	b.n	80150dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150dc:	69fb      	ldr	r3, [r7, #28]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d011      	beq.n	8015108 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80150e4:	69fb      	ldr	r3, [r7, #28]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	685b      	ldr	r3, [r3, #4]
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f8 ff20 	bl	800df32 <lwip_htonl>
 80150f2:	4604      	mov	r4, r0
 80150f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f6:	68db      	ldr	r3, [r3, #12]
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7f8 ff19 	bl	800df32 <lwip_htonl>
 8015100:	4603      	mov	r3, r0
 8015102:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015104:	2b00      	cmp	r3, #0
 8015106:	dbe6      	blt.n	80150d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	681a      	ldr	r2, [r3, #0]
 801510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015114:	601a      	str	r2, [r3, #0]
 8015116:	e009      	b.n	801512c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015118:	6a3b      	ldr	r3, [r7, #32]
 801511a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801511c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801511e:	6a3b      	ldr	r3, [r7, #32]
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	623b      	str	r3, [r7, #32]
 8015124:	e002      	b.n	801512c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015128:	f7fb ff1f 	bl	8010f6a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015130:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015134:	2b00      	cmp	r3, #0
 8015136:	d012      	beq.n	801515e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	4618      	mov	r0, r3
 8015140:	f7f8 fef7 	bl	800df32 <lwip_htonl>
 8015144:	4602      	mov	r2, r0
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801514a:	1ad3      	subs	r3, r2, r3
 801514c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801514e:	8912      	ldrh	r2, [r2, #8]
 8015150:	4413      	add	r3, r2
  while (seg != NULL &&
 8015152:	69ba      	ldr	r2, [r7, #24]
 8015154:	429a      	cmp	r2, r3
 8015156:	f4bf aed9 	bcs.w	8014f0c <tcp_output+0x160>
 801515a:	e000      	b.n	801515e <tcp_output+0x3b2>
      break;
 801515c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015162:	2b00      	cmp	r3, #0
 8015164:	d108      	bne.n	8015178 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2200      	movs	r2, #0
 801516a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801516e:	e004      	b.n	801517a <tcp_output+0x3ce>
    goto output_done;
 8015170:	bf00      	nop
 8015172:	e002      	b.n	801517a <tcp_output+0x3ce>
    goto output_done;
 8015174:	bf00      	nop
 8015176:	e000      	b.n	801517a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015178:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	8b5b      	ldrh	r3, [r3, #26]
 801517e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015182:	b29a      	uxth	r2, r3
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015188:	2300      	movs	r3, #0
}
 801518a:	4618      	mov	r0, r3
 801518c:	3728      	adds	r7, #40	@ 0x28
 801518e:	46bd      	mov	sp, r7
 8015190:	bdb0      	pop	{r4, r5, r7, pc}
 8015192:	bf00      	nop

08015194 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d106      	bne.n	80151b0 <tcp_output_segment_busy+0x1c>
 80151a2:	4b09      	ldr	r3, [pc, #36]	@ (80151c8 <tcp_output_segment_busy+0x34>)
 80151a4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80151a8:	4908      	ldr	r1, [pc, #32]	@ (80151cc <tcp_output_segment_busy+0x38>)
 80151aa:	4809      	ldr	r0, [pc, #36]	@ (80151d0 <tcp_output_segment_busy+0x3c>)
 80151ac:	f004 fba2 	bl	80198f4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	7b9b      	ldrb	r3, [r3, #14]
 80151b6:	2b01      	cmp	r3, #1
 80151b8:	d001      	beq.n	80151be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80151ba:	2301      	movs	r3, #1
 80151bc:	e000      	b.n	80151c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80151be:	2300      	movs	r3, #0
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3708      	adds	r7, #8
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	0801e208 	.word	0x0801e208
 80151cc:	0801e7a4 	.word	0x0801e7a4
 80151d0:	0801e25c 	.word	0x0801e25c

080151d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80151d4:	b5b0      	push	{r4, r5, r7, lr}
 80151d6:	b08c      	sub	sp, #48	@ 0x30
 80151d8:	af04      	add	r7, sp, #16
 80151da:	60f8      	str	r0, [r7, #12]
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d106      	bne.n	80151f4 <tcp_output_segment+0x20>
 80151e6:	4b64      	ldr	r3, [pc, #400]	@ (8015378 <tcp_output_segment+0x1a4>)
 80151e8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80151ec:	4963      	ldr	r1, [pc, #396]	@ (801537c <tcp_output_segment+0x1a8>)
 80151ee:	4864      	ldr	r0, [pc, #400]	@ (8015380 <tcp_output_segment+0x1ac>)
 80151f0:	f004 fb80 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d106      	bne.n	8015208 <tcp_output_segment+0x34>
 80151fa:	4b5f      	ldr	r3, [pc, #380]	@ (8015378 <tcp_output_segment+0x1a4>)
 80151fc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015200:	4960      	ldr	r1, [pc, #384]	@ (8015384 <tcp_output_segment+0x1b0>)
 8015202:	485f      	ldr	r0, [pc, #380]	@ (8015380 <tcp_output_segment+0x1ac>)
 8015204:	f004 fb76 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d106      	bne.n	801521c <tcp_output_segment+0x48>
 801520e:	4b5a      	ldr	r3, [pc, #360]	@ (8015378 <tcp_output_segment+0x1a4>)
 8015210:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015214:	495c      	ldr	r1, [pc, #368]	@ (8015388 <tcp_output_segment+0x1b4>)
 8015216:	485a      	ldr	r0, [pc, #360]	@ (8015380 <tcp_output_segment+0x1ac>)
 8015218:	f004 fb6c 	bl	80198f4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f7ff ffb9 	bl	8015194 <tcp_output_segment_busy>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d001      	beq.n	801522c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015228:	2300      	movs	r3, #0
 801522a:	e0a1      	b.n	8015370 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	68dc      	ldr	r4, [r3, #12]
 8015234:	4610      	mov	r0, r2
 8015236:	f7f8 fe7c 	bl	800df32 <lwip_htonl>
 801523a:	4603      	mov	r3, r0
 801523c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	68dc      	ldr	r4, [r3, #12]
 8015246:	4610      	mov	r0, r2
 8015248:	f7f8 fe5e 	bl	800df08 <lwip_htons>
 801524c:	4603      	mov	r3, r0
 801524e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015254:	68ba      	ldr	r2, [r7, #8]
 8015256:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015258:	441a      	add	r2, r3
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	3314      	adds	r3, #20
 8015264:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	7a9b      	ldrb	r3, [r3, #10]
 801526a:	f003 0301 	and.w	r3, r3, #1
 801526e:	2b00      	cmp	r3, #0
 8015270:	d015      	beq.n	801529e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	3304      	adds	r3, #4
 8015276:	461a      	mov	r2, r3
 8015278:	6879      	ldr	r1, [r7, #4]
 801527a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801527e:	f7fc fa39 	bl	80116f4 <tcp_eff_send_mss_netif>
 8015282:	4603      	mov	r3, r0
 8015284:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015286:	8b7b      	ldrh	r3, [r7, #26]
 8015288:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801528c:	4618      	mov	r0, r3
 801528e:	f7f8 fe50 	bl	800df32 <lwip_htonl>
 8015292:	4602      	mov	r2, r0
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	3304      	adds	r3, #4
 801529c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	da02      	bge.n	80152ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	2200      	movs	r2, #0
 80152ac:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d10c      	bne.n	80152d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80152b6:	4b35      	ldr	r3, [pc, #212]	@ (801538c <tcp_output_segment+0x1b8>)
 80152b8:	681a      	ldr	r2, [r3, #0]
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7f8 fe34 	bl	800df32 <lwip_htonl>
 80152ca:	4602      	mov	r2, r0
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	68da      	ldr	r2, [r3, #12]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	8959      	ldrh	r1, [r3, #10]
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	685b      	ldr	r3, [r3, #4]
 80152e8:	8b3a      	ldrh	r2, [r7, #24]
 80152ea:	1a8a      	subs	r2, r1, r2
 80152ec:	b292      	uxth	r2, r2
 80152ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	685b      	ldr	r3, [r3, #4]
 80152f4:	8919      	ldrh	r1, [r3, #8]
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	8b3a      	ldrh	r2, [r7, #24]
 80152fc:	1a8a      	subs	r2, r1, r2
 80152fe:	b292      	uxth	r2, r2
 8015300:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	68d2      	ldr	r2, [r2, #12]
 801530a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	2200      	movs	r2, #0
 8015312:	741a      	strb	r2, [r3, #16]
 8015314:	2200      	movs	r2, #0
 8015316:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	68da      	ldr	r2, [r3, #12]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	7a9b      	ldrb	r3, [r3, #10]
 8015320:	f003 0301 	and.w	r3, r3, #1
 8015324:	2b00      	cmp	r3, #0
 8015326:	d001      	beq.n	801532c <tcp_output_segment+0x158>
 8015328:	2318      	movs	r3, #24
 801532a:	e000      	b.n	801532e <tcp_output_segment+0x15a>
 801532c:	2314      	movs	r3, #20
 801532e:	4413      	add	r3, r2
 8015330:	69fa      	ldr	r2, [r7, #28]
 8015332:	429a      	cmp	r2, r3
 8015334:	d006      	beq.n	8015344 <tcp_output_segment+0x170>
 8015336:	4b10      	ldr	r3, [pc, #64]	@ (8015378 <tcp_output_segment+0x1a4>)
 8015338:	f240 621c 	movw	r2, #1564	@ 0x61c
 801533c:	4914      	ldr	r1, [pc, #80]	@ (8015390 <tcp_output_segment+0x1bc>)
 801533e:	4810      	ldr	r0, [pc, #64]	@ (8015380 <tcp_output_segment+0x1ac>)
 8015340:	f004 fad8 	bl	80198f4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	6858      	ldr	r0, [r3, #4]
 8015348:	68b9      	ldr	r1, [r7, #8]
 801534a:	68bb      	ldr	r3, [r7, #8]
 801534c:	1d1c      	adds	r4, r3, #4
 801534e:	68bb      	ldr	r3, [r7, #8]
 8015350:	7add      	ldrb	r5, [r3, #11]
 8015352:	68bb      	ldr	r3, [r7, #8]
 8015354:	7a9b      	ldrb	r3, [r3, #10]
 8015356:	687a      	ldr	r2, [r7, #4]
 8015358:	9202      	str	r2, [sp, #8]
 801535a:	2206      	movs	r2, #6
 801535c:	9201      	str	r2, [sp, #4]
 801535e:	9300      	str	r3, [sp, #0]
 8015360:	462b      	mov	r3, r5
 8015362:	4622      	mov	r2, r4
 8015364:	f002 fbaa 	bl	8017abc <ip4_output_if>
 8015368:	4603      	mov	r3, r0
 801536a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801536c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015370:	4618      	mov	r0, r3
 8015372:	3720      	adds	r7, #32
 8015374:	46bd      	mov	sp, r7
 8015376:	bdb0      	pop	{r4, r5, r7, pc}
 8015378:	0801e208 	.word	0x0801e208
 801537c:	0801e7cc 	.word	0x0801e7cc
 8015380:	0801e25c 	.word	0x0801e25c
 8015384:	0801e7ec 	.word	0x0801e7ec
 8015388:	0801e80c 	.word	0x0801e80c
 801538c:	20011d18 	.word	0x20011d18
 8015390:	0801e830 	.word	0x0801e830

08015394 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015394:	b5b0      	push	{r4, r5, r7, lr}
 8015396:	b084      	sub	sp, #16
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <tcp_rexmit_rto_prepare+0x1c>
 80153a2:	4b31      	ldr	r3, [pc, #196]	@ (8015468 <tcp_rexmit_rto_prepare+0xd4>)
 80153a4:	f240 6263 	movw	r2, #1635	@ 0x663
 80153a8:	4930      	ldr	r1, [pc, #192]	@ (801546c <tcp_rexmit_rto_prepare+0xd8>)
 80153aa:	4831      	ldr	r0, [pc, #196]	@ (8015470 <tcp_rexmit_rto_prepare+0xdc>)
 80153ac:	f004 faa2 	bl	80198f4 <iprintf>

  if (pcb->unacked == NULL) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d102      	bne.n	80153be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80153b8:	f06f 0305 	mvn.w	r3, #5
 80153bc:	e050      	b.n	8015460 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153c2:	60fb      	str	r3, [r7, #12]
 80153c4:	e00b      	b.n	80153de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80153c6:	68f8      	ldr	r0, [r7, #12]
 80153c8:	f7ff fee4 	bl	8015194 <tcp_output_segment_busy>
 80153cc:	4603      	mov	r3, r0
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d002      	beq.n	80153d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80153d2:	f06f 0305 	mvn.w	r3, #5
 80153d6:	e043      	b.n	8015460 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	60fb      	str	r3, [r7, #12]
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d1ef      	bne.n	80153c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80153e6:	68f8      	ldr	r0, [r7, #12]
 80153e8:	f7ff fed4 	bl	8015194 <tcp_output_segment_busy>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d002      	beq.n	80153f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80153f2:	f06f 0305 	mvn.w	r3, #5
 80153f6:	e033      	b.n	8015460 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2200      	movs	r2, #0
 801540c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	8b5b      	ldrh	r3, [r3, #26]
 8015412:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015416:	b29a      	uxth	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	4618      	mov	r0, r3
 8015424:	f7f8 fd85 	bl	800df32 <lwip_htonl>
 8015428:	4604      	mov	r4, r0
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	891b      	ldrh	r3, [r3, #8]
 801542e:	461d      	mov	r5, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	899b      	ldrh	r3, [r3, #12]
 8015436:	b29b      	uxth	r3, r3
 8015438:	4618      	mov	r0, r3
 801543a:	f7f8 fd65 	bl	800df08 <lwip_htons>
 801543e:	4603      	mov	r3, r0
 8015440:	b2db      	uxtb	r3, r3
 8015442:	f003 0303 	and.w	r3, r3, #3
 8015446:	2b00      	cmp	r3, #0
 8015448:	d001      	beq.n	801544e <tcp_rexmit_rto_prepare+0xba>
 801544a:	2301      	movs	r3, #1
 801544c:	e000      	b.n	8015450 <tcp_rexmit_rto_prepare+0xbc>
 801544e:	2300      	movs	r3, #0
 8015450:	442b      	add	r3, r5
 8015452:	18e2      	adds	r2, r4, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801545e:	2300      	movs	r3, #0
}
 8015460:	4618      	mov	r0, r3
 8015462:	3710      	adds	r7, #16
 8015464:	46bd      	mov	sp, r7
 8015466:	bdb0      	pop	{r4, r5, r7, pc}
 8015468:	0801e208 	.word	0x0801e208
 801546c:	0801e844 	.word	0x0801e844
 8015470:	0801e25c 	.word	0x0801e25c

08015474 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b082      	sub	sp, #8
 8015478:	af00      	add	r7, sp, #0
 801547a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d106      	bne.n	8015490 <tcp_rexmit_rto_commit+0x1c>
 8015482:	4b0d      	ldr	r3, [pc, #52]	@ (80154b8 <tcp_rexmit_rto_commit+0x44>)
 8015484:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015488:	490c      	ldr	r1, [pc, #48]	@ (80154bc <tcp_rexmit_rto_commit+0x48>)
 801548a:	480d      	ldr	r0, [pc, #52]	@ (80154c0 <tcp_rexmit_rto_commit+0x4c>)
 801548c:	f004 fa32 	bl	80198f4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015496:	2bff      	cmp	r3, #255	@ 0xff
 8015498:	d007      	beq.n	80154aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154a0:	3301      	adds	r3, #1
 80154a2:	b2da      	uxtb	r2, r3
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff fc7e 	bl	8014dac <tcp_output>
}
 80154b0:	bf00      	nop
 80154b2:	3708      	adds	r7, #8
 80154b4:	46bd      	mov	sp, r7
 80154b6:	bd80      	pop	{r7, pc}
 80154b8:	0801e208 	.word	0x0801e208
 80154bc:	0801e868 	.word	0x0801e868
 80154c0:	0801e25c 	.word	0x0801e25c

080154c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d106      	bne.n	80154e0 <tcp_rexmit_rto+0x1c>
 80154d2:	4b0a      	ldr	r3, [pc, #40]	@ (80154fc <tcp_rexmit_rto+0x38>)
 80154d4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80154d8:	4909      	ldr	r1, [pc, #36]	@ (8015500 <tcp_rexmit_rto+0x3c>)
 80154da:	480a      	ldr	r0, [pc, #40]	@ (8015504 <tcp_rexmit_rto+0x40>)
 80154dc:	f004 fa0a 	bl	80198f4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f7ff ff57 	bl	8015394 <tcp_rexmit_rto_prepare>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d102      	bne.n	80154f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7ff ffc1 	bl	8015474 <tcp_rexmit_rto_commit>
  }
}
 80154f2:	bf00      	nop
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
 80154fa:	bf00      	nop
 80154fc:	0801e208 	.word	0x0801e208
 8015500:	0801e88c 	.word	0x0801e88c
 8015504:	0801e25c 	.word	0x0801e25c

08015508 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015508:	b590      	push	{r4, r7, lr}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d106      	bne.n	8015524 <tcp_rexmit+0x1c>
 8015516:	4b2f      	ldr	r3, [pc, #188]	@ (80155d4 <tcp_rexmit+0xcc>)
 8015518:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801551c:	492e      	ldr	r1, [pc, #184]	@ (80155d8 <tcp_rexmit+0xd0>)
 801551e:	482f      	ldr	r0, [pc, #188]	@ (80155dc <tcp_rexmit+0xd4>)
 8015520:	f004 f9e8 	bl	80198f4 <iprintf>

  if (pcb->unacked == NULL) {
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015528:	2b00      	cmp	r3, #0
 801552a:	d102      	bne.n	8015532 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801552c:	f06f 0305 	mvn.w	r3, #5
 8015530:	e04c      	b.n	80155cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015536:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015538:	68b8      	ldr	r0, [r7, #8]
 801553a:	f7ff fe2b 	bl	8015194 <tcp_output_segment_busy>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d002      	beq.n	801554a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015544:	f06f 0305 	mvn.w	r3, #5
 8015548:	e040      	b.n	80155cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	681a      	ldr	r2, [r3, #0]
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	336c      	adds	r3, #108	@ 0x6c
 8015556:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015558:	e002      	b.n	8015560 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d011      	beq.n	801558c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	4618      	mov	r0, r3
 8015572:	f7f8 fcde 	bl	800df32 <lwip_htonl>
 8015576:	4604      	mov	r4, r0
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	4618      	mov	r0, r3
 8015580:	f7f8 fcd7 	bl	800df32 <lwip_htonl>
 8015584:	4603      	mov	r3, r0
 8015586:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015588:	2b00      	cmp	r3, #0
 801558a:	dbe6      	blt.n	801555a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	68ba      	ldr	r2, [r7, #8]
 8015598:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d103      	bne.n	80155aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155b0:	2bff      	cmp	r3, #255	@ 0xff
 80155b2:	d007      	beq.n	80155c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155ba:	3301      	adds	r3, #1
 80155bc:	b2da      	uxtb	r2, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2200      	movs	r2, #0
 80155c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80155ca:	2300      	movs	r3, #0
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3714      	adds	r7, #20
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd90      	pop	{r4, r7, pc}
 80155d4:	0801e208 	.word	0x0801e208
 80155d8:	0801e8a8 	.word	0x0801e8a8
 80155dc:	0801e25c 	.word	0x0801e25c

080155e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <tcp_rexmit_fast+0x1c>
 80155ee:	4b2a      	ldr	r3, [pc, #168]	@ (8015698 <tcp_rexmit_fast+0xb8>)
 80155f0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80155f4:	4929      	ldr	r1, [pc, #164]	@ (801569c <tcp_rexmit_fast+0xbc>)
 80155f6:	482a      	ldr	r0, [pc, #168]	@ (80156a0 <tcp_rexmit_fast+0xc0>)
 80155f8:	f004 f97c 	bl	80198f4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015600:	2b00      	cmp	r3, #0
 8015602:	d045      	beq.n	8015690 <tcp_rexmit_fast+0xb0>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	8b5b      	ldrh	r3, [r3, #26]
 8015608:	f003 0304 	and.w	r3, r3, #4
 801560c:	2b00      	cmp	r3, #0
 801560e:	d13f      	bne.n	8015690 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f7ff ff79 	bl	8015508 <tcp_rexmit>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d139      	bne.n	8015690 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015628:	4293      	cmp	r3, r2
 801562a:	bf28      	it	cs
 801562c:	4613      	movcs	r3, r2
 801562e:	b29b      	uxth	r3, r3
 8015630:	2b00      	cmp	r3, #0
 8015632:	da00      	bge.n	8015636 <tcp_rexmit_fast+0x56>
 8015634:	3301      	adds	r3, #1
 8015636:	105b      	asrs	r3, r3, #1
 8015638:	b29a      	uxth	r2, r3
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015646:	461a      	mov	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801564c:	005b      	lsls	r3, r3, #1
 801564e:	429a      	cmp	r2, r3
 8015650:	d206      	bcs.n	8015660 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	b29a      	uxth	r2, r3
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801566a:	4619      	mov	r1, r3
 801566c:	0049      	lsls	r1, r1, #1
 801566e:	440b      	add	r3, r1
 8015670:	b29b      	uxth	r3, r3
 8015672:	4413      	add	r3, r2
 8015674:	b29a      	uxth	r2, r3
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	8b5b      	ldrh	r3, [r3, #26]
 8015680:	f043 0304 	orr.w	r3, r3, #4
 8015684:	b29a      	uxth	r2, r3
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2200      	movs	r2, #0
 801568e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015690:	bf00      	nop
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	0801e208 	.word	0x0801e208
 801569c:	0801e8c0 	.word	0x0801e8c0
 80156a0:	0801e25c 	.word	0x0801e25c

080156a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b086      	sub	sp, #24
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	607b      	str	r3, [r7, #4]
 80156ae:	460b      	mov	r3, r1
 80156b0:	817b      	strh	r3, [r7, #10]
 80156b2:	4613      	mov	r3, r2
 80156b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80156b6:	897a      	ldrh	r2, [r7, #10]
 80156b8:	893b      	ldrh	r3, [r7, #8]
 80156ba:	4413      	add	r3, r2
 80156bc:	b29b      	uxth	r3, r3
 80156be:	3314      	adds	r3, #20
 80156c0:	b29b      	uxth	r3, r3
 80156c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80156c6:	4619      	mov	r1, r3
 80156c8:	2022      	movs	r0, #34	@ 0x22
 80156ca:	f7f9 fce5 	bl	800f098 <pbuf_alloc>
 80156ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d04d      	beq.n	8015772 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80156d6:	897b      	ldrh	r3, [r7, #10]
 80156d8:	3313      	adds	r3, #19
 80156da:	697a      	ldr	r2, [r7, #20]
 80156dc:	8952      	ldrh	r2, [r2, #10]
 80156de:	4293      	cmp	r3, r2
 80156e0:	db06      	blt.n	80156f0 <tcp_output_alloc_header_common+0x4c>
 80156e2:	4b26      	ldr	r3, [pc, #152]	@ (801577c <tcp_output_alloc_header_common+0xd8>)
 80156e4:	f240 7223 	movw	r2, #1827	@ 0x723
 80156e8:	4925      	ldr	r1, [pc, #148]	@ (8015780 <tcp_output_alloc_header_common+0xdc>)
 80156ea:	4826      	ldr	r0, [pc, #152]	@ (8015784 <tcp_output_alloc_header_common+0xe0>)
 80156ec:	f004 f902 	bl	80198f4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80156f6:	8c3b      	ldrh	r3, [r7, #32]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f8 fc05 	bl	800df08 <lwip_htons>
 80156fe:	4603      	mov	r3, r0
 8015700:	461a      	mov	r2, r3
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015708:	4618      	mov	r0, r3
 801570a:	f7f8 fbfd 	bl	800df08 <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	461a      	mov	r2, r3
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801571c:	68f8      	ldr	r0, [r7, #12]
 801571e:	f7f8 fc08 	bl	800df32 <lwip_htonl>
 8015722:	4602      	mov	r2, r0
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015728:	897b      	ldrh	r3, [r7, #10]
 801572a:	089b      	lsrs	r3, r3, #2
 801572c:	b29b      	uxth	r3, r3
 801572e:	3305      	adds	r3, #5
 8015730:	b29b      	uxth	r3, r3
 8015732:	031b      	lsls	r3, r3, #12
 8015734:	b29a      	uxth	r2, r3
 8015736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801573a:	b29b      	uxth	r3, r3
 801573c:	4313      	orrs	r3, r2
 801573e:	b29b      	uxth	r3, r3
 8015740:	4618      	mov	r0, r3
 8015742:	f7f8 fbe1 	bl	800df08 <lwip_htons>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801574e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015750:	4618      	mov	r0, r3
 8015752:	f7f8 fbd9 	bl	800df08 <lwip_htons>
 8015756:	4603      	mov	r3, r0
 8015758:	461a      	mov	r2, r3
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	2200      	movs	r2, #0
 8015762:	741a      	strb	r2, [r3, #16]
 8015764:	2200      	movs	r2, #0
 8015766:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	2200      	movs	r2, #0
 801576c:	749a      	strb	r2, [r3, #18]
 801576e:	2200      	movs	r2, #0
 8015770:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015772:	697b      	ldr	r3, [r7, #20]
}
 8015774:	4618      	mov	r0, r3
 8015776:	3718      	adds	r7, #24
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}
 801577c:	0801e208 	.word	0x0801e208
 8015780:	0801e8e0 	.word	0x0801e8e0
 8015784:	0801e25c 	.word	0x0801e25c

08015788 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015788:	b5b0      	push	{r4, r5, r7, lr}
 801578a:	b08a      	sub	sp, #40	@ 0x28
 801578c:	af04      	add	r7, sp, #16
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	607b      	str	r3, [r7, #4]
 8015792:	460b      	mov	r3, r1
 8015794:	817b      	strh	r3, [r7, #10]
 8015796:	4613      	mov	r3, r2
 8015798:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d106      	bne.n	80157ae <tcp_output_alloc_header+0x26>
 80157a0:	4b15      	ldr	r3, [pc, #84]	@ (80157f8 <tcp_output_alloc_header+0x70>)
 80157a2:	f240 7242 	movw	r2, #1858	@ 0x742
 80157a6:	4915      	ldr	r1, [pc, #84]	@ (80157fc <tcp_output_alloc_header+0x74>)
 80157a8:	4815      	ldr	r0, [pc, #84]	@ (8015800 <tcp_output_alloc_header+0x78>)
 80157aa:	f004 f8a3 	bl	80198f4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	8adb      	ldrh	r3, [r3, #22]
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	8b12      	ldrh	r2, [r2, #24]
 80157ba:	68f9      	ldr	r1, [r7, #12]
 80157bc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80157be:	893d      	ldrh	r5, [r7, #8]
 80157c0:	897c      	ldrh	r4, [r7, #10]
 80157c2:	9103      	str	r1, [sp, #12]
 80157c4:	2110      	movs	r1, #16
 80157c6:	9102      	str	r1, [sp, #8]
 80157c8:	9201      	str	r2, [sp, #4]
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	462a      	mov	r2, r5
 80157d0:	4621      	mov	r1, r4
 80157d2:	f7ff ff67 	bl	80156a4 <tcp_output_alloc_header_common>
 80157d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d006      	beq.n	80157ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157e2:	68fa      	ldr	r2, [r7, #12]
 80157e4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80157e6:	441a      	add	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80157ec:	697b      	ldr	r3, [r7, #20]
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	3718      	adds	r7, #24
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bdb0      	pop	{r4, r5, r7, pc}
 80157f6:	bf00      	nop
 80157f8:	0801e208 	.word	0x0801e208
 80157fc:	0801e910 	.word	0x0801e910
 8015800:	0801e25c 	.word	0x0801e25c

08015804 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b088      	sub	sp, #32
 8015808:	af00      	add	r7, sp, #0
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	4611      	mov	r1, r2
 8015810:	461a      	mov	r2, r3
 8015812:	460b      	mov	r3, r1
 8015814:	71fb      	strb	r3, [r7, #7]
 8015816:	4613      	mov	r3, r2
 8015818:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801581a:	2300      	movs	r3, #0
 801581c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d106      	bne.n	8015832 <tcp_output_fill_options+0x2e>
 8015824:	4b12      	ldr	r3, [pc, #72]	@ (8015870 <tcp_output_fill_options+0x6c>)
 8015826:	f240 7256 	movw	r2, #1878	@ 0x756
 801582a:	4912      	ldr	r1, [pc, #72]	@ (8015874 <tcp_output_fill_options+0x70>)
 801582c:	4812      	ldr	r0, [pc, #72]	@ (8015878 <tcp_output_fill_options+0x74>)
 801582e:	f004 f861 	bl	80198f4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	685b      	ldr	r3, [r3, #4]
 8015836:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015838:	69bb      	ldr	r3, [r7, #24]
 801583a:	3314      	adds	r3, #20
 801583c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801583e:	8bfb      	ldrh	r3, [r7, #30]
 8015840:	009b      	lsls	r3, r3, #2
 8015842:	461a      	mov	r2, r3
 8015844:	79fb      	ldrb	r3, [r7, #7]
 8015846:	009b      	lsls	r3, r3, #2
 8015848:	f003 0304 	and.w	r3, r3, #4
 801584c:	4413      	add	r3, r2
 801584e:	3314      	adds	r3, #20
 8015850:	69ba      	ldr	r2, [r7, #24]
 8015852:	4413      	add	r3, r2
 8015854:	697a      	ldr	r2, [r7, #20]
 8015856:	429a      	cmp	r2, r3
 8015858:	d006      	beq.n	8015868 <tcp_output_fill_options+0x64>
 801585a:	4b05      	ldr	r3, [pc, #20]	@ (8015870 <tcp_output_fill_options+0x6c>)
 801585c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015860:	4906      	ldr	r1, [pc, #24]	@ (801587c <tcp_output_fill_options+0x78>)
 8015862:	4805      	ldr	r0, [pc, #20]	@ (8015878 <tcp_output_fill_options+0x74>)
 8015864:	f004 f846 	bl	80198f4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015868:	bf00      	nop
 801586a:	3720      	adds	r7, #32
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	0801e208 	.word	0x0801e208
 8015874:	0801e938 	.word	0x0801e938
 8015878:	0801e25c 	.word	0x0801e25c
 801587c:	0801e830 	.word	0x0801e830

08015880 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b08a      	sub	sp, #40	@ 0x28
 8015884:	af04      	add	r7, sp, #16
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	607a      	str	r2, [r7, #4]
 801588c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801588e:	68bb      	ldr	r3, [r7, #8]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d106      	bne.n	80158a2 <tcp_output_control_segment+0x22>
 8015894:	4b1c      	ldr	r3, [pc, #112]	@ (8015908 <tcp_output_control_segment+0x88>)
 8015896:	f240 7287 	movw	r2, #1927	@ 0x787
 801589a:	491c      	ldr	r1, [pc, #112]	@ (801590c <tcp_output_control_segment+0x8c>)
 801589c:	481c      	ldr	r0, [pc, #112]	@ (8015910 <tcp_output_control_segment+0x90>)
 801589e:	f004 f829 	bl	80198f4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80158a2:	683a      	ldr	r2, [r7, #0]
 80158a4:	6879      	ldr	r1, [r7, #4]
 80158a6:	68f8      	ldr	r0, [r7, #12]
 80158a8:	f7fe faea 	bl	8013e80 <tcp_route>
 80158ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d102      	bne.n	80158ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80158b4:	23fc      	movs	r3, #252	@ 0xfc
 80158b6:	75fb      	strb	r3, [r7, #23]
 80158b8:	e01c      	b.n	80158f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d006      	beq.n	80158ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	7adb      	ldrb	r3, [r3, #11]
 80158c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	7a9b      	ldrb	r3, [r3, #10]
 80158ca:	757b      	strb	r3, [r7, #21]
 80158cc:	e003      	b.n	80158d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80158ce:	23ff      	movs	r3, #255	@ 0xff
 80158d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80158d2:	2300      	movs	r3, #0
 80158d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80158d6:	7dba      	ldrb	r2, [r7, #22]
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	9302      	str	r3, [sp, #8]
 80158dc:	2306      	movs	r3, #6
 80158de:	9301      	str	r3, [sp, #4]
 80158e0:	7d7b      	ldrb	r3, [r7, #21]
 80158e2:	9300      	str	r3, [sp, #0]
 80158e4:	4613      	mov	r3, r2
 80158e6:	683a      	ldr	r2, [r7, #0]
 80158e8:	6879      	ldr	r1, [r7, #4]
 80158ea:	68b8      	ldr	r0, [r7, #8]
 80158ec:	f002 f8e6 	bl	8017abc <ip4_output_if>
 80158f0:	4603      	mov	r3, r0
 80158f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80158f4:	68b8      	ldr	r0, [r7, #8]
 80158f6:	f7f9 feb3 	bl	800f660 <pbuf_free>
  return err;
 80158fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3718      	adds	r7, #24
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	0801e208 	.word	0x0801e208
 801590c:	0801e960 	.word	0x0801e960
 8015910:	0801e25c 	.word	0x0801e25c

08015914 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015914:	b590      	push	{r4, r7, lr}
 8015916:	b08b      	sub	sp, #44	@ 0x2c
 8015918:	af04      	add	r7, sp, #16
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
 8015920:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d106      	bne.n	8015936 <tcp_rst+0x22>
 8015928:	4b1f      	ldr	r3, [pc, #124]	@ (80159a8 <tcp_rst+0x94>)
 801592a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801592e:	491f      	ldr	r1, [pc, #124]	@ (80159ac <tcp_rst+0x98>)
 8015930:	481f      	ldr	r0, [pc, #124]	@ (80159b0 <tcp_rst+0x9c>)
 8015932:	f003 ffdf 	bl	80198f4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015938:	2b00      	cmp	r3, #0
 801593a:	d106      	bne.n	801594a <tcp_rst+0x36>
 801593c:	4b1a      	ldr	r3, [pc, #104]	@ (80159a8 <tcp_rst+0x94>)
 801593e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015942:	491c      	ldr	r1, [pc, #112]	@ (80159b4 <tcp_rst+0xa0>)
 8015944:	481a      	ldr	r0, [pc, #104]	@ (80159b0 <tcp_rst+0x9c>)
 8015946:	f003 ffd5 	bl	80198f4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801594a:	2300      	movs	r3, #0
 801594c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801594e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015952:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015954:	7dfb      	ldrb	r3, [r7, #23]
 8015956:	b29c      	uxth	r4, r3
 8015958:	68b8      	ldr	r0, [r7, #8]
 801595a:	f7f8 faea 	bl	800df32 <lwip_htonl>
 801595e:	4602      	mov	r2, r0
 8015960:	8abb      	ldrh	r3, [r7, #20]
 8015962:	9303      	str	r3, [sp, #12]
 8015964:	2314      	movs	r3, #20
 8015966:	9302      	str	r3, [sp, #8]
 8015968:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801596a:	9301      	str	r3, [sp, #4]
 801596c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801596e:	9300      	str	r3, [sp, #0]
 8015970:	4613      	mov	r3, r2
 8015972:	2200      	movs	r2, #0
 8015974:	4621      	mov	r1, r4
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7ff fe94 	bl	80156a4 <tcp_output_alloc_header_common>
 801597c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d00c      	beq.n	801599e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015984:	7dfb      	ldrb	r3, [r7, #23]
 8015986:	2200      	movs	r2, #0
 8015988:	6939      	ldr	r1, [r7, #16]
 801598a:	68f8      	ldr	r0, [r7, #12]
 801598c:	f7ff ff3a 	bl	8015804 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015992:	683a      	ldr	r2, [r7, #0]
 8015994:	6939      	ldr	r1, [r7, #16]
 8015996:	68f8      	ldr	r0, [r7, #12]
 8015998:	f7ff ff72 	bl	8015880 <tcp_output_control_segment>
 801599c:	e000      	b.n	80159a0 <tcp_rst+0x8c>
    return;
 801599e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80159a0:	371c      	adds	r7, #28
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd90      	pop	{r4, r7, pc}
 80159a6:	bf00      	nop
 80159a8:	0801e208 	.word	0x0801e208
 80159ac:	0801e98c 	.word	0x0801e98c
 80159b0:	0801e25c 	.word	0x0801e25c
 80159b4:	0801e9a8 	.word	0x0801e9a8

080159b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80159b8:	b590      	push	{r4, r7, lr}
 80159ba:	b087      	sub	sp, #28
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80159c0:	2300      	movs	r3, #0
 80159c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80159c4:	2300      	movs	r3, #0
 80159c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d106      	bne.n	80159dc <tcp_send_empty_ack+0x24>
 80159ce:	4b28      	ldr	r3, [pc, #160]	@ (8015a70 <tcp_send_empty_ack+0xb8>)
 80159d0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80159d4:	4927      	ldr	r1, [pc, #156]	@ (8015a74 <tcp_send_empty_ack+0xbc>)
 80159d6:	4828      	ldr	r0, [pc, #160]	@ (8015a78 <tcp_send_empty_ack+0xc0>)
 80159d8:	f003 ff8c 	bl	80198f4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80159dc:	7dfb      	ldrb	r3, [r7, #23]
 80159de:	009b      	lsls	r3, r3, #2
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	f003 0304 	and.w	r3, r3, #4
 80159e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80159e8:	7d7b      	ldrb	r3, [r7, #21]
 80159ea:	b29c      	uxth	r4, r3
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159f0:	4618      	mov	r0, r3
 80159f2:	f7f8 fa9e 	bl	800df32 <lwip_htonl>
 80159f6:	4603      	mov	r3, r0
 80159f8:	2200      	movs	r2, #0
 80159fa:	4621      	mov	r1, r4
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f7ff fec3 	bl	8015788 <tcp_output_alloc_header>
 8015a02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a04:	693b      	ldr	r3, [r7, #16]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d109      	bne.n	8015a1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	8b5b      	ldrh	r3, [r3, #26]
 8015a0e:	f043 0303 	orr.w	r3, r3, #3
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015a18:	f06f 0301 	mvn.w	r3, #1
 8015a1c:	e023      	b.n	8015a66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015a1e:	7dbb      	ldrb	r3, [r7, #22]
 8015a20:	7dfa      	ldrb	r2, [r7, #23]
 8015a22:	6939      	ldr	r1, [r7, #16]
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7ff feed 	bl	8015804 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	3304      	adds	r3, #4
 8015a30:	6939      	ldr	r1, [r7, #16]
 8015a32:	6878      	ldr	r0, [r7, #4]
 8015a34:	f7ff ff24 	bl	8015880 <tcp_output_control_segment>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d007      	beq.n	8015a54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	8b5b      	ldrh	r3, [r3, #26]
 8015a48:	f043 0303 	orr.w	r3, r3, #3
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	835a      	strh	r2, [r3, #26]
 8015a52:	e006      	b.n	8015a62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	8b5b      	ldrh	r3, [r3, #26]
 8015a58:	f023 0303 	bic.w	r3, r3, #3
 8015a5c:	b29a      	uxth	r2, r3
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	371c      	adds	r7, #28
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd90      	pop	{r4, r7, pc}
 8015a6e:	bf00      	nop
 8015a70:	0801e208 	.word	0x0801e208
 8015a74:	0801e9c4 	.word	0x0801e9c4
 8015a78:	0801e25c 	.word	0x0801e25c

08015a7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015a7c:	b590      	push	{r4, r7, lr}
 8015a7e:	b087      	sub	sp, #28
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a84:	2300      	movs	r3, #0
 8015a86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d106      	bne.n	8015a9c <tcp_keepalive+0x20>
 8015a8e:	4b18      	ldr	r3, [pc, #96]	@ (8015af0 <tcp_keepalive+0x74>)
 8015a90:	f640 0224 	movw	r2, #2084	@ 0x824
 8015a94:	4917      	ldr	r1, [pc, #92]	@ (8015af4 <tcp_keepalive+0x78>)
 8015a96:	4818      	ldr	r0, [pc, #96]	@ (8015af8 <tcp_keepalive+0x7c>)
 8015a98:	f003 ff2c 	bl	80198f4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015a9c:	7dfb      	ldrb	r3, [r7, #23]
 8015a9e:	b29c      	uxth	r4, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015aa4:	3b01      	subs	r3, #1
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f7f8 fa43 	bl	800df32 <lwip_htonl>
 8015aac:	4603      	mov	r3, r0
 8015aae:	2200      	movs	r2, #0
 8015ab0:	4621      	mov	r1, r4
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7ff fe68 	bl	8015788 <tcp_output_alloc_header>
 8015ab8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d102      	bne.n	8015ac6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ac4:	e010      	b.n	8015ae8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ac6:	7dfb      	ldrb	r3, [r7, #23]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	6939      	ldr	r1, [r7, #16]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f7ff fe99 	bl	8015804 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	3304      	adds	r3, #4
 8015ad8:	6939      	ldr	r1, [r7, #16]
 8015ada:	6878      	ldr	r0, [r7, #4]
 8015adc:	f7ff fed0 	bl	8015880 <tcp_output_control_segment>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	371c      	adds	r7, #28
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd90      	pop	{r4, r7, pc}
 8015af0:	0801e208 	.word	0x0801e208
 8015af4:	0801e9e4 	.word	0x0801e9e4
 8015af8:	0801e25c 	.word	0x0801e25c

08015afc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015afc:	b590      	push	{r4, r7, lr}
 8015afe:	b08b      	sub	sp, #44	@ 0x2c
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b04:	2300      	movs	r3, #0
 8015b06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d106      	bne.n	8015b1e <tcp_zero_window_probe+0x22>
 8015b10:	4b4c      	ldr	r3, [pc, #304]	@ (8015c44 <tcp_zero_window_probe+0x148>)
 8015b12:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015b16:	494c      	ldr	r1, [pc, #304]	@ (8015c48 <tcp_zero_window_probe+0x14c>)
 8015b18:	484c      	ldr	r0, [pc, #304]	@ (8015c4c <tcp_zero_window_probe+0x150>)
 8015b1a:	f003 feeb 	bl	80198f4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015b24:	6a3b      	ldr	r3, [r7, #32]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d101      	bne.n	8015b2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	e086      	b.n	8015c3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b34:	2bff      	cmp	r3, #255	@ 0xff
 8015b36:	d007      	beq.n	8015b48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b3e:	3301      	adds	r3, #1
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015b48:	6a3b      	ldr	r3, [r7, #32]
 8015b4a:	68db      	ldr	r3, [r3, #12]
 8015b4c:	899b      	ldrh	r3, [r3, #12]
 8015b4e:	b29b      	uxth	r3, r3
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f8 f9d9 	bl	800df08 <lwip_htons>
 8015b56:	4603      	mov	r3, r0
 8015b58:	b2db      	uxtb	r3, r3
 8015b5a:	f003 0301 	and.w	r3, r3, #1
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d005      	beq.n	8015b6e <tcp_zero_window_probe+0x72>
 8015b62:	6a3b      	ldr	r3, [r7, #32]
 8015b64:	891b      	ldrh	r3, [r3, #8]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <tcp_zero_window_probe+0x72>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e000      	b.n	8015b70 <tcp_zero_window_probe+0x74>
 8015b6e:	2300      	movs	r3, #0
 8015b70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015b72:	7ffb      	ldrb	r3, [r7, #31]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	bf0c      	ite	eq
 8015b78:	2301      	moveq	r3, #1
 8015b7a:	2300      	movne	r3, #0
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015b80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b84:	b299      	uxth	r1, r3
 8015b86:	6a3b      	ldr	r3, [r7, #32]
 8015b88:	68db      	ldr	r3, [r3, #12]
 8015b8a:	685b      	ldr	r3, [r3, #4]
 8015b8c:	8bba      	ldrh	r2, [r7, #28]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f7ff fdfa 	bl	8015788 <tcp_output_alloc_header>
 8015b94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015b96:	69bb      	ldr	r3, [r7, #24]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d102      	bne.n	8015ba2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba0:	e04c      	b.n	8015c3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015ba2:	69bb      	ldr	r3, [r7, #24]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015ba8:	7ffb      	ldrb	r3, [r7, #31]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d011      	beq.n	8015bd2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015bae:	697b      	ldr	r3, [r7, #20]
 8015bb0:	899b      	ldrh	r3, [r3, #12]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	b21b      	sxth	r3, r3
 8015bb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015bba:	b21c      	sxth	r4, r3
 8015bbc:	2011      	movs	r0, #17
 8015bbe:	f7f8 f9a3 	bl	800df08 <lwip_htons>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	b21b      	sxth	r3, r3
 8015bc6:	4323      	orrs	r3, r4
 8015bc8:	b21b      	sxth	r3, r3
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	819a      	strh	r2, [r3, #12]
 8015bd0:	e010      	b.n	8015bf4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015bd2:	69bb      	ldr	r3, [r7, #24]
 8015bd4:	685b      	ldr	r3, [r3, #4]
 8015bd6:	3314      	adds	r3, #20
 8015bd8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015bda:	6a3b      	ldr	r3, [r7, #32]
 8015bdc:	6858      	ldr	r0, [r3, #4]
 8015bde:	6a3b      	ldr	r3, [r7, #32]
 8015be0:	685b      	ldr	r3, [r3, #4]
 8015be2:	891a      	ldrh	r2, [r3, #8]
 8015be4:	6a3b      	ldr	r3, [r7, #32]
 8015be6:	891b      	ldrh	r3, [r3, #8]
 8015be8:	1ad3      	subs	r3, r2, r3
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	2201      	movs	r2, #1
 8015bee:	6939      	ldr	r1, [r7, #16]
 8015bf0:	f7f9 ff2c 	bl	800fa4c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015bf4:	6a3b      	ldr	r3, [r7, #32]
 8015bf6:	68db      	ldr	r3, [r3, #12]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7f8 f999 	bl	800df32 <lwip_htonl>
 8015c00:	4603      	mov	r3, r0
 8015c02:	3301      	adds	r3, #1
 8015c04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	1ad3      	subs	r3, r2, r3
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	da02      	bge.n	8015c18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	68fa      	ldr	r2, [r7, #12]
 8015c16:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	69b9      	ldr	r1, [r7, #24]
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7ff fdef 	bl	8015804 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	3304      	adds	r3, #4
 8015c2c:	69b9      	ldr	r1, [r7, #24]
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f7ff fe26 	bl	8015880 <tcp_output_control_segment>
 8015c34:	4603      	mov	r3, r0
 8015c36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015c38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	372c      	adds	r7, #44	@ 0x2c
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd90      	pop	{r4, r7, pc}
 8015c44:	0801e208 	.word	0x0801e208
 8015c48:	0801ea00 	.word	0x0801ea00
 8015c4c:	0801e25c 	.word	0x0801e25c

08015c50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b082      	sub	sp, #8
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015c58:	f7f9 ffe6 	bl	800fc28 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c88 <tcpip_tcp_timer+0x38>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d103      	bne.n	8015c6c <tcpip_tcp_timer+0x1c>
 8015c64:	4b09      	ldr	r3, [pc, #36]	@ (8015c8c <tcpip_tcp_timer+0x3c>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d005      	beq.n	8015c78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015c6c:	2200      	movs	r2, #0
 8015c6e:	4908      	ldr	r1, [pc, #32]	@ (8015c90 <tcpip_tcp_timer+0x40>)
 8015c70:	20fa      	movs	r0, #250	@ 0xfa
 8015c72:	f000 f8f3 	bl	8015e5c <sys_timeout>
 8015c76:	e003      	b.n	8015c80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015c78:	4b06      	ldr	r3, [pc, #24]	@ (8015c94 <tcpip_tcp_timer+0x44>)
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	601a      	str	r2, [r3, #0]
  }
}
 8015c7e:	bf00      	nop
 8015c80:	bf00      	nop
 8015c82:	3708      	adds	r7, #8
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}
 8015c88:	20011d24 	.word	0x20011d24
 8015c8c:	20011d28 	.word	0x20011d28
 8015c90:	08015c51 	.word	0x08015c51
 8015c94:	20011d70 	.word	0x20011d70

08015c98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8015cc8 <tcp_timer_needed+0x30>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10f      	bne.n	8015cc4 <tcp_timer_needed+0x2c>
 8015ca4:	4b09      	ldr	r3, [pc, #36]	@ (8015ccc <tcp_timer_needed+0x34>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d103      	bne.n	8015cb4 <tcp_timer_needed+0x1c>
 8015cac:	4b08      	ldr	r3, [pc, #32]	@ (8015cd0 <tcp_timer_needed+0x38>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d007      	beq.n	8015cc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015cb4:	4b04      	ldr	r3, [pc, #16]	@ (8015cc8 <tcp_timer_needed+0x30>)
 8015cb6:	2201      	movs	r2, #1
 8015cb8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015cba:	2200      	movs	r2, #0
 8015cbc:	4905      	ldr	r1, [pc, #20]	@ (8015cd4 <tcp_timer_needed+0x3c>)
 8015cbe:	20fa      	movs	r0, #250	@ 0xfa
 8015cc0:	f000 f8cc 	bl	8015e5c <sys_timeout>
  }
}
 8015cc4:	bf00      	nop
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	20011d70 	.word	0x20011d70
 8015ccc:	20011d24 	.word	0x20011d24
 8015cd0:	20011d28 	.word	0x20011d28
 8015cd4:	08015c51 	.word	0x08015c51

08015cd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b086      	sub	sp, #24
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015ce4:	200a      	movs	r0, #10
 8015ce6:	f7f8 fdc5 	bl	800e874 <memp_malloc>
 8015cea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d109      	bne.n	8015d06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015cf2:	693b      	ldr	r3, [r7, #16]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d151      	bne.n	8015d9c <sys_timeout_abs+0xc4>
 8015cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8015da4 <sys_timeout_abs+0xcc>)
 8015cfa:	22be      	movs	r2, #190	@ 0xbe
 8015cfc:	492a      	ldr	r1, [pc, #168]	@ (8015da8 <sys_timeout_abs+0xd0>)
 8015cfe:	482b      	ldr	r0, [pc, #172]	@ (8015dac <sys_timeout_abs+0xd4>)
 8015d00:	f003 fdf8 	bl	80198f4 <iprintf>
    return;
 8015d04:	e04a      	b.n	8015d9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015d06:	693b      	ldr	r3, [r7, #16]
 8015d08:	2200      	movs	r2, #0
 8015d0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	68ba      	ldr	r2, [r7, #8]
 8015d10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	68fa      	ldr	r2, [r7, #12]
 8015d1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015d1e:	4b24      	ldr	r3, [pc, #144]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d103      	bne.n	8015d2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015d26:	4a22      	ldr	r2, [pc, #136]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	6013      	str	r3, [r2, #0]
    return;
 8015d2c:	e037      	b.n	8015d9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	685a      	ldr	r2, [r3, #4]
 8015d32:	4b1f      	ldr	r3, [pc, #124]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	1ad3      	subs	r3, r2, r3
 8015d3a:	0fdb      	lsrs	r3, r3, #31
 8015d3c:	f003 0301 	and.w	r3, r3, #1
 8015d40:	b2db      	uxtb	r3, r3
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d007      	beq.n	8015d56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015d46:	4b1a      	ldr	r3, [pc, #104]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d48:	681a      	ldr	r2, [r3, #0]
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015d4e:	4a18      	ldr	r2, [pc, #96]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d50:	693b      	ldr	r3, [r7, #16]
 8015d52:	6013      	str	r3, [r2, #0]
 8015d54:	e023      	b.n	8015d9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015d56:	4b16      	ldr	r3, [pc, #88]	@ (8015db0 <sys_timeout_abs+0xd8>)
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	617b      	str	r3, [r7, #20]
 8015d5c:	e01a      	b.n	8015d94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00b      	beq.n	8015d7e <sys_timeout_abs+0xa6>
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	685a      	ldr	r2, [r3, #4]
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	1ad3      	subs	r3, r2, r3
 8015d72:	0fdb      	lsrs	r3, r3, #31
 8015d74:	f003 0301 	and.w	r3, r3, #1
 8015d78:	b2db      	uxtb	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d007      	beq.n	8015d8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	681a      	ldr	r2, [r3, #0]
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	693a      	ldr	r2, [r7, #16]
 8015d8a:	601a      	str	r2, [r3, #0]
        break;
 8015d8c:	e007      	b.n	8015d9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	617b      	str	r3, [r7, #20]
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d1e1      	bne.n	8015d5e <sys_timeout_abs+0x86>
 8015d9a:	e000      	b.n	8015d9e <sys_timeout_abs+0xc6>
    return;
 8015d9c:	bf00      	nop
      }
    }
  }
}
 8015d9e:	3718      	adds	r7, #24
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	0801ea24 	.word	0x0801ea24
 8015da8:	0801ea58 	.word	0x0801ea58
 8015dac:	0801ea98 	.word	0x0801ea98
 8015db0:	20011d68 	.word	0x20011d68

08015db4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b086      	sub	sp, #24
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	4798      	blx	r3

  now = sys_now();
 8015dc6:	f7f1 f95b 	bl	8007080 <sys_now>
 8015dca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	681a      	ldr	r2, [r3, #0]
 8015dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8015e10 <lwip_cyclic_timer+0x5c>)
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015dd8:	68fa      	ldr	r2, [r7, #12]
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	1ad3      	subs	r3, r2, r3
 8015dde:	0fdb      	lsrs	r3, r3, #31
 8015de0:	f003 0301 	and.w	r3, r3, #1
 8015de4:	b2db      	uxtb	r3, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d009      	beq.n	8015dfe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	4413      	add	r3, r2
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	4907      	ldr	r1, [pc, #28]	@ (8015e14 <lwip_cyclic_timer+0x60>)
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7ff ff6e 	bl	8015cd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015dfc:	e004      	b.n	8015e08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	4904      	ldr	r1, [pc, #16]	@ (8015e14 <lwip_cyclic_timer+0x60>)
 8015e02:	68f8      	ldr	r0, [r7, #12]
 8015e04:	f7ff ff68 	bl	8015cd8 <sys_timeout_abs>
}
 8015e08:	bf00      	nop
 8015e0a:	3718      	adds	r7, #24
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	20011d6c 	.word	0x20011d6c
 8015e14:	08015db5 	.word	0x08015db5

08015e18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e1e:	2301      	movs	r3, #1
 8015e20:	607b      	str	r3, [r7, #4]
 8015e22:	e00e      	b.n	8015e42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015e24:	4a0b      	ldr	r2, [pc, #44]	@ (8015e54 <sys_timeouts_init+0x3c>)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	00db      	lsls	r3, r3, #3
 8015e30:	4a08      	ldr	r2, [pc, #32]	@ (8015e54 <sys_timeouts_init+0x3c>)
 8015e32:	4413      	add	r3, r2
 8015e34:	461a      	mov	r2, r3
 8015e36:	4908      	ldr	r1, [pc, #32]	@ (8015e58 <sys_timeouts_init+0x40>)
 8015e38:	f000 f810 	bl	8015e5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	3301      	adds	r3, #1
 8015e40:	607b      	str	r3, [r7, #4]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2b02      	cmp	r3, #2
 8015e46:	d9ed      	bls.n	8015e24 <sys_timeouts_init+0xc>
  }
}
 8015e48:	bf00      	nop
 8015e4a:	bf00      	nop
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}
 8015e52:	bf00      	nop
 8015e54:	0801f648 	.word	0x0801f648
 8015e58:	08015db5 	.word	0x08015db5

08015e5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b086      	sub	sp, #24
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	60f8      	str	r0, [r7, #12]
 8015e64:	60b9      	str	r1, [r7, #8]
 8015e66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e6e:	d306      	bcc.n	8015e7e <sys_timeout+0x22>
 8015e70:	4b0a      	ldr	r3, [pc, #40]	@ (8015e9c <sys_timeout+0x40>)
 8015e72:	f240 1229 	movw	r2, #297	@ 0x129
 8015e76:	490a      	ldr	r1, [pc, #40]	@ (8015ea0 <sys_timeout+0x44>)
 8015e78:	480a      	ldr	r0, [pc, #40]	@ (8015ea4 <sys_timeout+0x48>)
 8015e7a:	f003 fd3b 	bl	80198f4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015e7e:	f7f1 f8ff 	bl	8007080 <sys_now>
 8015e82:	4602      	mov	r2, r0
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	4413      	add	r3, r2
 8015e88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	68b9      	ldr	r1, [r7, #8]
 8015e8e:	6978      	ldr	r0, [r7, #20]
 8015e90:	f7ff ff22 	bl	8015cd8 <sys_timeout_abs>
#endif
}
 8015e94:	bf00      	nop
 8015e96:	3718      	adds	r7, #24
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}
 8015e9c:	0801ea24 	.word	0x0801ea24
 8015ea0:	0801eac0 	.word	0x0801eac0
 8015ea4:	0801ea98 	.word	0x0801ea98

08015ea8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b084      	sub	sp, #16
 8015eac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015eae:	f7f1 f8e7 	bl	8007080 <sys_now>
 8015eb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015eb4:	4b17      	ldr	r3, [pc, #92]	@ (8015f14 <sys_check_timeouts+0x6c>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d022      	beq.n	8015f06 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	685b      	ldr	r3, [r3, #4]
 8015ec4:	68fa      	ldr	r2, [r7, #12]
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	0fdb      	lsrs	r3, r3, #31
 8015eca:	f003 0301 	and.w	r3, r3, #1
 8015ece:	b2db      	uxtb	r3, r3
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d11a      	bne.n	8015f0a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8015f14 <sys_check_timeouts+0x6c>)
 8015eda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015edc:	68bb      	ldr	r3, [r7, #8]
 8015ede:	689b      	ldr	r3, [r3, #8]
 8015ee0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	68db      	ldr	r3, [r3, #12]
 8015ee6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015ee8:	68bb      	ldr	r3, [r7, #8]
 8015eea:	685b      	ldr	r3, [r3, #4]
 8015eec:	4a0a      	ldr	r2, [pc, #40]	@ (8015f18 <sys_check_timeouts+0x70>)
 8015eee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015ef0:	68b9      	ldr	r1, [r7, #8]
 8015ef2:	200a      	movs	r0, #10
 8015ef4:	f7f8 fd10 	bl	800e918 <memp_free>
    if (handler != NULL) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d0da      	beq.n	8015eb4 <sys_check_timeouts+0xc>
      handler(arg);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6838      	ldr	r0, [r7, #0]
 8015f02:	4798      	blx	r3
  do {
 8015f04:	e7d6      	b.n	8015eb4 <sys_check_timeouts+0xc>
      return;
 8015f06:	bf00      	nop
 8015f08:	e000      	b.n	8015f0c <sys_check_timeouts+0x64>
      return;
 8015f0a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015f0c:	3710      	adds	r7, #16
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	20011d68 	.word	0x20011d68
 8015f18:	20011d6c 	.word	0x20011d6c

08015f1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015f22:	4b16      	ldr	r3, [pc, #88]	@ (8015f7c <sys_timeouts_sleeptime+0x60>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d102      	bne.n	8015f30 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f2e:	e020      	b.n	8015f72 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015f30:	f7f1 f8a6 	bl	8007080 <sys_now>
 8015f34:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015f36:	4b11      	ldr	r3, [pc, #68]	@ (8015f7c <sys_timeouts_sleeptime+0x60>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	685a      	ldr	r2, [r3, #4]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	0fdb      	lsrs	r3, r3, #31
 8015f42:	f003 0301 	and.w	r3, r3, #1
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d001      	beq.n	8015f50 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e010      	b.n	8015f72 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015f50:	4b0a      	ldr	r3, [pc, #40]	@ (8015f7c <sys_timeouts_sleeptime+0x60>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	685a      	ldr	r2, [r3, #4]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	1ad3      	subs	r3, r2, r3
 8015f5a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	da06      	bge.n	8015f70 <sys_timeouts_sleeptime+0x54>
 8015f62:	4b07      	ldr	r3, [pc, #28]	@ (8015f80 <sys_timeouts_sleeptime+0x64>)
 8015f64:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015f68:	4906      	ldr	r1, [pc, #24]	@ (8015f84 <sys_timeouts_sleeptime+0x68>)
 8015f6a:	4807      	ldr	r0, [pc, #28]	@ (8015f88 <sys_timeouts_sleeptime+0x6c>)
 8015f6c:	f003 fcc2 	bl	80198f4 <iprintf>
    return ret;
 8015f70:	683b      	ldr	r3, [r7, #0]
  }
}
 8015f72:	4618      	mov	r0, r3
 8015f74:	3708      	adds	r7, #8
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	20011d68 	.word	0x20011d68
 8015f80:	0801ea24 	.word	0x0801ea24
 8015f84:	0801eaf8 	.word	0x0801eaf8
 8015f88:	0801ea98 	.word	0x0801ea98

08015f8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015f90:	f002 ff78 	bl	8018e84 <rand>
 8015f94:	4603      	mov	r3, r0
 8015f96:	b29b      	uxth	r3, r3
 8015f98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015f9c:	b29b      	uxth	r3, r3
 8015f9e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015fa2:	b29a      	uxth	r2, r3
 8015fa4:	4b01      	ldr	r3, [pc, #4]	@ (8015fac <udp_init+0x20>)
 8015fa6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015fa8:	bf00      	nop
 8015faa:	bd80      	pop	{r7, pc}
 8015fac:	20000018 	.word	0x20000018

08015fb0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015fba:	4b17      	ldr	r3, [pc, #92]	@ (8016018 <udp_new_port+0x68>)
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	1c5a      	adds	r2, r3, #1
 8015fc0:	b291      	uxth	r1, r2
 8015fc2:	4a15      	ldr	r2, [pc, #84]	@ (8016018 <udp_new_port+0x68>)
 8015fc4:	8011      	strh	r1, [r2, #0]
 8015fc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	d103      	bne.n	8015fd6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015fce:	4b12      	ldr	r3, [pc, #72]	@ (8016018 <udp_new_port+0x68>)
 8015fd0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015fd4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fd6:	4b11      	ldr	r3, [pc, #68]	@ (801601c <udp_new_port+0x6c>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	603b      	str	r3, [r7, #0]
 8015fdc:	e011      	b.n	8016002 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	8a5a      	ldrh	r2, [r3, #18]
 8015fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8016018 <udp_new_port+0x68>)
 8015fe4:	881b      	ldrh	r3, [r3, #0]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d108      	bne.n	8015ffc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015fea:	88fb      	ldrh	r3, [r7, #6]
 8015fec:	3301      	adds	r3, #1
 8015fee:	80fb      	strh	r3, [r7, #6]
 8015ff0:	88fb      	ldrh	r3, [r7, #6]
 8015ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015ff6:	d3e0      	bcc.n	8015fba <udp_new_port+0xa>
        return 0;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	e007      	b.n	801600c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ffc:	683b      	ldr	r3, [r7, #0]
 8015ffe:	68db      	ldr	r3, [r3, #12]
 8016000:	603b      	str	r3, [r7, #0]
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d1ea      	bne.n	8015fde <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016008:	4b03      	ldr	r3, [pc, #12]	@ (8016018 <udp_new_port+0x68>)
 801600a:	881b      	ldrh	r3, [r3, #0]
}
 801600c:	4618      	mov	r0, r3
 801600e:	370c      	adds	r7, #12
 8016010:	46bd      	mov	sp, r7
 8016012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016016:	4770      	bx	lr
 8016018:	20000018 	.word	0x20000018
 801601c:	20011d74 	.word	0x20011d74

08016020 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	4613      	mov	r3, r2
 801602c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	2b00      	cmp	r3, #0
 8016032:	d105      	bne.n	8016040 <udp_input_local_match+0x20>
 8016034:	4b27      	ldr	r3, [pc, #156]	@ (80160d4 <udp_input_local_match+0xb4>)
 8016036:	2287      	movs	r2, #135	@ 0x87
 8016038:	4927      	ldr	r1, [pc, #156]	@ (80160d8 <udp_input_local_match+0xb8>)
 801603a:	4828      	ldr	r0, [pc, #160]	@ (80160dc <udp_input_local_match+0xbc>)
 801603c:	f003 fc5a 	bl	80198f4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d105      	bne.n	8016052 <udp_input_local_match+0x32>
 8016046:	4b23      	ldr	r3, [pc, #140]	@ (80160d4 <udp_input_local_match+0xb4>)
 8016048:	2288      	movs	r2, #136	@ 0x88
 801604a:	4925      	ldr	r1, [pc, #148]	@ (80160e0 <udp_input_local_match+0xc0>)
 801604c:	4823      	ldr	r0, [pc, #140]	@ (80160dc <udp_input_local_match+0xbc>)
 801604e:	f003 fc51 	bl	80198f4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	7a1b      	ldrb	r3, [r3, #8]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d00b      	beq.n	8016072 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	7a1a      	ldrb	r2, [r3, #8]
 801605e:	4b21      	ldr	r3, [pc, #132]	@ (80160e4 <udp_input_local_match+0xc4>)
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016066:	3301      	adds	r3, #1
 8016068:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801606a:	429a      	cmp	r2, r3
 801606c:	d001      	beq.n	8016072 <udp_input_local_match+0x52>
    return 0;
 801606e:	2300      	movs	r3, #0
 8016070:	e02b      	b.n	80160ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016072:	79fb      	ldrb	r3, [r7, #7]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d018      	beq.n	80160aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d013      	beq.n	80160a6 <udp_input_local_match+0x86>
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d00f      	beq.n	80160a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016086:	4b17      	ldr	r3, [pc, #92]	@ (80160e4 <udp_input_local_match+0xc4>)
 8016088:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801608e:	d00a      	beq.n	80160a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	681a      	ldr	r2, [r3, #0]
 8016094:	4b13      	ldr	r3, [pc, #76]	@ (80160e4 <udp_input_local_match+0xc4>)
 8016096:	695b      	ldr	r3, [r3, #20]
 8016098:	405a      	eors	r2, r3
 801609a:	68bb      	ldr	r3, [r7, #8]
 801609c:	3308      	adds	r3, #8
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d110      	bne.n	80160c8 <udp_input_local_match+0xa8>
          return 1;
 80160a6:	2301      	movs	r3, #1
 80160a8:	e00f      	b.n	80160ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d009      	beq.n	80160c4 <udp_input_local_match+0xa4>
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d005      	beq.n	80160c4 <udp_input_local_match+0xa4>
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	681a      	ldr	r2, [r3, #0]
 80160bc:	4b09      	ldr	r3, [pc, #36]	@ (80160e4 <udp_input_local_match+0xc4>)
 80160be:	695b      	ldr	r3, [r3, #20]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d101      	bne.n	80160c8 <udp_input_local_match+0xa8>
        return 1;
 80160c4:	2301      	movs	r3, #1
 80160c6:	e000      	b.n	80160ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80160c8:	2300      	movs	r3, #0
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3710      	adds	r7, #16
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	bf00      	nop
 80160d4:	0801eb0c 	.word	0x0801eb0c
 80160d8:	0801eb3c 	.word	0x0801eb3c
 80160dc:	0801eb60 	.word	0x0801eb60
 80160e0:	0801eb88 	.word	0x0801eb88
 80160e4:	2000c404 	.word	0x2000c404

080160e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80160e8:	b590      	push	{r4, r7, lr}
 80160ea:	b08d      	sub	sp, #52	@ 0x34
 80160ec:	af02      	add	r7, sp, #8
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80160f2:	2300      	movs	r3, #0
 80160f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d105      	bne.n	8016108 <udp_input+0x20>
 80160fc:	4b7c      	ldr	r3, [pc, #496]	@ (80162f0 <udp_input+0x208>)
 80160fe:	22cf      	movs	r2, #207	@ 0xcf
 8016100:	497c      	ldr	r1, [pc, #496]	@ (80162f4 <udp_input+0x20c>)
 8016102:	487d      	ldr	r0, [pc, #500]	@ (80162f8 <udp_input+0x210>)
 8016104:	f003 fbf6 	bl	80198f4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d105      	bne.n	801611a <udp_input+0x32>
 801610e:	4b78      	ldr	r3, [pc, #480]	@ (80162f0 <udp_input+0x208>)
 8016110:	22d0      	movs	r2, #208	@ 0xd0
 8016112:	497a      	ldr	r1, [pc, #488]	@ (80162fc <udp_input+0x214>)
 8016114:	4878      	ldr	r0, [pc, #480]	@ (80162f8 <udp_input+0x210>)
 8016116:	f003 fbed 	bl	80198f4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	895b      	ldrh	r3, [r3, #10]
 801611e:	2b07      	cmp	r3, #7
 8016120:	d803      	bhi.n	801612a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f7f9 fa9c 	bl	800f660 <pbuf_free>
    goto end;
 8016128:	e0de      	b.n	80162e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016130:	4b73      	ldr	r3, [pc, #460]	@ (8016300 <udp_input+0x218>)
 8016132:	695b      	ldr	r3, [r3, #20]
 8016134:	4a72      	ldr	r2, [pc, #456]	@ (8016300 <udp_input+0x218>)
 8016136:	6812      	ldr	r2, [r2, #0]
 8016138:	4611      	mov	r1, r2
 801613a:	4618      	mov	r0, r3
 801613c:	f001 fd96 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8016140:	4603      	mov	r3, r0
 8016142:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	881b      	ldrh	r3, [r3, #0]
 8016148:	b29b      	uxth	r3, r3
 801614a:	4618      	mov	r0, r3
 801614c:	f7f7 fedc 	bl	800df08 <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	885b      	ldrh	r3, [r3, #2]
 8016158:	b29b      	uxth	r3, r3
 801615a:	4618      	mov	r0, r3
 801615c:	f7f7 fed4 	bl	800df08 <lwip_htons>
 8016160:	4603      	mov	r3, r0
 8016162:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016164:	2300      	movs	r3, #0
 8016166:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016168:	2300      	movs	r3, #0
 801616a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801616c:	2300      	movs	r3, #0
 801616e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016170:	4b64      	ldr	r3, [pc, #400]	@ (8016304 <udp_input+0x21c>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	627b      	str	r3, [r7, #36]	@ 0x24
 8016176:	e054      	b.n	8016222 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801617a:	8a5b      	ldrh	r3, [r3, #18]
 801617c:	89fa      	ldrh	r2, [r7, #14]
 801617e:	429a      	cmp	r2, r3
 8016180:	d14a      	bne.n	8016218 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016182:	7cfb      	ldrb	r3, [r7, #19]
 8016184:	461a      	mov	r2, r3
 8016186:	6839      	ldr	r1, [r7, #0]
 8016188:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801618a:	f7ff ff49 	bl	8016020 <udp_input_local_match>
 801618e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016190:	2b00      	cmp	r3, #0
 8016192:	d041      	beq.n	8016218 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016196:	7c1b      	ldrb	r3, [r3, #16]
 8016198:	f003 0304 	and.w	r3, r3, #4
 801619c:	2b00      	cmp	r3, #0
 801619e:	d11d      	bne.n	80161dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80161a0:	69fb      	ldr	r3, [r7, #28]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d102      	bne.n	80161ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80161a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a8:	61fb      	str	r3, [r7, #28]
 80161aa:	e017      	b.n	80161dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80161ac:	7cfb      	ldrb	r3, [r7, #19]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d014      	beq.n	80161dc <udp_input+0xf4>
 80161b2:	4b53      	ldr	r3, [pc, #332]	@ (8016300 <udp_input+0x218>)
 80161b4:	695b      	ldr	r3, [r3, #20]
 80161b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ba:	d10f      	bne.n	80161dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	3304      	adds	r3, #4
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d008      	beq.n	80161dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80161ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	683b      	ldr	r3, [r7, #0]
 80161d0:	3304      	adds	r3, #4
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	429a      	cmp	r2, r3
 80161d6:	d101      	bne.n	80161dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80161d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80161dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161de:	8a9b      	ldrh	r3, [r3, #20]
 80161e0:	8a3a      	ldrh	r2, [r7, #16]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d118      	bne.n	8016218 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80161e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d005      	beq.n	80161fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80161ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161f0:	685a      	ldr	r2, [r3, #4]
 80161f2:	4b43      	ldr	r3, [pc, #268]	@ (8016300 <udp_input+0x218>)
 80161f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d10e      	bne.n	8016218 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80161fa:	6a3b      	ldr	r3, [r7, #32]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d014      	beq.n	801622a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016202:	68da      	ldr	r2, [r3, #12]
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016208:	4b3e      	ldr	r3, [pc, #248]	@ (8016304 <udp_input+0x21c>)
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016210:	4a3c      	ldr	r2, [pc, #240]	@ (8016304 <udp_input+0x21c>)
 8016212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016214:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016216:	e008      	b.n	801622a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	627b      	str	r3, [r7, #36]	@ 0x24
 8016222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016224:	2b00      	cmp	r3, #0
 8016226:	d1a7      	bne.n	8016178 <udp_input+0x90>
 8016228:	e000      	b.n	801622c <udp_input+0x144>
        break;
 801622a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801622e:	2b00      	cmp	r3, #0
 8016230:	d101      	bne.n	8016236 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016232:	69fb      	ldr	r3, [r7, #28]
 8016234:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <udp_input+0x15a>
    for_us = 1;
 801623c:	2301      	movs	r3, #1
 801623e:	76fb      	strb	r3, [r7, #27]
 8016240:	e00a      	b.n	8016258 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	3304      	adds	r3, #4
 8016246:	681a      	ldr	r2, [r3, #0]
 8016248:	4b2d      	ldr	r3, [pc, #180]	@ (8016300 <udp_input+0x218>)
 801624a:	695b      	ldr	r3, [r3, #20]
 801624c:	429a      	cmp	r2, r3
 801624e:	bf0c      	ite	eq
 8016250:	2301      	moveq	r3, #1
 8016252:	2300      	movne	r3, #0
 8016254:	b2db      	uxtb	r3, r3
 8016256:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016258:	7efb      	ldrb	r3, [r7, #27]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d041      	beq.n	80162e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801625e:	2108      	movs	r1, #8
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7f9 f977 	bl	800f554 <pbuf_remove_header>
 8016266:	4603      	mov	r3, r0
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00a      	beq.n	8016282 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801626c:	4b20      	ldr	r3, [pc, #128]	@ (80162f0 <udp_input+0x208>)
 801626e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016272:	4925      	ldr	r1, [pc, #148]	@ (8016308 <udp_input+0x220>)
 8016274:	4820      	ldr	r0, [pc, #128]	@ (80162f8 <udp_input+0x210>)
 8016276:	f003 fb3d 	bl	80198f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801627a:	6878      	ldr	r0, [r7, #4]
 801627c:	f7f9 f9f0 	bl	800f660 <pbuf_free>
      goto end;
 8016280:	e032      	b.n	80162e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016284:	2b00      	cmp	r3, #0
 8016286:	d012      	beq.n	80162ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801628a:	699b      	ldr	r3, [r3, #24]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d00a      	beq.n	80162a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016292:	699c      	ldr	r4, [r3, #24]
 8016294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016296:	69d8      	ldr	r0, [r3, #28]
 8016298:	8a3b      	ldrh	r3, [r7, #16]
 801629a:	9300      	str	r3, [sp, #0]
 801629c:	4b1b      	ldr	r3, [pc, #108]	@ (801630c <udp_input+0x224>)
 801629e:	687a      	ldr	r2, [r7, #4]
 80162a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80162a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80162a4:	e021      	b.n	80162ea <udp_input+0x202>
        pbuf_free(p);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7f9 f9da 	bl	800f660 <pbuf_free>
        goto end;
 80162ac:	e01c      	b.n	80162e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80162ae:	7cfb      	ldrb	r3, [r7, #19]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d112      	bne.n	80162da <udp_input+0x1f2>
 80162b4:	4b12      	ldr	r3, [pc, #72]	@ (8016300 <udp_input+0x218>)
 80162b6:	695b      	ldr	r3, [r3, #20]
 80162b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80162bc:	2be0      	cmp	r3, #224	@ 0xe0
 80162be:	d00c      	beq.n	80162da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80162c0:	4b0f      	ldr	r3, [pc, #60]	@ (8016300 <udp_input+0x218>)
 80162c2:	899b      	ldrh	r3, [r3, #12]
 80162c4:	3308      	adds	r3, #8
 80162c6:	b29b      	uxth	r3, r3
 80162c8:	b21b      	sxth	r3, r3
 80162ca:	4619      	mov	r1, r3
 80162cc:	6878      	ldr	r0, [r7, #4]
 80162ce:	f7f9 f9b4 	bl	800f63a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80162d2:	2103      	movs	r1, #3
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f001 f9a9 	bl	801762c <icmp_dest_unreach>
      pbuf_free(p);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7f9 f9c0 	bl	800f660 <pbuf_free>
  return;
 80162e0:	e003      	b.n	80162ea <udp_input+0x202>
    pbuf_free(p);
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f7f9 f9bc 	bl	800f660 <pbuf_free>
  return;
 80162e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80162ea:	372c      	adds	r7, #44	@ 0x2c
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd90      	pop	{r4, r7, pc}
 80162f0:	0801eb0c 	.word	0x0801eb0c
 80162f4:	0801ebb0 	.word	0x0801ebb0
 80162f8:	0801eb60 	.word	0x0801eb60
 80162fc:	0801ebc8 	.word	0x0801ebc8
 8016300:	2000c404 	.word	0x2000c404
 8016304:	20011d74 	.word	0x20011d74
 8016308:	0801ebe4 	.word	0x0801ebe4
 801630c:	2000c414 	.word	0x2000c414

08016310 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b086      	sub	sp, #24
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	4613      	mov	r3, r2
 801631c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d101      	bne.n	8016328 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016324:	4b39      	ldr	r3, [pc, #228]	@ (801640c <udp_bind+0xfc>)
 8016326:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d109      	bne.n	8016342 <udp_bind+0x32>
 801632e:	4b38      	ldr	r3, [pc, #224]	@ (8016410 <udp_bind+0x100>)
 8016330:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016334:	4937      	ldr	r1, [pc, #220]	@ (8016414 <udp_bind+0x104>)
 8016336:	4838      	ldr	r0, [pc, #224]	@ (8016418 <udp_bind+0x108>)
 8016338:	f003 fadc 	bl	80198f4 <iprintf>
 801633c:	f06f 030f 	mvn.w	r3, #15
 8016340:	e060      	b.n	8016404 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016342:	2300      	movs	r3, #0
 8016344:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016346:	4b35      	ldr	r3, [pc, #212]	@ (801641c <udp_bind+0x10c>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	617b      	str	r3, [r7, #20]
 801634c:	e009      	b.n	8016362 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	429a      	cmp	r2, r3
 8016354:	d102      	bne.n	801635c <udp_bind+0x4c>
      rebind = 1;
 8016356:	2301      	movs	r3, #1
 8016358:	74fb      	strb	r3, [r7, #19]
      break;
 801635a:	e005      	b.n	8016368 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	617b      	str	r3, [r7, #20]
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d1f2      	bne.n	801634e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016368:	88fb      	ldrh	r3, [r7, #6]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d109      	bne.n	8016382 <udp_bind+0x72>
    port = udp_new_port();
 801636e:	f7ff fe1f 	bl	8015fb0 <udp_new_port>
 8016372:	4603      	mov	r3, r0
 8016374:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016376:	88fb      	ldrh	r3, [r7, #6]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d12c      	bne.n	80163d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801637c:	f06f 0307 	mvn.w	r3, #7
 8016380:	e040      	b.n	8016404 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016382:	4b26      	ldr	r3, [pc, #152]	@ (801641c <udp_bind+0x10c>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	617b      	str	r3, [r7, #20]
 8016388:	e022      	b.n	80163d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801638a:	68fa      	ldr	r2, [r7, #12]
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	429a      	cmp	r2, r3
 8016390:	d01b      	beq.n	80163ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	8a5b      	ldrh	r3, [r3, #18]
 8016396:	88fa      	ldrh	r2, [r7, #6]
 8016398:	429a      	cmp	r2, r3
 801639a:	d116      	bne.n	80163ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d00d      	beq.n	80163c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00a      	beq.n	80163c4 <udp_bind+0xb4>
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d006      	beq.n	80163c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d003      	beq.n	80163c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d102      	bne.n	80163ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163c4:	f06f 0307 	mvn.w	r3, #7
 80163c8:	e01c      	b.n	8016404 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	68db      	ldr	r3, [r3, #12]
 80163ce:	617b      	str	r3, [r7, #20]
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d1d9      	bne.n	801638a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <udp_bind+0xd2>
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	e000      	b.n	80163e4 <udp_bind+0xd4>
 80163e2:	2300      	movs	r3, #0
 80163e4:	68fa      	ldr	r2, [r7, #12]
 80163e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	88fa      	ldrh	r2, [r7, #6]
 80163ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80163ee:	7cfb      	ldrb	r3, [r7, #19]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d106      	bne.n	8016402 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80163f4:	4b09      	ldr	r3, [pc, #36]	@ (801641c <udp_bind+0x10c>)
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163fc:	4a07      	ldr	r2, [pc, #28]	@ (801641c <udp_bind+0x10c>)
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	0801f660 	.word	0x0801f660
 8016410:	0801eb0c 	.word	0x0801eb0c
 8016414:	0801edd4 	.word	0x0801edd4
 8016418:	0801eb60 	.word	0x0801eb60
 801641c:	20011d74 	.word	0x20011d74

08016420 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d107      	bne.n	8016442 <udp_recv+0x22>
 8016432:	4b08      	ldr	r3, [pc, #32]	@ (8016454 <udp_recv+0x34>)
 8016434:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016438:	4907      	ldr	r1, [pc, #28]	@ (8016458 <udp_recv+0x38>)
 801643a:	4808      	ldr	r0, [pc, #32]	@ (801645c <udp_recv+0x3c>)
 801643c:	f003 fa5a 	bl	80198f4 <iprintf>
 8016440:	e005      	b.n	801644e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	68ba      	ldr	r2, [r7, #8]
 8016446:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	687a      	ldr	r2, [r7, #4]
 801644c:	61da      	str	r2, [r3, #28]
}
 801644e:	3710      	adds	r7, #16
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}
 8016454:	0801eb0c 	.word	0x0801eb0c
 8016458:	0801ee40 	.word	0x0801ee40
 801645c:	0801eb60 	.word	0x0801eb60

08016460 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d107      	bne.n	801647e <udp_remove+0x1e>
 801646e:	4b19      	ldr	r3, [pc, #100]	@ (80164d4 <udp_remove+0x74>)
 8016470:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8016474:	4918      	ldr	r1, [pc, #96]	@ (80164d8 <udp_remove+0x78>)
 8016476:	4819      	ldr	r0, [pc, #100]	@ (80164dc <udp_remove+0x7c>)
 8016478:	f003 fa3c 	bl	80198f4 <iprintf>
 801647c:	e026      	b.n	80164cc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801647e:	4b18      	ldr	r3, [pc, #96]	@ (80164e0 <udp_remove+0x80>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	429a      	cmp	r2, r3
 8016486:	d105      	bne.n	8016494 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016488:	4b15      	ldr	r3, [pc, #84]	@ (80164e0 <udp_remove+0x80>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	68db      	ldr	r3, [r3, #12]
 801648e:	4a14      	ldr	r2, [pc, #80]	@ (80164e0 <udp_remove+0x80>)
 8016490:	6013      	str	r3, [r2, #0]
 8016492:	e017      	b.n	80164c4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016494:	4b12      	ldr	r3, [pc, #72]	@ (80164e0 <udp_remove+0x80>)
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
 801649a:	e010      	b.n	80164be <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	68db      	ldr	r3, [r3, #12]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d009      	beq.n	80164b8 <udp_remove+0x58>
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d104      	bne.n	80164b8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	68da      	ldr	r2, [r3, #12]
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	60da      	str	r2, [r3, #12]
        break;
 80164b6:	e005      	b.n	80164c4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	60fb      	str	r3, [r7, #12]
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d1eb      	bne.n	801649c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80164c4:	6879      	ldr	r1, [r7, #4]
 80164c6:	2000      	movs	r0, #0
 80164c8:	f7f8 fa26 	bl	800e918 <memp_free>
}
 80164cc:	3710      	adds	r7, #16
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	0801eb0c 	.word	0x0801eb0c
 80164d8:	0801ee58 	.word	0x0801ee58
 80164dc:	0801eb60 	.word	0x0801eb60
 80164e0:	20011d74 	.word	0x20011d74

080164e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b082      	sub	sp, #8
 80164e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80164ea:	2000      	movs	r0, #0
 80164ec:	f7f8 f9c2 	bl	800e874 <memp_malloc>
 80164f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d007      	beq.n	8016508 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80164f8:	2220      	movs	r2, #32
 80164fa:	2100      	movs	r1, #0
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f003 fbbf 	bl	8019c80 <memset>
    pcb->ttl = UDP_TTL;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	22ff      	movs	r2, #255	@ 0xff
 8016506:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016508:	687b      	ldr	r3, [r7, #4]
}
 801650a:	4618      	mov	r0, r3
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}

08016512 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016512:	b580      	push	{r7, lr}
 8016514:	b084      	sub	sp, #16
 8016516:	af00      	add	r7, sp, #0
 8016518:	4603      	mov	r3, r0
 801651a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801651c:	f7ff ffe2 	bl	80164e4 <udp_new>
 8016520:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016522:	68fb      	ldr	r3, [r7, #12]
}
 8016524:	4618      	mov	r0, r3
 8016526:	3710      	adds	r7, #16
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}

0801652c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801652c:	b480      	push	{r7}
 801652e:	b085      	sub	sp, #20
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d01e      	beq.n	801657a <udp_netif_ip_addr_changed+0x4e>
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d01a      	beq.n	801657a <udp_netif_ip_addr_changed+0x4e>
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d017      	beq.n	801657a <udp_netif_ip_addr_changed+0x4e>
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d013      	beq.n	801657a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016552:	4b0d      	ldr	r3, [pc, #52]	@ (8016588 <udp_netif_ip_addr_changed+0x5c>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	60fb      	str	r3, [r7, #12]
 8016558:	e00c      	b.n	8016574 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	429a      	cmp	r2, r3
 8016564:	d103      	bne.n	801656e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	681a      	ldr	r2, [r3, #0]
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	68db      	ldr	r3, [r3, #12]
 8016572:	60fb      	str	r3, [r7, #12]
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d1ef      	bne.n	801655a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801657a:	bf00      	nop
 801657c:	3714      	adds	r7, #20
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	20011d74 	.word	0x20011d74

0801658c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b082      	sub	sp, #8
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016594:	4915      	ldr	r1, [pc, #84]	@ (80165ec <etharp_free_entry+0x60>)
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	440b      	add	r3, r1
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d013      	beq.n	80165d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80165a8:	4910      	ldr	r1, [pc, #64]	@ (80165ec <etharp_free_entry+0x60>)
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	4613      	mov	r3, r2
 80165ae:	005b      	lsls	r3, r3, #1
 80165b0:	4413      	add	r3, r2
 80165b2:	00db      	lsls	r3, r3, #3
 80165b4:	440b      	add	r3, r1
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4618      	mov	r0, r3
 80165ba:	f7f9 f851 	bl	800f660 <pbuf_free>
    arp_table[i].q = NULL;
 80165be:	490b      	ldr	r1, [pc, #44]	@ (80165ec <etharp_free_entry+0x60>)
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	4613      	mov	r3, r2
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	4413      	add	r3, r2
 80165c8:	00db      	lsls	r3, r3, #3
 80165ca:	440b      	add	r3, r1
 80165cc:	2200      	movs	r2, #0
 80165ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80165d0:	4906      	ldr	r1, [pc, #24]	@ (80165ec <etharp_free_entry+0x60>)
 80165d2:	687a      	ldr	r2, [r7, #4]
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3314      	adds	r3, #20
 80165e0:	2200      	movs	r2, #0
 80165e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	20011d78 	.word	0x20011d78

080165f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165f6:	2300      	movs	r3, #0
 80165f8:	607b      	str	r3, [r7, #4]
 80165fa:	e096      	b.n	801672a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80165fc:	494f      	ldr	r1, [pc, #316]	@ (801673c <etharp_tmr+0x14c>)
 80165fe:	687a      	ldr	r2, [r7, #4]
 8016600:	4613      	mov	r3, r2
 8016602:	005b      	lsls	r3, r3, #1
 8016604:	4413      	add	r3, r2
 8016606:	00db      	lsls	r3, r3, #3
 8016608:	440b      	add	r3, r1
 801660a:	3314      	adds	r3, #20
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016610:	78fb      	ldrb	r3, [r7, #3]
 8016612:	2b00      	cmp	r3, #0
 8016614:	f000 8086 	beq.w	8016724 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016618:	4948      	ldr	r1, [pc, #288]	@ (801673c <etharp_tmr+0x14c>)
 801661a:	687a      	ldr	r2, [r7, #4]
 801661c:	4613      	mov	r3, r2
 801661e:	005b      	lsls	r3, r3, #1
 8016620:	4413      	add	r3, r2
 8016622:	00db      	lsls	r3, r3, #3
 8016624:	440b      	add	r3, r1
 8016626:	3312      	adds	r3, #18
 8016628:	881b      	ldrh	r3, [r3, #0]
 801662a:	3301      	adds	r3, #1
 801662c:	b298      	uxth	r0, r3
 801662e:	4943      	ldr	r1, [pc, #268]	@ (801673c <etharp_tmr+0x14c>)
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	4613      	mov	r3, r2
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	4413      	add	r3, r2
 8016638:	00db      	lsls	r3, r3, #3
 801663a:	440b      	add	r3, r1
 801663c:	3312      	adds	r3, #18
 801663e:	4602      	mov	r2, r0
 8016640:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016642:	493e      	ldr	r1, [pc, #248]	@ (801673c <etharp_tmr+0x14c>)
 8016644:	687a      	ldr	r2, [r7, #4]
 8016646:	4613      	mov	r3, r2
 8016648:	005b      	lsls	r3, r3, #1
 801664a:	4413      	add	r3, r2
 801664c:	00db      	lsls	r3, r3, #3
 801664e:	440b      	add	r3, r1
 8016650:	3312      	adds	r3, #18
 8016652:	881b      	ldrh	r3, [r3, #0]
 8016654:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016658:	d215      	bcs.n	8016686 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801665a:	4938      	ldr	r1, [pc, #224]	@ (801673c <etharp_tmr+0x14c>)
 801665c:	687a      	ldr	r2, [r7, #4]
 801665e:	4613      	mov	r3, r2
 8016660:	005b      	lsls	r3, r3, #1
 8016662:	4413      	add	r3, r2
 8016664:	00db      	lsls	r3, r3, #3
 8016666:	440b      	add	r3, r1
 8016668:	3314      	adds	r3, #20
 801666a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801666c:	2b01      	cmp	r3, #1
 801666e:	d10e      	bne.n	801668e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016670:	4932      	ldr	r1, [pc, #200]	@ (801673c <etharp_tmr+0x14c>)
 8016672:	687a      	ldr	r2, [r7, #4]
 8016674:	4613      	mov	r3, r2
 8016676:	005b      	lsls	r3, r3, #1
 8016678:	4413      	add	r3, r2
 801667a:	00db      	lsls	r3, r3, #3
 801667c:	440b      	add	r3, r1
 801667e:	3312      	adds	r3, #18
 8016680:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016682:	2b04      	cmp	r3, #4
 8016684:	d903      	bls.n	801668e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7ff ff80 	bl	801658c <etharp_free_entry>
 801668c:	e04a      	b.n	8016724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801668e:	492b      	ldr	r1, [pc, #172]	@ (801673c <etharp_tmr+0x14c>)
 8016690:	687a      	ldr	r2, [r7, #4]
 8016692:	4613      	mov	r3, r2
 8016694:	005b      	lsls	r3, r3, #1
 8016696:	4413      	add	r3, r2
 8016698:	00db      	lsls	r3, r3, #3
 801669a:	440b      	add	r3, r1
 801669c:	3314      	adds	r3, #20
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	2b03      	cmp	r3, #3
 80166a2:	d10a      	bne.n	80166ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80166a4:	4925      	ldr	r1, [pc, #148]	@ (801673c <etharp_tmr+0x14c>)
 80166a6:	687a      	ldr	r2, [r7, #4]
 80166a8:	4613      	mov	r3, r2
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	4413      	add	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	440b      	add	r3, r1
 80166b2:	3314      	adds	r3, #20
 80166b4:	2204      	movs	r2, #4
 80166b6:	701a      	strb	r2, [r3, #0]
 80166b8:	e034      	b.n	8016724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80166ba:	4920      	ldr	r1, [pc, #128]	@ (801673c <etharp_tmr+0x14c>)
 80166bc:	687a      	ldr	r2, [r7, #4]
 80166be:	4613      	mov	r3, r2
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	4413      	add	r3, r2
 80166c4:	00db      	lsls	r3, r3, #3
 80166c6:	440b      	add	r3, r1
 80166c8:	3314      	adds	r3, #20
 80166ca:	781b      	ldrb	r3, [r3, #0]
 80166cc:	2b04      	cmp	r3, #4
 80166ce:	d10a      	bne.n	80166e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80166d0:	491a      	ldr	r1, [pc, #104]	@ (801673c <etharp_tmr+0x14c>)
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	4613      	mov	r3, r2
 80166d6:	005b      	lsls	r3, r3, #1
 80166d8:	4413      	add	r3, r2
 80166da:	00db      	lsls	r3, r3, #3
 80166dc:	440b      	add	r3, r1
 80166de:	3314      	adds	r3, #20
 80166e0:	2202      	movs	r2, #2
 80166e2:	701a      	strb	r2, [r3, #0]
 80166e4:	e01e      	b.n	8016724 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80166e6:	4915      	ldr	r1, [pc, #84]	@ (801673c <etharp_tmr+0x14c>)
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	4613      	mov	r3, r2
 80166ec:	005b      	lsls	r3, r3, #1
 80166ee:	4413      	add	r3, r2
 80166f0:	00db      	lsls	r3, r3, #3
 80166f2:	440b      	add	r3, r1
 80166f4:	3314      	adds	r3, #20
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	2b01      	cmp	r3, #1
 80166fa:	d113      	bne.n	8016724 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80166fc:	490f      	ldr	r1, [pc, #60]	@ (801673c <etharp_tmr+0x14c>)
 80166fe:	687a      	ldr	r2, [r7, #4]
 8016700:	4613      	mov	r3, r2
 8016702:	005b      	lsls	r3, r3, #1
 8016704:	4413      	add	r3, r2
 8016706:	00db      	lsls	r3, r3, #3
 8016708:	440b      	add	r3, r1
 801670a:	3308      	adds	r3, #8
 801670c:	6818      	ldr	r0, [r3, #0]
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	4a08      	ldr	r2, [pc, #32]	@ (801673c <etharp_tmr+0x14c>)
 801671a:	4413      	add	r3, r2
 801671c:	3304      	adds	r3, #4
 801671e:	4619      	mov	r1, r3
 8016720:	f000 fe6e 	bl	8017400 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	3301      	adds	r3, #1
 8016728:	607b      	str	r3, [r7, #4]
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2b09      	cmp	r3, #9
 801672e:	f77f af65 	ble.w	80165fc <etharp_tmr+0xc>
      }
    }
  }
}
 8016732:	bf00      	nop
 8016734:	bf00      	nop
 8016736:	3708      	adds	r7, #8
 8016738:	46bd      	mov	sp, r7
 801673a:	bd80      	pop	{r7, pc}
 801673c:	20011d78 	.word	0x20011d78

08016740 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b08a      	sub	sp, #40	@ 0x28
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	460b      	mov	r3, r1
 801674a:	607a      	str	r2, [r7, #4]
 801674c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801674e:	230a      	movs	r3, #10
 8016750:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016752:	230a      	movs	r3, #10
 8016754:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016756:	230a      	movs	r3, #10
 8016758:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801675a:	2300      	movs	r3, #0
 801675c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801675e:	230a      	movs	r3, #10
 8016760:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016762:	2300      	movs	r3, #0
 8016764:	83bb      	strh	r3, [r7, #28]
 8016766:	2300      	movs	r3, #0
 8016768:	837b      	strh	r3, [r7, #26]
 801676a:	2300      	movs	r3, #0
 801676c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801676e:	2300      	movs	r3, #0
 8016770:	843b      	strh	r3, [r7, #32]
 8016772:	e0ae      	b.n	80168d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016778:	49a6      	ldr	r1, [pc, #664]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801677a:	4613      	mov	r3, r2
 801677c:	005b      	lsls	r3, r3, #1
 801677e:	4413      	add	r3, r2
 8016780:	00db      	lsls	r3, r3, #3
 8016782:	440b      	add	r3, r1
 8016784:	3314      	adds	r3, #20
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801678a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801678e:	2b0a      	cmp	r3, #10
 8016790:	d105      	bne.n	801679e <etharp_find_entry+0x5e>
 8016792:	7dfb      	ldrb	r3, [r7, #23]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d102      	bne.n	801679e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016798:	8c3b      	ldrh	r3, [r7, #32]
 801679a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801679c:	e095      	b.n	80168ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801679e:	7dfb      	ldrb	r3, [r7, #23]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	f000 8092 	beq.w	80168ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80167a6:	7dfb      	ldrb	r3, [r7, #23]
 80167a8:	2b01      	cmp	r3, #1
 80167aa:	d009      	beq.n	80167c0 <etharp_find_entry+0x80>
 80167ac:	7dfb      	ldrb	r3, [r7, #23]
 80167ae:	2b01      	cmp	r3, #1
 80167b0:	d806      	bhi.n	80167c0 <etharp_find_entry+0x80>
 80167b2:	4b99      	ldr	r3, [pc, #612]	@ (8016a18 <etharp_find_entry+0x2d8>)
 80167b4:	f240 1223 	movw	r2, #291	@ 0x123
 80167b8:	4998      	ldr	r1, [pc, #608]	@ (8016a1c <etharp_find_entry+0x2dc>)
 80167ba:	4899      	ldr	r0, [pc, #612]	@ (8016a20 <etharp_find_entry+0x2e0>)
 80167bc:	f003 f89a 	bl	80198f4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d020      	beq.n	8016808 <etharp_find_entry+0xc8>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6819      	ldr	r1, [r3, #0]
 80167ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ce:	4891      	ldr	r0, [pc, #580]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80167d0:	4613      	mov	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4413      	add	r3, r2
 80167d6:	00db      	lsls	r3, r3, #3
 80167d8:	4403      	add	r3, r0
 80167da:	3304      	adds	r3, #4
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	4299      	cmp	r1, r3
 80167e0:	d112      	bne.n	8016808 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d00c      	beq.n	8016802 <etharp_find_entry+0xc2>
 80167e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167ec:	4989      	ldr	r1, [pc, #548]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80167ee:	4613      	mov	r3, r2
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	4413      	add	r3, r2
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	440b      	add	r3, r1
 80167f8:	3308      	adds	r3, #8
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	687a      	ldr	r2, [r7, #4]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d102      	bne.n	8016808 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016802:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016806:	e100      	b.n	8016a0a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016808:	7dfb      	ldrb	r3, [r7, #23]
 801680a:	2b01      	cmp	r3, #1
 801680c:	d140      	bne.n	8016890 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801680e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016812:	4980      	ldr	r1, [pc, #512]	@ (8016a14 <etharp_find_entry+0x2d4>)
 8016814:	4613      	mov	r3, r2
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	4413      	add	r3, r2
 801681a:	00db      	lsls	r3, r3, #3
 801681c:	440b      	add	r3, r1
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d01a      	beq.n	801685a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016828:	497a      	ldr	r1, [pc, #488]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801682a:	4613      	mov	r3, r2
 801682c:	005b      	lsls	r3, r3, #1
 801682e:	4413      	add	r3, r2
 8016830:	00db      	lsls	r3, r3, #3
 8016832:	440b      	add	r3, r1
 8016834:	3312      	adds	r3, #18
 8016836:	881b      	ldrh	r3, [r3, #0]
 8016838:	8bba      	ldrh	r2, [r7, #28]
 801683a:	429a      	cmp	r2, r3
 801683c:	d845      	bhi.n	80168ca <etharp_find_entry+0x18a>
            old_queue = i;
 801683e:	8c3b      	ldrh	r3, [r7, #32]
 8016840:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016842:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016846:	4973      	ldr	r1, [pc, #460]	@ (8016a14 <etharp_find_entry+0x2d4>)
 8016848:	4613      	mov	r3, r2
 801684a:	005b      	lsls	r3, r3, #1
 801684c:	4413      	add	r3, r2
 801684e:	00db      	lsls	r3, r3, #3
 8016850:	440b      	add	r3, r1
 8016852:	3312      	adds	r3, #18
 8016854:	881b      	ldrh	r3, [r3, #0]
 8016856:	83bb      	strh	r3, [r7, #28]
 8016858:	e037      	b.n	80168ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801685a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801685e:	496d      	ldr	r1, [pc, #436]	@ (8016a14 <etharp_find_entry+0x2d4>)
 8016860:	4613      	mov	r3, r2
 8016862:	005b      	lsls	r3, r3, #1
 8016864:	4413      	add	r3, r2
 8016866:	00db      	lsls	r3, r3, #3
 8016868:	440b      	add	r3, r1
 801686a:	3312      	adds	r3, #18
 801686c:	881b      	ldrh	r3, [r3, #0]
 801686e:	8b7a      	ldrh	r2, [r7, #26]
 8016870:	429a      	cmp	r2, r3
 8016872:	d82a      	bhi.n	80168ca <etharp_find_entry+0x18a>
            old_pending = i;
 8016874:	8c3b      	ldrh	r3, [r7, #32]
 8016876:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801687c:	4965      	ldr	r1, [pc, #404]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801687e:	4613      	mov	r3, r2
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	4413      	add	r3, r2
 8016884:	00db      	lsls	r3, r3, #3
 8016886:	440b      	add	r3, r1
 8016888:	3312      	adds	r3, #18
 801688a:	881b      	ldrh	r3, [r3, #0]
 801688c:	837b      	strh	r3, [r7, #26]
 801688e:	e01c      	b.n	80168ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016890:	7dfb      	ldrb	r3, [r7, #23]
 8016892:	2b01      	cmp	r3, #1
 8016894:	d919      	bls.n	80168ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801689a:	495e      	ldr	r1, [pc, #376]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801689c:	4613      	mov	r3, r2
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	4413      	add	r3, r2
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	440b      	add	r3, r1
 80168a6:	3312      	adds	r3, #18
 80168a8:	881b      	ldrh	r3, [r3, #0]
 80168aa:	8b3a      	ldrh	r2, [r7, #24]
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d80c      	bhi.n	80168ca <etharp_find_entry+0x18a>
            old_stable = i;
 80168b0:	8c3b      	ldrh	r3, [r7, #32]
 80168b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80168b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168b8:	4956      	ldr	r1, [pc, #344]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80168ba:	4613      	mov	r3, r2
 80168bc:	005b      	lsls	r3, r3, #1
 80168be:	4413      	add	r3, r2
 80168c0:	00db      	lsls	r3, r3, #3
 80168c2:	440b      	add	r3, r1
 80168c4:	3312      	adds	r3, #18
 80168c6:	881b      	ldrh	r3, [r3, #0]
 80168c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ca:	8c3b      	ldrh	r3, [r7, #32]
 80168cc:	3301      	adds	r3, #1
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	843b      	strh	r3, [r7, #32]
 80168d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168d6:	2b09      	cmp	r3, #9
 80168d8:	f77f af4c 	ble.w	8016774 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80168dc:	7afb      	ldrb	r3, [r7, #11]
 80168de:	f003 0302 	and.w	r3, r3, #2
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d108      	bne.n	80168f8 <etharp_find_entry+0x1b8>
 80168e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80168ea:	2b0a      	cmp	r3, #10
 80168ec:	d107      	bne.n	80168fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80168ee:	7afb      	ldrb	r3, [r7, #11]
 80168f0:	f003 0301 	and.w	r3, r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d102      	bne.n	80168fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80168f8:	f04f 33ff 	mov.w	r3, #4294967295
 80168fc:	e085      	b.n	8016a0a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80168fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016902:	2b09      	cmp	r3, #9
 8016904:	dc02      	bgt.n	801690c <etharp_find_entry+0x1cc>
    i = empty;
 8016906:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016908:	843b      	strh	r3, [r7, #32]
 801690a:	e039      	b.n	8016980 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801690c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016910:	2b09      	cmp	r3, #9
 8016912:	dc14      	bgt.n	801693e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016916:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801691c:	493d      	ldr	r1, [pc, #244]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801691e:	4613      	mov	r3, r2
 8016920:	005b      	lsls	r3, r3, #1
 8016922:	4413      	add	r3, r2
 8016924:	00db      	lsls	r3, r3, #3
 8016926:	440b      	add	r3, r1
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d018      	beq.n	8016960 <etharp_find_entry+0x220>
 801692e:	4b3a      	ldr	r3, [pc, #232]	@ (8016a18 <etharp_find_entry+0x2d8>)
 8016930:	f240 126d 	movw	r2, #365	@ 0x16d
 8016934:	493b      	ldr	r1, [pc, #236]	@ (8016a24 <etharp_find_entry+0x2e4>)
 8016936:	483a      	ldr	r0, [pc, #232]	@ (8016a20 <etharp_find_entry+0x2e0>)
 8016938:	f002 ffdc 	bl	80198f4 <iprintf>
 801693c:	e010      	b.n	8016960 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801693e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016942:	2b09      	cmp	r3, #9
 8016944:	dc02      	bgt.n	801694c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016946:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016948:	843b      	strh	r3, [r7, #32]
 801694a:	e009      	b.n	8016960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801694c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016950:	2b09      	cmp	r3, #9
 8016952:	dc02      	bgt.n	801695a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016954:	8bfb      	ldrh	r3, [r7, #30]
 8016956:	843b      	strh	r3, [r7, #32]
 8016958:	e002      	b.n	8016960 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801695a:	f04f 33ff 	mov.w	r3, #4294967295
 801695e:	e054      	b.n	8016a0a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016960:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016964:	2b09      	cmp	r3, #9
 8016966:	dd06      	ble.n	8016976 <etharp_find_entry+0x236>
 8016968:	4b2b      	ldr	r3, [pc, #172]	@ (8016a18 <etharp_find_entry+0x2d8>)
 801696a:	f240 127f 	movw	r2, #383	@ 0x17f
 801696e:	492e      	ldr	r1, [pc, #184]	@ (8016a28 <etharp_find_entry+0x2e8>)
 8016970:	482b      	ldr	r0, [pc, #172]	@ (8016a20 <etharp_find_entry+0x2e0>)
 8016972:	f002 ffbf 	bl	80198f4 <iprintf>
    etharp_free_entry(i);
 8016976:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801697a:	4618      	mov	r0, r3
 801697c:	f7ff fe06 	bl	801658c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016980:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016984:	2b09      	cmp	r3, #9
 8016986:	dd06      	ble.n	8016996 <etharp_find_entry+0x256>
 8016988:	4b23      	ldr	r3, [pc, #140]	@ (8016a18 <etharp_find_entry+0x2d8>)
 801698a:	f240 1283 	movw	r2, #387	@ 0x183
 801698e:	4926      	ldr	r1, [pc, #152]	@ (8016a28 <etharp_find_entry+0x2e8>)
 8016990:	4823      	ldr	r0, [pc, #140]	@ (8016a20 <etharp_find_entry+0x2e0>)
 8016992:	f002 ffaf 	bl	80198f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801699a:	491e      	ldr	r1, [pc, #120]	@ (8016a14 <etharp_find_entry+0x2d4>)
 801699c:	4613      	mov	r3, r2
 801699e:	005b      	lsls	r3, r3, #1
 80169a0:	4413      	add	r3, r2
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	440b      	add	r3, r1
 80169a6:	3314      	adds	r3, #20
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d006      	beq.n	80169bc <etharp_find_entry+0x27c>
 80169ae:	4b1a      	ldr	r3, [pc, #104]	@ (8016a18 <etharp_find_entry+0x2d8>)
 80169b0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80169b4:	491d      	ldr	r1, [pc, #116]	@ (8016a2c <etharp_find_entry+0x2ec>)
 80169b6:	481a      	ldr	r0, [pc, #104]	@ (8016a20 <etharp_find_entry+0x2e0>)
 80169b8:	f002 ff9c 	bl	80198f4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d00b      	beq.n	80169da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80169c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	6819      	ldr	r1, [r3, #0]
 80169ca:	4812      	ldr	r0, [pc, #72]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80169cc:	4613      	mov	r3, r2
 80169ce:	005b      	lsls	r3, r3, #1
 80169d0:	4413      	add	r3, r2
 80169d2:	00db      	lsls	r3, r3, #3
 80169d4:	4403      	add	r3, r0
 80169d6:	3304      	adds	r3, #4
 80169d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80169da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169de:	490d      	ldr	r1, [pc, #52]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80169e0:	4613      	mov	r3, r2
 80169e2:	005b      	lsls	r3, r3, #1
 80169e4:	4413      	add	r3, r2
 80169e6:	00db      	lsls	r3, r3, #3
 80169e8:	440b      	add	r3, r1
 80169ea:	3312      	adds	r3, #18
 80169ec:	2200      	movs	r2, #0
 80169ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80169f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169f4:	4907      	ldr	r1, [pc, #28]	@ (8016a14 <etharp_find_entry+0x2d4>)
 80169f6:	4613      	mov	r3, r2
 80169f8:	005b      	lsls	r3, r3, #1
 80169fa:	4413      	add	r3, r2
 80169fc:	00db      	lsls	r3, r3, #3
 80169fe:	440b      	add	r3, r1
 8016a00:	3308      	adds	r3, #8
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016a06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3728      	adds	r7, #40	@ 0x28
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20011d78 	.word	0x20011d78
 8016a18:	0801ee70 	.word	0x0801ee70
 8016a1c:	0801eea8 	.word	0x0801eea8
 8016a20:	0801eee8 	.word	0x0801eee8
 8016a24:	0801ef10 	.word	0x0801ef10
 8016a28:	0801ef28 	.word	0x0801ef28
 8016a2c:	0801ef3c 	.word	0x0801ef3c

08016a30 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b088      	sub	sp, #32
 8016a34:	af02      	add	r7, sp, #8
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	60b9      	str	r1, [r7, #8]
 8016a3a:	607a      	str	r2, [r7, #4]
 8016a3c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016a44:	2b06      	cmp	r3, #6
 8016a46:	d006      	beq.n	8016a56 <etharp_update_arp_entry+0x26>
 8016a48:	4b48      	ldr	r3, [pc, #288]	@ (8016b6c <etharp_update_arp_entry+0x13c>)
 8016a4a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016a4e:	4948      	ldr	r1, [pc, #288]	@ (8016b70 <etharp_update_arp_entry+0x140>)
 8016a50:	4848      	ldr	r0, [pc, #288]	@ (8016b74 <etharp_update_arp_entry+0x144>)
 8016a52:	f002 ff4f 	bl	80198f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016a56:	68bb      	ldr	r3, [r7, #8]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d012      	beq.n	8016a82 <etharp_update_arp_entry+0x52>
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d00e      	beq.n	8016a82 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	68f9      	ldr	r1, [r7, #12]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f001 f8fe 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8016a70:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d105      	bne.n	8016a82 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a7e:	2be0      	cmp	r3, #224	@ 0xe0
 8016a80:	d102      	bne.n	8016a88 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016a82:	f06f 030f 	mvn.w	r3, #15
 8016a86:	e06c      	b.n	8016b62 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016a88:	78fb      	ldrb	r3, [r7, #3]
 8016a8a:	68fa      	ldr	r2, [r7, #12]
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	68b8      	ldr	r0, [r7, #8]
 8016a90:	f7ff fe56 	bl	8016740 <etharp_find_entry>
 8016a94:	4603      	mov	r3, r0
 8016a96:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016a98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	da02      	bge.n	8016aa6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016aa0:	8afb      	ldrh	r3, [r7, #22]
 8016aa2:	b25b      	sxtb	r3, r3
 8016aa4:	e05d      	b.n	8016b62 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016aa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016aaa:	4933      	ldr	r1, [pc, #204]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	440b      	add	r3, r1
 8016ab6:	3314      	adds	r3, #20
 8016ab8:	2202      	movs	r2, #2
 8016aba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016abc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ac0:	492d      	ldr	r1, [pc, #180]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	4413      	add	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	440b      	add	r3, r1
 8016acc:	3308      	adds	r3, #8
 8016ace:	68fa      	ldr	r2, [r7, #12]
 8016ad0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016ad2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	00db      	lsls	r3, r3, #3
 8016ade:	3308      	adds	r3, #8
 8016ae0:	4a25      	ldr	r2, [pc, #148]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016ae2:	4413      	add	r3, r2
 8016ae4:	3304      	adds	r3, #4
 8016ae6:	2206      	movs	r2, #6
 8016ae8:	6879      	ldr	r1, [r7, #4]
 8016aea:	4618      	mov	r0, r3
 8016aec:	f003 f981 	bl	8019df2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016af4:	4920      	ldr	r1, [pc, #128]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016af6:	4613      	mov	r3, r2
 8016af8:	005b      	lsls	r3, r3, #1
 8016afa:	4413      	add	r3, r2
 8016afc:	00db      	lsls	r3, r3, #3
 8016afe:	440b      	add	r3, r1
 8016b00:	3312      	adds	r3, #18
 8016b02:	2200      	movs	r2, #0
 8016b04:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016b06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b0a:	491b      	ldr	r1, [pc, #108]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016b0c:	4613      	mov	r3, r2
 8016b0e:	005b      	lsls	r3, r3, #1
 8016b10:	4413      	add	r3, r2
 8016b12:	00db      	lsls	r3, r3, #3
 8016b14:	440b      	add	r3, r1
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d021      	beq.n	8016b60 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016b1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b20:	4915      	ldr	r1, [pc, #84]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016b22:	4613      	mov	r3, r2
 8016b24:	005b      	lsls	r3, r3, #1
 8016b26:	4413      	add	r3, r2
 8016b28:	00db      	lsls	r3, r3, #3
 8016b2a:	440b      	add	r3, r1
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016b30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b34:	4910      	ldr	r1, [pc, #64]	@ (8016b78 <etharp_update_arp_entry+0x148>)
 8016b36:	4613      	mov	r3, r2
 8016b38:	005b      	lsls	r3, r3, #1
 8016b3a:	4413      	add	r3, r2
 8016b3c:	00db      	lsls	r3, r3, #3
 8016b3e:	440b      	add	r3, r1
 8016b40:	2200      	movs	r2, #0
 8016b42:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016b4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016b4e:	9300      	str	r3, [sp, #0]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6939      	ldr	r1, [r7, #16]
 8016b54:	68f8      	ldr	r0, [r7, #12]
 8016b56:	f001 ff97 	bl	8018a88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016b5a:	6938      	ldr	r0, [r7, #16]
 8016b5c:	f7f8 fd80 	bl	800f660 <pbuf_free>
  }
  return ERR_OK;
 8016b60:	2300      	movs	r3, #0
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3718      	adds	r7, #24
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	0801ee70 	.word	0x0801ee70
 8016b70:	0801ef68 	.word	0x0801ef68
 8016b74:	0801eee8 	.word	0x0801eee8
 8016b78:	20011d78 	.word	0x20011d78

08016b7c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b084      	sub	sp, #16
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b84:	2300      	movs	r3, #0
 8016b86:	60fb      	str	r3, [r7, #12]
 8016b88:	e01e      	b.n	8016bc8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016b8a:	4913      	ldr	r1, [pc, #76]	@ (8016bd8 <etharp_cleanup_netif+0x5c>)
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	4613      	mov	r3, r2
 8016b90:	005b      	lsls	r3, r3, #1
 8016b92:	4413      	add	r3, r2
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	440b      	add	r3, r1
 8016b98:	3314      	adds	r3, #20
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016b9e:	7afb      	ldrb	r3, [r7, #11]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d00e      	beq.n	8016bc2 <etharp_cleanup_netif+0x46>
 8016ba4:	490c      	ldr	r1, [pc, #48]	@ (8016bd8 <etharp_cleanup_netif+0x5c>)
 8016ba6:	68fa      	ldr	r2, [r7, #12]
 8016ba8:	4613      	mov	r3, r2
 8016baa:	005b      	lsls	r3, r3, #1
 8016bac:	4413      	add	r3, r2
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	440b      	add	r3, r1
 8016bb2:	3308      	adds	r3, #8
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	687a      	ldr	r2, [r7, #4]
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d102      	bne.n	8016bc2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016bbc:	68f8      	ldr	r0, [r7, #12]
 8016bbe:	f7ff fce5 	bl	801658c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	3301      	adds	r3, #1
 8016bc6:	60fb      	str	r3, [r7, #12]
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2b09      	cmp	r3, #9
 8016bcc:	dddd      	ble.n	8016b8a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016bce:	bf00      	nop
 8016bd0:	bf00      	nop
 8016bd2:	3710      	adds	r7, #16
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}
 8016bd8:	20011d78 	.word	0x20011d78

08016bdc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016bdc:	b5b0      	push	{r4, r5, r7, lr}
 8016bde:	b08a      	sub	sp, #40	@ 0x28
 8016be0:	af04      	add	r7, sp, #16
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d107      	bne.n	8016bfc <etharp_input+0x20>
 8016bec:	4b3d      	ldr	r3, [pc, #244]	@ (8016ce4 <etharp_input+0x108>)
 8016bee:	f240 228a 	movw	r2, #650	@ 0x28a
 8016bf2:	493d      	ldr	r1, [pc, #244]	@ (8016ce8 <etharp_input+0x10c>)
 8016bf4:	483d      	ldr	r0, [pc, #244]	@ (8016cec <etharp_input+0x110>)
 8016bf6:	f002 fe7d 	bl	80198f4 <iprintf>
 8016bfa:	e06f      	b.n	8016cdc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	685b      	ldr	r3, [r3, #4]
 8016c00:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	881b      	ldrh	r3, [r3, #0]
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016c0c:	d10c      	bne.n	8016c28 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016c12:	2b06      	cmp	r3, #6
 8016c14:	d108      	bne.n	8016c28 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016c1a:	2b04      	cmp	r3, #4
 8016c1c:	d104      	bne.n	8016c28 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	885b      	ldrh	r3, [r3, #2]
 8016c22:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016c24:	2b08      	cmp	r3, #8
 8016c26:	d003      	beq.n	8016c30 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f7f8 fd19 	bl	800f660 <pbuf_free>
    return;
 8016c2e:	e055      	b.n	8016cdc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016c30:	693b      	ldr	r3, [r7, #16]
 8016c32:	330e      	adds	r3, #14
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	3318      	adds	r3, #24
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c40:	683b      	ldr	r3, [r7, #0]
 8016c42:	3304      	adds	r3, #4
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d102      	bne.n	8016c50 <etharp_input+0x74>
    for_us = 0;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	75fb      	strb	r3, [r7, #23]
 8016c4e:	e009      	b.n	8016c64 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016c50:	68ba      	ldr	r2, [r7, #8]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	3304      	adds	r3, #4
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	429a      	cmp	r2, r3
 8016c5a:	bf0c      	ite	eq
 8016c5c:	2301      	moveq	r3, #1
 8016c5e:	2300      	movne	r3, #0
 8016c60:	b2db      	uxtb	r3, r3
 8016c62:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	f103 0208 	add.w	r2, r3, #8
 8016c6a:	7dfb      	ldrb	r3, [r7, #23]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d001      	beq.n	8016c74 <etharp_input+0x98>
 8016c70:	2301      	movs	r3, #1
 8016c72:	e000      	b.n	8016c76 <etharp_input+0x9a>
 8016c74:	2302      	movs	r3, #2
 8016c76:	f107 010c 	add.w	r1, r7, #12
 8016c7a:	6838      	ldr	r0, [r7, #0]
 8016c7c:	f7ff fed8 	bl	8016a30 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	88db      	ldrh	r3, [r3, #6]
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016c8a:	d003      	beq.n	8016c94 <etharp_input+0xb8>
 8016c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c90:	d01e      	beq.n	8016cd0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016c92:	e020      	b.n	8016cd6 <etharp_input+0xfa>
      if (for_us) {
 8016c94:	7dfb      	ldrb	r3, [r7, #23]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d01c      	beq.n	8016cd4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016cb0:	693a      	ldr	r2, [r7, #16]
 8016cb2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016cb4:	2102      	movs	r1, #2
 8016cb6:	9103      	str	r1, [sp, #12]
 8016cb8:	f107 010c 	add.w	r1, r7, #12
 8016cbc:	9102      	str	r1, [sp, #8]
 8016cbe:	9201      	str	r2, [sp, #4]
 8016cc0:	9300      	str	r3, [sp, #0]
 8016cc2:	462b      	mov	r3, r5
 8016cc4:	4622      	mov	r2, r4
 8016cc6:	4601      	mov	r1, r0
 8016cc8:	6838      	ldr	r0, [r7, #0]
 8016cca:	f000 faeb 	bl	80172a4 <etharp_raw>
      break;
 8016cce:	e001      	b.n	8016cd4 <etharp_input+0xf8>
      break;
 8016cd0:	bf00      	nop
 8016cd2:	e000      	b.n	8016cd6 <etharp_input+0xfa>
      break;
 8016cd4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f7f8 fcc2 	bl	800f660 <pbuf_free>
}
 8016cdc:	3718      	adds	r7, #24
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8016ce2:	bf00      	nop
 8016ce4:	0801ee70 	.word	0x0801ee70
 8016ce8:	0801efc0 	.word	0x0801efc0
 8016cec:	0801eee8 	.word	0x0801eee8

08016cf0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b086      	sub	sp, #24
 8016cf4:	af02      	add	r7, sp, #8
 8016cf6:	60f8      	str	r0, [r7, #12]
 8016cf8:	60b9      	str	r1, [r7, #8]
 8016cfa:	4613      	mov	r3, r2
 8016cfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016cfe:	79fa      	ldrb	r2, [r7, #7]
 8016d00:	4944      	ldr	r1, [pc, #272]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d02:	4613      	mov	r3, r2
 8016d04:	005b      	lsls	r3, r3, #1
 8016d06:	4413      	add	r3, r2
 8016d08:	00db      	lsls	r3, r3, #3
 8016d0a:	440b      	add	r3, r1
 8016d0c:	3314      	adds	r3, #20
 8016d0e:	781b      	ldrb	r3, [r3, #0]
 8016d10:	2b01      	cmp	r3, #1
 8016d12:	d806      	bhi.n	8016d22 <etharp_output_to_arp_index+0x32>
 8016d14:	4b40      	ldr	r3, [pc, #256]	@ (8016e18 <etharp_output_to_arp_index+0x128>)
 8016d16:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016d1a:	4940      	ldr	r1, [pc, #256]	@ (8016e1c <etharp_output_to_arp_index+0x12c>)
 8016d1c:	4840      	ldr	r0, [pc, #256]	@ (8016e20 <etharp_output_to_arp_index+0x130>)
 8016d1e:	f002 fde9 	bl	80198f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016d22:	79fa      	ldrb	r2, [r7, #7]
 8016d24:	493b      	ldr	r1, [pc, #236]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d26:	4613      	mov	r3, r2
 8016d28:	005b      	lsls	r3, r3, #1
 8016d2a:	4413      	add	r3, r2
 8016d2c:	00db      	lsls	r3, r3, #3
 8016d2e:	440b      	add	r3, r1
 8016d30:	3314      	adds	r3, #20
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	2b02      	cmp	r3, #2
 8016d36:	d153      	bne.n	8016de0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016d38:	79fa      	ldrb	r2, [r7, #7]
 8016d3a:	4936      	ldr	r1, [pc, #216]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	005b      	lsls	r3, r3, #1
 8016d40:	4413      	add	r3, r2
 8016d42:	00db      	lsls	r3, r3, #3
 8016d44:	440b      	add	r3, r1
 8016d46:	3312      	adds	r3, #18
 8016d48:	881b      	ldrh	r3, [r3, #0]
 8016d4a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016d4e:	d919      	bls.n	8016d84 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016d50:	79fa      	ldrb	r2, [r7, #7]
 8016d52:	4613      	mov	r3, r2
 8016d54:	005b      	lsls	r3, r3, #1
 8016d56:	4413      	add	r3, r2
 8016d58:	00db      	lsls	r3, r3, #3
 8016d5a:	4a2e      	ldr	r2, [pc, #184]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d5c:	4413      	add	r3, r2
 8016d5e:	3304      	adds	r3, #4
 8016d60:	4619      	mov	r1, r3
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	f000 fb4c 	bl	8017400 <etharp_request>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d138      	bne.n	8016de0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d6e:	79fa      	ldrb	r2, [r7, #7]
 8016d70:	4928      	ldr	r1, [pc, #160]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d72:	4613      	mov	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	00db      	lsls	r3, r3, #3
 8016d7a:	440b      	add	r3, r1
 8016d7c:	3314      	adds	r3, #20
 8016d7e:	2203      	movs	r2, #3
 8016d80:	701a      	strb	r2, [r3, #0]
 8016d82:	e02d      	b.n	8016de0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016d84:	79fa      	ldrb	r2, [r7, #7]
 8016d86:	4923      	ldr	r1, [pc, #140]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016d88:	4613      	mov	r3, r2
 8016d8a:	005b      	lsls	r3, r3, #1
 8016d8c:	4413      	add	r3, r2
 8016d8e:	00db      	lsls	r3, r3, #3
 8016d90:	440b      	add	r3, r1
 8016d92:	3312      	adds	r3, #18
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016d9a:	d321      	bcc.n	8016de0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016d9c:	79fa      	ldrb	r2, [r7, #7]
 8016d9e:	4613      	mov	r3, r2
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	4413      	add	r3, r2
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	4a1b      	ldr	r2, [pc, #108]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016da8:	4413      	add	r3, r2
 8016daa:	1d19      	adds	r1, r3, #4
 8016dac:	79fa      	ldrb	r2, [r7, #7]
 8016dae:	4613      	mov	r3, r2
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	3308      	adds	r3, #8
 8016db8:	4a16      	ldr	r2, [pc, #88]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016dba:	4413      	add	r3, r2
 8016dbc:	3304      	adds	r3, #4
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	68f8      	ldr	r0, [r7, #12]
 8016dc2:	f000 fafb 	bl	80173bc <etharp_request_dst>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d109      	bne.n	8016de0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016dcc:	79fa      	ldrb	r2, [r7, #7]
 8016dce:	4911      	ldr	r1, [pc, #68]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016dd0:	4613      	mov	r3, r2
 8016dd2:	005b      	lsls	r3, r3, #1
 8016dd4:	4413      	add	r3, r2
 8016dd6:	00db      	lsls	r3, r3, #3
 8016dd8:	440b      	add	r3, r1
 8016dda:	3314      	adds	r3, #20
 8016ddc:	2203      	movs	r2, #3
 8016dde:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8016de6:	79fa      	ldrb	r2, [r7, #7]
 8016de8:	4613      	mov	r3, r2
 8016dea:	005b      	lsls	r3, r3, #1
 8016dec:	4413      	add	r3, r2
 8016dee:	00db      	lsls	r3, r3, #3
 8016df0:	3308      	adds	r3, #8
 8016df2:	4a08      	ldr	r2, [pc, #32]	@ (8016e14 <etharp_output_to_arp_index+0x124>)
 8016df4:	4413      	add	r3, r2
 8016df6:	3304      	adds	r3, #4
 8016df8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016dfc:	9200      	str	r2, [sp, #0]
 8016dfe:	460a      	mov	r2, r1
 8016e00:	68b9      	ldr	r1, [r7, #8]
 8016e02:	68f8      	ldr	r0, [r7, #12]
 8016e04:	f001 fe40 	bl	8018a88 <ethernet_output>
 8016e08:	4603      	mov	r3, r0
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	20011d78 	.word	0x20011d78
 8016e18:	0801ee70 	.word	0x0801ee70
 8016e1c:	0801efe0 	.word	0x0801efe0
 8016e20:	0801eee8 	.word	0x0801eee8

08016e24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b08a      	sub	sp, #40	@ 0x28
 8016e28:	af02      	add	r7, sp, #8
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d106      	bne.n	8016e48 <etharp_output+0x24>
 8016e3a:	4b73      	ldr	r3, [pc, #460]	@ (8017008 <etharp_output+0x1e4>)
 8016e3c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016e40:	4972      	ldr	r1, [pc, #456]	@ (801700c <etharp_output+0x1e8>)
 8016e42:	4873      	ldr	r0, [pc, #460]	@ (8017010 <etharp_output+0x1ec>)
 8016e44:	f002 fd56 	bl	80198f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016e48:	68bb      	ldr	r3, [r7, #8]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d106      	bne.n	8016e5c <etharp_output+0x38>
 8016e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8017008 <etharp_output+0x1e4>)
 8016e50:	f240 321f 	movw	r2, #799	@ 0x31f
 8016e54:	496f      	ldr	r1, [pc, #444]	@ (8017014 <etharp_output+0x1f0>)
 8016e56:	486e      	ldr	r0, [pc, #440]	@ (8017010 <etharp_output+0x1ec>)
 8016e58:	f002 fd4c 	bl	80198f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d106      	bne.n	8016e70 <etharp_output+0x4c>
 8016e62:	4b69      	ldr	r3, [pc, #420]	@ (8017008 <etharp_output+0x1e4>)
 8016e64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e68:	496b      	ldr	r1, [pc, #428]	@ (8017018 <etharp_output+0x1f4>)
 8016e6a:	4869      	ldr	r0, [pc, #420]	@ (8017010 <etharp_output+0x1ec>)
 8016e6c:	f002 fd42 	bl	80198f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	68f9      	ldr	r1, [r7, #12]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 fef8 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d002      	beq.n	8016e88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016e82:	4b66      	ldr	r3, [pc, #408]	@ (801701c <etharp_output+0x1f8>)
 8016e84:	61fb      	str	r3, [r7, #28]
 8016e86:	e0af      	b.n	8016fe8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e90:	2be0      	cmp	r3, #224	@ 0xe0
 8016e92:	d118      	bne.n	8016ec6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016e94:	2301      	movs	r3, #1
 8016e96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016e9c:	235e      	movs	r3, #94	@ 0x5e
 8016e9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	3302      	adds	r3, #2
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	3303      	adds	r3, #3
 8016eba:	781b      	ldrb	r3, [r3, #0]
 8016ebc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016ebe:	f107 0310 	add.w	r3, r7, #16
 8016ec2:	61fb      	str	r3, [r7, #28]
 8016ec4:	e090      	b.n	8016fe8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	3304      	adds	r3, #4
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	405a      	eors	r2, r3
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	3308      	adds	r3, #8
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	4013      	ands	r3, r2
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d012      	beq.n	8016f04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ee4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016ee8:	4293      	cmp	r3, r2
 8016eea:	d00b      	beq.n	8016f04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	330c      	adds	r3, #12
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d003      	beq.n	8016efe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	330c      	adds	r3, #12
 8016efa:	61bb      	str	r3, [r7, #24]
 8016efc:	e002      	b.n	8016f04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016efe:	f06f 0303 	mvn.w	r3, #3
 8016f02:	e07d      	b.n	8017000 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016f04:	4b46      	ldr	r3, [pc, #280]	@ (8017020 <etharp_output+0x1fc>)
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	4619      	mov	r1, r3
 8016f0a:	4a46      	ldr	r2, [pc, #280]	@ (8017024 <etharp_output+0x200>)
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	005b      	lsls	r3, r3, #1
 8016f10:	440b      	add	r3, r1
 8016f12:	00db      	lsls	r3, r3, #3
 8016f14:	4413      	add	r3, r2
 8016f16:	3314      	adds	r3, #20
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	2b01      	cmp	r3, #1
 8016f1c:	d925      	bls.n	8016f6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016f1e:	4b40      	ldr	r3, [pc, #256]	@ (8017020 <etharp_output+0x1fc>)
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	4619      	mov	r1, r3
 8016f24:	4a3f      	ldr	r2, [pc, #252]	@ (8017024 <etharp_output+0x200>)
 8016f26:	460b      	mov	r3, r1
 8016f28:	005b      	lsls	r3, r3, #1
 8016f2a:	440b      	add	r3, r1
 8016f2c:	00db      	lsls	r3, r3, #3
 8016f2e:	4413      	add	r3, r2
 8016f30:	3308      	adds	r3, #8
 8016f32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016f34:	68fa      	ldr	r2, [r7, #12]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d117      	bne.n	8016f6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016f3a:	69bb      	ldr	r3, [r7, #24]
 8016f3c:	681a      	ldr	r2, [r3, #0]
 8016f3e:	4b38      	ldr	r3, [pc, #224]	@ (8017020 <etharp_output+0x1fc>)
 8016f40:	781b      	ldrb	r3, [r3, #0]
 8016f42:	4618      	mov	r0, r3
 8016f44:	4937      	ldr	r1, [pc, #220]	@ (8017024 <etharp_output+0x200>)
 8016f46:	4603      	mov	r3, r0
 8016f48:	005b      	lsls	r3, r3, #1
 8016f4a:	4403      	add	r3, r0
 8016f4c:	00db      	lsls	r3, r3, #3
 8016f4e:	440b      	add	r3, r1
 8016f50:	3304      	adds	r3, #4
 8016f52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d108      	bne.n	8016f6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016f58:	4b31      	ldr	r3, [pc, #196]	@ (8017020 <etharp_output+0x1fc>)
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	461a      	mov	r2, r3
 8016f5e:	68b9      	ldr	r1, [r7, #8]
 8016f60:	68f8      	ldr	r0, [r7, #12]
 8016f62:	f7ff fec5 	bl	8016cf0 <etharp_output_to_arp_index>
 8016f66:	4603      	mov	r3, r0
 8016f68:	e04a      	b.n	8017000 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	75fb      	strb	r3, [r7, #23]
 8016f6e:	e031      	b.n	8016fd4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016f70:	7dfa      	ldrb	r2, [r7, #23]
 8016f72:	492c      	ldr	r1, [pc, #176]	@ (8017024 <etharp_output+0x200>)
 8016f74:	4613      	mov	r3, r2
 8016f76:	005b      	lsls	r3, r3, #1
 8016f78:	4413      	add	r3, r2
 8016f7a:	00db      	lsls	r3, r3, #3
 8016f7c:	440b      	add	r3, r1
 8016f7e:	3314      	adds	r3, #20
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	2b01      	cmp	r3, #1
 8016f84:	d923      	bls.n	8016fce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016f86:	7dfa      	ldrb	r2, [r7, #23]
 8016f88:	4926      	ldr	r1, [pc, #152]	@ (8017024 <etharp_output+0x200>)
 8016f8a:	4613      	mov	r3, r2
 8016f8c:	005b      	lsls	r3, r3, #1
 8016f8e:	4413      	add	r3, r2
 8016f90:	00db      	lsls	r3, r3, #3
 8016f92:	440b      	add	r3, r1
 8016f94:	3308      	adds	r3, #8
 8016f96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016f98:	68fa      	ldr	r2, [r7, #12]
 8016f9a:	429a      	cmp	r2, r3
 8016f9c:	d117      	bne.n	8016fce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016f9e:	69bb      	ldr	r3, [r7, #24]
 8016fa0:	6819      	ldr	r1, [r3, #0]
 8016fa2:	7dfa      	ldrb	r2, [r7, #23]
 8016fa4:	481f      	ldr	r0, [pc, #124]	@ (8017024 <etharp_output+0x200>)
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	005b      	lsls	r3, r3, #1
 8016faa:	4413      	add	r3, r2
 8016fac:	00db      	lsls	r3, r3, #3
 8016fae:	4403      	add	r3, r0
 8016fb0:	3304      	adds	r3, #4
 8016fb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016fb4:	4299      	cmp	r1, r3
 8016fb6:	d10a      	bne.n	8016fce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016fb8:	4a19      	ldr	r2, [pc, #100]	@ (8017020 <etharp_output+0x1fc>)
 8016fba:	7dfb      	ldrb	r3, [r7, #23]
 8016fbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016fbe:	7dfb      	ldrb	r3, [r7, #23]
 8016fc0:	461a      	mov	r2, r3
 8016fc2:	68b9      	ldr	r1, [r7, #8]
 8016fc4:	68f8      	ldr	r0, [r7, #12]
 8016fc6:	f7ff fe93 	bl	8016cf0 <etharp_output_to_arp_index>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	e018      	b.n	8017000 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016fce:	7dfb      	ldrb	r3, [r7, #23]
 8016fd0:	3301      	adds	r3, #1
 8016fd2:	75fb      	strb	r3, [r7, #23]
 8016fd4:	7dfb      	ldrb	r3, [r7, #23]
 8016fd6:	2b09      	cmp	r3, #9
 8016fd8:	d9ca      	bls.n	8016f70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016fda:	68ba      	ldr	r2, [r7, #8]
 8016fdc:	69b9      	ldr	r1, [r7, #24]
 8016fde:	68f8      	ldr	r0, [r7, #12]
 8016fe0:	f000 f822 	bl	8017028 <etharp_query>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	e00b      	b.n	8017000 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016ff2:	9300      	str	r3, [sp, #0]
 8016ff4:	69fb      	ldr	r3, [r7, #28]
 8016ff6:	68b9      	ldr	r1, [r7, #8]
 8016ff8:	68f8      	ldr	r0, [r7, #12]
 8016ffa:	f001 fd45 	bl	8018a88 <ethernet_output>
 8016ffe:	4603      	mov	r3, r0
}
 8017000:	4618      	mov	r0, r3
 8017002:	3720      	adds	r7, #32
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}
 8017008:	0801ee70 	.word	0x0801ee70
 801700c:	0801efc0 	.word	0x0801efc0
 8017010:	0801eee8 	.word	0x0801eee8
 8017014:	0801f010 	.word	0x0801f010
 8017018:	0801efb0 	.word	0x0801efb0
 801701c:	0801f664 	.word	0x0801f664
 8017020:	20011e68 	.word	0x20011e68
 8017024:	20011d78 	.word	0x20011d78

08017028 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08c      	sub	sp, #48	@ 0x30
 801702c:	af02      	add	r7, sp, #8
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	3326      	adds	r3, #38	@ 0x26
 8017038:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801703a:	23ff      	movs	r3, #255	@ 0xff
 801703c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017040:	2300      	movs	r3, #0
 8017042:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	68f9      	ldr	r1, [r7, #12]
 801704a:	4618      	mov	r0, r3
 801704c:	f000 fe0e 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8017050:	4603      	mov	r3, r0
 8017052:	2b00      	cmp	r3, #0
 8017054:	d10c      	bne.n	8017070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801705e:	2be0      	cmp	r3, #224	@ 0xe0
 8017060:	d006      	beq.n	8017070 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d003      	beq.n	8017070 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d102      	bne.n	8017076 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017070:	f06f 030f 	mvn.w	r3, #15
 8017074:	e101      	b.n	801727a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017076:	68fa      	ldr	r2, [r7, #12]
 8017078:	2101      	movs	r1, #1
 801707a:	68b8      	ldr	r0, [r7, #8]
 801707c:	f7ff fb60 	bl	8016740 <etharp_find_entry>
 8017080:	4603      	mov	r3, r0
 8017082:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017088:	2b00      	cmp	r3, #0
 801708a:	da02      	bge.n	8017092 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801708c:	8a7b      	ldrh	r3, [r7, #18]
 801708e:	b25b      	sxtb	r3, r3
 8017090:	e0f3      	b.n	801727a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017092:	8a7b      	ldrh	r3, [r7, #18]
 8017094:	2b7e      	cmp	r3, #126	@ 0x7e
 8017096:	d906      	bls.n	80170a6 <etharp_query+0x7e>
 8017098:	4b7a      	ldr	r3, [pc, #488]	@ (8017284 <etharp_query+0x25c>)
 801709a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801709e:	497a      	ldr	r1, [pc, #488]	@ (8017288 <etharp_query+0x260>)
 80170a0:	487a      	ldr	r0, [pc, #488]	@ (801728c <etharp_query+0x264>)
 80170a2:	f002 fc27 	bl	80198f4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80170a6:	8a7b      	ldrh	r3, [r7, #18]
 80170a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80170aa:	7c7a      	ldrb	r2, [r7, #17]
 80170ac:	4978      	ldr	r1, [pc, #480]	@ (8017290 <etharp_query+0x268>)
 80170ae:	4613      	mov	r3, r2
 80170b0:	005b      	lsls	r3, r3, #1
 80170b2:	4413      	add	r3, r2
 80170b4:	00db      	lsls	r3, r3, #3
 80170b6:	440b      	add	r3, r1
 80170b8:	3314      	adds	r3, #20
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d115      	bne.n	80170ec <etharp_query+0xc4>
    is_new_entry = 1;
 80170c0:	2301      	movs	r3, #1
 80170c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80170c4:	7c7a      	ldrb	r2, [r7, #17]
 80170c6:	4972      	ldr	r1, [pc, #456]	@ (8017290 <etharp_query+0x268>)
 80170c8:	4613      	mov	r3, r2
 80170ca:	005b      	lsls	r3, r3, #1
 80170cc:	4413      	add	r3, r2
 80170ce:	00db      	lsls	r3, r3, #3
 80170d0:	440b      	add	r3, r1
 80170d2:	3314      	adds	r3, #20
 80170d4:	2201      	movs	r2, #1
 80170d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80170d8:	7c7a      	ldrb	r2, [r7, #17]
 80170da:	496d      	ldr	r1, [pc, #436]	@ (8017290 <etharp_query+0x268>)
 80170dc:	4613      	mov	r3, r2
 80170de:	005b      	lsls	r3, r3, #1
 80170e0:	4413      	add	r3, r2
 80170e2:	00db      	lsls	r3, r3, #3
 80170e4:	440b      	add	r3, r1
 80170e6:	3308      	adds	r3, #8
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80170ec:	7c7a      	ldrb	r2, [r7, #17]
 80170ee:	4968      	ldr	r1, [pc, #416]	@ (8017290 <etharp_query+0x268>)
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	440b      	add	r3, r1
 80170fa:	3314      	adds	r3, #20
 80170fc:	781b      	ldrb	r3, [r3, #0]
 80170fe:	2b01      	cmp	r3, #1
 8017100:	d011      	beq.n	8017126 <etharp_query+0xfe>
 8017102:	7c7a      	ldrb	r2, [r7, #17]
 8017104:	4962      	ldr	r1, [pc, #392]	@ (8017290 <etharp_query+0x268>)
 8017106:	4613      	mov	r3, r2
 8017108:	005b      	lsls	r3, r3, #1
 801710a:	4413      	add	r3, r2
 801710c:	00db      	lsls	r3, r3, #3
 801710e:	440b      	add	r3, r1
 8017110:	3314      	adds	r3, #20
 8017112:	781b      	ldrb	r3, [r3, #0]
 8017114:	2b01      	cmp	r3, #1
 8017116:	d806      	bhi.n	8017126 <etharp_query+0xfe>
 8017118:	4b5a      	ldr	r3, [pc, #360]	@ (8017284 <etharp_query+0x25c>)
 801711a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801711e:	495d      	ldr	r1, [pc, #372]	@ (8017294 <etharp_query+0x26c>)
 8017120:	485a      	ldr	r0, [pc, #360]	@ (801728c <etharp_query+0x264>)
 8017122:	f002 fbe7 	bl	80198f4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017126:	6a3b      	ldr	r3, [r7, #32]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d102      	bne.n	8017132 <etharp_query+0x10a>
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d10c      	bne.n	801714c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017132:	68b9      	ldr	r1, [r7, #8]
 8017134:	68f8      	ldr	r0, [r7, #12]
 8017136:	f000 f963 	bl	8017400 <etharp_request>
 801713a:	4603      	mov	r3, r0
 801713c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d102      	bne.n	801714c <etharp_query+0x124>
      return result;
 8017146:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801714a:	e096      	b.n	801727a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d106      	bne.n	8017160 <etharp_query+0x138>
 8017152:	4b4c      	ldr	r3, [pc, #304]	@ (8017284 <etharp_query+0x25c>)
 8017154:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017158:	494f      	ldr	r1, [pc, #316]	@ (8017298 <etharp_query+0x270>)
 801715a:	484c      	ldr	r0, [pc, #304]	@ (801728c <etharp_query+0x264>)
 801715c:	f002 fbca 	bl	80198f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017160:	7c7a      	ldrb	r2, [r7, #17]
 8017162:	494b      	ldr	r1, [pc, #300]	@ (8017290 <etharp_query+0x268>)
 8017164:	4613      	mov	r3, r2
 8017166:	005b      	lsls	r3, r3, #1
 8017168:	4413      	add	r3, r2
 801716a:	00db      	lsls	r3, r3, #3
 801716c:	440b      	add	r3, r1
 801716e:	3314      	adds	r3, #20
 8017170:	781b      	ldrb	r3, [r3, #0]
 8017172:	2b01      	cmp	r3, #1
 8017174:	d917      	bls.n	80171a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017176:	4a49      	ldr	r2, [pc, #292]	@ (801729c <etharp_query+0x274>)
 8017178:	7c7b      	ldrb	r3, [r7, #17]
 801717a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801717c:	7c7a      	ldrb	r2, [r7, #17]
 801717e:	4613      	mov	r3, r2
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	4413      	add	r3, r2
 8017184:	00db      	lsls	r3, r3, #3
 8017186:	3308      	adds	r3, #8
 8017188:	4a41      	ldr	r2, [pc, #260]	@ (8017290 <etharp_query+0x268>)
 801718a:	4413      	add	r3, r2
 801718c:	3304      	adds	r3, #4
 801718e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017192:	9200      	str	r2, [sp, #0]
 8017194:	697a      	ldr	r2, [r7, #20]
 8017196:	6879      	ldr	r1, [r7, #4]
 8017198:	68f8      	ldr	r0, [r7, #12]
 801719a:	f001 fc75 	bl	8018a88 <ethernet_output>
 801719e:	4603      	mov	r3, r0
 80171a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80171a4:	e067      	b.n	8017276 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80171a6:	7c7a      	ldrb	r2, [r7, #17]
 80171a8:	4939      	ldr	r1, [pc, #228]	@ (8017290 <etharp_query+0x268>)
 80171aa:	4613      	mov	r3, r2
 80171ac:	005b      	lsls	r3, r3, #1
 80171ae:	4413      	add	r3, r2
 80171b0:	00db      	lsls	r3, r3, #3
 80171b2:	440b      	add	r3, r1
 80171b4:	3314      	adds	r3, #20
 80171b6:	781b      	ldrb	r3, [r3, #0]
 80171b8:	2b01      	cmp	r3, #1
 80171ba:	d15c      	bne.n	8017276 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80171bc:	2300      	movs	r3, #0
 80171be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80171c4:	e01c      	b.n	8017200 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80171c6:	69fb      	ldr	r3, [r7, #28]
 80171c8:	895a      	ldrh	r2, [r3, #10]
 80171ca:	69fb      	ldr	r3, [r7, #28]
 80171cc:	891b      	ldrh	r3, [r3, #8]
 80171ce:	429a      	cmp	r2, r3
 80171d0:	d10a      	bne.n	80171e8 <etharp_query+0x1c0>
 80171d2:	69fb      	ldr	r3, [r7, #28]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d006      	beq.n	80171e8 <etharp_query+0x1c0>
 80171da:	4b2a      	ldr	r3, [pc, #168]	@ (8017284 <etharp_query+0x25c>)
 80171dc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80171e0:	492f      	ldr	r1, [pc, #188]	@ (80172a0 <etharp_query+0x278>)
 80171e2:	482a      	ldr	r0, [pc, #168]	@ (801728c <etharp_query+0x264>)
 80171e4:	f002 fb86 	bl	80198f4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80171e8:	69fb      	ldr	r3, [r7, #28]
 80171ea:	7b1b      	ldrb	r3, [r3, #12]
 80171ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d002      	beq.n	80171fa <etharp_query+0x1d2>
        copy_needed = 1;
 80171f4:	2301      	movs	r3, #1
 80171f6:	61bb      	str	r3, [r7, #24]
        break;
 80171f8:	e005      	b.n	8017206 <etharp_query+0x1de>
      }
      p = p->next;
 80171fa:	69fb      	ldr	r3, [r7, #28]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1df      	bne.n	80171c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017206:	69bb      	ldr	r3, [r7, #24]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d007      	beq.n	801721c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801720c:	687a      	ldr	r2, [r7, #4]
 801720e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8017212:	200e      	movs	r0, #14
 8017214:	f7f8 fc8c 	bl	800fb30 <pbuf_clone>
 8017218:	61f8      	str	r0, [r7, #28]
 801721a:	e004      	b.n	8017226 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017220:	69f8      	ldr	r0, [r7, #28]
 8017222:	f7f8 fac3 	bl	800f7ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d021      	beq.n	8017270 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801722c:	7c7a      	ldrb	r2, [r7, #17]
 801722e:	4918      	ldr	r1, [pc, #96]	@ (8017290 <etharp_query+0x268>)
 8017230:	4613      	mov	r3, r2
 8017232:	005b      	lsls	r3, r3, #1
 8017234:	4413      	add	r3, r2
 8017236:	00db      	lsls	r3, r3, #3
 8017238:	440b      	add	r3, r1
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d00a      	beq.n	8017256 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017240:	7c7a      	ldrb	r2, [r7, #17]
 8017242:	4913      	ldr	r1, [pc, #76]	@ (8017290 <etharp_query+0x268>)
 8017244:	4613      	mov	r3, r2
 8017246:	005b      	lsls	r3, r3, #1
 8017248:	4413      	add	r3, r2
 801724a:	00db      	lsls	r3, r3, #3
 801724c:	440b      	add	r3, r1
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	4618      	mov	r0, r3
 8017252:	f7f8 fa05 	bl	800f660 <pbuf_free>
      }
      arp_table[i].q = p;
 8017256:	7c7a      	ldrb	r2, [r7, #17]
 8017258:	490d      	ldr	r1, [pc, #52]	@ (8017290 <etharp_query+0x268>)
 801725a:	4613      	mov	r3, r2
 801725c:	005b      	lsls	r3, r3, #1
 801725e:	4413      	add	r3, r2
 8017260:	00db      	lsls	r3, r3, #3
 8017262:	440b      	add	r3, r1
 8017264:	69fa      	ldr	r2, [r7, #28]
 8017266:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017268:	2300      	movs	r3, #0
 801726a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801726e:	e002      	b.n	8017276 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017270:	23ff      	movs	r3, #255	@ 0xff
 8017272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017276:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801727a:	4618      	mov	r0, r3
 801727c:	3728      	adds	r7, #40	@ 0x28
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
 8017282:	bf00      	nop
 8017284:	0801ee70 	.word	0x0801ee70
 8017288:	0801f01c 	.word	0x0801f01c
 801728c:	0801eee8 	.word	0x0801eee8
 8017290:	20011d78 	.word	0x20011d78
 8017294:	0801f02c 	.word	0x0801f02c
 8017298:	0801f010 	.word	0x0801f010
 801729c:	20011e68 	.word	0x20011e68
 80172a0:	0801f054 	.word	0x0801f054

080172a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b08a      	sub	sp, #40	@ 0x28
 80172a8:	af02      	add	r7, sp, #8
 80172aa:	60f8      	str	r0, [r7, #12]
 80172ac:	60b9      	str	r1, [r7, #8]
 80172ae:	607a      	str	r2, [r7, #4]
 80172b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80172b2:	2300      	movs	r3, #0
 80172b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d106      	bne.n	80172ca <etharp_raw+0x26>
 80172bc:	4b3a      	ldr	r3, [pc, #232]	@ (80173a8 <etharp_raw+0x104>)
 80172be:	f240 4257 	movw	r2, #1111	@ 0x457
 80172c2:	493a      	ldr	r1, [pc, #232]	@ (80173ac <etharp_raw+0x108>)
 80172c4:	483a      	ldr	r0, [pc, #232]	@ (80173b0 <etharp_raw+0x10c>)
 80172c6:	f002 fb15 	bl	80198f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80172ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80172ce:	211c      	movs	r1, #28
 80172d0:	200e      	movs	r0, #14
 80172d2:	f7f7 fee1 	bl	800f098 <pbuf_alloc>
 80172d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d102      	bne.n	80172e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80172de:	f04f 33ff 	mov.w	r3, #4294967295
 80172e2:	e05d      	b.n	80173a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80172e4:	69bb      	ldr	r3, [r7, #24]
 80172e6:	895b      	ldrh	r3, [r3, #10]
 80172e8:	2b1b      	cmp	r3, #27
 80172ea:	d806      	bhi.n	80172fa <etharp_raw+0x56>
 80172ec:	4b2e      	ldr	r3, [pc, #184]	@ (80173a8 <etharp_raw+0x104>)
 80172ee:	f240 4262 	movw	r2, #1122	@ 0x462
 80172f2:	4930      	ldr	r1, [pc, #192]	@ (80173b4 <etharp_raw+0x110>)
 80172f4:	482e      	ldr	r0, [pc, #184]	@ (80173b0 <etharp_raw+0x10c>)
 80172f6:	f002 fafd 	bl	80198f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	685b      	ldr	r3, [r3, #4]
 80172fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017300:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017302:	4618      	mov	r0, r3
 8017304:	f7f6 fe00 	bl	800df08 <lwip_htons>
 8017308:	4603      	mov	r3, r0
 801730a:	461a      	mov	r2, r3
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017316:	2b06      	cmp	r3, #6
 8017318:	d006      	beq.n	8017328 <etharp_raw+0x84>
 801731a:	4b23      	ldr	r3, [pc, #140]	@ (80173a8 <etharp_raw+0x104>)
 801731c:	f240 4269 	movw	r2, #1129	@ 0x469
 8017320:	4925      	ldr	r1, [pc, #148]	@ (80173b8 <etharp_raw+0x114>)
 8017322:	4823      	ldr	r0, [pc, #140]	@ (80173b0 <etharp_raw+0x10c>)
 8017324:	f002 fae6 	bl	80198f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017328:	697b      	ldr	r3, [r7, #20]
 801732a:	3308      	adds	r3, #8
 801732c:	2206      	movs	r2, #6
 801732e:	6839      	ldr	r1, [r7, #0]
 8017330:	4618      	mov	r0, r3
 8017332:	f002 fd5e 	bl	8019df2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	3312      	adds	r3, #18
 801733a:	2206      	movs	r2, #6
 801733c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801733e:	4618      	mov	r0, r3
 8017340:	f002 fd57 	bl	8019df2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	330e      	adds	r3, #14
 8017348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801734a:	6812      	ldr	r2, [r2, #0]
 801734c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	3318      	adds	r3, #24
 8017352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017354:	6812      	ldr	r2, [r2, #0]
 8017356:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017358:	697b      	ldr	r3, [r7, #20]
 801735a:	2200      	movs	r2, #0
 801735c:	701a      	strb	r2, [r3, #0]
 801735e:	2200      	movs	r2, #0
 8017360:	f042 0201 	orr.w	r2, r2, #1
 8017364:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	2200      	movs	r2, #0
 801736a:	f042 0208 	orr.w	r2, r2, #8
 801736e:	709a      	strb	r2, [r3, #2]
 8017370:	2200      	movs	r2, #0
 8017372:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	2206      	movs	r2, #6
 8017378:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	2204      	movs	r2, #4
 801737e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017380:	f640 0306 	movw	r3, #2054	@ 0x806
 8017384:	9300      	str	r3, [sp, #0]
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	68ba      	ldr	r2, [r7, #8]
 801738a:	69b9      	ldr	r1, [r7, #24]
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f001 fb7b 	bl	8018a88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017392:	69b8      	ldr	r0, [r7, #24]
 8017394:	f7f8 f964 	bl	800f660 <pbuf_free>
  p = NULL;
 8017398:	2300      	movs	r3, #0
 801739a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801739c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80173a0:	4618      	mov	r0, r3
 80173a2:	3720      	adds	r7, #32
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}
 80173a8:	0801ee70 	.word	0x0801ee70
 80173ac:	0801efc0 	.word	0x0801efc0
 80173b0:	0801eee8 	.word	0x0801eee8
 80173b4:	0801f070 	.word	0x0801f070
 80173b8:	0801f0a4 	.word	0x0801f0a4

080173bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b088      	sub	sp, #32
 80173c0:	af04      	add	r7, sp, #16
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80173d8:	2201      	movs	r2, #1
 80173da:	9203      	str	r2, [sp, #12]
 80173dc:	68ba      	ldr	r2, [r7, #8]
 80173de:	9202      	str	r2, [sp, #8]
 80173e0:	4a06      	ldr	r2, [pc, #24]	@ (80173fc <etharp_request_dst+0x40>)
 80173e2:	9201      	str	r2, [sp, #4]
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	4603      	mov	r3, r0
 80173e8:	687a      	ldr	r2, [r7, #4]
 80173ea:	68f8      	ldr	r0, [r7, #12]
 80173ec:	f7ff ff5a 	bl	80172a4 <etharp_raw>
 80173f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3710      	adds	r7, #16
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	0801f66c 	.word	0x0801f66c

08017400 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b082      	sub	sp, #8
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801740a:	4a05      	ldr	r2, [pc, #20]	@ (8017420 <etharp_request+0x20>)
 801740c:	6839      	ldr	r1, [r7, #0]
 801740e:	6878      	ldr	r0, [r7, #4]
 8017410:	f7ff ffd4 	bl	80173bc <etharp_request_dst>
 8017414:	4603      	mov	r3, r0
}
 8017416:	4618      	mov	r0, r3
 8017418:	3708      	adds	r7, #8
 801741a:	46bd      	mov	sp, r7
 801741c:	bd80      	pop	{r7, pc}
 801741e:	bf00      	nop
 8017420:	0801f664 	.word	0x0801f664

08017424 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b08e      	sub	sp, #56	@ 0x38
 8017428:	af04      	add	r7, sp, #16
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801742e:	4b79      	ldr	r3, [pc, #484]	@ (8017614 <icmp_input+0x1f0>)
 8017430:	689b      	ldr	r3, [r3, #8]
 8017432:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	f003 030f 	and.w	r3, r3, #15
 801743c:	b2db      	uxtb	r3, r3
 801743e:	009b      	lsls	r3, r3, #2
 8017440:	b2db      	uxtb	r3, r3
 8017442:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017444:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017446:	2b13      	cmp	r3, #19
 8017448:	f240 80cd 	bls.w	80175e6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	895b      	ldrh	r3, [r3, #10]
 8017450:	2b03      	cmp	r3, #3
 8017452:	f240 80ca 	bls.w	80175ea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	685b      	ldr	r3, [r3, #4]
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017460:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017464:	2b00      	cmp	r3, #0
 8017466:	f000 80b7 	beq.w	80175d8 <icmp_input+0x1b4>
 801746a:	2b08      	cmp	r3, #8
 801746c:	f040 80b7 	bne.w	80175de <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017470:	4b69      	ldr	r3, [pc, #420]	@ (8017618 <icmp_input+0x1f4>)
 8017472:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017474:	4b67      	ldr	r3, [pc, #412]	@ (8017614 <icmp_input+0x1f0>)
 8017476:	695b      	ldr	r3, [r3, #20]
 8017478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801747c:	2be0      	cmp	r3, #224	@ 0xe0
 801747e:	f000 80bb 	beq.w	80175f8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017482:	4b64      	ldr	r3, [pc, #400]	@ (8017614 <icmp_input+0x1f0>)
 8017484:	695b      	ldr	r3, [r3, #20]
 8017486:	4a63      	ldr	r2, [pc, #396]	@ (8017614 <icmp_input+0x1f0>)
 8017488:	6812      	ldr	r2, [r2, #0]
 801748a:	4611      	mov	r1, r2
 801748c:	4618      	mov	r0, r3
 801748e:	f000 fbed 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8017492:	4603      	mov	r3, r0
 8017494:	2b00      	cmp	r3, #0
 8017496:	f040 80b1 	bne.w	80175fc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	891b      	ldrh	r3, [r3, #8]
 801749e:	2b07      	cmp	r3, #7
 80174a0:	f240 80a5 	bls.w	80175ee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80174a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174a6:	330e      	adds	r3, #14
 80174a8:	4619      	mov	r1, r3
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f7f8 f842 	bl	800f534 <pbuf_add_header>
 80174b0:	4603      	mov	r3, r0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d04b      	beq.n	801754e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	891a      	ldrh	r2, [r3, #8]
 80174ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174bc:	4413      	add	r3, r2
 80174be:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	891b      	ldrh	r3, [r3, #8]
 80174c4:	8b7a      	ldrh	r2, [r7, #26]
 80174c6:	429a      	cmp	r2, r3
 80174c8:	f0c0 809a 	bcc.w	8017600 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80174cc:	8b7b      	ldrh	r3, [r7, #26]
 80174ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80174d2:	4619      	mov	r1, r3
 80174d4:	200e      	movs	r0, #14
 80174d6:	f7f7 fddf 	bl	800f098 <pbuf_alloc>
 80174da:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	f000 8090 	beq.w	8017604 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80174e4:	697b      	ldr	r3, [r7, #20]
 80174e6:	895b      	ldrh	r3, [r3, #10]
 80174e8:	461a      	mov	r2, r3
 80174ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174ec:	3308      	adds	r3, #8
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d203      	bcs.n	80174fa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80174f2:	6978      	ldr	r0, [r7, #20]
 80174f4:	f7f8 f8b4 	bl	800f660 <pbuf_free>
          goto icmperr;
 80174f8:	e085      	b.n	8017606 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80174fa:	697b      	ldr	r3, [r7, #20]
 80174fc:	685b      	ldr	r3, [r3, #4]
 80174fe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017500:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017502:	4618      	mov	r0, r3
 8017504:	f002 fc75 	bl	8019df2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017508:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801750a:	4619      	mov	r1, r3
 801750c:	6978      	ldr	r0, [r7, #20]
 801750e:	f7f8 f821 	bl	800f554 <pbuf_remove_header>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	d009      	beq.n	801752c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017518:	4b40      	ldr	r3, [pc, #256]	@ (801761c <icmp_input+0x1f8>)
 801751a:	22b6      	movs	r2, #182	@ 0xb6
 801751c:	4940      	ldr	r1, [pc, #256]	@ (8017620 <icmp_input+0x1fc>)
 801751e:	4841      	ldr	r0, [pc, #260]	@ (8017624 <icmp_input+0x200>)
 8017520:	f002 f9e8 	bl	80198f4 <iprintf>
          pbuf_free(r);
 8017524:	6978      	ldr	r0, [r7, #20]
 8017526:	f7f8 f89b 	bl	800f660 <pbuf_free>
          goto icmperr;
 801752a:	e06c      	b.n	8017606 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801752c:	6879      	ldr	r1, [r7, #4]
 801752e:	6978      	ldr	r0, [r7, #20]
 8017530:	f7f8 f9ba 	bl	800f8a8 <pbuf_copy>
 8017534:	4603      	mov	r3, r0
 8017536:	2b00      	cmp	r3, #0
 8017538:	d003      	beq.n	8017542 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801753a:	6978      	ldr	r0, [r7, #20]
 801753c:	f7f8 f890 	bl	800f660 <pbuf_free>
          goto icmperr;
 8017540:	e061      	b.n	8017606 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f7f8 f88c 	bl	800f660 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017548:	697b      	ldr	r3, [r7, #20]
 801754a:	607b      	str	r3, [r7, #4]
 801754c:	e00f      	b.n	801756e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801754e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017550:	330e      	adds	r3, #14
 8017552:	4619      	mov	r1, r3
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f7f7 fffd 	bl	800f554 <pbuf_remove_header>
 801755a:	4603      	mov	r3, r0
 801755c:	2b00      	cmp	r3, #0
 801755e:	d006      	beq.n	801756e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017560:	4b2e      	ldr	r3, [pc, #184]	@ (801761c <icmp_input+0x1f8>)
 8017562:	22c7      	movs	r2, #199	@ 0xc7
 8017564:	4930      	ldr	r1, [pc, #192]	@ (8017628 <icmp_input+0x204>)
 8017566:	482f      	ldr	r0, [pc, #188]	@ (8017624 <icmp_input+0x200>)
 8017568:	f002 f9c4 	bl	80198f4 <iprintf>
          goto icmperr;
 801756c:	e04b      	b.n	8017606 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017574:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017576:	4619      	mov	r1, r3
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f7f7 ffdb 	bl	800f534 <pbuf_add_header>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	d12b      	bne.n	80175dc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	685b      	ldr	r3, [r3, #4]
 8017588:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	681a      	ldr	r2, [r3, #0]
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017592:	4b20      	ldr	r3, [pc, #128]	@ (8017614 <icmp_input+0x1f0>)
 8017594:	691a      	ldr	r2, [r3, #16]
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	2200      	movs	r2, #0
 801759e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	2200      	movs	r2, #0
 80175a4:	709a      	strb	r2, [r3, #2]
 80175a6:	2200      	movs	r2, #0
 80175a8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	22ff      	movs	r2, #255	@ 0xff
 80175ae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	2200      	movs	r2, #0
 80175b4:	729a      	strb	r2, [r3, #10]
 80175b6:	2200      	movs	r2, #0
 80175b8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	9302      	str	r3, [sp, #8]
 80175be:	2301      	movs	r3, #1
 80175c0:	9301      	str	r3, [sp, #4]
 80175c2:	2300      	movs	r3, #0
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	23ff      	movs	r3, #255	@ 0xff
 80175c8:	2200      	movs	r2, #0
 80175ca:	69f9      	ldr	r1, [r7, #28]
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f000 fa75 	bl	8017abc <ip4_output_if>
 80175d2:	4603      	mov	r3, r0
 80175d4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80175d6:	e001      	b.n	80175dc <icmp_input+0x1b8>
      break;
 80175d8:	bf00      	nop
 80175da:	e000      	b.n	80175de <icmp_input+0x1ba>
      break;
 80175dc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7f8 f83e 	bl	800f660 <pbuf_free>
  return;
 80175e4:	e013      	b.n	801760e <icmp_input+0x1ea>
    goto lenerr;
 80175e6:	bf00      	nop
 80175e8:	e002      	b.n	80175f0 <icmp_input+0x1cc>
    goto lenerr;
 80175ea:	bf00      	nop
 80175ec:	e000      	b.n	80175f0 <icmp_input+0x1cc>
        goto lenerr;
 80175ee:	bf00      	nop
lenerr:
  pbuf_free(p);
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7f8 f835 	bl	800f660 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80175f6:	e00a      	b.n	801760e <icmp_input+0x1ea>
        goto icmperr;
 80175f8:	bf00      	nop
 80175fa:	e004      	b.n	8017606 <icmp_input+0x1e2>
        goto icmperr;
 80175fc:	bf00      	nop
 80175fe:	e002      	b.n	8017606 <icmp_input+0x1e2>
          goto icmperr;
 8017600:	bf00      	nop
 8017602:	e000      	b.n	8017606 <icmp_input+0x1e2>
          goto icmperr;
 8017604:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7f8 f82a 	bl	800f660 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801760c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801760e:	3728      	adds	r7, #40	@ 0x28
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}
 8017614:	2000c404 	.word	0x2000c404
 8017618:	2000c418 	.word	0x2000c418
 801761c:	0801f0e8 	.word	0x0801f0e8
 8017620:	0801f120 	.word	0x0801f120
 8017624:	0801f158 	.word	0x0801f158
 8017628:	0801f180 	.word	0x0801f180

0801762c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	460b      	mov	r3, r1
 8017636:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017638:	78fb      	ldrb	r3, [r7, #3]
 801763a:	461a      	mov	r2, r3
 801763c:	2103      	movs	r1, #3
 801763e:	6878      	ldr	r0, [r7, #4]
 8017640:	f000 f814 	bl	801766c <icmp_send_response>
}
 8017644:	bf00      	nop
 8017646:	3708      	adds	r7, #8
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b082      	sub	sp, #8
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
 8017654:	460b      	mov	r3, r1
 8017656:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017658:	78fb      	ldrb	r3, [r7, #3]
 801765a:	461a      	mov	r2, r3
 801765c:	210b      	movs	r1, #11
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f000 f804 	bl	801766c <icmp_send_response>
}
 8017664:	bf00      	nop
 8017666:	3708      	adds	r7, #8
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08c      	sub	sp, #48	@ 0x30
 8017670:	af04      	add	r7, sp, #16
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	460b      	mov	r3, r1
 8017676:	70fb      	strb	r3, [r7, #3]
 8017678:	4613      	mov	r3, r2
 801767a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801767c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017680:	2124      	movs	r1, #36	@ 0x24
 8017682:	2022      	movs	r0, #34	@ 0x22
 8017684:	f7f7 fd08 	bl	800f098 <pbuf_alloc>
 8017688:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801768a:	69fb      	ldr	r3, [r7, #28]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d04c      	beq.n	801772a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	895b      	ldrh	r3, [r3, #10]
 8017694:	2b23      	cmp	r3, #35	@ 0x23
 8017696:	d806      	bhi.n	80176a6 <icmp_send_response+0x3a>
 8017698:	4b26      	ldr	r3, [pc, #152]	@ (8017734 <icmp_send_response+0xc8>)
 801769a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801769e:	4926      	ldr	r1, [pc, #152]	@ (8017738 <icmp_send_response+0xcc>)
 80176a0:	4826      	ldr	r0, [pc, #152]	@ (801773c <icmp_send_response+0xd0>)
 80176a2:	f002 f927 	bl	80198f4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	685b      	ldr	r3, [r3, #4]
 80176b0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80176b2:	697b      	ldr	r3, [r7, #20]
 80176b4:	78fa      	ldrb	r2, [r7, #3]
 80176b6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	78ba      	ldrb	r2, [r7, #2]
 80176bc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80176be:	697b      	ldr	r3, [r7, #20]
 80176c0:	2200      	movs	r2, #0
 80176c2:	711a      	strb	r2, [r3, #4]
 80176c4:	2200      	movs	r2, #0
 80176c6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	2200      	movs	r2, #0
 80176cc:	719a      	strb	r2, [r3, #6]
 80176ce:	2200      	movs	r2, #0
 80176d0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	685b      	ldr	r3, [r3, #4]
 80176d6:	f103 0008 	add.w	r0, r3, #8
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	221c      	movs	r2, #28
 80176e0:	4619      	mov	r1, r3
 80176e2:	f002 fb86 	bl	8019df2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80176e6:	69bb      	ldr	r3, [r7, #24]
 80176e8:	68db      	ldr	r3, [r3, #12]
 80176ea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80176ec:	f107 030c 	add.w	r3, r7, #12
 80176f0:	4618      	mov	r0, r3
 80176f2:	f000 f825 	bl	8017740 <ip4_route>
 80176f6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80176f8:	693b      	ldr	r3, [r7, #16]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d011      	beq.n	8017722 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80176fe:	697b      	ldr	r3, [r7, #20]
 8017700:	2200      	movs	r2, #0
 8017702:	709a      	strb	r2, [r3, #2]
 8017704:	2200      	movs	r2, #0
 8017706:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017708:	f107 020c 	add.w	r2, r7, #12
 801770c:	693b      	ldr	r3, [r7, #16]
 801770e:	9302      	str	r3, [sp, #8]
 8017710:	2301      	movs	r3, #1
 8017712:	9301      	str	r3, [sp, #4]
 8017714:	2300      	movs	r3, #0
 8017716:	9300      	str	r3, [sp, #0]
 8017718:	23ff      	movs	r3, #255	@ 0xff
 801771a:	2100      	movs	r1, #0
 801771c:	69f8      	ldr	r0, [r7, #28]
 801771e:	f000 f9cd 	bl	8017abc <ip4_output_if>
  }
  pbuf_free(q);
 8017722:	69f8      	ldr	r0, [r7, #28]
 8017724:	f7f7 ff9c 	bl	800f660 <pbuf_free>
 8017728:	e000      	b.n	801772c <icmp_send_response+0xc0>
    return;
 801772a:	bf00      	nop
}
 801772c:	3720      	adds	r7, #32
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	0801f0e8 	.word	0x0801f0e8
 8017738:	0801f1b4 	.word	0x0801f1b4
 801773c:	0801f158 	.word	0x0801f158

08017740 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017740:	b480      	push	{r7}
 8017742:	b085      	sub	sp, #20
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017748:	4b33      	ldr	r3, [pc, #204]	@ (8017818 <ip4_route+0xd8>)
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	60fb      	str	r3, [r7, #12]
 801774e:	e036      	b.n	80177be <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017756:	f003 0301 	and.w	r3, r3, #1
 801775a:	b2db      	uxtb	r3, r3
 801775c:	2b00      	cmp	r3, #0
 801775e:	d02b      	beq.n	80177b8 <ip4_route+0x78>
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017766:	089b      	lsrs	r3, r3, #2
 8017768:	f003 0301 	and.w	r3, r3, #1
 801776c:	b2db      	uxtb	r3, r3
 801776e:	2b00      	cmp	r3, #0
 8017770:	d022      	beq.n	80177b8 <ip4_route+0x78>
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	3304      	adds	r3, #4
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d01d      	beq.n	80177b8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681a      	ldr	r2, [r3, #0]
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	3304      	adds	r3, #4
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	405a      	eors	r2, r3
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	3308      	adds	r3, #8
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	4013      	ands	r3, r2
 8017790:	2b00      	cmp	r3, #0
 8017792:	d101      	bne.n	8017798 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	e038      	b.n	801780a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801779e:	f003 0302 	and.w	r3, r3, #2
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d108      	bne.n	80177b8 <ip4_route+0x78>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681a      	ldr	r2, [r3, #0]
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	330c      	adds	r3, #12
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d101      	bne.n	80177b8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	e028      	b.n	801780a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	60fb      	str	r3, [r7, #12]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d1c5      	bne.n	8017750 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80177c4:	4b15      	ldr	r3, [pc, #84]	@ (801781c <ip4_route+0xdc>)
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d01a      	beq.n	8017802 <ip4_route+0xc2>
 80177cc:	4b13      	ldr	r3, [pc, #76]	@ (801781c <ip4_route+0xdc>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80177d4:	f003 0301 	and.w	r3, r3, #1
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d012      	beq.n	8017802 <ip4_route+0xc2>
 80177dc:	4b0f      	ldr	r3, [pc, #60]	@ (801781c <ip4_route+0xdc>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80177e4:	f003 0304 	and.w	r3, r3, #4
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d00a      	beq.n	8017802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177ec:	4b0b      	ldr	r3, [pc, #44]	@ (801781c <ip4_route+0xdc>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	3304      	adds	r3, #4
 80177f2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d004      	beq.n	8017802 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8017800:	d101      	bne.n	8017806 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017802:	2300      	movs	r3, #0
 8017804:	e001      	b.n	801780a <ip4_route+0xca>
  }

  return netif_default;
 8017806:	4b05      	ldr	r3, [pc, #20]	@ (801781c <ip4_route+0xdc>)
 8017808:	681b      	ldr	r3, [r3, #0]
}
 801780a:	4618      	mov	r0, r3
 801780c:	3714      	adds	r7, #20
 801780e:	46bd      	mov	sp, r7
 8017810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017814:	4770      	bx	lr
 8017816:	bf00      	nop
 8017818:	20011d0c 	.word	0x20011d0c
 801781c:	20011d10 	.word	0x20011d10

08017820 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b082      	sub	sp, #8
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801782e:	f003 0301 	and.w	r3, r3, #1
 8017832:	b2db      	uxtb	r3, r3
 8017834:	2b00      	cmp	r3, #0
 8017836:	d016      	beq.n	8017866 <ip4_input_accept+0x46>
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	3304      	adds	r3, #4
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d011      	beq.n	8017866 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017842:	4b0b      	ldr	r3, [pc, #44]	@ (8017870 <ip4_input_accept+0x50>)
 8017844:	695a      	ldr	r2, [r3, #20]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	3304      	adds	r3, #4
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	429a      	cmp	r2, r3
 801784e:	d008      	beq.n	8017862 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017850:	4b07      	ldr	r3, [pc, #28]	@ (8017870 <ip4_input_accept+0x50>)
 8017852:	695b      	ldr	r3, [r3, #20]
 8017854:	6879      	ldr	r1, [r7, #4]
 8017856:	4618      	mov	r0, r3
 8017858:	f000 fa08 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 801785c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017862:	2301      	movs	r3, #1
 8017864:	e000      	b.n	8017868 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017866:	2300      	movs	r3, #0
}
 8017868:	4618      	mov	r0, r3
 801786a:	3708      	adds	r7, #8
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}
 8017870:	2000c404 	.word	0x2000c404

08017874 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b086      	sub	sp, #24
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017884:	697b      	ldr	r3, [r7, #20]
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	091b      	lsrs	r3, r3, #4
 801788a:	b2db      	uxtb	r3, r3
 801788c:	2b04      	cmp	r3, #4
 801788e:	d004      	beq.n	801789a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017890:	6878      	ldr	r0, [r7, #4]
 8017892:	f7f7 fee5 	bl	800f660 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017896:	2300      	movs	r3, #0
 8017898:	e107      	b.n	8017aaa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	f003 030f 	and.w	r3, r3, #15
 80178a2:	b2db      	uxtb	r3, r3
 80178a4:	009b      	lsls	r3, r3, #2
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	885b      	ldrh	r3, [r3, #2]
 80178ae:	b29b      	uxth	r3, r3
 80178b0:	4618      	mov	r0, r3
 80178b2:	f7f6 fb29 	bl	800df08 <lwip_htons>
 80178b6:	4603      	mov	r3, r0
 80178b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	891b      	ldrh	r3, [r3, #8]
 80178be:	89ba      	ldrh	r2, [r7, #12]
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d204      	bcs.n	80178ce <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80178c4:	89bb      	ldrh	r3, [r7, #12]
 80178c6:	4619      	mov	r1, r3
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f7f7 fd43 	bl	800f354 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	895b      	ldrh	r3, [r3, #10]
 80178d2:	89fa      	ldrh	r2, [r7, #14]
 80178d4:	429a      	cmp	r2, r3
 80178d6:	d807      	bhi.n	80178e8 <ip4_input+0x74>
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	891b      	ldrh	r3, [r3, #8]
 80178dc:	89ba      	ldrh	r2, [r7, #12]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d802      	bhi.n	80178e8 <ip4_input+0x74>
 80178e2:	89fb      	ldrh	r3, [r7, #14]
 80178e4:	2b13      	cmp	r3, #19
 80178e6:	d804      	bhi.n	80178f2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f7f7 feb9 	bl	800f660 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80178ee:	2300      	movs	r3, #0
 80178f0:	e0db      	b.n	8017aaa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	691b      	ldr	r3, [r3, #16]
 80178f6:	4a6f      	ldr	r2, [pc, #444]	@ (8017ab4 <ip4_input+0x240>)
 80178f8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	4a6d      	ldr	r2, [pc, #436]	@ (8017ab4 <ip4_input+0x240>)
 8017900:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017902:	4b6c      	ldr	r3, [pc, #432]	@ (8017ab4 <ip4_input+0x240>)
 8017904:	695b      	ldr	r3, [r3, #20]
 8017906:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801790a:	2be0      	cmp	r3, #224	@ 0xe0
 801790c:	d112      	bne.n	8017934 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017914:	f003 0301 	and.w	r3, r3, #1
 8017918:	b2db      	uxtb	r3, r3
 801791a:	2b00      	cmp	r3, #0
 801791c:	d007      	beq.n	801792e <ip4_input+0xba>
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	3304      	adds	r3, #4
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d002      	beq.n	801792e <ip4_input+0xba>
      netif = inp;
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	613b      	str	r3, [r7, #16]
 801792c:	e02a      	b.n	8017984 <ip4_input+0x110>
    } else {
      netif = NULL;
 801792e:	2300      	movs	r3, #0
 8017930:	613b      	str	r3, [r7, #16]
 8017932:	e027      	b.n	8017984 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017934:	6838      	ldr	r0, [r7, #0]
 8017936:	f7ff ff73 	bl	8017820 <ip4_input_accept>
 801793a:	4603      	mov	r3, r0
 801793c:	2b00      	cmp	r3, #0
 801793e:	d002      	beq.n	8017946 <ip4_input+0xd2>
      netif = inp;
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	613b      	str	r3, [r7, #16]
 8017944:	e01e      	b.n	8017984 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017946:	2300      	movs	r3, #0
 8017948:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801794a:	4b5a      	ldr	r3, [pc, #360]	@ (8017ab4 <ip4_input+0x240>)
 801794c:	695b      	ldr	r3, [r3, #20]
 801794e:	b2db      	uxtb	r3, r3
 8017950:	2b7f      	cmp	r3, #127	@ 0x7f
 8017952:	d017      	beq.n	8017984 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017954:	4b58      	ldr	r3, [pc, #352]	@ (8017ab8 <ip4_input+0x244>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	613b      	str	r3, [r7, #16]
 801795a:	e00e      	b.n	801797a <ip4_input+0x106>
          if (netif == inp) {
 801795c:	693a      	ldr	r2, [r7, #16]
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	429a      	cmp	r2, r3
 8017962:	d006      	beq.n	8017972 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017964:	6938      	ldr	r0, [r7, #16]
 8017966:	f7ff ff5b 	bl	8017820 <ip4_input_accept>
 801796a:	4603      	mov	r3, r0
 801796c:	2b00      	cmp	r3, #0
 801796e:	d108      	bne.n	8017982 <ip4_input+0x10e>
 8017970:	e000      	b.n	8017974 <ip4_input+0x100>
            continue;
 8017972:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017974:	693b      	ldr	r3, [r7, #16]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	613b      	str	r3, [r7, #16]
 801797a:	693b      	ldr	r3, [r7, #16]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d1ed      	bne.n	801795c <ip4_input+0xe8>
 8017980:	e000      	b.n	8017984 <ip4_input+0x110>
            break;
 8017982:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017984:	4b4b      	ldr	r3, [pc, #300]	@ (8017ab4 <ip4_input+0x240>)
 8017986:	691b      	ldr	r3, [r3, #16]
 8017988:	6839      	ldr	r1, [r7, #0]
 801798a:	4618      	mov	r0, r3
 801798c:	f000 f96e 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8017990:	4603      	mov	r3, r0
 8017992:	2b00      	cmp	r3, #0
 8017994:	d105      	bne.n	80179a2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017996:	4b47      	ldr	r3, [pc, #284]	@ (8017ab4 <ip4_input+0x240>)
 8017998:	691b      	ldr	r3, [r3, #16]
 801799a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801799e:	2be0      	cmp	r3, #224	@ 0xe0
 80179a0:	d104      	bne.n	80179ac <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7f7 fe5c 	bl	800f660 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80179a8:	2300      	movs	r3, #0
 80179aa:	e07e      	b.n	8017aaa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d104      	bne.n	80179bc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f7f7 fe54 	bl	800f660 <pbuf_free>
    return ERR_OK;
 80179b8:	2300      	movs	r3, #0
 80179ba:	e076      	b.n	8017aaa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	88db      	ldrh	r3, [r3, #6]
 80179c0:	b29b      	uxth	r3, r3
 80179c2:	461a      	mov	r2, r3
 80179c4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80179c8:	4013      	ands	r3, r2
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d00b      	beq.n	80179e6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f000 fc92 	bl	80182f8 <ip4_reass>
 80179d4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d101      	bne.n	80179e0 <ip4_input+0x16c>
      return ERR_OK;
 80179dc:	2300      	movs	r3, #0
 80179de:	e064      	b.n	8017aaa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80179e6:	4a33      	ldr	r2, [pc, #204]	@ (8017ab4 <ip4_input+0x240>)
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80179ec:	4a31      	ldr	r2, [pc, #196]	@ (8017ab4 <ip4_input+0x240>)
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80179f2:	4a30      	ldr	r2, [pc, #192]	@ (8017ab4 <ip4_input+0x240>)
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80179f8:	697b      	ldr	r3, [r7, #20]
 80179fa:	781b      	ldrb	r3, [r3, #0]
 80179fc:	f003 030f 	and.w	r3, r3, #15
 8017a00:	b2db      	uxtb	r3, r3
 8017a02:	009b      	lsls	r3, r3, #2
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	461a      	mov	r2, r3
 8017a08:	4b2a      	ldr	r3, [pc, #168]	@ (8017ab4 <ip4_input+0x240>)
 8017a0a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017a0c:	89fb      	ldrh	r3, [r7, #14]
 8017a0e:	4619      	mov	r1, r3
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f7f7 fd9f 	bl	800f554 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	7a5b      	ldrb	r3, [r3, #9]
 8017a1a:	2b11      	cmp	r3, #17
 8017a1c:	d006      	beq.n	8017a2c <ip4_input+0x1b8>
 8017a1e:	2b11      	cmp	r3, #17
 8017a20:	dc13      	bgt.n	8017a4a <ip4_input+0x1d6>
 8017a22:	2b01      	cmp	r3, #1
 8017a24:	d00c      	beq.n	8017a40 <ip4_input+0x1cc>
 8017a26:	2b06      	cmp	r3, #6
 8017a28:	d005      	beq.n	8017a36 <ip4_input+0x1c2>
 8017a2a:	e00e      	b.n	8017a4a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017a2c:	6839      	ldr	r1, [r7, #0]
 8017a2e:	6878      	ldr	r0, [r7, #4]
 8017a30:	f7fe fb5a 	bl	80160e8 <udp_input>
        break;
 8017a34:	e026      	b.n	8017a84 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017a36:	6839      	ldr	r1, [r7, #0]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7f9 ff19 	bl	8011870 <tcp_input>
        break;
 8017a3e:	e021      	b.n	8017a84 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017a40:	6839      	ldr	r1, [r7, #0]
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f7ff fcee 	bl	8017424 <icmp_input>
        break;
 8017a48:	e01c      	b.n	8017a84 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8017ab4 <ip4_input+0x240>)
 8017a4c:	695b      	ldr	r3, [r3, #20]
 8017a4e:	6939      	ldr	r1, [r7, #16]
 8017a50:	4618      	mov	r0, r3
 8017a52:	f000 f90b 	bl	8017c6c <ip4_addr_isbroadcast_u32>
 8017a56:	4603      	mov	r3, r0
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d10f      	bne.n	8017a7c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a5c:	4b15      	ldr	r3, [pc, #84]	@ (8017ab4 <ip4_input+0x240>)
 8017a5e:	695b      	ldr	r3, [r3, #20]
 8017a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a64:	2be0      	cmp	r3, #224	@ 0xe0
 8017a66:	d009      	beq.n	8017a7c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017a6c:	4619      	mov	r1, r3
 8017a6e:	6878      	ldr	r0, [r7, #4]
 8017a70:	f7f7 fde3 	bl	800f63a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017a74:	2102      	movs	r1, #2
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f7ff fdd8 	bl	801762c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7f7 fdef 	bl	800f660 <pbuf_free>
        break;
 8017a82:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017a84:	4b0b      	ldr	r3, [pc, #44]	@ (8017ab4 <ip4_input+0x240>)
 8017a86:	2200      	movs	r2, #0
 8017a88:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8017ab4 <ip4_input+0x240>)
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017a90:	4b08      	ldr	r3, [pc, #32]	@ (8017ab4 <ip4_input+0x240>)
 8017a92:	2200      	movs	r2, #0
 8017a94:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017a96:	4b07      	ldr	r3, [pc, #28]	@ (8017ab4 <ip4_input+0x240>)
 8017a98:	2200      	movs	r2, #0
 8017a9a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017a9c:	4b05      	ldr	r3, [pc, #20]	@ (8017ab4 <ip4_input+0x240>)
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017aa2:	4b04      	ldr	r3, [pc, #16]	@ (8017ab4 <ip4_input+0x240>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017aa8:	2300      	movs	r3, #0
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	3718      	adds	r7, #24
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}
 8017ab2:	bf00      	nop
 8017ab4:	2000c404 	.word	0x2000c404
 8017ab8:	20011d0c 	.word	0x20011d0c

08017abc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b08a      	sub	sp, #40	@ 0x28
 8017ac0:	af04      	add	r7, sp, #16
 8017ac2:	60f8      	str	r0, [r7, #12]
 8017ac4:	60b9      	str	r1, [r7, #8]
 8017ac6:	607a      	str	r2, [r7, #4]
 8017ac8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d009      	beq.n	8017ae8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017ad4:	68bb      	ldr	r3, [r7, #8]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d003      	beq.n	8017ae2 <ip4_output_if+0x26>
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d102      	bne.n	8017ae8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ae8:	78fa      	ldrb	r2, [r7, #3]
 8017aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aec:	9302      	str	r3, [sp, #8]
 8017aee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017af2:	9301      	str	r3, [sp, #4]
 8017af4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017af8:	9300      	str	r3, [sp, #0]
 8017afa:	4613      	mov	r3, r2
 8017afc:	687a      	ldr	r2, [r7, #4]
 8017afe:	6979      	ldr	r1, [r7, #20]
 8017b00:	68f8      	ldr	r0, [r7, #12]
 8017b02:	f000 f805 	bl	8017b10 <ip4_output_if_src>
 8017b06:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3718      	adds	r7, #24
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}

08017b10 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b088      	sub	sp, #32
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	60b9      	str	r1, [r7, #8]
 8017b1a:	607a      	str	r2, [r7, #4]
 8017b1c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	7b9b      	ldrb	r3, [r3, #14]
 8017b22:	2b01      	cmp	r3, #1
 8017b24:	d006      	beq.n	8017b34 <ip4_output_if_src+0x24>
 8017b26:	4b4b      	ldr	r3, [pc, #300]	@ (8017c54 <ip4_output_if_src+0x144>)
 8017b28:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017b2c:	494a      	ldr	r1, [pc, #296]	@ (8017c58 <ip4_output_if_src+0x148>)
 8017b2e:	484b      	ldr	r0, [pc, #300]	@ (8017c5c <ip4_output_if_src+0x14c>)
 8017b30:	f001 fee0 	bl	80198f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d060      	beq.n	8017bfc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017b3a:	2314      	movs	r3, #20
 8017b3c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017b3e:	2114      	movs	r1, #20
 8017b40:	68f8      	ldr	r0, [r7, #12]
 8017b42:	f7f7 fcf7 	bl	800f534 <pbuf_add_header>
 8017b46:	4603      	mov	r3, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d002      	beq.n	8017b52 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b4c:	f06f 0301 	mvn.w	r3, #1
 8017b50:	e07c      	b.n	8017c4c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	895b      	ldrh	r3, [r3, #10]
 8017b5c:	2b13      	cmp	r3, #19
 8017b5e:	d806      	bhi.n	8017b6e <ip4_output_if_src+0x5e>
 8017b60:	4b3c      	ldr	r3, [pc, #240]	@ (8017c54 <ip4_output_if_src+0x144>)
 8017b62:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017b66:	493e      	ldr	r1, [pc, #248]	@ (8017c60 <ip4_output_if_src+0x150>)
 8017b68:	483c      	ldr	r0, [pc, #240]	@ (8017c5c <ip4_output_if_src+0x14c>)
 8017b6a:	f001 fec3 	bl	80198f4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017b6e:	69fb      	ldr	r3, [r7, #28]
 8017b70:	78fa      	ldrb	r2, [r7, #3]
 8017b72:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017b7a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	681a      	ldr	r2, [r3, #0]
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017b84:	8b7b      	ldrh	r3, [r7, #26]
 8017b86:	089b      	lsrs	r3, r3, #2
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b90:	b2da      	uxtb	r2, r3
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017b96:	69fb      	ldr	r3, [r7, #28]
 8017b98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017b9c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	891b      	ldrh	r3, [r3, #8]
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7f6 f9b0 	bl	800df08 <lwip_htons>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	461a      	mov	r2, r3
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017bb0:	69fb      	ldr	r3, [r7, #28]
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	719a      	strb	r2, [r3, #6]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017bba:	4b2a      	ldr	r3, [pc, #168]	@ (8017c64 <ip4_output_if_src+0x154>)
 8017bbc:	881b      	ldrh	r3, [r3, #0]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f7f6 f9a2 	bl	800df08 <lwip_htons>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017bcc:	4b25      	ldr	r3, [pc, #148]	@ (8017c64 <ip4_output_if_src+0x154>)
 8017bce:	881b      	ldrh	r3, [r3, #0]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	b29a      	uxth	r2, r3
 8017bd4:	4b23      	ldr	r3, [pc, #140]	@ (8017c64 <ip4_output_if_src+0x154>)
 8017bd6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d104      	bne.n	8017be8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017bde:	4b22      	ldr	r3, [pc, #136]	@ (8017c68 <ip4_output_if_src+0x158>)
 8017be0:	681a      	ldr	r2, [r3, #0]
 8017be2:	69fb      	ldr	r3, [r7, #28]
 8017be4:	60da      	str	r2, [r3, #12]
 8017be6:	e003      	b.n	8017bf0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	69fb      	ldr	r3, [r7, #28]
 8017bee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017bf0:	69fb      	ldr	r3, [r7, #28]
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	729a      	strb	r2, [r3, #10]
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	72da      	strb	r2, [r3, #11]
 8017bfa:	e00f      	b.n	8017c1c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	895b      	ldrh	r3, [r3, #10]
 8017c00:	2b13      	cmp	r3, #19
 8017c02:	d802      	bhi.n	8017c0a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017c04:	f06f 0301 	mvn.w	r3, #1
 8017c08:	e020      	b.n	8017c4c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	685b      	ldr	r3, [r3, #4]
 8017c0e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017c10:	69fb      	ldr	r3, [r7, #28]
 8017c12:	691b      	ldr	r3, [r3, #16]
 8017c14:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017c16:	f107 0314 	add.w	r3, r7, #20
 8017c1a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d00c      	beq.n	8017c3e <ip4_output_if_src+0x12e>
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	891a      	ldrh	r2, [r3, #8]
 8017c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d906      	bls.n	8017c3e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017c30:	687a      	ldr	r2, [r7, #4]
 8017c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c34:	68f8      	ldr	r0, [r7, #12]
 8017c36:	f000 fd53 	bl	80186e0 <ip4_frag>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	e006      	b.n	8017c4c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c40:	695b      	ldr	r3, [r3, #20]
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	68f9      	ldr	r1, [r7, #12]
 8017c46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c48:	4798      	blx	r3
 8017c4a:	4603      	mov	r3, r0
}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	3720      	adds	r7, #32
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	0801f1e0 	.word	0x0801f1e0
 8017c58:	0801f214 	.word	0x0801f214
 8017c5c:	0801f220 	.word	0x0801f220
 8017c60:	0801f248 	.word	0x0801f248
 8017c64:	20011e6a 	.word	0x20011e6a
 8017c68:	0801f660 	.word	0x0801f660

08017c6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017c6c:	b480      	push	{r7}
 8017c6e:	b085      	sub	sp, #20
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c80:	d002      	beq.n	8017c88 <ip4_addr_isbroadcast_u32+0x1c>
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d101      	bne.n	8017c8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017c88:	2301      	movs	r3, #1
 8017c8a:	e02a      	b.n	8017ce2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c92:	f003 0302 	and.w	r3, r3, #2
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d101      	bne.n	8017c9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	e021      	b.n	8017ce2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	3304      	adds	r3, #4
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	687a      	ldr	r2, [r7, #4]
 8017ca6:	429a      	cmp	r2, r3
 8017ca8:	d101      	bne.n	8017cae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017caa:	2300      	movs	r3, #0
 8017cac:	e019      	b.n	8017ce2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017cae:	68fa      	ldr	r2, [r7, #12]
 8017cb0:	683b      	ldr	r3, [r7, #0]
 8017cb2:	3304      	adds	r3, #4
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	405a      	eors	r2, r3
 8017cb8:	683b      	ldr	r3, [r7, #0]
 8017cba:	3308      	adds	r3, #8
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	4013      	ands	r3, r2
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10d      	bne.n	8017ce0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	3308      	adds	r3, #8
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	43da      	mvns	r2, r3
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017cd0:	683b      	ldr	r3, [r7, #0]
 8017cd2:	3308      	adds	r3, #8
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	d101      	bne.n	8017ce0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017cdc:	2301      	movs	r3, #1
 8017cde:	e000      	b.n	8017ce2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ce0:	2300      	movs	r3, #0
  }
}
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	3714      	adds	r7, #20
 8017ce6:	46bd      	mov	sp, r7
 8017ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cec:	4770      	bx	lr
	...

08017cf0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017cfa:	4b12      	ldr	r3, [pc, #72]	@ (8017d44 <ip_reass_tmr+0x54>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017d00:	e018      	b.n	8017d34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	7fdb      	ldrb	r3, [r3, #31]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d00b      	beq.n	8017d22 <ip_reass_tmr+0x32>
      r->timer--;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	7fdb      	ldrb	r3, [r3, #31]
 8017d0e:	3b01      	subs	r3, #1
 8017d10:	b2da      	uxtb	r2, r3
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	60fb      	str	r3, [r7, #12]
 8017d20:	e008      	b.n	8017d34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017d2c:	68b9      	ldr	r1, [r7, #8]
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f000 f80a 	bl	8017d48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d1e3      	bne.n	8017d02 <ip_reass_tmr+0x12>
    }
  }
}
 8017d3a:	bf00      	nop
 8017d3c:	bf00      	nop
 8017d3e:	3710      	adds	r7, #16
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	20011e6c 	.word	0x20011e6c

08017d48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b088      	sub	sp, #32
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017d52:	2300      	movs	r3, #0
 8017d54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017d56:	683a      	ldr	r2, [r7, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d105      	bne.n	8017d6a <ip_reass_free_complete_datagram+0x22>
 8017d5e:	4b45      	ldr	r3, [pc, #276]	@ (8017e74 <ip_reass_free_complete_datagram+0x12c>)
 8017d60:	22ab      	movs	r2, #171	@ 0xab
 8017d62:	4945      	ldr	r1, [pc, #276]	@ (8017e78 <ip_reass_free_complete_datagram+0x130>)
 8017d64:	4845      	ldr	r0, [pc, #276]	@ (8017e7c <ip_reass_free_complete_datagram+0x134>)
 8017d66:	f001 fdc5 	bl	80198f4 <iprintf>
  if (prev != NULL) {
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d00a      	beq.n	8017d86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	687a      	ldr	r2, [r7, #4]
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d005      	beq.n	8017d86 <ip_reass_free_complete_datagram+0x3e>
 8017d7a:	4b3e      	ldr	r3, [pc, #248]	@ (8017e74 <ip_reass_free_complete_datagram+0x12c>)
 8017d7c:	22ad      	movs	r2, #173	@ 0xad
 8017d7e:	4940      	ldr	r1, [pc, #256]	@ (8017e80 <ip_reass_free_complete_datagram+0x138>)
 8017d80:	483e      	ldr	r0, [pc, #248]	@ (8017e7c <ip_reass_free_complete_datagram+0x134>)
 8017d82:	f001 fdb7 	bl	80198f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	889b      	ldrh	r3, [r3, #4]
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d12a      	bne.n	8017dee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	685b      	ldr	r3, [r3, #4]
 8017d9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017d9e:	697b      	ldr	r3, [r7, #20]
 8017da0:	681a      	ldr	r2, [r3, #0]
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017da6:	69bb      	ldr	r3, [r7, #24]
 8017da8:	6858      	ldr	r0, [r3, #4]
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	3308      	adds	r3, #8
 8017dae:	2214      	movs	r2, #20
 8017db0:	4619      	mov	r1, r3
 8017db2:	f002 f81e 	bl	8019df2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017db6:	2101      	movs	r1, #1
 8017db8:	69b8      	ldr	r0, [r7, #24]
 8017dba:	f7ff fc47 	bl	801764c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017dbe:	69b8      	ldr	r0, [r7, #24]
 8017dc0:	f7f7 fcdc 	bl	800f77c <pbuf_clen>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017dc8:	8bfa      	ldrh	r2, [r7, #30]
 8017dca:	8a7b      	ldrh	r3, [r7, #18]
 8017dcc:	4413      	add	r3, r2
 8017dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017dd2:	db05      	blt.n	8017de0 <ip_reass_free_complete_datagram+0x98>
 8017dd4:	4b27      	ldr	r3, [pc, #156]	@ (8017e74 <ip_reass_free_complete_datagram+0x12c>)
 8017dd6:	22bc      	movs	r2, #188	@ 0xbc
 8017dd8:	492a      	ldr	r1, [pc, #168]	@ (8017e84 <ip_reass_free_complete_datagram+0x13c>)
 8017dda:	4828      	ldr	r0, [pc, #160]	@ (8017e7c <ip_reass_free_complete_datagram+0x134>)
 8017ddc:	f001 fd8a 	bl	80198f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017de0:	8bfa      	ldrh	r2, [r7, #30]
 8017de2:	8a7b      	ldrh	r3, [r7, #18]
 8017de4:	4413      	add	r3, r2
 8017de6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017de8:	69b8      	ldr	r0, [r7, #24]
 8017dea:	f7f7 fc39 	bl	800f660 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	685b      	ldr	r3, [r3, #4]
 8017df2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017df4:	e01f      	b.n	8017e36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017df6:	69bb      	ldr	r3, [r7, #24]
 8017df8:	685b      	ldr	r3, [r3, #4]
 8017dfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017dfc:	69bb      	ldr	r3, [r7, #24]
 8017dfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017e00:	697b      	ldr	r3, [r7, #20]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017e06:	68f8      	ldr	r0, [r7, #12]
 8017e08:	f7f7 fcb8 	bl	800f77c <pbuf_clen>
 8017e0c:	4603      	mov	r3, r0
 8017e0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017e10:	8bfa      	ldrh	r2, [r7, #30]
 8017e12:	8a7b      	ldrh	r3, [r7, #18]
 8017e14:	4413      	add	r3, r2
 8017e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017e1a:	db05      	blt.n	8017e28 <ip_reass_free_complete_datagram+0xe0>
 8017e1c:	4b15      	ldr	r3, [pc, #84]	@ (8017e74 <ip_reass_free_complete_datagram+0x12c>)
 8017e1e:	22cc      	movs	r2, #204	@ 0xcc
 8017e20:	4918      	ldr	r1, [pc, #96]	@ (8017e84 <ip_reass_free_complete_datagram+0x13c>)
 8017e22:	4816      	ldr	r0, [pc, #88]	@ (8017e7c <ip_reass_free_complete_datagram+0x134>)
 8017e24:	f001 fd66 	bl	80198f4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e28:	8bfa      	ldrh	r2, [r7, #30]
 8017e2a:	8a7b      	ldrh	r3, [r7, #18]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017e30:	68f8      	ldr	r0, [r7, #12]
 8017e32:	f7f7 fc15 	bl	800f660 <pbuf_free>
  while (p != NULL) {
 8017e36:	69bb      	ldr	r3, [r7, #24]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d1dc      	bne.n	8017df6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017e3c:	6839      	ldr	r1, [r7, #0]
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f000 f8c2 	bl	8017fc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017e44:	4b10      	ldr	r3, [pc, #64]	@ (8017e88 <ip_reass_free_complete_datagram+0x140>)
 8017e46:	881b      	ldrh	r3, [r3, #0]
 8017e48:	8bfa      	ldrh	r2, [r7, #30]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d905      	bls.n	8017e5a <ip_reass_free_complete_datagram+0x112>
 8017e4e:	4b09      	ldr	r3, [pc, #36]	@ (8017e74 <ip_reass_free_complete_datagram+0x12c>)
 8017e50:	22d2      	movs	r2, #210	@ 0xd2
 8017e52:	490e      	ldr	r1, [pc, #56]	@ (8017e8c <ip_reass_free_complete_datagram+0x144>)
 8017e54:	4809      	ldr	r0, [pc, #36]	@ (8017e7c <ip_reass_free_complete_datagram+0x134>)
 8017e56:	f001 fd4d 	bl	80198f4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8017e88 <ip_reass_free_complete_datagram+0x140>)
 8017e5c:	881a      	ldrh	r2, [r3, #0]
 8017e5e:	8bfb      	ldrh	r3, [r7, #30]
 8017e60:	1ad3      	subs	r3, r2, r3
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	4b08      	ldr	r3, [pc, #32]	@ (8017e88 <ip_reass_free_complete_datagram+0x140>)
 8017e66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017e68:	8bfb      	ldrh	r3, [r7, #30]
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3720      	adds	r7, #32
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	0801f278 	.word	0x0801f278
 8017e78:	0801f2b4 	.word	0x0801f2b4
 8017e7c:	0801f2c0 	.word	0x0801f2c0
 8017e80:	0801f2e8 	.word	0x0801f2e8
 8017e84:	0801f2fc 	.word	0x0801f2fc
 8017e88:	20011e70 	.word	0x20011e70
 8017e8c:	0801f31c 	.word	0x0801f31c

08017e90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b08a      	sub	sp, #40	@ 0x28
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017eae:	4b28      	ldr	r3, [pc, #160]	@ (8017f50 <ip_reass_remove_oldest_datagram+0xc0>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017eb4:	e030      	b.n	8017f18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eb8:	695a      	ldr	r2, [r3, #20]
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	68db      	ldr	r3, [r3, #12]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d10c      	bne.n	8017edc <ip_reass_remove_oldest_datagram+0x4c>
 8017ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ec4:	699a      	ldr	r2, [r3, #24]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	691b      	ldr	r3, [r3, #16]
 8017eca:	429a      	cmp	r2, r3
 8017ecc:	d106      	bne.n	8017edc <ip_reass_remove_oldest_datagram+0x4c>
 8017ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ed0:	899a      	ldrh	r2, [r3, #12]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	889b      	ldrh	r3, [r3, #4]
 8017ed6:	b29b      	uxth	r3, r3
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d014      	beq.n	8017f06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017ee2:	6a3b      	ldr	r3, [r7, #32]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d104      	bne.n	8017ef2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	61bb      	str	r3, [r7, #24]
 8017ef0:	e009      	b.n	8017f06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ef4:	7fda      	ldrb	r2, [r3, #31]
 8017ef6:	6a3b      	ldr	r3, [r7, #32]
 8017ef8:	7fdb      	ldrb	r3, [r3, #31]
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d803      	bhi.n	8017f06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d001      	beq.n	8017f12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d1cb      	bne.n	8017eb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017f1e:	6a3b      	ldr	r3, [r7, #32]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d008      	beq.n	8017f36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017f24:	69b9      	ldr	r1, [r7, #24]
 8017f26:	6a38      	ldr	r0, [r7, #32]
 8017f28:	f7ff ff0e 	bl	8017d48 <ip_reass_free_complete_datagram>
 8017f2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017f2e:	697a      	ldr	r2, [r7, #20]
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	4413      	add	r3, r2
 8017f34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017f36:	697a      	ldr	r2, [r7, #20]
 8017f38:	683b      	ldr	r3, [r7, #0]
 8017f3a:	429a      	cmp	r2, r3
 8017f3c:	da02      	bge.n	8017f44 <ip_reass_remove_oldest_datagram+0xb4>
 8017f3e:	693b      	ldr	r3, [r7, #16]
 8017f40:	2b01      	cmp	r3, #1
 8017f42:	dcac      	bgt.n	8017e9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017f44:	697b      	ldr	r3, [r7, #20]
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3728      	adds	r7, #40	@ 0x28
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	20011e6c 	.word	0x20011e6c

08017f54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017f54:	b580      	push	{r7, lr}
 8017f56:	b084      	sub	sp, #16
 8017f58:	af00      	add	r7, sp, #0
 8017f5a:	6078      	str	r0, [r7, #4]
 8017f5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f5e:	2004      	movs	r0, #4
 8017f60:	f7f6 fc88 	bl	800e874 <memp_malloc>
 8017f64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d110      	bne.n	8017f8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017f6c:	6839      	ldr	r1, [r7, #0]
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f7ff ff8e 	bl	8017e90 <ip_reass_remove_oldest_datagram>
 8017f74:	4602      	mov	r2, r0
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	dc03      	bgt.n	8017f84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f7c:	2004      	movs	r0, #4
 8017f7e:	f7f6 fc79 	bl	800e874 <memp_malloc>
 8017f82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d101      	bne.n	8017f8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	e016      	b.n	8017fbc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017f8e:	2220      	movs	r2, #32
 8017f90:	2100      	movs	r1, #0
 8017f92:	68f8      	ldr	r0, [r7, #12]
 8017f94:	f001 fe74 	bl	8019c80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	220f      	movs	r2, #15
 8017f9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017f9e:	4b09      	ldr	r3, [pc, #36]	@ (8017fc4 <ip_reass_enqueue_new_datagram+0x70>)
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017fa6:	4a07      	ldr	r2, [pc, #28]	@ (8017fc4 <ip_reass_enqueue_new_datagram+0x70>)
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	3308      	adds	r3, #8
 8017fb0:	2214      	movs	r2, #20
 8017fb2:	6879      	ldr	r1, [r7, #4]
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f001 ff1c 	bl	8019df2 <memcpy>
  return ipr;
 8017fba:	68fb      	ldr	r3, [r7, #12]
}
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3710      	adds	r7, #16
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	20011e6c 	.word	0x20011e6c

08017fc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b082      	sub	sp, #8
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017fd2:	4b10      	ldr	r3, [pc, #64]	@ (8018014 <ip_reass_dequeue_datagram+0x4c>)
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	687a      	ldr	r2, [r7, #4]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d104      	bne.n	8017fe6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	4a0c      	ldr	r2, [pc, #48]	@ (8018014 <ip_reass_dequeue_datagram+0x4c>)
 8017fe2:	6013      	str	r3, [r2, #0]
 8017fe4:	e00d      	b.n	8018002 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017fe6:	683b      	ldr	r3, [r7, #0]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d106      	bne.n	8017ffa <ip_reass_dequeue_datagram+0x32>
 8017fec:	4b0a      	ldr	r3, [pc, #40]	@ (8018018 <ip_reass_dequeue_datagram+0x50>)
 8017fee:	f240 1245 	movw	r2, #325	@ 0x145
 8017ff2:	490a      	ldr	r1, [pc, #40]	@ (801801c <ip_reass_dequeue_datagram+0x54>)
 8017ff4:	480a      	ldr	r0, [pc, #40]	@ (8018020 <ip_reass_dequeue_datagram+0x58>)
 8017ff6:	f001 fc7d 	bl	80198f4 <iprintf>
    prev->next = ipr->next;
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681a      	ldr	r2, [r3, #0]
 8017ffe:	683b      	ldr	r3, [r7, #0]
 8018000:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018002:	6879      	ldr	r1, [r7, #4]
 8018004:	2004      	movs	r0, #4
 8018006:	f7f6 fc87 	bl	800e918 <memp_free>
}
 801800a:	bf00      	nop
 801800c:	3708      	adds	r7, #8
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	20011e6c 	.word	0x20011e6c
 8018018:	0801f278 	.word	0x0801f278
 801801c:	0801f340 	.word	0x0801f340
 8018020:	0801f2c0 	.word	0x0801f2c0

08018024 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b08c      	sub	sp, #48	@ 0x30
 8018028:	af00      	add	r7, sp, #0
 801802a:	60f8      	str	r0, [r7, #12]
 801802c:	60b9      	str	r1, [r7, #8]
 801802e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018030:	2300      	movs	r3, #0
 8018032:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018034:	2301      	movs	r3, #1
 8018036:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801803e:	69fb      	ldr	r3, [r7, #28]
 8018040:	885b      	ldrh	r3, [r3, #2]
 8018042:	b29b      	uxth	r3, r3
 8018044:	4618      	mov	r0, r3
 8018046:	f7f5 ff5f 	bl	800df08 <lwip_htons>
 801804a:	4603      	mov	r3, r0
 801804c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	f003 030f 	and.w	r3, r3, #15
 8018056:	b2db      	uxtb	r3, r3
 8018058:	009b      	lsls	r3, r3, #2
 801805a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801805c:	7e7b      	ldrb	r3, [r7, #25]
 801805e:	b29b      	uxth	r3, r3
 8018060:	8b7a      	ldrh	r2, [r7, #26]
 8018062:	429a      	cmp	r2, r3
 8018064:	d202      	bcs.n	801806c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018066:	f04f 33ff 	mov.w	r3, #4294967295
 801806a:	e135      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801806c:	7e7b      	ldrb	r3, [r7, #25]
 801806e:	b29b      	uxth	r3, r3
 8018070:	8b7a      	ldrh	r2, [r7, #26]
 8018072:	1ad3      	subs	r3, r2, r3
 8018074:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018076:	69fb      	ldr	r3, [r7, #28]
 8018078:	88db      	ldrh	r3, [r3, #6]
 801807a:	b29b      	uxth	r3, r3
 801807c:	4618      	mov	r0, r3
 801807e:	f7f5 ff43 	bl	800df08 <lwip_htons>
 8018082:	4603      	mov	r3, r0
 8018084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018088:	b29b      	uxth	r3, r3
 801808a:	00db      	lsls	r3, r3, #3
 801808c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018096:	2200      	movs	r2, #0
 8018098:	701a      	strb	r2, [r3, #0]
 801809a:	2200      	movs	r2, #0
 801809c:	705a      	strb	r2, [r3, #1]
 801809e:	2200      	movs	r2, #0
 80180a0:	709a      	strb	r2, [r3, #2]
 80180a2:	2200      	movs	r2, #0
 80180a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80180a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a8:	8afa      	ldrh	r2, [r7, #22]
 80180aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80180ac:	8afa      	ldrh	r2, [r7, #22]
 80180ae:	8b7b      	ldrh	r3, [r7, #26]
 80180b0:	4413      	add	r3, r2
 80180b2:	b29a      	uxth	r2, r3
 80180b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80180b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ba:	88db      	ldrh	r3, [r3, #6]
 80180bc:	b29b      	uxth	r3, r3
 80180be:	8afa      	ldrh	r2, [r7, #22]
 80180c0:	429a      	cmp	r2, r3
 80180c2:	d902      	bls.n	80180ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180c4:	f04f 33ff 	mov.w	r3, #4294967295
 80180c8:	e106      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80180d0:	e068      	b.n	80181a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80180d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80180d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180da:	889b      	ldrh	r3, [r3, #4]
 80180dc:	b29a      	uxth	r2, r3
 80180de:	693b      	ldr	r3, [r7, #16]
 80180e0:	889b      	ldrh	r3, [r3, #4]
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d235      	bcs.n	8018154 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80180e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80180ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80180ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d020      	beq.n	8018136 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80180f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180f6:	889b      	ldrh	r3, [r3, #4]
 80180f8:	b29a      	uxth	r2, r3
 80180fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180fc:	88db      	ldrh	r3, [r3, #6]
 80180fe:	b29b      	uxth	r3, r3
 8018100:	429a      	cmp	r2, r3
 8018102:	d307      	bcc.n	8018114 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018106:	88db      	ldrh	r3, [r3, #6]
 8018108:	b29a      	uxth	r2, r3
 801810a:	693b      	ldr	r3, [r7, #16]
 801810c:	889b      	ldrh	r3, [r3, #4]
 801810e:	b29b      	uxth	r3, r3
 8018110:	429a      	cmp	r2, r3
 8018112:	d902      	bls.n	801811a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018114:	f04f 33ff 	mov.w	r3, #4294967295
 8018118:	e0de      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801811a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801811c:	68ba      	ldr	r2, [r7, #8]
 801811e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018122:	88db      	ldrh	r3, [r3, #6]
 8018124:	b29a      	uxth	r2, r3
 8018126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018128:	889b      	ldrh	r3, [r3, #4]
 801812a:	b29b      	uxth	r3, r3
 801812c:	429a      	cmp	r2, r3
 801812e:	d03d      	beq.n	80181ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018130:	2300      	movs	r3, #0
 8018132:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018134:	e03a      	b.n	80181ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018138:	88db      	ldrh	r3, [r3, #6]
 801813a:	b29a      	uxth	r2, r3
 801813c:	693b      	ldr	r3, [r7, #16]
 801813e:	889b      	ldrh	r3, [r3, #4]
 8018140:	b29b      	uxth	r3, r3
 8018142:	429a      	cmp	r2, r3
 8018144:	d902      	bls.n	801814c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018146:	f04f 33ff 	mov.w	r3, #4294967295
 801814a:	e0c5      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	68ba      	ldr	r2, [r7, #8]
 8018150:	605a      	str	r2, [r3, #4]
      break;
 8018152:	e02b      	b.n	80181ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018156:	889b      	ldrh	r3, [r3, #4]
 8018158:	b29a      	uxth	r2, r3
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	889b      	ldrh	r3, [r3, #4]
 801815e:	b29b      	uxth	r3, r3
 8018160:	429a      	cmp	r2, r3
 8018162:	d102      	bne.n	801816a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018164:	f04f 33ff 	mov.w	r3, #4294967295
 8018168:	e0b6      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801816c:	889b      	ldrh	r3, [r3, #4]
 801816e:	b29a      	uxth	r2, r3
 8018170:	693b      	ldr	r3, [r7, #16]
 8018172:	88db      	ldrh	r3, [r3, #6]
 8018174:	b29b      	uxth	r3, r3
 8018176:	429a      	cmp	r2, r3
 8018178:	d202      	bcs.n	8018180 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801817a:	f04f 33ff 	mov.w	r3, #4294967295
 801817e:	e0ab      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018182:	2b00      	cmp	r3, #0
 8018184:	d009      	beq.n	801819a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018188:	88db      	ldrh	r3, [r3, #6]
 801818a:	b29a      	uxth	r2, r3
 801818c:	693b      	ldr	r3, [r7, #16]
 801818e:	889b      	ldrh	r3, [r3, #4]
 8018190:	b29b      	uxth	r3, r3
 8018192:	429a      	cmp	r2, r3
 8018194:	d001      	beq.n	801819a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018196:	2300      	movs	r3, #0
 8018198:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80181a0:	693b      	ldr	r3, [r7, #16]
 80181a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80181a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d193      	bne.n	80180d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80181aa:	e000      	b.n	80181ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80181ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80181ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d12d      	bne.n	8018210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80181b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d01c      	beq.n	80181f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80181ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181bc:	88db      	ldrh	r3, [r3, #6]
 80181be:	b29a      	uxth	r2, r3
 80181c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181c2:	889b      	ldrh	r3, [r3, #4]
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d906      	bls.n	80181d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80181ca:	4b45      	ldr	r3, [pc, #276]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181cc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80181d0:	4944      	ldr	r1, [pc, #272]	@ (80182e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80181d2:	4845      	ldr	r0, [pc, #276]	@ (80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181d4:	f001 fb8e 	bl	80198f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80181d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181da:	68ba      	ldr	r2, [r7, #8]
 80181dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80181de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181e0:	88db      	ldrh	r3, [r3, #6]
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181e6:	889b      	ldrh	r3, [r3, #4]
 80181e8:	b29b      	uxth	r3, r3
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d010      	beq.n	8018210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80181ee:	2300      	movs	r3, #0
 80181f0:	623b      	str	r3, [r7, #32]
 80181f2:	e00d      	b.n	8018210 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80181f4:	68fb      	ldr	r3, [r7, #12]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d006      	beq.n	801820a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80181fc:	4b38      	ldr	r3, [pc, #224]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181fe:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8018202:	493a      	ldr	r1, [pc, #232]	@ (80182ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018204:	4838      	ldr	r0, [pc, #224]	@ (80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018206:	f001 fb75 	bl	80198f4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	68ba      	ldr	r2, [r7, #8]
 801820e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d105      	bne.n	8018222 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	7f9b      	ldrb	r3, [r3, #30]
 801821a:	f003 0301 	and.w	r3, r3, #1
 801821e:	2b00      	cmp	r3, #0
 8018220:	d059      	beq.n	80182d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018222:	6a3b      	ldr	r3, [r7, #32]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d04f      	beq.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d006      	beq.n	801823e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	685b      	ldr	r3, [r3, #4]
 8018236:	889b      	ldrh	r3, [r3, #4]
 8018238:	b29b      	uxth	r3, r3
 801823a:	2b00      	cmp	r3, #0
 801823c:	d002      	beq.n	8018244 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801823e:	2300      	movs	r3, #0
 8018240:	623b      	str	r3, [r7, #32]
 8018242:	e041      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018246:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801824e:	e012      	b.n	8018276 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018252:	685b      	ldr	r3, [r3, #4]
 8018254:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018258:	88db      	ldrh	r3, [r3, #6]
 801825a:	b29a      	uxth	r2, r3
 801825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801825e:	889b      	ldrh	r3, [r3, #4]
 8018260:	b29b      	uxth	r3, r3
 8018262:	429a      	cmp	r2, r3
 8018264:	d002      	beq.n	801826c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018266:	2300      	movs	r3, #0
 8018268:	623b      	str	r3, [r7, #32]
            break;
 801826a:	e007      	b.n	801827c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801826c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801826e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018278:	2b00      	cmp	r3, #0
 801827a:	d1e9      	bne.n	8018250 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801827c:	6a3b      	ldr	r3, [r7, #32]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d022      	beq.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	685b      	ldr	r3, [r3, #4]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d106      	bne.n	8018298 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801828a:	4b15      	ldr	r3, [pc, #84]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801828c:	f240 12df 	movw	r2, #479	@ 0x1df
 8018290:	4917      	ldr	r1, [pc, #92]	@ (80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018292:	4815      	ldr	r0, [pc, #84]	@ (80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018294:	f001 fb2e 	bl	80198f4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	685b      	ldr	r3, [r3, #4]
 801829c:	685b      	ldr	r3, [r3, #4]
 801829e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80182a0:	429a      	cmp	r2, r3
 80182a2:	d106      	bne.n	80182b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80182a4:	4b0e      	ldr	r3, [pc, #56]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80182aa:	4911      	ldr	r1, [pc, #68]	@ (80182f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80182ac:	480e      	ldr	r0, [pc, #56]	@ (80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182ae:	f001 fb21 	bl	80198f4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80182b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d006      	beq.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80182ba:	4b09      	ldr	r3, [pc, #36]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182bc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80182c0:	490c      	ldr	r1, [pc, #48]	@ (80182f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80182c2:	4809      	ldr	r0, [pc, #36]	@ (80182e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182c4:	f001 fb16 	bl	80198f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80182c8:	6a3b      	ldr	r3, [r7, #32]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	bf14      	ite	ne
 80182ce:	2301      	movne	r3, #1
 80182d0:	2300      	moveq	r3, #0
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	e000      	b.n	80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80182d6:	2300      	movs	r3, #0
}
 80182d8:	4618      	mov	r0, r3
 80182da:	3730      	adds	r7, #48	@ 0x30
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}
 80182e0:	0801f278 	.word	0x0801f278
 80182e4:	0801f35c 	.word	0x0801f35c
 80182e8:	0801f2c0 	.word	0x0801f2c0
 80182ec:	0801f37c 	.word	0x0801f37c
 80182f0:	0801f3b4 	.word	0x0801f3b4
 80182f4:	0801f3c4 	.word	0x0801f3c4

080182f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80182f8:	b580      	push	{r7, lr}
 80182fa:	b08e      	sub	sp, #56	@ 0x38
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	685b      	ldr	r3, [r3, #4]
 8018304:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018308:	781b      	ldrb	r3, [r3, #0]
 801830a:	f003 030f 	and.w	r3, r3, #15
 801830e:	b2db      	uxtb	r3, r3
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	b2db      	uxtb	r3, r3
 8018314:	2b14      	cmp	r3, #20
 8018316:	f040 8171 	bne.w	80185fc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801831a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801831c:	88db      	ldrh	r3, [r3, #6]
 801831e:	b29b      	uxth	r3, r3
 8018320:	4618      	mov	r0, r3
 8018322:	f7f5 fdf1 	bl	800df08 <lwip_htons>
 8018326:	4603      	mov	r3, r0
 8018328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801832c:	b29b      	uxth	r3, r3
 801832e:	00db      	lsls	r3, r3, #3
 8018330:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018334:	885b      	ldrh	r3, [r3, #2]
 8018336:	b29b      	uxth	r3, r3
 8018338:	4618      	mov	r0, r3
 801833a:	f7f5 fde5 	bl	800df08 <lwip_htons>
 801833e:	4603      	mov	r3, r0
 8018340:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	f003 030f 	and.w	r3, r3, #15
 801834a:	b2db      	uxtb	r3, r3
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018352:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018356:	b29b      	uxth	r3, r3
 8018358:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801835a:	429a      	cmp	r2, r3
 801835c:	f0c0 8150 	bcc.w	8018600 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018360:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018364:	b29b      	uxth	r3, r3
 8018366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018368:	1ad3      	subs	r3, r2, r3
 801836a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801836c:	6878      	ldr	r0, [r7, #4]
 801836e:	f7f7 fa05 	bl	800f77c <pbuf_clen>
 8018372:	4603      	mov	r3, r0
 8018374:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018376:	4b8c      	ldr	r3, [pc, #560]	@ (80185a8 <ip4_reass+0x2b0>)
 8018378:	881b      	ldrh	r3, [r3, #0]
 801837a:	461a      	mov	r2, r3
 801837c:	8c3b      	ldrh	r3, [r7, #32]
 801837e:	4413      	add	r3, r2
 8018380:	2b0a      	cmp	r3, #10
 8018382:	dd10      	ble.n	80183a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018384:	8c3b      	ldrh	r3, [r7, #32]
 8018386:	4619      	mov	r1, r3
 8018388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801838a:	f7ff fd81 	bl	8017e90 <ip_reass_remove_oldest_datagram>
 801838e:	4603      	mov	r3, r0
 8018390:	2b00      	cmp	r3, #0
 8018392:	f000 8137 	beq.w	8018604 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018396:	4b84      	ldr	r3, [pc, #528]	@ (80185a8 <ip4_reass+0x2b0>)
 8018398:	881b      	ldrh	r3, [r3, #0]
 801839a:	461a      	mov	r2, r3
 801839c:	8c3b      	ldrh	r3, [r7, #32]
 801839e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80183a0:	2b0a      	cmp	r3, #10
 80183a2:	f300 812f 	bgt.w	8018604 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183a6:	4b81      	ldr	r3, [pc, #516]	@ (80185ac <ip4_reass+0x2b4>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80183ac:	e015      	b.n	80183da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80183ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183b0:	695a      	ldr	r2, [r3, #20]
 80183b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183b4:	68db      	ldr	r3, [r3, #12]
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d10c      	bne.n	80183d4 <ip4_reass+0xdc>
 80183ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183bc:	699a      	ldr	r2, [r3, #24]
 80183be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183c0:	691b      	ldr	r3, [r3, #16]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d106      	bne.n	80183d4 <ip4_reass+0xdc>
 80183c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c8:	899a      	ldrh	r2, [r3, #12]
 80183ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183cc:	889b      	ldrh	r3, [r3, #4]
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	429a      	cmp	r2, r3
 80183d2:	d006      	beq.n	80183e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80183da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d1e6      	bne.n	80183ae <ip4_reass+0xb6>
 80183e0:	e000      	b.n	80183e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80183e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80183e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d109      	bne.n	80183fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80183ea:	8c3b      	ldrh	r3, [r7, #32]
 80183ec:	4619      	mov	r1, r3
 80183ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80183f0:	f7ff fdb0 	bl	8017f54 <ip_reass_enqueue_new_datagram>
 80183f4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80183f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d11c      	bne.n	8018436 <ip4_reass+0x13e>
      goto nullreturn;
 80183fc:	e105      	b.n	801860a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018400:	88db      	ldrh	r3, [r3, #6]
 8018402:	b29b      	uxth	r3, r3
 8018404:	4618      	mov	r0, r3
 8018406:	f7f5 fd7f 	bl	800df08 <lwip_htons>
 801840a:	4603      	mov	r3, r0
 801840c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018410:	2b00      	cmp	r3, #0
 8018412:	d110      	bne.n	8018436 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018416:	89db      	ldrh	r3, [r3, #14]
 8018418:	4618      	mov	r0, r3
 801841a:	f7f5 fd75 	bl	800df08 <lwip_htons>
 801841e:	4603      	mov	r3, r0
 8018420:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018424:	2b00      	cmp	r3, #0
 8018426:	d006      	beq.n	8018436 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801842a:	3308      	adds	r3, #8
 801842c:	2214      	movs	r2, #20
 801842e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018430:	4618      	mov	r0, r3
 8018432:	f001 fcde 	bl	8019df2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018438:	88db      	ldrh	r3, [r3, #6]
 801843a:	b29b      	uxth	r3, r3
 801843c:	f003 0320 	and.w	r3, r3, #32
 8018440:	2b00      	cmp	r3, #0
 8018442:	bf0c      	ite	eq
 8018444:	2301      	moveq	r3, #1
 8018446:	2300      	movne	r3, #0
 8018448:	b2db      	uxtb	r3, r3
 801844a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801844c:	69fb      	ldr	r3, [r7, #28]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d00e      	beq.n	8018470 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018452:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018456:	4413      	add	r3, r2
 8018458:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801845a:	8b7a      	ldrh	r2, [r7, #26]
 801845c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801845e:	429a      	cmp	r2, r3
 8018460:	f0c0 80a0 	bcc.w	80185a4 <ip4_reass+0x2ac>
 8018464:	8b7b      	ldrh	r3, [r7, #26]
 8018466:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801846a:	4293      	cmp	r3, r2
 801846c:	f200 809a 	bhi.w	80185a4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018470:	69fa      	ldr	r2, [r7, #28]
 8018472:	6879      	ldr	r1, [r7, #4]
 8018474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018476:	f7ff fdd5 	bl	8018024 <ip_reass_chain_frag_into_datagram_and_validate>
 801847a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801847c:	697b      	ldr	r3, [r7, #20]
 801847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018482:	f000 809b 	beq.w	80185bc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018486:	4b48      	ldr	r3, [pc, #288]	@ (80185a8 <ip4_reass+0x2b0>)
 8018488:	881a      	ldrh	r2, [r3, #0]
 801848a:	8c3b      	ldrh	r3, [r7, #32]
 801848c:	4413      	add	r3, r2
 801848e:	b29a      	uxth	r2, r3
 8018490:	4b45      	ldr	r3, [pc, #276]	@ (80185a8 <ip4_reass+0x2b0>)
 8018492:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018494:	69fb      	ldr	r3, [r7, #28]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d00d      	beq.n	80184b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801849a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801849c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801849e:	4413      	add	r3, r2
 80184a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80184a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184a4:	8a7a      	ldrh	r2, [r7, #18]
 80184a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80184a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184aa:	7f9b      	ldrb	r3, [r3, #30]
 80184ac:	f043 0301 	orr.w	r3, r3, #1
 80184b0:	b2da      	uxtb	r2, r3
 80184b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d171      	bne.n	80185a0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80184bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184be:	8b9b      	ldrh	r3, [r3, #28]
 80184c0:	3314      	adds	r3, #20
 80184c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80184c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80184ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	685b      	ldr	r3, [r3, #4]
 80184d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80184d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184d8:	3308      	adds	r3, #8
 80184da:	2214      	movs	r2, #20
 80184dc:	4619      	mov	r1, r3
 80184de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80184e0:	f001 fc87 	bl	8019df2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80184e4:	8a3b      	ldrh	r3, [r7, #16]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f5 fd0e 	bl	800df08 <lwip_htons>
 80184ec:	4603      	mov	r3, r0
 80184ee:	461a      	mov	r2, r3
 80184f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80184f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f6:	2200      	movs	r2, #0
 80184f8:	719a      	strb	r2, [r3, #6]
 80184fa:	2200      	movs	r2, #0
 80184fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80184fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018500:	2200      	movs	r2, #0
 8018502:	729a      	strb	r2, [r3, #10]
 8018504:	2200      	movs	r2, #0
 8018506:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801850a:	685b      	ldr	r3, [r3, #4]
 801850c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801850e:	e00d      	b.n	801852c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018512:	685b      	ldr	r3, [r3, #4]
 8018514:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018516:	2114      	movs	r1, #20
 8018518:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801851a:	f7f7 f81b 	bl	800f554 <pbuf_remove_header>
      pbuf_cat(p, r);
 801851e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018520:	6878      	ldr	r0, [r7, #4]
 8018522:	f7f7 f96b 	bl	800f7fc <pbuf_cat>
      r = iprh->next_pbuf;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801852c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801852e:	2b00      	cmp	r3, #0
 8018530:	d1ee      	bne.n	8018510 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018532:	4b1e      	ldr	r3, [pc, #120]	@ (80185ac <ip4_reass+0x2b4>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018538:	429a      	cmp	r2, r3
 801853a:	d102      	bne.n	8018542 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801853c:	2300      	movs	r3, #0
 801853e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018540:	e010      	b.n	8018564 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018542:	4b1a      	ldr	r3, [pc, #104]	@ (80185ac <ip4_reass+0x2b4>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018548:	e007      	b.n	801855a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018550:	429a      	cmp	r2, r3
 8018552:	d006      	beq.n	8018562 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801855a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801855c:	2b00      	cmp	r3, #0
 801855e:	d1f4      	bne.n	801854a <ip4_reass+0x252>
 8018560:	e000      	b.n	8018564 <ip4_reass+0x26c>
          break;
 8018562:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018564:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018568:	f7ff fd2e 	bl	8017fc8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801856c:	6878      	ldr	r0, [r7, #4]
 801856e:	f7f7 f905 	bl	800f77c <pbuf_clen>
 8018572:	4603      	mov	r3, r0
 8018574:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018576:	4b0c      	ldr	r3, [pc, #48]	@ (80185a8 <ip4_reass+0x2b0>)
 8018578:	881b      	ldrh	r3, [r3, #0]
 801857a:	8c3a      	ldrh	r2, [r7, #32]
 801857c:	429a      	cmp	r2, r3
 801857e:	d906      	bls.n	801858e <ip4_reass+0x296>
 8018580:	4b0b      	ldr	r3, [pc, #44]	@ (80185b0 <ip4_reass+0x2b8>)
 8018582:	f240 229b 	movw	r2, #667	@ 0x29b
 8018586:	490b      	ldr	r1, [pc, #44]	@ (80185b4 <ip4_reass+0x2bc>)
 8018588:	480b      	ldr	r0, [pc, #44]	@ (80185b8 <ip4_reass+0x2c0>)
 801858a:	f001 f9b3 	bl	80198f4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801858e:	4b06      	ldr	r3, [pc, #24]	@ (80185a8 <ip4_reass+0x2b0>)
 8018590:	881a      	ldrh	r2, [r3, #0]
 8018592:	8c3b      	ldrh	r3, [r7, #32]
 8018594:	1ad3      	subs	r3, r2, r3
 8018596:	b29a      	uxth	r2, r3
 8018598:	4b03      	ldr	r3, [pc, #12]	@ (80185a8 <ip4_reass+0x2b0>)
 801859a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	e038      	b.n	8018612 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80185a0:	2300      	movs	r3, #0
 80185a2:	e036      	b.n	8018612 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80185a4:	bf00      	nop
 80185a6:	e00a      	b.n	80185be <ip4_reass+0x2c6>
 80185a8:	20011e70 	.word	0x20011e70
 80185ac:	20011e6c 	.word	0x20011e6c
 80185b0:	0801f278 	.word	0x0801f278
 80185b4:	0801f3e8 	.word	0x0801f3e8
 80185b8:	0801f2c0 	.word	0x0801f2c0
    goto nullreturn_ipr;
 80185bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80185be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d106      	bne.n	80185d2 <ip4_reass+0x2da>
 80185c4:	4b15      	ldr	r3, [pc, #84]	@ (801861c <ip4_reass+0x324>)
 80185c6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80185ca:	4915      	ldr	r1, [pc, #84]	@ (8018620 <ip4_reass+0x328>)
 80185cc:	4815      	ldr	r0, [pc, #84]	@ (8018624 <ip4_reass+0x32c>)
 80185ce:	f001 f991 	bl	80198f4 <iprintf>
  if (ipr->p == NULL) {
 80185d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185d4:	685b      	ldr	r3, [r3, #4]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d116      	bne.n	8018608 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80185da:	4b13      	ldr	r3, [pc, #76]	@ (8018628 <ip4_reass+0x330>)
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80185e0:	429a      	cmp	r2, r3
 80185e2:	d006      	beq.n	80185f2 <ip4_reass+0x2fa>
 80185e4:	4b0d      	ldr	r3, [pc, #52]	@ (801861c <ip4_reass+0x324>)
 80185e6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80185ea:	4910      	ldr	r1, [pc, #64]	@ (801862c <ip4_reass+0x334>)
 80185ec:	480d      	ldr	r0, [pc, #52]	@ (8018624 <ip4_reass+0x32c>)
 80185ee:	f001 f981 	bl	80198f4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80185f2:	2100      	movs	r1, #0
 80185f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80185f6:	f7ff fce7 	bl	8017fc8 <ip_reass_dequeue_datagram>
 80185fa:	e006      	b.n	801860a <ip4_reass+0x312>
    goto nullreturn;
 80185fc:	bf00      	nop
 80185fe:	e004      	b.n	801860a <ip4_reass+0x312>
    goto nullreturn;
 8018600:	bf00      	nop
 8018602:	e002      	b.n	801860a <ip4_reass+0x312>
      goto nullreturn;
 8018604:	bf00      	nop
 8018606:	e000      	b.n	801860a <ip4_reass+0x312>
  }

nullreturn:
 8018608:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f7f7 f828 	bl	800f660 <pbuf_free>
  return NULL;
 8018610:	2300      	movs	r3, #0
}
 8018612:	4618      	mov	r0, r3
 8018614:	3738      	adds	r7, #56	@ 0x38
 8018616:	46bd      	mov	sp, r7
 8018618:	bd80      	pop	{r7, pc}
 801861a:	bf00      	nop
 801861c:	0801f278 	.word	0x0801f278
 8018620:	0801f404 	.word	0x0801f404
 8018624:	0801f2c0 	.word	0x0801f2c0
 8018628:	20011e6c 	.word	0x20011e6c
 801862c:	0801f410 	.word	0x0801f410

08018630 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018634:	2005      	movs	r0, #5
 8018636:	f7f6 f91d 	bl	800e874 <memp_malloc>
 801863a:	4603      	mov	r3, r0
}
 801863c:	4618      	mov	r0, r3
 801863e:	bd80      	pop	{r7, pc}

08018640 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d106      	bne.n	801865c <ip_frag_free_pbuf_custom_ref+0x1c>
 801864e:	4b07      	ldr	r3, [pc, #28]	@ (801866c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018650:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018654:	4906      	ldr	r1, [pc, #24]	@ (8018670 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018656:	4807      	ldr	r0, [pc, #28]	@ (8018674 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018658:	f001 f94c 	bl	80198f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801865c:	6879      	ldr	r1, [r7, #4]
 801865e:	2005      	movs	r0, #5
 8018660:	f7f6 f95a 	bl	800e918 <memp_free>
}
 8018664:	bf00      	nop
 8018666:	3708      	adds	r7, #8
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}
 801866c:	0801f278 	.word	0x0801f278
 8018670:	0801f430 	.word	0x0801f430
 8018674:	0801f2c0 	.word	0x0801f2c0

08018678 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d106      	bne.n	8018698 <ipfrag_free_pbuf_custom+0x20>
 801868a:	4b11      	ldr	r3, [pc, #68]	@ (80186d0 <ipfrag_free_pbuf_custom+0x58>)
 801868c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018690:	4910      	ldr	r1, [pc, #64]	@ (80186d4 <ipfrag_free_pbuf_custom+0x5c>)
 8018692:	4811      	ldr	r0, [pc, #68]	@ (80186d8 <ipfrag_free_pbuf_custom+0x60>)
 8018694:	f001 f92e 	bl	80198f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018698:	68fa      	ldr	r2, [r7, #12]
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	429a      	cmp	r2, r3
 801869e:	d006      	beq.n	80186ae <ipfrag_free_pbuf_custom+0x36>
 80186a0:	4b0b      	ldr	r3, [pc, #44]	@ (80186d0 <ipfrag_free_pbuf_custom+0x58>)
 80186a2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80186a6:	490d      	ldr	r1, [pc, #52]	@ (80186dc <ipfrag_free_pbuf_custom+0x64>)
 80186a8:	480b      	ldr	r0, [pc, #44]	@ (80186d8 <ipfrag_free_pbuf_custom+0x60>)
 80186aa:	f001 f923 	bl	80198f4 <iprintf>
  if (pcr->original != NULL) {
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	695b      	ldr	r3, [r3, #20]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d004      	beq.n	80186c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	695b      	ldr	r3, [r3, #20]
 80186ba:	4618      	mov	r0, r3
 80186bc:	f7f6 ffd0 	bl	800f660 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80186c0:	68f8      	ldr	r0, [r7, #12]
 80186c2:	f7ff ffbd 	bl	8018640 <ip_frag_free_pbuf_custom_ref>
}
 80186c6:	bf00      	nop
 80186c8:	3710      	adds	r7, #16
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}
 80186ce:	bf00      	nop
 80186d0:	0801f278 	.word	0x0801f278
 80186d4:	0801f43c 	.word	0x0801f43c
 80186d8:	0801f2c0 	.word	0x0801f2c0
 80186dc:	0801f448 	.word	0x0801f448

080186e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b094      	sub	sp, #80	@ 0x50
 80186e4:	af02      	add	r7, sp, #8
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80186ec:	2300      	movs	r3, #0
 80186ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80186f2:	68bb      	ldr	r3, [r7, #8]
 80186f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80186f6:	3b14      	subs	r3, #20
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	da00      	bge.n	80186fe <ip4_frag+0x1e>
 80186fc:	3307      	adds	r3, #7
 80186fe:	10db      	asrs	r3, r3, #3
 8018700:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018702:	2314      	movs	r3, #20
 8018704:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	685b      	ldr	r3, [r3, #4]
 801870a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801870c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801870e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	f003 030f 	and.w	r3, r3, #15
 8018718:	b2db      	uxtb	r3, r3
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	b2db      	uxtb	r3, r3
 801871e:	2b14      	cmp	r3, #20
 8018720:	d002      	beq.n	8018728 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018722:	f06f 0305 	mvn.w	r3, #5
 8018726:	e110      	b.n	801894a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	895b      	ldrh	r3, [r3, #10]
 801872c:	2b13      	cmp	r3, #19
 801872e:	d809      	bhi.n	8018744 <ip4_frag+0x64>
 8018730:	4b88      	ldr	r3, [pc, #544]	@ (8018954 <ip4_frag+0x274>)
 8018732:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018736:	4988      	ldr	r1, [pc, #544]	@ (8018958 <ip4_frag+0x278>)
 8018738:	4888      	ldr	r0, [pc, #544]	@ (801895c <ip4_frag+0x27c>)
 801873a:	f001 f8db 	bl	80198f4 <iprintf>
 801873e:	f06f 0305 	mvn.w	r3, #5
 8018742:	e102      	b.n	801894a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018746:	88db      	ldrh	r3, [r3, #6]
 8018748:	b29b      	uxth	r3, r3
 801874a:	4618      	mov	r0, r3
 801874c:	f7f5 fbdc 	bl	800df08 <lwip_htons>
 8018750:	4603      	mov	r3, r0
 8018752:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018756:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801875a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801875e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018764:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	891b      	ldrh	r3, [r3, #8]
 801876a:	3b14      	subs	r3, #20
 801876c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018770:	e0e1      	b.n	8018936 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018772:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018774:	00db      	lsls	r3, r3, #3
 8018776:	b29b      	uxth	r3, r3
 8018778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801877c:	4293      	cmp	r3, r2
 801877e:	bf28      	it	cs
 8018780:	4613      	movcs	r3, r2
 8018782:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018784:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018788:	2114      	movs	r1, #20
 801878a:	200e      	movs	r0, #14
 801878c:	f7f6 fc84 	bl	800f098 <pbuf_alloc>
 8018790:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018794:	2b00      	cmp	r3, #0
 8018796:	f000 80d5 	beq.w	8018944 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801879c:	895b      	ldrh	r3, [r3, #10]
 801879e:	2b13      	cmp	r3, #19
 80187a0:	d806      	bhi.n	80187b0 <ip4_frag+0xd0>
 80187a2:	4b6c      	ldr	r3, [pc, #432]	@ (8018954 <ip4_frag+0x274>)
 80187a4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80187a8:	496d      	ldr	r1, [pc, #436]	@ (8018960 <ip4_frag+0x280>)
 80187aa:	486c      	ldr	r0, [pc, #432]	@ (801895c <ip4_frag+0x27c>)
 80187ac:	f001 f8a2 	bl	80198f4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80187b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b2:	685b      	ldr	r3, [r3, #4]
 80187b4:	2214      	movs	r2, #20
 80187b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80187b8:	4618      	mov	r0, r3
 80187ba:	f001 fb1a 	bl	8019df2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80187be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80187c4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80187c6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80187ca:	e064      	b.n	8018896 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	895a      	ldrh	r2, [r3, #10]
 80187d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80187d2:	1ad3      	subs	r3, r2, r3
 80187d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	895b      	ldrh	r3, [r3, #10]
 80187da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80187dc:	429a      	cmp	r2, r3
 80187de:	d906      	bls.n	80187ee <ip4_frag+0x10e>
 80187e0:	4b5c      	ldr	r3, [pc, #368]	@ (8018954 <ip4_frag+0x274>)
 80187e2:	f240 322d 	movw	r2, #813	@ 0x32d
 80187e6:	495f      	ldr	r1, [pc, #380]	@ (8018964 <ip4_frag+0x284>)
 80187e8:	485c      	ldr	r0, [pc, #368]	@ (801895c <ip4_frag+0x27c>)
 80187ea:	f001 f883 	bl	80198f4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80187ee:	8bfa      	ldrh	r2, [r7, #30]
 80187f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80187f4:	4293      	cmp	r3, r2
 80187f6:	bf28      	it	cs
 80187f8:	4613      	movcs	r3, r2
 80187fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80187fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018802:	2b00      	cmp	r3, #0
 8018804:	d105      	bne.n	8018812 <ip4_frag+0x132>
        poff = 0;
 8018806:	2300      	movs	r3, #0
 8018808:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	60fb      	str	r3, [r7, #12]
        continue;
 8018810:	e041      	b.n	8018896 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018812:	f7ff ff0d 	bl	8018630 <ip_frag_alloc_pbuf_custom_ref>
 8018816:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018818:	69bb      	ldr	r3, [r7, #24]
 801881a:	2b00      	cmp	r3, #0
 801881c:	d103      	bne.n	8018826 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801881e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018820:	f7f6 ff1e 	bl	800f660 <pbuf_free>
        goto memerr;
 8018824:	e08f      	b.n	8018946 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018826:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801882c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801882e:	4413      	add	r3, r2
 8018830:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018834:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018838:	9201      	str	r2, [sp, #4]
 801883a:	9300      	str	r3, [sp, #0]
 801883c:	4603      	mov	r3, r0
 801883e:	2241      	movs	r2, #65	@ 0x41
 8018840:	2000      	movs	r0, #0
 8018842:	f7f6 fd53 	bl	800f2ec <pbuf_alloced_custom>
 8018846:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018848:	697b      	ldr	r3, [r7, #20]
 801884a:	2b00      	cmp	r3, #0
 801884c:	d106      	bne.n	801885c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801884e:	69b8      	ldr	r0, [r7, #24]
 8018850:	f7ff fef6 	bl	8018640 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018854:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018856:	f7f6 ff03 	bl	800f660 <pbuf_free>
        goto memerr;
 801885a:	e074      	b.n	8018946 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801885c:	68f8      	ldr	r0, [r7, #12]
 801885e:	f7f6 ffa5 	bl	800f7ac <pbuf_ref>
      pcr->original = p;
 8018862:	69bb      	ldr	r3, [r7, #24]
 8018864:	68fa      	ldr	r2, [r7, #12]
 8018866:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018868:	69bb      	ldr	r3, [r7, #24]
 801886a:	4a3f      	ldr	r2, [pc, #252]	@ (8018968 <ip4_frag+0x288>)
 801886c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801886e:	6979      	ldr	r1, [r7, #20]
 8018870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018872:	f7f6 ffc3 	bl	800f7fc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018876:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801887a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801887e:	1ad3      	subs	r3, r2, r3
 8018880:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018884:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018888:	2b00      	cmp	r3, #0
 801888a:	d004      	beq.n	8018896 <ip4_frag+0x1b6>
        poff = 0;
 801888c:	2300      	movs	r3, #0
 801888e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018896:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801889a:	2b00      	cmp	r3, #0
 801889c:	d196      	bne.n	80187cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801889e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80188a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80188a4:	4413      	add	r3, r2
 80188a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80188ac:	f1a3 0213 	sub.w	r2, r3, #19
 80188b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188b4:	429a      	cmp	r2, r3
 80188b6:	bfcc      	ite	gt
 80188b8:	2301      	movgt	r3, #1
 80188ba:	2300      	movle	r3, #0
 80188bc:	b2db      	uxtb	r3, r3
 80188be:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80188c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80188c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80188ca:	6a3b      	ldr	r3, [r7, #32]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d002      	beq.n	80188d6 <ip4_frag+0x1f6>
 80188d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d003      	beq.n	80188de <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80188d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80188dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80188de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7f5 fb11 	bl	800df08 <lwip_htons>
 80188e6:	4603      	mov	r3, r0
 80188e8:	461a      	mov	r2, r3
 80188ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188ec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80188ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80188f0:	3314      	adds	r3, #20
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	4618      	mov	r0, r3
 80188f6:	f7f5 fb07 	bl	800df08 <lwip_htons>
 80188fa:	4603      	mov	r3, r0
 80188fc:	461a      	mov	r2, r3
 80188fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018900:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018904:	2200      	movs	r2, #0
 8018906:	729a      	strb	r2, [r3, #10]
 8018908:	2200      	movs	r2, #0
 801890a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801890c:	68bb      	ldr	r3, [r7, #8]
 801890e:	695b      	ldr	r3, [r3, #20]
 8018910:	687a      	ldr	r2, [r7, #4]
 8018912:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018914:	68b8      	ldr	r0, [r7, #8]
 8018916:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018918:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801891a:	f7f6 fea1 	bl	800f660 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801891e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018924:	1ad3      	subs	r3, r2, r3
 8018926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801892a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801892e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018930:	4413      	add	r3, r2
 8018932:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018936:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801893a:	2b00      	cmp	r3, #0
 801893c:	f47f af19 	bne.w	8018772 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018940:	2300      	movs	r3, #0
 8018942:	e002      	b.n	801894a <ip4_frag+0x26a>
      goto memerr;
 8018944:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018946:	f04f 33ff 	mov.w	r3, #4294967295
}
 801894a:	4618      	mov	r0, r3
 801894c:	3748      	adds	r7, #72	@ 0x48
 801894e:	46bd      	mov	sp, r7
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	0801f278 	.word	0x0801f278
 8018958:	0801f454 	.word	0x0801f454
 801895c:	0801f2c0 	.word	0x0801f2c0
 8018960:	0801f470 	.word	0x0801f470
 8018964:	0801f490 	.word	0x0801f490
 8018968:	08018679 	.word	0x08018679

0801896c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b086      	sub	sp, #24
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018976:	230e      	movs	r3, #14
 8018978:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	895b      	ldrh	r3, [r3, #10]
 801897e:	2b0e      	cmp	r3, #14
 8018980:	d96e      	bls.n	8018a60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	7bdb      	ldrb	r3, [r3, #15]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d106      	bne.n	8018998 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018990:	3301      	adds	r3, #1
 8018992:	b2da      	uxtb	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801899e:	693b      	ldr	r3, [r7, #16]
 80189a0:	7b1a      	ldrb	r2, [r3, #12]
 80189a2:	7b5b      	ldrb	r3, [r3, #13]
 80189a4:	021b      	lsls	r3, r3, #8
 80189a6:	4313      	orrs	r3, r2
 80189a8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80189aa:	693b      	ldr	r3, [r7, #16]
 80189ac:	781b      	ldrb	r3, [r3, #0]
 80189ae:	f003 0301 	and.w	r3, r3, #1
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d023      	beq.n	80189fe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	2b01      	cmp	r3, #1
 80189bc:	d10f      	bne.n	80189de <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189be:	693b      	ldr	r3, [r7, #16]
 80189c0:	785b      	ldrb	r3, [r3, #1]
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d11b      	bne.n	80189fe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80189cc:	d117      	bne.n	80189fe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	7b5b      	ldrb	r3, [r3, #13]
 80189d2:	f043 0310 	orr.w	r3, r3, #16
 80189d6:	b2da      	uxtb	r2, r3
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	735a      	strb	r2, [r3, #13]
 80189dc:	e00f      	b.n	80189fe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	2206      	movs	r2, #6
 80189e2:	4928      	ldr	r1, [pc, #160]	@ (8018a84 <ethernet_input+0x118>)
 80189e4:	4618      	mov	r0, r3
 80189e6:	f001 f921 	bl	8019c2c <memcmp>
 80189ea:	4603      	mov	r3, r0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d106      	bne.n	80189fe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	7b5b      	ldrb	r3, [r3, #13]
 80189f4:	f043 0308 	orr.w	r3, r3, #8
 80189f8:	b2da      	uxtb	r2, r3
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80189fe:	89fb      	ldrh	r3, [r7, #14]
 8018a00:	2b08      	cmp	r3, #8
 8018a02:	d003      	beq.n	8018a0c <ethernet_input+0xa0>
 8018a04:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018a08:	d014      	beq.n	8018a34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018a0a:	e032      	b.n	8018a72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018a12:	f003 0308 	and.w	r3, r3, #8
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d024      	beq.n	8018a64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a1a:	8afb      	ldrh	r3, [r7, #22]
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	6878      	ldr	r0, [r7, #4]
 8018a20:	f7f6 fd98 	bl	800f554 <pbuf_remove_header>
 8018a24:	4603      	mov	r3, r0
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d11e      	bne.n	8018a68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018a2a:	6839      	ldr	r1, [r7, #0]
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f7fe ff21 	bl	8017874 <ip4_input>
      break;
 8018a32:	e013      	b.n	8018a5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018a3a:	f003 0308 	and.w	r3, r3, #8
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d014      	beq.n	8018a6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a42:	8afb      	ldrh	r3, [r7, #22]
 8018a44:	4619      	mov	r1, r3
 8018a46:	6878      	ldr	r0, [r7, #4]
 8018a48:	f7f6 fd84 	bl	800f554 <pbuf_remove_header>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d10e      	bne.n	8018a70 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018a52:	6839      	ldr	r1, [r7, #0]
 8018a54:	6878      	ldr	r0, [r7, #4]
 8018a56:	f7fe f8c1 	bl	8016bdc <etharp_input>
      break;
 8018a5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	e00c      	b.n	8018a7a <ethernet_input+0x10e>
    goto free_and_return;
 8018a60:	bf00      	nop
 8018a62:	e006      	b.n	8018a72 <ethernet_input+0x106>
        goto free_and_return;
 8018a64:	bf00      	nop
 8018a66:	e004      	b.n	8018a72 <ethernet_input+0x106>
        goto free_and_return;
 8018a68:	bf00      	nop
 8018a6a:	e002      	b.n	8018a72 <ethernet_input+0x106>
        goto free_and_return;
 8018a6c:	bf00      	nop
 8018a6e:	e000      	b.n	8018a72 <ethernet_input+0x106>
        goto free_and_return;
 8018a70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f7f6 fdf4 	bl	800f660 <pbuf_free>
  return ERR_OK;
 8018a78:	2300      	movs	r3, #0
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3718      	adds	r7, #24
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	0801f664 	.word	0x0801f664

08018a88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b086      	sub	sp, #24
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	60f8      	str	r0, [r7, #12]
 8018a90:	60b9      	str	r1, [r7, #8]
 8018a92:	607a      	str	r2, [r7, #4]
 8018a94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018a96:	8c3b      	ldrh	r3, [r7, #32]
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7f5 fa35 	bl	800df08 <lwip_htons>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018aa2:	210e      	movs	r1, #14
 8018aa4:	68b8      	ldr	r0, [r7, #8]
 8018aa6:	f7f6 fd45 	bl	800f534 <pbuf_add_header>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d125      	bne.n	8018afc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	8afa      	ldrh	r2, [r7, #22]
 8018aba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	2206      	movs	r2, #6
 8018ac0:	6839      	ldr	r1, [r7, #0]
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f001 f995 	bl	8019df2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	3306      	adds	r3, #6
 8018acc:	2206      	movs	r2, #6
 8018ace:	6879      	ldr	r1, [r7, #4]
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f001 f98e 	bl	8019df2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018ad6:	68fb      	ldr	r3, [r7, #12]
 8018ad8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018adc:	2b06      	cmp	r3, #6
 8018ade:	d006      	beq.n	8018aee <ethernet_output+0x66>
 8018ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8018b0c <ethernet_output+0x84>)
 8018ae2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018ae6:	490a      	ldr	r1, [pc, #40]	@ (8018b10 <ethernet_output+0x88>)
 8018ae8:	480a      	ldr	r0, [pc, #40]	@ (8018b14 <ethernet_output+0x8c>)
 8018aea:	f000 ff03 	bl	80198f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	699b      	ldr	r3, [r3, #24]
 8018af2:	68b9      	ldr	r1, [r7, #8]
 8018af4:	68f8      	ldr	r0, [r7, #12]
 8018af6:	4798      	blx	r3
 8018af8:	4603      	mov	r3, r0
 8018afa:	e002      	b.n	8018b02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018afc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018afe:	f06f 0301 	mvn.w	r3, #1
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	3718      	adds	r7, #24
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}
 8018b0a:	bf00      	nop
 8018b0c:	0801f4a0 	.word	0x0801f4a0
 8018b10:	0801f4d8 	.word	0x0801f4d8
 8018b14:	0801f50c 	.word	0x0801f50c

08018b18 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
 8018b20:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	2200      	movs	r2, #0
 8018b26:	2104      	movs	r1, #4
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f7ee ffb9 	bl	8007aa0 <osMessageQueueNew>
 8018b2e:	4602      	mov	r2, r0
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d102      	bne.n	8018b42 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b40:	e000      	b.n	8018b44 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018b42:	2300      	movs	r3, #0
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3708      	adds	r7, #8
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b082      	sub	sp, #8
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f7ef f90d 	bl	8007d78 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ef f93a 	bl	8007ddc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018b68:	bf00      	nop
 8018b6a:	3708      	adds	r7, #8
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}

08018b70 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b084      	sub	sp, #16
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
 8018b78:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	6818      	ldr	r0, [r3, #0]
 8018b7e:	4639      	mov	r1, r7
 8018b80:	2300      	movs	r3, #0
 8018b82:	2200      	movs	r2, #0
 8018b84:	f7ef f812 	bl	8007bac <osMessageQueuePut>
 8018b88:	4603      	mov	r3, r0
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d102      	bne.n	8018b94 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	73fb      	strb	r3, [r7, #15]
 8018b92:	e001      	b.n	8018b98 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018b94:	23ff      	movs	r3, #255	@ 0xff
 8018b96:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3710      	adds	r7, #16
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b086      	sub	sp, #24
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	60f8      	str	r0, [r7, #12]
 8018bac:	60b9      	str	r1, [r7, #8]
 8018bae:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018bb0:	f7ee fba2 	bl	80072f8 <osKernelGetTickCount>
 8018bb4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d013      	beq.n	8018be4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	6818      	ldr	r0, [r3, #0]
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	68b9      	ldr	r1, [r7, #8]
 8018bc6:	f7ef f865 	bl	8007c94 <osMessageQueueGet>
 8018bca:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018bcc:	693b      	ldr	r3, [r7, #16]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d105      	bne.n	8018bde <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018bd2:	f7ee fb91 	bl	80072f8 <osKernelGetTickCount>
 8018bd6:	4602      	mov	r2, r0
 8018bd8:	697b      	ldr	r3, [r7, #20]
 8018bda:	1ad3      	subs	r3, r2, r3
 8018bdc:	e00f      	b.n	8018bfe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018bde:	f04f 33ff 	mov.w	r3, #4294967295
 8018be2:	e00c      	b.n	8018bfe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	6818      	ldr	r0, [r3, #0]
 8018be8:	f04f 33ff 	mov.w	r3, #4294967295
 8018bec:	2200      	movs	r2, #0
 8018bee:	68b9      	ldr	r1, [r7, #8]
 8018bf0:	f7ef f850 	bl	8007c94 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018bf4:	f7ee fb80 	bl	80072f8 <osKernelGetTickCount>
 8018bf8:	4602      	mov	r2, r0
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3718      	adds	r7, #24
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}

08018c06 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018c06:	b580      	push	{r7, lr}
 8018c08:	b082      	sub	sp, #8
 8018c0a:	af00      	add	r7, sp, #0
 8018c0c:	6078      	str	r0, [r7, #4]
 8018c0e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	6818      	ldr	r0, [r3, #0]
 8018c14:	2300      	movs	r3, #0
 8018c16:	2200      	movs	r2, #0
 8018c18:	6839      	ldr	r1, [r7, #0]
 8018c1a:	f7ef f83b 	bl	8007c94 <osMessageQueueGet>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d101      	bne.n	8018c28 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018c24:	2300      	movs	r3, #0
 8018c26:	e001      	b.n	8018c2c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018c28:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	3708      	adds	r7, #8
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}

08018c34 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018c34:	b480      	push	{r7}
 8018c36:	b083      	sub	sp, #12
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d101      	bne.n	8018c48 <sys_mbox_valid+0x14>
    return 0;
 8018c44:	2300      	movs	r3, #0
 8018c46:	e000      	b.n	8018c4a <sys_mbox_valid+0x16>
  else
    return 1;
 8018c48:	2301      	movs	r3, #1
}
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	370c      	adds	r7, #12
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c54:	4770      	bx	lr

08018c56 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018c56:	b480      	push	{r7}
 8018c58:	b083      	sub	sp, #12
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	2200      	movs	r2, #0
 8018c62:	601a      	str	r2, [r3, #0]
}
 8018c64:	bf00      	nop
 8018c66:	370c      	adds	r7, #12
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6e:	4770      	bx	lr

08018c70 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b082      	sub	sp, #8
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	6078      	str	r0, [r7, #4]
 8018c78:	460b      	mov	r3, r1
 8018c7a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018c7c:	78fb      	ldrb	r3, [r7, #3]
 8018c7e:	2200      	movs	r2, #0
 8018c80:	4619      	mov	r1, r3
 8018c82:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c86:	f7ee fd7b 	bl	8007780 <osSemaphoreNew>
 8018c8a:	4602      	mov	r2, r0
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d102      	bne.n	8018c9e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c98:	f04f 33ff 	mov.w	r3, #4294967295
 8018c9c:	e009      	b.n	8018cb2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018c9e:	78fb      	ldrb	r3, [r7, #3]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d105      	bne.n	8018cb0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	2100      	movs	r1, #0
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7ee fe04 	bl	80078b8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018cb0:	2300      	movs	r3, #0
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}

08018cba <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018cba:	b580      	push	{r7, lr}
 8018cbc:	b084      	sub	sp, #16
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
 8018cc2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018cc4:	f7ee fb18 	bl	80072f8 <osKernelGetTickCount>
 8018cc8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d011      	beq.n	8018cf4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	6839      	ldr	r1, [r7, #0]
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7ee fdee 	bl	80078b8 <osSemaphoreAcquire>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d105      	bne.n	8018cee <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018ce2:	f7ee fb09 	bl	80072f8 <osKernelGetTickCount>
 8018ce6:	4602      	mov	r2, r0
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	1ad3      	subs	r3, r2, r3
 8018cec:	e012      	b.n	8018d14 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018cee:	f04f 33ff 	mov.w	r3, #4294967295
 8018cf2:	e00f      	b.n	8018d14 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018cf4:	bf00      	nop
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f7ee fdda 	bl	80078b8 <osSemaphoreAcquire>
 8018d04:	4603      	mov	r3, r0
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d1f5      	bne.n	8018cf6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018d0a:	f7ee faf5 	bl	80072f8 <osKernelGetTickCount>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	3710      	adds	r7, #16
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	bd80      	pop	{r7, pc}

08018d1c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b082      	sub	sp, #8
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f7ee fe2b 	bl	8007984 <osSemaphoreRelease>
}
 8018d2e:	bf00      	nop
 8018d30:	3708      	adds	r7, #8
 8018d32:	46bd      	mov	sp, r7
 8018d34:	bd80      	pop	{r7, pc}

08018d36 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018d36:	b580      	push	{r7, lr}
 8018d38:	b082      	sub	sp, #8
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	4618      	mov	r0, r3
 8018d44:	f7ee fe76 	bl	8007a34 <osSemaphoreDelete>
}
 8018d48:	bf00      	nop
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d101      	bne.n	8018d64 <sys_sem_valid+0x14>
    return 0;
 8018d60:	2300      	movs	r3, #0
 8018d62:	e000      	b.n	8018d66 <sys_sem_valid+0x16>
  else
    return 1;
 8018d64:	2301      	movs	r3, #1
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	370c      	adds	r7, #12
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d70:	4770      	bx	lr

08018d72 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018d72:	b480      	push	{r7}
 8018d74:	b083      	sub	sp, #12
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	601a      	str	r2, [r3, #0]
}
 8018d80:	bf00      	nop
 8018d82:	370c      	adds	r7, #12
 8018d84:	46bd      	mov	sp, r7
 8018d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8a:	4770      	bx	lr

08018d8c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018d8c:	b580      	push	{r7, lr}
 8018d8e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018d90:	2000      	movs	r0, #0
 8018d92:	f7ee fbad 	bl	80074f0 <osMutexNew>
 8018d96:	4603      	mov	r3, r0
 8018d98:	4a01      	ldr	r2, [pc, #4]	@ (8018da0 <sys_init+0x14>)
 8018d9a:	6013      	str	r3, [r2, #0]
#endif
}
 8018d9c:	bf00      	nop
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	20011e78 	.word	0x20011e78

08018da4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b082      	sub	sp, #8
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018dac:	2000      	movs	r0, #0
 8018dae:	f7ee fb9f 	bl	80074f0 <osMutexNew>
 8018db2:	4602      	mov	r2, r0
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d102      	bne.n	8018dc6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8018dc4:	e000      	b.n	8018dc8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018dc6:	2300      	movs	r3, #0
}
 8018dc8:	4618      	mov	r0, r3
 8018dca:	3708      	adds	r7, #8
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7ee fc1f 	bl	8007624 <osMutexAcquire>
#endif
}
 8018de6:	bf00      	nop
 8018de8:	3708      	adds	r7, #8
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}

08018dee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018dee:	b580      	push	{r7, lr}
 8018df0:	b082      	sub	sp, #8
 8018df2:	af00      	add	r7, sp, #0
 8018df4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7ee fc70 	bl	80076e0 <osMutexRelease>
}
 8018e00:	bf00      	nop
 8018e02:	3708      	adds	r7, #8
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}

08018e08 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b08e      	sub	sp, #56	@ 0x38
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	60f8      	str	r0, [r7, #12]
 8018e10:	60b9      	str	r1, [r7, #8]
 8018e12:	607a      	str	r2, [r7, #4]
 8018e14:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018e16:	f107 0314 	add.w	r3, r7, #20
 8018e1a:	2224      	movs	r2, #36	@ 0x24
 8018e1c:	2100      	movs	r1, #0
 8018e1e:	4618      	mov	r0, r3
 8018e20:	f000 ff2e 	bl	8019c80 <memset>
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	617b      	str	r3, [r7, #20]
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018e30:	f107 0314 	add.w	r3, r7, #20
 8018e34:	461a      	mov	r2, r3
 8018e36:	6879      	ldr	r1, [r7, #4]
 8018e38:	68b8      	ldr	r0, [r7, #8]
 8018e3a:	f7ee fa85 	bl	8007348 <osThreadNew>
 8018e3e:	4603      	mov	r3, r0
#endif
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	3738      	adds	r7, #56	@ 0x38
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd80      	pop	{r7, pc}

08018e48 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018e4c:	4b04      	ldr	r3, [pc, #16]	@ (8018e60 <sys_arch_protect+0x18>)
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	f04f 31ff 	mov.w	r1, #4294967295
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7ee fbe5 	bl	8007624 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018e5a:	2301      	movs	r3, #1
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	bd80      	pop	{r7, pc}
 8018e60:	20011e78 	.word	0x20011e78

08018e64 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b082      	sub	sp, #8
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018e6c:	4b04      	ldr	r3, [pc, #16]	@ (8018e80 <sys_arch_unprotect+0x1c>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4618      	mov	r0, r3
 8018e72:	f7ee fc35 	bl	80076e0 <osMutexRelease>
}
 8018e76:	bf00      	nop
 8018e78:	3708      	adds	r7, #8
 8018e7a:	46bd      	mov	sp, r7
 8018e7c:	bd80      	pop	{r7, pc}
 8018e7e:	bf00      	nop
 8018e80:	20011e78 	.word	0x20011e78

08018e84 <rand>:
 8018e84:	4b16      	ldr	r3, [pc, #88]	@ (8018ee0 <rand+0x5c>)
 8018e86:	b510      	push	{r4, lr}
 8018e88:	681c      	ldr	r4, [r3, #0]
 8018e8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018e8c:	b9b3      	cbnz	r3, 8018ebc <rand+0x38>
 8018e8e:	2018      	movs	r0, #24
 8018e90:	f001 fe06 	bl	801aaa0 <malloc>
 8018e94:	4602      	mov	r2, r0
 8018e96:	6320      	str	r0, [r4, #48]	@ 0x30
 8018e98:	b920      	cbnz	r0, 8018ea4 <rand+0x20>
 8018e9a:	4b12      	ldr	r3, [pc, #72]	@ (8018ee4 <rand+0x60>)
 8018e9c:	4812      	ldr	r0, [pc, #72]	@ (8018ee8 <rand+0x64>)
 8018e9e:	2152      	movs	r1, #82	@ 0x52
 8018ea0:	f000 ffb6 	bl	8019e10 <__assert_func>
 8018ea4:	4911      	ldr	r1, [pc, #68]	@ (8018eec <rand+0x68>)
 8018ea6:	4b12      	ldr	r3, [pc, #72]	@ (8018ef0 <rand+0x6c>)
 8018ea8:	e9c0 1300 	strd	r1, r3, [r0]
 8018eac:	4b11      	ldr	r3, [pc, #68]	@ (8018ef4 <rand+0x70>)
 8018eae:	6083      	str	r3, [r0, #8]
 8018eb0:	230b      	movs	r3, #11
 8018eb2:	8183      	strh	r3, [r0, #12]
 8018eb4:	2100      	movs	r1, #0
 8018eb6:	2001      	movs	r0, #1
 8018eb8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018ebc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018ebe:	480e      	ldr	r0, [pc, #56]	@ (8018ef8 <rand+0x74>)
 8018ec0:	690b      	ldr	r3, [r1, #16]
 8018ec2:	694c      	ldr	r4, [r1, #20]
 8018ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8018efc <rand+0x78>)
 8018ec6:	4358      	muls	r0, r3
 8018ec8:	fb02 0004 	mla	r0, r2, r4, r0
 8018ecc:	fba3 3202 	umull	r3, r2, r3, r2
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	eb40 0002 	adc.w	r0, r0, r2
 8018ed6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018eda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018ede:	bd10      	pop	{r4, pc}
 8018ee0:	20000028 	.word	0x20000028
 8018ee4:	0801f672 	.word	0x0801f672
 8018ee8:	0801f689 	.word	0x0801f689
 8018eec:	abcd330e 	.word	0xabcd330e
 8018ef0:	e66d1234 	.word	0xe66d1234
 8018ef4:	0005deec 	.word	0x0005deec
 8018ef8:	5851f42d 	.word	0x5851f42d
 8018efc:	4c957f2d 	.word	0x4c957f2d

08018f00 <__cvt>:
 8018f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f02:	ed2d 8b02 	vpush	{d8}
 8018f06:	eeb0 8b40 	vmov.f64	d8, d0
 8018f0a:	b085      	sub	sp, #20
 8018f0c:	4617      	mov	r7, r2
 8018f0e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018f10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018f12:	ee18 2a90 	vmov	r2, s17
 8018f16:	f025 0520 	bic.w	r5, r5, #32
 8018f1a:	2a00      	cmp	r2, #0
 8018f1c:	bfb6      	itet	lt
 8018f1e:	222d      	movlt	r2, #45	@ 0x2d
 8018f20:	2200      	movge	r2, #0
 8018f22:	eeb1 8b40 	vneglt.f64	d8, d0
 8018f26:	2d46      	cmp	r5, #70	@ 0x46
 8018f28:	460c      	mov	r4, r1
 8018f2a:	701a      	strb	r2, [r3, #0]
 8018f2c:	d004      	beq.n	8018f38 <__cvt+0x38>
 8018f2e:	2d45      	cmp	r5, #69	@ 0x45
 8018f30:	d100      	bne.n	8018f34 <__cvt+0x34>
 8018f32:	3401      	adds	r4, #1
 8018f34:	2102      	movs	r1, #2
 8018f36:	e000      	b.n	8018f3a <__cvt+0x3a>
 8018f38:	2103      	movs	r1, #3
 8018f3a:	ab03      	add	r3, sp, #12
 8018f3c:	9301      	str	r3, [sp, #4]
 8018f3e:	ab02      	add	r3, sp, #8
 8018f40:	9300      	str	r3, [sp, #0]
 8018f42:	4622      	mov	r2, r4
 8018f44:	4633      	mov	r3, r6
 8018f46:	eeb0 0b48 	vmov.f64	d0, d8
 8018f4a:	f001 f809 	bl	8019f60 <_dtoa_r>
 8018f4e:	2d47      	cmp	r5, #71	@ 0x47
 8018f50:	d114      	bne.n	8018f7c <__cvt+0x7c>
 8018f52:	07fb      	lsls	r3, r7, #31
 8018f54:	d50a      	bpl.n	8018f6c <__cvt+0x6c>
 8018f56:	1902      	adds	r2, r0, r4
 8018f58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f60:	bf08      	it	eq
 8018f62:	9203      	streq	r2, [sp, #12]
 8018f64:	2130      	movs	r1, #48	@ 0x30
 8018f66:	9b03      	ldr	r3, [sp, #12]
 8018f68:	4293      	cmp	r3, r2
 8018f6a:	d319      	bcc.n	8018fa0 <__cvt+0xa0>
 8018f6c:	9b03      	ldr	r3, [sp, #12]
 8018f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018f70:	1a1b      	subs	r3, r3, r0
 8018f72:	6013      	str	r3, [r2, #0]
 8018f74:	b005      	add	sp, #20
 8018f76:	ecbd 8b02 	vpop	{d8}
 8018f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f7c:	2d46      	cmp	r5, #70	@ 0x46
 8018f7e:	eb00 0204 	add.w	r2, r0, r4
 8018f82:	d1e9      	bne.n	8018f58 <__cvt+0x58>
 8018f84:	7803      	ldrb	r3, [r0, #0]
 8018f86:	2b30      	cmp	r3, #48	@ 0x30
 8018f88:	d107      	bne.n	8018f9a <__cvt+0x9a>
 8018f8a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f92:	bf1c      	itt	ne
 8018f94:	f1c4 0401 	rsbne	r4, r4, #1
 8018f98:	6034      	strne	r4, [r6, #0]
 8018f9a:	6833      	ldr	r3, [r6, #0]
 8018f9c:	441a      	add	r2, r3
 8018f9e:	e7db      	b.n	8018f58 <__cvt+0x58>
 8018fa0:	1c5c      	adds	r4, r3, #1
 8018fa2:	9403      	str	r4, [sp, #12]
 8018fa4:	7019      	strb	r1, [r3, #0]
 8018fa6:	e7de      	b.n	8018f66 <__cvt+0x66>

08018fa8 <__exponent>:
 8018fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018faa:	2900      	cmp	r1, #0
 8018fac:	bfba      	itte	lt
 8018fae:	4249      	neglt	r1, r1
 8018fb0:	232d      	movlt	r3, #45	@ 0x2d
 8018fb2:	232b      	movge	r3, #43	@ 0x2b
 8018fb4:	2909      	cmp	r1, #9
 8018fb6:	7002      	strb	r2, [r0, #0]
 8018fb8:	7043      	strb	r3, [r0, #1]
 8018fba:	dd29      	ble.n	8019010 <__exponent+0x68>
 8018fbc:	f10d 0307 	add.w	r3, sp, #7
 8018fc0:	461d      	mov	r5, r3
 8018fc2:	270a      	movs	r7, #10
 8018fc4:	461a      	mov	r2, r3
 8018fc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8018fca:	fb07 1416 	mls	r4, r7, r6, r1
 8018fce:	3430      	adds	r4, #48	@ 0x30
 8018fd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018fd4:	460c      	mov	r4, r1
 8018fd6:	2c63      	cmp	r4, #99	@ 0x63
 8018fd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8018fdc:	4631      	mov	r1, r6
 8018fde:	dcf1      	bgt.n	8018fc4 <__exponent+0x1c>
 8018fe0:	3130      	adds	r1, #48	@ 0x30
 8018fe2:	1e94      	subs	r4, r2, #2
 8018fe4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018fe8:	1c41      	adds	r1, r0, #1
 8018fea:	4623      	mov	r3, r4
 8018fec:	42ab      	cmp	r3, r5
 8018fee:	d30a      	bcc.n	8019006 <__exponent+0x5e>
 8018ff0:	f10d 0309 	add.w	r3, sp, #9
 8018ff4:	1a9b      	subs	r3, r3, r2
 8018ff6:	42ac      	cmp	r4, r5
 8018ff8:	bf88      	it	hi
 8018ffa:	2300      	movhi	r3, #0
 8018ffc:	3302      	adds	r3, #2
 8018ffe:	4403      	add	r3, r0
 8019000:	1a18      	subs	r0, r3, r0
 8019002:	b003      	add	sp, #12
 8019004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019006:	f813 6b01 	ldrb.w	r6, [r3], #1
 801900a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801900e:	e7ed      	b.n	8018fec <__exponent+0x44>
 8019010:	2330      	movs	r3, #48	@ 0x30
 8019012:	3130      	adds	r1, #48	@ 0x30
 8019014:	7083      	strb	r3, [r0, #2]
 8019016:	70c1      	strb	r1, [r0, #3]
 8019018:	1d03      	adds	r3, r0, #4
 801901a:	e7f1      	b.n	8019000 <__exponent+0x58>
 801901c:	0000      	movs	r0, r0
	...

08019020 <_printf_float>:
 8019020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019024:	b08d      	sub	sp, #52	@ 0x34
 8019026:	460c      	mov	r4, r1
 8019028:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801902c:	4616      	mov	r6, r2
 801902e:	461f      	mov	r7, r3
 8019030:	4605      	mov	r5, r0
 8019032:	f000 fe65 	bl	8019d00 <_localeconv_r>
 8019036:	f8d0 b000 	ldr.w	fp, [r0]
 801903a:	4658      	mov	r0, fp
 801903c:	f7e7 f950 	bl	80002e0 <strlen>
 8019040:	2300      	movs	r3, #0
 8019042:	930a      	str	r3, [sp, #40]	@ 0x28
 8019044:	f8d8 3000 	ldr.w	r3, [r8]
 8019048:	f894 9018 	ldrb.w	r9, [r4, #24]
 801904c:	6822      	ldr	r2, [r4, #0]
 801904e:	9005      	str	r0, [sp, #20]
 8019050:	3307      	adds	r3, #7
 8019052:	f023 0307 	bic.w	r3, r3, #7
 8019056:	f103 0108 	add.w	r1, r3, #8
 801905a:	f8c8 1000 	str.w	r1, [r8]
 801905e:	ed93 0b00 	vldr	d0, [r3]
 8019062:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80192c0 <_printf_float+0x2a0>
 8019066:	eeb0 7bc0 	vabs.f64	d7, d0
 801906a:	eeb4 7b46 	vcmp.f64	d7, d6
 801906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019072:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019076:	dd24      	ble.n	80190c2 <_printf_float+0xa2>
 8019078:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019080:	d502      	bpl.n	8019088 <_printf_float+0x68>
 8019082:	232d      	movs	r3, #45	@ 0x2d
 8019084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019088:	498f      	ldr	r1, [pc, #572]	@ (80192c8 <_printf_float+0x2a8>)
 801908a:	4b90      	ldr	r3, [pc, #576]	@ (80192cc <_printf_float+0x2ac>)
 801908c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019090:	bf94      	ite	ls
 8019092:	4688      	movls	r8, r1
 8019094:	4698      	movhi	r8, r3
 8019096:	f022 0204 	bic.w	r2, r2, #4
 801909a:	2303      	movs	r3, #3
 801909c:	6123      	str	r3, [r4, #16]
 801909e:	6022      	str	r2, [r4, #0]
 80190a0:	f04f 0a00 	mov.w	sl, #0
 80190a4:	9700      	str	r7, [sp, #0]
 80190a6:	4633      	mov	r3, r6
 80190a8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80190aa:	4621      	mov	r1, r4
 80190ac:	4628      	mov	r0, r5
 80190ae:	f000 f9d1 	bl	8019454 <_printf_common>
 80190b2:	3001      	adds	r0, #1
 80190b4:	f040 8089 	bne.w	80191ca <_printf_float+0x1aa>
 80190b8:	f04f 30ff 	mov.w	r0, #4294967295
 80190bc:	b00d      	add	sp, #52	@ 0x34
 80190be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80190c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ca:	d709      	bvc.n	80190e0 <_printf_float+0xc0>
 80190cc:	ee10 3a90 	vmov	r3, s1
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	bfbc      	itt	lt
 80190d4:	232d      	movlt	r3, #45	@ 0x2d
 80190d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80190da:	497d      	ldr	r1, [pc, #500]	@ (80192d0 <_printf_float+0x2b0>)
 80190dc:	4b7d      	ldr	r3, [pc, #500]	@ (80192d4 <_printf_float+0x2b4>)
 80190de:	e7d5      	b.n	801908c <_printf_float+0x6c>
 80190e0:	6863      	ldr	r3, [r4, #4]
 80190e2:	1c59      	adds	r1, r3, #1
 80190e4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80190e8:	d139      	bne.n	801915e <_printf_float+0x13e>
 80190ea:	2306      	movs	r3, #6
 80190ec:	6063      	str	r3, [r4, #4]
 80190ee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80190f2:	2300      	movs	r3, #0
 80190f4:	6022      	str	r2, [r4, #0]
 80190f6:	9303      	str	r3, [sp, #12]
 80190f8:	ab0a      	add	r3, sp, #40	@ 0x28
 80190fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80190fe:	ab09      	add	r3, sp, #36	@ 0x24
 8019100:	9300      	str	r3, [sp, #0]
 8019102:	6861      	ldr	r1, [r4, #4]
 8019104:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8019108:	4628      	mov	r0, r5
 801910a:	f7ff fef9 	bl	8018f00 <__cvt>
 801910e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019112:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019114:	4680      	mov	r8, r0
 8019116:	d129      	bne.n	801916c <_printf_float+0x14c>
 8019118:	1cc8      	adds	r0, r1, #3
 801911a:	db02      	blt.n	8019122 <_printf_float+0x102>
 801911c:	6863      	ldr	r3, [r4, #4]
 801911e:	4299      	cmp	r1, r3
 8019120:	dd41      	ble.n	80191a6 <_printf_float+0x186>
 8019122:	f1a9 0902 	sub.w	r9, r9, #2
 8019126:	fa5f f989 	uxtb.w	r9, r9
 801912a:	3901      	subs	r1, #1
 801912c:	464a      	mov	r2, r9
 801912e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019132:	9109      	str	r1, [sp, #36]	@ 0x24
 8019134:	f7ff ff38 	bl	8018fa8 <__exponent>
 8019138:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801913a:	1813      	adds	r3, r2, r0
 801913c:	2a01      	cmp	r2, #1
 801913e:	4682      	mov	sl, r0
 8019140:	6123      	str	r3, [r4, #16]
 8019142:	dc02      	bgt.n	801914a <_printf_float+0x12a>
 8019144:	6822      	ldr	r2, [r4, #0]
 8019146:	07d2      	lsls	r2, r2, #31
 8019148:	d501      	bpl.n	801914e <_printf_float+0x12e>
 801914a:	3301      	adds	r3, #1
 801914c:	6123      	str	r3, [r4, #16]
 801914e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019152:	2b00      	cmp	r3, #0
 8019154:	d0a6      	beq.n	80190a4 <_printf_float+0x84>
 8019156:	232d      	movs	r3, #45	@ 0x2d
 8019158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801915c:	e7a2      	b.n	80190a4 <_printf_float+0x84>
 801915e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019162:	d1c4      	bne.n	80190ee <_printf_float+0xce>
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1c2      	bne.n	80190ee <_printf_float+0xce>
 8019168:	2301      	movs	r3, #1
 801916a:	e7bf      	b.n	80190ec <_printf_float+0xcc>
 801916c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019170:	d9db      	bls.n	801912a <_printf_float+0x10a>
 8019172:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019176:	d118      	bne.n	80191aa <_printf_float+0x18a>
 8019178:	2900      	cmp	r1, #0
 801917a:	6863      	ldr	r3, [r4, #4]
 801917c:	dd0b      	ble.n	8019196 <_printf_float+0x176>
 801917e:	6121      	str	r1, [r4, #16]
 8019180:	b913      	cbnz	r3, 8019188 <_printf_float+0x168>
 8019182:	6822      	ldr	r2, [r4, #0]
 8019184:	07d0      	lsls	r0, r2, #31
 8019186:	d502      	bpl.n	801918e <_printf_float+0x16e>
 8019188:	3301      	adds	r3, #1
 801918a:	440b      	add	r3, r1
 801918c:	6123      	str	r3, [r4, #16]
 801918e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019190:	f04f 0a00 	mov.w	sl, #0
 8019194:	e7db      	b.n	801914e <_printf_float+0x12e>
 8019196:	b913      	cbnz	r3, 801919e <_printf_float+0x17e>
 8019198:	6822      	ldr	r2, [r4, #0]
 801919a:	07d2      	lsls	r2, r2, #31
 801919c:	d501      	bpl.n	80191a2 <_printf_float+0x182>
 801919e:	3302      	adds	r3, #2
 80191a0:	e7f4      	b.n	801918c <_printf_float+0x16c>
 80191a2:	2301      	movs	r3, #1
 80191a4:	e7f2      	b.n	801918c <_printf_float+0x16c>
 80191a6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80191aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80191ac:	4299      	cmp	r1, r3
 80191ae:	db05      	blt.n	80191bc <_printf_float+0x19c>
 80191b0:	6823      	ldr	r3, [r4, #0]
 80191b2:	6121      	str	r1, [r4, #16]
 80191b4:	07d8      	lsls	r0, r3, #31
 80191b6:	d5ea      	bpl.n	801918e <_printf_float+0x16e>
 80191b8:	1c4b      	adds	r3, r1, #1
 80191ba:	e7e7      	b.n	801918c <_printf_float+0x16c>
 80191bc:	2900      	cmp	r1, #0
 80191be:	bfd4      	ite	le
 80191c0:	f1c1 0202 	rsble	r2, r1, #2
 80191c4:	2201      	movgt	r2, #1
 80191c6:	4413      	add	r3, r2
 80191c8:	e7e0      	b.n	801918c <_printf_float+0x16c>
 80191ca:	6823      	ldr	r3, [r4, #0]
 80191cc:	055a      	lsls	r2, r3, #21
 80191ce:	d407      	bmi.n	80191e0 <_printf_float+0x1c0>
 80191d0:	6923      	ldr	r3, [r4, #16]
 80191d2:	4642      	mov	r2, r8
 80191d4:	4631      	mov	r1, r6
 80191d6:	4628      	mov	r0, r5
 80191d8:	47b8      	blx	r7
 80191da:	3001      	adds	r0, #1
 80191dc:	d12a      	bne.n	8019234 <_printf_float+0x214>
 80191de:	e76b      	b.n	80190b8 <_printf_float+0x98>
 80191e0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80191e4:	f240 80e0 	bls.w	80193a8 <_printf_float+0x388>
 80191e8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80191ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80191f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f4:	d133      	bne.n	801925e <_printf_float+0x23e>
 80191f6:	4a38      	ldr	r2, [pc, #224]	@ (80192d8 <_printf_float+0x2b8>)
 80191f8:	2301      	movs	r3, #1
 80191fa:	4631      	mov	r1, r6
 80191fc:	4628      	mov	r0, r5
 80191fe:	47b8      	blx	r7
 8019200:	3001      	adds	r0, #1
 8019202:	f43f af59 	beq.w	80190b8 <_printf_float+0x98>
 8019206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801920a:	4543      	cmp	r3, r8
 801920c:	db02      	blt.n	8019214 <_printf_float+0x1f4>
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	07d8      	lsls	r0, r3, #31
 8019212:	d50f      	bpl.n	8019234 <_printf_float+0x214>
 8019214:	9b05      	ldr	r3, [sp, #20]
 8019216:	465a      	mov	r2, fp
 8019218:	4631      	mov	r1, r6
 801921a:	4628      	mov	r0, r5
 801921c:	47b8      	blx	r7
 801921e:	3001      	adds	r0, #1
 8019220:	f43f af4a 	beq.w	80190b8 <_printf_float+0x98>
 8019224:	f04f 0900 	mov.w	r9, #0
 8019228:	f108 38ff 	add.w	r8, r8, #4294967295
 801922c:	f104 0a1a 	add.w	sl, r4, #26
 8019230:	45c8      	cmp	r8, r9
 8019232:	dc09      	bgt.n	8019248 <_printf_float+0x228>
 8019234:	6823      	ldr	r3, [r4, #0]
 8019236:	079b      	lsls	r3, r3, #30
 8019238:	f100 8107 	bmi.w	801944a <_printf_float+0x42a>
 801923c:	68e0      	ldr	r0, [r4, #12]
 801923e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019240:	4298      	cmp	r0, r3
 8019242:	bfb8      	it	lt
 8019244:	4618      	movlt	r0, r3
 8019246:	e739      	b.n	80190bc <_printf_float+0x9c>
 8019248:	2301      	movs	r3, #1
 801924a:	4652      	mov	r2, sl
 801924c:	4631      	mov	r1, r6
 801924e:	4628      	mov	r0, r5
 8019250:	47b8      	blx	r7
 8019252:	3001      	adds	r0, #1
 8019254:	f43f af30 	beq.w	80190b8 <_printf_float+0x98>
 8019258:	f109 0901 	add.w	r9, r9, #1
 801925c:	e7e8      	b.n	8019230 <_printf_float+0x210>
 801925e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019260:	2b00      	cmp	r3, #0
 8019262:	dc3b      	bgt.n	80192dc <_printf_float+0x2bc>
 8019264:	4a1c      	ldr	r2, [pc, #112]	@ (80192d8 <_printf_float+0x2b8>)
 8019266:	2301      	movs	r3, #1
 8019268:	4631      	mov	r1, r6
 801926a:	4628      	mov	r0, r5
 801926c:	47b8      	blx	r7
 801926e:	3001      	adds	r0, #1
 8019270:	f43f af22 	beq.w	80190b8 <_printf_float+0x98>
 8019274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019278:	ea59 0303 	orrs.w	r3, r9, r3
 801927c:	d102      	bne.n	8019284 <_printf_float+0x264>
 801927e:	6823      	ldr	r3, [r4, #0]
 8019280:	07d9      	lsls	r1, r3, #31
 8019282:	d5d7      	bpl.n	8019234 <_printf_float+0x214>
 8019284:	9b05      	ldr	r3, [sp, #20]
 8019286:	465a      	mov	r2, fp
 8019288:	4631      	mov	r1, r6
 801928a:	4628      	mov	r0, r5
 801928c:	47b8      	blx	r7
 801928e:	3001      	adds	r0, #1
 8019290:	f43f af12 	beq.w	80190b8 <_printf_float+0x98>
 8019294:	f04f 0a00 	mov.w	sl, #0
 8019298:	f104 0b1a 	add.w	fp, r4, #26
 801929c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801929e:	425b      	negs	r3, r3
 80192a0:	4553      	cmp	r3, sl
 80192a2:	dc01      	bgt.n	80192a8 <_printf_float+0x288>
 80192a4:	464b      	mov	r3, r9
 80192a6:	e794      	b.n	80191d2 <_printf_float+0x1b2>
 80192a8:	2301      	movs	r3, #1
 80192aa:	465a      	mov	r2, fp
 80192ac:	4631      	mov	r1, r6
 80192ae:	4628      	mov	r0, r5
 80192b0:	47b8      	blx	r7
 80192b2:	3001      	adds	r0, #1
 80192b4:	f43f af00 	beq.w	80190b8 <_printf_float+0x98>
 80192b8:	f10a 0a01 	add.w	sl, sl, #1
 80192bc:	e7ee      	b.n	801929c <_printf_float+0x27c>
 80192be:	bf00      	nop
 80192c0:	ffffffff 	.word	0xffffffff
 80192c4:	7fefffff 	.word	0x7fefffff
 80192c8:	0801f7e2 	.word	0x0801f7e2
 80192cc:	0801f7e6 	.word	0x0801f7e6
 80192d0:	0801f7ea 	.word	0x0801f7ea
 80192d4:	0801f7ee 	.word	0x0801f7ee
 80192d8:	0801f7f2 	.word	0x0801f7f2
 80192dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80192de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80192e2:	4553      	cmp	r3, sl
 80192e4:	bfa8      	it	ge
 80192e6:	4653      	movge	r3, sl
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	4699      	mov	r9, r3
 80192ec:	dc37      	bgt.n	801935e <_printf_float+0x33e>
 80192ee:	2300      	movs	r3, #0
 80192f0:	9307      	str	r3, [sp, #28]
 80192f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192f6:	f104 021a 	add.w	r2, r4, #26
 80192fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80192fc:	9907      	ldr	r1, [sp, #28]
 80192fe:	9306      	str	r3, [sp, #24]
 8019300:	eba3 0309 	sub.w	r3, r3, r9
 8019304:	428b      	cmp	r3, r1
 8019306:	dc31      	bgt.n	801936c <_printf_float+0x34c>
 8019308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801930a:	459a      	cmp	sl, r3
 801930c:	dc3b      	bgt.n	8019386 <_printf_float+0x366>
 801930e:	6823      	ldr	r3, [r4, #0]
 8019310:	07da      	lsls	r2, r3, #31
 8019312:	d438      	bmi.n	8019386 <_printf_float+0x366>
 8019314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019316:	ebaa 0903 	sub.w	r9, sl, r3
 801931a:	9b06      	ldr	r3, [sp, #24]
 801931c:	ebaa 0303 	sub.w	r3, sl, r3
 8019320:	4599      	cmp	r9, r3
 8019322:	bfa8      	it	ge
 8019324:	4699      	movge	r9, r3
 8019326:	f1b9 0f00 	cmp.w	r9, #0
 801932a:	dc34      	bgt.n	8019396 <_printf_float+0x376>
 801932c:	f04f 0800 	mov.w	r8, #0
 8019330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019334:	f104 0b1a 	add.w	fp, r4, #26
 8019338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801933a:	ebaa 0303 	sub.w	r3, sl, r3
 801933e:	eba3 0309 	sub.w	r3, r3, r9
 8019342:	4543      	cmp	r3, r8
 8019344:	f77f af76 	ble.w	8019234 <_printf_float+0x214>
 8019348:	2301      	movs	r3, #1
 801934a:	465a      	mov	r2, fp
 801934c:	4631      	mov	r1, r6
 801934e:	4628      	mov	r0, r5
 8019350:	47b8      	blx	r7
 8019352:	3001      	adds	r0, #1
 8019354:	f43f aeb0 	beq.w	80190b8 <_printf_float+0x98>
 8019358:	f108 0801 	add.w	r8, r8, #1
 801935c:	e7ec      	b.n	8019338 <_printf_float+0x318>
 801935e:	4642      	mov	r2, r8
 8019360:	4631      	mov	r1, r6
 8019362:	4628      	mov	r0, r5
 8019364:	47b8      	blx	r7
 8019366:	3001      	adds	r0, #1
 8019368:	d1c1      	bne.n	80192ee <_printf_float+0x2ce>
 801936a:	e6a5      	b.n	80190b8 <_printf_float+0x98>
 801936c:	2301      	movs	r3, #1
 801936e:	4631      	mov	r1, r6
 8019370:	4628      	mov	r0, r5
 8019372:	9206      	str	r2, [sp, #24]
 8019374:	47b8      	blx	r7
 8019376:	3001      	adds	r0, #1
 8019378:	f43f ae9e 	beq.w	80190b8 <_printf_float+0x98>
 801937c:	9b07      	ldr	r3, [sp, #28]
 801937e:	9a06      	ldr	r2, [sp, #24]
 8019380:	3301      	adds	r3, #1
 8019382:	9307      	str	r3, [sp, #28]
 8019384:	e7b9      	b.n	80192fa <_printf_float+0x2da>
 8019386:	9b05      	ldr	r3, [sp, #20]
 8019388:	465a      	mov	r2, fp
 801938a:	4631      	mov	r1, r6
 801938c:	4628      	mov	r0, r5
 801938e:	47b8      	blx	r7
 8019390:	3001      	adds	r0, #1
 8019392:	d1bf      	bne.n	8019314 <_printf_float+0x2f4>
 8019394:	e690      	b.n	80190b8 <_printf_float+0x98>
 8019396:	9a06      	ldr	r2, [sp, #24]
 8019398:	464b      	mov	r3, r9
 801939a:	4442      	add	r2, r8
 801939c:	4631      	mov	r1, r6
 801939e:	4628      	mov	r0, r5
 80193a0:	47b8      	blx	r7
 80193a2:	3001      	adds	r0, #1
 80193a4:	d1c2      	bne.n	801932c <_printf_float+0x30c>
 80193a6:	e687      	b.n	80190b8 <_printf_float+0x98>
 80193a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80193ac:	f1b9 0f01 	cmp.w	r9, #1
 80193b0:	dc01      	bgt.n	80193b6 <_printf_float+0x396>
 80193b2:	07db      	lsls	r3, r3, #31
 80193b4:	d536      	bpl.n	8019424 <_printf_float+0x404>
 80193b6:	2301      	movs	r3, #1
 80193b8:	4642      	mov	r2, r8
 80193ba:	4631      	mov	r1, r6
 80193bc:	4628      	mov	r0, r5
 80193be:	47b8      	blx	r7
 80193c0:	3001      	adds	r0, #1
 80193c2:	f43f ae79 	beq.w	80190b8 <_printf_float+0x98>
 80193c6:	9b05      	ldr	r3, [sp, #20]
 80193c8:	465a      	mov	r2, fp
 80193ca:	4631      	mov	r1, r6
 80193cc:	4628      	mov	r0, r5
 80193ce:	47b8      	blx	r7
 80193d0:	3001      	adds	r0, #1
 80193d2:	f43f ae71 	beq.w	80190b8 <_printf_float+0x98>
 80193d6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80193da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80193de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80193e6:	d018      	beq.n	801941a <_printf_float+0x3fa>
 80193e8:	464b      	mov	r3, r9
 80193ea:	f108 0201 	add.w	r2, r8, #1
 80193ee:	4631      	mov	r1, r6
 80193f0:	4628      	mov	r0, r5
 80193f2:	47b8      	blx	r7
 80193f4:	3001      	adds	r0, #1
 80193f6:	d10c      	bne.n	8019412 <_printf_float+0x3f2>
 80193f8:	e65e      	b.n	80190b8 <_printf_float+0x98>
 80193fa:	2301      	movs	r3, #1
 80193fc:	465a      	mov	r2, fp
 80193fe:	4631      	mov	r1, r6
 8019400:	4628      	mov	r0, r5
 8019402:	47b8      	blx	r7
 8019404:	3001      	adds	r0, #1
 8019406:	f43f ae57 	beq.w	80190b8 <_printf_float+0x98>
 801940a:	f108 0801 	add.w	r8, r8, #1
 801940e:	45c8      	cmp	r8, r9
 8019410:	dbf3      	blt.n	80193fa <_printf_float+0x3da>
 8019412:	4653      	mov	r3, sl
 8019414:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019418:	e6dc      	b.n	80191d4 <_printf_float+0x1b4>
 801941a:	f04f 0800 	mov.w	r8, #0
 801941e:	f104 0b1a 	add.w	fp, r4, #26
 8019422:	e7f4      	b.n	801940e <_printf_float+0x3ee>
 8019424:	2301      	movs	r3, #1
 8019426:	4642      	mov	r2, r8
 8019428:	e7e1      	b.n	80193ee <_printf_float+0x3ce>
 801942a:	2301      	movs	r3, #1
 801942c:	464a      	mov	r2, r9
 801942e:	4631      	mov	r1, r6
 8019430:	4628      	mov	r0, r5
 8019432:	47b8      	blx	r7
 8019434:	3001      	adds	r0, #1
 8019436:	f43f ae3f 	beq.w	80190b8 <_printf_float+0x98>
 801943a:	f108 0801 	add.w	r8, r8, #1
 801943e:	68e3      	ldr	r3, [r4, #12]
 8019440:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019442:	1a5b      	subs	r3, r3, r1
 8019444:	4543      	cmp	r3, r8
 8019446:	dcf0      	bgt.n	801942a <_printf_float+0x40a>
 8019448:	e6f8      	b.n	801923c <_printf_float+0x21c>
 801944a:	f04f 0800 	mov.w	r8, #0
 801944e:	f104 0919 	add.w	r9, r4, #25
 8019452:	e7f4      	b.n	801943e <_printf_float+0x41e>

08019454 <_printf_common>:
 8019454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019458:	4616      	mov	r6, r2
 801945a:	4698      	mov	r8, r3
 801945c:	688a      	ldr	r2, [r1, #8]
 801945e:	690b      	ldr	r3, [r1, #16]
 8019460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019464:	4293      	cmp	r3, r2
 8019466:	bfb8      	it	lt
 8019468:	4613      	movlt	r3, r2
 801946a:	6033      	str	r3, [r6, #0]
 801946c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019470:	4607      	mov	r7, r0
 8019472:	460c      	mov	r4, r1
 8019474:	b10a      	cbz	r2, 801947a <_printf_common+0x26>
 8019476:	3301      	adds	r3, #1
 8019478:	6033      	str	r3, [r6, #0]
 801947a:	6823      	ldr	r3, [r4, #0]
 801947c:	0699      	lsls	r1, r3, #26
 801947e:	bf42      	ittt	mi
 8019480:	6833      	ldrmi	r3, [r6, #0]
 8019482:	3302      	addmi	r3, #2
 8019484:	6033      	strmi	r3, [r6, #0]
 8019486:	6825      	ldr	r5, [r4, #0]
 8019488:	f015 0506 	ands.w	r5, r5, #6
 801948c:	d106      	bne.n	801949c <_printf_common+0x48>
 801948e:	f104 0a19 	add.w	sl, r4, #25
 8019492:	68e3      	ldr	r3, [r4, #12]
 8019494:	6832      	ldr	r2, [r6, #0]
 8019496:	1a9b      	subs	r3, r3, r2
 8019498:	42ab      	cmp	r3, r5
 801949a:	dc26      	bgt.n	80194ea <_printf_common+0x96>
 801949c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80194a0:	6822      	ldr	r2, [r4, #0]
 80194a2:	3b00      	subs	r3, #0
 80194a4:	bf18      	it	ne
 80194a6:	2301      	movne	r3, #1
 80194a8:	0692      	lsls	r2, r2, #26
 80194aa:	d42b      	bmi.n	8019504 <_printf_common+0xb0>
 80194ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80194b0:	4641      	mov	r1, r8
 80194b2:	4638      	mov	r0, r7
 80194b4:	47c8      	blx	r9
 80194b6:	3001      	adds	r0, #1
 80194b8:	d01e      	beq.n	80194f8 <_printf_common+0xa4>
 80194ba:	6823      	ldr	r3, [r4, #0]
 80194bc:	6922      	ldr	r2, [r4, #16]
 80194be:	f003 0306 	and.w	r3, r3, #6
 80194c2:	2b04      	cmp	r3, #4
 80194c4:	bf02      	ittt	eq
 80194c6:	68e5      	ldreq	r5, [r4, #12]
 80194c8:	6833      	ldreq	r3, [r6, #0]
 80194ca:	1aed      	subeq	r5, r5, r3
 80194cc:	68a3      	ldr	r3, [r4, #8]
 80194ce:	bf0c      	ite	eq
 80194d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80194d4:	2500      	movne	r5, #0
 80194d6:	4293      	cmp	r3, r2
 80194d8:	bfc4      	itt	gt
 80194da:	1a9b      	subgt	r3, r3, r2
 80194dc:	18ed      	addgt	r5, r5, r3
 80194de:	2600      	movs	r6, #0
 80194e0:	341a      	adds	r4, #26
 80194e2:	42b5      	cmp	r5, r6
 80194e4:	d11a      	bne.n	801951c <_printf_common+0xc8>
 80194e6:	2000      	movs	r0, #0
 80194e8:	e008      	b.n	80194fc <_printf_common+0xa8>
 80194ea:	2301      	movs	r3, #1
 80194ec:	4652      	mov	r2, sl
 80194ee:	4641      	mov	r1, r8
 80194f0:	4638      	mov	r0, r7
 80194f2:	47c8      	blx	r9
 80194f4:	3001      	adds	r0, #1
 80194f6:	d103      	bne.n	8019500 <_printf_common+0xac>
 80194f8:	f04f 30ff 	mov.w	r0, #4294967295
 80194fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019500:	3501      	adds	r5, #1
 8019502:	e7c6      	b.n	8019492 <_printf_common+0x3e>
 8019504:	18e1      	adds	r1, r4, r3
 8019506:	1c5a      	adds	r2, r3, #1
 8019508:	2030      	movs	r0, #48	@ 0x30
 801950a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801950e:	4422      	add	r2, r4
 8019510:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019514:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019518:	3302      	adds	r3, #2
 801951a:	e7c7      	b.n	80194ac <_printf_common+0x58>
 801951c:	2301      	movs	r3, #1
 801951e:	4622      	mov	r2, r4
 8019520:	4641      	mov	r1, r8
 8019522:	4638      	mov	r0, r7
 8019524:	47c8      	blx	r9
 8019526:	3001      	adds	r0, #1
 8019528:	d0e6      	beq.n	80194f8 <_printf_common+0xa4>
 801952a:	3601      	adds	r6, #1
 801952c:	e7d9      	b.n	80194e2 <_printf_common+0x8e>
	...

08019530 <_printf_i>:
 8019530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019534:	7e0f      	ldrb	r7, [r1, #24]
 8019536:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019538:	2f78      	cmp	r7, #120	@ 0x78
 801953a:	4691      	mov	r9, r2
 801953c:	4680      	mov	r8, r0
 801953e:	460c      	mov	r4, r1
 8019540:	469a      	mov	sl, r3
 8019542:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019546:	d807      	bhi.n	8019558 <_printf_i+0x28>
 8019548:	2f62      	cmp	r7, #98	@ 0x62
 801954a:	d80a      	bhi.n	8019562 <_printf_i+0x32>
 801954c:	2f00      	cmp	r7, #0
 801954e:	f000 80d2 	beq.w	80196f6 <_printf_i+0x1c6>
 8019552:	2f58      	cmp	r7, #88	@ 0x58
 8019554:	f000 80b9 	beq.w	80196ca <_printf_i+0x19a>
 8019558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801955c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019560:	e03a      	b.n	80195d8 <_printf_i+0xa8>
 8019562:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019566:	2b15      	cmp	r3, #21
 8019568:	d8f6      	bhi.n	8019558 <_printf_i+0x28>
 801956a:	a101      	add	r1, pc, #4	@ (adr r1, 8019570 <_printf_i+0x40>)
 801956c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019570:	080195c9 	.word	0x080195c9
 8019574:	080195dd 	.word	0x080195dd
 8019578:	08019559 	.word	0x08019559
 801957c:	08019559 	.word	0x08019559
 8019580:	08019559 	.word	0x08019559
 8019584:	08019559 	.word	0x08019559
 8019588:	080195dd 	.word	0x080195dd
 801958c:	08019559 	.word	0x08019559
 8019590:	08019559 	.word	0x08019559
 8019594:	08019559 	.word	0x08019559
 8019598:	08019559 	.word	0x08019559
 801959c:	080196dd 	.word	0x080196dd
 80195a0:	08019607 	.word	0x08019607
 80195a4:	08019697 	.word	0x08019697
 80195a8:	08019559 	.word	0x08019559
 80195ac:	08019559 	.word	0x08019559
 80195b0:	080196ff 	.word	0x080196ff
 80195b4:	08019559 	.word	0x08019559
 80195b8:	08019607 	.word	0x08019607
 80195bc:	08019559 	.word	0x08019559
 80195c0:	08019559 	.word	0x08019559
 80195c4:	0801969f 	.word	0x0801969f
 80195c8:	6833      	ldr	r3, [r6, #0]
 80195ca:	1d1a      	adds	r2, r3, #4
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	6032      	str	r2, [r6, #0]
 80195d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80195d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80195d8:	2301      	movs	r3, #1
 80195da:	e09d      	b.n	8019718 <_printf_i+0x1e8>
 80195dc:	6833      	ldr	r3, [r6, #0]
 80195de:	6820      	ldr	r0, [r4, #0]
 80195e0:	1d19      	adds	r1, r3, #4
 80195e2:	6031      	str	r1, [r6, #0]
 80195e4:	0606      	lsls	r6, r0, #24
 80195e6:	d501      	bpl.n	80195ec <_printf_i+0xbc>
 80195e8:	681d      	ldr	r5, [r3, #0]
 80195ea:	e003      	b.n	80195f4 <_printf_i+0xc4>
 80195ec:	0645      	lsls	r5, r0, #25
 80195ee:	d5fb      	bpl.n	80195e8 <_printf_i+0xb8>
 80195f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80195f4:	2d00      	cmp	r5, #0
 80195f6:	da03      	bge.n	8019600 <_printf_i+0xd0>
 80195f8:	232d      	movs	r3, #45	@ 0x2d
 80195fa:	426d      	negs	r5, r5
 80195fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019600:	4859      	ldr	r0, [pc, #356]	@ (8019768 <_printf_i+0x238>)
 8019602:	230a      	movs	r3, #10
 8019604:	e011      	b.n	801962a <_printf_i+0xfa>
 8019606:	6821      	ldr	r1, [r4, #0]
 8019608:	6833      	ldr	r3, [r6, #0]
 801960a:	0608      	lsls	r0, r1, #24
 801960c:	f853 5b04 	ldr.w	r5, [r3], #4
 8019610:	d402      	bmi.n	8019618 <_printf_i+0xe8>
 8019612:	0649      	lsls	r1, r1, #25
 8019614:	bf48      	it	mi
 8019616:	b2ad      	uxthmi	r5, r5
 8019618:	2f6f      	cmp	r7, #111	@ 0x6f
 801961a:	4853      	ldr	r0, [pc, #332]	@ (8019768 <_printf_i+0x238>)
 801961c:	6033      	str	r3, [r6, #0]
 801961e:	bf14      	ite	ne
 8019620:	230a      	movne	r3, #10
 8019622:	2308      	moveq	r3, #8
 8019624:	2100      	movs	r1, #0
 8019626:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801962a:	6866      	ldr	r6, [r4, #4]
 801962c:	60a6      	str	r6, [r4, #8]
 801962e:	2e00      	cmp	r6, #0
 8019630:	bfa2      	ittt	ge
 8019632:	6821      	ldrge	r1, [r4, #0]
 8019634:	f021 0104 	bicge.w	r1, r1, #4
 8019638:	6021      	strge	r1, [r4, #0]
 801963a:	b90d      	cbnz	r5, 8019640 <_printf_i+0x110>
 801963c:	2e00      	cmp	r6, #0
 801963e:	d04b      	beq.n	80196d8 <_printf_i+0x1a8>
 8019640:	4616      	mov	r6, r2
 8019642:	fbb5 f1f3 	udiv	r1, r5, r3
 8019646:	fb03 5711 	mls	r7, r3, r1, r5
 801964a:	5dc7      	ldrb	r7, [r0, r7]
 801964c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019650:	462f      	mov	r7, r5
 8019652:	42bb      	cmp	r3, r7
 8019654:	460d      	mov	r5, r1
 8019656:	d9f4      	bls.n	8019642 <_printf_i+0x112>
 8019658:	2b08      	cmp	r3, #8
 801965a:	d10b      	bne.n	8019674 <_printf_i+0x144>
 801965c:	6823      	ldr	r3, [r4, #0]
 801965e:	07df      	lsls	r7, r3, #31
 8019660:	d508      	bpl.n	8019674 <_printf_i+0x144>
 8019662:	6923      	ldr	r3, [r4, #16]
 8019664:	6861      	ldr	r1, [r4, #4]
 8019666:	4299      	cmp	r1, r3
 8019668:	bfde      	ittt	le
 801966a:	2330      	movle	r3, #48	@ 0x30
 801966c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019670:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019674:	1b92      	subs	r2, r2, r6
 8019676:	6122      	str	r2, [r4, #16]
 8019678:	f8cd a000 	str.w	sl, [sp]
 801967c:	464b      	mov	r3, r9
 801967e:	aa03      	add	r2, sp, #12
 8019680:	4621      	mov	r1, r4
 8019682:	4640      	mov	r0, r8
 8019684:	f7ff fee6 	bl	8019454 <_printf_common>
 8019688:	3001      	adds	r0, #1
 801968a:	d14a      	bne.n	8019722 <_printf_i+0x1f2>
 801968c:	f04f 30ff 	mov.w	r0, #4294967295
 8019690:	b004      	add	sp, #16
 8019692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019696:	6823      	ldr	r3, [r4, #0]
 8019698:	f043 0320 	orr.w	r3, r3, #32
 801969c:	6023      	str	r3, [r4, #0]
 801969e:	4833      	ldr	r0, [pc, #204]	@ (801976c <_printf_i+0x23c>)
 80196a0:	2778      	movs	r7, #120	@ 0x78
 80196a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80196a6:	6823      	ldr	r3, [r4, #0]
 80196a8:	6831      	ldr	r1, [r6, #0]
 80196aa:	061f      	lsls	r7, r3, #24
 80196ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80196b0:	d402      	bmi.n	80196b8 <_printf_i+0x188>
 80196b2:	065f      	lsls	r7, r3, #25
 80196b4:	bf48      	it	mi
 80196b6:	b2ad      	uxthmi	r5, r5
 80196b8:	6031      	str	r1, [r6, #0]
 80196ba:	07d9      	lsls	r1, r3, #31
 80196bc:	bf44      	itt	mi
 80196be:	f043 0320 	orrmi.w	r3, r3, #32
 80196c2:	6023      	strmi	r3, [r4, #0]
 80196c4:	b11d      	cbz	r5, 80196ce <_printf_i+0x19e>
 80196c6:	2310      	movs	r3, #16
 80196c8:	e7ac      	b.n	8019624 <_printf_i+0xf4>
 80196ca:	4827      	ldr	r0, [pc, #156]	@ (8019768 <_printf_i+0x238>)
 80196cc:	e7e9      	b.n	80196a2 <_printf_i+0x172>
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	f023 0320 	bic.w	r3, r3, #32
 80196d4:	6023      	str	r3, [r4, #0]
 80196d6:	e7f6      	b.n	80196c6 <_printf_i+0x196>
 80196d8:	4616      	mov	r6, r2
 80196da:	e7bd      	b.n	8019658 <_printf_i+0x128>
 80196dc:	6833      	ldr	r3, [r6, #0]
 80196de:	6825      	ldr	r5, [r4, #0]
 80196e0:	6961      	ldr	r1, [r4, #20]
 80196e2:	1d18      	adds	r0, r3, #4
 80196e4:	6030      	str	r0, [r6, #0]
 80196e6:	062e      	lsls	r6, r5, #24
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	d501      	bpl.n	80196f0 <_printf_i+0x1c0>
 80196ec:	6019      	str	r1, [r3, #0]
 80196ee:	e002      	b.n	80196f6 <_printf_i+0x1c6>
 80196f0:	0668      	lsls	r0, r5, #25
 80196f2:	d5fb      	bpl.n	80196ec <_printf_i+0x1bc>
 80196f4:	8019      	strh	r1, [r3, #0]
 80196f6:	2300      	movs	r3, #0
 80196f8:	6123      	str	r3, [r4, #16]
 80196fa:	4616      	mov	r6, r2
 80196fc:	e7bc      	b.n	8019678 <_printf_i+0x148>
 80196fe:	6833      	ldr	r3, [r6, #0]
 8019700:	1d1a      	adds	r2, r3, #4
 8019702:	6032      	str	r2, [r6, #0]
 8019704:	681e      	ldr	r6, [r3, #0]
 8019706:	6862      	ldr	r2, [r4, #4]
 8019708:	2100      	movs	r1, #0
 801970a:	4630      	mov	r0, r6
 801970c:	f7e6 fd98 	bl	8000240 <memchr>
 8019710:	b108      	cbz	r0, 8019716 <_printf_i+0x1e6>
 8019712:	1b80      	subs	r0, r0, r6
 8019714:	6060      	str	r0, [r4, #4]
 8019716:	6863      	ldr	r3, [r4, #4]
 8019718:	6123      	str	r3, [r4, #16]
 801971a:	2300      	movs	r3, #0
 801971c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019720:	e7aa      	b.n	8019678 <_printf_i+0x148>
 8019722:	6923      	ldr	r3, [r4, #16]
 8019724:	4632      	mov	r2, r6
 8019726:	4649      	mov	r1, r9
 8019728:	4640      	mov	r0, r8
 801972a:	47d0      	blx	sl
 801972c:	3001      	adds	r0, #1
 801972e:	d0ad      	beq.n	801968c <_printf_i+0x15c>
 8019730:	6823      	ldr	r3, [r4, #0]
 8019732:	079b      	lsls	r3, r3, #30
 8019734:	d413      	bmi.n	801975e <_printf_i+0x22e>
 8019736:	68e0      	ldr	r0, [r4, #12]
 8019738:	9b03      	ldr	r3, [sp, #12]
 801973a:	4298      	cmp	r0, r3
 801973c:	bfb8      	it	lt
 801973e:	4618      	movlt	r0, r3
 8019740:	e7a6      	b.n	8019690 <_printf_i+0x160>
 8019742:	2301      	movs	r3, #1
 8019744:	4632      	mov	r2, r6
 8019746:	4649      	mov	r1, r9
 8019748:	4640      	mov	r0, r8
 801974a:	47d0      	blx	sl
 801974c:	3001      	adds	r0, #1
 801974e:	d09d      	beq.n	801968c <_printf_i+0x15c>
 8019750:	3501      	adds	r5, #1
 8019752:	68e3      	ldr	r3, [r4, #12]
 8019754:	9903      	ldr	r1, [sp, #12]
 8019756:	1a5b      	subs	r3, r3, r1
 8019758:	42ab      	cmp	r3, r5
 801975a:	dcf2      	bgt.n	8019742 <_printf_i+0x212>
 801975c:	e7eb      	b.n	8019736 <_printf_i+0x206>
 801975e:	2500      	movs	r5, #0
 8019760:	f104 0619 	add.w	r6, r4, #25
 8019764:	e7f5      	b.n	8019752 <_printf_i+0x222>
 8019766:	bf00      	nop
 8019768:	0801f7f4 	.word	0x0801f7f4
 801976c:	0801f805 	.word	0x0801f805

08019770 <std>:
 8019770:	2300      	movs	r3, #0
 8019772:	b510      	push	{r4, lr}
 8019774:	4604      	mov	r4, r0
 8019776:	e9c0 3300 	strd	r3, r3, [r0]
 801977a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801977e:	6083      	str	r3, [r0, #8]
 8019780:	8181      	strh	r1, [r0, #12]
 8019782:	6643      	str	r3, [r0, #100]	@ 0x64
 8019784:	81c2      	strh	r2, [r0, #14]
 8019786:	6183      	str	r3, [r0, #24]
 8019788:	4619      	mov	r1, r3
 801978a:	2208      	movs	r2, #8
 801978c:	305c      	adds	r0, #92	@ 0x5c
 801978e:	f000 fa77 	bl	8019c80 <memset>
 8019792:	4b0d      	ldr	r3, [pc, #52]	@ (80197c8 <std+0x58>)
 8019794:	6263      	str	r3, [r4, #36]	@ 0x24
 8019796:	4b0d      	ldr	r3, [pc, #52]	@ (80197cc <std+0x5c>)
 8019798:	62a3      	str	r3, [r4, #40]	@ 0x28
 801979a:	4b0d      	ldr	r3, [pc, #52]	@ (80197d0 <std+0x60>)
 801979c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801979e:	4b0d      	ldr	r3, [pc, #52]	@ (80197d4 <std+0x64>)
 80197a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80197a2:	4b0d      	ldr	r3, [pc, #52]	@ (80197d8 <std+0x68>)
 80197a4:	6224      	str	r4, [r4, #32]
 80197a6:	429c      	cmp	r4, r3
 80197a8:	d006      	beq.n	80197b8 <std+0x48>
 80197aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80197ae:	4294      	cmp	r4, r2
 80197b0:	d002      	beq.n	80197b8 <std+0x48>
 80197b2:	33d0      	adds	r3, #208	@ 0xd0
 80197b4:	429c      	cmp	r4, r3
 80197b6:	d105      	bne.n	80197c4 <std+0x54>
 80197b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80197bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197c0:	f000 bb0c 	b.w	8019ddc <__retarget_lock_init_recursive>
 80197c4:	bd10      	pop	{r4, pc}
 80197c6:	bf00      	nop
 80197c8:	08019a7d 	.word	0x08019a7d
 80197cc:	08019a9f 	.word	0x08019a9f
 80197d0:	08019ad7 	.word	0x08019ad7
 80197d4:	08019afb 	.word	0x08019afb
 80197d8:	20011e7c 	.word	0x20011e7c

080197dc <stdio_exit_handler>:
 80197dc:	4a02      	ldr	r2, [pc, #8]	@ (80197e8 <stdio_exit_handler+0xc>)
 80197de:	4903      	ldr	r1, [pc, #12]	@ (80197ec <stdio_exit_handler+0x10>)
 80197e0:	4803      	ldr	r0, [pc, #12]	@ (80197f0 <stdio_exit_handler+0x14>)
 80197e2:	f000 b869 	b.w	80198b8 <_fwalk_sglue>
 80197e6:	bf00      	nop
 80197e8:	2000001c 	.word	0x2000001c
 80197ec:	0801b94d 	.word	0x0801b94d
 80197f0:	2000002c 	.word	0x2000002c

080197f4 <cleanup_stdio>:
 80197f4:	6841      	ldr	r1, [r0, #4]
 80197f6:	4b0c      	ldr	r3, [pc, #48]	@ (8019828 <cleanup_stdio+0x34>)
 80197f8:	4299      	cmp	r1, r3
 80197fa:	b510      	push	{r4, lr}
 80197fc:	4604      	mov	r4, r0
 80197fe:	d001      	beq.n	8019804 <cleanup_stdio+0x10>
 8019800:	f002 f8a4 	bl	801b94c <_fflush_r>
 8019804:	68a1      	ldr	r1, [r4, #8]
 8019806:	4b09      	ldr	r3, [pc, #36]	@ (801982c <cleanup_stdio+0x38>)
 8019808:	4299      	cmp	r1, r3
 801980a:	d002      	beq.n	8019812 <cleanup_stdio+0x1e>
 801980c:	4620      	mov	r0, r4
 801980e:	f002 f89d 	bl	801b94c <_fflush_r>
 8019812:	68e1      	ldr	r1, [r4, #12]
 8019814:	4b06      	ldr	r3, [pc, #24]	@ (8019830 <cleanup_stdio+0x3c>)
 8019816:	4299      	cmp	r1, r3
 8019818:	d004      	beq.n	8019824 <cleanup_stdio+0x30>
 801981a:	4620      	mov	r0, r4
 801981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019820:	f002 b894 	b.w	801b94c <_fflush_r>
 8019824:	bd10      	pop	{r4, pc}
 8019826:	bf00      	nop
 8019828:	20011e7c 	.word	0x20011e7c
 801982c:	20011ee4 	.word	0x20011ee4
 8019830:	20011f4c 	.word	0x20011f4c

08019834 <global_stdio_init.part.0>:
 8019834:	b510      	push	{r4, lr}
 8019836:	4b0b      	ldr	r3, [pc, #44]	@ (8019864 <global_stdio_init.part.0+0x30>)
 8019838:	4c0b      	ldr	r4, [pc, #44]	@ (8019868 <global_stdio_init.part.0+0x34>)
 801983a:	4a0c      	ldr	r2, [pc, #48]	@ (801986c <global_stdio_init.part.0+0x38>)
 801983c:	601a      	str	r2, [r3, #0]
 801983e:	4620      	mov	r0, r4
 8019840:	2200      	movs	r2, #0
 8019842:	2104      	movs	r1, #4
 8019844:	f7ff ff94 	bl	8019770 <std>
 8019848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801984c:	2201      	movs	r2, #1
 801984e:	2109      	movs	r1, #9
 8019850:	f7ff ff8e 	bl	8019770 <std>
 8019854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019858:	2202      	movs	r2, #2
 801985a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801985e:	2112      	movs	r1, #18
 8019860:	f7ff bf86 	b.w	8019770 <std>
 8019864:	20011fb4 	.word	0x20011fb4
 8019868:	20011e7c 	.word	0x20011e7c
 801986c:	080197dd 	.word	0x080197dd

08019870 <__sfp_lock_acquire>:
 8019870:	4801      	ldr	r0, [pc, #4]	@ (8019878 <__sfp_lock_acquire+0x8>)
 8019872:	f000 bab4 	b.w	8019dde <__retarget_lock_acquire_recursive>
 8019876:	bf00      	nop
 8019878:	20011fb9 	.word	0x20011fb9

0801987c <__sfp_lock_release>:
 801987c:	4801      	ldr	r0, [pc, #4]	@ (8019884 <__sfp_lock_release+0x8>)
 801987e:	f000 baaf 	b.w	8019de0 <__retarget_lock_release_recursive>
 8019882:	bf00      	nop
 8019884:	20011fb9 	.word	0x20011fb9

08019888 <__sinit>:
 8019888:	b510      	push	{r4, lr}
 801988a:	4604      	mov	r4, r0
 801988c:	f7ff fff0 	bl	8019870 <__sfp_lock_acquire>
 8019890:	6a23      	ldr	r3, [r4, #32]
 8019892:	b11b      	cbz	r3, 801989c <__sinit+0x14>
 8019894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019898:	f7ff bff0 	b.w	801987c <__sfp_lock_release>
 801989c:	4b04      	ldr	r3, [pc, #16]	@ (80198b0 <__sinit+0x28>)
 801989e:	6223      	str	r3, [r4, #32]
 80198a0:	4b04      	ldr	r3, [pc, #16]	@ (80198b4 <__sinit+0x2c>)
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1f5      	bne.n	8019894 <__sinit+0xc>
 80198a8:	f7ff ffc4 	bl	8019834 <global_stdio_init.part.0>
 80198ac:	e7f2      	b.n	8019894 <__sinit+0xc>
 80198ae:	bf00      	nop
 80198b0:	080197f5 	.word	0x080197f5
 80198b4:	20011fb4 	.word	0x20011fb4

080198b8 <_fwalk_sglue>:
 80198b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198bc:	4607      	mov	r7, r0
 80198be:	4688      	mov	r8, r1
 80198c0:	4614      	mov	r4, r2
 80198c2:	2600      	movs	r6, #0
 80198c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198c8:	f1b9 0901 	subs.w	r9, r9, #1
 80198cc:	d505      	bpl.n	80198da <_fwalk_sglue+0x22>
 80198ce:	6824      	ldr	r4, [r4, #0]
 80198d0:	2c00      	cmp	r4, #0
 80198d2:	d1f7      	bne.n	80198c4 <_fwalk_sglue+0xc>
 80198d4:	4630      	mov	r0, r6
 80198d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198da:	89ab      	ldrh	r3, [r5, #12]
 80198dc:	2b01      	cmp	r3, #1
 80198de:	d907      	bls.n	80198f0 <_fwalk_sglue+0x38>
 80198e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198e4:	3301      	adds	r3, #1
 80198e6:	d003      	beq.n	80198f0 <_fwalk_sglue+0x38>
 80198e8:	4629      	mov	r1, r5
 80198ea:	4638      	mov	r0, r7
 80198ec:	47c0      	blx	r8
 80198ee:	4306      	orrs	r6, r0
 80198f0:	3568      	adds	r5, #104	@ 0x68
 80198f2:	e7e9      	b.n	80198c8 <_fwalk_sglue+0x10>

080198f4 <iprintf>:
 80198f4:	b40f      	push	{r0, r1, r2, r3}
 80198f6:	b507      	push	{r0, r1, r2, lr}
 80198f8:	4906      	ldr	r1, [pc, #24]	@ (8019914 <iprintf+0x20>)
 80198fa:	ab04      	add	r3, sp, #16
 80198fc:	6808      	ldr	r0, [r1, #0]
 80198fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019902:	6881      	ldr	r1, [r0, #8]
 8019904:	9301      	str	r3, [sp, #4]
 8019906:	f001 fe85 	bl	801b614 <_vfiprintf_r>
 801990a:	b003      	add	sp, #12
 801990c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019910:	b004      	add	sp, #16
 8019912:	4770      	bx	lr
 8019914:	20000028 	.word	0x20000028

08019918 <_puts_r>:
 8019918:	6a03      	ldr	r3, [r0, #32]
 801991a:	b570      	push	{r4, r5, r6, lr}
 801991c:	6884      	ldr	r4, [r0, #8]
 801991e:	4605      	mov	r5, r0
 8019920:	460e      	mov	r6, r1
 8019922:	b90b      	cbnz	r3, 8019928 <_puts_r+0x10>
 8019924:	f7ff ffb0 	bl	8019888 <__sinit>
 8019928:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801992a:	07db      	lsls	r3, r3, #31
 801992c:	d405      	bmi.n	801993a <_puts_r+0x22>
 801992e:	89a3      	ldrh	r3, [r4, #12]
 8019930:	0598      	lsls	r0, r3, #22
 8019932:	d402      	bmi.n	801993a <_puts_r+0x22>
 8019934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019936:	f000 fa52 	bl	8019dde <__retarget_lock_acquire_recursive>
 801993a:	89a3      	ldrh	r3, [r4, #12]
 801993c:	0719      	lsls	r1, r3, #28
 801993e:	d502      	bpl.n	8019946 <_puts_r+0x2e>
 8019940:	6923      	ldr	r3, [r4, #16]
 8019942:	2b00      	cmp	r3, #0
 8019944:	d135      	bne.n	80199b2 <_puts_r+0x9a>
 8019946:	4621      	mov	r1, r4
 8019948:	4628      	mov	r0, r5
 801994a:	f000 f919 	bl	8019b80 <__swsetup_r>
 801994e:	b380      	cbz	r0, 80199b2 <_puts_r+0x9a>
 8019950:	f04f 35ff 	mov.w	r5, #4294967295
 8019954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019956:	07da      	lsls	r2, r3, #31
 8019958:	d405      	bmi.n	8019966 <_puts_r+0x4e>
 801995a:	89a3      	ldrh	r3, [r4, #12]
 801995c:	059b      	lsls	r3, r3, #22
 801995e:	d402      	bmi.n	8019966 <_puts_r+0x4e>
 8019960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019962:	f000 fa3d 	bl	8019de0 <__retarget_lock_release_recursive>
 8019966:	4628      	mov	r0, r5
 8019968:	bd70      	pop	{r4, r5, r6, pc}
 801996a:	2b00      	cmp	r3, #0
 801996c:	da04      	bge.n	8019978 <_puts_r+0x60>
 801996e:	69a2      	ldr	r2, [r4, #24]
 8019970:	429a      	cmp	r2, r3
 8019972:	dc17      	bgt.n	80199a4 <_puts_r+0x8c>
 8019974:	290a      	cmp	r1, #10
 8019976:	d015      	beq.n	80199a4 <_puts_r+0x8c>
 8019978:	6823      	ldr	r3, [r4, #0]
 801997a:	1c5a      	adds	r2, r3, #1
 801997c:	6022      	str	r2, [r4, #0]
 801997e:	7019      	strb	r1, [r3, #0]
 8019980:	68a3      	ldr	r3, [r4, #8]
 8019982:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019986:	3b01      	subs	r3, #1
 8019988:	60a3      	str	r3, [r4, #8]
 801998a:	2900      	cmp	r1, #0
 801998c:	d1ed      	bne.n	801996a <_puts_r+0x52>
 801998e:	2b00      	cmp	r3, #0
 8019990:	da11      	bge.n	80199b6 <_puts_r+0x9e>
 8019992:	4622      	mov	r2, r4
 8019994:	210a      	movs	r1, #10
 8019996:	4628      	mov	r0, r5
 8019998:	f000 f8b3 	bl	8019b02 <__swbuf_r>
 801999c:	3001      	adds	r0, #1
 801999e:	d0d7      	beq.n	8019950 <_puts_r+0x38>
 80199a0:	250a      	movs	r5, #10
 80199a2:	e7d7      	b.n	8019954 <_puts_r+0x3c>
 80199a4:	4622      	mov	r2, r4
 80199a6:	4628      	mov	r0, r5
 80199a8:	f000 f8ab 	bl	8019b02 <__swbuf_r>
 80199ac:	3001      	adds	r0, #1
 80199ae:	d1e7      	bne.n	8019980 <_puts_r+0x68>
 80199b0:	e7ce      	b.n	8019950 <_puts_r+0x38>
 80199b2:	3e01      	subs	r6, #1
 80199b4:	e7e4      	b.n	8019980 <_puts_r+0x68>
 80199b6:	6823      	ldr	r3, [r4, #0]
 80199b8:	1c5a      	adds	r2, r3, #1
 80199ba:	6022      	str	r2, [r4, #0]
 80199bc:	220a      	movs	r2, #10
 80199be:	701a      	strb	r2, [r3, #0]
 80199c0:	e7ee      	b.n	80199a0 <_puts_r+0x88>
	...

080199c4 <puts>:
 80199c4:	4b02      	ldr	r3, [pc, #8]	@ (80199d0 <puts+0xc>)
 80199c6:	4601      	mov	r1, r0
 80199c8:	6818      	ldr	r0, [r3, #0]
 80199ca:	f7ff bfa5 	b.w	8019918 <_puts_r>
 80199ce:	bf00      	nop
 80199d0:	20000028 	.word	0x20000028

080199d4 <sniprintf>:
 80199d4:	b40c      	push	{r2, r3}
 80199d6:	b530      	push	{r4, r5, lr}
 80199d8:	4b17      	ldr	r3, [pc, #92]	@ (8019a38 <sniprintf+0x64>)
 80199da:	1e0c      	subs	r4, r1, #0
 80199dc:	681d      	ldr	r5, [r3, #0]
 80199de:	b09d      	sub	sp, #116	@ 0x74
 80199e0:	da08      	bge.n	80199f4 <sniprintf+0x20>
 80199e2:	238b      	movs	r3, #139	@ 0x8b
 80199e4:	602b      	str	r3, [r5, #0]
 80199e6:	f04f 30ff 	mov.w	r0, #4294967295
 80199ea:	b01d      	add	sp, #116	@ 0x74
 80199ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199f0:	b002      	add	sp, #8
 80199f2:	4770      	bx	lr
 80199f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80199f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80199fc:	bf14      	ite	ne
 80199fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019a02:	4623      	moveq	r3, r4
 8019a04:	9304      	str	r3, [sp, #16]
 8019a06:	9307      	str	r3, [sp, #28]
 8019a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a0c:	9002      	str	r0, [sp, #8]
 8019a0e:	9006      	str	r0, [sp, #24]
 8019a10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019a16:	ab21      	add	r3, sp, #132	@ 0x84
 8019a18:	a902      	add	r1, sp, #8
 8019a1a:	4628      	mov	r0, r5
 8019a1c:	9301      	str	r3, [sp, #4]
 8019a1e:	f001 fcd3 	bl	801b3c8 <_svfiprintf_r>
 8019a22:	1c43      	adds	r3, r0, #1
 8019a24:	bfbc      	itt	lt
 8019a26:	238b      	movlt	r3, #139	@ 0x8b
 8019a28:	602b      	strlt	r3, [r5, #0]
 8019a2a:	2c00      	cmp	r4, #0
 8019a2c:	d0dd      	beq.n	80199ea <sniprintf+0x16>
 8019a2e:	9b02      	ldr	r3, [sp, #8]
 8019a30:	2200      	movs	r2, #0
 8019a32:	701a      	strb	r2, [r3, #0]
 8019a34:	e7d9      	b.n	80199ea <sniprintf+0x16>
 8019a36:	bf00      	nop
 8019a38:	20000028 	.word	0x20000028

08019a3c <siprintf>:
 8019a3c:	b40e      	push	{r1, r2, r3}
 8019a3e:	b500      	push	{lr}
 8019a40:	b09c      	sub	sp, #112	@ 0x70
 8019a42:	ab1d      	add	r3, sp, #116	@ 0x74
 8019a44:	9002      	str	r0, [sp, #8]
 8019a46:	9006      	str	r0, [sp, #24]
 8019a48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019a4c:	4809      	ldr	r0, [pc, #36]	@ (8019a74 <siprintf+0x38>)
 8019a4e:	9107      	str	r1, [sp, #28]
 8019a50:	9104      	str	r1, [sp, #16]
 8019a52:	4909      	ldr	r1, [pc, #36]	@ (8019a78 <siprintf+0x3c>)
 8019a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a58:	9105      	str	r1, [sp, #20]
 8019a5a:	6800      	ldr	r0, [r0, #0]
 8019a5c:	9301      	str	r3, [sp, #4]
 8019a5e:	a902      	add	r1, sp, #8
 8019a60:	f001 fcb2 	bl	801b3c8 <_svfiprintf_r>
 8019a64:	9b02      	ldr	r3, [sp, #8]
 8019a66:	2200      	movs	r2, #0
 8019a68:	701a      	strb	r2, [r3, #0]
 8019a6a:	b01c      	add	sp, #112	@ 0x70
 8019a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a70:	b003      	add	sp, #12
 8019a72:	4770      	bx	lr
 8019a74:	20000028 	.word	0x20000028
 8019a78:	ffff0208 	.word	0xffff0208

08019a7c <__sread>:
 8019a7c:	b510      	push	{r4, lr}
 8019a7e:	460c      	mov	r4, r1
 8019a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a84:	f000 f962 	bl	8019d4c <_read_r>
 8019a88:	2800      	cmp	r0, #0
 8019a8a:	bfab      	itete	ge
 8019a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8019a90:	181b      	addge	r3, r3, r0
 8019a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019a96:	bfac      	ite	ge
 8019a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019a9a:	81a3      	strhlt	r3, [r4, #12]
 8019a9c:	bd10      	pop	{r4, pc}

08019a9e <__swrite>:
 8019a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019aa2:	461f      	mov	r7, r3
 8019aa4:	898b      	ldrh	r3, [r1, #12]
 8019aa6:	05db      	lsls	r3, r3, #23
 8019aa8:	4605      	mov	r5, r0
 8019aaa:	460c      	mov	r4, r1
 8019aac:	4616      	mov	r6, r2
 8019aae:	d505      	bpl.n	8019abc <__swrite+0x1e>
 8019ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ab4:	2302      	movs	r3, #2
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	f000 f936 	bl	8019d28 <_lseek_r>
 8019abc:	89a3      	ldrh	r3, [r4, #12]
 8019abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019ac6:	81a3      	strh	r3, [r4, #12]
 8019ac8:	4632      	mov	r2, r6
 8019aca:	463b      	mov	r3, r7
 8019acc:	4628      	mov	r0, r5
 8019ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ad2:	f000 b94d 	b.w	8019d70 <_write_r>

08019ad6 <__sseek>:
 8019ad6:	b510      	push	{r4, lr}
 8019ad8:	460c      	mov	r4, r1
 8019ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ade:	f000 f923 	bl	8019d28 <_lseek_r>
 8019ae2:	1c43      	adds	r3, r0, #1
 8019ae4:	89a3      	ldrh	r3, [r4, #12]
 8019ae6:	bf15      	itete	ne
 8019ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019af2:	81a3      	strheq	r3, [r4, #12]
 8019af4:	bf18      	it	ne
 8019af6:	81a3      	strhne	r3, [r4, #12]
 8019af8:	bd10      	pop	{r4, pc}

08019afa <__sclose>:
 8019afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019afe:	f000 b903 	b.w	8019d08 <_close_r>

08019b02 <__swbuf_r>:
 8019b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b04:	460e      	mov	r6, r1
 8019b06:	4614      	mov	r4, r2
 8019b08:	4605      	mov	r5, r0
 8019b0a:	b118      	cbz	r0, 8019b14 <__swbuf_r+0x12>
 8019b0c:	6a03      	ldr	r3, [r0, #32]
 8019b0e:	b90b      	cbnz	r3, 8019b14 <__swbuf_r+0x12>
 8019b10:	f7ff feba 	bl	8019888 <__sinit>
 8019b14:	69a3      	ldr	r3, [r4, #24]
 8019b16:	60a3      	str	r3, [r4, #8]
 8019b18:	89a3      	ldrh	r3, [r4, #12]
 8019b1a:	071a      	lsls	r2, r3, #28
 8019b1c:	d501      	bpl.n	8019b22 <__swbuf_r+0x20>
 8019b1e:	6923      	ldr	r3, [r4, #16]
 8019b20:	b943      	cbnz	r3, 8019b34 <__swbuf_r+0x32>
 8019b22:	4621      	mov	r1, r4
 8019b24:	4628      	mov	r0, r5
 8019b26:	f000 f82b 	bl	8019b80 <__swsetup_r>
 8019b2a:	b118      	cbz	r0, 8019b34 <__swbuf_r+0x32>
 8019b2c:	f04f 37ff 	mov.w	r7, #4294967295
 8019b30:	4638      	mov	r0, r7
 8019b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b34:	6823      	ldr	r3, [r4, #0]
 8019b36:	6922      	ldr	r2, [r4, #16]
 8019b38:	1a98      	subs	r0, r3, r2
 8019b3a:	6963      	ldr	r3, [r4, #20]
 8019b3c:	b2f6      	uxtb	r6, r6
 8019b3e:	4283      	cmp	r3, r0
 8019b40:	4637      	mov	r7, r6
 8019b42:	dc05      	bgt.n	8019b50 <__swbuf_r+0x4e>
 8019b44:	4621      	mov	r1, r4
 8019b46:	4628      	mov	r0, r5
 8019b48:	f001 ff00 	bl	801b94c <_fflush_r>
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	d1ed      	bne.n	8019b2c <__swbuf_r+0x2a>
 8019b50:	68a3      	ldr	r3, [r4, #8]
 8019b52:	3b01      	subs	r3, #1
 8019b54:	60a3      	str	r3, [r4, #8]
 8019b56:	6823      	ldr	r3, [r4, #0]
 8019b58:	1c5a      	adds	r2, r3, #1
 8019b5a:	6022      	str	r2, [r4, #0]
 8019b5c:	701e      	strb	r6, [r3, #0]
 8019b5e:	6962      	ldr	r2, [r4, #20]
 8019b60:	1c43      	adds	r3, r0, #1
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d004      	beq.n	8019b70 <__swbuf_r+0x6e>
 8019b66:	89a3      	ldrh	r3, [r4, #12]
 8019b68:	07db      	lsls	r3, r3, #31
 8019b6a:	d5e1      	bpl.n	8019b30 <__swbuf_r+0x2e>
 8019b6c:	2e0a      	cmp	r6, #10
 8019b6e:	d1df      	bne.n	8019b30 <__swbuf_r+0x2e>
 8019b70:	4621      	mov	r1, r4
 8019b72:	4628      	mov	r0, r5
 8019b74:	f001 feea 	bl	801b94c <_fflush_r>
 8019b78:	2800      	cmp	r0, #0
 8019b7a:	d0d9      	beq.n	8019b30 <__swbuf_r+0x2e>
 8019b7c:	e7d6      	b.n	8019b2c <__swbuf_r+0x2a>
	...

08019b80 <__swsetup_r>:
 8019b80:	b538      	push	{r3, r4, r5, lr}
 8019b82:	4b29      	ldr	r3, [pc, #164]	@ (8019c28 <__swsetup_r+0xa8>)
 8019b84:	4605      	mov	r5, r0
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	460c      	mov	r4, r1
 8019b8a:	b118      	cbz	r0, 8019b94 <__swsetup_r+0x14>
 8019b8c:	6a03      	ldr	r3, [r0, #32]
 8019b8e:	b90b      	cbnz	r3, 8019b94 <__swsetup_r+0x14>
 8019b90:	f7ff fe7a 	bl	8019888 <__sinit>
 8019b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b98:	0719      	lsls	r1, r3, #28
 8019b9a:	d422      	bmi.n	8019be2 <__swsetup_r+0x62>
 8019b9c:	06da      	lsls	r2, r3, #27
 8019b9e:	d407      	bmi.n	8019bb0 <__swsetup_r+0x30>
 8019ba0:	2209      	movs	r2, #9
 8019ba2:	602a      	str	r2, [r5, #0]
 8019ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019ba8:	81a3      	strh	r3, [r4, #12]
 8019baa:	f04f 30ff 	mov.w	r0, #4294967295
 8019bae:	e033      	b.n	8019c18 <__swsetup_r+0x98>
 8019bb0:	0758      	lsls	r0, r3, #29
 8019bb2:	d512      	bpl.n	8019bda <__swsetup_r+0x5a>
 8019bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019bb6:	b141      	cbz	r1, 8019bca <__swsetup_r+0x4a>
 8019bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019bbc:	4299      	cmp	r1, r3
 8019bbe:	d002      	beq.n	8019bc6 <__swsetup_r+0x46>
 8019bc0:	4628      	mov	r0, r5
 8019bc2:	f000 ff23 	bl	801aa0c <_free_r>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8019bca:	89a3      	ldrh	r3, [r4, #12]
 8019bcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019bd0:	81a3      	strh	r3, [r4, #12]
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	6063      	str	r3, [r4, #4]
 8019bd6:	6923      	ldr	r3, [r4, #16]
 8019bd8:	6023      	str	r3, [r4, #0]
 8019bda:	89a3      	ldrh	r3, [r4, #12]
 8019bdc:	f043 0308 	orr.w	r3, r3, #8
 8019be0:	81a3      	strh	r3, [r4, #12]
 8019be2:	6923      	ldr	r3, [r4, #16]
 8019be4:	b94b      	cbnz	r3, 8019bfa <__swsetup_r+0x7a>
 8019be6:	89a3      	ldrh	r3, [r4, #12]
 8019be8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bf0:	d003      	beq.n	8019bfa <__swsetup_r+0x7a>
 8019bf2:	4621      	mov	r1, r4
 8019bf4:	4628      	mov	r0, r5
 8019bf6:	f001 ff09 	bl	801ba0c <__smakebuf_r>
 8019bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bfe:	f013 0201 	ands.w	r2, r3, #1
 8019c02:	d00a      	beq.n	8019c1a <__swsetup_r+0x9a>
 8019c04:	2200      	movs	r2, #0
 8019c06:	60a2      	str	r2, [r4, #8]
 8019c08:	6962      	ldr	r2, [r4, #20]
 8019c0a:	4252      	negs	r2, r2
 8019c0c:	61a2      	str	r2, [r4, #24]
 8019c0e:	6922      	ldr	r2, [r4, #16]
 8019c10:	b942      	cbnz	r2, 8019c24 <__swsetup_r+0xa4>
 8019c12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019c16:	d1c5      	bne.n	8019ba4 <__swsetup_r+0x24>
 8019c18:	bd38      	pop	{r3, r4, r5, pc}
 8019c1a:	0799      	lsls	r1, r3, #30
 8019c1c:	bf58      	it	pl
 8019c1e:	6962      	ldrpl	r2, [r4, #20]
 8019c20:	60a2      	str	r2, [r4, #8]
 8019c22:	e7f4      	b.n	8019c0e <__swsetup_r+0x8e>
 8019c24:	2000      	movs	r0, #0
 8019c26:	e7f7      	b.n	8019c18 <__swsetup_r+0x98>
 8019c28:	20000028 	.word	0x20000028

08019c2c <memcmp>:
 8019c2c:	b510      	push	{r4, lr}
 8019c2e:	3901      	subs	r1, #1
 8019c30:	4402      	add	r2, r0
 8019c32:	4290      	cmp	r0, r2
 8019c34:	d101      	bne.n	8019c3a <memcmp+0xe>
 8019c36:	2000      	movs	r0, #0
 8019c38:	e005      	b.n	8019c46 <memcmp+0x1a>
 8019c3a:	7803      	ldrb	r3, [r0, #0]
 8019c3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019c40:	42a3      	cmp	r3, r4
 8019c42:	d001      	beq.n	8019c48 <memcmp+0x1c>
 8019c44:	1b18      	subs	r0, r3, r4
 8019c46:	bd10      	pop	{r4, pc}
 8019c48:	3001      	adds	r0, #1
 8019c4a:	e7f2      	b.n	8019c32 <memcmp+0x6>

08019c4c <memmove>:
 8019c4c:	4288      	cmp	r0, r1
 8019c4e:	b510      	push	{r4, lr}
 8019c50:	eb01 0402 	add.w	r4, r1, r2
 8019c54:	d902      	bls.n	8019c5c <memmove+0x10>
 8019c56:	4284      	cmp	r4, r0
 8019c58:	4623      	mov	r3, r4
 8019c5a:	d807      	bhi.n	8019c6c <memmove+0x20>
 8019c5c:	1e43      	subs	r3, r0, #1
 8019c5e:	42a1      	cmp	r1, r4
 8019c60:	d008      	beq.n	8019c74 <memmove+0x28>
 8019c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c6a:	e7f8      	b.n	8019c5e <memmove+0x12>
 8019c6c:	4402      	add	r2, r0
 8019c6e:	4601      	mov	r1, r0
 8019c70:	428a      	cmp	r2, r1
 8019c72:	d100      	bne.n	8019c76 <memmove+0x2a>
 8019c74:	bd10      	pop	{r4, pc}
 8019c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c7e:	e7f7      	b.n	8019c70 <memmove+0x24>

08019c80 <memset>:
 8019c80:	4402      	add	r2, r0
 8019c82:	4603      	mov	r3, r0
 8019c84:	4293      	cmp	r3, r2
 8019c86:	d100      	bne.n	8019c8a <memset+0xa>
 8019c88:	4770      	bx	lr
 8019c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8019c8e:	e7f9      	b.n	8019c84 <memset+0x4>

08019c90 <strcat>:
 8019c90:	b510      	push	{r4, lr}
 8019c92:	4602      	mov	r2, r0
 8019c94:	7814      	ldrb	r4, [r2, #0]
 8019c96:	4613      	mov	r3, r2
 8019c98:	3201      	adds	r2, #1
 8019c9a:	2c00      	cmp	r4, #0
 8019c9c:	d1fa      	bne.n	8019c94 <strcat+0x4>
 8019c9e:	3b01      	subs	r3, #1
 8019ca0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019ca4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019ca8:	2a00      	cmp	r2, #0
 8019caa:	d1f9      	bne.n	8019ca0 <strcat+0x10>
 8019cac:	bd10      	pop	{r4, pc}

08019cae <strncpy>:
 8019cae:	b510      	push	{r4, lr}
 8019cb0:	3901      	subs	r1, #1
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	b132      	cbz	r2, 8019cc4 <strncpy+0x16>
 8019cb6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019cba:	f803 4b01 	strb.w	r4, [r3], #1
 8019cbe:	3a01      	subs	r2, #1
 8019cc0:	2c00      	cmp	r4, #0
 8019cc2:	d1f7      	bne.n	8019cb4 <strncpy+0x6>
 8019cc4:	441a      	add	r2, r3
 8019cc6:	2100      	movs	r1, #0
 8019cc8:	4293      	cmp	r3, r2
 8019cca:	d100      	bne.n	8019cce <strncpy+0x20>
 8019ccc:	bd10      	pop	{r4, pc}
 8019cce:	f803 1b01 	strb.w	r1, [r3], #1
 8019cd2:	e7f9      	b.n	8019cc8 <strncpy+0x1a>

08019cd4 <strstr>:
 8019cd4:	780a      	ldrb	r2, [r1, #0]
 8019cd6:	b570      	push	{r4, r5, r6, lr}
 8019cd8:	b96a      	cbnz	r2, 8019cf6 <strstr+0x22>
 8019cda:	bd70      	pop	{r4, r5, r6, pc}
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d109      	bne.n	8019cf4 <strstr+0x20>
 8019ce0:	460c      	mov	r4, r1
 8019ce2:	4605      	mov	r5, r0
 8019ce4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d0f6      	beq.n	8019cda <strstr+0x6>
 8019cec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019cf0:	429e      	cmp	r6, r3
 8019cf2:	d0f7      	beq.n	8019ce4 <strstr+0x10>
 8019cf4:	3001      	adds	r0, #1
 8019cf6:	7803      	ldrb	r3, [r0, #0]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d1ef      	bne.n	8019cdc <strstr+0x8>
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	e7ec      	b.n	8019cda <strstr+0x6>

08019d00 <_localeconv_r>:
 8019d00:	4800      	ldr	r0, [pc, #0]	@ (8019d04 <_localeconv_r+0x4>)
 8019d02:	4770      	bx	lr
 8019d04:	20000168 	.word	0x20000168

08019d08 <_close_r>:
 8019d08:	b538      	push	{r3, r4, r5, lr}
 8019d0a:	4d06      	ldr	r5, [pc, #24]	@ (8019d24 <_close_r+0x1c>)
 8019d0c:	2300      	movs	r3, #0
 8019d0e:	4604      	mov	r4, r0
 8019d10:	4608      	mov	r0, r1
 8019d12:	602b      	str	r3, [r5, #0]
 8019d14:	f7e7 fcbe 	bl	8001694 <_close>
 8019d18:	1c43      	adds	r3, r0, #1
 8019d1a:	d102      	bne.n	8019d22 <_close_r+0x1a>
 8019d1c:	682b      	ldr	r3, [r5, #0]
 8019d1e:	b103      	cbz	r3, 8019d22 <_close_r+0x1a>
 8019d20:	6023      	str	r3, [r4, #0]
 8019d22:	bd38      	pop	{r3, r4, r5, pc}
 8019d24:	20011e74 	.word	0x20011e74

08019d28 <_lseek_r>:
 8019d28:	b538      	push	{r3, r4, r5, lr}
 8019d2a:	4d07      	ldr	r5, [pc, #28]	@ (8019d48 <_lseek_r+0x20>)
 8019d2c:	4604      	mov	r4, r0
 8019d2e:	4608      	mov	r0, r1
 8019d30:	4611      	mov	r1, r2
 8019d32:	2200      	movs	r2, #0
 8019d34:	602a      	str	r2, [r5, #0]
 8019d36:	461a      	mov	r2, r3
 8019d38:	f7e7 fcd3 	bl	80016e2 <_lseek>
 8019d3c:	1c43      	adds	r3, r0, #1
 8019d3e:	d102      	bne.n	8019d46 <_lseek_r+0x1e>
 8019d40:	682b      	ldr	r3, [r5, #0]
 8019d42:	b103      	cbz	r3, 8019d46 <_lseek_r+0x1e>
 8019d44:	6023      	str	r3, [r4, #0]
 8019d46:	bd38      	pop	{r3, r4, r5, pc}
 8019d48:	20011e74 	.word	0x20011e74

08019d4c <_read_r>:
 8019d4c:	b538      	push	{r3, r4, r5, lr}
 8019d4e:	4d07      	ldr	r5, [pc, #28]	@ (8019d6c <_read_r+0x20>)
 8019d50:	4604      	mov	r4, r0
 8019d52:	4608      	mov	r0, r1
 8019d54:	4611      	mov	r1, r2
 8019d56:	2200      	movs	r2, #0
 8019d58:	602a      	str	r2, [r5, #0]
 8019d5a:	461a      	mov	r2, r3
 8019d5c:	f7e7 fc7d 	bl	800165a <_read>
 8019d60:	1c43      	adds	r3, r0, #1
 8019d62:	d102      	bne.n	8019d6a <_read_r+0x1e>
 8019d64:	682b      	ldr	r3, [r5, #0]
 8019d66:	b103      	cbz	r3, 8019d6a <_read_r+0x1e>
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	bd38      	pop	{r3, r4, r5, pc}
 8019d6c:	20011e74 	.word	0x20011e74

08019d70 <_write_r>:
 8019d70:	b538      	push	{r3, r4, r5, lr}
 8019d72:	4d07      	ldr	r5, [pc, #28]	@ (8019d90 <_write_r+0x20>)
 8019d74:	4604      	mov	r4, r0
 8019d76:	4608      	mov	r0, r1
 8019d78:	4611      	mov	r1, r2
 8019d7a:	2200      	movs	r2, #0
 8019d7c:	602a      	str	r2, [r5, #0]
 8019d7e:	461a      	mov	r2, r3
 8019d80:	f7e6 ff9a 	bl	8000cb8 <_write>
 8019d84:	1c43      	adds	r3, r0, #1
 8019d86:	d102      	bne.n	8019d8e <_write_r+0x1e>
 8019d88:	682b      	ldr	r3, [r5, #0]
 8019d8a:	b103      	cbz	r3, 8019d8e <_write_r+0x1e>
 8019d8c:	6023      	str	r3, [r4, #0]
 8019d8e:	bd38      	pop	{r3, r4, r5, pc}
 8019d90:	20011e74 	.word	0x20011e74

08019d94 <__libc_init_array>:
 8019d94:	b570      	push	{r4, r5, r6, lr}
 8019d96:	4d0d      	ldr	r5, [pc, #52]	@ (8019dcc <__libc_init_array+0x38>)
 8019d98:	4c0d      	ldr	r4, [pc, #52]	@ (8019dd0 <__libc_init_array+0x3c>)
 8019d9a:	1b64      	subs	r4, r4, r5
 8019d9c:	10a4      	asrs	r4, r4, #2
 8019d9e:	2600      	movs	r6, #0
 8019da0:	42a6      	cmp	r6, r4
 8019da2:	d109      	bne.n	8019db8 <__libc_init_array+0x24>
 8019da4:	4d0b      	ldr	r5, [pc, #44]	@ (8019dd4 <__libc_init_array+0x40>)
 8019da6:	4c0c      	ldr	r4, [pc, #48]	@ (8019dd8 <__libc_init_array+0x44>)
 8019da8:	f001 ff52 	bl	801bc50 <_init>
 8019dac:	1b64      	subs	r4, r4, r5
 8019dae:	10a4      	asrs	r4, r4, #2
 8019db0:	2600      	movs	r6, #0
 8019db2:	42a6      	cmp	r6, r4
 8019db4:	d105      	bne.n	8019dc2 <__libc_init_array+0x2e>
 8019db6:	bd70      	pop	{r4, r5, r6, pc}
 8019db8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019dbc:	4798      	blx	r3
 8019dbe:	3601      	adds	r6, #1
 8019dc0:	e7ee      	b.n	8019da0 <__libc_init_array+0xc>
 8019dc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019dc6:	4798      	blx	r3
 8019dc8:	3601      	adds	r6, #1
 8019dca:	e7f2      	b.n	8019db2 <__libc_init_array+0x1e>
 8019dcc:	0801fa44 	.word	0x0801fa44
 8019dd0:	0801fa44 	.word	0x0801fa44
 8019dd4:	0801fa44 	.word	0x0801fa44
 8019dd8:	0801fa48 	.word	0x0801fa48

08019ddc <__retarget_lock_init_recursive>:
 8019ddc:	4770      	bx	lr

08019dde <__retarget_lock_acquire_recursive>:
 8019dde:	4770      	bx	lr

08019de0 <__retarget_lock_release_recursive>:
 8019de0:	4770      	bx	lr

08019de2 <strcpy>:
 8019de2:	4603      	mov	r3, r0
 8019de4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019de8:	f803 2b01 	strb.w	r2, [r3], #1
 8019dec:	2a00      	cmp	r2, #0
 8019dee:	d1f9      	bne.n	8019de4 <strcpy+0x2>
 8019df0:	4770      	bx	lr

08019df2 <memcpy>:
 8019df2:	440a      	add	r2, r1
 8019df4:	4291      	cmp	r1, r2
 8019df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8019dfa:	d100      	bne.n	8019dfe <memcpy+0xc>
 8019dfc:	4770      	bx	lr
 8019dfe:	b510      	push	{r4, lr}
 8019e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019e08:	4291      	cmp	r1, r2
 8019e0a:	d1f9      	bne.n	8019e00 <memcpy+0xe>
 8019e0c:	bd10      	pop	{r4, pc}
	...

08019e10 <__assert_func>:
 8019e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e12:	4614      	mov	r4, r2
 8019e14:	461a      	mov	r2, r3
 8019e16:	4b09      	ldr	r3, [pc, #36]	@ (8019e3c <__assert_func+0x2c>)
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	4605      	mov	r5, r0
 8019e1c:	68d8      	ldr	r0, [r3, #12]
 8019e1e:	b954      	cbnz	r4, 8019e36 <__assert_func+0x26>
 8019e20:	4b07      	ldr	r3, [pc, #28]	@ (8019e40 <__assert_func+0x30>)
 8019e22:	461c      	mov	r4, r3
 8019e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e28:	9100      	str	r1, [sp, #0]
 8019e2a:	462b      	mov	r3, r5
 8019e2c:	4905      	ldr	r1, [pc, #20]	@ (8019e44 <__assert_func+0x34>)
 8019e2e:	f001 fdb5 	bl	801b99c <fiprintf>
 8019e32:	f001 fe59 	bl	801bae8 <abort>
 8019e36:	4b04      	ldr	r3, [pc, #16]	@ (8019e48 <__assert_func+0x38>)
 8019e38:	e7f4      	b.n	8019e24 <__assert_func+0x14>
 8019e3a:	bf00      	nop
 8019e3c:	20000028 	.word	0x20000028
 8019e40:	0801f851 	.word	0x0801f851
 8019e44:	0801f823 	.word	0x0801f823
 8019e48:	0801f816 	.word	0x0801f816

08019e4c <quorem>:
 8019e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e50:	6903      	ldr	r3, [r0, #16]
 8019e52:	690c      	ldr	r4, [r1, #16]
 8019e54:	42a3      	cmp	r3, r4
 8019e56:	4607      	mov	r7, r0
 8019e58:	db7e      	blt.n	8019f58 <quorem+0x10c>
 8019e5a:	3c01      	subs	r4, #1
 8019e5c:	f101 0814 	add.w	r8, r1, #20
 8019e60:	00a3      	lsls	r3, r4, #2
 8019e62:	f100 0514 	add.w	r5, r0, #20
 8019e66:	9300      	str	r3, [sp, #0]
 8019e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019e6c:	9301      	str	r3, [sp, #4]
 8019e6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019e76:	3301      	adds	r3, #1
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019e7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8019e82:	d32e      	bcc.n	8019ee2 <quorem+0x96>
 8019e84:	f04f 0a00 	mov.w	sl, #0
 8019e88:	46c4      	mov	ip, r8
 8019e8a:	46ae      	mov	lr, r5
 8019e8c:	46d3      	mov	fp, sl
 8019e8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019e92:	b298      	uxth	r0, r3
 8019e94:	fb06 a000 	mla	r0, r6, r0, sl
 8019e98:	0c02      	lsrs	r2, r0, #16
 8019e9a:	0c1b      	lsrs	r3, r3, #16
 8019e9c:	fb06 2303 	mla	r3, r6, r3, r2
 8019ea0:	f8de 2000 	ldr.w	r2, [lr]
 8019ea4:	b280      	uxth	r0, r0
 8019ea6:	b292      	uxth	r2, r2
 8019ea8:	1a12      	subs	r2, r2, r0
 8019eaa:	445a      	add	r2, fp
 8019eac:	f8de 0000 	ldr.w	r0, [lr]
 8019eb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019eb4:	b29b      	uxth	r3, r3
 8019eb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019eba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019ebe:	b292      	uxth	r2, r2
 8019ec0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019ec4:	45e1      	cmp	r9, ip
 8019ec6:	f84e 2b04 	str.w	r2, [lr], #4
 8019eca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019ece:	d2de      	bcs.n	8019e8e <quorem+0x42>
 8019ed0:	9b00      	ldr	r3, [sp, #0]
 8019ed2:	58eb      	ldr	r3, [r5, r3]
 8019ed4:	b92b      	cbnz	r3, 8019ee2 <quorem+0x96>
 8019ed6:	9b01      	ldr	r3, [sp, #4]
 8019ed8:	3b04      	subs	r3, #4
 8019eda:	429d      	cmp	r5, r3
 8019edc:	461a      	mov	r2, r3
 8019ede:	d32f      	bcc.n	8019f40 <quorem+0xf4>
 8019ee0:	613c      	str	r4, [r7, #16]
 8019ee2:	4638      	mov	r0, r7
 8019ee4:	f001 f90c 	bl	801b100 <__mcmp>
 8019ee8:	2800      	cmp	r0, #0
 8019eea:	db25      	blt.n	8019f38 <quorem+0xec>
 8019eec:	4629      	mov	r1, r5
 8019eee:	2000      	movs	r0, #0
 8019ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8019ef4:	f8d1 c000 	ldr.w	ip, [r1]
 8019ef8:	fa1f fe82 	uxth.w	lr, r2
 8019efc:	fa1f f38c 	uxth.w	r3, ip
 8019f00:	eba3 030e 	sub.w	r3, r3, lr
 8019f04:	4403      	add	r3, r0
 8019f06:	0c12      	lsrs	r2, r2, #16
 8019f08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019f0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019f16:	45c1      	cmp	r9, r8
 8019f18:	f841 3b04 	str.w	r3, [r1], #4
 8019f1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019f20:	d2e6      	bcs.n	8019ef0 <quorem+0xa4>
 8019f22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019f2a:	b922      	cbnz	r2, 8019f36 <quorem+0xea>
 8019f2c:	3b04      	subs	r3, #4
 8019f2e:	429d      	cmp	r5, r3
 8019f30:	461a      	mov	r2, r3
 8019f32:	d30b      	bcc.n	8019f4c <quorem+0x100>
 8019f34:	613c      	str	r4, [r7, #16]
 8019f36:	3601      	adds	r6, #1
 8019f38:	4630      	mov	r0, r6
 8019f3a:	b003      	add	sp, #12
 8019f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f40:	6812      	ldr	r2, [r2, #0]
 8019f42:	3b04      	subs	r3, #4
 8019f44:	2a00      	cmp	r2, #0
 8019f46:	d1cb      	bne.n	8019ee0 <quorem+0x94>
 8019f48:	3c01      	subs	r4, #1
 8019f4a:	e7c6      	b.n	8019eda <quorem+0x8e>
 8019f4c:	6812      	ldr	r2, [r2, #0]
 8019f4e:	3b04      	subs	r3, #4
 8019f50:	2a00      	cmp	r2, #0
 8019f52:	d1ef      	bne.n	8019f34 <quorem+0xe8>
 8019f54:	3c01      	subs	r4, #1
 8019f56:	e7ea      	b.n	8019f2e <quorem+0xe2>
 8019f58:	2000      	movs	r0, #0
 8019f5a:	e7ee      	b.n	8019f3a <quorem+0xee>
 8019f5c:	0000      	movs	r0, r0
	...

08019f60 <_dtoa_r>:
 8019f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f64:	ed2d 8b02 	vpush	{d8}
 8019f68:	69c7      	ldr	r7, [r0, #28]
 8019f6a:	b091      	sub	sp, #68	@ 0x44
 8019f6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019f70:	ec55 4b10 	vmov	r4, r5, d0
 8019f74:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019f76:	9107      	str	r1, [sp, #28]
 8019f78:	4681      	mov	r9, r0
 8019f7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8019f7e:	b97f      	cbnz	r7, 8019fa0 <_dtoa_r+0x40>
 8019f80:	2010      	movs	r0, #16
 8019f82:	f000 fd8d 	bl	801aaa0 <malloc>
 8019f86:	4602      	mov	r2, r0
 8019f88:	f8c9 001c 	str.w	r0, [r9, #28]
 8019f8c:	b920      	cbnz	r0, 8019f98 <_dtoa_r+0x38>
 8019f8e:	4ba0      	ldr	r3, [pc, #640]	@ (801a210 <_dtoa_r+0x2b0>)
 8019f90:	21ef      	movs	r1, #239	@ 0xef
 8019f92:	48a0      	ldr	r0, [pc, #640]	@ (801a214 <_dtoa_r+0x2b4>)
 8019f94:	f7ff ff3c 	bl	8019e10 <__assert_func>
 8019f98:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019f9c:	6007      	str	r7, [r0, #0]
 8019f9e:	60c7      	str	r7, [r0, #12]
 8019fa0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019fa4:	6819      	ldr	r1, [r3, #0]
 8019fa6:	b159      	cbz	r1, 8019fc0 <_dtoa_r+0x60>
 8019fa8:	685a      	ldr	r2, [r3, #4]
 8019faa:	604a      	str	r2, [r1, #4]
 8019fac:	2301      	movs	r3, #1
 8019fae:	4093      	lsls	r3, r2
 8019fb0:	608b      	str	r3, [r1, #8]
 8019fb2:	4648      	mov	r0, r9
 8019fb4:	f000 fe6a 	bl	801ac8c <_Bfree>
 8019fb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019fbc:	2200      	movs	r2, #0
 8019fbe:	601a      	str	r2, [r3, #0]
 8019fc0:	1e2b      	subs	r3, r5, #0
 8019fc2:	bfbb      	ittet	lt
 8019fc4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019fc8:	9303      	strlt	r3, [sp, #12]
 8019fca:	2300      	movge	r3, #0
 8019fcc:	2201      	movlt	r2, #1
 8019fce:	bfac      	ite	ge
 8019fd0:	6033      	strge	r3, [r6, #0]
 8019fd2:	6032      	strlt	r2, [r6, #0]
 8019fd4:	4b90      	ldr	r3, [pc, #576]	@ (801a218 <_dtoa_r+0x2b8>)
 8019fd6:	9e03      	ldr	r6, [sp, #12]
 8019fd8:	43b3      	bics	r3, r6
 8019fda:	d110      	bne.n	8019ffe <_dtoa_r+0x9e>
 8019fdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fde:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019fe2:	6013      	str	r3, [r2, #0]
 8019fe4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019fe8:	4323      	orrs	r3, r4
 8019fea:	f000 84de 	beq.w	801a9aa <_dtoa_r+0xa4a>
 8019fee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019ff0:	4f8a      	ldr	r7, [pc, #552]	@ (801a21c <_dtoa_r+0x2bc>)
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	f000 84e0 	beq.w	801a9b8 <_dtoa_r+0xa58>
 8019ff8:	1cfb      	adds	r3, r7, #3
 8019ffa:	f000 bcdb 	b.w	801a9b4 <_dtoa_r+0xa54>
 8019ffe:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a002:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a00a:	d10a      	bne.n	801a022 <_dtoa_r+0xc2>
 801a00c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a00e:	2301      	movs	r3, #1
 801a010:	6013      	str	r3, [r2, #0]
 801a012:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a014:	b113      	cbz	r3, 801a01c <_dtoa_r+0xbc>
 801a016:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a018:	4b81      	ldr	r3, [pc, #516]	@ (801a220 <_dtoa_r+0x2c0>)
 801a01a:	6013      	str	r3, [r2, #0]
 801a01c:	4f81      	ldr	r7, [pc, #516]	@ (801a224 <_dtoa_r+0x2c4>)
 801a01e:	f000 bccb 	b.w	801a9b8 <_dtoa_r+0xa58>
 801a022:	aa0e      	add	r2, sp, #56	@ 0x38
 801a024:	a90f      	add	r1, sp, #60	@ 0x3c
 801a026:	4648      	mov	r0, r9
 801a028:	eeb0 0b48 	vmov.f64	d0, d8
 801a02c:	f001 f918 	bl	801b260 <__d2b>
 801a030:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a036:	9001      	str	r0, [sp, #4]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d045      	beq.n	801a0c8 <_dtoa_r+0x168>
 801a03c:	eeb0 7b48 	vmov.f64	d7, d8
 801a040:	ee18 1a90 	vmov	r1, s17
 801a044:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a048:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a04c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a050:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a054:	2500      	movs	r5, #0
 801a056:	ee07 1a90 	vmov	s15, r1
 801a05a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a05e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a1f8 <_dtoa_r+0x298>
 801a062:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a066:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a200 <_dtoa_r+0x2a0>
 801a06a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a06e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a208 <_dtoa_r+0x2a8>
 801a072:	ee07 3a90 	vmov	s15, r3
 801a076:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a07a:	eeb0 7b46 	vmov.f64	d7, d6
 801a07e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a082:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a086:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a08e:	ee16 8a90 	vmov	r8, s13
 801a092:	d508      	bpl.n	801a0a6 <_dtoa_r+0x146>
 801a094:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a098:	eeb4 6b47 	vcmp.f64	d6, d7
 801a09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0a0:	bf18      	it	ne
 801a0a2:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a0a6:	f1b8 0f16 	cmp.w	r8, #22
 801a0aa:	d82b      	bhi.n	801a104 <_dtoa_r+0x1a4>
 801a0ac:	495e      	ldr	r1, [pc, #376]	@ (801a228 <_dtoa_r+0x2c8>)
 801a0ae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a0b2:	ed91 7b00 	vldr	d7, [r1]
 801a0b6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0be:	d501      	bpl.n	801a0c4 <_dtoa_r+0x164>
 801a0c0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0c4:	2100      	movs	r1, #0
 801a0c6:	e01e      	b.n	801a106 <_dtoa_r+0x1a6>
 801a0c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0ca:	4413      	add	r3, r2
 801a0cc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a0d0:	2920      	cmp	r1, #32
 801a0d2:	bfc1      	itttt	gt
 801a0d4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a0d8:	408e      	lslgt	r6, r1
 801a0da:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a0de:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a0e2:	bfd6      	itet	le
 801a0e4:	f1c1 0120 	rsble	r1, r1, #32
 801a0e8:	4331      	orrgt	r1, r6
 801a0ea:	fa04 f101 	lslle.w	r1, r4, r1
 801a0ee:	ee07 1a90 	vmov	s15, r1
 801a0f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a0f6:	3b01      	subs	r3, #1
 801a0f8:	ee17 1a90 	vmov	r1, s15
 801a0fc:	2501      	movs	r5, #1
 801a0fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a102:	e7a8      	b.n	801a056 <_dtoa_r+0xf6>
 801a104:	2101      	movs	r1, #1
 801a106:	1ad2      	subs	r2, r2, r3
 801a108:	1e53      	subs	r3, r2, #1
 801a10a:	9306      	str	r3, [sp, #24]
 801a10c:	bf45      	ittet	mi
 801a10e:	f1c2 0301 	rsbmi	r3, r2, #1
 801a112:	9305      	strmi	r3, [sp, #20]
 801a114:	2300      	movpl	r3, #0
 801a116:	2300      	movmi	r3, #0
 801a118:	bf4c      	ite	mi
 801a11a:	9306      	strmi	r3, [sp, #24]
 801a11c:	9305      	strpl	r3, [sp, #20]
 801a11e:	f1b8 0f00 	cmp.w	r8, #0
 801a122:	910c      	str	r1, [sp, #48]	@ 0x30
 801a124:	db18      	blt.n	801a158 <_dtoa_r+0x1f8>
 801a126:	9b06      	ldr	r3, [sp, #24]
 801a128:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a12c:	4443      	add	r3, r8
 801a12e:	9306      	str	r3, [sp, #24]
 801a130:	2300      	movs	r3, #0
 801a132:	9a07      	ldr	r2, [sp, #28]
 801a134:	2a09      	cmp	r2, #9
 801a136:	d849      	bhi.n	801a1cc <_dtoa_r+0x26c>
 801a138:	2a05      	cmp	r2, #5
 801a13a:	bfc4      	itt	gt
 801a13c:	3a04      	subgt	r2, #4
 801a13e:	9207      	strgt	r2, [sp, #28]
 801a140:	9a07      	ldr	r2, [sp, #28]
 801a142:	f1a2 0202 	sub.w	r2, r2, #2
 801a146:	bfcc      	ite	gt
 801a148:	2400      	movgt	r4, #0
 801a14a:	2401      	movle	r4, #1
 801a14c:	2a03      	cmp	r2, #3
 801a14e:	d848      	bhi.n	801a1e2 <_dtoa_r+0x282>
 801a150:	e8df f002 	tbb	[pc, r2]
 801a154:	3a2c2e0b 	.word	0x3a2c2e0b
 801a158:	9b05      	ldr	r3, [sp, #20]
 801a15a:	2200      	movs	r2, #0
 801a15c:	eba3 0308 	sub.w	r3, r3, r8
 801a160:	9305      	str	r3, [sp, #20]
 801a162:	920a      	str	r2, [sp, #40]	@ 0x28
 801a164:	f1c8 0300 	rsb	r3, r8, #0
 801a168:	e7e3      	b.n	801a132 <_dtoa_r+0x1d2>
 801a16a:	2200      	movs	r2, #0
 801a16c:	9208      	str	r2, [sp, #32]
 801a16e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a170:	2a00      	cmp	r2, #0
 801a172:	dc39      	bgt.n	801a1e8 <_dtoa_r+0x288>
 801a174:	f04f 0b01 	mov.w	fp, #1
 801a178:	46da      	mov	sl, fp
 801a17a:	465a      	mov	r2, fp
 801a17c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a180:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a184:	2100      	movs	r1, #0
 801a186:	2004      	movs	r0, #4
 801a188:	f100 0614 	add.w	r6, r0, #20
 801a18c:	4296      	cmp	r6, r2
 801a18e:	d930      	bls.n	801a1f2 <_dtoa_r+0x292>
 801a190:	6079      	str	r1, [r7, #4]
 801a192:	4648      	mov	r0, r9
 801a194:	9304      	str	r3, [sp, #16]
 801a196:	f000 fd39 	bl	801ac0c <_Balloc>
 801a19a:	9b04      	ldr	r3, [sp, #16]
 801a19c:	4607      	mov	r7, r0
 801a19e:	2800      	cmp	r0, #0
 801a1a0:	d146      	bne.n	801a230 <_dtoa_r+0x2d0>
 801a1a2:	4b22      	ldr	r3, [pc, #136]	@ (801a22c <_dtoa_r+0x2cc>)
 801a1a4:	4602      	mov	r2, r0
 801a1a6:	f240 11af 	movw	r1, #431	@ 0x1af
 801a1aa:	e6f2      	b.n	8019f92 <_dtoa_r+0x32>
 801a1ac:	2201      	movs	r2, #1
 801a1ae:	e7dd      	b.n	801a16c <_dtoa_r+0x20c>
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	9208      	str	r2, [sp, #32]
 801a1b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1b6:	eb08 0b02 	add.w	fp, r8, r2
 801a1ba:	f10b 0a01 	add.w	sl, fp, #1
 801a1be:	4652      	mov	r2, sl
 801a1c0:	2a01      	cmp	r2, #1
 801a1c2:	bfb8      	it	lt
 801a1c4:	2201      	movlt	r2, #1
 801a1c6:	e7db      	b.n	801a180 <_dtoa_r+0x220>
 801a1c8:	2201      	movs	r2, #1
 801a1ca:	e7f2      	b.n	801a1b2 <_dtoa_r+0x252>
 801a1cc:	2401      	movs	r4, #1
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a1d4:	f04f 3bff 	mov.w	fp, #4294967295
 801a1d8:	2100      	movs	r1, #0
 801a1da:	46da      	mov	sl, fp
 801a1dc:	2212      	movs	r2, #18
 801a1de:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1e0:	e7ce      	b.n	801a180 <_dtoa_r+0x220>
 801a1e2:	2201      	movs	r2, #1
 801a1e4:	9208      	str	r2, [sp, #32]
 801a1e6:	e7f5      	b.n	801a1d4 <_dtoa_r+0x274>
 801a1e8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a1ec:	46da      	mov	sl, fp
 801a1ee:	465a      	mov	r2, fp
 801a1f0:	e7c6      	b.n	801a180 <_dtoa_r+0x220>
 801a1f2:	3101      	adds	r1, #1
 801a1f4:	0040      	lsls	r0, r0, #1
 801a1f6:	e7c7      	b.n	801a188 <_dtoa_r+0x228>
 801a1f8:	636f4361 	.word	0x636f4361
 801a1fc:	3fd287a7 	.word	0x3fd287a7
 801a200:	8b60c8b3 	.word	0x8b60c8b3
 801a204:	3fc68a28 	.word	0x3fc68a28
 801a208:	509f79fb 	.word	0x509f79fb
 801a20c:	3fd34413 	.word	0x3fd34413
 801a210:	0801f672 	.word	0x0801f672
 801a214:	0801f85f 	.word	0x0801f85f
 801a218:	7ff00000 	.word	0x7ff00000
 801a21c:	0801f85b 	.word	0x0801f85b
 801a220:	0801f7f3 	.word	0x0801f7f3
 801a224:	0801f7f2 	.word	0x0801f7f2
 801a228:	0801f958 	.word	0x0801f958
 801a22c:	0801f8b7 	.word	0x0801f8b7
 801a230:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a234:	f1ba 0f0e 	cmp.w	sl, #14
 801a238:	6010      	str	r0, [r2, #0]
 801a23a:	d86f      	bhi.n	801a31c <_dtoa_r+0x3bc>
 801a23c:	2c00      	cmp	r4, #0
 801a23e:	d06d      	beq.n	801a31c <_dtoa_r+0x3bc>
 801a240:	f1b8 0f00 	cmp.w	r8, #0
 801a244:	f340 80c2 	ble.w	801a3cc <_dtoa_r+0x46c>
 801a248:	4aca      	ldr	r2, [pc, #808]	@ (801a574 <_dtoa_r+0x614>)
 801a24a:	f008 010f 	and.w	r1, r8, #15
 801a24e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a252:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a256:	ed92 7b00 	vldr	d7, [r2]
 801a25a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a25e:	f000 80a9 	beq.w	801a3b4 <_dtoa_r+0x454>
 801a262:	4ac5      	ldr	r2, [pc, #788]	@ (801a578 <_dtoa_r+0x618>)
 801a264:	ed92 6b08 	vldr	d6, [r2, #32]
 801a268:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a26c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a270:	f001 010f 	and.w	r1, r1, #15
 801a274:	2203      	movs	r2, #3
 801a276:	48c0      	ldr	r0, [pc, #768]	@ (801a578 <_dtoa_r+0x618>)
 801a278:	2900      	cmp	r1, #0
 801a27a:	f040 809d 	bne.w	801a3b8 <_dtoa_r+0x458>
 801a27e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a282:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a286:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a28a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a28c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a290:	2900      	cmp	r1, #0
 801a292:	f000 80c1 	beq.w	801a418 <_dtoa_r+0x4b8>
 801a296:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a29a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2a2:	f140 80b9 	bpl.w	801a418 <_dtoa_r+0x4b8>
 801a2a6:	f1ba 0f00 	cmp.w	sl, #0
 801a2aa:	f000 80b5 	beq.w	801a418 <_dtoa_r+0x4b8>
 801a2ae:	f1bb 0f00 	cmp.w	fp, #0
 801a2b2:	dd31      	ble.n	801a318 <_dtoa_r+0x3b8>
 801a2b4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a2b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a2bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2c0:	f108 31ff 	add.w	r1, r8, #4294967295
 801a2c4:	9104      	str	r1, [sp, #16]
 801a2c6:	3201      	adds	r2, #1
 801a2c8:	465c      	mov	r4, fp
 801a2ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a2ce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a2d2:	ee07 2a90 	vmov	s15, r2
 801a2d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a2da:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a2de:	ee15 2a90 	vmov	r2, s11
 801a2e2:	ec51 0b15 	vmov	r0, r1, d5
 801a2e6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a2ea:	2c00      	cmp	r4, #0
 801a2ec:	f040 8098 	bne.w	801a420 <_dtoa_r+0x4c0>
 801a2f0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a2f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a2f8:	ec41 0b17 	vmov	d7, r0, r1
 801a2fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a304:	f300 8261 	bgt.w	801a7ca <_dtoa_r+0x86a>
 801a308:	eeb1 7b47 	vneg.f64	d7, d7
 801a30c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a314:	f100 80f5 	bmi.w	801a502 <_dtoa_r+0x5a2>
 801a318:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a31c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a31e:	2a00      	cmp	r2, #0
 801a320:	f2c0 812c 	blt.w	801a57c <_dtoa_r+0x61c>
 801a324:	f1b8 0f0e 	cmp.w	r8, #14
 801a328:	f300 8128 	bgt.w	801a57c <_dtoa_r+0x61c>
 801a32c:	4b91      	ldr	r3, [pc, #580]	@ (801a574 <_dtoa_r+0x614>)
 801a32e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a332:	ed93 6b00 	vldr	d6, [r3]
 801a336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a338:	2b00      	cmp	r3, #0
 801a33a:	da03      	bge.n	801a344 <_dtoa_r+0x3e4>
 801a33c:	f1ba 0f00 	cmp.w	sl, #0
 801a340:	f340 80d2 	ble.w	801a4e8 <_dtoa_r+0x588>
 801a344:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a348:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a34c:	463e      	mov	r6, r7
 801a34e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a352:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a356:	ee15 3a10 	vmov	r3, s10
 801a35a:	3330      	adds	r3, #48	@ 0x30
 801a35c:	f806 3b01 	strb.w	r3, [r6], #1
 801a360:	1bf3      	subs	r3, r6, r7
 801a362:	459a      	cmp	sl, r3
 801a364:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a368:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a36c:	f040 80f8 	bne.w	801a560 <_dtoa_r+0x600>
 801a370:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37c:	f300 80dd 	bgt.w	801a53a <_dtoa_r+0x5da>
 801a380:	eeb4 7b46 	vcmp.f64	d7, d6
 801a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a388:	d104      	bne.n	801a394 <_dtoa_r+0x434>
 801a38a:	ee15 3a10 	vmov	r3, s10
 801a38e:	07db      	lsls	r3, r3, #31
 801a390:	f100 80d3 	bmi.w	801a53a <_dtoa_r+0x5da>
 801a394:	9901      	ldr	r1, [sp, #4]
 801a396:	4648      	mov	r0, r9
 801a398:	f000 fc78 	bl	801ac8c <_Bfree>
 801a39c:	2300      	movs	r3, #0
 801a39e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a3a0:	7033      	strb	r3, [r6, #0]
 801a3a2:	f108 0301 	add.w	r3, r8, #1
 801a3a6:	6013      	str	r3, [r2, #0]
 801a3a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f000 8304 	beq.w	801a9b8 <_dtoa_r+0xa58>
 801a3b0:	601e      	str	r6, [r3, #0]
 801a3b2:	e301      	b.n	801a9b8 <_dtoa_r+0xa58>
 801a3b4:	2202      	movs	r2, #2
 801a3b6:	e75e      	b.n	801a276 <_dtoa_r+0x316>
 801a3b8:	07cc      	lsls	r4, r1, #31
 801a3ba:	d504      	bpl.n	801a3c6 <_dtoa_r+0x466>
 801a3bc:	ed90 6b00 	vldr	d6, [r0]
 801a3c0:	3201      	adds	r2, #1
 801a3c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3c6:	1049      	asrs	r1, r1, #1
 801a3c8:	3008      	adds	r0, #8
 801a3ca:	e755      	b.n	801a278 <_dtoa_r+0x318>
 801a3cc:	d022      	beq.n	801a414 <_dtoa_r+0x4b4>
 801a3ce:	f1c8 0100 	rsb	r1, r8, #0
 801a3d2:	4a68      	ldr	r2, [pc, #416]	@ (801a574 <_dtoa_r+0x614>)
 801a3d4:	f001 000f 	and.w	r0, r1, #15
 801a3d8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a3dc:	ed92 7b00 	vldr	d7, [r2]
 801a3e0:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a3e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3e8:	4863      	ldr	r0, [pc, #396]	@ (801a578 <_dtoa_r+0x618>)
 801a3ea:	1109      	asrs	r1, r1, #4
 801a3ec:	2400      	movs	r4, #0
 801a3ee:	2202      	movs	r2, #2
 801a3f0:	b929      	cbnz	r1, 801a3fe <_dtoa_r+0x49e>
 801a3f2:	2c00      	cmp	r4, #0
 801a3f4:	f43f af49 	beq.w	801a28a <_dtoa_r+0x32a>
 801a3f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3fc:	e745      	b.n	801a28a <_dtoa_r+0x32a>
 801a3fe:	07ce      	lsls	r6, r1, #31
 801a400:	d505      	bpl.n	801a40e <_dtoa_r+0x4ae>
 801a402:	ed90 6b00 	vldr	d6, [r0]
 801a406:	3201      	adds	r2, #1
 801a408:	2401      	movs	r4, #1
 801a40a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a40e:	1049      	asrs	r1, r1, #1
 801a410:	3008      	adds	r0, #8
 801a412:	e7ed      	b.n	801a3f0 <_dtoa_r+0x490>
 801a414:	2202      	movs	r2, #2
 801a416:	e738      	b.n	801a28a <_dtoa_r+0x32a>
 801a418:	f8cd 8010 	str.w	r8, [sp, #16]
 801a41c:	4654      	mov	r4, sl
 801a41e:	e754      	b.n	801a2ca <_dtoa_r+0x36a>
 801a420:	4a54      	ldr	r2, [pc, #336]	@ (801a574 <_dtoa_r+0x614>)
 801a422:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a426:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a42a:	9a08      	ldr	r2, [sp, #32]
 801a42c:	ec41 0b17 	vmov	d7, r0, r1
 801a430:	443c      	add	r4, r7
 801a432:	b34a      	cbz	r2, 801a488 <_dtoa_r+0x528>
 801a434:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a438:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a43c:	463e      	mov	r6, r7
 801a43e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a442:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a446:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a44a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a44e:	ee14 2a90 	vmov	r2, s9
 801a452:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a456:	3230      	adds	r2, #48	@ 0x30
 801a458:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a45c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a464:	f806 2b01 	strb.w	r2, [r6], #1
 801a468:	d438      	bmi.n	801a4dc <_dtoa_r+0x57c>
 801a46a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a46e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a476:	d462      	bmi.n	801a53e <_dtoa_r+0x5de>
 801a478:	42a6      	cmp	r6, r4
 801a47a:	f43f af4d 	beq.w	801a318 <_dtoa_r+0x3b8>
 801a47e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a482:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a486:	e7e0      	b.n	801a44a <_dtoa_r+0x4ea>
 801a488:	4621      	mov	r1, r4
 801a48a:	463e      	mov	r6, r7
 801a48c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a490:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a494:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a498:	ee14 2a90 	vmov	r2, s9
 801a49c:	3230      	adds	r2, #48	@ 0x30
 801a49e:	f806 2b01 	strb.w	r2, [r6], #1
 801a4a2:	42a6      	cmp	r6, r4
 801a4a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a4a8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a4ac:	d119      	bne.n	801a4e2 <_dtoa_r+0x582>
 801a4ae:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a4b2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a4b6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4be:	dc3e      	bgt.n	801a53e <_dtoa_r+0x5de>
 801a4c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a4c4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4cc:	f57f af24 	bpl.w	801a318 <_dtoa_r+0x3b8>
 801a4d0:	460e      	mov	r6, r1
 801a4d2:	3901      	subs	r1, #1
 801a4d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a4d8:	2b30      	cmp	r3, #48	@ 0x30
 801a4da:	d0f9      	beq.n	801a4d0 <_dtoa_r+0x570>
 801a4dc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a4e0:	e758      	b.n	801a394 <_dtoa_r+0x434>
 801a4e2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a4e6:	e7d5      	b.n	801a494 <_dtoa_r+0x534>
 801a4e8:	d10b      	bne.n	801a502 <_dtoa_r+0x5a2>
 801a4ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a4ee:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a4f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a4f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4fe:	f2c0 8161 	blt.w	801a7c4 <_dtoa_r+0x864>
 801a502:	2400      	movs	r4, #0
 801a504:	4625      	mov	r5, r4
 801a506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a508:	43db      	mvns	r3, r3
 801a50a:	9304      	str	r3, [sp, #16]
 801a50c:	463e      	mov	r6, r7
 801a50e:	f04f 0800 	mov.w	r8, #0
 801a512:	4621      	mov	r1, r4
 801a514:	4648      	mov	r0, r9
 801a516:	f000 fbb9 	bl	801ac8c <_Bfree>
 801a51a:	2d00      	cmp	r5, #0
 801a51c:	d0de      	beq.n	801a4dc <_dtoa_r+0x57c>
 801a51e:	f1b8 0f00 	cmp.w	r8, #0
 801a522:	d005      	beq.n	801a530 <_dtoa_r+0x5d0>
 801a524:	45a8      	cmp	r8, r5
 801a526:	d003      	beq.n	801a530 <_dtoa_r+0x5d0>
 801a528:	4641      	mov	r1, r8
 801a52a:	4648      	mov	r0, r9
 801a52c:	f000 fbae 	bl	801ac8c <_Bfree>
 801a530:	4629      	mov	r1, r5
 801a532:	4648      	mov	r0, r9
 801a534:	f000 fbaa 	bl	801ac8c <_Bfree>
 801a538:	e7d0      	b.n	801a4dc <_dtoa_r+0x57c>
 801a53a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a53e:	4633      	mov	r3, r6
 801a540:	461e      	mov	r6, r3
 801a542:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a546:	2a39      	cmp	r2, #57	@ 0x39
 801a548:	d106      	bne.n	801a558 <_dtoa_r+0x5f8>
 801a54a:	429f      	cmp	r7, r3
 801a54c:	d1f8      	bne.n	801a540 <_dtoa_r+0x5e0>
 801a54e:	9a04      	ldr	r2, [sp, #16]
 801a550:	3201      	adds	r2, #1
 801a552:	9204      	str	r2, [sp, #16]
 801a554:	2230      	movs	r2, #48	@ 0x30
 801a556:	703a      	strb	r2, [r7, #0]
 801a558:	781a      	ldrb	r2, [r3, #0]
 801a55a:	3201      	adds	r2, #1
 801a55c:	701a      	strb	r2, [r3, #0]
 801a55e:	e7bd      	b.n	801a4dc <_dtoa_r+0x57c>
 801a560:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a564:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a56c:	f47f aeef 	bne.w	801a34e <_dtoa_r+0x3ee>
 801a570:	e710      	b.n	801a394 <_dtoa_r+0x434>
 801a572:	bf00      	nop
 801a574:	0801f958 	.word	0x0801f958
 801a578:	0801f930 	.word	0x0801f930
 801a57c:	9908      	ldr	r1, [sp, #32]
 801a57e:	2900      	cmp	r1, #0
 801a580:	f000 80e3 	beq.w	801a74a <_dtoa_r+0x7ea>
 801a584:	9907      	ldr	r1, [sp, #28]
 801a586:	2901      	cmp	r1, #1
 801a588:	f300 80c8 	bgt.w	801a71c <_dtoa_r+0x7bc>
 801a58c:	2d00      	cmp	r5, #0
 801a58e:	f000 80c1 	beq.w	801a714 <_dtoa_r+0x7b4>
 801a592:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a596:	9e05      	ldr	r6, [sp, #20]
 801a598:	461c      	mov	r4, r3
 801a59a:	9304      	str	r3, [sp, #16]
 801a59c:	9b05      	ldr	r3, [sp, #20]
 801a59e:	4413      	add	r3, r2
 801a5a0:	9305      	str	r3, [sp, #20]
 801a5a2:	9b06      	ldr	r3, [sp, #24]
 801a5a4:	2101      	movs	r1, #1
 801a5a6:	4413      	add	r3, r2
 801a5a8:	4648      	mov	r0, r9
 801a5aa:	9306      	str	r3, [sp, #24]
 801a5ac:	f000 fc22 	bl	801adf4 <__i2b>
 801a5b0:	9b04      	ldr	r3, [sp, #16]
 801a5b2:	4605      	mov	r5, r0
 801a5b4:	b166      	cbz	r6, 801a5d0 <_dtoa_r+0x670>
 801a5b6:	9a06      	ldr	r2, [sp, #24]
 801a5b8:	2a00      	cmp	r2, #0
 801a5ba:	dd09      	ble.n	801a5d0 <_dtoa_r+0x670>
 801a5bc:	42b2      	cmp	r2, r6
 801a5be:	9905      	ldr	r1, [sp, #20]
 801a5c0:	bfa8      	it	ge
 801a5c2:	4632      	movge	r2, r6
 801a5c4:	1a89      	subs	r1, r1, r2
 801a5c6:	9105      	str	r1, [sp, #20]
 801a5c8:	9906      	ldr	r1, [sp, #24]
 801a5ca:	1ab6      	subs	r6, r6, r2
 801a5cc:	1a8a      	subs	r2, r1, r2
 801a5ce:	9206      	str	r2, [sp, #24]
 801a5d0:	b1fb      	cbz	r3, 801a612 <_dtoa_r+0x6b2>
 801a5d2:	9a08      	ldr	r2, [sp, #32]
 801a5d4:	2a00      	cmp	r2, #0
 801a5d6:	f000 80bc 	beq.w	801a752 <_dtoa_r+0x7f2>
 801a5da:	b19c      	cbz	r4, 801a604 <_dtoa_r+0x6a4>
 801a5dc:	4629      	mov	r1, r5
 801a5de:	4622      	mov	r2, r4
 801a5e0:	4648      	mov	r0, r9
 801a5e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a5e4:	f000 fcc6 	bl	801af74 <__pow5mult>
 801a5e8:	9a01      	ldr	r2, [sp, #4]
 801a5ea:	4601      	mov	r1, r0
 801a5ec:	4605      	mov	r5, r0
 801a5ee:	4648      	mov	r0, r9
 801a5f0:	f000 fc16 	bl	801ae20 <__multiply>
 801a5f4:	9901      	ldr	r1, [sp, #4]
 801a5f6:	9004      	str	r0, [sp, #16]
 801a5f8:	4648      	mov	r0, r9
 801a5fa:	f000 fb47 	bl	801ac8c <_Bfree>
 801a5fe:	9a04      	ldr	r2, [sp, #16]
 801a600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a602:	9201      	str	r2, [sp, #4]
 801a604:	1b1a      	subs	r2, r3, r4
 801a606:	d004      	beq.n	801a612 <_dtoa_r+0x6b2>
 801a608:	9901      	ldr	r1, [sp, #4]
 801a60a:	4648      	mov	r0, r9
 801a60c:	f000 fcb2 	bl	801af74 <__pow5mult>
 801a610:	9001      	str	r0, [sp, #4]
 801a612:	2101      	movs	r1, #1
 801a614:	4648      	mov	r0, r9
 801a616:	f000 fbed 	bl	801adf4 <__i2b>
 801a61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a61c:	4604      	mov	r4, r0
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f000 81d0 	beq.w	801a9c4 <_dtoa_r+0xa64>
 801a624:	461a      	mov	r2, r3
 801a626:	4601      	mov	r1, r0
 801a628:	4648      	mov	r0, r9
 801a62a:	f000 fca3 	bl	801af74 <__pow5mult>
 801a62e:	9b07      	ldr	r3, [sp, #28]
 801a630:	2b01      	cmp	r3, #1
 801a632:	4604      	mov	r4, r0
 801a634:	f300 8095 	bgt.w	801a762 <_dtoa_r+0x802>
 801a638:	9b02      	ldr	r3, [sp, #8]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	f040 808b 	bne.w	801a756 <_dtoa_r+0x7f6>
 801a640:	9b03      	ldr	r3, [sp, #12]
 801a642:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a646:	2a00      	cmp	r2, #0
 801a648:	f040 8087 	bne.w	801a75a <_dtoa_r+0x7fa>
 801a64c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a650:	0d12      	lsrs	r2, r2, #20
 801a652:	0512      	lsls	r2, r2, #20
 801a654:	2a00      	cmp	r2, #0
 801a656:	f000 8082 	beq.w	801a75e <_dtoa_r+0x7fe>
 801a65a:	9b05      	ldr	r3, [sp, #20]
 801a65c:	3301      	adds	r3, #1
 801a65e:	9305      	str	r3, [sp, #20]
 801a660:	9b06      	ldr	r3, [sp, #24]
 801a662:	3301      	adds	r3, #1
 801a664:	9306      	str	r3, [sp, #24]
 801a666:	2301      	movs	r3, #1
 801a668:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a66a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	f000 81af 	beq.w	801a9d0 <_dtoa_r+0xa70>
 801a672:	6922      	ldr	r2, [r4, #16]
 801a674:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a678:	6910      	ldr	r0, [r2, #16]
 801a67a:	f000 fb6f 	bl	801ad5c <__hi0bits>
 801a67e:	f1c0 0020 	rsb	r0, r0, #32
 801a682:	9b06      	ldr	r3, [sp, #24]
 801a684:	4418      	add	r0, r3
 801a686:	f010 001f 	ands.w	r0, r0, #31
 801a68a:	d076      	beq.n	801a77a <_dtoa_r+0x81a>
 801a68c:	f1c0 0220 	rsb	r2, r0, #32
 801a690:	2a04      	cmp	r2, #4
 801a692:	dd69      	ble.n	801a768 <_dtoa_r+0x808>
 801a694:	9b05      	ldr	r3, [sp, #20]
 801a696:	f1c0 001c 	rsb	r0, r0, #28
 801a69a:	4403      	add	r3, r0
 801a69c:	9305      	str	r3, [sp, #20]
 801a69e:	9b06      	ldr	r3, [sp, #24]
 801a6a0:	4406      	add	r6, r0
 801a6a2:	4403      	add	r3, r0
 801a6a4:	9306      	str	r3, [sp, #24]
 801a6a6:	9b05      	ldr	r3, [sp, #20]
 801a6a8:	2b00      	cmp	r3, #0
 801a6aa:	dd05      	ble.n	801a6b8 <_dtoa_r+0x758>
 801a6ac:	9901      	ldr	r1, [sp, #4]
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	4648      	mov	r0, r9
 801a6b2:	f000 fcb9 	bl	801b028 <__lshift>
 801a6b6:	9001      	str	r0, [sp, #4]
 801a6b8:	9b06      	ldr	r3, [sp, #24]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	dd05      	ble.n	801a6ca <_dtoa_r+0x76a>
 801a6be:	4621      	mov	r1, r4
 801a6c0:	461a      	mov	r2, r3
 801a6c2:	4648      	mov	r0, r9
 801a6c4:	f000 fcb0 	bl	801b028 <__lshift>
 801a6c8:	4604      	mov	r4, r0
 801a6ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d056      	beq.n	801a77e <_dtoa_r+0x81e>
 801a6d0:	9801      	ldr	r0, [sp, #4]
 801a6d2:	4621      	mov	r1, r4
 801a6d4:	f000 fd14 	bl	801b100 <__mcmp>
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	da50      	bge.n	801a77e <_dtoa_r+0x81e>
 801a6dc:	f108 33ff 	add.w	r3, r8, #4294967295
 801a6e0:	9304      	str	r3, [sp, #16]
 801a6e2:	9901      	ldr	r1, [sp, #4]
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	220a      	movs	r2, #10
 801a6e8:	4648      	mov	r0, r9
 801a6ea:	f000 faf1 	bl	801acd0 <__multadd>
 801a6ee:	9b08      	ldr	r3, [sp, #32]
 801a6f0:	9001      	str	r0, [sp, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	f000 816e 	beq.w	801a9d4 <_dtoa_r+0xa74>
 801a6f8:	4629      	mov	r1, r5
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	220a      	movs	r2, #10
 801a6fe:	4648      	mov	r0, r9
 801a700:	f000 fae6 	bl	801acd0 <__multadd>
 801a704:	f1bb 0f00 	cmp.w	fp, #0
 801a708:	4605      	mov	r5, r0
 801a70a:	dc64      	bgt.n	801a7d6 <_dtoa_r+0x876>
 801a70c:	9b07      	ldr	r3, [sp, #28]
 801a70e:	2b02      	cmp	r3, #2
 801a710:	dc3e      	bgt.n	801a790 <_dtoa_r+0x830>
 801a712:	e060      	b.n	801a7d6 <_dtoa_r+0x876>
 801a714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a716:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a71a:	e73c      	b.n	801a596 <_dtoa_r+0x636>
 801a71c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a720:	42a3      	cmp	r3, r4
 801a722:	bfbf      	itttt	lt
 801a724:	1ae2      	sublt	r2, r4, r3
 801a726:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a728:	189b      	addlt	r3, r3, r2
 801a72a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a72c:	bfae      	itee	ge
 801a72e:	1b1c      	subge	r4, r3, r4
 801a730:	4623      	movlt	r3, r4
 801a732:	2400      	movlt	r4, #0
 801a734:	f1ba 0f00 	cmp.w	sl, #0
 801a738:	bfb5      	itete	lt
 801a73a:	9a05      	ldrlt	r2, [sp, #20]
 801a73c:	9e05      	ldrge	r6, [sp, #20]
 801a73e:	eba2 060a 	sublt.w	r6, r2, sl
 801a742:	4652      	movge	r2, sl
 801a744:	bfb8      	it	lt
 801a746:	2200      	movlt	r2, #0
 801a748:	e727      	b.n	801a59a <_dtoa_r+0x63a>
 801a74a:	9e05      	ldr	r6, [sp, #20]
 801a74c:	9d08      	ldr	r5, [sp, #32]
 801a74e:	461c      	mov	r4, r3
 801a750:	e730      	b.n	801a5b4 <_dtoa_r+0x654>
 801a752:	461a      	mov	r2, r3
 801a754:	e758      	b.n	801a608 <_dtoa_r+0x6a8>
 801a756:	2300      	movs	r3, #0
 801a758:	e786      	b.n	801a668 <_dtoa_r+0x708>
 801a75a:	9b02      	ldr	r3, [sp, #8]
 801a75c:	e784      	b.n	801a668 <_dtoa_r+0x708>
 801a75e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a760:	e783      	b.n	801a66a <_dtoa_r+0x70a>
 801a762:	2300      	movs	r3, #0
 801a764:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a766:	e784      	b.n	801a672 <_dtoa_r+0x712>
 801a768:	d09d      	beq.n	801a6a6 <_dtoa_r+0x746>
 801a76a:	9b05      	ldr	r3, [sp, #20]
 801a76c:	321c      	adds	r2, #28
 801a76e:	4413      	add	r3, r2
 801a770:	9305      	str	r3, [sp, #20]
 801a772:	9b06      	ldr	r3, [sp, #24]
 801a774:	4416      	add	r6, r2
 801a776:	4413      	add	r3, r2
 801a778:	e794      	b.n	801a6a4 <_dtoa_r+0x744>
 801a77a:	4602      	mov	r2, r0
 801a77c:	e7f5      	b.n	801a76a <_dtoa_r+0x80a>
 801a77e:	f1ba 0f00 	cmp.w	sl, #0
 801a782:	f8cd 8010 	str.w	r8, [sp, #16]
 801a786:	46d3      	mov	fp, sl
 801a788:	dc21      	bgt.n	801a7ce <_dtoa_r+0x86e>
 801a78a:	9b07      	ldr	r3, [sp, #28]
 801a78c:	2b02      	cmp	r3, #2
 801a78e:	dd1e      	ble.n	801a7ce <_dtoa_r+0x86e>
 801a790:	f1bb 0f00 	cmp.w	fp, #0
 801a794:	f47f aeb7 	bne.w	801a506 <_dtoa_r+0x5a6>
 801a798:	4621      	mov	r1, r4
 801a79a:	465b      	mov	r3, fp
 801a79c:	2205      	movs	r2, #5
 801a79e:	4648      	mov	r0, r9
 801a7a0:	f000 fa96 	bl	801acd0 <__multadd>
 801a7a4:	4601      	mov	r1, r0
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	9801      	ldr	r0, [sp, #4]
 801a7aa:	f000 fca9 	bl	801b100 <__mcmp>
 801a7ae:	2800      	cmp	r0, #0
 801a7b0:	f77f aea9 	ble.w	801a506 <_dtoa_r+0x5a6>
 801a7b4:	463e      	mov	r6, r7
 801a7b6:	2331      	movs	r3, #49	@ 0x31
 801a7b8:	f806 3b01 	strb.w	r3, [r6], #1
 801a7bc:	9b04      	ldr	r3, [sp, #16]
 801a7be:	3301      	adds	r3, #1
 801a7c0:	9304      	str	r3, [sp, #16]
 801a7c2:	e6a4      	b.n	801a50e <_dtoa_r+0x5ae>
 801a7c4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a7c8:	4654      	mov	r4, sl
 801a7ca:	4625      	mov	r5, r4
 801a7cc:	e7f2      	b.n	801a7b4 <_dtoa_r+0x854>
 801a7ce:	9b08      	ldr	r3, [sp, #32]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	f000 8103 	beq.w	801a9dc <_dtoa_r+0xa7c>
 801a7d6:	2e00      	cmp	r6, #0
 801a7d8:	dd05      	ble.n	801a7e6 <_dtoa_r+0x886>
 801a7da:	4629      	mov	r1, r5
 801a7dc:	4632      	mov	r2, r6
 801a7de:	4648      	mov	r0, r9
 801a7e0:	f000 fc22 	bl	801b028 <__lshift>
 801a7e4:	4605      	mov	r5, r0
 801a7e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d058      	beq.n	801a89e <_dtoa_r+0x93e>
 801a7ec:	6869      	ldr	r1, [r5, #4]
 801a7ee:	4648      	mov	r0, r9
 801a7f0:	f000 fa0c 	bl	801ac0c <_Balloc>
 801a7f4:	4606      	mov	r6, r0
 801a7f6:	b928      	cbnz	r0, 801a804 <_dtoa_r+0x8a4>
 801a7f8:	4b82      	ldr	r3, [pc, #520]	@ (801aa04 <_dtoa_r+0xaa4>)
 801a7fa:	4602      	mov	r2, r0
 801a7fc:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a800:	f7ff bbc7 	b.w	8019f92 <_dtoa_r+0x32>
 801a804:	692a      	ldr	r2, [r5, #16]
 801a806:	3202      	adds	r2, #2
 801a808:	0092      	lsls	r2, r2, #2
 801a80a:	f105 010c 	add.w	r1, r5, #12
 801a80e:	300c      	adds	r0, #12
 801a810:	f7ff faef 	bl	8019df2 <memcpy>
 801a814:	2201      	movs	r2, #1
 801a816:	4631      	mov	r1, r6
 801a818:	4648      	mov	r0, r9
 801a81a:	f000 fc05 	bl	801b028 <__lshift>
 801a81e:	1c7b      	adds	r3, r7, #1
 801a820:	9305      	str	r3, [sp, #20]
 801a822:	eb07 030b 	add.w	r3, r7, fp
 801a826:	9309      	str	r3, [sp, #36]	@ 0x24
 801a828:	9b02      	ldr	r3, [sp, #8]
 801a82a:	f003 0301 	and.w	r3, r3, #1
 801a82e:	46a8      	mov	r8, r5
 801a830:	9308      	str	r3, [sp, #32]
 801a832:	4605      	mov	r5, r0
 801a834:	9b05      	ldr	r3, [sp, #20]
 801a836:	9801      	ldr	r0, [sp, #4]
 801a838:	4621      	mov	r1, r4
 801a83a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a83e:	f7ff fb05 	bl	8019e4c <quorem>
 801a842:	4641      	mov	r1, r8
 801a844:	9002      	str	r0, [sp, #8]
 801a846:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a84a:	9801      	ldr	r0, [sp, #4]
 801a84c:	f000 fc58 	bl	801b100 <__mcmp>
 801a850:	462a      	mov	r2, r5
 801a852:	9006      	str	r0, [sp, #24]
 801a854:	4621      	mov	r1, r4
 801a856:	4648      	mov	r0, r9
 801a858:	f000 fc6e 	bl	801b138 <__mdiff>
 801a85c:	68c2      	ldr	r2, [r0, #12]
 801a85e:	4606      	mov	r6, r0
 801a860:	b9fa      	cbnz	r2, 801a8a2 <_dtoa_r+0x942>
 801a862:	4601      	mov	r1, r0
 801a864:	9801      	ldr	r0, [sp, #4]
 801a866:	f000 fc4b 	bl	801b100 <__mcmp>
 801a86a:	4602      	mov	r2, r0
 801a86c:	4631      	mov	r1, r6
 801a86e:	4648      	mov	r0, r9
 801a870:	920a      	str	r2, [sp, #40]	@ 0x28
 801a872:	f000 fa0b 	bl	801ac8c <_Bfree>
 801a876:	9b07      	ldr	r3, [sp, #28]
 801a878:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a87a:	9e05      	ldr	r6, [sp, #20]
 801a87c:	ea43 0102 	orr.w	r1, r3, r2
 801a880:	9b08      	ldr	r3, [sp, #32]
 801a882:	4319      	orrs	r1, r3
 801a884:	d10f      	bne.n	801a8a6 <_dtoa_r+0x946>
 801a886:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a88a:	d028      	beq.n	801a8de <_dtoa_r+0x97e>
 801a88c:	9b06      	ldr	r3, [sp, #24]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	dd02      	ble.n	801a898 <_dtoa_r+0x938>
 801a892:	9b02      	ldr	r3, [sp, #8]
 801a894:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a898:	f88b a000 	strb.w	sl, [fp]
 801a89c:	e639      	b.n	801a512 <_dtoa_r+0x5b2>
 801a89e:	4628      	mov	r0, r5
 801a8a0:	e7bd      	b.n	801a81e <_dtoa_r+0x8be>
 801a8a2:	2201      	movs	r2, #1
 801a8a4:	e7e2      	b.n	801a86c <_dtoa_r+0x90c>
 801a8a6:	9b06      	ldr	r3, [sp, #24]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	db04      	blt.n	801a8b6 <_dtoa_r+0x956>
 801a8ac:	9907      	ldr	r1, [sp, #28]
 801a8ae:	430b      	orrs	r3, r1
 801a8b0:	9908      	ldr	r1, [sp, #32]
 801a8b2:	430b      	orrs	r3, r1
 801a8b4:	d120      	bne.n	801a8f8 <_dtoa_r+0x998>
 801a8b6:	2a00      	cmp	r2, #0
 801a8b8:	ddee      	ble.n	801a898 <_dtoa_r+0x938>
 801a8ba:	9901      	ldr	r1, [sp, #4]
 801a8bc:	2201      	movs	r2, #1
 801a8be:	4648      	mov	r0, r9
 801a8c0:	f000 fbb2 	bl	801b028 <__lshift>
 801a8c4:	4621      	mov	r1, r4
 801a8c6:	9001      	str	r0, [sp, #4]
 801a8c8:	f000 fc1a 	bl	801b100 <__mcmp>
 801a8cc:	2800      	cmp	r0, #0
 801a8ce:	dc03      	bgt.n	801a8d8 <_dtoa_r+0x978>
 801a8d0:	d1e2      	bne.n	801a898 <_dtoa_r+0x938>
 801a8d2:	f01a 0f01 	tst.w	sl, #1
 801a8d6:	d0df      	beq.n	801a898 <_dtoa_r+0x938>
 801a8d8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a8dc:	d1d9      	bne.n	801a892 <_dtoa_r+0x932>
 801a8de:	2339      	movs	r3, #57	@ 0x39
 801a8e0:	f88b 3000 	strb.w	r3, [fp]
 801a8e4:	4633      	mov	r3, r6
 801a8e6:	461e      	mov	r6, r3
 801a8e8:	3b01      	subs	r3, #1
 801a8ea:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a8ee:	2a39      	cmp	r2, #57	@ 0x39
 801a8f0:	d053      	beq.n	801a99a <_dtoa_r+0xa3a>
 801a8f2:	3201      	adds	r2, #1
 801a8f4:	701a      	strb	r2, [r3, #0]
 801a8f6:	e60c      	b.n	801a512 <_dtoa_r+0x5b2>
 801a8f8:	2a00      	cmp	r2, #0
 801a8fa:	dd07      	ble.n	801a90c <_dtoa_r+0x9ac>
 801a8fc:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a900:	d0ed      	beq.n	801a8de <_dtoa_r+0x97e>
 801a902:	f10a 0301 	add.w	r3, sl, #1
 801a906:	f88b 3000 	strb.w	r3, [fp]
 801a90a:	e602      	b.n	801a512 <_dtoa_r+0x5b2>
 801a90c:	9b05      	ldr	r3, [sp, #20]
 801a90e:	9a05      	ldr	r2, [sp, #20]
 801a910:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a916:	4293      	cmp	r3, r2
 801a918:	d029      	beq.n	801a96e <_dtoa_r+0xa0e>
 801a91a:	9901      	ldr	r1, [sp, #4]
 801a91c:	2300      	movs	r3, #0
 801a91e:	220a      	movs	r2, #10
 801a920:	4648      	mov	r0, r9
 801a922:	f000 f9d5 	bl	801acd0 <__multadd>
 801a926:	45a8      	cmp	r8, r5
 801a928:	9001      	str	r0, [sp, #4]
 801a92a:	f04f 0300 	mov.w	r3, #0
 801a92e:	f04f 020a 	mov.w	r2, #10
 801a932:	4641      	mov	r1, r8
 801a934:	4648      	mov	r0, r9
 801a936:	d107      	bne.n	801a948 <_dtoa_r+0x9e8>
 801a938:	f000 f9ca 	bl	801acd0 <__multadd>
 801a93c:	4680      	mov	r8, r0
 801a93e:	4605      	mov	r5, r0
 801a940:	9b05      	ldr	r3, [sp, #20]
 801a942:	3301      	adds	r3, #1
 801a944:	9305      	str	r3, [sp, #20]
 801a946:	e775      	b.n	801a834 <_dtoa_r+0x8d4>
 801a948:	f000 f9c2 	bl	801acd0 <__multadd>
 801a94c:	4629      	mov	r1, r5
 801a94e:	4680      	mov	r8, r0
 801a950:	2300      	movs	r3, #0
 801a952:	220a      	movs	r2, #10
 801a954:	4648      	mov	r0, r9
 801a956:	f000 f9bb 	bl	801acd0 <__multadd>
 801a95a:	4605      	mov	r5, r0
 801a95c:	e7f0      	b.n	801a940 <_dtoa_r+0x9e0>
 801a95e:	f1bb 0f00 	cmp.w	fp, #0
 801a962:	bfcc      	ite	gt
 801a964:	465e      	movgt	r6, fp
 801a966:	2601      	movle	r6, #1
 801a968:	443e      	add	r6, r7
 801a96a:	f04f 0800 	mov.w	r8, #0
 801a96e:	9901      	ldr	r1, [sp, #4]
 801a970:	2201      	movs	r2, #1
 801a972:	4648      	mov	r0, r9
 801a974:	f000 fb58 	bl	801b028 <__lshift>
 801a978:	4621      	mov	r1, r4
 801a97a:	9001      	str	r0, [sp, #4]
 801a97c:	f000 fbc0 	bl	801b100 <__mcmp>
 801a980:	2800      	cmp	r0, #0
 801a982:	dcaf      	bgt.n	801a8e4 <_dtoa_r+0x984>
 801a984:	d102      	bne.n	801a98c <_dtoa_r+0xa2c>
 801a986:	f01a 0f01 	tst.w	sl, #1
 801a98a:	d1ab      	bne.n	801a8e4 <_dtoa_r+0x984>
 801a98c:	4633      	mov	r3, r6
 801a98e:	461e      	mov	r6, r3
 801a990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a994:	2a30      	cmp	r2, #48	@ 0x30
 801a996:	d0fa      	beq.n	801a98e <_dtoa_r+0xa2e>
 801a998:	e5bb      	b.n	801a512 <_dtoa_r+0x5b2>
 801a99a:	429f      	cmp	r7, r3
 801a99c:	d1a3      	bne.n	801a8e6 <_dtoa_r+0x986>
 801a99e:	9b04      	ldr	r3, [sp, #16]
 801a9a0:	3301      	adds	r3, #1
 801a9a2:	9304      	str	r3, [sp, #16]
 801a9a4:	2331      	movs	r3, #49	@ 0x31
 801a9a6:	703b      	strb	r3, [r7, #0]
 801a9a8:	e5b3      	b.n	801a512 <_dtoa_r+0x5b2>
 801a9aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a9ac:	4f16      	ldr	r7, [pc, #88]	@ (801aa08 <_dtoa_r+0xaa8>)
 801a9ae:	b11b      	cbz	r3, 801a9b8 <_dtoa_r+0xa58>
 801a9b0:	f107 0308 	add.w	r3, r7, #8
 801a9b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a9b6:	6013      	str	r3, [r2, #0]
 801a9b8:	4638      	mov	r0, r7
 801a9ba:	b011      	add	sp, #68	@ 0x44
 801a9bc:	ecbd 8b02 	vpop	{d8}
 801a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9c4:	9b07      	ldr	r3, [sp, #28]
 801a9c6:	2b01      	cmp	r3, #1
 801a9c8:	f77f ae36 	ble.w	801a638 <_dtoa_r+0x6d8>
 801a9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9d0:	2001      	movs	r0, #1
 801a9d2:	e656      	b.n	801a682 <_dtoa_r+0x722>
 801a9d4:	f1bb 0f00 	cmp.w	fp, #0
 801a9d8:	f77f aed7 	ble.w	801a78a <_dtoa_r+0x82a>
 801a9dc:	463e      	mov	r6, r7
 801a9de:	9801      	ldr	r0, [sp, #4]
 801a9e0:	4621      	mov	r1, r4
 801a9e2:	f7ff fa33 	bl	8019e4c <quorem>
 801a9e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a9ea:	f806 ab01 	strb.w	sl, [r6], #1
 801a9ee:	1bf2      	subs	r2, r6, r7
 801a9f0:	4593      	cmp	fp, r2
 801a9f2:	ddb4      	ble.n	801a95e <_dtoa_r+0x9fe>
 801a9f4:	9901      	ldr	r1, [sp, #4]
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	220a      	movs	r2, #10
 801a9fa:	4648      	mov	r0, r9
 801a9fc:	f000 f968 	bl	801acd0 <__multadd>
 801aa00:	9001      	str	r0, [sp, #4]
 801aa02:	e7ec      	b.n	801a9de <_dtoa_r+0xa7e>
 801aa04:	0801f8b7 	.word	0x0801f8b7
 801aa08:	0801f852 	.word	0x0801f852

0801aa0c <_free_r>:
 801aa0c:	b538      	push	{r3, r4, r5, lr}
 801aa0e:	4605      	mov	r5, r0
 801aa10:	2900      	cmp	r1, #0
 801aa12:	d041      	beq.n	801aa98 <_free_r+0x8c>
 801aa14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa18:	1f0c      	subs	r4, r1, #4
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	bfb8      	it	lt
 801aa1e:	18e4      	addlt	r4, r4, r3
 801aa20:	f000 f8e8 	bl	801abf4 <__malloc_lock>
 801aa24:	4a1d      	ldr	r2, [pc, #116]	@ (801aa9c <_free_r+0x90>)
 801aa26:	6813      	ldr	r3, [r2, #0]
 801aa28:	b933      	cbnz	r3, 801aa38 <_free_r+0x2c>
 801aa2a:	6063      	str	r3, [r4, #4]
 801aa2c:	6014      	str	r4, [r2, #0]
 801aa2e:	4628      	mov	r0, r5
 801aa30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa34:	f000 b8e4 	b.w	801ac00 <__malloc_unlock>
 801aa38:	42a3      	cmp	r3, r4
 801aa3a:	d908      	bls.n	801aa4e <_free_r+0x42>
 801aa3c:	6820      	ldr	r0, [r4, #0]
 801aa3e:	1821      	adds	r1, r4, r0
 801aa40:	428b      	cmp	r3, r1
 801aa42:	bf01      	itttt	eq
 801aa44:	6819      	ldreq	r1, [r3, #0]
 801aa46:	685b      	ldreq	r3, [r3, #4]
 801aa48:	1809      	addeq	r1, r1, r0
 801aa4a:	6021      	streq	r1, [r4, #0]
 801aa4c:	e7ed      	b.n	801aa2a <_free_r+0x1e>
 801aa4e:	461a      	mov	r2, r3
 801aa50:	685b      	ldr	r3, [r3, #4]
 801aa52:	b10b      	cbz	r3, 801aa58 <_free_r+0x4c>
 801aa54:	42a3      	cmp	r3, r4
 801aa56:	d9fa      	bls.n	801aa4e <_free_r+0x42>
 801aa58:	6811      	ldr	r1, [r2, #0]
 801aa5a:	1850      	adds	r0, r2, r1
 801aa5c:	42a0      	cmp	r0, r4
 801aa5e:	d10b      	bne.n	801aa78 <_free_r+0x6c>
 801aa60:	6820      	ldr	r0, [r4, #0]
 801aa62:	4401      	add	r1, r0
 801aa64:	1850      	adds	r0, r2, r1
 801aa66:	4283      	cmp	r3, r0
 801aa68:	6011      	str	r1, [r2, #0]
 801aa6a:	d1e0      	bne.n	801aa2e <_free_r+0x22>
 801aa6c:	6818      	ldr	r0, [r3, #0]
 801aa6e:	685b      	ldr	r3, [r3, #4]
 801aa70:	6053      	str	r3, [r2, #4]
 801aa72:	4408      	add	r0, r1
 801aa74:	6010      	str	r0, [r2, #0]
 801aa76:	e7da      	b.n	801aa2e <_free_r+0x22>
 801aa78:	d902      	bls.n	801aa80 <_free_r+0x74>
 801aa7a:	230c      	movs	r3, #12
 801aa7c:	602b      	str	r3, [r5, #0]
 801aa7e:	e7d6      	b.n	801aa2e <_free_r+0x22>
 801aa80:	6820      	ldr	r0, [r4, #0]
 801aa82:	1821      	adds	r1, r4, r0
 801aa84:	428b      	cmp	r3, r1
 801aa86:	bf04      	itt	eq
 801aa88:	6819      	ldreq	r1, [r3, #0]
 801aa8a:	685b      	ldreq	r3, [r3, #4]
 801aa8c:	6063      	str	r3, [r4, #4]
 801aa8e:	bf04      	itt	eq
 801aa90:	1809      	addeq	r1, r1, r0
 801aa92:	6021      	streq	r1, [r4, #0]
 801aa94:	6054      	str	r4, [r2, #4]
 801aa96:	e7ca      	b.n	801aa2e <_free_r+0x22>
 801aa98:	bd38      	pop	{r3, r4, r5, pc}
 801aa9a:	bf00      	nop
 801aa9c:	20011fc0 	.word	0x20011fc0

0801aaa0 <malloc>:
 801aaa0:	4b02      	ldr	r3, [pc, #8]	@ (801aaac <malloc+0xc>)
 801aaa2:	4601      	mov	r1, r0
 801aaa4:	6818      	ldr	r0, [r3, #0]
 801aaa6:	f000 b825 	b.w	801aaf4 <_malloc_r>
 801aaaa:	bf00      	nop
 801aaac:	20000028 	.word	0x20000028

0801aab0 <sbrk_aligned>:
 801aab0:	b570      	push	{r4, r5, r6, lr}
 801aab2:	4e0f      	ldr	r6, [pc, #60]	@ (801aaf0 <sbrk_aligned+0x40>)
 801aab4:	460c      	mov	r4, r1
 801aab6:	6831      	ldr	r1, [r6, #0]
 801aab8:	4605      	mov	r5, r0
 801aaba:	b911      	cbnz	r1, 801aac2 <sbrk_aligned+0x12>
 801aabc:	f001 f804 	bl	801bac8 <_sbrk_r>
 801aac0:	6030      	str	r0, [r6, #0]
 801aac2:	4621      	mov	r1, r4
 801aac4:	4628      	mov	r0, r5
 801aac6:	f000 ffff 	bl	801bac8 <_sbrk_r>
 801aaca:	1c43      	adds	r3, r0, #1
 801aacc:	d103      	bne.n	801aad6 <sbrk_aligned+0x26>
 801aace:	f04f 34ff 	mov.w	r4, #4294967295
 801aad2:	4620      	mov	r0, r4
 801aad4:	bd70      	pop	{r4, r5, r6, pc}
 801aad6:	1cc4      	adds	r4, r0, #3
 801aad8:	f024 0403 	bic.w	r4, r4, #3
 801aadc:	42a0      	cmp	r0, r4
 801aade:	d0f8      	beq.n	801aad2 <sbrk_aligned+0x22>
 801aae0:	1a21      	subs	r1, r4, r0
 801aae2:	4628      	mov	r0, r5
 801aae4:	f000 fff0 	bl	801bac8 <_sbrk_r>
 801aae8:	3001      	adds	r0, #1
 801aaea:	d1f2      	bne.n	801aad2 <sbrk_aligned+0x22>
 801aaec:	e7ef      	b.n	801aace <sbrk_aligned+0x1e>
 801aaee:	bf00      	nop
 801aaf0:	20011fbc 	.word	0x20011fbc

0801aaf4 <_malloc_r>:
 801aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aaf8:	1ccd      	adds	r5, r1, #3
 801aafa:	f025 0503 	bic.w	r5, r5, #3
 801aafe:	3508      	adds	r5, #8
 801ab00:	2d0c      	cmp	r5, #12
 801ab02:	bf38      	it	cc
 801ab04:	250c      	movcc	r5, #12
 801ab06:	2d00      	cmp	r5, #0
 801ab08:	4606      	mov	r6, r0
 801ab0a:	db01      	blt.n	801ab10 <_malloc_r+0x1c>
 801ab0c:	42a9      	cmp	r1, r5
 801ab0e:	d904      	bls.n	801ab1a <_malloc_r+0x26>
 801ab10:	230c      	movs	r3, #12
 801ab12:	6033      	str	r3, [r6, #0]
 801ab14:	2000      	movs	r0, #0
 801ab16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801abf0 <_malloc_r+0xfc>
 801ab1e:	f000 f869 	bl	801abf4 <__malloc_lock>
 801ab22:	f8d8 3000 	ldr.w	r3, [r8]
 801ab26:	461c      	mov	r4, r3
 801ab28:	bb44      	cbnz	r4, 801ab7c <_malloc_r+0x88>
 801ab2a:	4629      	mov	r1, r5
 801ab2c:	4630      	mov	r0, r6
 801ab2e:	f7ff ffbf 	bl	801aab0 <sbrk_aligned>
 801ab32:	1c43      	adds	r3, r0, #1
 801ab34:	4604      	mov	r4, r0
 801ab36:	d158      	bne.n	801abea <_malloc_r+0xf6>
 801ab38:	f8d8 4000 	ldr.w	r4, [r8]
 801ab3c:	4627      	mov	r7, r4
 801ab3e:	2f00      	cmp	r7, #0
 801ab40:	d143      	bne.n	801abca <_malloc_r+0xd6>
 801ab42:	2c00      	cmp	r4, #0
 801ab44:	d04b      	beq.n	801abde <_malloc_r+0xea>
 801ab46:	6823      	ldr	r3, [r4, #0]
 801ab48:	4639      	mov	r1, r7
 801ab4a:	4630      	mov	r0, r6
 801ab4c:	eb04 0903 	add.w	r9, r4, r3
 801ab50:	f000 ffba 	bl	801bac8 <_sbrk_r>
 801ab54:	4581      	cmp	r9, r0
 801ab56:	d142      	bne.n	801abde <_malloc_r+0xea>
 801ab58:	6821      	ldr	r1, [r4, #0]
 801ab5a:	1a6d      	subs	r5, r5, r1
 801ab5c:	4629      	mov	r1, r5
 801ab5e:	4630      	mov	r0, r6
 801ab60:	f7ff ffa6 	bl	801aab0 <sbrk_aligned>
 801ab64:	3001      	adds	r0, #1
 801ab66:	d03a      	beq.n	801abde <_malloc_r+0xea>
 801ab68:	6823      	ldr	r3, [r4, #0]
 801ab6a:	442b      	add	r3, r5
 801ab6c:	6023      	str	r3, [r4, #0]
 801ab6e:	f8d8 3000 	ldr.w	r3, [r8]
 801ab72:	685a      	ldr	r2, [r3, #4]
 801ab74:	bb62      	cbnz	r2, 801abd0 <_malloc_r+0xdc>
 801ab76:	f8c8 7000 	str.w	r7, [r8]
 801ab7a:	e00f      	b.n	801ab9c <_malloc_r+0xa8>
 801ab7c:	6822      	ldr	r2, [r4, #0]
 801ab7e:	1b52      	subs	r2, r2, r5
 801ab80:	d420      	bmi.n	801abc4 <_malloc_r+0xd0>
 801ab82:	2a0b      	cmp	r2, #11
 801ab84:	d917      	bls.n	801abb6 <_malloc_r+0xc2>
 801ab86:	1961      	adds	r1, r4, r5
 801ab88:	42a3      	cmp	r3, r4
 801ab8a:	6025      	str	r5, [r4, #0]
 801ab8c:	bf18      	it	ne
 801ab8e:	6059      	strne	r1, [r3, #4]
 801ab90:	6863      	ldr	r3, [r4, #4]
 801ab92:	bf08      	it	eq
 801ab94:	f8c8 1000 	streq.w	r1, [r8]
 801ab98:	5162      	str	r2, [r4, r5]
 801ab9a:	604b      	str	r3, [r1, #4]
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	f000 f82f 	bl	801ac00 <__malloc_unlock>
 801aba2:	f104 000b 	add.w	r0, r4, #11
 801aba6:	1d23      	adds	r3, r4, #4
 801aba8:	f020 0007 	bic.w	r0, r0, #7
 801abac:	1ac2      	subs	r2, r0, r3
 801abae:	bf1c      	itt	ne
 801abb0:	1a1b      	subne	r3, r3, r0
 801abb2:	50a3      	strne	r3, [r4, r2]
 801abb4:	e7af      	b.n	801ab16 <_malloc_r+0x22>
 801abb6:	6862      	ldr	r2, [r4, #4]
 801abb8:	42a3      	cmp	r3, r4
 801abba:	bf0c      	ite	eq
 801abbc:	f8c8 2000 	streq.w	r2, [r8]
 801abc0:	605a      	strne	r2, [r3, #4]
 801abc2:	e7eb      	b.n	801ab9c <_malloc_r+0xa8>
 801abc4:	4623      	mov	r3, r4
 801abc6:	6864      	ldr	r4, [r4, #4]
 801abc8:	e7ae      	b.n	801ab28 <_malloc_r+0x34>
 801abca:	463c      	mov	r4, r7
 801abcc:	687f      	ldr	r7, [r7, #4]
 801abce:	e7b6      	b.n	801ab3e <_malloc_r+0x4a>
 801abd0:	461a      	mov	r2, r3
 801abd2:	685b      	ldr	r3, [r3, #4]
 801abd4:	42a3      	cmp	r3, r4
 801abd6:	d1fb      	bne.n	801abd0 <_malloc_r+0xdc>
 801abd8:	2300      	movs	r3, #0
 801abda:	6053      	str	r3, [r2, #4]
 801abdc:	e7de      	b.n	801ab9c <_malloc_r+0xa8>
 801abde:	230c      	movs	r3, #12
 801abe0:	6033      	str	r3, [r6, #0]
 801abe2:	4630      	mov	r0, r6
 801abe4:	f000 f80c 	bl	801ac00 <__malloc_unlock>
 801abe8:	e794      	b.n	801ab14 <_malloc_r+0x20>
 801abea:	6005      	str	r5, [r0, #0]
 801abec:	e7d6      	b.n	801ab9c <_malloc_r+0xa8>
 801abee:	bf00      	nop
 801abf0:	20011fc0 	.word	0x20011fc0

0801abf4 <__malloc_lock>:
 801abf4:	4801      	ldr	r0, [pc, #4]	@ (801abfc <__malloc_lock+0x8>)
 801abf6:	f7ff b8f2 	b.w	8019dde <__retarget_lock_acquire_recursive>
 801abfa:	bf00      	nop
 801abfc:	20011fb8 	.word	0x20011fb8

0801ac00 <__malloc_unlock>:
 801ac00:	4801      	ldr	r0, [pc, #4]	@ (801ac08 <__malloc_unlock+0x8>)
 801ac02:	f7ff b8ed 	b.w	8019de0 <__retarget_lock_release_recursive>
 801ac06:	bf00      	nop
 801ac08:	20011fb8 	.word	0x20011fb8

0801ac0c <_Balloc>:
 801ac0c:	b570      	push	{r4, r5, r6, lr}
 801ac0e:	69c6      	ldr	r6, [r0, #28]
 801ac10:	4604      	mov	r4, r0
 801ac12:	460d      	mov	r5, r1
 801ac14:	b976      	cbnz	r6, 801ac34 <_Balloc+0x28>
 801ac16:	2010      	movs	r0, #16
 801ac18:	f7ff ff42 	bl	801aaa0 <malloc>
 801ac1c:	4602      	mov	r2, r0
 801ac1e:	61e0      	str	r0, [r4, #28]
 801ac20:	b920      	cbnz	r0, 801ac2c <_Balloc+0x20>
 801ac22:	4b18      	ldr	r3, [pc, #96]	@ (801ac84 <_Balloc+0x78>)
 801ac24:	4818      	ldr	r0, [pc, #96]	@ (801ac88 <_Balloc+0x7c>)
 801ac26:	216b      	movs	r1, #107	@ 0x6b
 801ac28:	f7ff f8f2 	bl	8019e10 <__assert_func>
 801ac2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ac30:	6006      	str	r6, [r0, #0]
 801ac32:	60c6      	str	r6, [r0, #12]
 801ac34:	69e6      	ldr	r6, [r4, #28]
 801ac36:	68f3      	ldr	r3, [r6, #12]
 801ac38:	b183      	cbz	r3, 801ac5c <_Balloc+0x50>
 801ac3a:	69e3      	ldr	r3, [r4, #28]
 801ac3c:	68db      	ldr	r3, [r3, #12]
 801ac3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ac42:	b9b8      	cbnz	r0, 801ac74 <_Balloc+0x68>
 801ac44:	2101      	movs	r1, #1
 801ac46:	fa01 f605 	lsl.w	r6, r1, r5
 801ac4a:	1d72      	adds	r2, r6, #5
 801ac4c:	0092      	lsls	r2, r2, #2
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f000 ff51 	bl	801baf6 <_calloc_r>
 801ac54:	b160      	cbz	r0, 801ac70 <_Balloc+0x64>
 801ac56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ac5a:	e00e      	b.n	801ac7a <_Balloc+0x6e>
 801ac5c:	2221      	movs	r2, #33	@ 0x21
 801ac5e:	2104      	movs	r1, #4
 801ac60:	4620      	mov	r0, r4
 801ac62:	f000 ff48 	bl	801baf6 <_calloc_r>
 801ac66:	69e3      	ldr	r3, [r4, #28]
 801ac68:	60f0      	str	r0, [r6, #12]
 801ac6a:	68db      	ldr	r3, [r3, #12]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d1e4      	bne.n	801ac3a <_Balloc+0x2e>
 801ac70:	2000      	movs	r0, #0
 801ac72:	bd70      	pop	{r4, r5, r6, pc}
 801ac74:	6802      	ldr	r2, [r0, #0]
 801ac76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ac7a:	2300      	movs	r3, #0
 801ac7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ac80:	e7f7      	b.n	801ac72 <_Balloc+0x66>
 801ac82:	bf00      	nop
 801ac84:	0801f672 	.word	0x0801f672
 801ac88:	0801f8c8 	.word	0x0801f8c8

0801ac8c <_Bfree>:
 801ac8c:	b570      	push	{r4, r5, r6, lr}
 801ac8e:	69c6      	ldr	r6, [r0, #28]
 801ac90:	4605      	mov	r5, r0
 801ac92:	460c      	mov	r4, r1
 801ac94:	b976      	cbnz	r6, 801acb4 <_Bfree+0x28>
 801ac96:	2010      	movs	r0, #16
 801ac98:	f7ff ff02 	bl	801aaa0 <malloc>
 801ac9c:	4602      	mov	r2, r0
 801ac9e:	61e8      	str	r0, [r5, #28]
 801aca0:	b920      	cbnz	r0, 801acac <_Bfree+0x20>
 801aca2:	4b09      	ldr	r3, [pc, #36]	@ (801acc8 <_Bfree+0x3c>)
 801aca4:	4809      	ldr	r0, [pc, #36]	@ (801accc <_Bfree+0x40>)
 801aca6:	218f      	movs	r1, #143	@ 0x8f
 801aca8:	f7ff f8b2 	bl	8019e10 <__assert_func>
 801acac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801acb0:	6006      	str	r6, [r0, #0]
 801acb2:	60c6      	str	r6, [r0, #12]
 801acb4:	b13c      	cbz	r4, 801acc6 <_Bfree+0x3a>
 801acb6:	69eb      	ldr	r3, [r5, #28]
 801acb8:	6862      	ldr	r2, [r4, #4]
 801acba:	68db      	ldr	r3, [r3, #12]
 801acbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801acc0:	6021      	str	r1, [r4, #0]
 801acc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801acc6:	bd70      	pop	{r4, r5, r6, pc}
 801acc8:	0801f672 	.word	0x0801f672
 801accc:	0801f8c8 	.word	0x0801f8c8

0801acd0 <__multadd>:
 801acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acd4:	690d      	ldr	r5, [r1, #16]
 801acd6:	4607      	mov	r7, r0
 801acd8:	460c      	mov	r4, r1
 801acda:	461e      	mov	r6, r3
 801acdc:	f101 0c14 	add.w	ip, r1, #20
 801ace0:	2000      	movs	r0, #0
 801ace2:	f8dc 3000 	ldr.w	r3, [ip]
 801ace6:	b299      	uxth	r1, r3
 801ace8:	fb02 6101 	mla	r1, r2, r1, r6
 801acec:	0c1e      	lsrs	r6, r3, #16
 801acee:	0c0b      	lsrs	r3, r1, #16
 801acf0:	fb02 3306 	mla	r3, r2, r6, r3
 801acf4:	b289      	uxth	r1, r1
 801acf6:	3001      	adds	r0, #1
 801acf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801acfc:	4285      	cmp	r5, r0
 801acfe:	f84c 1b04 	str.w	r1, [ip], #4
 801ad02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ad06:	dcec      	bgt.n	801ace2 <__multadd+0x12>
 801ad08:	b30e      	cbz	r6, 801ad4e <__multadd+0x7e>
 801ad0a:	68a3      	ldr	r3, [r4, #8]
 801ad0c:	42ab      	cmp	r3, r5
 801ad0e:	dc19      	bgt.n	801ad44 <__multadd+0x74>
 801ad10:	6861      	ldr	r1, [r4, #4]
 801ad12:	4638      	mov	r0, r7
 801ad14:	3101      	adds	r1, #1
 801ad16:	f7ff ff79 	bl	801ac0c <_Balloc>
 801ad1a:	4680      	mov	r8, r0
 801ad1c:	b928      	cbnz	r0, 801ad2a <__multadd+0x5a>
 801ad1e:	4602      	mov	r2, r0
 801ad20:	4b0c      	ldr	r3, [pc, #48]	@ (801ad54 <__multadd+0x84>)
 801ad22:	480d      	ldr	r0, [pc, #52]	@ (801ad58 <__multadd+0x88>)
 801ad24:	21ba      	movs	r1, #186	@ 0xba
 801ad26:	f7ff f873 	bl	8019e10 <__assert_func>
 801ad2a:	6922      	ldr	r2, [r4, #16]
 801ad2c:	3202      	adds	r2, #2
 801ad2e:	f104 010c 	add.w	r1, r4, #12
 801ad32:	0092      	lsls	r2, r2, #2
 801ad34:	300c      	adds	r0, #12
 801ad36:	f7ff f85c 	bl	8019df2 <memcpy>
 801ad3a:	4621      	mov	r1, r4
 801ad3c:	4638      	mov	r0, r7
 801ad3e:	f7ff ffa5 	bl	801ac8c <_Bfree>
 801ad42:	4644      	mov	r4, r8
 801ad44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ad48:	3501      	adds	r5, #1
 801ad4a:	615e      	str	r6, [r3, #20]
 801ad4c:	6125      	str	r5, [r4, #16]
 801ad4e:	4620      	mov	r0, r4
 801ad50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad54:	0801f8b7 	.word	0x0801f8b7
 801ad58:	0801f8c8 	.word	0x0801f8c8

0801ad5c <__hi0bits>:
 801ad5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ad60:	4603      	mov	r3, r0
 801ad62:	bf36      	itet	cc
 801ad64:	0403      	lslcc	r3, r0, #16
 801ad66:	2000      	movcs	r0, #0
 801ad68:	2010      	movcc	r0, #16
 801ad6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ad6e:	bf3c      	itt	cc
 801ad70:	021b      	lslcc	r3, r3, #8
 801ad72:	3008      	addcc	r0, #8
 801ad74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ad78:	bf3c      	itt	cc
 801ad7a:	011b      	lslcc	r3, r3, #4
 801ad7c:	3004      	addcc	r0, #4
 801ad7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ad82:	bf3c      	itt	cc
 801ad84:	009b      	lslcc	r3, r3, #2
 801ad86:	3002      	addcc	r0, #2
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	db05      	blt.n	801ad98 <__hi0bits+0x3c>
 801ad8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ad90:	f100 0001 	add.w	r0, r0, #1
 801ad94:	bf08      	it	eq
 801ad96:	2020      	moveq	r0, #32
 801ad98:	4770      	bx	lr

0801ad9a <__lo0bits>:
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	4602      	mov	r2, r0
 801ad9e:	f013 0007 	ands.w	r0, r3, #7
 801ada2:	d00b      	beq.n	801adbc <__lo0bits+0x22>
 801ada4:	07d9      	lsls	r1, r3, #31
 801ada6:	d421      	bmi.n	801adec <__lo0bits+0x52>
 801ada8:	0798      	lsls	r0, r3, #30
 801adaa:	bf49      	itett	mi
 801adac:	085b      	lsrmi	r3, r3, #1
 801adae:	089b      	lsrpl	r3, r3, #2
 801adb0:	2001      	movmi	r0, #1
 801adb2:	6013      	strmi	r3, [r2, #0]
 801adb4:	bf5c      	itt	pl
 801adb6:	6013      	strpl	r3, [r2, #0]
 801adb8:	2002      	movpl	r0, #2
 801adba:	4770      	bx	lr
 801adbc:	b299      	uxth	r1, r3
 801adbe:	b909      	cbnz	r1, 801adc4 <__lo0bits+0x2a>
 801adc0:	0c1b      	lsrs	r3, r3, #16
 801adc2:	2010      	movs	r0, #16
 801adc4:	b2d9      	uxtb	r1, r3
 801adc6:	b909      	cbnz	r1, 801adcc <__lo0bits+0x32>
 801adc8:	3008      	adds	r0, #8
 801adca:	0a1b      	lsrs	r3, r3, #8
 801adcc:	0719      	lsls	r1, r3, #28
 801adce:	bf04      	itt	eq
 801add0:	091b      	lsreq	r3, r3, #4
 801add2:	3004      	addeq	r0, #4
 801add4:	0799      	lsls	r1, r3, #30
 801add6:	bf04      	itt	eq
 801add8:	089b      	lsreq	r3, r3, #2
 801adda:	3002      	addeq	r0, #2
 801addc:	07d9      	lsls	r1, r3, #31
 801adde:	d403      	bmi.n	801ade8 <__lo0bits+0x4e>
 801ade0:	085b      	lsrs	r3, r3, #1
 801ade2:	f100 0001 	add.w	r0, r0, #1
 801ade6:	d003      	beq.n	801adf0 <__lo0bits+0x56>
 801ade8:	6013      	str	r3, [r2, #0]
 801adea:	4770      	bx	lr
 801adec:	2000      	movs	r0, #0
 801adee:	4770      	bx	lr
 801adf0:	2020      	movs	r0, #32
 801adf2:	4770      	bx	lr

0801adf4 <__i2b>:
 801adf4:	b510      	push	{r4, lr}
 801adf6:	460c      	mov	r4, r1
 801adf8:	2101      	movs	r1, #1
 801adfa:	f7ff ff07 	bl	801ac0c <_Balloc>
 801adfe:	4602      	mov	r2, r0
 801ae00:	b928      	cbnz	r0, 801ae0e <__i2b+0x1a>
 801ae02:	4b05      	ldr	r3, [pc, #20]	@ (801ae18 <__i2b+0x24>)
 801ae04:	4805      	ldr	r0, [pc, #20]	@ (801ae1c <__i2b+0x28>)
 801ae06:	f240 1145 	movw	r1, #325	@ 0x145
 801ae0a:	f7ff f801 	bl	8019e10 <__assert_func>
 801ae0e:	2301      	movs	r3, #1
 801ae10:	6144      	str	r4, [r0, #20]
 801ae12:	6103      	str	r3, [r0, #16]
 801ae14:	bd10      	pop	{r4, pc}
 801ae16:	bf00      	nop
 801ae18:	0801f8b7 	.word	0x0801f8b7
 801ae1c:	0801f8c8 	.word	0x0801f8c8

0801ae20 <__multiply>:
 801ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae24:	4614      	mov	r4, r2
 801ae26:	690a      	ldr	r2, [r1, #16]
 801ae28:	6923      	ldr	r3, [r4, #16]
 801ae2a:	429a      	cmp	r2, r3
 801ae2c:	bfa8      	it	ge
 801ae2e:	4623      	movge	r3, r4
 801ae30:	460f      	mov	r7, r1
 801ae32:	bfa4      	itt	ge
 801ae34:	460c      	movge	r4, r1
 801ae36:	461f      	movge	r7, r3
 801ae38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ae3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ae40:	68a3      	ldr	r3, [r4, #8]
 801ae42:	6861      	ldr	r1, [r4, #4]
 801ae44:	eb0a 0609 	add.w	r6, sl, r9
 801ae48:	42b3      	cmp	r3, r6
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	bfb8      	it	lt
 801ae4e:	3101      	addlt	r1, #1
 801ae50:	f7ff fedc 	bl	801ac0c <_Balloc>
 801ae54:	b930      	cbnz	r0, 801ae64 <__multiply+0x44>
 801ae56:	4602      	mov	r2, r0
 801ae58:	4b44      	ldr	r3, [pc, #272]	@ (801af6c <__multiply+0x14c>)
 801ae5a:	4845      	ldr	r0, [pc, #276]	@ (801af70 <__multiply+0x150>)
 801ae5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ae60:	f7fe ffd6 	bl	8019e10 <__assert_func>
 801ae64:	f100 0514 	add.w	r5, r0, #20
 801ae68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ae6c:	462b      	mov	r3, r5
 801ae6e:	2200      	movs	r2, #0
 801ae70:	4543      	cmp	r3, r8
 801ae72:	d321      	bcc.n	801aeb8 <__multiply+0x98>
 801ae74:	f107 0114 	add.w	r1, r7, #20
 801ae78:	f104 0214 	add.w	r2, r4, #20
 801ae7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ae80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ae84:	9302      	str	r3, [sp, #8]
 801ae86:	1b13      	subs	r3, r2, r4
 801ae88:	3b15      	subs	r3, #21
 801ae8a:	f023 0303 	bic.w	r3, r3, #3
 801ae8e:	3304      	adds	r3, #4
 801ae90:	f104 0715 	add.w	r7, r4, #21
 801ae94:	42ba      	cmp	r2, r7
 801ae96:	bf38      	it	cc
 801ae98:	2304      	movcc	r3, #4
 801ae9a:	9301      	str	r3, [sp, #4]
 801ae9c:	9b02      	ldr	r3, [sp, #8]
 801ae9e:	9103      	str	r1, [sp, #12]
 801aea0:	428b      	cmp	r3, r1
 801aea2:	d80c      	bhi.n	801aebe <__multiply+0x9e>
 801aea4:	2e00      	cmp	r6, #0
 801aea6:	dd03      	ble.n	801aeb0 <__multiply+0x90>
 801aea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d05b      	beq.n	801af68 <__multiply+0x148>
 801aeb0:	6106      	str	r6, [r0, #16]
 801aeb2:	b005      	add	sp, #20
 801aeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb8:	f843 2b04 	str.w	r2, [r3], #4
 801aebc:	e7d8      	b.n	801ae70 <__multiply+0x50>
 801aebe:	f8b1 a000 	ldrh.w	sl, [r1]
 801aec2:	f1ba 0f00 	cmp.w	sl, #0
 801aec6:	d024      	beq.n	801af12 <__multiply+0xf2>
 801aec8:	f104 0e14 	add.w	lr, r4, #20
 801aecc:	46a9      	mov	r9, r5
 801aece:	f04f 0c00 	mov.w	ip, #0
 801aed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aed6:	f8d9 3000 	ldr.w	r3, [r9]
 801aeda:	fa1f fb87 	uxth.w	fp, r7
 801aede:	b29b      	uxth	r3, r3
 801aee0:	fb0a 330b 	mla	r3, sl, fp, r3
 801aee4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801aee8:	f8d9 7000 	ldr.w	r7, [r9]
 801aeec:	4463      	add	r3, ip
 801aeee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aef2:	fb0a c70b 	mla	r7, sl, fp, ip
 801aef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801aefa:	b29b      	uxth	r3, r3
 801aefc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801af00:	4572      	cmp	r2, lr
 801af02:	f849 3b04 	str.w	r3, [r9], #4
 801af06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801af0a:	d8e2      	bhi.n	801aed2 <__multiply+0xb2>
 801af0c:	9b01      	ldr	r3, [sp, #4]
 801af0e:	f845 c003 	str.w	ip, [r5, r3]
 801af12:	9b03      	ldr	r3, [sp, #12]
 801af14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801af18:	3104      	adds	r1, #4
 801af1a:	f1b9 0f00 	cmp.w	r9, #0
 801af1e:	d021      	beq.n	801af64 <__multiply+0x144>
 801af20:	682b      	ldr	r3, [r5, #0]
 801af22:	f104 0c14 	add.w	ip, r4, #20
 801af26:	46ae      	mov	lr, r5
 801af28:	f04f 0a00 	mov.w	sl, #0
 801af2c:	f8bc b000 	ldrh.w	fp, [ip]
 801af30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801af34:	fb09 770b 	mla	r7, r9, fp, r7
 801af38:	4457      	add	r7, sl
 801af3a:	b29b      	uxth	r3, r3
 801af3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801af40:	f84e 3b04 	str.w	r3, [lr], #4
 801af44:	f85c 3b04 	ldr.w	r3, [ip], #4
 801af48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801af4c:	f8be 3000 	ldrh.w	r3, [lr]
 801af50:	fb09 330a 	mla	r3, r9, sl, r3
 801af54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801af58:	4562      	cmp	r2, ip
 801af5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801af5e:	d8e5      	bhi.n	801af2c <__multiply+0x10c>
 801af60:	9f01      	ldr	r7, [sp, #4]
 801af62:	51eb      	str	r3, [r5, r7]
 801af64:	3504      	adds	r5, #4
 801af66:	e799      	b.n	801ae9c <__multiply+0x7c>
 801af68:	3e01      	subs	r6, #1
 801af6a:	e79b      	b.n	801aea4 <__multiply+0x84>
 801af6c:	0801f8b7 	.word	0x0801f8b7
 801af70:	0801f8c8 	.word	0x0801f8c8

0801af74 <__pow5mult>:
 801af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af78:	4615      	mov	r5, r2
 801af7a:	f012 0203 	ands.w	r2, r2, #3
 801af7e:	4607      	mov	r7, r0
 801af80:	460e      	mov	r6, r1
 801af82:	d007      	beq.n	801af94 <__pow5mult+0x20>
 801af84:	4c25      	ldr	r4, [pc, #148]	@ (801b01c <__pow5mult+0xa8>)
 801af86:	3a01      	subs	r2, #1
 801af88:	2300      	movs	r3, #0
 801af8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801af8e:	f7ff fe9f 	bl	801acd0 <__multadd>
 801af92:	4606      	mov	r6, r0
 801af94:	10ad      	asrs	r5, r5, #2
 801af96:	d03d      	beq.n	801b014 <__pow5mult+0xa0>
 801af98:	69fc      	ldr	r4, [r7, #28]
 801af9a:	b97c      	cbnz	r4, 801afbc <__pow5mult+0x48>
 801af9c:	2010      	movs	r0, #16
 801af9e:	f7ff fd7f 	bl	801aaa0 <malloc>
 801afa2:	4602      	mov	r2, r0
 801afa4:	61f8      	str	r0, [r7, #28]
 801afa6:	b928      	cbnz	r0, 801afb4 <__pow5mult+0x40>
 801afa8:	4b1d      	ldr	r3, [pc, #116]	@ (801b020 <__pow5mult+0xac>)
 801afaa:	481e      	ldr	r0, [pc, #120]	@ (801b024 <__pow5mult+0xb0>)
 801afac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801afb0:	f7fe ff2e 	bl	8019e10 <__assert_func>
 801afb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801afb8:	6004      	str	r4, [r0, #0]
 801afba:	60c4      	str	r4, [r0, #12]
 801afbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801afc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801afc4:	b94c      	cbnz	r4, 801afda <__pow5mult+0x66>
 801afc6:	f240 2171 	movw	r1, #625	@ 0x271
 801afca:	4638      	mov	r0, r7
 801afcc:	f7ff ff12 	bl	801adf4 <__i2b>
 801afd0:	2300      	movs	r3, #0
 801afd2:	f8c8 0008 	str.w	r0, [r8, #8]
 801afd6:	4604      	mov	r4, r0
 801afd8:	6003      	str	r3, [r0, #0]
 801afda:	f04f 0900 	mov.w	r9, #0
 801afde:	07eb      	lsls	r3, r5, #31
 801afe0:	d50a      	bpl.n	801aff8 <__pow5mult+0x84>
 801afe2:	4631      	mov	r1, r6
 801afe4:	4622      	mov	r2, r4
 801afe6:	4638      	mov	r0, r7
 801afe8:	f7ff ff1a 	bl	801ae20 <__multiply>
 801afec:	4631      	mov	r1, r6
 801afee:	4680      	mov	r8, r0
 801aff0:	4638      	mov	r0, r7
 801aff2:	f7ff fe4b 	bl	801ac8c <_Bfree>
 801aff6:	4646      	mov	r6, r8
 801aff8:	106d      	asrs	r5, r5, #1
 801affa:	d00b      	beq.n	801b014 <__pow5mult+0xa0>
 801affc:	6820      	ldr	r0, [r4, #0]
 801affe:	b938      	cbnz	r0, 801b010 <__pow5mult+0x9c>
 801b000:	4622      	mov	r2, r4
 801b002:	4621      	mov	r1, r4
 801b004:	4638      	mov	r0, r7
 801b006:	f7ff ff0b 	bl	801ae20 <__multiply>
 801b00a:	6020      	str	r0, [r4, #0]
 801b00c:	f8c0 9000 	str.w	r9, [r0]
 801b010:	4604      	mov	r4, r0
 801b012:	e7e4      	b.n	801afde <__pow5mult+0x6a>
 801b014:	4630      	mov	r0, r6
 801b016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b01a:	bf00      	nop
 801b01c:	0801f924 	.word	0x0801f924
 801b020:	0801f672 	.word	0x0801f672
 801b024:	0801f8c8 	.word	0x0801f8c8

0801b028 <__lshift>:
 801b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b02c:	460c      	mov	r4, r1
 801b02e:	6849      	ldr	r1, [r1, #4]
 801b030:	6923      	ldr	r3, [r4, #16]
 801b032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b036:	68a3      	ldr	r3, [r4, #8]
 801b038:	4607      	mov	r7, r0
 801b03a:	4691      	mov	r9, r2
 801b03c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b040:	f108 0601 	add.w	r6, r8, #1
 801b044:	42b3      	cmp	r3, r6
 801b046:	db0b      	blt.n	801b060 <__lshift+0x38>
 801b048:	4638      	mov	r0, r7
 801b04a:	f7ff fddf 	bl	801ac0c <_Balloc>
 801b04e:	4605      	mov	r5, r0
 801b050:	b948      	cbnz	r0, 801b066 <__lshift+0x3e>
 801b052:	4602      	mov	r2, r0
 801b054:	4b28      	ldr	r3, [pc, #160]	@ (801b0f8 <__lshift+0xd0>)
 801b056:	4829      	ldr	r0, [pc, #164]	@ (801b0fc <__lshift+0xd4>)
 801b058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b05c:	f7fe fed8 	bl	8019e10 <__assert_func>
 801b060:	3101      	adds	r1, #1
 801b062:	005b      	lsls	r3, r3, #1
 801b064:	e7ee      	b.n	801b044 <__lshift+0x1c>
 801b066:	2300      	movs	r3, #0
 801b068:	f100 0114 	add.w	r1, r0, #20
 801b06c:	f100 0210 	add.w	r2, r0, #16
 801b070:	4618      	mov	r0, r3
 801b072:	4553      	cmp	r3, sl
 801b074:	db33      	blt.n	801b0de <__lshift+0xb6>
 801b076:	6920      	ldr	r0, [r4, #16]
 801b078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b07c:	f104 0314 	add.w	r3, r4, #20
 801b080:	f019 091f 	ands.w	r9, r9, #31
 801b084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b08c:	d02b      	beq.n	801b0e6 <__lshift+0xbe>
 801b08e:	f1c9 0e20 	rsb	lr, r9, #32
 801b092:	468a      	mov	sl, r1
 801b094:	2200      	movs	r2, #0
 801b096:	6818      	ldr	r0, [r3, #0]
 801b098:	fa00 f009 	lsl.w	r0, r0, r9
 801b09c:	4310      	orrs	r0, r2
 801b09e:	f84a 0b04 	str.w	r0, [sl], #4
 801b0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0a6:	459c      	cmp	ip, r3
 801b0a8:	fa22 f20e 	lsr.w	r2, r2, lr
 801b0ac:	d8f3      	bhi.n	801b096 <__lshift+0x6e>
 801b0ae:	ebac 0304 	sub.w	r3, ip, r4
 801b0b2:	3b15      	subs	r3, #21
 801b0b4:	f023 0303 	bic.w	r3, r3, #3
 801b0b8:	3304      	adds	r3, #4
 801b0ba:	f104 0015 	add.w	r0, r4, #21
 801b0be:	4584      	cmp	ip, r0
 801b0c0:	bf38      	it	cc
 801b0c2:	2304      	movcc	r3, #4
 801b0c4:	50ca      	str	r2, [r1, r3]
 801b0c6:	b10a      	cbz	r2, 801b0cc <__lshift+0xa4>
 801b0c8:	f108 0602 	add.w	r6, r8, #2
 801b0cc:	3e01      	subs	r6, #1
 801b0ce:	4638      	mov	r0, r7
 801b0d0:	612e      	str	r6, [r5, #16]
 801b0d2:	4621      	mov	r1, r4
 801b0d4:	f7ff fdda 	bl	801ac8c <_Bfree>
 801b0d8:	4628      	mov	r0, r5
 801b0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0de:	f842 0f04 	str.w	r0, [r2, #4]!
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	e7c5      	b.n	801b072 <__lshift+0x4a>
 801b0e6:	3904      	subs	r1, #4
 801b0e8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0ec:	f841 2f04 	str.w	r2, [r1, #4]!
 801b0f0:	459c      	cmp	ip, r3
 801b0f2:	d8f9      	bhi.n	801b0e8 <__lshift+0xc0>
 801b0f4:	e7ea      	b.n	801b0cc <__lshift+0xa4>
 801b0f6:	bf00      	nop
 801b0f8:	0801f8b7 	.word	0x0801f8b7
 801b0fc:	0801f8c8 	.word	0x0801f8c8

0801b100 <__mcmp>:
 801b100:	690a      	ldr	r2, [r1, #16]
 801b102:	4603      	mov	r3, r0
 801b104:	6900      	ldr	r0, [r0, #16]
 801b106:	1a80      	subs	r0, r0, r2
 801b108:	b530      	push	{r4, r5, lr}
 801b10a:	d10e      	bne.n	801b12a <__mcmp+0x2a>
 801b10c:	3314      	adds	r3, #20
 801b10e:	3114      	adds	r1, #20
 801b110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b11c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b120:	4295      	cmp	r5, r2
 801b122:	d003      	beq.n	801b12c <__mcmp+0x2c>
 801b124:	d205      	bcs.n	801b132 <__mcmp+0x32>
 801b126:	f04f 30ff 	mov.w	r0, #4294967295
 801b12a:	bd30      	pop	{r4, r5, pc}
 801b12c:	42a3      	cmp	r3, r4
 801b12e:	d3f3      	bcc.n	801b118 <__mcmp+0x18>
 801b130:	e7fb      	b.n	801b12a <__mcmp+0x2a>
 801b132:	2001      	movs	r0, #1
 801b134:	e7f9      	b.n	801b12a <__mcmp+0x2a>
	...

0801b138 <__mdiff>:
 801b138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b13c:	4689      	mov	r9, r1
 801b13e:	4606      	mov	r6, r0
 801b140:	4611      	mov	r1, r2
 801b142:	4648      	mov	r0, r9
 801b144:	4614      	mov	r4, r2
 801b146:	f7ff ffdb 	bl	801b100 <__mcmp>
 801b14a:	1e05      	subs	r5, r0, #0
 801b14c:	d112      	bne.n	801b174 <__mdiff+0x3c>
 801b14e:	4629      	mov	r1, r5
 801b150:	4630      	mov	r0, r6
 801b152:	f7ff fd5b 	bl	801ac0c <_Balloc>
 801b156:	4602      	mov	r2, r0
 801b158:	b928      	cbnz	r0, 801b166 <__mdiff+0x2e>
 801b15a:	4b3f      	ldr	r3, [pc, #252]	@ (801b258 <__mdiff+0x120>)
 801b15c:	f240 2137 	movw	r1, #567	@ 0x237
 801b160:	483e      	ldr	r0, [pc, #248]	@ (801b25c <__mdiff+0x124>)
 801b162:	f7fe fe55 	bl	8019e10 <__assert_func>
 801b166:	2301      	movs	r3, #1
 801b168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b16c:	4610      	mov	r0, r2
 801b16e:	b003      	add	sp, #12
 801b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b174:	bfbc      	itt	lt
 801b176:	464b      	movlt	r3, r9
 801b178:	46a1      	movlt	r9, r4
 801b17a:	4630      	mov	r0, r6
 801b17c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b180:	bfba      	itte	lt
 801b182:	461c      	movlt	r4, r3
 801b184:	2501      	movlt	r5, #1
 801b186:	2500      	movge	r5, #0
 801b188:	f7ff fd40 	bl	801ac0c <_Balloc>
 801b18c:	4602      	mov	r2, r0
 801b18e:	b918      	cbnz	r0, 801b198 <__mdiff+0x60>
 801b190:	4b31      	ldr	r3, [pc, #196]	@ (801b258 <__mdiff+0x120>)
 801b192:	f240 2145 	movw	r1, #581	@ 0x245
 801b196:	e7e3      	b.n	801b160 <__mdiff+0x28>
 801b198:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b19c:	6926      	ldr	r6, [r4, #16]
 801b19e:	60c5      	str	r5, [r0, #12]
 801b1a0:	f109 0310 	add.w	r3, r9, #16
 801b1a4:	f109 0514 	add.w	r5, r9, #20
 801b1a8:	f104 0e14 	add.w	lr, r4, #20
 801b1ac:	f100 0b14 	add.w	fp, r0, #20
 801b1b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b1b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b1b8:	9301      	str	r3, [sp, #4]
 801b1ba:	46d9      	mov	r9, fp
 801b1bc:	f04f 0c00 	mov.w	ip, #0
 801b1c0:	9b01      	ldr	r3, [sp, #4]
 801b1c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b1c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b1ca:	9301      	str	r3, [sp, #4]
 801b1cc:	fa1f f38a 	uxth.w	r3, sl
 801b1d0:	4619      	mov	r1, r3
 801b1d2:	b283      	uxth	r3, r0
 801b1d4:	1acb      	subs	r3, r1, r3
 801b1d6:	0c00      	lsrs	r0, r0, #16
 801b1d8:	4463      	add	r3, ip
 801b1da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b1de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b1e2:	b29b      	uxth	r3, r3
 801b1e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b1e8:	4576      	cmp	r6, lr
 801b1ea:	f849 3b04 	str.w	r3, [r9], #4
 801b1ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b1f2:	d8e5      	bhi.n	801b1c0 <__mdiff+0x88>
 801b1f4:	1b33      	subs	r3, r6, r4
 801b1f6:	3b15      	subs	r3, #21
 801b1f8:	f023 0303 	bic.w	r3, r3, #3
 801b1fc:	3415      	adds	r4, #21
 801b1fe:	3304      	adds	r3, #4
 801b200:	42a6      	cmp	r6, r4
 801b202:	bf38      	it	cc
 801b204:	2304      	movcc	r3, #4
 801b206:	441d      	add	r5, r3
 801b208:	445b      	add	r3, fp
 801b20a:	461e      	mov	r6, r3
 801b20c:	462c      	mov	r4, r5
 801b20e:	4544      	cmp	r4, r8
 801b210:	d30e      	bcc.n	801b230 <__mdiff+0xf8>
 801b212:	f108 0103 	add.w	r1, r8, #3
 801b216:	1b49      	subs	r1, r1, r5
 801b218:	f021 0103 	bic.w	r1, r1, #3
 801b21c:	3d03      	subs	r5, #3
 801b21e:	45a8      	cmp	r8, r5
 801b220:	bf38      	it	cc
 801b222:	2100      	movcc	r1, #0
 801b224:	440b      	add	r3, r1
 801b226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b22a:	b191      	cbz	r1, 801b252 <__mdiff+0x11a>
 801b22c:	6117      	str	r7, [r2, #16]
 801b22e:	e79d      	b.n	801b16c <__mdiff+0x34>
 801b230:	f854 1b04 	ldr.w	r1, [r4], #4
 801b234:	46e6      	mov	lr, ip
 801b236:	0c08      	lsrs	r0, r1, #16
 801b238:	fa1c fc81 	uxtah	ip, ip, r1
 801b23c:	4471      	add	r1, lr
 801b23e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b242:	b289      	uxth	r1, r1
 801b244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b248:	f846 1b04 	str.w	r1, [r6], #4
 801b24c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b250:	e7dd      	b.n	801b20e <__mdiff+0xd6>
 801b252:	3f01      	subs	r7, #1
 801b254:	e7e7      	b.n	801b226 <__mdiff+0xee>
 801b256:	bf00      	nop
 801b258:	0801f8b7 	.word	0x0801f8b7
 801b25c:	0801f8c8 	.word	0x0801f8c8

0801b260 <__d2b>:
 801b260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b264:	460f      	mov	r7, r1
 801b266:	2101      	movs	r1, #1
 801b268:	ec59 8b10 	vmov	r8, r9, d0
 801b26c:	4616      	mov	r6, r2
 801b26e:	f7ff fccd 	bl	801ac0c <_Balloc>
 801b272:	4604      	mov	r4, r0
 801b274:	b930      	cbnz	r0, 801b284 <__d2b+0x24>
 801b276:	4602      	mov	r2, r0
 801b278:	4b23      	ldr	r3, [pc, #140]	@ (801b308 <__d2b+0xa8>)
 801b27a:	4824      	ldr	r0, [pc, #144]	@ (801b30c <__d2b+0xac>)
 801b27c:	f240 310f 	movw	r1, #783	@ 0x30f
 801b280:	f7fe fdc6 	bl	8019e10 <__assert_func>
 801b284:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b28c:	b10d      	cbz	r5, 801b292 <__d2b+0x32>
 801b28e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b292:	9301      	str	r3, [sp, #4]
 801b294:	f1b8 0300 	subs.w	r3, r8, #0
 801b298:	d023      	beq.n	801b2e2 <__d2b+0x82>
 801b29a:	4668      	mov	r0, sp
 801b29c:	9300      	str	r3, [sp, #0]
 801b29e:	f7ff fd7c 	bl	801ad9a <__lo0bits>
 801b2a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b2a6:	b1d0      	cbz	r0, 801b2de <__d2b+0x7e>
 801b2a8:	f1c0 0320 	rsb	r3, r0, #32
 801b2ac:	fa02 f303 	lsl.w	r3, r2, r3
 801b2b0:	430b      	orrs	r3, r1
 801b2b2:	40c2      	lsrs	r2, r0
 801b2b4:	6163      	str	r3, [r4, #20]
 801b2b6:	9201      	str	r2, [sp, #4]
 801b2b8:	9b01      	ldr	r3, [sp, #4]
 801b2ba:	61a3      	str	r3, [r4, #24]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	bf0c      	ite	eq
 801b2c0:	2201      	moveq	r2, #1
 801b2c2:	2202      	movne	r2, #2
 801b2c4:	6122      	str	r2, [r4, #16]
 801b2c6:	b1a5      	cbz	r5, 801b2f2 <__d2b+0x92>
 801b2c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b2cc:	4405      	add	r5, r0
 801b2ce:	603d      	str	r5, [r7, #0]
 801b2d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b2d4:	6030      	str	r0, [r6, #0]
 801b2d6:	4620      	mov	r0, r4
 801b2d8:	b003      	add	sp, #12
 801b2da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2de:	6161      	str	r1, [r4, #20]
 801b2e0:	e7ea      	b.n	801b2b8 <__d2b+0x58>
 801b2e2:	a801      	add	r0, sp, #4
 801b2e4:	f7ff fd59 	bl	801ad9a <__lo0bits>
 801b2e8:	9b01      	ldr	r3, [sp, #4]
 801b2ea:	6163      	str	r3, [r4, #20]
 801b2ec:	3020      	adds	r0, #32
 801b2ee:	2201      	movs	r2, #1
 801b2f0:	e7e8      	b.n	801b2c4 <__d2b+0x64>
 801b2f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b2f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b2fa:	6038      	str	r0, [r7, #0]
 801b2fc:	6918      	ldr	r0, [r3, #16]
 801b2fe:	f7ff fd2d 	bl	801ad5c <__hi0bits>
 801b302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b306:	e7e5      	b.n	801b2d4 <__d2b+0x74>
 801b308:	0801f8b7 	.word	0x0801f8b7
 801b30c:	0801f8c8 	.word	0x0801f8c8

0801b310 <__ssputs_r>:
 801b310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b314:	688e      	ldr	r6, [r1, #8]
 801b316:	461f      	mov	r7, r3
 801b318:	42be      	cmp	r6, r7
 801b31a:	680b      	ldr	r3, [r1, #0]
 801b31c:	4682      	mov	sl, r0
 801b31e:	460c      	mov	r4, r1
 801b320:	4690      	mov	r8, r2
 801b322:	d82d      	bhi.n	801b380 <__ssputs_r+0x70>
 801b324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b328:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b32c:	d026      	beq.n	801b37c <__ssputs_r+0x6c>
 801b32e:	6965      	ldr	r5, [r4, #20]
 801b330:	6909      	ldr	r1, [r1, #16]
 801b332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b336:	eba3 0901 	sub.w	r9, r3, r1
 801b33a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b33e:	1c7b      	adds	r3, r7, #1
 801b340:	444b      	add	r3, r9
 801b342:	106d      	asrs	r5, r5, #1
 801b344:	429d      	cmp	r5, r3
 801b346:	bf38      	it	cc
 801b348:	461d      	movcc	r5, r3
 801b34a:	0553      	lsls	r3, r2, #21
 801b34c:	d527      	bpl.n	801b39e <__ssputs_r+0x8e>
 801b34e:	4629      	mov	r1, r5
 801b350:	f7ff fbd0 	bl	801aaf4 <_malloc_r>
 801b354:	4606      	mov	r6, r0
 801b356:	b360      	cbz	r0, 801b3b2 <__ssputs_r+0xa2>
 801b358:	6921      	ldr	r1, [r4, #16]
 801b35a:	464a      	mov	r2, r9
 801b35c:	f7fe fd49 	bl	8019df2 <memcpy>
 801b360:	89a3      	ldrh	r3, [r4, #12]
 801b362:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b36a:	81a3      	strh	r3, [r4, #12]
 801b36c:	6126      	str	r6, [r4, #16]
 801b36e:	6165      	str	r5, [r4, #20]
 801b370:	444e      	add	r6, r9
 801b372:	eba5 0509 	sub.w	r5, r5, r9
 801b376:	6026      	str	r6, [r4, #0]
 801b378:	60a5      	str	r5, [r4, #8]
 801b37a:	463e      	mov	r6, r7
 801b37c:	42be      	cmp	r6, r7
 801b37e:	d900      	bls.n	801b382 <__ssputs_r+0x72>
 801b380:	463e      	mov	r6, r7
 801b382:	6820      	ldr	r0, [r4, #0]
 801b384:	4632      	mov	r2, r6
 801b386:	4641      	mov	r1, r8
 801b388:	f7fe fc60 	bl	8019c4c <memmove>
 801b38c:	68a3      	ldr	r3, [r4, #8]
 801b38e:	1b9b      	subs	r3, r3, r6
 801b390:	60a3      	str	r3, [r4, #8]
 801b392:	6823      	ldr	r3, [r4, #0]
 801b394:	4433      	add	r3, r6
 801b396:	6023      	str	r3, [r4, #0]
 801b398:	2000      	movs	r0, #0
 801b39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b39e:	462a      	mov	r2, r5
 801b3a0:	f000 fbcf 	bl	801bb42 <_realloc_r>
 801b3a4:	4606      	mov	r6, r0
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	d1e0      	bne.n	801b36c <__ssputs_r+0x5c>
 801b3aa:	6921      	ldr	r1, [r4, #16]
 801b3ac:	4650      	mov	r0, sl
 801b3ae:	f7ff fb2d 	bl	801aa0c <_free_r>
 801b3b2:	230c      	movs	r3, #12
 801b3b4:	f8ca 3000 	str.w	r3, [sl]
 801b3b8:	89a3      	ldrh	r3, [r4, #12]
 801b3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b3be:	81a3      	strh	r3, [r4, #12]
 801b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3c4:	e7e9      	b.n	801b39a <__ssputs_r+0x8a>
	...

0801b3c8 <_svfiprintf_r>:
 801b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3cc:	4698      	mov	r8, r3
 801b3ce:	898b      	ldrh	r3, [r1, #12]
 801b3d0:	061b      	lsls	r3, r3, #24
 801b3d2:	b09d      	sub	sp, #116	@ 0x74
 801b3d4:	4607      	mov	r7, r0
 801b3d6:	460d      	mov	r5, r1
 801b3d8:	4614      	mov	r4, r2
 801b3da:	d510      	bpl.n	801b3fe <_svfiprintf_r+0x36>
 801b3dc:	690b      	ldr	r3, [r1, #16]
 801b3de:	b973      	cbnz	r3, 801b3fe <_svfiprintf_r+0x36>
 801b3e0:	2140      	movs	r1, #64	@ 0x40
 801b3e2:	f7ff fb87 	bl	801aaf4 <_malloc_r>
 801b3e6:	6028      	str	r0, [r5, #0]
 801b3e8:	6128      	str	r0, [r5, #16]
 801b3ea:	b930      	cbnz	r0, 801b3fa <_svfiprintf_r+0x32>
 801b3ec:	230c      	movs	r3, #12
 801b3ee:	603b      	str	r3, [r7, #0]
 801b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3f4:	b01d      	add	sp, #116	@ 0x74
 801b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3fa:	2340      	movs	r3, #64	@ 0x40
 801b3fc:	616b      	str	r3, [r5, #20]
 801b3fe:	2300      	movs	r3, #0
 801b400:	9309      	str	r3, [sp, #36]	@ 0x24
 801b402:	2320      	movs	r3, #32
 801b404:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b408:	f8cd 800c 	str.w	r8, [sp, #12]
 801b40c:	2330      	movs	r3, #48	@ 0x30
 801b40e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b5ac <_svfiprintf_r+0x1e4>
 801b412:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b416:	f04f 0901 	mov.w	r9, #1
 801b41a:	4623      	mov	r3, r4
 801b41c:	469a      	mov	sl, r3
 801b41e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b422:	b10a      	cbz	r2, 801b428 <_svfiprintf_r+0x60>
 801b424:	2a25      	cmp	r2, #37	@ 0x25
 801b426:	d1f9      	bne.n	801b41c <_svfiprintf_r+0x54>
 801b428:	ebba 0b04 	subs.w	fp, sl, r4
 801b42c:	d00b      	beq.n	801b446 <_svfiprintf_r+0x7e>
 801b42e:	465b      	mov	r3, fp
 801b430:	4622      	mov	r2, r4
 801b432:	4629      	mov	r1, r5
 801b434:	4638      	mov	r0, r7
 801b436:	f7ff ff6b 	bl	801b310 <__ssputs_r>
 801b43a:	3001      	adds	r0, #1
 801b43c:	f000 80a7 	beq.w	801b58e <_svfiprintf_r+0x1c6>
 801b440:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b442:	445a      	add	r2, fp
 801b444:	9209      	str	r2, [sp, #36]	@ 0x24
 801b446:	f89a 3000 	ldrb.w	r3, [sl]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	f000 809f 	beq.w	801b58e <_svfiprintf_r+0x1c6>
 801b450:	2300      	movs	r3, #0
 801b452:	f04f 32ff 	mov.w	r2, #4294967295
 801b456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b45a:	f10a 0a01 	add.w	sl, sl, #1
 801b45e:	9304      	str	r3, [sp, #16]
 801b460:	9307      	str	r3, [sp, #28]
 801b462:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b466:	931a      	str	r3, [sp, #104]	@ 0x68
 801b468:	4654      	mov	r4, sl
 801b46a:	2205      	movs	r2, #5
 801b46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b470:	484e      	ldr	r0, [pc, #312]	@ (801b5ac <_svfiprintf_r+0x1e4>)
 801b472:	f7e4 fee5 	bl	8000240 <memchr>
 801b476:	9a04      	ldr	r2, [sp, #16]
 801b478:	b9d8      	cbnz	r0, 801b4b2 <_svfiprintf_r+0xea>
 801b47a:	06d0      	lsls	r0, r2, #27
 801b47c:	bf44      	itt	mi
 801b47e:	2320      	movmi	r3, #32
 801b480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b484:	0711      	lsls	r1, r2, #28
 801b486:	bf44      	itt	mi
 801b488:	232b      	movmi	r3, #43	@ 0x2b
 801b48a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b48e:	f89a 3000 	ldrb.w	r3, [sl]
 801b492:	2b2a      	cmp	r3, #42	@ 0x2a
 801b494:	d015      	beq.n	801b4c2 <_svfiprintf_r+0xfa>
 801b496:	9a07      	ldr	r2, [sp, #28]
 801b498:	4654      	mov	r4, sl
 801b49a:	2000      	movs	r0, #0
 801b49c:	f04f 0c0a 	mov.w	ip, #10
 801b4a0:	4621      	mov	r1, r4
 801b4a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b4a6:	3b30      	subs	r3, #48	@ 0x30
 801b4a8:	2b09      	cmp	r3, #9
 801b4aa:	d94b      	bls.n	801b544 <_svfiprintf_r+0x17c>
 801b4ac:	b1b0      	cbz	r0, 801b4dc <_svfiprintf_r+0x114>
 801b4ae:	9207      	str	r2, [sp, #28]
 801b4b0:	e014      	b.n	801b4dc <_svfiprintf_r+0x114>
 801b4b2:	eba0 0308 	sub.w	r3, r0, r8
 801b4b6:	fa09 f303 	lsl.w	r3, r9, r3
 801b4ba:	4313      	orrs	r3, r2
 801b4bc:	9304      	str	r3, [sp, #16]
 801b4be:	46a2      	mov	sl, r4
 801b4c0:	e7d2      	b.n	801b468 <_svfiprintf_r+0xa0>
 801b4c2:	9b03      	ldr	r3, [sp, #12]
 801b4c4:	1d19      	adds	r1, r3, #4
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	9103      	str	r1, [sp, #12]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	bfbb      	ittet	lt
 801b4ce:	425b      	neglt	r3, r3
 801b4d0:	f042 0202 	orrlt.w	r2, r2, #2
 801b4d4:	9307      	strge	r3, [sp, #28]
 801b4d6:	9307      	strlt	r3, [sp, #28]
 801b4d8:	bfb8      	it	lt
 801b4da:	9204      	strlt	r2, [sp, #16]
 801b4dc:	7823      	ldrb	r3, [r4, #0]
 801b4de:	2b2e      	cmp	r3, #46	@ 0x2e
 801b4e0:	d10a      	bne.n	801b4f8 <_svfiprintf_r+0x130>
 801b4e2:	7863      	ldrb	r3, [r4, #1]
 801b4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4e6:	d132      	bne.n	801b54e <_svfiprintf_r+0x186>
 801b4e8:	9b03      	ldr	r3, [sp, #12]
 801b4ea:	1d1a      	adds	r2, r3, #4
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	9203      	str	r2, [sp, #12]
 801b4f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b4f4:	3402      	adds	r4, #2
 801b4f6:	9305      	str	r3, [sp, #20]
 801b4f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b5bc <_svfiprintf_r+0x1f4>
 801b4fc:	7821      	ldrb	r1, [r4, #0]
 801b4fe:	2203      	movs	r2, #3
 801b500:	4650      	mov	r0, sl
 801b502:	f7e4 fe9d 	bl	8000240 <memchr>
 801b506:	b138      	cbz	r0, 801b518 <_svfiprintf_r+0x150>
 801b508:	9b04      	ldr	r3, [sp, #16]
 801b50a:	eba0 000a 	sub.w	r0, r0, sl
 801b50e:	2240      	movs	r2, #64	@ 0x40
 801b510:	4082      	lsls	r2, r0
 801b512:	4313      	orrs	r3, r2
 801b514:	3401      	adds	r4, #1
 801b516:	9304      	str	r3, [sp, #16]
 801b518:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b51c:	4824      	ldr	r0, [pc, #144]	@ (801b5b0 <_svfiprintf_r+0x1e8>)
 801b51e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b522:	2206      	movs	r2, #6
 801b524:	f7e4 fe8c 	bl	8000240 <memchr>
 801b528:	2800      	cmp	r0, #0
 801b52a:	d036      	beq.n	801b59a <_svfiprintf_r+0x1d2>
 801b52c:	4b21      	ldr	r3, [pc, #132]	@ (801b5b4 <_svfiprintf_r+0x1ec>)
 801b52e:	bb1b      	cbnz	r3, 801b578 <_svfiprintf_r+0x1b0>
 801b530:	9b03      	ldr	r3, [sp, #12]
 801b532:	3307      	adds	r3, #7
 801b534:	f023 0307 	bic.w	r3, r3, #7
 801b538:	3308      	adds	r3, #8
 801b53a:	9303      	str	r3, [sp, #12]
 801b53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b53e:	4433      	add	r3, r6
 801b540:	9309      	str	r3, [sp, #36]	@ 0x24
 801b542:	e76a      	b.n	801b41a <_svfiprintf_r+0x52>
 801b544:	fb0c 3202 	mla	r2, ip, r2, r3
 801b548:	460c      	mov	r4, r1
 801b54a:	2001      	movs	r0, #1
 801b54c:	e7a8      	b.n	801b4a0 <_svfiprintf_r+0xd8>
 801b54e:	2300      	movs	r3, #0
 801b550:	3401      	adds	r4, #1
 801b552:	9305      	str	r3, [sp, #20]
 801b554:	4619      	mov	r1, r3
 801b556:	f04f 0c0a 	mov.w	ip, #10
 801b55a:	4620      	mov	r0, r4
 801b55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b560:	3a30      	subs	r2, #48	@ 0x30
 801b562:	2a09      	cmp	r2, #9
 801b564:	d903      	bls.n	801b56e <_svfiprintf_r+0x1a6>
 801b566:	2b00      	cmp	r3, #0
 801b568:	d0c6      	beq.n	801b4f8 <_svfiprintf_r+0x130>
 801b56a:	9105      	str	r1, [sp, #20]
 801b56c:	e7c4      	b.n	801b4f8 <_svfiprintf_r+0x130>
 801b56e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b572:	4604      	mov	r4, r0
 801b574:	2301      	movs	r3, #1
 801b576:	e7f0      	b.n	801b55a <_svfiprintf_r+0x192>
 801b578:	ab03      	add	r3, sp, #12
 801b57a:	9300      	str	r3, [sp, #0]
 801b57c:	462a      	mov	r2, r5
 801b57e:	4b0e      	ldr	r3, [pc, #56]	@ (801b5b8 <_svfiprintf_r+0x1f0>)
 801b580:	a904      	add	r1, sp, #16
 801b582:	4638      	mov	r0, r7
 801b584:	f7fd fd4c 	bl	8019020 <_printf_float>
 801b588:	1c42      	adds	r2, r0, #1
 801b58a:	4606      	mov	r6, r0
 801b58c:	d1d6      	bne.n	801b53c <_svfiprintf_r+0x174>
 801b58e:	89ab      	ldrh	r3, [r5, #12]
 801b590:	065b      	lsls	r3, r3, #25
 801b592:	f53f af2d 	bmi.w	801b3f0 <_svfiprintf_r+0x28>
 801b596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b598:	e72c      	b.n	801b3f4 <_svfiprintf_r+0x2c>
 801b59a:	ab03      	add	r3, sp, #12
 801b59c:	9300      	str	r3, [sp, #0]
 801b59e:	462a      	mov	r2, r5
 801b5a0:	4b05      	ldr	r3, [pc, #20]	@ (801b5b8 <_svfiprintf_r+0x1f0>)
 801b5a2:	a904      	add	r1, sp, #16
 801b5a4:	4638      	mov	r0, r7
 801b5a6:	f7fd ffc3 	bl	8019530 <_printf_i>
 801b5aa:	e7ed      	b.n	801b588 <_svfiprintf_r+0x1c0>
 801b5ac:	0801fa20 	.word	0x0801fa20
 801b5b0:	0801fa2a 	.word	0x0801fa2a
 801b5b4:	08019021 	.word	0x08019021
 801b5b8:	0801b311 	.word	0x0801b311
 801b5bc:	0801fa26 	.word	0x0801fa26

0801b5c0 <__sfputc_r>:
 801b5c0:	6893      	ldr	r3, [r2, #8]
 801b5c2:	3b01      	subs	r3, #1
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	b410      	push	{r4}
 801b5c8:	6093      	str	r3, [r2, #8]
 801b5ca:	da08      	bge.n	801b5de <__sfputc_r+0x1e>
 801b5cc:	6994      	ldr	r4, [r2, #24]
 801b5ce:	42a3      	cmp	r3, r4
 801b5d0:	db01      	blt.n	801b5d6 <__sfputc_r+0x16>
 801b5d2:	290a      	cmp	r1, #10
 801b5d4:	d103      	bne.n	801b5de <__sfputc_r+0x1e>
 801b5d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5da:	f7fe ba92 	b.w	8019b02 <__swbuf_r>
 801b5de:	6813      	ldr	r3, [r2, #0]
 801b5e0:	1c58      	adds	r0, r3, #1
 801b5e2:	6010      	str	r0, [r2, #0]
 801b5e4:	7019      	strb	r1, [r3, #0]
 801b5e6:	4608      	mov	r0, r1
 801b5e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5ec:	4770      	bx	lr

0801b5ee <__sfputs_r>:
 801b5ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5f0:	4606      	mov	r6, r0
 801b5f2:	460f      	mov	r7, r1
 801b5f4:	4614      	mov	r4, r2
 801b5f6:	18d5      	adds	r5, r2, r3
 801b5f8:	42ac      	cmp	r4, r5
 801b5fa:	d101      	bne.n	801b600 <__sfputs_r+0x12>
 801b5fc:	2000      	movs	r0, #0
 801b5fe:	e007      	b.n	801b610 <__sfputs_r+0x22>
 801b600:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b604:	463a      	mov	r2, r7
 801b606:	4630      	mov	r0, r6
 801b608:	f7ff ffda 	bl	801b5c0 <__sfputc_r>
 801b60c:	1c43      	adds	r3, r0, #1
 801b60e:	d1f3      	bne.n	801b5f8 <__sfputs_r+0xa>
 801b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b614 <_vfiprintf_r>:
 801b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b618:	460d      	mov	r5, r1
 801b61a:	b09d      	sub	sp, #116	@ 0x74
 801b61c:	4614      	mov	r4, r2
 801b61e:	4698      	mov	r8, r3
 801b620:	4606      	mov	r6, r0
 801b622:	b118      	cbz	r0, 801b62c <_vfiprintf_r+0x18>
 801b624:	6a03      	ldr	r3, [r0, #32]
 801b626:	b90b      	cbnz	r3, 801b62c <_vfiprintf_r+0x18>
 801b628:	f7fe f92e 	bl	8019888 <__sinit>
 801b62c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b62e:	07d9      	lsls	r1, r3, #31
 801b630:	d405      	bmi.n	801b63e <_vfiprintf_r+0x2a>
 801b632:	89ab      	ldrh	r3, [r5, #12]
 801b634:	059a      	lsls	r2, r3, #22
 801b636:	d402      	bmi.n	801b63e <_vfiprintf_r+0x2a>
 801b638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b63a:	f7fe fbd0 	bl	8019dde <__retarget_lock_acquire_recursive>
 801b63e:	89ab      	ldrh	r3, [r5, #12]
 801b640:	071b      	lsls	r3, r3, #28
 801b642:	d501      	bpl.n	801b648 <_vfiprintf_r+0x34>
 801b644:	692b      	ldr	r3, [r5, #16]
 801b646:	b99b      	cbnz	r3, 801b670 <_vfiprintf_r+0x5c>
 801b648:	4629      	mov	r1, r5
 801b64a:	4630      	mov	r0, r6
 801b64c:	f7fe fa98 	bl	8019b80 <__swsetup_r>
 801b650:	b170      	cbz	r0, 801b670 <_vfiprintf_r+0x5c>
 801b652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b654:	07dc      	lsls	r4, r3, #31
 801b656:	d504      	bpl.n	801b662 <_vfiprintf_r+0x4e>
 801b658:	f04f 30ff 	mov.w	r0, #4294967295
 801b65c:	b01d      	add	sp, #116	@ 0x74
 801b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b662:	89ab      	ldrh	r3, [r5, #12]
 801b664:	0598      	lsls	r0, r3, #22
 801b666:	d4f7      	bmi.n	801b658 <_vfiprintf_r+0x44>
 801b668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b66a:	f7fe fbb9 	bl	8019de0 <__retarget_lock_release_recursive>
 801b66e:	e7f3      	b.n	801b658 <_vfiprintf_r+0x44>
 801b670:	2300      	movs	r3, #0
 801b672:	9309      	str	r3, [sp, #36]	@ 0x24
 801b674:	2320      	movs	r3, #32
 801b676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b67a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b67e:	2330      	movs	r3, #48	@ 0x30
 801b680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b830 <_vfiprintf_r+0x21c>
 801b684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b688:	f04f 0901 	mov.w	r9, #1
 801b68c:	4623      	mov	r3, r4
 801b68e:	469a      	mov	sl, r3
 801b690:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b694:	b10a      	cbz	r2, 801b69a <_vfiprintf_r+0x86>
 801b696:	2a25      	cmp	r2, #37	@ 0x25
 801b698:	d1f9      	bne.n	801b68e <_vfiprintf_r+0x7a>
 801b69a:	ebba 0b04 	subs.w	fp, sl, r4
 801b69e:	d00b      	beq.n	801b6b8 <_vfiprintf_r+0xa4>
 801b6a0:	465b      	mov	r3, fp
 801b6a2:	4622      	mov	r2, r4
 801b6a4:	4629      	mov	r1, r5
 801b6a6:	4630      	mov	r0, r6
 801b6a8:	f7ff ffa1 	bl	801b5ee <__sfputs_r>
 801b6ac:	3001      	adds	r0, #1
 801b6ae:	f000 80a7 	beq.w	801b800 <_vfiprintf_r+0x1ec>
 801b6b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b6b4:	445a      	add	r2, fp
 801b6b6:	9209      	str	r2, [sp, #36]	@ 0x24
 801b6b8:	f89a 3000 	ldrb.w	r3, [sl]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	f000 809f 	beq.w	801b800 <_vfiprintf_r+0x1ec>
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	f04f 32ff 	mov.w	r2, #4294967295
 801b6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6cc:	f10a 0a01 	add.w	sl, sl, #1
 801b6d0:	9304      	str	r3, [sp, #16]
 801b6d2:	9307      	str	r3, [sp, #28]
 801b6d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b6d8:	931a      	str	r3, [sp, #104]	@ 0x68
 801b6da:	4654      	mov	r4, sl
 801b6dc:	2205      	movs	r2, #5
 801b6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6e2:	4853      	ldr	r0, [pc, #332]	@ (801b830 <_vfiprintf_r+0x21c>)
 801b6e4:	f7e4 fdac 	bl	8000240 <memchr>
 801b6e8:	9a04      	ldr	r2, [sp, #16]
 801b6ea:	b9d8      	cbnz	r0, 801b724 <_vfiprintf_r+0x110>
 801b6ec:	06d1      	lsls	r1, r2, #27
 801b6ee:	bf44      	itt	mi
 801b6f0:	2320      	movmi	r3, #32
 801b6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b6f6:	0713      	lsls	r3, r2, #28
 801b6f8:	bf44      	itt	mi
 801b6fa:	232b      	movmi	r3, #43	@ 0x2b
 801b6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b700:	f89a 3000 	ldrb.w	r3, [sl]
 801b704:	2b2a      	cmp	r3, #42	@ 0x2a
 801b706:	d015      	beq.n	801b734 <_vfiprintf_r+0x120>
 801b708:	9a07      	ldr	r2, [sp, #28]
 801b70a:	4654      	mov	r4, sl
 801b70c:	2000      	movs	r0, #0
 801b70e:	f04f 0c0a 	mov.w	ip, #10
 801b712:	4621      	mov	r1, r4
 801b714:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b718:	3b30      	subs	r3, #48	@ 0x30
 801b71a:	2b09      	cmp	r3, #9
 801b71c:	d94b      	bls.n	801b7b6 <_vfiprintf_r+0x1a2>
 801b71e:	b1b0      	cbz	r0, 801b74e <_vfiprintf_r+0x13a>
 801b720:	9207      	str	r2, [sp, #28]
 801b722:	e014      	b.n	801b74e <_vfiprintf_r+0x13a>
 801b724:	eba0 0308 	sub.w	r3, r0, r8
 801b728:	fa09 f303 	lsl.w	r3, r9, r3
 801b72c:	4313      	orrs	r3, r2
 801b72e:	9304      	str	r3, [sp, #16]
 801b730:	46a2      	mov	sl, r4
 801b732:	e7d2      	b.n	801b6da <_vfiprintf_r+0xc6>
 801b734:	9b03      	ldr	r3, [sp, #12]
 801b736:	1d19      	adds	r1, r3, #4
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	9103      	str	r1, [sp, #12]
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	bfbb      	ittet	lt
 801b740:	425b      	neglt	r3, r3
 801b742:	f042 0202 	orrlt.w	r2, r2, #2
 801b746:	9307      	strge	r3, [sp, #28]
 801b748:	9307      	strlt	r3, [sp, #28]
 801b74a:	bfb8      	it	lt
 801b74c:	9204      	strlt	r2, [sp, #16]
 801b74e:	7823      	ldrb	r3, [r4, #0]
 801b750:	2b2e      	cmp	r3, #46	@ 0x2e
 801b752:	d10a      	bne.n	801b76a <_vfiprintf_r+0x156>
 801b754:	7863      	ldrb	r3, [r4, #1]
 801b756:	2b2a      	cmp	r3, #42	@ 0x2a
 801b758:	d132      	bne.n	801b7c0 <_vfiprintf_r+0x1ac>
 801b75a:	9b03      	ldr	r3, [sp, #12]
 801b75c:	1d1a      	adds	r2, r3, #4
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	9203      	str	r2, [sp, #12]
 801b762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b766:	3402      	adds	r4, #2
 801b768:	9305      	str	r3, [sp, #20]
 801b76a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b840 <_vfiprintf_r+0x22c>
 801b76e:	7821      	ldrb	r1, [r4, #0]
 801b770:	2203      	movs	r2, #3
 801b772:	4650      	mov	r0, sl
 801b774:	f7e4 fd64 	bl	8000240 <memchr>
 801b778:	b138      	cbz	r0, 801b78a <_vfiprintf_r+0x176>
 801b77a:	9b04      	ldr	r3, [sp, #16]
 801b77c:	eba0 000a 	sub.w	r0, r0, sl
 801b780:	2240      	movs	r2, #64	@ 0x40
 801b782:	4082      	lsls	r2, r0
 801b784:	4313      	orrs	r3, r2
 801b786:	3401      	adds	r4, #1
 801b788:	9304      	str	r3, [sp, #16]
 801b78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b78e:	4829      	ldr	r0, [pc, #164]	@ (801b834 <_vfiprintf_r+0x220>)
 801b790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b794:	2206      	movs	r2, #6
 801b796:	f7e4 fd53 	bl	8000240 <memchr>
 801b79a:	2800      	cmp	r0, #0
 801b79c:	d03f      	beq.n	801b81e <_vfiprintf_r+0x20a>
 801b79e:	4b26      	ldr	r3, [pc, #152]	@ (801b838 <_vfiprintf_r+0x224>)
 801b7a0:	bb1b      	cbnz	r3, 801b7ea <_vfiprintf_r+0x1d6>
 801b7a2:	9b03      	ldr	r3, [sp, #12]
 801b7a4:	3307      	adds	r3, #7
 801b7a6:	f023 0307 	bic.w	r3, r3, #7
 801b7aa:	3308      	adds	r3, #8
 801b7ac:	9303      	str	r3, [sp, #12]
 801b7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7b0:	443b      	add	r3, r7
 801b7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7b4:	e76a      	b.n	801b68c <_vfiprintf_r+0x78>
 801b7b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7ba:	460c      	mov	r4, r1
 801b7bc:	2001      	movs	r0, #1
 801b7be:	e7a8      	b.n	801b712 <_vfiprintf_r+0xfe>
 801b7c0:	2300      	movs	r3, #0
 801b7c2:	3401      	adds	r4, #1
 801b7c4:	9305      	str	r3, [sp, #20]
 801b7c6:	4619      	mov	r1, r3
 801b7c8:	f04f 0c0a 	mov.w	ip, #10
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7d2:	3a30      	subs	r2, #48	@ 0x30
 801b7d4:	2a09      	cmp	r2, #9
 801b7d6:	d903      	bls.n	801b7e0 <_vfiprintf_r+0x1cc>
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d0c6      	beq.n	801b76a <_vfiprintf_r+0x156>
 801b7dc:	9105      	str	r1, [sp, #20]
 801b7de:	e7c4      	b.n	801b76a <_vfiprintf_r+0x156>
 801b7e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7e4:	4604      	mov	r4, r0
 801b7e6:	2301      	movs	r3, #1
 801b7e8:	e7f0      	b.n	801b7cc <_vfiprintf_r+0x1b8>
 801b7ea:	ab03      	add	r3, sp, #12
 801b7ec:	9300      	str	r3, [sp, #0]
 801b7ee:	462a      	mov	r2, r5
 801b7f0:	4b12      	ldr	r3, [pc, #72]	@ (801b83c <_vfiprintf_r+0x228>)
 801b7f2:	a904      	add	r1, sp, #16
 801b7f4:	4630      	mov	r0, r6
 801b7f6:	f7fd fc13 	bl	8019020 <_printf_float>
 801b7fa:	4607      	mov	r7, r0
 801b7fc:	1c78      	adds	r0, r7, #1
 801b7fe:	d1d6      	bne.n	801b7ae <_vfiprintf_r+0x19a>
 801b800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b802:	07d9      	lsls	r1, r3, #31
 801b804:	d405      	bmi.n	801b812 <_vfiprintf_r+0x1fe>
 801b806:	89ab      	ldrh	r3, [r5, #12]
 801b808:	059a      	lsls	r2, r3, #22
 801b80a:	d402      	bmi.n	801b812 <_vfiprintf_r+0x1fe>
 801b80c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b80e:	f7fe fae7 	bl	8019de0 <__retarget_lock_release_recursive>
 801b812:	89ab      	ldrh	r3, [r5, #12]
 801b814:	065b      	lsls	r3, r3, #25
 801b816:	f53f af1f 	bmi.w	801b658 <_vfiprintf_r+0x44>
 801b81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b81c:	e71e      	b.n	801b65c <_vfiprintf_r+0x48>
 801b81e:	ab03      	add	r3, sp, #12
 801b820:	9300      	str	r3, [sp, #0]
 801b822:	462a      	mov	r2, r5
 801b824:	4b05      	ldr	r3, [pc, #20]	@ (801b83c <_vfiprintf_r+0x228>)
 801b826:	a904      	add	r1, sp, #16
 801b828:	4630      	mov	r0, r6
 801b82a:	f7fd fe81 	bl	8019530 <_printf_i>
 801b82e:	e7e4      	b.n	801b7fa <_vfiprintf_r+0x1e6>
 801b830:	0801fa20 	.word	0x0801fa20
 801b834:	0801fa2a 	.word	0x0801fa2a
 801b838:	08019021 	.word	0x08019021
 801b83c:	0801b5ef 	.word	0x0801b5ef
 801b840:	0801fa26 	.word	0x0801fa26

0801b844 <__sflush_r>:
 801b844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b84c:	0716      	lsls	r6, r2, #28
 801b84e:	4605      	mov	r5, r0
 801b850:	460c      	mov	r4, r1
 801b852:	d454      	bmi.n	801b8fe <__sflush_r+0xba>
 801b854:	684b      	ldr	r3, [r1, #4]
 801b856:	2b00      	cmp	r3, #0
 801b858:	dc02      	bgt.n	801b860 <__sflush_r+0x1c>
 801b85a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	dd48      	ble.n	801b8f2 <__sflush_r+0xae>
 801b860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b862:	2e00      	cmp	r6, #0
 801b864:	d045      	beq.n	801b8f2 <__sflush_r+0xae>
 801b866:	2300      	movs	r3, #0
 801b868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b86c:	682f      	ldr	r7, [r5, #0]
 801b86e:	6a21      	ldr	r1, [r4, #32]
 801b870:	602b      	str	r3, [r5, #0]
 801b872:	d030      	beq.n	801b8d6 <__sflush_r+0x92>
 801b874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b876:	89a3      	ldrh	r3, [r4, #12]
 801b878:	0759      	lsls	r1, r3, #29
 801b87a:	d505      	bpl.n	801b888 <__sflush_r+0x44>
 801b87c:	6863      	ldr	r3, [r4, #4]
 801b87e:	1ad2      	subs	r2, r2, r3
 801b880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b882:	b10b      	cbz	r3, 801b888 <__sflush_r+0x44>
 801b884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b886:	1ad2      	subs	r2, r2, r3
 801b888:	2300      	movs	r3, #0
 801b88a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b88c:	6a21      	ldr	r1, [r4, #32]
 801b88e:	4628      	mov	r0, r5
 801b890:	47b0      	blx	r6
 801b892:	1c43      	adds	r3, r0, #1
 801b894:	89a3      	ldrh	r3, [r4, #12]
 801b896:	d106      	bne.n	801b8a6 <__sflush_r+0x62>
 801b898:	6829      	ldr	r1, [r5, #0]
 801b89a:	291d      	cmp	r1, #29
 801b89c:	d82b      	bhi.n	801b8f6 <__sflush_r+0xb2>
 801b89e:	4a2a      	ldr	r2, [pc, #168]	@ (801b948 <__sflush_r+0x104>)
 801b8a0:	410a      	asrs	r2, r1
 801b8a2:	07d6      	lsls	r6, r2, #31
 801b8a4:	d427      	bmi.n	801b8f6 <__sflush_r+0xb2>
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	6062      	str	r2, [r4, #4]
 801b8aa:	04d9      	lsls	r1, r3, #19
 801b8ac:	6922      	ldr	r2, [r4, #16]
 801b8ae:	6022      	str	r2, [r4, #0]
 801b8b0:	d504      	bpl.n	801b8bc <__sflush_r+0x78>
 801b8b2:	1c42      	adds	r2, r0, #1
 801b8b4:	d101      	bne.n	801b8ba <__sflush_r+0x76>
 801b8b6:	682b      	ldr	r3, [r5, #0]
 801b8b8:	b903      	cbnz	r3, 801b8bc <__sflush_r+0x78>
 801b8ba:	6560      	str	r0, [r4, #84]	@ 0x54
 801b8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b8be:	602f      	str	r7, [r5, #0]
 801b8c0:	b1b9      	cbz	r1, 801b8f2 <__sflush_r+0xae>
 801b8c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b8c6:	4299      	cmp	r1, r3
 801b8c8:	d002      	beq.n	801b8d0 <__sflush_r+0x8c>
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	f7ff f89e 	bl	801aa0c <_free_r>
 801b8d0:	2300      	movs	r3, #0
 801b8d2:	6363      	str	r3, [r4, #52]	@ 0x34
 801b8d4:	e00d      	b.n	801b8f2 <__sflush_r+0xae>
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	4628      	mov	r0, r5
 801b8da:	47b0      	blx	r6
 801b8dc:	4602      	mov	r2, r0
 801b8de:	1c50      	adds	r0, r2, #1
 801b8e0:	d1c9      	bne.n	801b876 <__sflush_r+0x32>
 801b8e2:	682b      	ldr	r3, [r5, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d0c6      	beq.n	801b876 <__sflush_r+0x32>
 801b8e8:	2b1d      	cmp	r3, #29
 801b8ea:	d001      	beq.n	801b8f0 <__sflush_r+0xac>
 801b8ec:	2b16      	cmp	r3, #22
 801b8ee:	d11e      	bne.n	801b92e <__sflush_r+0xea>
 801b8f0:	602f      	str	r7, [r5, #0]
 801b8f2:	2000      	movs	r0, #0
 801b8f4:	e022      	b.n	801b93c <__sflush_r+0xf8>
 801b8f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8fa:	b21b      	sxth	r3, r3
 801b8fc:	e01b      	b.n	801b936 <__sflush_r+0xf2>
 801b8fe:	690f      	ldr	r7, [r1, #16]
 801b900:	2f00      	cmp	r7, #0
 801b902:	d0f6      	beq.n	801b8f2 <__sflush_r+0xae>
 801b904:	0793      	lsls	r3, r2, #30
 801b906:	680e      	ldr	r6, [r1, #0]
 801b908:	bf08      	it	eq
 801b90a:	694b      	ldreq	r3, [r1, #20]
 801b90c:	600f      	str	r7, [r1, #0]
 801b90e:	bf18      	it	ne
 801b910:	2300      	movne	r3, #0
 801b912:	eba6 0807 	sub.w	r8, r6, r7
 801b916:	608b      	str	r3, [r1, #8]
 801b918:	f1b8 0f00 	cmp.w	r8, #0
 801b91c:	dde9      	ble.n	801b8f2 <__sflush_r+0xae>
 801b91e:	6a21      	ldr	r1, [r4, #32]
 801b920:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b922:	4643      	mov	r3, r8
 801b924:	463a      	mov	r2, r7
 801b926:	4628      	mov	r0, r5
 801b928:	47b0      	blx	r6
 801b92a:	2800      	cmp	r0, #0
 801b92c:	dc08      	bgt.n	801b940 <__sflush_r+0xfc>
 801b92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b936:	81a3      	strh	r3, [r4, #12]
 801b938:	f04f 30ff 	mov.w	r0, #4294967295
 801b93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b940:	4407      	add	r7, r0
 801b942:	eba8 0800 	sub.w	r8, r8, r0
 801b946:	e7e7      	b.n	801b918 <__sflush_r+0xd4>
 801b948:	dfbffffe 	.word	0xdfbffffe

0801b94c <_fflush_r>:
 801b94c:	b538      	push	{r3, r4, r5, lr}
 801b94e:	690b      	ldr	r3, [r1, #16]
 801b950:	4605      	mov	r5, r0
 801b952:	460c      	mov	r4, r1
 801b954:	b913      	cbnz	r3, 801b95c <_fflush_r+0x10>
 801b956:	2500      	movs	r5, #0
 801b958:	4628      	mov	r0, r5
 801b95a:	bd38      	pop	{r3, r4, r5, pc}
 801b95c:	b118      	cbz	r0, 801b966 <_fflush_r+0x1a>
 801b95e:	6a03      	ldr	r3, [r0, #32]
 801b960:	b90b      	cbnz	r3, 801b966 <_fflush_r+0x1a>
 801b962:	f7fd ff91 	bl	8019888 <__sinit>
 801b966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d0f3      	beq.n	801b956 <_fflush_r+0xa>
 801b96e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b970:	07d0      	lsls	r0, r2, #31
 801b972:	d404      	bmi.n	801b97e <_fflush_r+0x32>
 801b974:	0599      	lsls	r1, r3, #22
 801b976:	d402      	bmi.n	801b97e <_fflush_r+0x32>
 801b978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b97a:	f7fe fa30 	bl	8019dde <__retarget_lock_acquire_recursive>
 801b97e:	4628      	mov	r0, r5
 801b980:	4621      	mov	r1, r4
 801b982:	f7ff ff5f 	bl	801b844 <__sflush_r>
 801b986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b988:	07da      	lsls	r2, r3, #31
 801b98a:	4605      	mov	r5, r0
 801b98c:	d4e4      	bmi.n	801b958 <_fflush_r+0xc>
 801b98e:	89a3      	ldrh	r3, [r4, #12]
 801b990:	059b      	lsls	r3, r3, #22
 801b992:	d4e1      	bmi.n	801b958 <_fflush_r+0xc>
 801b994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b996:	f7fe fa23 	bl	8019de0 <__retarget_lock_release_recursive>
 801b99a:	e7dd      	b.n	801b958 <_fflush_r+0xc>

0801b99c <fiprintf>:
 801b99c:	b40e      	push	{r1, r2, r3}
 801b99e:	b503      	push	{r0, r1, lr}
 801b9a0:	4601      	mov	r1, r0
 801b9a2:	ab03      	add	r3, sp, #12
 801b9a4:	4805      	ldr	r0, [pc, #20]	@ (801b9bc <fiprintf+0x20>)
 801b9a6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b9aa:	6800      	ldr	r0, [r0, #0]
 801b9ac:	9301      	str	r3, [sp, #4]
 801b9ae:	f7ff fe31 	bl	801b614 <_vfiprintf_r>
 801b9b2:	b002      	add	sp, #8
 801b9b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b9b8:	b003      	add	sp, #12
 801b9ba:	4770      	bx	lr
 801b9bc:	20000028 	.word	0x20000028

0801b9c0 <__swhatbuf_r>:
 801b9c0:	b570      	push	{r4, r5, r6, lr}
 801b9c2:	460c      	mov	r4, r1
 801b9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9c8:	2900      	cmp	r1, #0
 801b9ca:	b096      	sub	sp, #88	@ 0x58
 801b9cc:	4615      	mov	r5, r2
 801b9ce:	461e      	mov	r6, r3
 801b9d0:	da0d      	bge.n	801b9ee <__swhatbuf_r+0x2e>
 801b9d2:	89a3      	ldrh	r3, [r4, #12]
 801b9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b9d8:	f04f 0100 	mov.w	r1, #0
 801b9dc:	bf14      	ite	ne
 801b9de:	2340      	movne	r3, #64	@ 0x40
 801b9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b9e4:	2000      	movs	r0, #0
 801b9e6:	6031      	str	r1, [r6, #0]
 801b9e8:	602b      	str	r3, [r5, #0]
 801b9ea:	b016      	add	sp, #88	@ 0x58
 801b9ec:	bd70      	pop	{r4, r5, r6, pc}
 801b9ee:	466a      	mov	r2, sp
 801b9f0:	f000 f848 	bl	801ba84 <_fstat_r>
 801b9f4:	2800      	cmp	r0, #0
 801b9f6:	dbec      	blt.n	801b9d2 <__swhatbuf_r+0x12>
 801b9f8:	9901      	ldr	r1, [sp, #4]
 801b9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ba02:	4259      	negs	r1, r3
 801ba04:	4159      	adcs	r1, r3
 801ba06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ba0a:	e7eb      	b.n	801b9e4 <__swhatbuf_r+0x24>

0801ba0c <__smakebuf_r>:
 801ba0c:	898b      	ldrh	r3, [r1, #12]
 801ba0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba10:	079d      	lsls	r5, r3, #30
 801ba12:	4606      	mov	r6, r0
 801ba14:	460c      	mov	r4, r1
 801ba16:	d507      	bpl.n	801ba28 <__smakebuf_r+0x1c>
 801ba18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ba1c:	6023      	str	r3, [r4, #0]
 801ba1e:	6123      	str	r3, [r4, #16]
 801ba20:	2301      	movs	r3, #1
 801ba22:	6163      	str	r3, [r4, #20]
 801ba24:	b003      	add	sp, #12
 801ba26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba28:	ab01      	add	r3, sp, #4
 801ba2a:	466a      	mov	r2, sp
 801ba2c:	f7ff ffc8 	bl	801b9c0 <__swhatbuf_r>
 801ba30:	9f00      	ldr	r7, [sp, #0]
 801ba32:	4605      	mov	r5, r0
 801ba34:	4639      	mov	r1, r7
 801ba36:	4630      	mov	r0, r6
 801ba38:	f7ff f85c 	bl	801aaf4 <_malloc_r>
 801ba3c:	b948      	cbnz	r0, 801ba52 <__smakebuf_r+0x46>
 801ba3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba42:	059a      	lsls	r2, r3, #22
 801ba44:	d4ee      	bmi.n	801ba24 <__smakebuf_r+0x18>
 801ba46:	f023 0303 	bic.w	r3, r3, #3
 801ba4a:	f043 0302 	orr.w	r3, r3, #2
 801ba4e:	81a3      	strh	r3, [r4, #12]
 801ba50:	e7e2      	b.n	801ba18 <__smakebuf_r+0xc>
 801ba52:	89a3      	ldrh	r3, [r4, #12]
 801ba54:	6020      	str	r0, [r4, #0]
 801ba56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ba5a:	81a3      	strh	r3, [r4, #12]
 801ba5c:	9b01      	ldr	r3, [sp, #4]
 801ba5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ba62:	b15b      	cbz	r3, 801ba7c <__smakebuf_r+0x70>
 801ba64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba68:	4630      	mov	r0, r6
 801ba6a:	f000 f81d 	bl	801baa8 <_isatty_r>
 801ba6e:	b128      	cbz	r0, 801ba7c <__smakebuf_r+0x70>
 801ba70:	89a3      	ldrh	r3, [r4, #12]
 801ba72:	f023 0303 	bic.w	r3, r3, #3
 801ba76:	f043 0301 	orr.w	r3, r3, #1
 801ba7a:	81a3      	strh	r3, [r4, #12]
 801ba7c:	89a3      	ldrh	r3, [r4, #12]
 801ba7e:	431d      	orrs	r5, r3
 801ba80:	81a5      	strh	r5, [r4, #12]
 801ba82:	e7cf      	b.n	801ba24 <__smakebuf_r+0x18>

0801ba84 <_fstat_r>:
 801ba84:	b538      	push	{r3, r4, r5, lr}
 801ba86:	4d07      	ldr	r5, [pc, #28]	@ (801baa4 <_fstat_r+0x20>)
 801ba88:	2300      	movs	r3, #0
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	4608      	mov	r0, r1
 801ba8e:	4611      	mov	r1, r2
 801ba90:	602b      	str	r3, [r5, #0]
 801ba92:	f7e5 fe0b 	bl	80016ac <_fstat>
 801ba96:	1c43      	adds	r3, r0, #1
 801ba98:	d102      	bne.n	801baa0 <_fstat_r+0x1c>
 801ba9a:	682b      	ldr	r3, [r5, #0]
 801ba9c:	b103      	cbz	r3, 801baa0 <_fstat_r+0x1c>
 801ba9e:	6023      	str	r3, [r4, #0]
 801baa0:	bd38      	pop	{r3, r4, r5, pc}
 801baa2:	bf00      	nop
 801baa4:	20011e74 	.word	0x20011e74

0801baa8 <_isatty_r>:
 801baa8:	b538      	push	{r3, r4, r5, lr}
 801baaa:	4d06      	ldr	r5, [pc, #24]	@ (801bac4 <_isatty_r+0x1c>)
 801baac:	2300      	movs	r3, #0
 801baae:	4604      	mov	r4, r0
 801bab0:	4608      	mov	r0, r1
 801bab2:	602b      	str	r3, [r5, #0]
 801bab4:	f7e5 fe0a 	bl	80016cc <_isatty>
 801bab8:	1c43      	adds	r3, r0, #1
 801baba:	d102      	bne.n	801bac2 <_isatty_r+0x1a>
 801babc:	682b      	ldr	r3, [r5, #0]
 801babe:	b103      	cbz	r3, 801bac2 <_isatty_r+0x1a>
 801bac0:	6023      	str	r3, [r4, #0]
 801bac2:	bd38      	pop	{r3, r4, r5, pc}
 801bac4:	20011e74 	.word	0x20011e74

0801bac8 <_sbrk_r>:
 801bac8:	b538      	push	{r3, r4, r5, lr}
 801baca:	4d06      	ldr	r5, [pc, #24]	@ (801bae4 <_sbrk_r+0x1c>)
 801bacc:	2300      	movs	r3, #0
 801bace:	4604      	mov	r4, r0
 801bad0:	4608      	mov	r0, r1
 801bad2:	602b      	str	r3, [r5, #0]
 801bad4:	f7e5 fe12 	bl	80016fc <_sbrk>
 801bad8:	1c43      	adds	r3, r0, #1
 801bada:	d102      	bne.n	801bae2 <_sbrk_r+0x1a>
 801badc:	682b      	ldr	r3, [r5, #0]
 801bade:	b103      	cbz	r3, 801bae2 <_sbrk_r+0x1a>
 801bae0:	6023      	str	r3, [r4, #0]
 801bae2:	bd38      	pop	{r3, r4, r5, pc}
 801bae4:	20011e74 	.word	0x20011e74

0801bae8 <abort>:
 801bae8:	b508      	push	{r3, lr}
 801baea:	2006      	movs	r0, #6
 801baec:	f000 f88c 	bl	801bc08 <raise>
 801baf0:	2001      	movs	r0, #1
 801baf2:	f7e5 fda7 	bl	8001644 <_exit>

0801baf6 <_calloc_r>:
 801baf6:	b570      	push	{r4, r5, r6, lr}
 801baf8:	fba1 5402 	umull	r5, r4, r1, r2
 801bafc:	b93c      	cbnz	r4, 801bb0e <_calloc_r+0x18>
 801bafe:	4629      	mov	r1, r5
 801bb00:	f7fe fff8 	bl	801aaf4 <_malloc_r>
 801bb04:	4606      	mov	r6, r0
 801bb06:	b928      	cbnz	r0, 801bb14 <_calloc_r+0x1e>
 801bb08:	2600      	movs	r6, #0
 801bb0a:	4630      	mov	r0, r6
 801bb0c:	bd70      	pop	{r4, r5, r6, pc}
 801bb0e:	220c      	movs	r2, #12
 801bb10:	6002      	str	r2, [r0, #0]
 801bb12:	e7f9      	b.n	801bb08 <_calloc_r+0x12>
 801bb14:	462a      	mov	r2, r5
 801bb16:	4621      	mov	r1, r4
 801bb18:	f7fe f8b2 	bl	8019c80 <memset>
 801bb1c:	e7f5      	b.n	801bb0a <_calloc_r+0x14>

0801bb1e <__ascii_mbtowc>:
 801bb1e:	b082      	sub	sp, #8
 801bb20:	b901      	cbnz	r1, 801bb24 <__ascii_mbtowc+0x6>
 801bb22:	a901      	add	r1, sp, #4
 801bb24:	b142      	cbz	r2, 801bb38 <__ascii_mbtowc+0x1a>
 801bb26:	b14b      	cbz	r3, 801bb3c <__ascii_mbtowc+0x1e>
 801bb28:	7813      	ldrb	r3, [r2, #0]
 801bb2a:	600b      	str	r3, [r1, #0]
 801bb2c:	7812      	ldrb	r2, [r2, #0]
 801bb2e:	1e10      	subs	r0, r2, #0
 801bb30:	bf18      	it	ne
 801bb32:	2001      	movne	r0, #1
 801bb34:	b002      	add	sp, #8
 801bb36:	4770      	bx	lr
 801bb38:	4610      	mov	r0, r2
 801bb3a:	e7fb      	b.n	801bb34 <__ascii_mbtowc+0x16>
 801bb3c:	f06f 0001 	mvn.w	r0, #1
 801bb40:	e7f8      	b.n	801bb34 <__ascii_mbtowc+0x16>

0801bb42 <_realloc_r>:
 801bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb46:	4680      	mov	r8, r0
 801bb48:	4615      	mov	r5, r2
 801bb4a:	460c      	mov	r4, r1
 801bb4c:	b921      	cbnz	r1, 801bb58 <_realloc_r+0x16>
 801bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb52:	4611      	mov	r1, r2
 801bb54:	f7fe bfce 	b.w	801aaf4 <_malloc_r>
 801bb58:	b92a      	cbnz	r2, 801bb66 <_realloc_r+0x24>
 801bb5a:	f7fe ff57 	bl	801aa0c <_free_r>
 801bb5e:	2400      	movs	r4, #0
 801bb60:	4620      	mov	r0, r4
 801bb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb66:	f000 f86b 	bl	801bc40 <_malloc_usable_size_r>
 801bb6a:	4285      	cmp	r5, r0
 801bb6c:	4606      	mov	r6, r0
 801bb6e:	d802      	bhi.n	801bb76 <_realloc_r+0x34>
 801bb70:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bb74:	d8f4      	bhi.n	801bb60 <_realloc_r+0x1e>
 801bb76:	4629      	mov	r1, r5
 801bb78:	4640      	mov	r0, r8
 801bb7a:	f7fe ffbb 	bl	801aaf4 <_malloc_r>
 801bb7e:	4607      	mov	r7, r0
 801bb80:	2800      	cmp	r0, #0
 801bb82:	d0ec      	beq.n	801bb5e <_realloc_r+0x1c>
 801bb84:	42b5      	cmp	r5, r6
 801bb86:	462a      	mov	r2, r5
 801bb88:	4621      	mov	r1, r4
 801bb8a:	bf28      	it	cs
 801bb8c:	4632      	movcs	r2, r6
 801bb8e:	f7fe f930 	bl	8019df2 <memcpy>
 801bb92:	4621      	mov	r1, r4
 801bb94:	4640      	mov	r0, r8
 801bb96:	f7fe ff39 	bl	801aa0c <_free_r>
 801bb9a:	463c      	mov	r4, r7
 801bb9c:	e7e0      	b.n	801bb60 <_realloc_r+0x1e>

0801bb9e <__ascii_wctomb>:
 801bb9e:	4603      	mov	r3, r0
 801bba0:	4608      	mov	r0, r1
 801bba2:	b141      	cbz	r1, 801bbb6 <__ascii_wctomb+0x18>
 801bba4:	2aff      	cmp	r2, #255	@ 0xff
 801bba6:	d904      	bls.n	801bbb2 <__ascii_wctomb+0x14>
 801bba8:	228a      	movs	r2, #138	@ 0x8a
 801bbaa:	601a      	str	r2, [r3, #0]
 801bbac:	f04f 30ff 	mov.w	r0, #4294967295
 801bbb0:	4770      	bx	lr
 801bbb2:	700a      	strb	r2, [r1, #0]
 801bbb4:	2001      	movs	r0, #1
 801bbb6:	4770      	bx	lr

0801bbb8 <_raise_r>:
 801bbb8:	291f      	cmp	r1, #31
 801bbba:	b538      	push	{r3, r4, r5, lr}
 801bbbc:	4605      	mov	r5, r0
 801bbbe:	460c      	mov	r4, r1
 801bbc0:	d904      	bls.n	801bbcc <_raise_r+0x14>
 801bbc2:	2316      	movs	r3, #22
 801bbc4:	6003      	str	r3, [r0, #0]
 801bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 801bbca:	bd38      	pop	{r3, r4, r5, pc}
 801bbcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bbce:	b112      	cbz	r2, 801bbd6 <_raise_r+0x1e>
 801bbd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbd4:	b94b      	cbnz	r3, 801bbea <_raise_r+0x32>
 801bbd6:	4628      	mov	r0, r5
 801bbd8:	f000 f830 	bl	801bc3c <_getpid_r>
 801bbdc:	4622      	mov	r2, r4
 801bbde:	4601      	mov	r1, r0
 801bbe0:	4628      	mov	r0, r5
 801bbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbe6:	f000 b817 	b.w	801bc18 <_kill_r>
 801bbea:	2b01      	cmp	r3, #1
 801bbec:	d00a      	beq.n	801bc04 <_raise_r+0x4c>
 801bbee:	1c59      	adds	r1, r3, #1
 801bbf0:	d103      	bne.n	801bbfa <_raise_r+0x42>
 801bbf2:	2316      	movs	r3, #22
 801bbf4:	6003      	str	r3, [r0, #0]
 801bbf6:	2001      	movs	r0, #1
 801bbf8:	e7e7      	b.n	801bbca <_raise_r+0x12>
 801bbfa:	2100      	movs	r1, #0
 801bbfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bc00:	4620      	mov	r0, r4
 801bc02:	4798      	blx	r3
 801bc04:	2000      	movs	r0, #0
 801bc06:	e7e0      	b.n	801bbca <_raise_r+0x12>

0801bc08 <raise>:
 801bc08:	4b02      	ldr	r3, [pc, #8]	@ (801bc14 <raise+0xc>)
 801bc0a:	4601      	mov	r1, r0
 801bc0c:	6818      	ldr	r0, [r3, #0]
 801bc0e:	f7ff bfd3 	b.w	801bbb8 <_raise_r>
 801bc12:	bf00      	nop
 801bc14:	20000028 	.word	0x20000028

0801bc18 <_kill_r>:
 801bc18:	b538      	push	{r3, r4, r5, lr}
 801bc1a:	4d07      	ldr	r5, [pc, #28]	@ (801bc38 <_kill_r+0x20>)
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	4604      	mov	r4, r0
 801bc20:	4608      	mov	r0, r1
 801bc22:	4611      	mov	r1, r2
 801bc24:	602b      	str	r3, [r5, #0]
 801bc26:	f7e5 fcfb 	bl	8001620 <_kill>
 801bc2a:	1c43      	adds	r3, r0, #1
 801bc2c:	d102      	bne.n	801bc34 <_kill_r+0x1c>
 801bc2e:	682b      	ldr	r3, [r5, #0]
 801bc30:	b103      	cbz	r3, 801bc34 <_kill_r+0x1c>
 801bc32:	6023      	str	r3, [r4, #0]
 801bc34:	bd38      	pop	{r3, r4, r5, pc}
 801bc36:	bf00      	nop
 801bc38:	20011e74 	.word	0x20011e74

0801bc3c <_getpid_r>:
 801bc3c:	f7e5 bce8 	b.w	8001610 <_getpid>

0801bc40 <_malloc_usable_size_r>:
 801bc40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc44:	1f18      	subs	r0, r3, #4
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	bfbc      	itt	lt
 801bc4a:	580b      	ldrlt	r3, [r1, r0]
 801bc4c:	18c0      	addlt	r0, r0, r3
 801bc4e:	4770      	bx	lr

0801bc50 <_init>:
 801bc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc52:	bf00      	nop
 801bc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc56:	bc08      	pop	{r3}
 801bc58:	469e      	mov	lr, r3
 801bc5a:	4770      	bx	lr

0801bc5c <_fini>:
 801bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc5e:	bf00      	nop
 801bc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc62:	bc08      	pop	{r3}
 801bc64:	469e      	mov	lr, r3
 801bc66:	4770      	bx	lr
