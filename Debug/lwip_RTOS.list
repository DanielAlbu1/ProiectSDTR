
lwip_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba58  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dac  0801bc58  0801bc58  0001cc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fa04  0801fa04  000211e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fa04  0801fa04  00020a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa0c  0801fa0c  000211e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fa0c  0801fa0c  00020a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fa10  0801fa10  00020a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0801fa14  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011de0  200001e4  0801fbf8  000211e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011fc4  0801fbf8  00021fc4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000211e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003addb  00000000  00000000  00021212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000092d2  00000000  00000000  0005bfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bb0  00000000  00000000  000652c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000228d  00000000  00000000  00067e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c18f  00000000  00000000  0006a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000483b9  00000000  00000000  000a628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00126ea4  00000000  00000000  000ee645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002154e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c4e4  00000000  00000000  0021552c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00221a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0801bc40 	.word	0x0801bc40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0801bc40 	.word	0x0801bc40

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <humiditySensorAdcInit>:
#include "adc_sensors.h"


void humiditySensorAdcInit(void){
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <humiditySensorAdcInit+0x80>)
 80005f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44

	GPIOA->MODER |= GPIO_MODER_MODER3;
 80005fc:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <humiditySensorAdcInit+0x84>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <humiditySensorAdcInit+0x84>)
 8000602:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a15      	ldr	r2, [pc, #84]	@ (8000664 <humiditySensorAdcInit+0x84>)
 800060e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000612:	60d3      	str	r3, [r2, #12]

	ADC1->CR2 = 0;
 8000614:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_ADON;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	4a12      	ldr	r2, [pc, #72]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 = 3;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000628:	2203      	movs	r2, #3
 800062a:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC1->SMPR2 |= ADC_SMPR2_SMP3;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000632:	f443 6360 	orr.w	r3, r3, #3584	@ 0xe00
 8000636:	6113      	str	r3, [r2, #16]
	ADC1->CR1 = 0;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= ADC_CR2_EXTSEL;
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000644:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 8000648:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <humiditySensorAdcInit+0x88>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a06      	ldr	r2, [pc, #24]	@ (8000668 <humiditySensorAdcInit+0x88>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	6093      	str	r3, [r2, #8]

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40012000 	.word	0x40012000

0800066c <humiditySensorReadValue>:

uint16_t humiditySensorReadValue(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <humiditySensorReadValue+0x30>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	4a09      	ldr	r2, [pc, #36]	@ (800069c <humiditySensorReadValue+0x30>)
 8000676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800067a:	6093      	str	r3, [r2, #8]

	while(!(ADC1->SR & ADC_SR_EOC));
 800067c:	bf00      	nop
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <humiditySensorReadValue+0x30>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <humiditySensorReadValue+0x12>

	return ADC1 -> DR;
 800068a:	4b04      	ldr	r3, [pc, #16]	@ (800069c <humiditySensorReadValue+0x30>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	b29b      	uxth	r3, r3

}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000

080006a0 <humidity_read_task>:
void humidity_read_task(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	while (1)
	    {
			PrintTaskTiming("ADC_start");
 80006a8:	481f      	ldr	r0, [pc, #124]	@ (8000728 <humidity_read_task+0x88>)
 80006aa:	f000 fab1 	bl	8000c10 <PrintTaskTiming>
	        int adc_value = humiditySensorReadValue();
 80006ae:	f7ff ffdd 	bl	800066c <humiditySensorReadValue>
 80006b2:	4603      	mov	r3, r0
 80006b4:	617b      	str	r3, [r7, #20]

	        if (adc_value < 1200) adc_value = 1200;
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 80006bc:	da02      	bge.n	80006c4 <humidity_read_task+0x24>
 80006be:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80006c2:	617b      	str	r3, [r7, #20]
	        if (adc_value > 4000) adc_value = 4000;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80006ca:	dd02      	ble.n	80006d2 <humidity_read_task+0x32>
 80006cc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80006d0:	617b      	str	r3, [r7, #20]

	        float humidity = (float)(4000 - adc_value) / (4000 - 1200) * 100;
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	f5c3 637a 	rsb	r3, r3, #4000	@ 0xfa0
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800072c <humidity_read_task+0x8c>
 80006e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000730 <humidity_read_task+0x90>
 80006ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f0:	edc7 7a04 	vstr	s15, [r7, #16]

	        HumiditySensorData sensorData;
	        sensorData.humidity = humidity;
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	60bb      	str	r3, [r7, #8]
	        sensorData.adc_value = adc_value;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	60fb      	str	r3, [r7, #12]


	        if (xQueueOverwrite(sensorQueue, &sensorData) != pdTRUE)
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <humidity_read_task+0x94>)
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	2302      	movs	r3, #2
 8000706:	2200      	movs	r2, #0
 8000708:	f007 ff0a 	bl	8008520 <xQueueGenericSend>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d002      	beq.n	8000718 <humidity_read_task+0x78>
	        {
	            printf("Failed to send humidity data to queue\n");
 8000712:	4809      	ldr	r0, [pc, #36]	@ (8000738 <humidity_read_task+0x98>)
 8000714:	f019 f94e 	bl	80199b4 <puts>
	        }

	        PrintTaskTiming("ADC_end");
 8000718:	4808      	ldr	r0, [pc, #32]	@ (800073c <humidity_read_task+0x9c>)
 800071a:	f000 fa79 	bl	8000c10 <PrintTaskTiming>
	        vTaskDelay(pdMS_TO_TICKS(1000));
 800071e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000722:	f009 f87b 	bl	800981c <vTaskDelay>
	    {
 8000726:	e7bf      	b.n	80006a8 <humidity_read_task+0x8>
 8000728:	0801bc58 	.word	0x0801bc58
 800072c:	452f0000 	.word	0x452f0000
 8000730:	42c80000 	.word	0x42c80000
 8000734:	200006e0 	.word	0x200006e0
 8000738:	0801bc64 	.word	0x0801bc64
 800073c:	0801bc8c 	.word	0x0801bc8c

08000740 <init_humidity_task>:
	    }
}
void init_humidity_task(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
    osThreadAttr_t humidityTask_attributes = {
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2224      	movs	r2, #36	@ 0x24
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f019 fa8f 	bl	8019c70 <memset>
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <init_humidity_task+0x34>)
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	2318      	movs	r3, #24
 800075e:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };


    osThreadNew(humidity_read_task, NULL, &humidityTask_attributes);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	461a      	mov	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	4804      	ldr	r0, [pc, #16]	@ (8000778 <init_humidity_task+0x38>)
 8000768:	f006 fde6 	bl	8007338 <osThreadNew>
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	@ 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0801bc94 	.word	0x0801bc94
 8000778:	080006a1 	.word	0x080006a1

0800077c <pump_control_task>:

void pump_control_task(void *argument)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <pump_control_task+0x68>)
 800078a:	f002 fdef 	bl	800336c <HAL_GPIO_WritePin>

    HumiditySensorData sensor_data;

    while (1)
    {
    	PrintTaskTiming("PumpControl_start");
 800078e:	4816      	ldr	r0, [pc, #88]	@ (80007e8 <pump_control_task+0x6c>)
 8000790:	f000 fa3e 	bl	8000c10 <PrintTaskTiming>
        if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <pump_control_task+0x70>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f107 0108 	add.w	r1, r7, #8
 800079c:	2200      	movs	r2, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f008 fb04 	bl	8008dac <xQueuePeek>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d113      	bne.n	80007d2 <pump_control_task+0x56>
        {
            if (sensor_data.humidity < 50.0)
 80007aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ae:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80007f0 <pump_control_task+0x74>
 80007b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	d505      	bpl.n	80007c8 <pump_control_task+0x4c>
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <pump_control_task+0x68>)
 80007c2:	f002 fdd3 	bl	800336c <HAL_GPIO_WritePin>
 80007c6:	e004      	b.n	80007d2 <pump_control_task+0x56>
               // printf("Pompa oprită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
            else
            {

                HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <pump_control_task+0x68>)
 80007ce:	f002 fdcd 	bl	800336c <HAL_GPIO_WritePin>
               // printf("Pompa pornită (Umiditate: %.2f%%)\n", sensor_data.humidity);
            }
        }
        PrintTaskTiming("PumpControl_end");
 80007d2:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <pump_control_task+0x78>)
 80007d4:	f000 fa1c 	bl	8000c10 <PrintTaskTiming>
        vTaskDelay(pdMS_TO_TICKS(1000));
 80007d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007dc:	f009 f81e 	bl	800981c <vTaskDelay>
    	PrintTaskTiming("PumpControl_start");
 80007e0:	e7d5      	b.n	800078e <pump_control_task+0x12>
 80007e2:	bf00      	nop
 80007e4:	40020800 	.word	0x40020800
 80007e8:	0801bca4 	.word	0x0801bca4
 80007ec:	200006e0 	.word	0x200006e0
 80007f0:	42480000 	.word	0x42480000
 80007f4:	0801bcb8 	.word	0x0801bcb8

080007f8 <init_pump_task>:
    }
}

void init_pump_task(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
    osThreadAttr_t pumpTask_attributes = {
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2224      	movs	r2, #36	@ 0x24
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f019 fa33 	bl	8019c70 <memset>
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <init_pump_task+0x34>)
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	2318      	movs	r3, #24
 8000816:	61fb      	str	r3, [r7, #28]
        .name = "pumpTask",
        .stack_size = 512 * 4,
        .priority = (osPriority_t) osPriorityNormal,
    };

    osThreadNew(pump_control_task, NULL, &pumpTask_attributes);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	461a      	mov	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <init_pump_task+0x38>)
 8000820:	f006 fd8a 	bl	8007338 <osThreadNew>
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0801bcc8 	.word	0x0801bcc8
 8000830:	0800077d 	.word	0x0800077d

08000834 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;

#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af02      	add	r7, sp, #8
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f023 030f 	bic.w	r3, r3, #15
 8000844:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f043 030c 	orr.w	r3, r3, #12
 8000852:	b2db      	uxtb	r3, r3
 8000854:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	f043 030c 	orr.w	r3, r3, #12
 8000866:	b2db      	uxtb	r3, r3
 8000868:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;
 800086a:	7bbb      	ldrb	r3, [r7, #14]
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	b2db      	uxtb	r3, r3
 8000872:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000874:	f107 0208 	add.w	r2, r7, #8
 8000878:	2364      	movs	r3, #100	@ 0x64
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2304      	movs	r3, #4
 800087e:	214e      	movs	r1, #78	@ 0x4e
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <lcd_send_cmd+0x5c>)
 8000882:	f002 fe1d 	bl	80034c0 <HAL_I2C_Master_Transmit>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000028c 	.word	0x2000028c

08000894 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af02      	add	r7, sp, #8
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f023 030f 	bic.w	r3, r3, #15
 80008a4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	f043 030d 	orr.w	r3, r3, #13
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	f043 0309 	orr.w	r3, r3, #9
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;
 80008c0:	7bbb      	ldrb	r3, [r7, #14]
 80008c2:	f043 030d 	orr.w	r3, r3, #13
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	f043 0309 	orr.w	r3, r3, #9
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	2364      	movs	r3, #100	@ 0x64
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2304      	movs	r3, #4
 80008de:	214e      	movs	r1, #78	@ 0x4e
 80008e0:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <lcd_send_data+0x5c>)
 80008e2:	f002 fded 	bl	80034c0 <HAL_I2C_Master_Transmit>
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000028c 	.word	0x2000028c

080008f4 <lcd_clear>:

void lcd_clear (void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80008fa:	2080      	movs	r0, #128	@ 0x80
 80008fc:	f7ff ff9a 	bl	8000834 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	e005      	b.n	8000912 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000906:	2020      	movs	r0, #32
 8000908:	f7ff ffc4 	bl	8000894 <lcd_send_data>
	for (int i=0; i<70; i++)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3301      	adds	r3, #1
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b45      	cmp	r3, #69	@ 0x45
 8000916:	ddf6      	ble.n	8000906 <lcd_clear+0x12>
	}
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	6039      	str	r1, [r7, #0]
    switch (row)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d003      	beq.n	800093a <lcd_put_cur+0x18>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d005      	beq.n	8000944 <lcd_put_cur+0x22>
 8000938:	e009      	b.n	800094e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000940:	603b      	str	r3, [r7, #0]
            break;
 8000942:	e004      	b.n	800094e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800094a:	603b      	str	r3, [r7, #0]
            break;
 800094c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff6e 	bl	8000834 <lcd_send_cmd>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <lcd_init>:


void lcd_init (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

	vTaskDelay(pdMS_TO_TICKS(40));
 8000964:	2028      	movs	r0, #40	@ 0x28
 8000966:	f008 ff59 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x30);
 800096a:	2030      	movs	r0, #48	@ 0x30
 800096c:	f7ff ff62 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(5));
 8000970:	2005      	movs	r0, #5
 8000972:	f008 ff53 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x30);
 8000976:	2030      	movs	r0, #48	@ 0x30
 8000978:	f7ff ff5c 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 800097c:	2001      	movs	r0, #1
 800097e:	f008 ff4d 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x30);
 8000982:	2030      	movs	r0, #48	@ 0x30
 8000984:	f7ff ff56 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000988:	200a      	movs	r0, #10
 800098a:	f008 ff47 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x20);
 800098e:	2020      	movs	r0, #32
 8000990:	f7ff ff50 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(10));
 8000994:	200a      	movs	r0, #10
 8000996:	f008 ff41 	bl	800981c <vTaskDelay>


	lcd_send_cmd (0x28);
 800099a:	2028      	movs	r0, #40	@ 0x28
 800099c:	f7ff ff4a 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80009a0:	2001      	movs	r0, #1
 80009a2:	f008 ff3b 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x08);
 80009a6:	2008      	movs	r0, #8
 80009a8:	f7ff ff44 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80009ac:	2001      	movs	r0, #1
 80009ae:	f008 ff35 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x01);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff ff3e 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1)); vTaskDelay(pdMS_TO_TICKS(1));
 80009b8:	2001      	movs	r0, #1
 80009ba:	f008 ff2f 	bl	800981c <vTaskDelay>
 80009be:	2001      	movs	r0, #1
 80009c0:	f008 ff2c 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x06);
 80009c4:	2006      	movs	r0, #6
 80009c6:	f7ff ff35 	bl	8000834 <lcd_send_cmd>
	vTaskDelay(pdMS_TO_TICKS(1));
 80009ca:	2001      	movs	r0, #1
 80009cc:	f008 ff26 	bl	800981c <vTaskDelay>
	lcd_send_cmd (0x0C);
 80009d0:	200c      	movs	r0, #12
 80009d2:	f7ff ff2f 	bl	8000834 <lcd_send_cmd>
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <lcd_send_string>:

void lcd_send_string (char *str)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80009e2:	e006      	b.n	80009f2 <lcd_send_string+0x18>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff51 	bl	8000894 <lcd_send_data>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f4      	bne.n	80009e4 <lcd_send_string+0xa>
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <init_lcd_control_task>:
void init_lcd_control_task(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	@ 0x28
 8000a08:	af00      	add	r7, sp, #0



    osThreadAttr_t lcdTask_attributes = {
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2224      	movs	r2, #36	@ 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f019 f92d 	bl	8019c70 <memset>
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <init_lcd_control_task+0x34>)
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	2318      	movs	r3, #24
 8000a22:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = (osPriority_t)osPriorityNormal,
    };


    osThreadNew(lcd_control_task, NULL, &lcdTask_attributes);
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	461a      	mov	r2, r3
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4804      	ldr	r0, [pc, #16]	@ (8000a3c <init_lcd_control_task+0x38>)
 8000a2c:	f006 fc84 	bl	8007338 <osThreadNew>
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	@ 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	0801bcd4 	.word	0x0801bcd4
 8000a3c:	08000a41 	.word	0x08000a41

08000a40 <lcd_control_task>:
void lcd_control_task(void *argument)
{	lcd_init();
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	@ 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	f7ff ff8a 	bl	8000960 <lcd_init>

char adc_str[16];
char humidity_str[16];
	while(1)
	{
		PrintTaskTiming("LCD_start");
 8000a4c:	481d      	ldr	r0, [pc, #116]	@ (8000ac4 <lcd_control_task+0x84>)
 8000a4e:	f000 f8df 	bl	8000c10 <PrintTaskTiming>
	    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8000a52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac8 <lcd_control_task+0x88>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f008 f9a5 	bl	8008dac <xQueuePeek>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d125      	bne.n	8000ab4 <lcd_control_task+0x74>
	    {


		    sprintf(adc_str, "ADC: %d", sensor_data.adc_value);
 8000a68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	4917      	ldr	r1, [pc, #92]	@ (8000acc <lcd_control_task+0x8c>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f018 ffdb 	bl	8019a2c <siprintf>
		    sprintf(humidity_str, "Hum: %.2f%%", sensor_data.humidity);
 8000a76:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a7e:	f107 0008 	add.w	r0, r7, #8
 8000a82:	ec53 2b17 	vmov	r2, r3, d7
 8000a86:	4912      	ldr	r1, [pc, #72]	@ (8000ad0 <lcd_control_task+0x90>)
 8000a88:	f018 ffd0 	bl	8019a2c <siprintf>

		    lcd_clear();
 8000a8c:	f7ff ff32 	bl	80008f4 <lcd_clear>

		    lcd_put_cur(0, 0);
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff ff45 	bl	8000922 <lcd_put_cur>
		    lcd_send_string(adc_str);
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff9c 	bl	80009da <lcd_send_string>
		    lcd_put_cur(1, 0);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff3c 	bl	8000922 <lcd_put_cur>
		    lcd_send_string(humidity_str);
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff93 	bl	80009da <lcd_send_string>
	    }
	    PrintTaskTiming("LCD_end");
 8000ab4:	4807      	ldr	r0, [pc, #28]	@ (8000ad4 <lcd_control_task+0x94>)
 8000ab6:	f000 f8ab 	bl	8000c10 <PrintTaskTiming>


	    vTaskDelay(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000abe:	f008 fead 	bl	800981c <vTaskDelay>
		PrintTaskTiming("LCD_start");
 8000ac2:	e7c3      	b.n	8000a4c <lcd_control_task+0xc>
 8000ac4:	0801bce4 	.word	0x0801bce4
 8000ac8:	200006e0 	.word	0x200006e0
 8000acc:	0801bcf0 	.word	0x0801bcf0
 8000ad0:	0801bcf8 	.word	0x0801bcf8
 8000ad4:	0801bd04 	.word	0x0801bd04

08000ad8 <init_led_control_task>:

static uint8_t led_states[3] = {0, 0, 0};


void init_led_control_task(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0

    ledQueue = xQueueCreate(5, sizeof(LedMessage));
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	2005      	movs	r0, #5
 8000ae4:	f007 fb83 	bl	80081ee <xQueueGenericCreate>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <init_led_control_task+0x54>)
 8000aec:	6013      	str	r3, [r2, #0]
    if (ledQueue == NULL) {
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <init_led_control_task+0x54>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d103      	bne.n	8000afe <init_led_control_task+0x26>
        printf("Failed to create LED queue\n");
 8000af6:	480e      	ldr	r0, [pc, #56]	@ (8000b30 <init_led_control_task+0x58>)
 8000af8:	f018 ff5c 	bl	80199b4 <puts>
 8000afc:	e012      	b.n	8000b24 <init_led_control_task+0x4c>
        return;
    }


    osThreadAttr_t ledTask_attributes = {
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2224      	movs	r2, #36	@ 0x24
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f019 f8b3 	bl	8019c70 <memset>
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b34 <init_led_control_task+0x5c>)
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	2318      	movs	r3, #24
 8000b16:	61fb      	str	r3, [r7, #28]
        .stack_size = 512 * 4,
        .priority = osPriorityNormal,
    };


    osThreadNew(led_control_task, NULL, &ledTask_attributes);
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4806      	ldr	r0, [pc, #24]	@ (8000b38 <init_led_control_task+0x60>)
 8000b20:	f006 fc0a 	bl	8007338 <osThreadNew>
}
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000200 	.word	0x20000200
 8000b30:	0801bd0c 	.word	0x0801bd0c
 8000b34:	0801bd28 	.word	0x0801bd28
 8000b38:	08000b3d 	.word	0x08000b3d

08000b3c <led_control_task>:


void led_control_task(void *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
    LedMessage message;


    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2101      	movs	r1, #1
 8000b48:	482b      	ldr	r0, [pc, #172]	@ (8000bf8 <led_control_task+0xbc>)
 8000b4a:	f002 fc0f 	bl	800336c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	4829      	ldr	r0, [pc, #164]	@ (8000bf8 <led_control_task+0xbc>)
 8000b54:	f002 fc0a 	bl	800336c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b5e:	4826      	ldr	r0, [pc, #152]	@ (8000bf8 <led_control_task+0xbc>)
 8000b60:	f002 fc04 	bl	800336c <HAL_GPIO_WritePin>

    while (1) {
    	PrintTaskTiming("LED_start");
 8000b64:	4825      	ldr	r0, [pc, #148]	@ (8000bfc <led_control_task+0xc0>)
 8000b66:	f000 f853 	bl	8000c10 <PrintTaskTiming>
        if (xQueueReceive(ledQueue, &message, portMAX_DELAY) == pdTRUE) {
 8000b6a:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <led_control_task+0xc4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f107 010c 	add.w	r1, r7, #12
 8000b72:	f04f 32ff 	mov.w	r2, #4294967295
 8000b76:	4618      	mov	r0, r3
 8000b78:	f007 ff18 	bl	80089ac <xQueueReceive>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d136      	bne.n	8000bf0 <led_control_task+0xb4>
            uint8_t led_index = (uint8_t)message.led;
 8000b82:	7b3b      	ldrb	r3, [r7, #12]
 8000b84:	73fb      	strb	r3, [r7, #15]

            if (led_index < 3) {
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d831      	bhi.n	8000bf0 <led_control_task+0xb4>

                led_states[led_index] ^= 1;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <led_control_task+0xc8>)
 8000b90:	5cd2      	ldrb	r2, [r2, r3]
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	f082 0201 	eor.w	r2, r2, #1
 8000b98:	b2d1      	uxtb	r1, r2
 8000b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8000c04 <led_control_task+0xc8>)
 8000b9c:	54d1      	strb	r1, [r2, r3]
                GPIO_PinState pin_state = (led_states[led_index]) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <led_control_task+0xc8>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	bf14      	ite	ne
 8000ba8:	2301      	movne	r3, #1
 8000baa:	2300      	moveq	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	73bb      	strb	r3, [r7, #14]

                switch (message.led) {
 8000bb0:	7b3b      	ldrb	r3, [r7, #12]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d014      	beq.n	8000be0 <led_control_task+0xa4>
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	dc1a      	bgt.n	8000bf0 <led_control_task+0xb4>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <led_control_task+0x88>
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d007      	beq.n	8000bd2 <led_control_task+0x96>
 8000bc2:	e015      	b.n	8000bf0 <led_control_task+0xb4>
                    case LED1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, pin_state); break;
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	2101      	movs	r1, #1
 8000bca:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <led_control_task+0xbc>)
 8000bcc:	f002 fbce 	bl	800336c <HAL_GPIO_WritePin>
 8000bd0:	e00e      	b.n	8000bf0 <led_control_task+0xb4>
                    case LED2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, pin_state); break;
 8000bd2:	7bbb      	ldrb	r3, [r7, #14]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2180      	movs	r1, #128	@ 0x80
 8000bd8:	4807      	ldr	r0, [pc, #28]	@ (8000bf8 <led_control_task+0xbc>)
 8000bda:	f002 fbc7 	bl	800336c <HAL_GPIO_WritePin>
 8000bde:	e007      	b.n	8000bf0 <led_control_task+0xb4>
                    case LED3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, pin_state); break;
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	461a      	mov	r2, r3
 8000be4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <led_control_task+0xbc>)
 8000bea:	f002 fbbf 	bl	800336c <HAL_GPIO_WritePin>
 8000bee:	bf00      	nop
                }


            }
        }
        PrintTaskTiming("LED_end");
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <led_control_task+0xcc>)
 8000bf2:	f000 f80d 	bl	8000c10 <PrintTaskTiming>
    	PrintTaskTiming("LED_start");
 8000bf6:	e7b5      	b.n	8000b64 <led_control_task+0x28>
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	0801bd38 	.word	0x0801bd38
 8000c00:	20000200 	.word	0x20000200
 8000c04:	20000204 	.word	0x20000204
 8000c08:	0801bd44 	.word	0x0801bd44
 8000c0c:	00000000 	.word	0x00000000

08000c10 <PrintTaskTiming>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_I2C2_Init(void);
void StartDefaultTask(void *argument);
osMutexId_t uartMutex;

void PrintTaskTiming(const char *task_name) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	6078      	str	r0, [r7, #4]
    TickType_t tick_now = xTaskGetTickCount();
 8000c18:	f008 ffbc 	bl	8009b94 <xTaskGetTickCount>
 8000c1c:	60f8      	str	r0, [r7, #12]
    printf("Task %s: Tick=%lu, Time=%lu ms, Time=%.2f s\r\n",
           task_name,
           tick_now,
           tick_now * portTICK_PERIOD_MS,
           (float)(tick_now * portTICK_PERIOD_MS) / 1000.0);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	ee07 3a90 	vmov	s15, r3
 8000c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c28:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    printf("Task %s: Tick=%lu, Time=%lu ms, Time=%.2f s\r\n",
 8000c2c:	ed9f 5b08 	vldr	d5, [pc, #32]	@ 8000c50 <PrintTaskTiming+0x40>
 8000c30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c34:	ed8d 7b00 	vstr	d7, [sp]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <PrintTaskTiming+0x48>)
 8000c40:	f018 fe50 	bl	80198e4 <iprintf>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	f3af 8000 	nop.w
 8000c50:	00000000 	.word	0x00000000
 8000c54:	408f4000 	.word	0x408f4000
 8000c58:	0801bd4c 	.word	0x0801bd4c

08000c5c <InitUartMutex>:
void InitUartMutex(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    uartMutex = osMutexNew(NULL);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f006 fc3d 	bl	80074e0 <osMutexNew>
 8000c66:	4603      	mov	r3, r0
 8000c68:	4a01      	ldr	r2, [pc, #4]	@ (8000c70 <InitUartMutex+0x14>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200006dc 	.word	0x200006dc

08000c74 <QueueInit>:

QueueHandle_t sensorQueue;

void QueueInit(void){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	sensorQueue = xQueueCreate(1,sizeof(HumiditySensorData));
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f007 fab6 	bl	80081ee <xQueueGenericCreate>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <QueueInit+0x2c>)
 8000c86:	6013      	str	r3, [r2, #0]

	if(sensorQueue == NULL){
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <QueueInit+0x2c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d104      	bne.n	8000c9a <QueueInit+0x26>
		printf("stiva pentru senzor umiditate nu a putut fi intializata");
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <QueueInit+0x30>)
 8000c92:	f018 fe27 	bl	80198e4 <iprintf>
		while(1){};
 8000c96:	bf00      	nop
 8000c98:	e7fd      	b.n	8000c96 <QueueInit+0x22>
	}

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200006e0 	.word	0x200006e0
 8000ca4:	0801bd7c 	.word	0x0801bd7c

08000ca8 <_write>:
int _write(int file, char *ptr, int len)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
	 osMutexAcquire(uartMutex, osWaitForever);
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <_write+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f006 fca9 	bl	8007614 <osMutexAcquire>
	    HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <_write+0x44>)
 8000cce:	f004 fd85 	bl	80057dc <HAL_UART_Transmit>
	    osMutexRelease(uartMutex);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <_write+0x40>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f006 fcfa 	bl	80076d0 <osMutexRelease>
	    return len;
 8000cdc:	687b      	ldr	r3, [r7, #4]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200006dc 	.word	0x200006dc
 8000cec:	20000208 	.word	0x20000208

08000cf0 <main>:

int row=0;
int col=0;

int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  HAL_Init();
 8000cf4:	f000 feef 	bl	8001ad6 <HAL_Init>
  QueueInit();
 8000cf8:	f7ff ffbc 	bl	8000c74 <QueueInit>
  SystemClock_Config();
 8000cfc:	f000 f820 	bl	8000d40 <SystemClock_Config>

  MX_GPIO_Init();
 8000d00:	f000 f92c 	bl	8000f5c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000d04:	f000 f8bc 	bl	8000e80 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000d08:	f000 f88a 	bl	8000e20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d0c:	f000 f8f8 	bl	8000f00 <MX_USB_OTG_FS_PCD_Init>
  humiditySensorAdcInit();
 8000d10:	f7ff fc66 	bl	80005e0 <humiditySensorAdcInit>
  InitUartMutex();
 8000d14:	f7ff ffa2 	bl	8000c5c <InitUartMutex>

  osKernelInitialize();
 8000d18:	f006 fa7c 	bl	8007214 <osKernelInitialize>


  init_pump_task();
 8000d1c:	f7ff fd6c 	bl	80007f8 <init_pump_task>
  init_humidity_task();
 8000d20:	f7ff fd0e 	bl	8000740 <init_humidity_task>
  init_led_control_task();
 8000d24:	f7ff fed8 	bl	8000ad8 <init_led_control_task>
  init_lcd_control_task();
 8000d28:	f7ff fe6c 	bl	8000a04 <init_lcd_control_task>
  MX_LWIP_Init();
 8000d2c:	f005 fcec 	bl	8006708 <MX_LWIP_Init>
  tcpserver_init();
 8000d30:	f000 fe94 	bl	8001a5c <tcpserver_init>

  print_system_info();
 8000d34:	f000 fbce 	bl	80014d4 <print_system_info>

  osKernelStart();
 8000d38:	f006 faa0 	bl	800727c <osKernelStart>


  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <main+0x4c>

08000d40 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	@ 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2234      	movs	r2, #52	@ 0x34
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f018 ff8e 	bl	8019c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]


  HAL_PWR_EnableBkUpAccess();
 8000d64:	f003 f87e 	bl	8003e64 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <SystemClock_Config+0xd8>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8000e18 <SystemClock_Config+0xd8>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d74:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <SystemClock_Config+0xd8>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <SystemClock_Config+0xdc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <SystemClock_Config+0xdc>)
 8000d86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b23      	ldr	r3, [pc, #140]	@ (8000e1c <SystemClock_Config+0xdc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d9c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000da0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dac:	2304      	movs	r3, #4
 8000dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000db0:	23d8      	movs	r3, #216	@ 0xd8
 8000db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000db8:	2309      	movs	r3, #9
 8000dba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f003 f8ad 	bl	8003f24 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dd0:	f000 f992 	bl	80010f8 <Error_Handler>
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dd4:	f003 f856 	bl	8003e84 <HAL_PWREx_EnableOverDrive>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000dde:	f000 f98b 	bl	80010f8 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	230f      	movs	r3, #15
 8000de4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2302      	movs	r3, #2
 8000de8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2107      	movs	r1, #7
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fb3d 	bl	8004480 <HAL_RCC_ClockConfig>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e0c:	f000 f974 	bl	80010f8 <Error_Handler>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3750      	adds	r7, #80	@ 0x50
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <MX_USART3_UART_Init>:


static void MX_USART3_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e26:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <MX_USART3_UART_Init+0x5c>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2a:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_USART3_UART_Init+0x58>)
 8000e64:	f004 fc6c 	bl	8005740 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e6e:	f000 f943 	bl	80010f8 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000208 	.word	0x20000208
 8000e7c:	40004800 	.word	0x40004800

08000e80 <MX_I2C2_Init>:
static void MX_I2C2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000e86:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef8 <MX_I2C2_Init+0x78>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_I2C2_Init+0x7c>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e90:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e96:	4b17      	ldr	r3, [pc, #92]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eba:	480e      	ldr	r0, [pc, #56]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000ebc:	f002 fa70 	bl	80033a0 <HAL_I2C_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ec6:	f000 f917 	bl	80010f8 <Error_Handler>
  }

  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000ece:	f002 fde9 	bl	8003aa4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f90e 	bl	80010f8 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_I2C2_Init+0x74>)
 8000ee0:	f002 fe2b 	bl	8003b3a <HAL_I2CEx_ConfigDigitalFilter>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f000 f905 	bl	80010f8 <Error_Handler>
  }
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	2000028c 	.word	0x2000028c
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	20404768 	.word	0x20404768

08000f00 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2206      	movs	r2, #6
 8000f10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f30:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f36:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f42:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f44:	f002 fe45 	bl	8003bd2 <HAL_PCD_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f8d3 	bl	80010f8 <Error_Handler>
  }

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200002d8 	.word	0x200002d8

08000f5c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b54      	ldr	r3, [pc, #336]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a53      	ldr	r2, [pc, #332]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b51      	ldr	r3, [pc, #324]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b4b      	ldr	r3, [pc, #300]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a47      	ldr	r2, [pc, #284]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b42      	ldr	r3, [pc, #264]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a41      	ldr	r2, [pc, #260]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a35      	ldr	r2, [pc, #212]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b33      	ldr	r3, [pc, #204]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001002:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a2f      	ldr	r2, [pc, #188]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8001008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <MX_GPIO_Init+0x168>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001020:	4829      	ldr	r0, [pc, #164]	@ (80010c8 <MX_GPIO_Init+0x16c>)
 8001022:	f002 f9a3 	bl	800336c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	@ 0x40
 800102a:	4828      	ldr	r0, [pc, #160]	@ (80010cc <MX_GPIO_Init+0x170>)
 800102c:	f002 f99e 	bl	800336c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001036:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4822      	ldr	r0, [pc, #136]	@ (80010d0 <MX_GPIO_Init+0x174>)
 8001048:	f001 ffe4 	bl	8003014 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800104c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <MX_GPIO_Init+0x16c>)
 8001066:	f001 ffd5 	bl	8003014 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4812      	ldr	r0, [pc, #72]	@ (80010cc <MX_GPIO_Init+0x170>)
 8001082:	f001 ffc7 	bl	8003014 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	@ (80010cc <MX_GPIO_Init+0x170>)
 800109a:	f001 ffbb 	bl	8003014 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <MX_GPIO_Init+0x174>)
 80010b6:	f001 ffad 	bl	8003014 <HAL_GPIO_Init>

}
 80010ba:	bf00      	nop
 80010bc:	3730      	adds	r7, #48	@ 0x30
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40020800 	.word	0x40020800

080010d4 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  if (htim->Instance == TIM1) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e6:	f000 fd03 	bl	8001af0 <HAL_IncTick>
  }

}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40010000 	.word	0x40010000

080010f8 <Error_Handler>:


void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <Error_Handler+0x8>

08001104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_MspInit+0x4c>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a10      	ldr	r2, [pc, #64]	@ (8001150 <HAL_MspInit+0x4c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_MspInit+0x4c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_MspInit+0x4c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112c:	6453      	str	r3, [r2, #68]	@ 0x44
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	210f      	movs	r1, #15
 800113e:	f06f 0001 	mvn.w	r0, #1
 8001142:	f000 fdd1 	bl	8001ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0ae      	sub	sp, #184	@ 0xb8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2290      	movs	r2, #144	@ 0x90
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f018 fd7b 	bl	8019c70 <memset>
  if(huart->Instance==USART3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <HAL_UART_MspInit+0xb4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d13c      	bne.n	80011fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001188:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800118a:	2300      	movs	r3, #0
 800118c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fbcc 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800119e:	f7ff ffab 	bl	80010f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a13      	ldr	r2, [pc, #76]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011c0:	f043 0308 	orr.w	r3, r3, #8
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_UART_MspInit+0xb8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011ec:	2307      	movs	r3, #7
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011f2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_UART_MspInit+0xbc>)
 80011fa:	f001 ff0b 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	37b8      	adds	r7, #184	@ 0xb8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004800 	.word	0x40004800
 800120c:	40023800 	.word	0x40023800
 8001210:	40020c00 	.word	0x40020c00

08001214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ae      	sub	sp, #184	@ 0xb8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2290      	movs	r2, #144	@ 0x90
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f018 fd1b 	bl	8019c70 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	d159      	bne.n	80012f8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001244:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001248:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fb6b 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001260:	f7ff ff4a 	bl	80010f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b26      	ldr	r3, [pc, #152]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001270:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800127c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001296:	230a      	movs	r3, #10
 8001298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4818      	ldr	r0, [pc, #96]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012a4:	f001 feb6 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4810      	ldr	r0, [pc, #64]	@ (8001304 <HAL_PCD_MspInit+0xf0>)
 80012c4:	f001 fea6 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	4a06      	ldr	r2, [pc, #24]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <HAL_PCD_MspInit+0xec>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	37b8      	adds	r7, #184	@ 0xb8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ae      	sub	sp, #184	@ 0xb8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2290      	movs	r2, #144	@ 0x90
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f018 fca1 	bl	8019c70 <memset>
  if(hi2c->Instance==I2C2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <HAL_I2C_MspInit+0xb0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d13b      	bne.n	80013b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800133c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800133e:	2300      	movs	r3, #0
 8001340:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4618      	mov	r0, r3
 8001348:	f003 faf2 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff fed1 	bl	80010f8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 800135c:	f043 0320 	orr.w	r3, r3, #32
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136e:	2303      	movs	r3, #3
 8001370:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001386:	2304      	movs	r3, #4
 8001388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800138c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001390:	4619      	mov	r1, r3
 8001392:	480b      	ldr	r0, [pc, #44]	@ (80013c0 <HAL_I2C_MspInit+0xb8>)
 8001394:	f001 fe3e 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 800139e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <HAL_I2C_MspInit+0xb4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80013b0:	bf00      	nop
 80013b2:	37b8      	adds	r7, #184	@ 0xb8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40005800 	.word	0x40005800
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40021400 	.word	0x40021400

080013c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	2019      	movs	r0, #25
 80013da:	f000 fc85 	bl	8001ce8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013de:	2019      	movs	r0, #25
 80013e0:	f000 fc9e 	bl	8001d20 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_InitTick+0xa0>)
 80013e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_InitTick+0xa0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_InitTick+0xa0>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fc:	f107 0210 	add.w	r2, r7, #16
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fa60 	bl	80048cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800140c:	f003 fa4a 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8001410:	4603      	mov	r3, r0
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001418:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_InitTick+0xa4>)
 800141a:	fba2 2303 	umull	r2, r3, r2, r3
 800141e:	0c9b      	lsrs	r3, r3, #18
 8001420:	3b01      	subs	r3, #1
 8001422:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001424:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_InitTick+0xa8>)
 8001426:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <HAL_InitTick+0xac>)
 8001428:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800142a:	4b10      	ldr	r3, [pc, #64]	@ (800146c <HAL_InitTick+0xa8>)
 800142c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001432:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <HAL_InitTick+0xa8>)
 8001434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001436:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_InitTick+0xa8>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <HAL_InitTick+0xa8>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_InitTick+0xa8>)
 8001446:	f003 fe9b 	bl	8005180 <HAL_TIM_Base_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001450:	4806      	ldr	r0, [pc, #24]	@ (800146c <HAL_InitTick+0xa8>)
 8001452:	f003 fef7 	bl	8005244 <HAL_TIM_Base_Start_IT>
 8001456:	4603      	mov	r3, r0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3730      	adds	r7, #48	@ 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	431bde83 	.word	0x431bde83
 800146c:	200006e4 	.word	0x200006e4
 8001470:	40010000 	.word	0x40010000

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <MemManage_Handler+0x4>

0800148c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <UsageFault_Handler+0x4>

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b0:	4802      	ldr	r0, [pc, #8]	@ (80014bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014b2:	f003 ff3f 	bl	8005334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200006e4 	.word	0x200006e4

080014c0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <ETH_IRQHandler+0x10>)
 80014c6:	f001 f817 	bl	80024f8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20003e64 	.word	0x20003e64

080014d4 <print_system_info>:
#include "sys_info.h"

void print_system_info(void) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 80014da:	af00      	add	r7, sp, #0

    uint32_t totalRunTime;
    uint32_t numTasks;
    TaskStatus_t taskStatusArray[10];

    printf("\n=== Sistem FreeRTOS ===\n\r");
 80014dc:	483e      	ldr	r0, [pc, #248]	@ (80015d8 <print_system_info+0x104>)
 80014de:	f018 fa01 	bl	80198e4 <iprintf>


    printf("Heap disponibil: %u bytes\n\r", xPortGetFreeHeapSize());
 80014e2:	f00a f99f 	bl	800b824 <xPortGetFreeHeapSize>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	483c      	ldr	r0, [pc, #240]	@ (80015dc <print_system_info+0x108>)
 80014ec:	f018 f9fa 	bl	80198e4 <iprintf>
    printf("Heap minim disponibil: %u bytes\n\r", xPortGetMinimumEverFreeHeapSize());
 80014f0:	f00a f9a4 	bl	800b83c <xPortGetMinimumEverFreeHeapSize>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4839      	ldr	r0, [pc, #228]	@ (80015e0 <print_system_info+0x10c>)
 80014fa:	f018 f9f3 	bl	80198e4 <iprintf>


    printf("\n=== Lista Taskuri ===\n\r");
 80014fe:	4839      	ldr	r0, [pc, #228]	@ (80015e4 <print_system_info+0x110>)
 8001500:	f018 f9f0 	bl	80198e4 <iprintf>
    vTaskList(taskListBuffer);
 8001504:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001508:	4618      	mov	r0, r3
 800150a:	f009 f9b9 	bl	800a880 <vTaskList>
    printf("Nume Task   Stare   Prioritate   Stack Rămas   Nr. Task\n\r");
 800150e:	4836      	ldr	r0, [pc, #216]	@ (80015e8 <print_system_info+0x114>)
 8001510:	f018 f9e8 	bl	80198e4 <iprintf>
    printf("%s\n", taskListBuffer);
 8001514:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001518:	4618      	mov	r0, r3
 800151a:	f018 fa4b 	bl	80199b4 <puts>


    printf("\n=== Detalii Taskuri ===\n");
 800151e:	4833      	ldr	r0, [pc, #204]	@ (80015ec <print_system_info+0x118>)
 8001520:	f018 fa48 	bl	80199b4 <puts>
    numTasks = uxTaskGetSystemState(taskStatusArray, 10, &totalRunTime);
 8001524:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	210a      	movs	r1, #10
 800152c:	4618      	mov	r0, r3
 800152e:	f008 fb53 	bl	8009bd8 <uxTaskGetSystemState>
 8001532:	f8c7 0370 	str.w	r0, [r7, #880]	@ 0x370
    for (uint32_t i = 0; i < numTasks; i++) {
 8001536:	2300      	movs	r3, #0
 8001538:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800153c:	e030      	b.n	80015a0 <print_system_info+0xcc>
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 800153e:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001542:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 8001546:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3304      	adds	r3, #4
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 800155c:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 8001560:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3310      	adds	r3, #16
 8001570:	681c      	ldr	r4, [r3, #0]
               taskStatusArray[i].pcTaskName,
               taskStatusArray[i].uxCurrentPriority,
               taskStatusArray[i].usStackHighWaterMark);
 8001572:	f507 735e 	add.w	r3, r7, #888	@ 0x378
 8001576:	f5a3 715d 	sub.w	r1, r3, #884	@ 0x374
 800157a:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 800157e:	4613      	mov	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3320      	adds	r3, #32
 800158a:	881b      	ldrh	r3, [r3, #0]
        printf("Task: %s, Prioritate: %u, Stack liber: %u bytes\n\r",
 800158c:	4622      	mov	r2, r4
 800158e:	4601      	mov	r1, r0
 8001590:	4817      	ldr	r0, [pc, #92]	@ (80015f0 <print_system_info+0x11c>)
 8001592:	f018 f9a7 	bl	80198e4 <iprintf>
    for (uint32_t i = 0; i < numTasks; i++) {
 8001596:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800159a:	3301      	adds	r3, #1
 800159c:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80015a0:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80015a4:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3c8      	bcc.n	800153e <print_system_info+0x6a>
    }


    printf("\n=== Alte informații ===\n\r");
 80015ac:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <print_system_info+0x120>)
 80015ae:	f018 f999 	bl	80198e4 <iprintf>
    printf("Tick-uri de sistem: %lu\n\r", xTaskGetTickCount());
 80015b2:	f008 faef 	bl	8009b94 <xTaskGetTickCount>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4619      	mov	r1, r3
 80015ba:	480f      	ldr	r0, [pc, #60]	@ (80015f8 <print_system_info+0x124>)
 80015bc:	f018 f992 	bl	80198e4 <iprintf>
    printf("Stare scheduler: %u\n\r", xTaskGetSchedulerState());
 80015c0:	f008 ffb6 	bl	800a530 <xTaskGetSchedulerState>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <print_system_info+0x128>)
 80015ca:	f018 f98b 	bl	80198e4 <iprintf>
}
 80015ce:	bf00      	nop
 80015d0:	f507 775f 	add.w	r7, r7, #892	@ 0x37c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	0801bdb4 	.word	0x0801bdb4
 80015dc:	0801bdd0 	.word	0x0801bdd0
 80015e0:	0801bdec 	.word	0x0801bdec
 80015e4:	0801be10 	.word	0x0801be10
 80015e8:	0801be2c 	.word	0x0801be2c
 80015ec:	0801be68 	.word	0x0801be68
 80015f0:	0801be84 	.word	0x0801be84
 80015f4:	0801beb8 	.word	0x0801beb8
 80015f8:	0801bed4 	.word	0x0801bed4
 80015fc:	0801bef0 	.word	0x0801bef0

08001600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_kill>:

int _kill(int pid, int sig)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <_kill+0x20>)
 800161c:	2216      	movs	r2, #22
 800161e:	601a      	str	r2, [r3, #0]
	return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20011e74 	.word	0x20011e74

08001634 <_exit>:

void _exit (int status)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe5 	bl	8001610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001646:	bf00      	nop
 8001648:	e7fd      	b.n	8001646 <_exit+0x12>

0800164a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00a      	b.n	8001672 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165c:	f3af 8000 	nop.w
 8001660:	4601      	mov	r1, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	60ba      	str	r2, [r7, #8]
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	3301      	adds	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	dbf0      	blt.n	800165c <_read+0x12>
	}

return len;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016ac:	605a      	str	r2, [r3, #4]
	return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_isatty>:

int _isatty(int file)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	return 1;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	@ (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d205      	bcs.n	8001728 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <_sbrk+0x6c>)
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	e009      	b.n	800173c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a06      	ldr	r2, [pc, #24]	@ (8001750 <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	371c      	adds	r7, #28
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	20080000 	.word	0x20080000
 800174c:	00000400 	.word	0x00000400
 8001750:	20000730 	.word	0x20000730
 8001754:	20011fc8 	.word	0x20011fc8
 8001758:	20011e74 	.word	0x20011e74

0800175c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <SystemInit+0x20>)
 8001762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001766:	4a05      	ldr	r2, [pc, #20]	@ (800177c <SystemInit+0x20>)
 8001768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800176c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <get_humidity_value>:
static struct netbuf *buf;
char msg[512];
char smsg[1024];

 float get_humidity_value(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
    HumiditySensorData sensor_data;

    if (xQueuePeek(sensorQueue, &sensor_data, 0) == pdTRUE)
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <get_humidity_value+0x30>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4639      	mov	r1, r7
 800178c:	2200      	movs	r2, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f007 fb0c 	bl	8008dac <xQueuePeek>
 8001794:	4603      	mov	r3, r0
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <get_humidity_value+0x1e>
    {
        return sensor_data.humidity;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	e000      	b.n	80017a0 <get_humidity_value+0x20>
    }
    return -1.0f;
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <get_humidity_value+0x34>)
}
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200006e0 	.word	0x200006e0
 80017b4:	bf800000 	.word	0xbf800000

080017b8 <process_http_request>:

static void process_http_request(const char *request, char *response)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b0a2      	sub	sp, #136	@ 0x88
 80017bc:	af02      	add	r7, sp, #8
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    if (strstr(request, "GET / HTTP/1.1") != NULL)
 80017c2:	494e      	ldr	r1, [pc, #312]	@ (80018fc <process_http_request+0x144>)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f018 fa7d 	bl	8019cc4 <strstr>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01d      	beq.n	800180c <process_http_request+0x54>
    {
        float humidity = get_humidity_value();
 80017d0:	f7ff ffd6 	bl	8001780 <get_humidity_value>
 80017d4:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74

        char humidity_str[100];
        snprintf(humidity_str, sizeof(humidity_str), "%.2f", humidity);
 80017d8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80017dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	ed8d 7b00 	vstr	d7, [sp]
 80017e8:	4a45      	ldr	r2, [pc, #276]	@ (8001900 <process_http_request+0x148>)
 80017ea:	2164      	movs	r1, #100	@ 0x64
 80017ec:	4618      	mov	r0, r3
 80017ee:	f018 f8e9 	bl	80199c4 <sniprintf>

        const char *http_response =
 80017f2:	4b44      	ldr	r3, [pc, #272]	@ (8001904 <process_http_request+0x14c>)
 80017f4:	673b      	str	r3, [r7, #112]	@ 0x70
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: text/html\r\n"
            "Connection: close\r\n\r\n";
        strcpy(response, http_response);
 80017f6:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f018 faea 	bl	8019dd2 <strcpy>
        strcat(response, humidity_str);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4619      	mov	r1, r3
 8001804:	6838      	ldr	r0, [r7, #0]
 8001806:	f018 fa3b 	bl	8019c80 <strcat>
 800180a:	e073      	b.n	80018f4 <process_http_request+0x13c>
    }
    else if (strstr(request, "POST / HTTP/1.1") != NULL)
 800180c:	493e      	ldr	r1, [pc, #248]	@ (8001908 <process_http_request+0x150>)
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f018 fa58 	bl	8019cc4 <strstr>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d066      	beq.n	80018e8 <process_http_request+0x130>
    {

        const char *body = strstr(request, "\r\n\r\n");
 800181a:	493c      	ldr	r1, [pc, #240]	@ (800190c <process_http_request+0x154>)
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f018 fa51 	bl	8019cc4 <strstr>
 8001822:	67b8      	str	r0, [r7, #120]	@ 0x78
        if (body != NULL)
 8001824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001826:	2b00      	cmp	r3, #0
 8001828:	d057      	beq.n	80018da <process_http_request+0x122>
        {
            body += 4;
 800182a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800182c:	3304      	adds	r3, #4
 800182e:	67bb      	str	r3, [r7, #120]	@ 0x78

            LedMessage message;
            if (strstr(body, "led=1") != NULL)
 8001830:	4937      	ldr	r1, [pc, #220]	@ (8001910 <process_http_request+0x158>)
 8001832:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001834:	f018 fa46 	bl	8019cc4 <strstr>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <process_http_request+0x8e>
            {
                message.led = LED1;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001844:	e01c      	b.n	8001880 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=2") != NULL)
 8001846:	4933      	ldr	r1, [pc, #204]	@ (8001914 <process_http_request+0x15c>)
 8001848:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800184a:	f018 fa3b 	bl	8019cc4 <strstr>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <process_http_request+0xa4>
            {
                message.led = LED2;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 800185a:	e011      	b.n	8001880 <process_http_request+0xc8>
            }
            else if (strstr(body, "led=3") != NULL)
 800185c:	492e      	ldr	r1, [pc, #184]	@ (8001918 <process_http_request+0x160>)
 800185e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001860:	f018 fa30 	bl	8019cc4 <strstr>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <process_http_request+0xba>
            {
                message.led = LED3;
 800186a:	2302      	movs	r3, #2
 800186c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001870:	e006      	b.n	8001880 <process_http_request+0xc8>
            }
            else
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nInvalid LED ID");
 8001872:	4a2a      	ldr	r2, [pc, #168]	@ (800191c <process_http_request+0x164>)
 8001874:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f018 f8a3 	bl	80199c4 <sniprintf>
                return;
 800187e:	e039      	b.n	80018f4 <process_http_request+0x13c>
            }

            if (strstr(body, "toggle=1") != NULL)
 8001880:	4927      	ldr	r1, [pc, #156]	@ (8001920 <process_http_request+0x168>)
 8001882:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001884:	f018 fa1e 	bl	8019cc4 <strstr>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00e      	beq.n	80018ac <process_http_request+0xf4>
            {
                message.toggle = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
            {
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
                return;
            }

            if (xQueueSendToBack(ledQueue, &message, 0) != pdTRUE)
 8001894:	4b23      	ldr	r3, [pc, #140]	@ (8001924 <process_http_request+0x16c>)
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 800189c:	2300      	movs	r3, #0
 800189e:	2200      	movs	r2, #0
 80018a0:	f006 fe3e 	bl	8008520 <xQueueGenericSend>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d00e      	beq.n	80018c8 <process_http_request+0x110>
 80018aa:	e006      	b.n	80018ba <process_http_request+0x102>
                snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nMissing toggle value");
 80018ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001928 <process_http_request+0x170>)
 80018ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f018 f886 	bl	80199c4 <sniprintf>
                return;
 80018b8:	e01c      	b.n	80018f4 <process_http_request+0x13c>
            {
                snprintf(response, 256, "HTTP/1.1 500 Internal Server Error\r\n\r\nQueue full");
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <process_http_request+0x174>)
 80018bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018c0:	6838      	ldr	r0, [r7, #0]
 80018c2:	f018 f87f 	bl	80199c4 <sniprintf>
                return;
 80018c6:	e015      	b.n	80018f4 <process_http_request+0x13c>
            }

            snprintf(response, 256, "HTTP/1.1 200 OK\r\n\r\nLED %d toggled", message.led);
 80018c8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 80018cc:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <process_http_request+0x178>)
 80018ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018d2:	6838      	ldr	r0, [r7, #0]
 80018d4:	f018 f876 	bl	80199c4 <sniprintf>
 80018d8:	e00c      	b.n	80018f4 <process_http_request+0x13c>
        }
        else
        {
            snprintf(response, 256, "HTTP/1.1 400 Bad Request\r\n\r\nNo body found");
 80018da:	4a16      	ldr	r2, [pc, #88]	@ (8001934 <process_http_request+0x17c>)
 80018dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f018 f86f 	bl	80199c4 <sniprintf>
 80018e6:	e005      	b.n	80018f4 <process_http_request+0x13c>
        }
    }
    else
    {
        const char *http_response =
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <process_http_request+0x180>)
 80018ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
            "HTTP/1.1 404 Not Found\r\n"
            "Connection: close\r\n\r\n"
            "<html><body><h1>404 Not Found</h1></body></html>";
        strcpy(response, http_response);
 80018ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80018ee:	6838      	ldr	r0, [r7, #0]
 80018f0:	f018 fa6f 	bl	8019dd2 <strcpy>
    }
}
 80018f4:	3780      	adds	r7, #128	@ 0x80
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	0801bf08 	.word	0x0801bf08
 8001900:	0801bf18 	.word	0x0801bf18
 8001904:	0801bf20 	.word	0x0801bf20
 8001908:	0801bf60 	.word	0x0801bf60
 800190c:	0801bf70 	.word	0x0801bf70
 8001910:	0801bf78 	.word	0x0801bf78
 8001914:	0801bf80 	.word	0x0801bf80
 8001918:	0801bf88 	.word	0x0801bf88
 800191c:	0801bf90 	.word	0x0801bf90
 8001920:	0801bfbc 	.word	0x0801bfbc
 8001924:	20000200 	.word	0x20000200
 8001928:	0801bfc8 	.word	0x0801bfc8
 800192c:	0801bffc 	.word	0x0801bffc
 8001930:	0801c030 	.word	0x0801c030
 8001934:	0801c054 	.word	0x0801c054
 8001938:	0801c080 	.word	0x0801c080

0800193c <tcp_thread>:



static void tcp_thread(void *arg)
{
 800193c:	b590      	push	{r4, r7, lr}
 800193e:	b087      	sub	sp, #28
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]
    err_t err, accept_err;


    conn = netconn_new(NETCONN_TCP);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2010      	movs	r0, #16
 800194a:	f00a f85d 	bl	800ba08 <netconn_new_with_proto_and_callback>
 800194e:	4603      	mov	r3, r0
 8001950:	4a38      	ldr	r2, [pc, #224]	@ (8001a34 <tcp_thread+0xf8>)
 8001952:	6013      	str	r3, [r2, #0]

    if (conn != NULL)
 8001954:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <tcp_thread+0xf8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d067      	beq.n	8001a2c <tcp_thread+0xf0>
    {

        err = netconn_bind(conn, IP_ADDR_ANY, 80);
 800195c:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <tcp_thread+0xf8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2250      	movs	r2, #80	@ 0x50
 8001962:	4935      	ldr	r1, [pc, #212]	@ (8001a38 <tcp_thread+0xfc>)
 8001964:	4618      	mov	r0, r3
 8001966:	f00a f909 	bl	800bb7c <netconn_bind>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]

        if (err == ERR_OK)
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d152      	bne.n	8001a1c <tcp_thread+0xe0>
        {

            netconn_listen(conn);
 8001976:	4b2f      	ldr	r3, [pc, #188]	@ (8001a34 <tcp_thread+0xf8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	21ff      	movs	r1, #255	@ 0xff
 800197c:	4618      	mov	r0, r3
 800197e:	f00a f935 	bl	800bbec <netconn_listen_with_backlog>

            while (1)
            {
            	PrintTaskTiming("TCP_start");
 8001982:	482e      	ldr	r0, [pc, #184]	@ (8001a3c <tcp_thread+0x100>)
 8001984:	f7ff f944 	bl	8000c10 <PrintTaskTiming>
                accept_err = netconn_accept(conn, &newconn);
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <tcp_thread+0xf8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	492c      	ldr	r1, [pc, #176]	@ (8001a40 <tcp_thread+0x104>)
 800198e:	4618      	mov	r0, r3
 8001990:	f00a f958 	bl	800bc44 <netconn_accept>
 8001994:	4603      	mov	r3, r0
 8001996:	73bb      	strb	r3, [r7, #14]

                if (accept_err == ERR_OK)
 8001998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d136      	bne.n	8001a0e <tcp_thread+0xd2>
                {

                    while (netconn_recv(newconn, &buf) == ERR_OK)
 80019a0:	e02b      	b.n	80019fa <tcp_thread+0xbe>
                    {

                        strncpy(msg, buf->p->payload, buf->p->len);
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <tcp_thread+0x108>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <tcp_thread+0x108>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	895b      	ldrh	r3, [r3, #10]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4824      	ldr	r0, [pc, #144]	@ (8001a48 <tcp_thread+0x10c>)
 80019b6:	f018 f972 	bl	8019c9e <strncpy>


                        //printf("Received request: %s\n", msg);

                        process_http_request(msg, smsg);
 80019ba:	4924      	ldr	r1, [pc, #144]	@ (8001a4c <tcp_thread+0x110>)
 80019bc:	4822      	ldr	r0, [pc, #136]	@ (8001a48 <tcp_thread+0x10c>)
 80019be:	f7ff fefb 	bl	80017b8 <process_http_request>

                        netconn_write(newconn, smsg, strlen(smsg), NETCONN_COPY);
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <tcp_thread+0x104>)
 80019c4:	681c      	ldr	r4, [r3, #0]
 80019c6:	4821      	ldr	r0, [pc, #132]	@ (8001a4c <tcp_thread+0x110>)
 80019c8:	f7fe fc8a 	bl	80002e0 <strlen>
 80019cc:	4602      	mov	r2, r0
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	491d      	ldr	r1, [pc, #116]	@ (8001a4c <tcp_thread+0x110>)
 80019d6:	4620      	mov	r0, r4
 80019d8:	f00a fbb6 	bl	800c148 <netconn_write_partly>

                        netbuf_delete(buf);
 80019dc:	4b19      	ldr	r3, [pc, #100]	@ (8001a44 <tcp_thread+0x108>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c f8b1 	bl	800db48 <netbuf_delete>

                        netconn_close(newconn);
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <tcp_thread+0x104>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00a fcae 	bl	800c34c <netconn_close>
                        netconn_delete(newconn);
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <tcp_thread+0x104>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00a f8a5 	bl	800bb44 <netconn_delete>
                    while (netconn_recv(newconn, &buf) == ERR_OK)
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <tcp_thread+0x104>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4911      	ldr	r1, [pc, #68]	@ (8001a44 <tcp_thread+0x108>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00a fb27 	bl	800c054 <netconn_recv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ca      	beq.n	80019a2 <tcp_thread+0x66>
 8001a0c:	e002      	b.n	8001a14 <tcp_thread+0xd8>
                    }
                }
                else
                {
                    printf("Error accepting connection\n");
 8001a0e:	4810      	ldr	r0, [pc, #64]	@ (8001a50 <tcp_thread+0x114>)
 8001a10:	f017 ffd0 	bl	80199b4 <puts>
                }
                PrintTaskTiming("TCP_end");
 8001a14:	480f      	ldr	r0, [pc, #60]	@ (8001a54 <tcp_thread+0x118>)
 8001a16:	f7ff f8fb 	bl	8000c10 <PrintTaskTiming>
            	PrintTaskTiming("TCP_start");
 8001a1a:	e7b2      	b.n	8001982 <tcp_thread+0x46>
            }
        }
        else
        {
            printf("Error binding to port 80\n");
 8001a1c:	480e      	ldr	r0, [pc, #56]	@ (8001a58 <tcp_thread+0x11c>)
 8001a1e:	f017 ffc9 	bl	80199b4 <puts>
            netconn_delete(conn);
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <tcp_thread+0xf8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00a f88c 	bl	800bb44 <netconn_delete>
        }
    }
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	20000734 	.word	0x20000734
 8001a38:	0801f628 	.word	0x0801f628
 8001a3c:	0801c0e0 	.word	0x0801c0e0
 8001a40:	20000738 	.word	0x20000738
 8001a44:	2000073c 	.word	0x2000073c
 8001a48:	20000740 	.word	0x20000740
 8001a4c:	20000940 	.word	0x20000940
 8001a50:	0801c0ec 	.word	0x0801c0ec
 8001a54:	0801c108 	.word	0x0801c108
 8001a58:	0801c110 	.word	0x0801c110

08001a5c <tcpserver_init>:


void tcpserver_init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af02      	add	r7, sp, #8
    sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityRealtime);
 8001a62:	2330      	movs	r3, #48	@ 0x30
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4903      	ldr	r1, [pc, #12]	@ (8001a7c <tcpserver_init+0x20>)
 8001a6e:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <tcpserver_init+0x24>)
 8001a70:	f017 f9c2 	bl	8018df8 <sys_thread_new>
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	0800193d 	.word	0x0800193d
 8001a80:	0801c12c 	.word	0x0801c12c

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff fe55 	bl	800175c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f018 f967 	bl	8019d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff f91b 	bl	8000cf0 <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ac8:	0801fa14 	.word	0x0801fa14
  ldr r2, =_sbss
 8001acc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ad0:	20011fc4 	.word	0x20011fc4

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>

08001ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f000 f8f9 	bl	8001cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f7ff fc6f 	bl	80013c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fb0d 	bl	8001104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000008 	.word	0x20000008
 8001b14:	20000d40 	.word	0x20000d40

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000d40 	.word	0x20000d40

08001b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b38:	f7ff ffee 	bl	8001b18 <HAL_GetTick>
 8001b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b48:	d005      	beq.n	8001b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_Delay+0x44>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b56:	bf00      	nop
 8001b58:	f7ff ffde 	bl	8001b18 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8f7      	bhi.n	8001b58 <HAL_Delay+0x28>
  {
  }
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000008 	.word	0x20000008

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00
 8001bbc:	05fa0000 	.word	0x05fa0000

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	@ (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff4c 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfa:	f7ff ff61 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001cfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68b9      	ldr	r1, [r7, #8]
 8001d04:	6978      	ldr	r0, [r7, #20]
 8001d06:	f7ff ffb1 	bl	8001c6c <NVIC_EncodePriority>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff80 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff54 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001d4c:	4ba0      	ldr	r3, [pc, #640]	@ (8001fd0 <HAL_ETH_Init+0x294>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001d54:	2300      	movs	r3, #0
 8001d56:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e180      	b.n	8002064 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f004 fe28 	bl	80069cc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b95      	ldr	r3, [pc, #596]	@ (8001fd4 <HAL_ETH_Init+0x298>)
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	4a94      	ldr	r2, [pc, #592]	@ (8001fd4 <HAL_ETH_Init+0x298>)
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d86:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d88:	4b92      	ldr	r3, [pc, #584]	@ (8001fd4 <HAL_ETH_Init+0x298>)
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d94:	4b90      	ldr	r3, [pc, #576]	@ (8001fd8 <HAL_ETH_Init+0x29c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a8f      	ldr	r2, [pc, #572]	@ (8001fd8 <HAL_ETH_Init+0x29c>)
 8001d9a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d9e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001da0:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd8 <HAL_ETH_Init+0x29c>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	498b      	ldr	r1, [pc, #556]	@ (8001fd8 <HAL_ETH_Init+0x29c>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc4:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc6:	f7ff fea7 	bl	8001b18 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001dcc:	e011      	b.n	8001df2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001dce:	f7ff fea3 	bl	8001b18 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ddc:	d909      	bls.n	8001df2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2203      	movs	r2, #3
 8001de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e138      	b.n	8002064 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e4      	bne.n	8001dce <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f023 031c 	bic.w	r3, r3, #28
 8001e12:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e14:	f002 fd26 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8001e18:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4a6f      	ldr	r2, [pc, #444]	@ (8001fdc <HAL_ETH_Init+0x2a0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d908      	bls.n	8001e34 <HAL_ETH_Init+0xf8>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe0 <HAL_ETH_Init+0x2a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d804      	bhi.n	8001e34 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e027      	b.n	8001e84 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe0 <HAL_ETH_Init+0x2a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d908      	bls.n	8001e4e <HAL_ETH_Init+0x112>
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	4a64      	ldr	r2, [pc, #400]	@ (8001fd0 <HAL_ETH_Init+0x294>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d204      	bcs.n	8001e4e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f043 030c 	orr.w	r3, r3, #12
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	e01a      	b.n	8001e84 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd0 <HAL_ETH_Init+0x294>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d303      	bcc.n	8001e5e <HAL_ETH_Init+0x122>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4a62      	ldr	r2, [pc, #392]	@ (8001fe4 <HAL_ETH_Init+0x2a8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d911      	bls.n	8001e82 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4a60      	ldr	r2, [pc, #384]	@ (8001fe4 <HAL_ETH_Init+0x2a8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d908      	bls.n	8001e78 <HAL_ETH_Init+0x13c>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4a5f      	ldr	r2, [pc, #380]	@ (8001fe8 <HAL_ETH_Init+0x2ac>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d804      	bhi.n	8001e78 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e005      	b.n	8001e84 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f043 0310 	orr.w	r3, r3, #16
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	e000      	b.n	8001e84 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e82:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e90:	2100      	movs	r1, #0
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fc10 	bl	80026b8 <HAL_ETH_WritePHYRegister>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fdc5 	bl	8002a34 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0d6      	b.n	8002064 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001eb6:	20ff      	movs	r0, #255	@ 0xff
 8001eb8:	f7ff fe3a 	bl	8001b30 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a4 	beq.w	800200e <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ec6:	f7ff fe27 	bl	8001b18 <HAL_GetTick>
 8001eca:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fb87 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001eda:	f7ff fe1d 	bl	8001b18 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d90f      	bls.n	8001f0c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ef0:	6939      	ldr	r1, [r7, #16]
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fd9e 	bl	8002a34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0ab      	b.n	8002064 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0da      	beq.n	8001ecc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 fbcb 	bl	80026b8 <HAL_ETH_WritePHYRegister>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fd80 	bl	8002a34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e091      	b.n	8002064 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff fdea 	bl	8001b18 <HAL_GetTick>
 8001f44:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fb4a 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001f54:	f7ff fde0 	bl	8001b18 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d90f      	bls.n	8001f86 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f6a:	6939      	ldr	r1, [r7, #16]
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fd61 	bl	8002a34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e06e      	b.n	8002064 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0da      	beq.n	8001f46 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	461a      	mov	r2, r3
 8001f96:	2110      	movs	r1, #16
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fb25 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fa8:	6939      	ldr	r1, [r7, #16]
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fd42 	bl	8002a34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e053      	b.n	8002064 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d012      	beq.n	8001fec <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e010      	b.n	8001ff2 <HAL_ETH_Init+0x2b6>
 8001fd0:	03938700 	.word	0x03938700
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	01312cff 	.word	0x01312cff
 8001fe0:	02160ebf 	.word	0x02160ebf
 8001fe4:	05f5e0ff 	.word	0x05f5e0ff
 8001fe8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	e026      	b.n	8002052 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e021      	b.n	8002052 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800201e:	4313      	orrs	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	2100      	movs	r1, #0
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fb46 	bl	80026b8 <HAL_ETH_WritePHYRegister>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002036:	6939      	ldr	r1, [r7, #16]
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fcfb 	bl	8002a34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00c      	b.n	8002064 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800204a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800204e:	f7ff fd6f 	bl	8001b30 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002052:	6939      	ldr	r1, [r7, #16]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fced 	bl	8002a34 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ETH_DMATxDescListInit+0x20>
 8002088:	2302      	movs	r3, #2
 800208a:	e051      	b.n	8002130 <HAL_ETH_DMATxDescListInit+0xc4>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e030      	b.n	800210a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020b8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	461a      	mov	r2, r3
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	e002      	b.n	8002104 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d3ca      	bcc.n	80020a8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800211c:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_ETH_DMARxDescListInit+0x20>
 8002158:	2302      	movs	r3, #2
 800215a:	e055      	b.n	8002208 <HAL_ETH_DMARxDescListInit+0xcc>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e034      	b.n	80021e2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	015b      	lsls	r3, r3, #5
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	4413      	add	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002188:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002190:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	461a      	mov	r2, r3
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d105      	bne.n	80021ba <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d208      	bcs.n	80021d6 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	015b      	lsls	r3, r3, #5
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	461a      	mov	r2, r3
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	60da      	str	r2, [r3, #12]
 80021d4:	e002      	b.n	80021dc <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3c6      	bcc.n	8002178 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021f4:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002230:	2b01      	cmp	r3, #1
 8002232:	d101      	bne.n	8002238 <HAL_ETH_TransmitFrame+0x24>
 8002234:	2302      	movs	r3, #2
 8002236:	e0cc      	b.n	80023d2 <HAL_ETH_TransmitFrame+0x1be>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  if (FrameLength == 0) 
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return  HAL_ERROR;                                    
 800225e:	2301      	movs	r3, #1
 8002260:	e0b7      	b.n	80023d2 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	da09      	bge.n	8002280 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2212      	movs	r2, #18
 8002270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0a8      	b.n	80023d2 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002286:	4293      	cmp	r3, r2
 8002288:	d915      	bls.n	80022b6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4a54      	ldr	r2, [pc, #336]	@ (80023e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	4b51      	ldr	r3, [pc, #324]	@ (80023e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800229a:	fba3 1302 	umull	r1, r3, r3, r2
 800229e:	0a9b      	lsrs	r3, r3, #10
 80022a0:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	e001      	b.n	80022ba <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d11c      	bne.n	80022fa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 80022ce:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80022da:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80022ea:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022f8:	e04b      	b.n	8002392 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e044      	b.n	800238a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800230e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002324:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800232e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3b01      	subs	r3, #1
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d116      	bne.n	8002368 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002348:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	4a25      	ldr	r2, [pc, #148]	@ (80023e4 <HAL_ETH_TransmitFrame+0x1d0>)
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4413      	add	r3, r2
 8002356:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800235a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002366:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002376:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i=0; i< bufcount; i++)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	3301      	adds	r3, #1
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	429a      	cmp	r2, r3
 8002390:	d3b6      	bcc.n	8002300 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ac:	461a      	mov	r2, r3
 80023ae:	2304      	movs	r3, #4
 80023b0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ba:	461a      	mov	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	ac02b00b 	.word	0xac02b00b
 80023e4:	fffffa0c 	.word	0xfffffa0c

080023e8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80023fe:	2302      	movs	r3, #2
 8002400:	e074      	b.n	80024ec <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002412:	e05a      	b.n	80024ca <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3301      	adds	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002428:	d10d      	bne.n	8002446 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
 8002444:	e041      	b.n	80024ca <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10b      	bne.n	800246c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	461a      	mov	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	@ 0x28
 800246a:	e02e      	b.n	80024ca <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	635a      	str	r2, [r3, #52]	@ 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002482:	2b01      	cmp	r3, #1
 8002484:	d103      	bne.n	800248e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	631a      	str	r2, [r3, #48]	@ 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800249a:	1f1a      	subs	r2, r3, #4
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
      /* Return function status */
      return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e010      	b.n	80024ec <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	db02      	blt.n	80024da <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d99c      	bls.n	8002414 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250e:	2b40      	cmp	r3, #64	@ 0x40
 8002510:	d112      	bne.n	8002538 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f004 fb1a 	bl	8006b4c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002520:	461a      	mov	r2, r3
 8002522:	2340      	movs	r3, #64	@ 0x40
 8002524:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002536:	e01a      	b.n	800256e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d111      	bne.n	800256e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f838 	bl	80025c0 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002558:	461a      	mov	r2, r3
 800255a:	2301      	movs	r3, #1
 800255c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800257c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002590:	d112      	bne.n	80025b8 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f81e 	bl	80025d4 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a0:	461a      	mov	r2, r3
 80025a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025a6:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	460b      	mov	r3, r1
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b82      	cmp	r3, #130	@ 0x82
 8002608:	d101      	bne.n	800260e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	e050      	b.n	80026b0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2282      	movs	r2, #130	@ 0x82
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f003 031c 	and.w	r3, r3, #28
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8a1b      	ldrh	r3, [r3, #16]
 800262a:	02db      	lsls	r3, r3, #11
 800262c:	b29b      	uxth	r3, r3
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002634:	897b      	ldrh	r3, [r7, #10]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 0302 	bic.w	r3, r3, #2
 8002648:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800265a:	f7ff fa5d 	bl	8001b18 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002660:	e015      	b.n	800268e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002662:	f7ff fa59 	bl	8001b18 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002670:	d309      	bcc.n	8002686 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e014      	b.n	80026b0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e4      	bne.n	8002662 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	460b      	mov	r3, r1
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b42      	cmp	r3, #66	@ 0x42
 80026d8:	d101      	bne.n	80026de <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	e04e      	b.n	800277c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2242      	movs	r2, #66	@ 0x42
 80026e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 031c 	and.w	r3, r3, #28
 80026f4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8a1b      	ldrh	r3, [r3, #16]
 80026fa:	02db      	lsls	r3, r3, #11
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002704:	897b      	ldrh	r3, [r7, #10]
 8002706:	019b      	lsls	r3, r3, #6
 8002708:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002734:	f7ff f9f0 	bl	8001b18 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800273a:	e015      	b.n	8002768 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800273c:	f7ff f9ec 	bl	8001b18 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d309      	bcc.n	8002760 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00d      	b.n	800277c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e4      	bne.n	800273c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Return function status */
  return HAL_OK; 
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ETH_Start+0x16>
 8002796:	2302      	movs	r3, #2
 8002798:	e01f      	b.n	80027da <HAL_ETH_Start+0x56>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb40 	bl	8002e30 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fb77 	bl	8002ea4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 fc06 	bl	8002fc8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fbab 	bl	8002f18 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fbd4 	bl	8002f70 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_ETH_Stop+0x16>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e01f      	b.n	8002838 <HAL_ETH_Stop+0x56>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fb9b 	bl	8002f44 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 fbc4 	bl	8002f9c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fb62 	bl	8002ede <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fbd4 	bl	8002fc8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fb22 	bl	8002e6a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ETH_ConfigMAC+0x1c>
 8002858:	2302      	movs	r3, #2
 800285a:	e0e4      	b.n	8002a26 <HAL_ETH_ConfigMAC+0x1e6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 80b1 	beq.w	80029d6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a30 <HAL_ETH_ConfigMAC+0x1f0>)
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800288c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002892:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002898:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800289e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80028a4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80028aa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80028b0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80028b6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80028bc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80028c2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                         macconf->AutomaticPadCRCStrip | 
 80028c8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                         macconf->BackOffLimit | 
 80028ce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7ff f922 	bl	8001b30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028fc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8002902:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8002908:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception | 
 800290e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8002914:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800291a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002926:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002928:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002932:	2001      	movs	r0, #1
 8002934:	f7ff f8fc 	bl	8001b30 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002948:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002952:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002970:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8002976:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 800297c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002982:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8002988:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f7ff f8c5 	bl	8001b30 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                              macconf->VLANTagIdentifier);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7ff f8b2 	bl	8001b30 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]
 80029d4:	e01e      	b.n	8002a14 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80029e4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff f892 	bl	8001b30 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	ff20810f 	.word	0xff20810f

08002a34 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0b0      	sub	sp, #192	@ 0xc0
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a50:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a62:	2300      	movs	r3, #0
 8002a64:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a80:	e001      	b.n	8002a86 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a8a:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a90:	2300      	movs	r3, #0
 8002a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002aa0:	2340      	movs	r3, #64	@ 0x40
 8002aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b0c:	4ba9      	ldr	r3, [pc, #676]	@ (8002db4 <ETH_MACDMAConfig+0x380>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                       macinit.Jabber | 
 8002b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b18:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                       macinit.Jabber | 
 8002b1c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                       macinit.InterFrameGap |
 8002b20:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b26:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                       (heth->Init).Speed | 
 8002b2a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                       macinit.ReceiveOwn |
 8002b2e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b34:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                       (heth->Init).DuplexMode | 
 8002b38:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                       macinit.ChecksumOffload |    
 8002b3c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                       macinit.RetryTransmission | 
 8002b40:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b44:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                       macinit.BackOffLimit | 
 8002b48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002b4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b5c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f7fe ffe1 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b76:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b78:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8002b7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b7c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8002b80:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8002b86:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception | 
 8002b8c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002b92:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ba4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ba6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7fe ffbc 	bl	8001b30 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002bc0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002bca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002bd4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002be4:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002be8:	4013      	ands	r3, r2
 8002bea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002bf8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002bfe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002c04:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c0a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002c10:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c24:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f7fe ff7d 	bl	8001b30 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c3e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                            macinit.VLANTagIdentifier);
 8002c44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f7fe ff68 	bl	8001b30 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c68:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c72:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c7c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	643b      	str	r3, [r7, #64]	@ 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	647b      	str	r3, [r7, #68]	@ 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <ETH_MACDMAConfig+0x384>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002cd0:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002cd4:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002cd6:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002cd8:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002cda:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002cdc:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002cde:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002ce0:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002ce2:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002ce4:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002ce8:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002cec:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                         dmainit.ReceiveThresholdControl |
 8002cf0:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d04:	461a      	mov	r2, r3
 8002d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d0a:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe ff08 	bl	8001b30 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d2e:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                          dmainit.FixedBurst |
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d34:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                          dmainit.FixedBurst |
 8002d38:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d3c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          dmainit.TxDMABurstLength |
 8002d40:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d44:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002d46:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002d4a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d54:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d58:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7fe fee1 	bl	8001b30 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d76:	461a      	mov	r2, r3
 8002d78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d7c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d10b      	bne.n	8002d9e <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <ETH_MACDMAConfig+0x388>)
 8002d96:	430b      	orrs	r3, r1
 8002d98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d9c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	461a      	mov	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f80a 	bl	8002dc0 <ETH_MACAddressConfig>
}
 8002dac:	bf00      	nop
 8002dae:	37c0      	adds	r7, #192	@ 0xc0
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	ff20810f 	.word	0xff20810f
 8002db8:	f8de3f23 	.word	0xf8de3f23
 8002dbc:	00010040 	.word	0x00010040

08002dc0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3305      	adds	r3, #5
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	3204      	adds	r2, #4
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <ETH_MACAddressConfig+0x68>)
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3303      	adds	r3, #3
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	061a      	lsls	r2, r3, #24
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3302      	adds	r3, #2
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	4313      	orrs	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	7812      	ldrb	r2, [r2, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <ETH_MACAddressConfig+0x6c>)
 8002e12:	4413      	add	r3, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40028040 	.word	0x40028040
 8002e2c:	40028044 	.word	0x40028044

08002e30 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0208 	orr.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7fe fe6b 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fe fe4e 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0204 	orr.w	r2, r2, #4
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f7fe fe31 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0204 	bic.w	r2, r2, #4
 8002ef8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe fe14 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	601a      	str	r2, [r3, #0]
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f36:	6193      	str	r3, [r2, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f62:	6193      	str	r3, [r2, #24]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f8e:	6193      	str	r3, [r2, #24]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	f023 0302 	bic.w	r3, r3, #2
 8002fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fba:	6193      	str	r3, [r2, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fea:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7fe fd99 	bl	8001b30 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003008:	6193      	str	r3, [r2, #24]
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800302e:	2300      	movs	r3, #0
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e175      	b.n	8003320 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003034:	2201      	movs	r2, #1
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	429a      	cmp	r2, r3
 800304e:	f040 8164 	bne.w	800331a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b01      	cmp	r3, #1
 800305c:	d005      	beq.n	800306a <HAL_GPIO_Init+0x56>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d130      	bne.n	80030cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030a0:	2201      	movs	r2, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 0201 	and.w	r2, r3, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d017      	beq.n	8003108 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d123      	bne.n	800315c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	08da      	lsrs	r2, r3, #3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3208      	adds	r2, #8
 800311c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	220f      	movs	r2, #15
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	08da      	lsrs	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3208      	adds	r2, #8
 8003156:	69b9      	ldr	r1, [r7, #24]
 8003158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4313      	orrs	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80be 	beq.w	800331a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319e:	4b66      	ldr	r3, [pc, #408]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4a65      	ldr	r2, [pc, #404]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	4b63      	ldr	r3, [pc, #396]	@ (8003338 <HAL_GPIO_Init+0x324>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031b6:	4a61      	ldr	r2, [pc, #388]	@ (800333c <HAL_GPIO_Init+0x328>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_GPIO_Init+0x32c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d037      	beq.n	8003252 <HAL_GPIO_Init+0x23e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a57      	ldr	r2, [pc, #348]	@ (8003344 <HAL_GPIO_Init+0x330>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_GPIO_Init+0x23a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a56      	ldr	r2, [pc, #344]	@ (8003348 <HAL_GPIO_Init+0x334>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02b      	beq.n	800324a <HAL_GPIO_Init+0x236>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a55      	ldr	r2, [pc, #340]	@ (800334c <HAL_GPIO_Init+0x338>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d025      	beq.n	8003246 <HAL_GPIO_Init+0x232>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a54      	ldr	r2, [pc, #336]	@ (8003350 <HAL_GPIO_Init+0x33c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01f      	beq.n	8003242 <HAL_GPIO_Init+0x22e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a53      	ldr	r2, [pc, #332]	@ (8003354 <HAL_GPIO_Init+0x340>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d019      	beq.n	800323e <HAL_GPIO_Init+0x22a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a52      	ldr	r2, [pc, #328]	@ (8003358 <HAL_GPIO_Init+0x344>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_GPIO_Init+0x226>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a51      	ldr	r2, [pc, #324]	@ (800335c <HAL_GPIO_Init+0x348>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00d      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a50      	ldr	r2, [pc, #320]	@ (8003360 <HAL_GPIO_Init+0x34c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a4f      	ldr	r2, [pc, #316]	@ (8003364 <HAL_GPIO_Init+0x350>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_GPIO_Init+0x21a>
 800322a:	2309      	movs	r3, #9
 800322c:	e012      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800322e:	230a      	movs	r3, #10
 8003230:	e010      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003232:	2308      	movs	r3, #8
 8003234:	e00e      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003236:	2307      	movs	r3, #7
 8003238:	e00c      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800323a:	2306      	movs	r3, #6
 800323c:	e00a      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800323e:	2305      	movs	r3, #5
 8003240:	e008      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003242:	2304      	movs	r3, #4
 8003244:	e006      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003246:	2303      	movs	r3, #3
 8003248:	e004      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800324a:	2302      	movs	r3, #2
 800324c:	e002      	b.n	8003254 <HAL_GPIO_Init+0x240>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_GPIO_Init+0x240>
 8003252:	2300      	movs	r3, #0
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	f002 0203 	and.w	r2, r2, #3
 800325a:	0092      	lsls	r2, r2, #2
 800325c:	4093      	lsls	r3, r2
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003264:	4935      	ldr	r1, [pc, #212]	@ (800333c <HAL_GPIO_Init+0x328>)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	089b      	lsrs	r3, r3, #2
 800326a:	3302      	adds	r3, #2
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003272:	4b3d      	ldr	r3, [pc, #244]	@ (8003368 <HAL_GPIO_Init+0x354>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003296:	4a34      	ldr	r2, [pc, #208]	@ (8003368 <HAL_GPIO_Init+0x354>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800329c:	4b32      	ldr	r3, [pc, #200]	@ (8003368 <HAL_GPIO_Init+0x354>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_GPIO_Init+0x354>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c6:	4b28      	ldr	r3, [pc, #160]	@ (8003368 <HAL_GPIO_Init+0x354>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <HAL_GPIO_Init+0x354>)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_GPIO_Init+0x354>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003314:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <HAL_GPIO_Init+0x354>)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3301      	adds	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b0f      	cmp	r3, #15
 8003324:	f67f ae86 	bls.w	8003034 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3724      	adds	r7, #36	@ 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	40013800 	.word	0x40013800
 8003340:	40020000 	.word	0x40020000
 8003344:	40020400 	.word	0x40020400
 8003348:	40020800 	.word	0x40020800
 800334c:	40020c00 	.word	0x40020c00
 8003350:	40021000 	.word	0x40021000
 8003354:	40021400 	.word	0x40021400
 8003358:	40021800 	.word	0x40021800
 800335c:	40021c00 	.word	0x40021c00
 8003360:	40022000 	.word	0x40022000
 8003364:	40022400 	.word	0x40022400
 8003368:	40013c00 	.word	0x40013c00

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	4613      	mov	r3, r2
 800337a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800337c:	787b      	ldrb	r3, [r7, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003388:	e003      	b.n	8003392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	041a      	lsls	r2, r3, #16
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07f      	b.n	80034b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fd ff9e 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	@ 0x24
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003400:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	e006      	b.n	8003428 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003426:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d104      	bne.n	800343a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_I2C_Init+0x11c>)
 8003446:	430b      	orrs	r3, r1
 8003448:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003458:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691a      	ldr	r2, [r3, #16]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69d9      	ldr	r1, [r3, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	02008000 	.word	0x02008000

080034c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	461a      	mov	r2, r3
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
 80034d0:	4613      	mov	r3, r2
 80034d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f040 80da 	bne.w	8003696 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_I2C_Master_Transmit+0x30>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0d3      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f8:	f7fe fb0e 	bl	8001b18 <HAL_GetTick>
 80034fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	2319      	movs	r3, #25
 8003504:	2201      	movs	r2, #1
 8003506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f8f0 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e0be      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2221      	movs	r2, #33	@ 0x21
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2210      	movs	r2, #16
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2bff      	cmp	r3, #255	@ 0xff
 800354a:	d90e      	bls.n	800356a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	22ff      	movs	r2, #255	@ 0xff
 8003550:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa6c 	bl	8003a40 <I2C_TransferConfig>
 8003568:	e06c      	b.n	8003644 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	b2da      	uxtb	r2, r3
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	4b48      	ldr	r3, [pc, #288]	@ (80036a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fa5b 	bl	8003a40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800358a:	e05b      	b.n	8003644 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	6a39      	ldr	r1, [r7, #32]
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f8ed 	bl	8003770 <I2C_WaitOnTXISFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e07b      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3b01      	subs	r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d034      	beq.n	8003644 <HAL_I2C_Master_Transmit+0x184>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d130      	bne.n	8003644 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2200      	movs	r2, #0
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f87f 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04d      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2bff      	cmp	r3, #255	@ 0xff
 8003604:	d90e      	bls.n	8003624 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	22ff      	movs	r2, #255	@ 0xff
 800360a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	2300      	movs	r3, #0
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fa0f 	bl	8003a40 <I2C_TransferConfig>
 8003622:	e00f      	b.n	8003644 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003632:	b2da      	uxtb	r2, r3
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	2300      	movs	r3, #0
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f9fe 	bl	8003a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d19e      	bne.n	800358c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8cc 	bl	80037f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e01a      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2220      	movs	r2, #32
 8003668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003676:	400b      	ands	r3, r1
 8003678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	e000      	b.n	8003698 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	80002000 	.word	0x80002000
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d103      	bne.n	80036c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d007      	beq.n	80036e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	619a      	str	r2, [r3, #24]
  }
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003700:	e022      	b.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d01e      	beq.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fa05 	bl	8001b18 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d113      	bne.n	8003748 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e00f      	b.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4013      	ands	r3, r2
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	429a      	cmp	r2, r3
 8003764:	d0cd      	beq.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800377c:	e02c      	b.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f870 	bl	8003868 <I2C_IsErrorOccurred>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e02a      	b.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d01e      	beq.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7fe f9bd 	bl	8001b18 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d113      	bne.n	80037d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d1cb      	bne.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037fc:	e028      	b.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f830 	bl	8003868 <I2C_IsErrorOccurred>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e026      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fe f981 	bl	8001b18 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d113      	bne.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d1cf      	bne.n	80037fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d075      	beq.n	8003980 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2210      	movs	r2, #16
 800389a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800389c:	e056      	b.n	800394c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d052      	beq.n	800394c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe f937 	bl	8001b18 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_IsErrorOccurred+0x54>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d147      	bne.n	800394c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038de:	d12e      	bne.n	800393e <I2C_IsErrorOccurred+0xd6>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e6:	d02a      	beq.n	800393e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d027      	beq.n	800393e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038fe:	f7fe f90b 	bl	8001b18 <HAL_GetTick>
 8003902:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003904:	e01b      	b.n	800393e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003906:	f7fe f907 	bl	8001b18 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b19      	cmp	r3, #25
 8003912:	d914      	bls.n	800393e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d1dc      	bne.n	8003906 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d003      	beq.n	8003962 <I2C_IsErrorOccurred+0xfa>
 800395a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800395e:	2b00      	cmp	r3, #0
 8003960:	d09d      	beq.n	800389e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2220      	movs	r2, #32
 8003970:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f043 0308 	orr.w	r3, r3, #8
 80039ba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01c      	beq.n	8003a30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fe56 	bl	80036a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <I2C_IsErrorOccurred+0x1d4>)
 8003a08:	400b      	ands	r3, r1
 8003a0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	431a      	orrs	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3728      	adds	r7, #40	@ 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	fe00e800 	.word	0xfe00e800

08003a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	817b      	strh	r3, [r7, #10]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a52:	897b      	ldrh	r3, [r7, #10]
 8003a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a58:	7a7b      	ldrb	r3, [r7, #9]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	0d5b      	lsrs	r3, r3, #21
 8003a7a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a7e:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <I2C_TransferConfig+0x60>)
 8003a80:	430b      	orrs	r3, r1
 8003a82:	43db      	mvns	r3, r3
 8003a84:	ea02 0103 	and.w	r1, r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	03ff63ff 	.word	0x03ff63ff

08003aa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d138      	bne.n	8003b2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e032      	b.n	8003b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	@ 0x24
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003af6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6819      	ldr	r1, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d139      	bne.n	8003bc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e033      	b.n	8003bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2224      	movs	r2, #36	@ 0x24
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd4:	b08f      	sub	sp, #60	@ 0x3c
 8003bd6:	af0a      	add	r7, sp, #40	@ 0x28
 8003bd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e116      	b.n	8003e12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 33bd 	ldrb.w	r3, [r3, #957]	@ 0x3bd
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 23bc 	strb.w	r2, [r3, #956]	@ 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fb08 	bl	8001214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2203      	movs	r2, #3
 8003c08:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d102      	bne.n	8003c1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fada 	bl	80061dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	687e      	ldr	r6, [r7, #4]
 8003c30:	466d      	mov	r5, sp
 8003c32:	f106 0410 	add.w	r4, r6, #16
 8003c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c42:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c46:	1d33      	adds	r3, r6, #4
 8003c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c4a:	6838      	ldr	r0, [r7, #0]
 8003c4c:	f002 fa6e 	bl	800612c <USB_CoreInit>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0d7      	b.n	8003e12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f002 fac8 	bl	80061fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73fb      	strb	r3, [r7, #15]
 8003c72:	e04a      	b.n	8003d0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	333d      	adds	r3, #61	@ 0x3d
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333c      	adds	r3, #60	@ 0x3c
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	b298      	uxth	r0, r3
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3342      	adds	r3, #66	@ 0x42
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	333f      	adds	r3, #63	@ 0x3f
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3344      	adds	r3, #68	@ 0x44
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3348      	adds	r3, #72	@ 0x48
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3350      	adds	r3, #80	@ 0x50
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	3301      	adds	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3af      	bcc.n	8003c74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
 8003d18:	e044      	b.n	8003da4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	f203 13fd 	addw	r3, r3, #509	@ 0x1fd
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	1a9b      	subs	r3, r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d46:	7bfa      	ldrb	r2, [r7, #15]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	3301      	adds	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3b5      	bcc.n	8003d1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	687e      	ldr	r6, [r7, #4]
 8003db6:	466d      	mov	r5, sp
 8003db8:	f106 0410 	add.w	r4, r6, #16
 8003dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dcc:	1d33      	adds	r3, r6, #4
 8003dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd0:	6838      	ldr	r0, [r7, #0]
 8003dd2:	f002 fa61 	bl	8006298 <USB_DevInit>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e014      	b.n	8003e12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 23bd 	strb.w	r2, [r3, #957]	@ 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d102      	bne.n	8003e06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f80b 	bl	8003e1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f002 fc1b 	bl	8006646 <USB_DevDisconnect>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 23f4 	strb.w	r2, [r3, #1012]	@ 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e4a:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	10000003 	.word	0x10000003

08003e64 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e72:	6013      	str	r3, [r2, #0]
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40007000 	.word	0x40007000

08003e84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	4a22      	ldr	r2, [pc, #136]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_PWREx_EnableOverDrive+0x98>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eb2:	f7fd fe31 	bl	8001b18 <HAL_GetTick>
 8003eb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003eb8:	e009      	b.n	8003ece <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003eba:	f7fd fe2d 	bl	8001b18 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ec8:	d901      	bls.n	8003ece <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e022      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ece:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eda:	d1ee      	bne.n	8003eba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003edc:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ee6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7fd fe16 	bl	8001b18 <HAL_GetTick>
 8003eec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003eee:	e009      	b.n	8003f04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef0:	f7fd fe12 	bl	8001b18 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003efe:	d901      	bls.n	8003f04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e007      	b.n	8003f14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f04:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40007000 	.word	0x40007000

08003f24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e29b      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8087 	beq.w	8004056 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f48:	4b96      	ldr	r3, [pc, #600]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d00c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f54:	4b93      	ldr	r3, [pc, #588]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f003 030c 	and.w	r3, r3, #12
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d112      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62>
 8003f60:	4b90      	ldr	r3, [pc, #576]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d06c      	beq.n	8004054 <HAL_RCC_OscConfig+0x130>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d168      	bne.n	8004054 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e275      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x7a>
 8003f90:	4b84      	ldr	r3, [pc, #528]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a83      	ldr	r2, [pc, #524]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	e02e      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x9c>
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7e      	ldr	r2, [pc, #504]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b7c      	ldr	r3, [pc, #496]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7b      	ldr	r2, [pc, #492]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	e01d      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xc0>
 8003fca:	4b76      	ldr	r3, [pc, #472]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b73      	ldr	r3, [pc, #460]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a72      	ldr	r2, [pc, #456]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0xd8>
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d013      	beq.n	800402c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fd fd88 	bl	8001b18 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800400c:	f7fd fd84 	bl	8001b18 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	@ 0x64
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e229      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	4b61      	ldr	r3, [pc, #388]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0xe8>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fd fd74 	bl	8001b18 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004034:	f7fd fd70 	bl	8001b18 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	@ 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e215      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	4b57      	ldr	r3, [pc, #348]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x110>
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d069      	beq.n	8004136 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004062:	4b50      	ldr	r3, [pc, #320]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b4d      	ldr	r3, [pc, #308]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x190>
 800407a:	4b4a      	ldr	r3, [pc, #296]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b47      	ldr	r3, [pc, #284]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x17a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1e9      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b41      	ldr	r3, [pc, #260]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	493d      	ldr	r1, [pc, #244]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e040      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d023      	beq.n	8004104 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a38      	ldr	r2, [pc, #224]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd fd26 	bl	8001b18 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d0:	f7fd fd22 	bl	8001b18 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1c7      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e2:	4b30      	ldr	r3, [pc, #192]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ee:	4b2d      	ldr	r3, [pc, #180]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	4929      	ldr	r1, [pc, #164]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
 8004102:	e018      	b.n	8004136 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004104:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a26      	ldr	r2, [pc, #152]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd fd02 	bl	8001b18 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004118:	f7fd fcfe 	bl	8001b18 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1a3      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d038      	beq.n	80041b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d019      	beq.n	800417e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414a:	4b16      	ldr	r3, [pc, #88]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 800414c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414e:	4a15      	ldr	r2, [pc, #84]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd fcdf 	bl	8001b18 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd fcdb 	bl	8001b18 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e180      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004170:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x23a>
 800417c:	e01a      	b.n	80041b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800417e:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004182:	4a08      	ldr	r2, [pc, #32]	@ (80041a4 <HAL_RCC_OscConfig+0x280>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418a:	f7fd fcc5 	bl	8001b18 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004190:	e00a      	b.n	80041a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004192:	f7fd fcc1 	bl	8001b18 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d903      	bls.n	80041a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e166      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
 80041a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a8:	4b92      	ldr	r3, [pc, #584]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ee      	bne.n	8004192 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 80a4 	beq.w	800430a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c2:	4b8c      	ldr	r3, [pc, #560]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10d      	bne.n	80041ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ce:	4b89      	ldr	r3, [pc, #548]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	4a88      	ldr	r2, [pc, #544]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041da:	4b86      	ldr	r3, [pc, #536]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ea:	4b83      	ldr	r3, [pc, #524]	@ (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041f6:	4b80      	ldr	r3, [pc, #512]	@ (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7f      	ldr	r2, [pc, #508]	@ (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fd fc89 	bl	8001b18 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd fc85 	bl	8001b18 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	@ 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e12a      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800421c:	4b76      	ldr	r3, [pc, #472]	@ (80043f8 <HAL_RCC_OscConfig+0x4d4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x31a>
 8004230:	4b70      	ldr	r3, [pc, #448]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a6f      	ldr	r2, [pc, #444]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	e02d      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x33c>
 8004246:	4b6b      	ldr	r3, [pc, #428]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a6a      	ldr	r2, [pc, #424]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	@ 0x70
 8004252:	4b68      	ldr	r3, [pc, #416]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a67      	ldr	r2, [pc, #412]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004258:	f023 0304 	bic.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
 800425e:	e01c      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d10c      	bne.n	8004282 <HAL_RCC_OscConfig+0x35e>
 8004268:	4b62      	ldr	r3, [pc, #392]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426c:	4a61      	ldr	r2, [pc, #388]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6713      	str	r3, [r2, #112]	@ 0x70
 8004274:	4b5f      	ldr	r3, [pc, #380]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004278:	4a5e      	ldr	r2, [pc, #376]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004280:	e00b      	b.n	800429a <HAL_RCC_OscConfig+0x376>
 8004282:	4b5c      	ldr	r3, [pc, #368]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004286:	4a5b      	ldr	r2, [pc, #364]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	@ 0x70
 800428e:	4b59      	ldr	r3, [pc, #356]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004292:	4a58      	ldr	r2, [pc, #352]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d015      	beq.n	80042ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7fd fc39 	bl	8001b18 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fd fc35 	bl	8001b18 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e0d8      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	4b4c      	ldr	r3, [pc, #304]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ee      	beq.n	80042aa <HAL_RCC_OscConfig+0x386>
 80042cc:	e014      	b.n	80042f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fd fc23 	bl	8001b18 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fd fc1f 	bl	8001b18 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e0c2      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ec:	4b41      	ldr	r3, [pc, #260]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ee      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d105      	bne.n	800430a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fe:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	4a3c      	ldr	r2, [pc, #240]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004304:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004308:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80ae 	beq.w	8004470 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004314:	4b37      	ldr	r3, [pc, #220]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b08      	cmp	r3, #8
 800431e:	d06d      	beq.n	80043fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d14b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004328:	4b32      	ldr	r3, [pc, #200]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a31      	ldr	r2, [pc, #196]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800432e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fbf0 	bl	8001b18 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fbec 	bl	8001b18 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e091      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	4b29      	ldr	r3, [pc, #164]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	019b      	lsls	r3, r3, #6
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	061b      	lsls	r3, r3, #24
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	491b      	ldr	r1, [pc, #108]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438c:	4b19      	ldr	r3, [pc, #100]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a18      	ldr	r2, [pc, #96]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fbbe 	bl	8001b18 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fbba 	bl	8001b18 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e05f      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x47c>
 80043be:	e057      	b.n	8004470 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c0:	4b0c      	ldr	r3, [pc, #48]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fba4 	bl	8001b18 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fba0 	bl	8001b18 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e045      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b03      	ldr	r3, [pc, #12]	@ (80043f4 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4b0>
 80043f2:	e03d      	b.n	8004470 <HAL_RCC_OscConfig+0x54c>
 80043f4:	40023800 	.word	0x40023800
 80043f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043fc:	4b1f      	ldr	r3, [pc, #124]	@ (800447c <HAL_RCC_OscConfig+0x558>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d030      	beq.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d129      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d122      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004432:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004434:	4293      	cmp	r3, r2
 8004436:	d119      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d10f      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d107      	bne.n	800446c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800

08004480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d0      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b6a      	ldr	r3, [pc, #424]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d910      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b67      	ldr	r3, [pc, #412]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 020f 	bic.w	r2, r3, #15
 80044ae:	4965      	ldr	r1, [pc, #404]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b63      	ldr	r3, [pc, #396]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0b8      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b59      	ldr	r3, [pc, #356]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a58      	ldr	r2, [pc, #352]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f8:	4b53      	ldr	r3, [pc, #332]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a52      	ldr	r2, [pc, #328]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80044fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b50      	ldr	r3, [pc, #320]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	494d      	ldr	r1, [pc, #308]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d040      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b47      	ldr	r3, [pc, #284]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07f      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b41      	ldr	r3, [pc, #260]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e073      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3d      	ldr	r3, [pc, #244]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e06b      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4936      	ldr	r1, [pc, #216]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fd fad0 	bl	8001b18 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fd facc 	bl	8001b18 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e053      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d210      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 020f 	bic.w	r2, r3, #15
 80045ba:	4922      	ldr	r1, [pc, #136]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e032      	b.n	800463a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4916      	ldr	r1, [pc, #88]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fe:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	490e      	ldr	r1, [pc, #56]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004612:	f000 f821 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCC_ClockConfig+0x1c8>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490a      	ldr	r1, [pc, #40]	@ (800464c <HAL_RCC_ClockConfig+0x1cc>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a09      	ldr	r2, [pc, #36]	@ (8004650 <HAL_RCC_ClockConfig+0x1d0>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800462e:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCC_ClockConfig+0x1d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc fec6 	bl	80013c4 <HAL_InitTick>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023c00 	.word	0x40023c00
 8004648:	40023800 	.word	0x40023800
 800464c:	0801f4fc 	.word	0x0801f4fc
 8004650:	20000000 	.word	0x20000000
 8004654:	20000004 	.word	0x20000004

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b094      	sub	sp, #80	@ 0x50
 800465e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	647b      	str	r3, [r7, #68]	@ 0x44
 8004664:	2300      	movs	r3, #0
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	2300      	movs	r3, #0
 800466a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004670:	4b79      	ldr	r3, [pc, #484]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
 8004678:	2b08      	cmp	r3, #8
 800467a:	d00d      	beq.n	8004698 <HAL_RCC_GetSysClockFreq+0x40>
 800467c:	2b08      	cmp	r3, #8
 800467e:	f200 80e1 	bhi.w	8004844 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x34>
 8004686:	2b04      	cmp	r3, #4
 8004688:	d003      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x3a>
 800468a:	e0db      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800468c:	4b73      	ldr	r3, [pc, #460]	@ (800485c <HAL_RCC_GetSysClockFreq+0x204>)
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004690:	e0db      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004692:	4b73      	ldr	r3, [pc, #460]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x208>)
 8004694:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004696:	e0d8      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004698:	4b6f      	ldr	r3, [pc, #444]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	2200      	movs	r2, #0
 80046b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c2:	2300      	movs	r3, #0
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046ca:	4622      	mov	r2, r4
 80046cc:	462b      	mov	r3, r5
 80046ce:	f04f 0000 	mov.w	r0, #0
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	0159      	lsls	r1, r3, #5
 80046d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046dc:	0150      	lsls	r0, r2, #5
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4621      	mov	r1, r4
 80046e4:	1a51      	subs	r1, r2, r1
 80046e6:	6139      	str	r1, [r7, #16]
 80046e8:	4629      	mov	r1, r5
 80046ea:	eb63 0301 	sbc.w	r3, r3, r1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046fc:	4659      	mov	r1, fp
 80046fe:	018b      	lsls	r3, r1, #6
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004706:	4651      	mov	r1, sl
 8004708:	018a      	lsls	r2, r1, #6
 800470a:	4651      	mov	r1, sl
 800470c:	ebb2 0801 	subs.w	r8, r2, r1
 8004710:	4659      	mov	r1, fp
 8004712:	eb63 0901 	sbc.w	r9, r3, r1
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800472a:	4690      	mov	r8, r2
 800472c:	4699      	mov	r9, r3
 800472e:	4623      	mov	r3, r4
 8004730:	eb18 0303 	adds.w	r3, r8, r3
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	462b      	mov	r3, r5
 8004738:	eb49 0303 	adc.w	r3, r9, r3
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800474a:	4629      	mov	r1, r5
 800474c:	024b      	lsls	r3, r1, #9
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004754:	4621      	mov	r1, r4
 8004756:	024a      	lsls	r2, r1, #9
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004764:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004768:	f7fb fdc2 	bl	80002f0 <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4613      	mov	r3, r2
 8004772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004774:	e058      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004776:	4b38      	ldr	r3, [pc, #224]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	2200      	movs	r2, #0
 800477e:	4618      	mov	r0, r3
 8004780:	4611      	mov	r1, r2
 8004782:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004786:	623b      	str	r3, [r7, #32]
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004790:	4642      	mov	r2, r8
 8004792:	464b      	mov	r3, r9
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f04f 0100 	mov.w	r1, #0
 800479c:	0159      	lsls	r1, r3, #5
 800479e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a2:	0150      	lsls	r0, r2, #5
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4641      	mov	r1, r8
 80047aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ae:	4649      	mov	r1, r9
 80047b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047c8:	ebb2 040a 	subs.w	r4, r2, sl
 80047cc:	eb63 050b 	sbc.w	r5, r3, fp
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	00eb      	lsls	r3, r5, #3
 80047da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047de:	00e2      	lsls	r2, r4, #3
 80047e0:	4614      	mov	r4, r2
 80047e2:	461d      	mov	r5, r3
 80047e4:	4643      	mov	r3, r8
 80047e6:	18e3      	adds	r3, r4, r3
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	464b      	mov	r3, r9
 80047ec:	eb45 0303 	adc.w	r3, r5, r3
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047fe:	4629      	mov	r1, r5
 8004800:	028b      	lsls	r3, r1, #10
 8004802:	4621      	mov	r1, r4
 8004804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004808:	4621      	mov	r1, r4
 800480a:	028a      	lsls	r2, r1, #10
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004812:	2200      	movs	r2, #0
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	61fa      	str	r2, [r7, #28]
 8004818:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800481c:	f7fb fd68 	bl	80002f0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4613      	mov	r3, r2
 8004826:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004828:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <HAL_RCC_GetSysClockFreq+0x200>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004838:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800483a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004842:	e002      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCC_GetSysClockFreq+0x204>)
 8004846:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800484c:	4618      	mov	r0, r3
 800484e:	3750      	adds	r7, #80	@ 0x50
 8004850:	46bd      	mov	sp, r7
 8004852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200

08004864 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b03      	ldr	r3, [pc, #12]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x14>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004880:	f7ff fff0 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b05      	ldr	r3, [pc, #20]	@ (800489c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4903      	ldr	r1, [pc, #12]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	0801f50c 	.word	0x0801f50c

080048a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048a8:	f7ff ffdc 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0b5b      	lsrs	r3, r3, #13
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4903      	ldr	r1, [pc, #12]	@ (80048c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	0801f50c 	.word	0x0801f50c

080048cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	220f      	movs	r2, #15
 80048da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048dc:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0203 	and.w	r2, r3, #3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <HAL_RCC_GetClockConfig+0x60>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 020f 	and.w	r2, r3, #15
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	601a      	str	r2, [r3, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40023c00 	.word	0x40023c00

08004930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004958:	4b69      	ldr	r3, [pc, #420]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a68      	ldr	r2, [pc, #416]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004962:	6093      	str	r3, [r2, #8]
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496c:	4964      	ldr	r1, [pc, #400]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800497a:	2301      	movs	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d017      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800498a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004990:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004998:	4959      	ldr	r1, [pc, #356]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049a8:	d101      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d017      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	494a      	ldr	r1, [pc, #296]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e4:	d101      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a02:	2301      	movs	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 808b 	beq.w	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	4b3a      	ldr	r3, [pc, #232]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	4a39      	ldr	r2, [pc, #228]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a20:	4b37      	ldr	r3, [pc, #220]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a2c:	4b35      	ldr	r3, [pc, #212]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a34      	ldr	r2, [pc, #208]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fd f86e 	bl	8001b18 <HAL_GetTick>
 8004a3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a40:	f7fd f86a 	bl	8001b18 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	@ 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e38f      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a52:	4b2c      	ldr	r3, [pc, #176]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f0      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a5e:	4b28      	ldr	r3, [pc, #160]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d035      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d02e      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a7c:	4b20      	ldr	r3, [pc, #128]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a86:	4b1e      	ldr	r3, [pc, #120]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	4a1a      	ldr	r2, [pc, #104]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a9e:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aa4:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d114      	bne.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd f832 	bl	8001b18 <HAL_GetTick>
 8004ab4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab6:	e00a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab8:	f7fd f82e 	bl	8001b18 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e351      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ae8:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004af4:	4b04      	ldr	r3, [pc, #16]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004af6:	400b      	ands	r3, r1
 8004af8:	4901      	ldr	r1, [pc, #4]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40007000 	.word	0x40007000
 8004b08:	0ffffcff 	.word	0x0ffffcff
 8004b0c:	4bac      	ldr	r3, [pc, #688]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4aab      	ldr	r2, [pc, #684]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004b16:	6093      	str	r3, [r2, #8]
 8004b18:	4ba9      	ldr	r3, [pc, #676]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	49a6      	ldr	r1, [pc, #664]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0310 	and.w	r3, r3, #16
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b36:	4ba2      	ldr	r3, [pc, #648]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b3c:	4aa0      	ldr	r2, [pc, #640]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004b46:	4b9e      	ldr	r3, [pc, #632]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b50:	499b      	ldr	r1, [pc, #620]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b64:	4b96      	ldr	r3, [pc, #600]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b72:	4993      	ldr	r1, [pc, #588]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b86:	4b8e      	ldr	r3, [pc, #568]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b94:	498a      	ldr	r1, [pc, #552]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ba8:	4b85      	ldr	r3, [pc, #532]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb6:	4982      	ldr	r1, [pc, #520]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bca:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4979      	ldr	r1, [pc, #484]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bec:	4b74      	ldr	r3, [pc, #464]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bfa:	4971      	ldr	r1, [pc, #452]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	f023 020c 	bic.w	r2, r3, #12
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1c:	4968      	ldr	r1, [pc, #416]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c30:	4b63      	ldr	r3, [pc, #396]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c36:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3e:	4960      	ldr	r1, [pc, #384]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c52:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	4957      	ldr	r1, [pc, #348]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c74:	4b52      	ldr	r3, [pc, #328]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	494f      	ldr	r1, [pc, #316]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c96:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca4:	4946      	ldr	r1, [pc, #280]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cb8:	4b41      	ldr	r3, [pc, #260]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	493e      	ldr	r1, [pc, #248]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cda:	4b39      	ldr	r3, [pc, #228]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ce8:	4935      	ldr	r1, [pc, #212]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cfc:	4b30      	ldr	r3, [pc, #192]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d0a:	492d      	ldr	r1, [pc, #180]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d1e:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d24:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2c:	4924      	ldr	r1, [pc, #144]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d3c:	d101      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d5e:	4b18      	ldr	r3, [pc, #96]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d64:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6c:	4914      	ldr	r1, [pc, #80]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00b      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d80:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d90:	490b      	ldr	r1, [pc, #44]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00f      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004db4:	4902      	ldr	r1, [pc, #8]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de0:	4986      	ldr	r1, [pc, #536]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004df4:	4b81      	ldr	r3, [pc, #516]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dfa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e04:	497d      	ldr	r1, [pc, #500]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d006      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80d6 	beq.w	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e20:	4b76      	ldr	r3, [pc, #472]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a75      	ldr	r2, [pc, #468]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7fc fe74 	bl	8001b18 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e34:	f7fc fe70 	bl	8001b18 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b64      	cmp	r3, #100	@ 0x64
 8004e40:	d901      	bls.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e195      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e46:	4b6d      	ldr	r3, [pc, #436]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d021      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d11d      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e66:	4b65      	ldr	r3, [pc, #404]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e6c:	0c1b      	lsrs	r3, r3, #16
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e74:	4b61      	ldr	r3, [pc, #388]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e7a:	0e1b      	lsrs	r3, r3, #24
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	019a      	lsls	r2, r3, #6
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	041b      	lsls	r3, r3, #16
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	061b      	lsls	r3, r3, #24
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	071b      	lsls	r3, r3, #28
 8004e9a:	4958      	ldr	r1, [pc, #352]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02e      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ecc:	d129      	bne.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ece:	4b4b      	ldr	r3, [pc, #300]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004edc:	4b47      	ldr	r3, [pc, #284]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee2:	0f1b      	lsrs	r3, r3, #28
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	019a      	lsls	r2, r3, #6
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	041b      	lsls	r3, r3, #16
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	061b      	lsls	r3, r3, #24
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	071b      	lsls	r3, r3, #28
 8004f02:	493e      	ldr	r1, [pc, #248]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f10:	f023 021f 	bic.w	r2, r3, #31
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	4938      	ldr	r1, [pc, #224]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01d      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f2e:	4b33      	ldr	r3, [pc, #204]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f42:	0f1b      	lsrs	r3, r3, #28
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	041b      	lsls	r3, r3, #16
 8004f56:	431a      	orrs	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	071b      	lsls	r3, r3, #28
 8004f62:	4926      	ldr	r1, [pc, #152]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	019a      	lsls	r2, r3, #6
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491a      	ldr	r1, [pc, #104]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f9a:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a17      	ldr	r2, [pc, #92]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fc fdb7 	bl	8001b18 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fae:	f7fc fdb3 	bl	8001b18 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b64      	cmp	r3, #100	@ 0x64
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0d8      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	f040 80ce 	bne.w	8005170 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a08      	ldr	r2, [pc, #32]	@ (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe0:	f7fc fd9a 	bl	8001b18 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe6:	e00b      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fe8:	f7fc fd96 	bl	8001b18 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b64      	cmp	r3, #100	@ 0x64
 8004ff4:	d904      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0bb      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005000:	4b5e      	ldr	r3, [pc, #376]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800500c:	d0ec      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502a:	2b00      	cmp	r3, #0
 800502c:	d02e      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d12a      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005036:	4b51      	ldr	r3, [pc, #324]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503c:	0c1b      	lsrs	r3, r3, #16
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005044:	4b4d      	ldr	r3, [pc, #308]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	0f1b      	lsrs	r3, r3, #28
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	019a      	lsls	r2, r3, #6
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	431a      	orrs	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	071b      	lsls	r3, r3, #28
 800506a:	4944      	ldr	r1, [pc, #272]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005072:	4b42      	ldr	r3, [pc, #264]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005078:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	493d      	ldr	r1, [pc, #244]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d022      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800509c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050a0:	d11d      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050a2:	4b36      	ldr	r3, [pc, #216]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a8:	0e1b      	lsrs	r3, r3, #24
 80050aa:	f003 030f 	and.w	r3, r3, #15
 80050ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b0:	4b32      	ldr	r3, [pc, #200]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	0f1b      	lsrs	r3, r3, #28
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	019a      	lsls	r2, r3, #6
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	041b      	lsls	r3, r3, #16
 80050ca:	431a      	orrs	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	061b      	lsls	r3, r3, #24
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	071b      	lsls	r3, r3, #28
 80050d6:	4929      	ldr	r1, [pc, #164]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d028      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ea:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	0e1b      	lsrs	r3, r3, #24
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fe:	0c1b      	lsrs	r3, r3, #16
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	019a      	lsls	r2, r3, #6
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	071b      	lsls	r3, r3, #28
 800511e:	4917      	ldr	r1, [pc, #92]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800512c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	4911      	ldr	r1, [pc, #68]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800513c:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0e      	ldr	r2, [pc, #56]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fc fce6 	bl	8001b18 <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005150:	f7fc fce2 	bl	8001b18 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	@ 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e007      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800516a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800516e:	d1ef      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e049      	b.n	8005226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f841 	bl	800522e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fa00 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e054      	b.n	8005306 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a26      	ldr	r2, [pc, #152]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005286:	d01d      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	@ (8005318 <HAL_TIM_Base_Start_IT+0xd4>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_TIM_Base_Start_IT+0xd8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <HAL_TIM_Base_Start_IT+0xdc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_TIM_Base_Start_IT+0xe0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <HAL_TIM_Base_Start_IT+0xe4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIM_Base_Start_IT+0x80>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_TIM_Base_Start_IT+0xe8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d115      	bne.n	80052f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	4b19      	ldr	r3, [pc, #100]	@ (8005330 <HAL_TIM_Base_Start_IT+0xec>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b06      	cmp	r3, #6
 80052d4:	d015      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052dc:	d011      	beq.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ee:	e008      	b.n	8005302 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e000      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40010000 	.word	0x40010000
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800
 8005320:	40000c00 	.word	0x40000c00
 8005324:	40010400 	.word	0x40010400
 8005328:	40014000 	.word	0x40014000
 800532c:	40001800 	.word	0x40001800
 8005330:	00010007 	.word	0x00010007

08005334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	d122      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d11b      	bne.n	8005390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f905 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8f7 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f908 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b04      	cmp	r3, #4
 800539c:	d122      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d11b      	bne.n	80053e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0204 	mvn.w	r2, #4
 80053b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2202      	movs	r2, #2
 80053ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8db 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80053d0:	e005      	b.n	80053de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8cd 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f8de 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0208 	mvn.w	r2, #8
 8005408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2204      	movs	r2, #4
 800540e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8b1 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8a3 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8b4 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b10      	cmp	r3, #16
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0210 	mvn.w	r2, #16
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2208      	movs	r2, #8
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f887 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f879 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f88a 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0201 	mvn.w	r2, #1
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fe0e 	bl	80010d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c2:	2b80      	cmp	r3, #128	@ 0x80
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d0:	2b80      	cmp	r3, #128	@ 0x80
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f91a 	bl	8005718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f90d 	bl	800572c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551c:	2b40      	cmp	r3, #64	@ 0x40
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552a:	2b40      	cmp	r3, #64	@ 0x40
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f838 	bl	80055ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0220 	mvn.w	r2, #32
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8cd 	bl	8005704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a40      	ldr	r2, [pc, #256]	@ (80056d8 <TIM_Base_SetConfig+0x114>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3d      	ldr	r2, [pc, #244]	@ (80056dc <TIM_Base_SetConfig+0x118>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3c      	ldr	r2, [pc, #240]	@ (80056e0 <TIM_Base_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3b      	ldr	r2, [pc, #236]	@ (80056e4 <TIM_Base_SetConfig+0x120>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3a      	ldr	r2, [pc, #232]	@ (80056e8 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <TIM_Base_SetConfig+0x114>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005624:	d027      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2c      	ldr	r2, [pc, #176]	@ (80056dc <TIM_Base_SetConfig+0x118>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d023      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2b      	ldr	r2, [pc, #172]	@ (80056e0 <TIM_Base_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2a      	ldr	r2, [pc, #168]	@ (80056e4 <TIM_Base_SetConfig+0x120>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a29      	ldr	r2, [pc, #164]	@ (80056e8 <TIM_Base_SetConfig+0x124>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d017      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a28      	ldr	r2, [pc, #160]	@ (80056ec <TIM_Base_SetConfig+0x128>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a27      	ldr	r2, [pc, #156]	@ (80056f0 <TIM_Base_SetConfig+0x12c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a26      	ldr	r2, [pc, #152]	@ (80056f4 <TIM_Base_SetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a25      	ldr	r2, [pc, #148]	@ (80056f8 <TIM_Base_SetConfig+0x134>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a24      	ldr	r2, [pc, #144]	@ (80056fc <TIM_Base_SetConfig+0x138>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a23      	ldr	r2, [pc, #140]	@ (8005700 <TIM_Base_SetConfig+0x13c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d108      	bne.n	8005688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <TIM_Base_SetConfig+0x114>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0c      	ldr	r2, [pc, #48]	@ (80056e8 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800
 80056f8:	40001800 	.word	0x40001800
 80056fc:	40001c00 	.word	0x40001c00
 8005700:	40002000 	.word	0x40002000

08005704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e040      	b.n	80057d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fb fcf6 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2224      	movs	r2, #36	@ 0x24
 800576c:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f8c0 	bl	8005904 <UART_SetConfig>
 8005784:	4603      	mov	r3, r0
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e022      	b.n	80057d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb18 	bl	8005dcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689a      	ldr	r2, [r3, #8]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb9f 	bl	8005f10 <UART_CheckIdleState>
 80057d2:	4603      	mov	r3, r0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	@ 0x28
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	f040 8081 	bne.w	80058f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_UART_Transmit+0x26>
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e079      	b.n	80058fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UART_Transmit+0x38>
 8005810:	2302      	movs	r3, #2
 8005812:	e072      	b.n	80058fa <HAL_UART_Transmit+0x11e>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2221      	movs	r2, #33	@ 0x21
 8005828:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800582a:	f7fc f975 	bl	8001b18 <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	88fa      	ldrh	r2, [r7, #6]
 800583c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005848:	d108      	bne.n	800585c <HAL_UART_Transmit+0x80>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	e003      	b.n	8005864 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 800586c:	e02c      	b.n	80058c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	2180      	movs	r1, #128	@ 0x80
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 fb92 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e038      	b.n	80058fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800589c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	3302      	adds	r3, #2
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e007      	b.n	80058b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	781a      	ldrb	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1cc      	bne.n	800586e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	2140      	movs	r1, #64	@ 0x40
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 fb5f 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e005      	b.n	80058fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69db      	ldr	r3, [r3, #28]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4ba6      	ldr	r3, [pc, #664]	@ (8005bc8 <UART_SetConfig+0x2c4>)
 8005930:	4013      	ands	r3, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6812      	ldr	r2, [r2, #0]
 8005936:	6979      	ldr	r1, [r7, #20]
 8005938:	430b      	orrs	r3, r1
 800593a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a94      	ldr	r2, [pc, #592]	@ (8005bcc <UART_SetConfig+0x2c8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d120      	bne.n	80059c2 <UART_SetConfig+0xbe>
 8005980:	4b93      	ldr	r3, [pc, #588]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d816      	bhi.n	80059bc <UART_SetConfig+0xb8>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <UART_SetConfig+0x90>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059b1 	.word	0x080059b1
 800599c:	080059ab 	.word	0x080059ab
 80059a0:	080059b7 	.word	0x080059b7
 80059a4:	2301      	movs	r3, #1
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e150      	b.n	8005c4c <UART_SetConfig+0x348>
 80059aa:	2302      	movs	r3, #2
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e14d      	b.n	8005c4c <UART_SetConfig+0x348>
 80059b0:	2304      	movs	r3, #4
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e14a      	b.n	8005c4c <UART_SetConfig+0x348>
 80059b6:	2308      	movs	r3, #8
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e147      	b.n	8005c4c <UART_SetConfig+0x348>
 80059bc:	2310      	movs	r3, #16
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	e144      	b.n	8005c4c <UART_SetConfig+0x348>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a83      	ldr	r2, [pc, #524]	@ (8005bd4 <UART_SetConfig+0x2d0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d132      	bne.n	8005a32 <UART_SetConfig+0x12e>
 80059cc:	4b80      	ldr	r3, [pc, #512]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b0c      	cmp	r3, #12
 80059d8:	d828      	bhi.n	8005a2c <UART_SetConfig+0x128>
 80059da:	a201      	add	r2, pc, #4	@ (adr r2, 80059e0 <UART_SetConfig+0xdc>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a15 	.word	0x08005a15
 80059e4:	08005a2d 	.word	0x08005a2d
 80059e8:	08005a2d 	.word	0x08005a2d
 80059ec:	08005a2d 	.word	0x08005a2d
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a2d 	.word	0x08005a2d
 80059f8:	08005a2d 	.word	0x08005a2d
 80059fc:	08005a2d 	.word	0x08005a2d
 8005a00:	08005a1b 	.word	0x08005a1b
 8005a04:	08005a2d 	.word	0x08005a2d
 8005a08:	08005a2d 	.word	0x08005a2d
 8005a0c:	08005a2d 	.word	0x08005a2d
 8005a10:	08005a27 	.word	0x08005a27
 8005a14:	2300      	movs	r3, #0
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e118      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e115      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a20:	2304      	movs	r3, #4
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e112      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a26:	2308      	movs	r3, #8
 8005a28:	77fb      	strb	r3, [r7, #31]
 8005a2a:	e10f      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a2c:	2310      	movs	r3, #16
 8005a2e:	77fb      	strb	r3, [r7, #31]
 8005a30:	e10c      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a68      	ldr	r2, [pc, #416]	@ (8005bd8 <UART_SetConfig+0x2d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d120      	bne.n	8005a7e <UART_SetConfig+0x17a>
 8005a3c:	4b64      	ldr	r3, [pc, #400]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a46:	2b30      	cmp	r3, #48	@ 0x30
 8005a48:	d013      	beq.n	8005a72 <UART_SetConfig+0x16e>
 8005a4a:	2b30      	cmp	r3, #48	@ 0x30
 8005a4c:	d814      	bhi.n	8005a78 <UART_SetConfig+0x174>
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d009      	beq.n	8005a66 <UART_SetConfig+0x162>
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d810      	bhi.n	8005a78 <UART_SetConfig+0x174>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <UART_SetConfig+0x15c>
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d006      	beq.n	8005a6c <UART_SetConfig+0x168>
 8005a5e:	e00b      	b.n	8005a78 <UART_SetConfig+0x174>
 8005a60:	2300      	movs	r3, #0
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e0f2      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a66:	2302      	movs	r3, #2
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e0ef      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e0ec      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a72:	2308      	movs	r3, #8
 8005a74:	77fb      	strb	r3, [r7, #31]
 8005a76:	e0e9      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e0e6      	b.n	8005c4c <UART_SetConfig+0x348>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a56      	ldr	r2, [pc, #344]	@ (8005bdc <UART_SetConfig+0x2d8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d120      	bne.n	8005aca <UART_SetConfig+0x1c6>
 8005a88:	4b51      	ldr	r3, [pc, #324]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a94:	d013      	beq.n	8005abe <UART_SetConfig+0x1ba>
 8005a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a98:	d814      	bhi.n	8005ac4 <UART_SetConfig+0x1c0>
 8005a9a:	2b80      	cmp	r3, #128	@ 0x80
 8005a9c:	d009      	beq.n	8005ab2 <UART_SetConfig+0x1ae>
 8005a9e:	2b80      	cmp	r3, #128	@ 0x80
 8005aa0:	d810      	bhi.n	8005ac4 <UART_SetConfig+0x1c0>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <UART_SetConfig+0x1a8>
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d006      	beq.n	8005ab8 <UART_SetConfig+0x1b4>
 8005aaa:	e00b      	b.n	8005ac4 <UART_SetConfig+0x1c0>
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e0cc      	b.n	8005c4c <UART_SetConfig+0x348>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	77fb      	strb	r3, [r7, #31]
 8005ab6:	e0c9      	b.n	8005c4c <UART_SetConfig+0x348>
 8005ab8:	2304      	movs	r3, #4
 8005aba:	77fb      	strb	r3, [r7, #31]
 8005abc:	e0c6      	b.n	8005c4c <UART_SetConfig+0x348>
 8005abe:	2308      	movs	r3, #8
 8005ac0:	77fb      	strb	r3, [r7, #31]
 8005ac2:	e0c3      	b.n	8005c4c <UART_SetConfig+0x348>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e0c0      	b.n	8005c4c <UART_SetConfig+0x348>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a44      	ldr	r2, [pc, #272]	@ (8005be0 <UART_SetConfig+0x2dc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d125      	bne.n	8005b20 <UART_SetConfig+0x21c>
 8005ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ade:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae2:	d017      	beq.n	8005b14 <UART_SetConfig+0x210>
 8005ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae8:	d817      	bhi.n	8005b1a <UART_SetConfig+0x216>
 8005aea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aee:	d00b      	beq.n	8005b08 <UART_SetConfig+0x204>
 8005af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af4:	d811      	bhi.n	8005b1a <UART_SetConfig+0x216>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <UART_SetConfig+0x1fe>
 8005afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005afe:	d006      	beq.n	8005b0e <UART_SetConfig+0x20a>
 8005b00:	e00b      	b.n	8005b1a <UART_SetConfig+0x216>
 8005b02:	2300      	movs	r3, #0
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e0a1      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e09e      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b0e:	2304      	movs	r3, #4
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e09b      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b14:	2308      	movs	r3, #8
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e098      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b1a:	2310      	movs	r3, #16
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e095      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2f      	ldr	r2, [pc, #188]	@ (8005be4 <UART_SetConfig+0x2e0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d125      	bne.n	8005b76 <UART_SetConfig+0x272>
 8005b2a:	4b29      	ldr	r3, [pc, #164]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b38:	d017      	beq.n	8005b6a <UART_SetConfig+0x266>
 8005b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b3e:	d817      	bhi.n	8005b70 <UART_SetConfig+0x26c>
 8005b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b44:	d00b      	beq.n	8005b5e <UART_SetConfig+0x25a>
 8005b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b4a:	d811      	bhi.n	8005b70 <UART_SetConfig+0x26c>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <UART_SetConfig+0x254>
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b54:	d006      	beq.n	8005b64 <UART_SetConfig+0x260>
 8005b56:	e00b      	b.n	8005b70 <UART_SetConfig+0x26c>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e076      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e073      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b64:	2304      	movs	r3, #4
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e070      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e06d      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b70:	2310      	movs	r3, #16
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e06a      	b.n	8005c4c <UART_SetConfig+0x348>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005be8 <UART_SetConfig+0x2e4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d138      	bne.n	8005bf2 <UART_SetConfig+0x2ee>
 8005b80:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <UART_SetConfig+0x2cc>)
 8005b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005b8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b8e:	d017      	beq.n	8005bc0 <UART_SetConfig+0x2bc>
 8005b90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b94:	d82a      	bhi.n	8005bec <UART_SetConfig+0x2e8>
 8005b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b9a:	d00b      	beq.n	8005bb4 <UART_SetConfig+0x2b0>
 8005b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba0:	d824      	bhi.n	8005bec <UART_SetConfig+0x2e8>
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <UART_SetConfig+0x2aa>
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005baa:	d006      	beq.n	8005bba <UART_SetConfig+0x2b6>
 8005bac:	e01e      	b.n	8005bec <UART_SetConfig+0x2e8>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e04b      	b.n	8005c4c <UART_SetConfig+0x348>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e048      	b.n	8005c4c <UART_SetConfig+0x348>
 8005bba:	2304      	movs	r3, #4
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e045      	b.n	8005c4c <UART_SetConfig+0x348>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e042      	b.n	8005c4c <UART_SetConfig+0x348>
 8005bc6:	bf00      	nop
 8005bc8:	efff69f3 	.word	0xefff69f3
 8005bcc:	40011000 	.word	0x40011000
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	40004400 	.word	0x40004400
 8005bd8:	40004800 	.word	0x40004800
 8005bdc:	40004c00 	.word	0x40004c00
 8005be0:	40005000 	.word	0x40005000
 8005be4:	40011400 	.word	0x40011400
 8005be8:	40007800 	.word	0x40007800
 8005bec:	2310      	movs	r3, #16
 8005bee:	77fb      	strb	r3, [r7, #31]
 8005bf0:	e02c      	b.n	8005c4c <UART_SetConfig+0x348>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a72      	ldr	r2, [pc, #456]	@ (8005dc0 <UART_SetConfig+0x4bc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d125      	bne.n	8005c48 <UART_SetConfig+0x344>
 8005bfc:	4b71      	ldr	r3, [pc, #452]	@ (8005dc4 <UART_SetConfig+0x4c0>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005c06:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c0a:	d017      	beq.n	8005c3c <UART_SetConfig+0x338>
 8005c0c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005c10:	d817      	bhi.n	8005c42 <UART_SetConfig+0x33e>
 8005c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c16:	d00b      	beq.n	8005c30 <UART_SetConfig+0x32c>
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c1c:	d811      	bhi.n	8005c42 <UART_SetConfig+0x33e>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <UART_SetConfig+0x326>
 8005c22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c26:	d006      	beq.n	8005c36 <UART_SetConfig+0x332>
 8005c28:	e00b      	b.n	8005c42 <UART_SetConfig+0x33e>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e00d      	b.n	8005c4c <UART_SetConfig+0x348>
 8005c30:	2302      	movs	r3, #2
 8005c32:	77fb      	strb	r3, [r7, #31]
 8005c34:	e00a      	b.n	8005c4c <UART_SetConfig+0x348>
 8005c36:	2304      	movs	r3, #4
 8005c38:	77fb      	strb	r3, [r7, #31]
 8005c3a:	e007      	b.n	8005c4c <UART_SetConfig+0x348>
 8005c3c:	2308      	movs	r3, #8
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e004      	b.n	8005c4c <UART_SetConfig+0x348>
 8005c42:	2310      	movs	r3, #16
 8005c44:	77fb      	strb	r3, [r7, #31]
 8005c46:	e001      	b.n	8005c4c <UART_SetConfig+0x348>
 8005c48:	2310      	movs	r3, #16
 8005c4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c54:	d15b      	bne.n	8005d0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c56:	7ffb      	ldrb	r3, [r7, #31]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d828      	bhi.n	8005cae <UART_SetConfig+0x3aa>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0x360>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	08005caf 	.word	0x08005caf
 8005c74:	08005c9f 	.word	0x08005c9f
 8005c78:	08005caf 	.word	0x08005caf
 8005c7c:	08005caf 	.word	0x08005caf
 8005c80:	08005caf 	.word	0x08005caf
 8005c84:	08005ca7 	.word	0x08005ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c88:	f7fe fdf8 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8005c8c:	61b8      	str	r0, [r7, #24]
        break;
 8005c8e:	e013      	b.n	8005cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fe fe08 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005c94:	61b8      	str	r0, [r7, #24]
        break;
 8005c96:	e00f      	b.n	8005cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc8 <UART_SetConfig+0x4c4>)
 8005c9a:	61bb      	str	r3, [r7, #24]
        break;
 8005c9c:	e00c      	b.n	8005cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c9e:	f7fe fcdb 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8005ca2:	61b8      	str	r0, [r7, #24]
        break;
 8005ca4:	e008      	b.n	8005cb8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005caa:	61bb      	str	r3, [r7, #24]
        break;
 8005cac:	e004      	b.n	8005cb8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d074      	beq.n	8005da8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	005a      	lsls	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	441a      	add	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	d916      	bls.n	8005d08 <UART_SetConfig+0x404>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce0:	d212      	bcs.n	8005d08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f023 030f 	bic.w	r3, r3, #15
 8005cea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	085b      	lsrs	r3, r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	89fb      	ldrh	r3, [r7, #14]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	89fa      	ldrh	r2, [r7, #14]
 8005d04:	60da      	str	r2, [r3, #12]
 8005d06:	e04f      	b.n	8005da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	77bb      	strb	r3, [r7, #30]
 8005d0c:	e04c      	b.n	8005da8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d828      	bhi.n	8005d66 <UART_SetConfig+0x462>
 8005d14:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <UART_SetConfig+0x418>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d41 	.word	0x08005d41
 8005d20:	08005d49 	.word	0x08005d49
 8005d24:	08005d51 	.word	0x08005d51
 8005d28:	08005d67 	.word	0x08005d67
 8005d2c:	08005d57 	.word	0x08005d57
 8005d30:	08005d67 	.word	0x08005d67
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d67 	.word	0x08005d67
 8005d3c:	08005d5f 	.word	0x08005d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d40:	f7fe fd9c 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8005d44:	61b8      	str	r0, [r7, #24]
        break;
 8005d46:	e013      	b.n	8005d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fdac 	bl	80048a4 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	61b8      	str	r0, [r7, #24]
        break;
 8005d4e:	e00f      	b.n	8005d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d50:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc8 <UART_SetConfig+0x4c4>)
 8005d52:	61bb      	str	r3, [r7, #24]
        break;
 8005d54:	e00c      	b.n	8005d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d56:	f7fe fc7f 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8005d5a:	61b8      	str	r0, [r7, #24]
        break;
 8005d5c:	e008      	b.n	8005d70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d62:	61bb      	str	r3, [r7, #24]
        break;
 8005d64:	e004      	b.n	8005d70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d6e:	bf00      	nop
    }

    if (pclk != 0U)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d018      	beq.n	8005da8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	085a      	lsrs	r2, r3, #1
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	441a      	add	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d909      	bls.n	8005da4 <UART_SetConfig+0x4a0>
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d96:	d205      	bcs.n	8005da4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e001      	b.n	8005da8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8005db4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	40007c00 	.word	0x40007c00
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	00f42400 	.word	0x00f42400

08005dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eca:	d10a      	bne.n	8005ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]
  }
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f20:	f7fb fdfa 	bl	8001b18 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d10e      	bne.n	8005f52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f82d 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e023      	b.n	8005f9a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d10e      	bne.n	8005f7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f817 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e00d      	b.n	8005f9a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b09c      	sub	sp, #112	@ 0x70
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	e0a5      	b.n	8006100 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	f000 80a1 	beq.w	8006100 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fb fdab 	bl	8001b18 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d13e      	bne.n	8006052 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ff4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ff8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e6      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	663b      	str	r3, [r7, #96]	@ 0x60
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006026:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006028:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800602c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2220      	movs	r2, #32
 8006044:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e067      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d04f      	beq.n	8006100 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800606e:	d147      	bne.n	8006100 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006078:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800608e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006098:	637b      	str	r3, [r7, #52]	@ 0x34
 800609a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800609e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060a0:	e841 2300 	strex	r3, r2, [r1]
 80060a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e6      	bne.n	800607a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	613b      	str	r3, [r7, #16]
   return(result);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f023 0301 	bic.w	r3, r3, #1
 80060c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060cc:	623a      	str	r2, [r7, #32]
 80060ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69f9      	ldr	r1, [r7, #28]
 80060d2:	6a3a      	ldr	r2, [r7, #32]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e5      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2220      	movs	r2, #32
 80060e4:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e010      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69da      	ldr	r2, [r3, #28]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	429a      	cmp	r2, r3
 800611c:	f43f af4a 	beq.w	8005fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3770      	adds	r7, #112	@ 0x70
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800612c:	b084      	sub	sp, #16
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	f107 001c 	add.w	r0, r7, #28
 800613a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2b01      	cmp	r3, #1
 8006142:	d120      	bne.n	8006186 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68da      	ldr	r2, [r3, #12]
 8006154:	4b20      	ldr	r3, [pc, #128]	@ (80061d8 <USB_CoreInit+0xac>)
 8006156:	4013      	ands	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fa92 	bl	80066a4 <USB_CoreReset>
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	e010      	b.n	80061a8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa86 	bl	80066a4 <USB_CoreReset>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d10b      	bne.n	80061c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f043 0206 	orr.w	r2, r3, #6
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d2:	b004      	add	sp, #16
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	ffbdffbf 	.word	0xffbdffbf

080061dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f023 0201 	bic.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d115      	bne.n	800624c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800622c:	2001      	movs	r0, #1
 800622e:	f7fb fc7f 	bl	8001b30 <HAL_Delay>
      ms++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3301      	adds	r3, #1
 8006236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa25 	bl	8006688 <USB_GetMode>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d01e      	beq.n	8006282 <USB_SetCurrentMode+0x84>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b31      	cmp	r3, #49	@ 0x31
 8006248:	d9f0      	bls.n	800622c <USB_SetCurrentMode+0x2e>
 800624a:	e01a      	b.n	8006282 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d115      	bne.n	800627e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800625e:	2001      	movs	r0, #1
 8006260:	f7fb fc66 	bl	8001b30 <HAL_Delay>
      ms++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa0c 	bl	8006688 <USB_GetMode>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <USB_SetCurrentMode+0x84>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b31      	cmp	r3, #49	@ 0x31
 800627a:	d9f0      	bls.n	800625e <USB_SetCurrentMode+0x60>
 800627c:	e001      	b.n	8006282 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e005      	b.n	800628e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b32      	cmp	r3, #50	@ 0x32
 8006286:	d101      	bne.n	800628c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006298:	b084      	sub	sp, #16
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e009      	b.n	80062cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3340      	adds	r3, #64	@ 0x40
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	3301      	adds	r3, #1
 80062ca:	613b      	str	r3, [r7, #16]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b0e      	cmp	r3, #14
 80062d0:	d9f2      	bls.n	80062b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d11c      	bne.n	8006312 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e6:	f043 0302 	orr.w	r3, r3, #2
 80062ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	601a      	str	r2, [r3, #0]
 8006310:	e005      	b.n	800631e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006324:	461a      	mov	r2, r3
 8006326:	2300      	movs	r3, #0
 8006328:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006330:	4619      	mov	r1, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006338:	461a      	mov	r2, r3
 800633a:	680b      	ldr	r3, [r1, #0]
 800633c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800633e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006340:	2b01      	cmp	r3, #1
 8006342:	d10c      	bne.n	800635e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800634a:	2100      	movs	r1, #0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f961 	bl	8006614 <USB_SetDevSpeed>
 8006352:	e008      	b.n	8006366 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006354:	2101      	movs	r1, #1
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f95c 	bl	8006614 <USB_SetDevSpeed>
 800635c:	e003      	b.n	8006366 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800635e:	2103      	movs	r1, #3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f957 	bl	8006614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006366:	2110      	movs	r1, #16
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f8f3 	bl	8006554 <USB_FlushTxFifo>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f91d 	bl	80065b8 <USB_FlushRxFifo>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639a:	461a      	mov	r2, r3
 800639c:	2300      	movs	r3, #0
 800639e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a6:	461a      	mov	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ac:	2300      	movs	r3, #0
 80063ae:	613b      	str	r3, [r7, #16]
 80063b0:	e043      	b.n	800643a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063c8:	d118      	bne.n	80063fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	461a      	mov	r2, r3
 80063de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	e013      	b.n	800640e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063f2:	461a      	mov	r2, r3
 80063f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e008      	b.n	800640e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006408:	461a      	mov	r2, r3
 800640a:	2300      	movs	r3, #0
 800640c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642c:	461a      	mov	r2, r3
 800642e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006432:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3301      	adds	r3, #1
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	429a      	cmp	r2, r3
 8006440:	d3b7      	bcc.n	80063b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006442:	2300      	movs	r3, #0
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	e043      	b.n	80064d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800645a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800645e:	d118      	bne.n	8006492 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	461a      	mov	r2, r3
 8006474:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e013      	b.n	80064a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006488:	461a      	mov	r2, r3
 800648a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e008      	b.n	80064a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649e:	461a      	mov	r2, r3
 80064a0:	2300      	movs	r3, #0
 80064a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b0:	461a      	mov	r2, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c2:	461a      	mov	r2, r3
 80064c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d3b7      	bcc.n	8006448 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80064f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f043 0210 	orr.w	r2, r3, #16
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699a      	ldr	r2, [r3, #24]
 8006510:	4b0e      	ldr	r3, [pc, #56]	@ (800654c <USB_DevInit+0x2b4>)
 8006512:	4313      	orrs	r3, r2
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f043 0208 	orr.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800652a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699a      	ldr	r2, [r3, #24]
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <USB_DevInit+0x2b8>)
 8006536:	4313      	orrs	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006548:	b004      	add	sp, #16
 800654a:	4770      	bx	lr
 800654c:	803c3800 	.word	0x803c3800
 8006550:	40000004 	.word	0x40000004

08006554 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3301      	adds	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <USB_FlushTxFifo+0x60>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e01a      	b.n	80065a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	daf3      	bge.n	8006562 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	019b      	lsls	r3, r3, #6
 8006582:	f043 0220 	orr.w	r2, r3, #32
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	4a08      	ldr	r2, [pc, #32]	@ (80065b4 <USB_FlushTxFifo+0x60>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d901      	bls.n	800659a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e006      	b.n	80065a8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0320 	and.w	r3, r3, #32
 80065a2:	2b20      	cmp	r3, #32
 80065a4:	d0f1      	beq.n	800658a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	00030d40 	.word	0x00030d40

080065b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
 80065ca:	4a11      	ldr	r2, [pc, #68]	@ (8006610 <USB_FlushRxFifo+0x58>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e017      	b.n	8006604 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	daf3      	bge.n	80065c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2210      	movs	r2, #16
 80065e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	4a08      	ldr	r2, [pc, #32]	@ (8006610 <USB_FlushRxFifo+0x58>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e006      	b.n	8006604 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0310 	and.w	r3, r3, #16
 80065fe:	2b10      	cmp	r3, #16
 8006600:	d0f1      	beq.n	80065e6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	00030d40 	.word	0x00030d40

08006614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006634:	4313      	orrs	r3, r2
 8006636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006674:	f043 0302 	orr.w	r3, r3, #2
 8006678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	f003 0301 	and.w	r3, r3, #1
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	4a13      	ldr	r2, [pc, #76]	@ (8006704 <USB_CoreReset+0x60>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d901      	bls.n	80066c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e01a      	b.n	80066f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	daf3      	bge.n	80066b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f043 0201 	orr.w	r2, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	4a09      	ldr	r2, [pc, #36]	@ (8006704 <USB_CoreReset+0x60>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e006      	b.n	80066f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d0f1      	beq.n	80066d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	00030d40 	.word	0x00030d40

08006708 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800670e:	4ba0      	ldr	r3, [pc, #640]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006710:	22c0      	movs	r2, #192	@ 0xc0
 8006712:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006714:	4b9e      	ldr	r3, [pc, #632]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006716:	22a8      	movs	r2, #168	@ 0xa8
 8006718:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800671a:	4b9d      	ldr	r3, [pc, #628]	@ (8006990 <MX_LWIP_Init+0x288>)
 800671c:	2200      	movs	r2, #0
 800671e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 28;
 8006720:	4b9b      	ldr	r3, [pc, #620]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006722:	221c      	movs	r2, #28
 8006724:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006726:	4b9b      	ldr	r3, [pc, #620]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800672c:	4b99      	ldr	r3, [pc, #612]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800672e:	22ff      	movs	r2, #255	@ 0xff
 8006730:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006732:	4b98      	ldr	r3, [pc, #608]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006738:	4b96      	ldr	r3, [pc, #600]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800673a:	2200      	movs	r2, #0
 800673c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800673e:	4b96      	ldr	r3, [pc, #600]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006744:	4b94      	ldr	r3, [pc, #592]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006746:	2200      	movs	r2, #0
 8006748:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800674a:	4b93      	ldr	r3, [pc, #588]	@ (8006998 <MX_LWIP_Init+0x290>)
 800674c:	2200      	movs	r2, #0
 800674e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006750:	4b91      	ldr	r3, [pc, #580]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006752:	2200      	movs	r2, #0
 8006754:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006756:	2100      	movs	r1, #0
 8006758:	2000      	movs	r0, #0
 800675a:	f007 fb83 	bl	800de64 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800675e:	4b8c      	ldr	r3, [pc, #560]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	061a      	lsls	r2, r3, #24
 8006764:	4b8a      	ldr	r3, [pc, #552]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	431a      	orrs	r2, r3
 800676c:	4b88      	ldr	r3, [pc, #544]	@ (8006990 <MX_LWIP_Init+0x288>)
 800676e:	789b      	ldrb	r3, [r3, #2]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	4313      	orrs	r3, r2
 8006774:	4a86      	ldr	r2, [pc, #536]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006776:	78d2      	ldrb	r2, [r2, #3]
 8006778:	4313      	orrs	r3, r2
 800677a:	061a      	lsls	r2, r3, #24
 800677c:	4b84      	ldr	r3, [pc, #528]	@ (8006990 <MX_LWIP_Init+0x288>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	0619      	lsls	r1, r3, #24
 8006782:	4b83      	ldr	r3, [pc, #524]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	4319      	orrs	r1, r3
 800678a:	4b81      	ldr	r3, [pc, #516]	@ (8006990 <MX_LWIP_Init+0x288>)
 800678c:	789b      	ldrb	r3, [r3, #2]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	430b      	orrs	r3, r1
 8006792:	497f      	ldr	r1, [pc, #508]	@ (8006990 <MX_LWIP_Init+0x288>)
 8006794:	78c9      	ldrb	r1, [r1, #3]
 8006796:	430b      	orrs	r3, r1
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800679e:	431a      	orrs	r2, r3
 80067a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	0619      	lsls	r1, r3, #24
 80067a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	4319      	orrs	r1, r3
 80067ae:	4b78      	ldr	r3, [pc, #480]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067b0:	789b      	ldrb	r3, [r3, #2]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	430b      	orrs	r3, r1
 80067b6:	4976      	ldr	r1, [pc, #472]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067b8:	78c9      	ldrb	r1, [r1, #3]
 80067ba:	430b      	orrs	r3, r1
 80067bc:	0a1b      	lsrs	r3, r3, #8
 80067be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80067c2:	431a      	orrs	r2, r3
 80067c4:	4b72      	ldr	r3, [pc, #456]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	0619      	lsls	r1, r3, #24
 80067ca:	4b71      	ldr	r3, [pc, #452]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	041b      	lsls	r3, r3, #16
 80067d0:	4319      	orrs	r1, r3
 80067d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067d4:	789b      	ldrb	r3, [r3, #2]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	430b      	orrs	r3, r1
 80067da:	496d      	ldr	r1, [pc, #436]	@ (8006990 <MX_LWIP_Init+0x288>)
 80067dc:	78c9      	ldrb	r1, [r1, #3]
 80067de:	430b      	orrs	r3, r1
 80067e0:	0e1b      	lsrs	r3, r3, #24
 80067e2:	4313      	orrs	r3, r2
 80067e4:	4a6d      	ldr	r2, [pc, #436]	@ (800699c <MX_LWIP_Init+0x294>)
 80067e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80067e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006994 <MX_LWIP_Init+0x28c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	061a      	lsls	r2, r3, #24
 80067ee:	4b69      	ldr	r3, [pc, #420]	@ (8006994 <MX_LWIP_Init+0x28c>)
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	431a      	orrs	r2, r3
 80067f6:	4b67      	ldr	r3, [pc, #412]	@ (8006994 <MX_LWIP_Init+0x28c>)
 80067f8:	789b      	ldrb	r3, [r3, #2]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	4313      	orrs	r3, r2
 80067fe:	4a65      	ldr	r2, [pc, #404]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006800:	78d2      	ldrb	r2, [r2, #3]
 8006802:	4313      	orrs	r3, r2
 8006804:	061a      	lsls	r2, r3, #24
 8006806:	4b63      	ldr	r3, [pc, #396]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	0619      	lsls	r1, r3, #24
 800680c:	4b61      	ldr	r3, [pc, #388]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	4319      	orrs	r1, r3
 8006814:	4b5f      	ldr	r3, [pc, #380]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006816:	789b      	ldrb	r3, [r3, #2]
 8006818:	021b      	lsls	r3, r3, #8
 800681a:	430b      	orrs	r3, r1
 800681c:	495d      	ldr	r1, [pc, #372]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800681e:	78c9      	ldrb	r1, [r1, #3]
 8006820:	430b      	orrs	r3, r1
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006828:	431a      	orrs	r2, r3
 800682a:	4b5a      	ldr	r3, [pc, #360]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	0619      	lsls	r1, r3, #24
 8006830:	4b58      	ldr	r3, [pc, #352]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006832:	785b      	ldrb	r3, [r3, #1]
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	4319      	orrs	r1, r3
 8006838:	4b56      	ldr	r3, [pc, #344]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	430b      	orrs	r3, r1
 8006840:	4954      	ldr	r1, [pc, #336]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006842:	78c9      	ldrb	r1, [r1, #3]
 8006844:	430b      	orrs	r3, r1
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800684c:	431a      	orrs	r2, r3
 800684e:	4b51      	ldr	r3, [pc, #324]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	0619      	lsls	r1, r3, #24
 8006854:	4b4f      	ldr	r3, [pc, #316]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	041b      	lsls	r3, r3, #16
 800685a:	4319      	orrs	r1, r3
 800685c:	4b4d      	ldr	r3, [pc, #308]	@ (8006994 <MX_LWIP_Init+0x28c>)
 800685e:	789b      	ldrb	r3, [r3, #2]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	430b      	orrs	r3, r1
 8006864:	494b      	ldr	r1, [pc, #300]	@ (8006994 <MX_LWIP_Init+0x28c>)
 8006866:	78c9      	ldrb	r1, [r1, #3]
 8006868:	430b      	orrs	r3, r1
 800686a:	0e1b      	lsrs	r3, r3, #24
 800686c:	4313      	orrs	r3, r2
 800686e:	4a4c      	ldr	r2, [pc, #304]	@ (80069a0 <MX_LWIP_Init+0x298>)
 8006870:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006872:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	061a      	lsls	r2, r3, #24
 8006878:	4b47      	ldr	r3, [pc, #284]	@ (8006998 <MX_LWIP_Init+0x290>)
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	431a      	orrs	r2, r3
 8006880:	4b45      	ldr	r3, [pc, #276]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006882:	789b      	ldrb	r3, [r3, #2]
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	4313      	orrs	r3, r2
 8006888:	4a43      	ldr	r2, [pc, #268]	@ (8006998 <MX_LWIP_Init+0x290>)
 800688a:	78d2      	ldrb	r2, [r2, #3]
 800688c:	4313      	orrs	r3, r2
 800688e:	061a      	lsls	r2, r3, #24
 8006890:	4b41      	ldr	r3, [pc, #260]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	0619      	lsls	r1, r3, #24
 8006896:	4b40      	ldr	r3, [pc, #256]	@ (8006998 <MX_LWIP_Init+0x290>)
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	041b      	lsls	r3, r3, #16
 800689c:	4319      	orrs	r1, r3
 800689e:	4b3e      	ldr	r3, [pc, #248]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068a0:	789b      	ldrb	r3, [r3, #2]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	430b      	orrs	r3, r1
 80068a6:	493c      	ldr	r1, [pc, #240]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068a8:	78c9      	ldrb	r1, [r1, #3]
 80068aa:	430b      	orrs	r3, r1
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068b2:	431a      	orrs	r2, r3
 80068b4:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	0619      	lsls	r1, r3, #24
 80068ba:	4b37      	ldr	r3, [pc, #220]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	041b      	lsls	r3, r3, #16
 80068c0:	4319      	orrs	r1, r3
 80068c2:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068c4:	789b      	ldrb	r3, [r3, #2]
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	430b      	orrs	r3, r1
 80068ca:	4933      	ldr	r1, [pc, #204]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068cc:	78c9      	ldrb	r1, [r1, #3]
 80068ce:	430b      	orrs	r3, r1
 80068d0:	0a1b      	lsrs	r3, r3, #8
 80068d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80068d6:	431a      	orrs	r2, r3
 80068d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	0619      	lsls	r1, r3, #24
 80068de:	4b2e      	ldr	r3, [pc, #184]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	041b      	lsls	r3, r3, #16
 80068e4:	4319      	orrs	r1, r3
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068e8:	789b      	ldrb	r3, [r3, #2]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	430b      	orrs	r3, r1
 80068ee:	492a      	ldr	r1, [pc, #168]	@ (8006998 <MX_LWIP_Init+0x290>)
 80068f0:	78c9      	ldrb	r1, [r1, #3]
 80068f2:	430b      	orrs	r3, r1
 80068f4:	0e1b      	lsrs	r3, r3, #24
 80068f6:	4313      	orrs	r3, r2
 80068f8:	4a2a      	ldr	r2, [pc, #168]	@ (80069a4 <MX_LWIP_Init+0x29c>)
 80068fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80068fc:	4b2a      	ldr	r3, [pc, #168]	@ (80069a8 <MX_LWIP_Init+0x2a0>)
 80068fe:	9302      	str	r3, [sp, #8]
 8006900:	4b2a      	ldr	r3, [pc, #168]	@ (80069ac <MX_LWIP_Init+0x2a4>)
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	2300      	movs	r3, #0
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4b26      	ldr	r3, [pc, #152]	@ (80069a4 <MX_LWIP_Init+0x29c>)
 800690a:	4a25      	ldr	r2, [pc, #148]	@ (80069a0 <MX_LWIP_Init+0x298>)
 800690c:	4923      	ldr	r1, [pc, #140]	@ (800699c <MX_LWIP_Init+0x294>)
 800690e:	4828      	ldr	r0, [pc, #160]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 8006910:	f008 f82c 	bl	800e96c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006914:	4826      	ldr	r0, [pc, #152]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 8006916:	f008 f9db 	bl	800ecd0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800691a:	4b25      	ldr	r3, [pc, #148]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 800691c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006920:	089b      	lsrs	r3, r3, #2
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800692c:	4820      	ldr	r0, [pc, #128]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 800692e:	f008 f9df 	bl	800ecf0 <netif_set_up>
 8006932:	e002      	b.n	800693a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006934:	481e      	ldr	r0, [pc, #120]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 8006936:	f008 fa47 	bl	800edc8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800693a:	491e      	ldr	r1, [pc, #120]	@ (80069b4 <MX_LWIP_Init+0x2ac>)
 800693c:	481c      	ldr	r0, [pc, #112]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 800693e:	f008 fad9 	bl	800eef4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8006942:	2200      	movs	r2, #0
 8006944:	2101      	movs	r1, #1
 8006946:	2001      	movs	r0, #1
 8006948:	f000 ff12 	bl	8007770 <osSemaphoreNew>
 800694c:	4603      	mov	r3, r0
 800694e:	4a1a      	ldr	r2, [pc, #104]	@ (80069b8 <MX_LWIP_Init+0x2b0>)
 8006950:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8006952:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <MX_LWIP_Init+0x2b4>)
 8006954:	4a16      	ldr	r2, [pc, #88]	@ (80069b0 <MX_LWIP_Init+0x2a8>)
 8006956:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8006958:	4b17      	ldr	r3, [pc, #92]	@ (80069b8 <MX_LWIP_Init+0x2b0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a17      	ldr	r2, [pc, #92]	@ (80069bc <MX_LWIP_Init+0x2b4>)
 800695e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006960:	2224      	movs	r2, #36	@ 0x24
 8006962:	2100      	movs	r1, #0
 8006964:	4816      	ldr	r0, [pc, #88]	@ (80069c0 <MX_LWIP_Init+0x2b8>)
 8006966:	f013 f983 	bl	8019c70 <memset>
  attributes.name = "LinkThr";
 800696a:	4b15      	ldr	r3, [pc, #84]	@ (80069c0 <MX_LWIP_Init+0x2b8>)
 800696c:	4a15      	ldr	r2, [pc, #84]	@ (80069c4 <MX_LWIP_Init+0x2bc>)
 800696e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006970:	4b13      	ldr	r3, [pc, #76]	@ (80069c0 <MX_LWIP_Init+0x2b8>)
 8006972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006976:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006978:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <MX_LWIP_Init+0x2b8>)
 800697a:	2210      	movs	r2, #16
 800697c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800697e:	4a10      	ldr	r2, [pc, #64]	@ (80069c0 <MX_LWIP_Init+0x2b8>)
 8006980:	490e      	ldr	r1, [pc, #56]	@ (80069bc <MX_LWIP_Init+0x2b4>)
 8006982:	4811      	ldr	r0, [pc, #68]	@ (80069c8 <MX_LWIP_Init+0x2c0>)
 8006984:	f000 fcd8 	bl	8007338 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006988:	bf00      	nop
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000d90 	.word	0x20000d90
 8006994:	20000d94 	.word	0x20000d94
 8006998:	20000d98 	.word	0x20000d98
 800699c:	20000d84 	.word	0x20000d84
 80069a0:	20000d88 	.word	0x20000d88
 80069a4:	20000d8c 	.word	0x20000d8c
 80069a8:	0800dd75 	.word	0x0800dd75
 80069ac:	08007015 	.word	0x08007015
 80069b0:	20000d50 	.word	0x20000d50
 80069b4:	080070f9 	.word	0x080070f9
 80069b8:	20000d44 	.word	0x20000d44
 80069bc:	20000d48 	.word	0x20000d48
 80069c0:	20000d9c 	.word	0x20000d9c
 80069c4:	0801c138 	.word	0x0801c138
 80069c8:	08007081 	.word	0x08007081

080069cc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b08e      	sub	sp, #56	@ 0x38
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	609a      	str	r2, [r3, #8]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a52      	ldr	r2, [pc, #328]	@ (8006b34 <HAL_ETH_MspInit+0x168>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	f040 809e 	bne.w	8006b2c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80069f0:	4b51      	ldr	r3, [pc, #324]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f4:	4a50      	ldr	r2, [pc, #320]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 80069f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80069fc:	4b4e      	ldr	r3, [pc, #312]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	4b4b      	ldr	r3, [pc, #300]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a14:	4b48      	ldr	r3, [pc, #288]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a1c:	61fb      	str	r3, [r7, #28]
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4b45      	ldr	r3, [pc, #276]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	4a44      	ldr	r2, [pc, #272]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a2c:	4b42      	ldr	r3, [pc, #264]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a38:	4b3f      	ldr	r3, [pc, #252]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3c:	4a3e      	ldr	r2, [pc, #248]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a3e:	f043 0304 	orr.w	r3, r3, #4
 8006a42:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a44:	4b3c      	ldr	r3, [pc, #240]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a50:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	4a38      	ldr	r2, [pc, #224]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a5c:	4b36      	ldr	r3, [pc, #216]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a68:	4b33      	ldr	r3, [pc, #204]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	4a32      	ldr	r2, [pc, #200]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a6e:	f043 0302 	orr.w	r3, r3, #2
 8006a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a74:	4b30      	ldr	r3, [pc, #192]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a80:	4b2d      	ldr	r3, [pc, #180]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a84:	4a2c      	ldr	r2, [pc, #176]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b38 <HAL_ETH_MspInit+0x16c>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006a98:	2332      	movs	r3, #50	@ 0x32
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006aa8:	230b      	movs	r3, #11
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006aac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4822      	ldr	r0, [pc, #136]	@ (8006b3c <HAL_ETH_MspInit+0x170>)
 8006ab4:	f7fc faae 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006ab8:	2386      	movs	r3, #134	@ 0x86
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006abc:	2302      	movs	r3, #2
 8006abe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006ac8:	230b      	movs	r3, #11
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	481b      	ldr	r0, [pc, #108]	@ (8006b40 <HAL_ETH_MspInit+0x174>)
 8006ad4:	f7fc fa9e 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006ad8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006adc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006aea:	230b      	movs	r3, #11
 8006aec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af2:	4619      	mov	r1, r3
 8006af4:	4813      	ldr	r0, [pc, #76]	@ (8006b44 <HAL_ETH_MspInit+0x178>)
 8006af6:	f7fc fa8d 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006afa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b00:	2302      	movs	r3, #2
 8006b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b0c:	230b      	movs	r3, #11
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b14:	4619      	mov	r1, r3
 8006b16:	480c      	ldr	r0, [pc, #48]	@ (8006b48 <HAL_ETH_MspInit+0x17c>)
 8006b18:	f7fc fa7c 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2105      	movs	r1, #5
 8006b20:	203d      	movs	r0, #61	@ 0x3d
 8006b22:	f7fb f8e1 	bl	8001ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006b26:	203d      	movs	r0, #61	@ 0x3d
 8006b28:	f7fb f8fa 	bl	8001d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006b2c:	bf00      	nop
 8006b2e:	3738      	adds	r7, #56	@ 0x38
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40028000 	.word	0x40028000
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40020800 	.word	0x40020800
 8006b40:	40020000 	.word	0x40020000
 8006b44:	40020400 	.word	0x40020400
 8006b48:	40021800 	.word	0x40021800

08006b4c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006b54:	4b04      	ldr	r3, [pc, #16]	@ (8006b68 <HAL_ETH_RxCpltCallback+0x1c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 ff0b 	bl	8007974 <osSemaphoreRelease>
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20003e60 	.word	0x20003e60

08006b6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b090      	sub	sp, #64	@ 0x40
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	63bb      	str	r3, [r7, #56]	@ 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006b78:	4b5d      	ldr	r3, [pc, #372]	@ (8006cf0 <low_level_init+0x184>)
 8006b7a:	4a5e      	ldr	r2, [pc, #376]	@ (8006cf4 <low_level_init+0x188>)
 8006b7c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8006cf0 <low_level_init+0x184>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006b84:	4b5a      	ldr	r3, [pc, #360]	@ (8006cf0 <low_level_init+0x184>)
 8006b86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006b8a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006b8c:	4b58      	ldr	r3, [pc, #352]	@ (8006cf0 <low_level_init+0x184>)
 8006b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b92:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006b94:	4b56      	ldr	r3, [pc, #344]	@ (8006cf0 <low_level_init+0x184>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x22;
 8006b9e:	2322      	movs	r3, #34	@ 0x22
 8006ba0:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xC0;
 8006ba2:	23c0      	movs	r3, #192	@ 0xc0
 8006ba4:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0xA8;
 8006ba6:	23a8      	movs	r3, #168	@ 0xa8
 8006ba8:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006baa:	2300      	movs	r3, #0
 8006bac:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x1C;
 8006bae:	231c      	movs	r3, #28
 8006bb0:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8006bb2:	4a4f      	ldr	r2, [pc, #316]	@ (8006cf0 <low_level_init+0x184>)
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006bba:	4b4d      	ldr	r3, [pc, #308]	@ (8006cf0 <low_level_init+0x184>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <low_level_init+0x184>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006cf0 <low_level_init+0x184>)
 8006bc8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006bcc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006bce:	4848      	ldr	r0, [pc, #288]	@ (8006cf0 <low_level_init+0x184>)
 8006bd0:	f7fb f8b4 	bl	8001d3c <HAL_ETH_Init>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006bda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d108      	bne.n	8006bf4 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006be8:	f043 0304 	orr.w	r3, r3, #4
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	4a40      	ldr	r2, [pc, #256]	@ (8006cf8 <low_level_init+0x18c>)
 8006bf8:	4940      	ldr	r1, [pc, #256]	@ (8006cfc <low_level_init+0x190>)
 8006bfa:	483d      	ldr	r0, [pc, #244]	@ (8006cf0 <low_level_init+0x184>)
 8006bfc:	f7fb fa36 	bl	800206c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006c00:	2304      	movs	r3, #4
 8006c02:	4a3f      	ldr	r2, [pc, #252]	@ (8006d00 <low_level_init+0x194>)
 8006c04:	493f      	ldr	r1, [pc, #252]	@ (8006d04 <low_level_init+0x198>)
 8006c06:	483a      	ldr	r0, [pc, #232]	@ (8006cf0 <low_level_init+0x184>)
 8006c08:	f7fb fa98 	bl	800213c <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2206      	movs	r2, #6
 8006c10:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006c14:	4b36      	ldr	r3, [pc, #216]	@ (8006cf0 <low_level_init+0x184>)
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	781a      	ldrb	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006c20:	4b33      	ldr	r3, [pc, #204]	@ (8006cf0 <low_level_init+0x184>)
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	785a      	ldrb	r2, [r3, #1]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006c2c:	4b30      	ldr	r3, [pc, #192]	@ (8006cf0 <low_level_init+0x184>)
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	789a      	ldrb	r2, [r3, #2]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006c38:	4b2d      	ldr	r3, [pc, #180]	@ (8006cf0 <low_level_init+0x184>)
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	78da      	ldrb	r2, [r3, #3]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006c44:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf0 <low_level_init+0x184>)
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	791a      	ldrb	r2, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006c50:	4b27      	ldr	r3, [pc, #156]	@ (8006cf0 <low_level_init+0x184>)
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	795a      	ldrb	r2, [r3, #5]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006c62:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c6a:	f043 030a 	orr.w	r3, r3, #10
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2101      	movs	r1, #1
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	f000 fd78 	bl	8007770 <osSemaphoreNew>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4a21      	ldr	r2, [pc, #132]	@ (8006d08 <low_level_init+0x19c>)
 8006c84:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	2224      	movs	r2, #36	@ 0x24
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f012 ffee 	bl	8019c70 <memset>
  attributes.name = "EthIf";
 8006c94:	4b1d      	ldr	r3, [pc, #116]	@ (8006d0c <low_level_init+0x1a0>)
 8006c96:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006c98:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  attributes.priority = osPriorityRealtime;
 8006c9e:	2330      	movs	r3, #48	@ 0x30
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006ca2:	f107 0314 	add.w	r3, r7, #20
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	4819      	ldr	r0, [pc, #100]	@ (8006d10 <low_level_init+0x1a4>)
 8006cac:	f000 fb44 	bl	8007338 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006cb0:	480f      	ldr	r0, [pc, #60]	@ (8006cf0 <low_level_init+0x184>)
 8006cb2:	f7fb fd67 	bl	8002784 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006cb6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006cba:	461a      	mov	r2, r3
 8006cbc:	211d      	movs	r1, #29
 8006cbe:	480c      	ldr	r0, [pc, #48]	@ (8006cf0 <low_level_init+0x184>)
 8006cc0:	f7fb fc92 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc6:	f043 030b 	orr.w	r3, r3, #11
 8006cca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	461a      	mov	r2, r3
 8006cd0:	211d      	movs	r1, #29
 8006cd2:	4807      	ldr	r0, [pc, #28]	@ (8006cf0 <low_level_init+0x184>)
 8006cd4:	f7fb fcf0 	bl	80026b8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006cd8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006cdc:	461a      	mov	r2, r3
 8006cde:	211d      	movs	r1, #29
 8006ce0:	4803      	ldr	r0, [pc, #12]	@ (8006cf0 <low_level_init+0x184>)
 8006ce2:	f7fb fc81 	bl	80025e8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006ce6:	bf00      	nop
 8006ce8:	3740      	adds	r7, #64	@ 0x40
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20003e64 	.word	0x20003e64
 8006cf4:	40028000 	.word	0x40028000
 8006cf8:	20002690 	.word	0x20002690
 8006cfc:	20000e40 	.word	0x20000e40
 8006d00:	20000ec0 	.word	0x20000ec0
 8006d04:	20000dc0 	.word	0x20000dc0
 8006d08:	20003e60 	.word	0x20003e60
 8006d0c:	0801c140 	.word	0x0801c140
 8006d10:	08006fb5 	.word	0x08006fb5

08006d14 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	@ 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8006e4c <low_level_output+0x138>)
 8006d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006d36:	4b45      	ldr	r3, [pc, #276]	@ (8006e4c <low_level_output+0x138>)
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	623b      	str	r3, [r7, #32]
 8006d44:	e05a      	b.n	8006dfc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da03      	bge.n	8006d56 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006d4e:	23f8      	movs	r3, #248	@ 0xf8
 8006d50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8006d54:	e05c      	b.n	8006e10 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	895b      	ldrh	r3, [r3, #10]
 8006d5a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006d60:	e02f      	b.n	8006dc2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	18d0      	adds	r0, r2, r3
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	18d1      	adds	r1, r2, r3
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f013 f832 	bl	8019de2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da03      	bge.n	8006d94 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006d8c:	23f8      	movs	r3, #248	@ 0xf8
 8006d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8006d92:	e03d      	b.n	8006e10 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006da4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006db0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006dbc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d8c8      	bhi.n	8006d62 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	18d0      	adds	r0, r2, r3
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	4413      	add	r3, r2
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	4619      	mov	r1, r3
 8006de2:	f012 fffe 	bl	8019de2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	623b      	str	r3, [r7, #32]
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1a1      	bne.n	8006d46 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006e02:	6979      	ldr	r1, [r7, #20]
 8006e04:	4811      	ldr	r0, [pc, #68]	@ (8006e4c <low_level_output+0x138>)
 8006e06:	f7fb fa05 	bl	8002214 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006e10:	4b0e      	ldr	r3, [pc, #56]	@ (8006e4c <low_level_output+0x138>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00d      	beq.n	8006e3e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006e22:	4b0a      	ldr	r3, [pc, #40]	@ (8006e4c <low_level_output+0x138>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <low_level_output+0x138>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8006e3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3728      	adds	r7, #40	@ 0x28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20003e64 	.word	0x20003e64

08006e50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08c      	sub	sp, #48	@ 0x30
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006e74:	484e      	ldr	r0, [pc, #312]	@ (8006fb0 <low_level_input+0x160>)
 8006e76:	f7fb fab7 	bl	80023e8 <HAL_ETH_GetReceivedFrame_IT>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <low_level_input+0x34>

    return NULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e091      	b.n	8006fa8 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006e84:	4b4a      	ldr	r3, [pc, #296]	@ (8006fb0 <low_level_input+0x160>)
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006e8a:	4b49      	ldr	r3, [pc, #292]	@ (8006fb0 <low_level_input+0x160>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8006e90:	89fb      	ldrh	r3, [r7, #14]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	2000      	movs	r0, #0
 8006ea0:	f008 f8f2 	bl	800f088 <pbuf_alloc>
 8006ea4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d04b      	beq.n	8006f44 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006eac:	4b40      	ldr	r3, [pc, #256]	@ (8006fb0 <low_level_input+0x160>)
 8006eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eba:	e040      	b.n	8006f3e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	895b      	ldrh	r3, [r3, #10]
 8006ec0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006ec6:	e021      	b.n	8006f0c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	18d0      	adds	r0, r2, r3
 8006ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	18d1      	adds	r1, r2, r3
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	f240 53f4 	movw	r3, #1524	@ 0x5f4
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f012 ff7f 	bl	8019de2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8006efa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8006f06:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	4413      	add	r3, r2
 8006f12:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d8d6      	bhi.n	8006ec8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	18d0      	adds	r0, r2, r3
 8006f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	f012 ff59 	bl	8019de2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	4413      	add	r3, r2
 8006f36:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1bb      	bne.n	8006ebc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006f44:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb0 <low_level_input+0x160>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f48:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	e00b      	b.n	8006f68 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	4b11      	ldr	r3, [pc, #68]	@ (8006fb0 <low_level_input+0x160>)
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3ee      	bcc.n	8006f50 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8006f72:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb0 <low_level_input+0x160>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006f78:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb0 <low_level_input+0x160>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006f8a:	4b09      	ldr	r3, [pc, #36]	@ (8006fb0 <low_level_input+0x160>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f92:	461a      	mov	r2, r3
 8006f94:	2380      	movs	r3, #128	@ 0x80
 8006f96:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006f98:	4b05      	ldr	r3, [pc, #20]	@ (8006fb0 <low_level_input+0x160>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6093      	str	r3, [r2, #8]
  }
  return p;
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3730      	adds	r7, #48	@ 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20003e64 	.word	0x20003e64

08006fb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006fc0:	4b12      	ldr	r3, [pc, #72]	@ (800700c <ethernetif_input+0x58>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fc6d 	bl	80078a8 <osSemaphoreAcquire>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f5      	bne.n	8006fc0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006fd4:	480e      	ldr	r0, [pc, #56]	@ (8007010 <ethernetif_input+0x5c>)
 8006fd6:	f011 fef3 	bl	8018dc0 <sys_mutex_lock>
        p = low_level_input( netif );
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff ff38 	bl	8006e50 <low_level_input>
 8006fe0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	68b8      	ldr	r0, [r7, #8]
 8006ff0:	4798      	blx	r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006ff8:	68b8      	ldr	r0, [r7, #8]
 8006ffa:	f008 fb29 	bl	800f650 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8006ffe:	4804      	ldr	r0, [pc, #16]	@ (8007010 <ethernetif_input+0x5c>)
 8007000:	f011 feed 	bl	8018dde <sys_mutex_unlock>
      } while(p!=NULL);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e4      	bne.n	8006fd4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800700a:	e7d9      	b.n	8006fc0 <ethernetif_input+0xc>
 800700c:	20003e60 	.word	0x20003e60
 8007010:	2000c400 	.word	0x2000c400

08007014 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <ethernetif_init+0x1c>
 8007022:	4b0e      	ldr	r3, [pc, #56]	@ (800705c <ethernetif_init+0x48>)
 8007024:	f240 223b 	movw	r2, #571	@ 0x23b
 8007028:	490d      	ldr	r1, [pc, #52]	@ (8007060 <ethernetif_init+0x4c>)
 800702a:	480e      	ldr	r0, [pc, #56]	@ (8007064 <ethernetif_init+0x50>)
 800702c:	f012 fc5a 	bl	80198e4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2273      	movs	r2, #115	@ 0x73
 8007034:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2274      	movs	r2, #116	@ 0x74
 800703c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a09      	ldr	r2, [pc, #36]	@ (8007068 <ethernetif_init+0x54>)
 8007044:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a08      	ldr	r2, [pc, #32]	@ (800706c <ethernetif_init+0x58>)
 800704a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff fd8d 	bl	8006b6c <low_level_init>

  return ERR_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	0801c148 	.word	0x0801c148
 8007060:	0801c164 	.word	0x0801c164
 8007064:	0801c174 	.word	0x0801c174
 8007068:	08016e15 	.word	0x08016e15
 800706c:	08006d15 	.word	0x08006d15

08007070 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007074:	f7fa fd50 	bl	8001b18 <HAL_GetTick>
 8007078:	4603      	mov	r3, r0
}
 800707a:	4618      	mov	r0, r3
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007088:	2300      	movs	r3, #0
 800708a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007090:	f107 0308 	add.w	r3, r7, #8
 8007094:	461a      	mov	r2, r3
 8007096:	2101      	movs	r1, #1
 8007098:	4816      	ldr	r0, [pc, #88]	@ (80070f4 <ethernetif_set_link+0x74>)
 800709a:	f7fb faa5 	bl	80025e8 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <ethernetif_set_link+0x48>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f007 feb3 	bl	800ee2c <netif_set_link_up>
 80070c6:	e011      	b.n	80070ec <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80070d0:	089b      	lsrs	r3, r3, #2
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <ethernetif_set_link+0x6c>
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f007 fed4 	bl	800ee94 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80070ec:	20c8      	movs	r0, #200	@ 0xc8
 80070ee:	f000 f9c9 	bl	8007484 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80070f2:	e7cd      	b.n	8007090 <ethernetif_set_link+0x10>
 80070f4:	20003e64 	.word	0x20003e64

080070f8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800710e:	089b      	lsrs	r3, r3, #2
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d05d      	beq.n	80071d6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800711a:	4b34      	ldr	r3, [pc, #208]	@ (80071ec <ethernetif_update_config+0xf4>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d03f      	beq.n	80071a2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007122:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007126:	2100      	movs	r1, #0
 8007128:	4830      	ldr	r0, [pc, #192]	@ (80071ec <ethernetif_update_config+0xf4>)
 800712a:	f7fb fac5 	bl	80026b8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800712e:	f7fa fcf3 	bl	8001b18 <HAL_GetTick>
 8007132:	4603      	mov	r3, r0
 8007134:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007136:	f107 0308 	add.w	r3, r7, #8
 800713a:	461a      	mov	r2, r3
 800713c:	2101      	movs	r1, #1
 800713e:	482b      	ldr	r0, [pc, #172]	@ (80071ec <ethernetif_update_config+0xf4>)
 8007140:	f7fb fa52 	bl	80025e8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007144:	f7fa fce8 	bl	8001b18 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007152:	d828      	bhi.n	80071a6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0eb      	beq.n	8007136 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800715e:	f107 0308 	add.w	r3, r7, #8
 8007162:	461a      	mov	r2, r3
 8007164:	2110      	movs	r1, #16
 8007166:	4821      	ldr	r0, [pc, #132]	@ (80071ec <ethernetif_update_config+0xf4>)
 8007168:	f7fb fa3e 	bl	80025e8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007176:	4b1d      	ldr	r3, [pc, #116]	@ (80071ec <ethernetif_update_config+0xf4>)
 8007178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800717c:	60da      	str	r2, [r3, #12]
 800717e:	e002      	b.n	8007186 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007180:	4b1a      	ldr	r3, [pc, #104]	@ (80071ec <ethernetif_update_config+0xf4>)
 8007182:	2200      	movs	r2, #0
 8007184:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007190:	4b16      	ldr	r3, [pc, #88]	@ (80071ec <ethernetif_update_config+0xf4>)
 8007192:	2200      	movs	r2, #0
 8007194:	609a      	str	r2, [r3, #8]
 8007196:	e016      	b.n	80071c6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007198:	4b14      	ldr	r3, [pc, #80]	@ (80071ec <ethernetif_update_config+0xf4>)
 800719a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	e011      	b.n	80071c6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80071a2:	bf00      	nop
 80071a4:	e000      	b.n	80071a8 <ethernetif_update_config+0xb0>
          goto error;
 80071a6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80071a8:	4b10      	ldr	r3, [pc, #64]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80071b0:	4b0e      	ldr	r3, [pc, #56]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80071b8:	4313      	orrs	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	2100      	movs	r1, #0
 80071c0:	480a      	ldr	r0, [pc, #40]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071c2:	f7fb fa79 	bl	80026b8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80071c6:	2100      	movs	r1, #0
 80071c8:	4808      	ldr	r0, [pc, #32]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071ca:	f7fb fb39 	bl	8002840 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80071ce:	4807      	ldr	r0, [pc, #28]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071d0:	f7fb fad8 	bl	8002784 <HAL_ETH_Start>
 80071d4:	e002      	b.n	80071dc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80071d6:	4805      	ldr	r0, [pc, #20]	@ (80071ec <ethernetif_update_config+0xf4>)
 80071d8:	f7fb fb03 	bl	80027e2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f807 	bl	80071f0 <ethernetif_notify_conn_changed>
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20003e64 	.word	0x20003e64

080071f0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800721a:	f3ef 8305 	mrs	r3, IPSR
 800721e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007220:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007226:	f3ef 8310 	mrs	r3, PRIMASK
 800722a:	607b      	str	r3, [r7, #4]
  return(result);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007232:	f3ef 8311 	mrs	r3, BASEPRI
 8007236:	603b      	str	r3, [r7, #0]
  return(result);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <osKernelInitialize+0x3a>
 800723e:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <osKernelInitialize+0x64>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d103      	bne.n	800724e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007246:	f06f 0305 	mvn.w	r3, #5
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e00c      	b.n	8007268 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800724e:	4b0a      	ldr	r3, [pc, #40]	@ (8007278 <osKernelInitialize+0x64>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d105      	bne.n	8007262 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007256:	4b08      	ldr	r3, [pc, #32]	@ (8007278 <osKernelInitialize+0x64>)
 8007258:	2201      	movs	r2, #1
 800725a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e002      	b.n	8007268 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007262:	f04f 33ff 	mov.w	r3, #4294967295
 8007266:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20003eac 	.word	0x20003eac

0800727c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007282:	f3ef 8305 	mrs	r3, IPSR
 8007286:	60bb      	str	r3, [r7, #8]
  return(result);
 8007288:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10f      	bne.n	80072ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728e:	f3ef 8310 	mrs	r3, PRIMASK
 8007292:	607b      	str	r3, [r7, #4]
  return(result);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d105      	bne.n	80072a6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800729a:	f3ef 8311 	mrs	r3, BASEPRI
 800729e:	603b      	str	r3, [r7, #0]
  return(result);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <osKernelStart+0x3a>
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <osKernelStart+0x68>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d103      	bne.n	80072b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80072ae:	f06f 0305 	mvn.w	r3, #5
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	e010      	b.n	80072d8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <osKernelStart+0x68>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d109      	bne.n	80072d2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80072be:	f7ff ffa1 	bl	8007204 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80072c2:	4b08      	ldr	r3, [pc, #32]	@ (80072e4 <osKernelStart+0x68>)
 80072c4:	2202      	movs	r2, #2
 80072c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072c8:	f002 fb4a 	bl	8009960 <vTaskStartScheduler>
      stat = osOK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e002      	b.n	80072d8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80072d8:	68fb      	ldr	r3, [r7, #12]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20003eac 	.word	0x20003eac

080072e8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80072f4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10f      	bne.n	800731a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072fa:	f3ef 8310 	mrs	r3, PRIMASK
 80072fe:	607b      	str	r3, [r7, #4]
  return(result);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d105      	bne.n	8007312 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007306:	f3ef 8311 	mrs	r3, BASEPRI
 800730a:	603b      	str	r3, [r7, #0]
  return(result);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d007      	beq.n	8007322 <osKernelGetTickCount+0x3a>
 8007312:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <osKernelGetTickCount+0x4c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d103      	bne.n	8007322 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800731a:	f002 fc4b 	bl	8009bb4 <xTaskGetTickCountFromISR>
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	e002      	b.n	8007328 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007322:	f002 fc37 	bl	8009b94 <xTaskGetTickCount>
 8007326:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20003eac 	.word	0x20003eac

08007338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b090      	sub	sp, #64	@ 0x40
 800733c:	af04      	add	r7, sp, #16
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007348:	f3ef 8305 	mrs	r3, IPSR
 800734c:	61fb      	str	r3, [r7, #28]
  return(result);
 800734e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 808f 	bne.w	8007474 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	61bb      	str	r3, [r7, #24]
  return(result);
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007362:	f3ef 8311 	mrs	r3, BASEPRI
 8007366:	617b      	str	r3, [r7, #20]
  return(result);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <osThreadNew+0x3e>
 800736e:	4b44      	ldr	r3, [pc, #272]	@ (8007480 <osThreadNew+0x148>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d07e      	beq.n	8007474 <osThreadNew+0x13c>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d07b      	beq.n	8007474 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800737c:	2380      	movs	r3, #128	@ 0x80
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007380:	2318      	movs	r3, #24
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8007384:	2300      	movs	r3, #0
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8007388:	f04f 33ff 	mov.w	r3, #4294967295
 800738c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d045      	beq.n	8007420 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <osThreadNew+0x6a>
        name = attr->name;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d008      	beq.n	80073c8 <osThreadNew+0x90>
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	2b38      	cmp	r3, #56	@ 0x38
 80073ba:	d805      	bhi.n	80073c8 <osThreadNew+0x90>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <osThreadNew+0x94>
        return (NULL);
 80073c8:	2300      	movs	r3, #0
 80073ca:	e054      	b.n	8007476 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00e      	beq.n	8007402 <osThreadNew+0xca>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b5b      	cmp	r3, #91	@ 0x5b
 80073ea:	d90a      	bls.n	8007402 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d006      	beq.n	8007402 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <osThreadNew+0xca>
        mem = 1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	623b      	str	r3, [r7, #32]
 8007400:	e010      	b.n	8007424 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10c      	bne.n	8007424 <osThreadNew+0xec>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d108      	bne.n	8007424 <osThreadNew+0xec>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d104      	bne.n	8007424 <osThreadNew+0xec>
          mem = 0;
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	e001      	b.n	8007424 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d110      	bne.n	800744c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007432:	9202      	str	r2, [sp, #8]
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800743e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f002 f83d 	bl	80094c0 <xTaskCreateStatic>
 8007446:	4603      	mov	r3, r0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e013      	b.n	8007474 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d110      	bne.n	8007474 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	b29a      	uxth	r2, r3
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f002 f891 	bl	800958c <xTaskCreate>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <osThreadNew+0x13c>
          hTask = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007474:	693b      	ldr	r3, [r7, #16]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3730      	adds	r7, #48	@ 0x30
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20003eac 	.word	0x20003eac

08007484 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800748c:	f3ef 8305 	mrs	r3, IPSR
 8007490:	613b      	str	r3, [r7, #16]
  return(result);
 8007492:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10f      	bne.n	80074b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007498:	f3ef 8310 	mrs	r3, PRIMASK
 800749c:	60fb      	str	r3, [r7, #12]
  return(result);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074a4:	f3ef 8311 	mrs	r3, BASEPRI
 80074a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <osDelay+0x3c>
 80074b0:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <osDelay+0x58>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d103      	bne.n	80074c0 <osDelay+0x3c>
    stat = osErrorISR;
 80074b8:	f06f 0305 	mvn.w	r3, #5
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e007      	b.n	80074d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f002 f9a6 	bl	800981c <vTaskDelay>
    }
  }

  return (stat);
 80074d0:	697b      	ldr	r3, [r7, #20]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20003eac 	.word	0x20003eac

080074e0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	@ 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ec:	f3ef 8305 	mrs	r3, IPSR
 80074f0:	613b      	str	r3, [r7, #16]
  return(result);
 80074f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f040 8085 	bne.w	8007604 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074fa:	f3ef 8310 	mrs	r3, PRIMASK
 80074fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d105      	bne.n	8007512 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007506:	f3ef 8311 	mrs	r3, BASEPRI
 800750a:	60bb      	str	r3, [r7, #8]
  return(result);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <osMutexNew+0x3a>
 8007512:	4b3f      	ldr	r3, [pc, #252]	@ (8007610 <osMutexNew+0x130>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d074      	beq.n	8007604 <osMutexNew+0x124>
    if (attr != NULL) {
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	623b      	str	r3, [r7, #32]
 8007526:	e001      	b.n	800752c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <osMutexNew+0x5c>
      rmtx = 1U;
 8007536:	2301      	movs	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
 800753a:	e001      	b.n	8007540 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d15c      	bne.n	8007604 <osMutexNew+0x124>
      mem = -1;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d015      	beq.n	8007582 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d006      	beq.n	800756c <osMutexNew+0x8c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b4f      	cmp	r3, #79	@ 0x4f
 8007564:	d902      	bls.n	800756c <osMutexNew+0x8c>
          mem = 1;
 8007566:	2301      	movs	r3, #1
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	e00c      	b.n	8007586 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d108      	bne.n	8007586 <osMutexNew+0xa6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <osMutexNew+0xa6>
            mem = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e001      	b.n	8007586 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d112      	bne.n	80075b2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	4619      	mov	r1, r3
 8007598:	2004      	movs	r0, #4
 800759a:	f000 fec0 	bl	800831e <xQueueCreateMutexStatic>
 800759e:	6278      	str	r0, [r7, #36]	@ 0x24
 80075a0:	e016      	b.n	80075d0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	4619      	mov	r1, r3
 80075a8:	2001      	movs	r0, #1
 80075aa:	f000 feb8 	bl	800831e <xQueueCreateMutexStatic>
 80075ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80075b0:	e00e      	b.n	80075d0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80075be:	2004      	movs	r0, #4
 80075c0:	f000 fe95 	bl	80082ee <xQueueCreateMutex>
 80075c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80075c6:	e003      	b.n	80075d0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80075c8:	2001      	movs	r0, #1
 80075ca:	f000 fe90 	bl	80082ee <xQueueCreateMutex>
 80075ce:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00c      	beq.n	80075f0 <osMutexNew+0x110>
        if (attr != NULL) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <osMutexNew+0x104>
          name = attr->name;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e001      	b.n	80075e8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80075e8:	6979      	ldr	r1, [r7, #20]
 80075ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075ec:	f001 fee0 	bl	80093b0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80075f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d006      	beq.n	8007604 <osMutexNew+0x124>
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	f043 0301 	orr.w	r3, r3, #1
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007606:	4618      	mov	r0, r3
 8007608:	3728      	adds	r7, #40	@ 0x28
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	20003eac 	.word	0x20003eac

08007614 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007632:	f3ef 8305 	mrs	r3, IPSR
 8007636:	613b      	str	r3, [r7, #16]
  return(result);
 8007638:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10f      	bne.n	800765e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	60fb      	str	r3, [r7, #12]
  return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800764a:	f3ef 8311 	mrs	r3, BASEPRI
 800764e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <osMutexAcquire+0x52>
 8007656:	4b1d      	ldr	r3, [pc, #116]	@ (80076cc <osMutexAcquire+0xb8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d103      	bne.n	8007666 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800765e:	f06f 0305 	mvn.w	r3, #5
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e02c      	b.n	80076c0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d103      	bne.n	8007674 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800766c:	f06f 0303 	mvn.w	r3, #3
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e025      	b.n	80076c0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d011      	beq.n	800769e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	69b8      	ldr	r0, [r7, #24]
 800767e:	f000 fea0 	bl	80083c2 <xQueueTakeMutexRecursive>
 8007682:	4603      	mov	r3, r0
 8007684:	2b01      	cmp	r3, #1
 8007686:	d01b      	beq.n	80076c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800768e:	f06f 0301 	mvn.w	r3, #1
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e014      	b.n	80076c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007696:	f06f 0302 	mvn.w	r3, #2
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	e010      	b.n	80076c0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	69b8      	ldr	r0, [r7, #24]
 80076a2:	f001 fa6b 	bl	8008b7c <xQueueSemaphoreTake>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d009      	beq.n	80076c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80076b2:	f06f 0301 	mvn.w	r3, #1
 80076b6:	61fb      	str	r3, [r7, #28]
 80076b8:	e002      	b.n	80076c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80076ba:	f06f 0302 	mvn.w	r3, #2
 80076be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80076c0:	69fb      	ldr	r3, [r7, #28]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20003eac 	.word	0x20003eac

080076d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ec:	f3ef 8305 	mrs	r3, IPSR
 80076f0:	613b      	str	r3, [r7, #16]
  return(result);
 80076f2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10f      	bne.n	8007718 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f8:	f3ef 8310 	mrs	r3, PRIMASK
 80076fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d105      	bne.n	8007710 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007704:	f3ef 8311 	mrs	r3, BASEPRI
 8007708:	60bb      	str	r3, [r7, #8]
  return(result);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <osMutexRelease+0x50>
 8007710:	4b16      	ldr	r3, [pc, #88]	@ (800776c <osMutexRelease+0x9c>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d103      	bne.n	8007720 <osMutexRelease+0x50>
    stat = osErrorISR;
 8007718:	f06f 0305 	mvn.w	r3, #5
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e01f      	b.n	8007760 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007726:	f06f 0303 	mvn.w	r3, #3
 800772a:	61fb      	str	r3, [r7, #28]
 800772c:	e018      	b.n	8007760 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007734:	69b8      	ldr	r0, [r7, #24]
 8007736:	f000 fe0d 	bl	8008354 <xQueueGiveMutexRecursive>
 800773a:	4603      	mov	r3, r0
 800773c:	2b01      	cmp	r3, #1
 800773e:	d00f      	beq.n	8007760 <osMutexRelease+0x90>
        stat = osErrorResource;
 8007740:	f06f 0302 	mvn.w	r3, #2
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e00b      	b.n	8007760 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007748:	2300      	movs	r3, #0
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	69b8      	ldr	r0, [r7, #24]
 8007750:	f000 fee6 	bl	8008520 <xQueueGenericSend>
 8007754:	4603      	mov	r3, r0
 8007756:	2b01      	cmp	r3, #1
 8007758:	d002      	beq.n	8007760 <osMutexRelease+0x90>
        stat = osErrorResource;
 800775a:	f06f 0302 	mvn.w	r3, #2
 800775e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007760:	69fb      	ldr	r3, [r7, #28]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20003eac 	.word	0x20003eac

08007770 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b08c      	sub	sp, #48	@ 0x30
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007780:	f3ef 8305 	mrs	r3, IPSR
 8007784:	61bb      	str	r3, [r7, #24]
  return(result);
 8007786:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 8086 	bne.w	800789a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800778e:	f3ef 8310 	mrs	r3, PRIMASK
 8007792:	617b      	str	r3, [r7, #20]
  return(result);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d105      	bne.n	80077a6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800779a:	f3ef 8311 	mrs	r3, BASEPRI
 800779e:	613b      	str	r3, [r7, #16]
  return(result);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <osSemaphoreNew+0x3e>
 80077a6:	4b3f      	ldr	r3, [pc, #252]	@ (80078a4 <osSemaphoreNew+0x134>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d075      	beq.n	800789a <osSemaphoreNew+0x12a>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d072      	beq.n	800789a <osSemaphoreNew+0x12a>
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d86e      	bhi.n	800789a <osSemaphoreNew+0x12a>
    mem = -1;
 80077bc:	f04f 33ff 	mov.w	r3, #4294967295
 80077c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d015      	beq.n	80077f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d006      	beq.n	80077de <osSemaphoreNew+0x6e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80077d6:	d902      	bls.n	80077de <osSemaphoreNew+0x6e>
        mem = 1;
 80077d8:	2301      	movs	r3, #1
 80077da:	623b      	str	r3, [r7, #32]
 80077dc:	e00c      	b.n	80077f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <osSemaphoreNew+0x88>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <osSemaphoreNew+0x88>
          mem = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	e001      	b.n	80077f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	d04c      	beq.n	800789a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d128      	bne.n	8007858 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d10a      	bne.n	8007822 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2203      	movs	r2, #3
 8007812:	9200      	str	r2, [sp, #0]
 8007814:	2200      	movs	r2, #0
 8007816:	2100      	movs	r1, #0
 8007818:	2001      	movs	r0, #1
 800781a:	f000 fc61 	bl	80080e0 <xQueueGenericCreateStatic>
 800781e:	6278      	str	r0, [r7, #36]	@ 0x24
 8007820:	e005      	b.n	800782e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007822:	2203      	movs	r2, #3
 8007824:	2100      	movs	r1, #0
 8007826:	2001      	movs	r0, #1
 8007828:	f000 fce1 	bl	80081ee <xQueueGenericCreate>
 800782c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d022      	beq.n	800787a <osSemaphoreNew+0x10a>
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01f      	beq.n	800787a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	2100      	movs	r1, #0
 8007840:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007842:	f000 fe6d 	bl	8008520 <xQueueGenericSend>
 8007846:	4603      	mov	r3, r0
 8007848:	2b01      	cmp	r3, #1
 800784a:	d016      	beq.n	800787a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800784c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800784e:	f001 fc61 	bl	8009114 <vQueueDelete>
            hSemaphore = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	627b      	str	r3, [r7, #36]	@ 0x24
 8007856:	e010      	b.n	800787a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d108      	bne.n	8007870 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	461a      	mov	r2, r3
 8007864:	68b9      	ldr	r1, [r7, #8]
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fde4 	bl	8008434 <xQueueCreateCountingSemaphoreStatic>
 800786c:	6278      	str	r0, [r7, #36]	@ 0x24
 800786e:	e004      	b.n	800787a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 fe1b 	bl	80084ae <xQueueCreateCountingSemaphore>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00c      	beq.n	800789a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <osSemaphoreNew+0x11e>
          name = attr->name;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	e001      	b.n	8007892 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007896:	f001 fd8b 	bl	80093b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800789c:	4618      	mov	r0, r3
 800789e:	3728      	adds	r7, #40	@ 0x28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20003eac 	.word	0x20003eac

080078a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b088      	sub	sp, #32
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d103      	bne.n	80078c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80078c0:	f06f 0303 	mvn.w	r3, #3
 80078c4:	61fb      	str	r3, [r7, #28]
 80078c6:	e04b      	b.n	8007960 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c8:	f3ef 8305 	mrs	r3, IPSR
 80078cc:	617b      	str	r3, [r7, #20]
  return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10f      	bne.n	80078f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d4:	f3ef 8310 	mrs	r3, PRIMASK
 80078d8:	613b      	str	r3, [r7, #16]
  return(result);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d105      	bne.n	80078ec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078e0:	f3ef 8311 	mrs	r3, BASEPRI
 80078e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d026      	beq.n	800793a <osSemaphoreAcquire+0x92>
 80078ec:	4b1f      	ldr	r3, [pc, #124]	@ (800796c <osSemaphoreAcquire+0xc4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d122      	bne.n	800793a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80078fa:	f06f 0303 	mvn.w	r3, #3
 80078fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007900:	e02d      	b.n	800795e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007906:	f107 0308 	add.w	r3, r7, #8
 800790a:	461a      	mov	r2, r3
 800790c:	2100      	movs	r1, #0
 800790e:	69b8      	ldr	r0, [r7, #24]
 8007910:	f001 fb36 	bl	8008f80 <xQueueReceiveFromISR>
 8007914:	4603      	mov	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d003      	beq.n	8007922 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800791a:	f06f 0302 	mvn.w	r3, #2
 800791e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007920:	e01d      	b.n	800795e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01a      	beq.n	800795e <osSemaphoreAcquire+0xb6>
 8007928:	4b11      	ldr	r3, [pc, #68]	@ (8007970 <osSemaphoreAcquire+0xc8>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007938:	e011      	b.n	800795e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	69b8      	ldr	r0, [r7, #24]
 800793e:	f001 f91d 	bl	8008b7c <xQueueSemaphoreTake>
 8007942:	4603      	mov	r3, r0
 8007944:	2b01      	cmp	r3, #1
 8007946:	d00b      	beq.n	8007960 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800794e:	f06f 0301 	mvn.w	r3, #1
 8007952:	61fb      	str	r3, [r7, #28]
 8007954:	e004      	b.n	8007960 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007956:	f06f 0302 	mvn.w	r3, #2
 800795a:	61fb      	str	r3, [r7, #28]
 800795c:	e000      	b.n	8007960 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800795e:	bf00      	nop
      }
    }
  }

  return (stat);
 8007960:	69fb      	ldr	r3, [r7, #28]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20003eac 	.word	0x20003eac
 8007970:	e000ed04 	.word	0xe000ed04

08007974 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007980:	2300      	movs	r3, #0
 8007982:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800798a:	f06f 0303 	mvn.w	r3, #3
 800798e:	61fb      	str	r3, [r7, #28]
 8007990:	e03e      	b.n	8007a10 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007992:	f3ef 8305 	mrs	r3, IPSR
 8007996:	617b      	str	r3, [r7, #20]
  return(result);
 8007998:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10f      	bne.n	80079be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799e:	f3ef 8310 	mrs	r3, PRIMASK
 80079a2:	613b      	str	r3, [r7, #16]
  return(result);
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d105      	bne.n	80079b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079aa:	f3ef 8311 	mrs	r3, BASEPRI
 80079ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01e      	beq.n	80079f4 <osSemaphoreRelease+0x80>
 80079b6:	4b19      	ldr	r3, [pc, #100]	@ (8007a1c <osSemaphoreRelease+0xa8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d11a      	bne.n	80079f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079c2:	f107 0308 	add.w	r3, r7, #8
 80079c6:	4619      	mov	r1, r3
 80079c8:	69b8      	ldr	r0, [r7, #24]
 80079ca:	f000 ff56 	bl	800887a <xQueueGiveFromISR>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d003      	beq.n	80079dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80079d4:	f06f 0302 	mvn.w	r3, #2
 80079d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079da:	e018      	b.n	8007a0e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d015      	beq.n	8007a0e <osSemaphoreRelease+0x9a>
 80079e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <osSemaphoreRelease+0xac>)
 80079e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80079f2:	e00c      	b.n	8007a0e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80079f4:	2300      	movs	r3, #0
 80079f6:	2200      	movs	r2, #0
 80079f8:	2100      	movs	r1, #0
 80079fa:	69b8      	ldr	r0, [r7, #24]
 80079fc:	f000 fd90 	bl	8008520 <xQueueGenericSend>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d004      	beq.n	8007a10 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007a06:	f06f 0302 	mvn.w	r3, #2
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	e000      	b.n	8007a10 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007a0e:	bf00      	nop
    }
  }

  return (stat);
 8007a10:	69fb      	ldr	r3, [r7, #28]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20003eac 	.word	0x20003eac
 8007a20:	e000ed04 	.word	0xe000ed04

08007a24 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a30:	f3ef 8305 	mrs	r3, IPSR
 8007a34:	617b      	str	r3, [r7, #20]
  return(result);
 8007a36:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10f      	bne.n	8007a5c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a40:	613b      	str	r3, [r7, #16]
  return(result);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d105      	bne.n	8007a54 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a48:	f3ef 8311 	mrs	r3, BASEPRI
 8007a4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d007      	beq.n	8007a64 <osSemaphoreDelete+0x40>
 8007a54:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <osSemaphoreDelete+0x68>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d103      	bne.n	8007a64 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8007a5c:	f06f 0305 	mvn.w	r3, #5
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e00e      	b.n	8007a82 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8007a6a:	f06f 0303 	mvn.w	r3, #3
 8007a6e:	61fb      	str	r3, [r7, #28]
 8007a70:	e007      	b.n	8007a82 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007a72:	69b8      	ldr	r0, [r7, #24]
 8007a74:	f001 fcc6 	bl	8009404 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8007a7c:	69b8      	ldr	r0, [r7, #24]
 8007a7e:	f001 fb49 	bl	8009114 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007a82:	69fb      	ldr	r3, [r7, #28]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3720      	adds	r7, #32
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	20003eac 	.word	0x20003eac

08007a90 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08c      	sub	sp, #48	@ 0x30
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aa0:	f3ef 8305 	mrs	r3, IPSR
 8007aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007aa6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d16f      	bne.n	8007b8c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aac:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d105      	bne.n	8007ac4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8007abc:	613b      	str	r3, [r7, #16]
  return(result);
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <osMessageQueueNew+0x3c>
 8007ac4:	4b34      	ldr	r3, [pc, #208]	@ (8007b98 <osMessageQueueNew+0x108>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d05f      	beq.n	8007b8c <osMessageQueueNew+0xfc>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d05c      	beq.n	8007b8c <osMessageQueueNew+0xfc>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d059      	beq.n	8007b8c <osMessageQueueNew+0xfc>
    mem = -1;
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d029      	beq.n	8007b38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <osMessageQueueNew+0x82>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b4f      	cmp	r3, #79	@ 0x4f
 8007af2:	d90e      	bls.n	8007b12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	fb01 f303 	mul.w	r3, r1, r3
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d302      	bcc.n	8007b12 <osMessageQueueNew+0x82>
        mem = 1;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	623b      	str	r3, [r7, #32]
 8007b10:	e014      	b.n	8007b3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d110      	bne.n	8007b3c <osMessageQueueNew+0xac>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d108      	bne.n	8007b3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <osMessageQueueNew+0xac>
          mem = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	623b      	str	r3, [r7, #32]
 8007b36:	e001      	b.n	8007b3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d10b      	bne.n	8007b5a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691a      	ldr	r2, [r3, #16]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	9100      	str	r1, [sp, #0]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fac5 	bl	80080e0 <xQueueGenericCreateStatic>
 8007b56:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b58:	e008      	b.n	8007b6c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007b60:	2200      	movs	r2, #0
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fb42 	bl	80081ee <xQueueGenericCreate>
 8007b6a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00c      	beq.n	8007b8c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <osMessageQueueNew+0xf0>
        name = attr->name;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	e001      	b.n	8007b84 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007b80:	2300      	movs	r3, #0
 8007b82:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007b84:	69f9      	ldr	r1, [r7, #28]
 8007b86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b88:	f001 fc12 	bl	80093b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3728      	adds	r7, #40	@ 0x28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20003eac 	.word	0x20003eac

08007b9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	@ 0x28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb4:	f3ef 8305 	mrs	r3, IPSR
 8007bb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007bba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10f      	bne.n	8007be0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d105      	bne.n	8007bd8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8007bd0:	617b      	str	r3, [r7, #20]
  return(result);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d02c      	beq.n	8007c32 <osMessageQueuePut+0x96>
 8007bd8:	4b28      	ldr	r3, [pc, #160]	@ (8007c7c <osMessageQueuePut+0xe0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d128      	bne.n	8007c32 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <osMessageQueuePut+0x56>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <osMessageQueuePut+0x56>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007bf2:	f06f 0303 	mvn.w	r3, #3
 8007bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007bf8:	e039      	b.n	8007c6e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007bfe:	f107 0210 	add.w	r2, r7, #16
 8007c02:	2300      	movs	r3, #0
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	6a38      	ldr	r0, [r7, #32]
 8007c08:	f000 fd94 	bl	8008734 <xQueueGenericSendFromISR>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d003      	beq.n	8007c1a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007c12:	f06f 0302 	mvn.w	r3, #2
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c18:	e029      	b.n	8007c6e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d026      	beq.n	8007c6e <osMessageQueuePut+0xd2>
 8007c20:	4b17      	ldr	r3, [pc, #92]	@ (8007c80 <osMessageQueuePut+0xe4>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c30:	e01d      	b.n	8007c6e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <osMessageQueuePut+0xa2>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007c3e:	f06f 0303 	mvn.w	r3, #3
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c44:	e014      	b.n	8007c70 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007c46:	2300      	movs	r3, #0
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	68b9      	ldr	r1, [r7, #8]
 8007c4c:	6a38      	ldr	r0, [r7, #32]
 8007c4e:	f000 fc67 	bl	8008520 <xQueueGenericSend>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d00b      	beq.n	8007c70 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007c5e:	f06f 0301 	mvn.w	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c64:	e004      	b.n	8007c70 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007c66:	f06f 0302 	mvn.w	r3, #2
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c6c:	e000      	b.n	8007c70 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007c6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3728      	adds	r7, #40	@ 0x28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20003eac 	.word	0x20003eac
 8007c80:	e000ed04 	.word	0xe000ed04

08007c84 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	@ 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c9a:	f3ef 8305 	mrs	r3, IPSR
 8007c9e:	61fb      	str	r3, [r7, #28]
  return(result);
 8007ca0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10f      	bne.n	8007cc6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8007caa:	61bb      	str	r3, [r7, #24]
  return(result);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d105      	bne.n	8007cbe <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cb6:	617b      	str	r3, [r7, #20]
  return(result);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d02c      	beq.n	8007d18 <osMessageQueueGet+0x94>
 8007cbe:	4b28      	ldr	r3, [pc, #160]	@ (8007d60 <osMessageQueueGet+0xdc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d128      	bne.n	8007d18 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <osMessageQueueGet+0x54>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <osMessageQueueGet+0x54>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007cd8:	f06f 0303 	mvn.w	r3, #3
 8007cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cde:	e038      	b.n	8007d52 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ce4:	f107 0310 	add.w	r3, r7, #16
 8007ce8:	461a      	mov	r2, r3
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	6a38      	ldr	r0, [r7, #32]
 8007cee:	f001 f947 	bl	8008f80 <xQueueReceiveFromISR>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d003      	beq.n	8007d00 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007cf8:	f06f 0302 	mvn.w	r3, #2
 8007cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007cfe:	e028      	b.n	8007d52 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d025      	beq.n	8007d52 <osMessageQueueGet+0xce>
 8007d06:	4b17      	ldr	r3, [pc, #92]	@ (8007d64 <osMessageQueueGet+0xe0>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d16:	e01c      	b.n	8007d52 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <osMessageQueueGet+0xa0>
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007d24:	f06f 0303 	mvn.w	r3, #3
 8007d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d2a:	e013      	b.n	8007d54 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	68b9      	ldr	r1, [r7, #8]
 8007d30:	6a38      	ldr	r0, [r7, #32]
 8007d32:	f000 fe3b 	bl	80089ac <xQueueReceive>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d00b      	beq.n	8007d54 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007d42:	f06f 0301 	mvn.w	r3, #1
 8007d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d48:	e004      	b.n	8007d54 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007d4a:	f06f 0302 	mvn.w	r3, #2
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d50:	e000      	b.n	8007d54 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3728      	adds	r7, #40	@ 0x28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	20003eac 	.word	0x20003eac
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	e01e      	b.n	8007dbe <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d80:	f3ef 8305 	mrs	r3, IPSR
 8007d84:	617b      	str	r3, [r7, #20]
  return(result);
 8007d86:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10f      	bne.n	8007dac <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d90:	613b      	str	r3, [r7, #16]
  return(result);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d105      	bne.n	8007da4 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d98:	f3ef 8311 	mrs	r3, BASEPRI
 8007d9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <osMessageQueueGetCount+0x4e>
 8007da4:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <osMessageQueueGetCount+0x60>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d104      	bne.n	8007db6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007dac:	69b8      	ldr	r0, [r7, #24]
 8007dae:	f001 f990 	bl	80090d2 <uxQueueMessagesWaitingFromISR>
 8007db2:	61f8      	str	r0, [r7, #28]
 8007db4:	e003      	b.n	8007dbe <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007db6:	69b8      	ldr	r0, [r7, #24]
 8007db8:	f001 f96a 	bl	8009090 <uxQueueMessagesWaiting>
 8007dbc:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007dbe:	69fb      	ldr	r3, [r7, #28]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20003eac 	.word	0x20003eac

08007dcc <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dd8:	f3ef 8305 	mrs	r3, IPSR
 8007ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de4:	f3ef 8310 	mrs	r3, PRIMASK
 8007de8:	613b      	str	r3, [r7, #16]
  return(result);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007df0:	f3ef 8311 	mrs	r3, BASEPRI
 8007df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <osMessageQueueDelete+0x40>
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e34 <osMessageQueueDelete+0x68>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d103      	bne.n	8007e0c <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8007e04:	f06f 0305 	mvn.w	r3, #5
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	e00e      	b.n	8007e2a <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8007e12:	f06f 0303 	mvn.w	r3, #3
 8007e16:	61fb      	str	r3, [r7, #28]
 8007e18:	e007      	b.n	8007e2a <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8007e1a:	69b8      	ldr	r0, [r7, #24]
 8007e1c:	f001 faf2 	bl	8009404 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8007e24:	69b8      	ldr	r0, [r7, #24]
 8007e26:	f001 f975 	bl	8009114 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007e2a:	69fb      	ldr	r3, [r7, #28]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3720      	adds	r7, #32
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20003eac 	.word	0x20003eac

08007e38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a07      	ldr	r2, [pc, #28]	@ (8007e64 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	4a06      	ldr	r2, [pc, #24]	@ (8007e68 <vApplicationGetIdleTaskMemory+0x30>)
 8007e4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2280      	movs	r2, #128	@ 0x80
 8007e54:	601a      	str	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	20003eb0 	.word	0x20003eb0
 8007e68:	20003f0c 	.word	0x20003f0c

08007e6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a07      	ldr	r2, [pc, #28]	@ (8007e98 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <vApplicationGetTimerTaskMemory+0x30>)
 8007e82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e8a:	601a      	str	r2, [r3, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	2000410c 	.word	0x2000410c
 8007e9c:	20004168 	.word	0x20004168

08007ea0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f103 0208 	add.w	r2, r3, #8
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f103 0208 	add.w	r2, r3, #8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f103 0208 	add.w	r2, r3, #8
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689a      	ldr	r2, [r3, #8]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	601a      	str	r2, [r3, #0]
}
 8007f36:	bf00      	nop
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d103      	bne.n	8007f62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	60fb      	str	r3, [r7, #12]
 8007f60:	e00c      	b.n	8007f7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	3308      	adds	r3, #8
 8007f66:	60fb      	str	r3, [r7, #12]
 8007f68:	e002      	b.n	8007f70 <vListInsert+0x2e>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d2f6      	bcs.n	8007f6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	683a      	ldr	r2, [r7, #0]
 8007f8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	601a      	str	r2, [r3, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6892      	ldr	r2, [r2, #8]
 8007fca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	6852      	ldr	r2, [r2, #4]
 8007fd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	1e5a      	subs	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10d      	bne.n	8008038 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	b672      	cpsid	i
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	b662      	cpsie	i
 8008030:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008038:	f003 f998 	bl	800b36c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	68f9      	ldr	r1, [r7, #12]
 8008046:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	441a      	add	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008068:	3b01      	subs	r3, #1
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	441a      	add	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	22ff      	movs	r2, #255	@ 0xff
 800807c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	22ff      	movs	r2, #255	@ 0xff
 8008084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d114      	bne.n	80080b8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01a      	beq.n	80080cc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3310      	adds	r3, #16
 800809a:	4618      	mov	r0, r3
 800809c:	f001 ff9c 	bl	8009fd8 <xTaskRemoveFromEventList>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d012      	beq.n	80080cc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080a6:	4b0d      	ldr	r3, [pc, #52]	@ (80080dc <xQueueGenericReset+0xd4>)
 80080a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	e009      	b.n	80080cc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3310      	adds	r3, #16
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff feef 	bl	8007ea0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3324      	adds	r3, #36	@ 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7ff feea 	bl	8007ea0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80080cc:	f003 f984 	bl	800b3d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80080d0:	2301      	movs	r3, #1
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	e000ed04 	.word	0xe000ed04

080080e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08e      	sub	sp, #56	@ 0x38
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	b672      	cpsid	i
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	b662      	cpsie	i
 8008108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800810a:	bf00      	nop
 800810c:	bf00      	nop
 800810e:	e7fd      	b.n	800810c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10d      	bne.n	8008132 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811a:	b672      	cpsid	i
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	b662      	cpsie	i
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <xQueueGenericCreateStatic+0x5e>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <xQueueGenericCreateStatic+0x62>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueGenericCreateStatic+0x64>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814c:	b672      	cpsid	i
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	b662      	cpsie	i
 800815c:	623b      	str	r3, [r7, #32]
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <xQueueGenericCreateStatic+0x90>
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <xQueueGenericCreateStatic+0x94>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <xQueueGenericCreateStatic+0x96>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10d      	bne.n	8008196 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800817a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817e:	b672      	cpsid	i
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	b662      	cpsie	i
 800818e:	61fb      	str	r3, [r7, #28]
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	e7fd      	b.n	8008192 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008196:	2350      	movs	r3, #80	@ 0x50
 8008198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b50      	cmp	r3, #80	@ 0x50
 800819e:	d00d      	beq.n	80081bc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a4:	b672      	cpsid	i
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	b662      	cpsie	i
 80081b4:	61bb      	str	r3, [r7, #24]
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	e7fd      	b.n	80081b8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80081c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00d      	beq.n	80081e4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	4613      	mov	r3, r2
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68b9      	ldr	r1, [r7, #8]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f848 	bl	8008274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80081e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3730      	adds	r7, #48	@ 0x30
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b08a      	sub	sp, #40	@ 0x28
 80081f2:	af02      	add	r7, sp, #8
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <xQueueGenericCreate+0x30>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	613b      	str	r3, [r7, #16]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e004      	b.n	8008234 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	3350      	adds	r3, #80	@ 0x50
 8008238:	4618      	mov	r0, r3
 800823a:	f003 f9c5 	bl	800b5c8 <pvPortMalloc>
 800823e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d011      	beq.n	800826a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	3350      	adds	r3, #80	@ 0x50
 800824e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	4613      	mov	r3, r2
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f805 	bl	8008274 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800826a:	69bb      	ldr	r3, [r7, #24]
	}
 800826c:	4618      	mov	r0, r3
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
 8008280:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d103      	bne.n	8008290 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e002      	b.n	8008296 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008290:	69bb      	ldr	r3, [r7, #24]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082a2:	2101      	movs	r1, #1
 80082a4:	69b8      	ldr	r0, [r7, #24]
 80082a6:	f7ff feaf 	bl	8008008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00e      	beq.n	80082e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80082da:	2300      	movs	r3, #0
 80082dc:	2200      	movs	r2, #0
 80082de:	2100      	movs	r1, #0
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f91d 	bl	8008520 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b086      	sub	sp, #24
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	4603      	mov	r3, r0
 80082f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80082f8:	2301      	movs	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	2300      	movs	r3, #0
 80082fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	461a      	mov	r2, r3
 8008304:	6939      	ldr	r1, [r7, #16]
 8008306:	6978      	ldr	r0, [r7, #20]
 8008308:	f7ff ff71 	bl	80081ee <xQueueGenericCreate>
 800830c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff ffd3 	bl	80082ba <prvInitialiseMutex>

		return xNewQueue;
 8008314:	68fb      	ldr	r3, [r7, #12]
	}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af02      	add	r7, sp, #8
 8008324:	4603      	mov	r3, r0
 8008326:	6039      	str	r1, [r7, #0]
 8008328:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800832a:	2301      	movs	r3, #1
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2200      	movs	r2, #0
 800833a:	6939      	ldr	r1, [r7, #16]
 800833c:	6978      	ldr	r0, [r7, #20]
 800833e:	f7ff fecf 	bl	80080e0 <xQueueGenericCreateStatic>
 8008342:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff ffb8 	bl	80082ba <prvInitialiseMutex>

		return xNewQueue;
 800834a:	68fb      	ldr	r3, [r7, #12]
	}
 800834c:	4618      	mov	r0, r3
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008354:	b590      	push	{r4, r7, lr}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10d      	bne.n	8008382 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	b672      	cpsid	i
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	b662      	cpsie	i
 800837a:	60fb      	str	r3, [r7, #12]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	689c      	ldr	r4, [r3, #8]
 8008386:	f002 f8c3 	bl	800a510 <xTaskGetCurrentTaskHandle>
 800838a:	4603      	mov	r3, r0
 800838c:	429c      	cmp	r4, r3
 800838e:	d111      	bne.n	80083b4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	1e5a      	subs	r2, r3, #1
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80083a2:	2300      	movs	r3, #0
 80083a4:	2200      	movs	r2, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	6938      	ldr	r0, [r7, #16]
 80083aa:	f000 f8b9 	bl	8008520 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80083ae:	2301      	movs	r3, #1
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	e001      	b.n	80083b8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80083b8:	697b      	ldr	r3, [r7, #20]
	}
 80083ba:	4618      	mov	r0, r3
 80083bc:	371c      	adds	r7, #28
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd90      	pop	{r4, r7, pc}

080083c2 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80083c2:	b590      	push	{r4, r7, lr}
 80083c4:	b087      	sub	sp, #28
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10d      	bne.n	80083f2 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80083d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083da:	b672      	cpsid	i
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	b662      	cpsie	i
 80083ea:	60fb      	str	r3, [r7, #12]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	689c      	ldr	r4, [r3, #8]
 80083f6:	f002 f88b 	bl	800a510 <xTaskGetCurrentTaskHandle>
 80083fa:	4603      	mov	r3, r0
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d107      	bne.n	8008410 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800840a:	2301      	movs	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e00c      	b.n	800842a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6938      	ldr	r0, [r7, #16]
 8008414:	f000 fbb2 	bl	8008b7c <xQueueSemaphoreTake>
 8008418:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	1c5a      	adds	r2, r3, #1
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800842a:	697b      	ldr	r3, [r7, #20]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	371c      	adds	r7, #28
 8008430:	46bd      	mov	sp, r7
 8008432:	bd90      	pop	{r4, r7, pc}

08008434 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af02      	add	r7, sp, #8
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	b672      	cpsid	i
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	b662      	cpsie	i
 800845a:	61bb      	str	r3, [r7, #24]
}
 800845c:	bf00      	nop
 800845e:	bf00      	nop
 8008460:	e7fd      	b.n	800845e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	429a      	cmp	r2, r3
 8008468:	d90d      	bls.n	8008486 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	b672      	cpsid	i
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	b662      	cpsie	i
 800847e:	617b      	str	r3, [r7, #20]
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	e7fd      	b.n	8008482 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008486:	2302      	movs	r3, #2
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fe25 	bl	80080e0 <xQueueGenericCreateStatic>
 8008496:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80084a4:	69fb      	ldr	r3, [r7, #28]
	}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3720      	adds	r7, #32
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084c2:	b672      	cpsid	i
 80084c4:	f383 8811 	msr	BASEPRI, r3
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	f3bf 8f4f 	dsb	sy
 80084d0:	b662      	cpsie	i
 80084d2:	613b      	str	r3, [r7, #16]
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop
 80084d8:	e7fd      	b.n	80084d6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d90d      	bls.n	80084fe <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e6:	b672      	cpsid	i
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	b662      	cpsie	i
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80084fe:	2202      	movs	r2, #2
 8008500:	2100      	movs	r1, #0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff fe73 	bl	80081ee <xQueueGenericCreate>
 8008508:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008516:	697b      	ldr	r3, [r7, #20]
	}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b08e      	sub	sp, #56	@ 0x38
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800852e:	2300      	movs	r3, #0
 8008530:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10d      	bne.n	8008558 <xQueueGenericSend+0x38>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008540:	b672      	cpsid	i
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	b662      	cpsie	i
 8008550:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <xQueueGenericSend+0x46>
 800855e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <xQueueGenericSend+0x4a>
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <xQueueGenericSend+0x4c>
 800856a:	2300      	movs	r3, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <xQueueGenericSend+0x6c>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008586:	bf00      	nop
 8008588:	bf00      	nop
 800858a:	e7fd      	b.n	8008588 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d103      	bne.n	800859a <xQueueGenericSend+0x7a>
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <xQueueGenericSend+0x7e>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <xQueueGenericSend+0x80>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10d      	bne.n	80085c0 <xQueueGenericSend+0xa0>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	b672      	cpsid	i
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	b662      	cpsie	i
 80085b8:	623b      	str	r3, [r7, #32]
}
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085c0:	f001 ffb6 	bl	800a530 <xTaskGetSchedulerState>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d102      	bne.n	80085d0 <xQueueGenericSend+0xb0>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <xQueueGenericSend+0xb4>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e000      	b.n	80085d6 <xQueueGenericSend+0xb6>
 80085d4:	2300      	movs	r3, #0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10d      	bne.n	80085f6 <xQueueGenericSend+0xd6>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	b672      	cpsid	i
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	b662      	cpsie	i
 80085ee:	61fb      	str	r3, [r7, #28]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085f6:	f002 feb9 	bl	800b36c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <xQueueGenericSend+0xec>
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d129      	bne.n	8008660 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008612:	f000 fdbd 	bl	8009190 <prvCopyDataToQueue>
 8008616:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	3324      	adds	r3, #36	@ 0x24
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fcd7 	bl	8009fd8 <xTaskRemoveFromEventList>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d013      	beq.n	8008658 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008630:	4b3f      	ldr	r3, [pc, #252]	@ (8008730 <xQueueGenericSend+0x210>)
 8008632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	e00a      	b.n	8008658 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008648:	4b39      	ldr	r3, [pc, #228]	@ (8008730 <xQueueGenericSend+0x210>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008658:	f002 febe 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 800865c:	2301      	movs	r3, #1
 800865e:	e063      	b.n	8008728 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d103      	bne.n	800866e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008666:	f002 feb7 	bl	800b3d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800866a:	2300      	movs	r3, #0
 800866c:	e05c      	b.n	8008728 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800866e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	4618      	mov	r0, r3
 800867a:	f001 fd13 	bl	800a0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800867e:	2301      	movs	r3, #1
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008682:	f002 fea9 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008686:	f001 f9d7 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800868a:	f002 fe6f 	bl	800b36c <vPortEnterCritical>
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008694:	b25b      	sxtb	r3, r3
 8008696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869a:	d103      	bne.n	80086a4 <xQueueGenericSend+0x184>
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d103      	bne.n	80086ba <xQueueGenericSend+0x19a>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086ba:	f002 fe8d 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086be:	1d3a      	adds	r2, r7, #4
 80086c0:	f107 0314 	add.w	r3, r7, #20
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fd02 	bl	800a0d0 <xTaskCheckForTimeOut>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d124      	bne.n	800871c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086d4:	f000 fe54 	bl	8009380 <prvIsQueueFull>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d018      	beq.n	8008710 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	3310      	adds	r3, #16
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	4611      	mov	r1, r2
 80086e6:	4618      	mov	r0, r3
 80086e8:	f001 fc20 	bl	8009f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ee:	f000 fddf 	bl	80092b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086f2:	f001 f9af 	bl	8009a54 <xTaskResumeAll>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f af7c 	bne.w	80085f6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80086fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008730 <xQueueGenericSend+0x210>)
 8008700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	e772      	b.n	80085f6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008712:	f000 fdcd 	bl	80092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008716:	f001 f99d 	bl	8009a54 <xTaskResumeAll>
 800871a:	e76c      	b.n	80085f6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800871c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800871e:	f000 fdc7 	bl	80092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008722:	f001 f997 	bl	8009a54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008728:	4618      	mov	r0, r3
 800872a:	3738      	adds	r7, #56	@ 0x38
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b08e      	sub	sp, #56	@ 0x38
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
 8008740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10d      	bne.n	8008768 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	b672      	cpsid	i
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	b662      	cpsie	i
 8008760:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008762:	bf00      	nop
 8008764:	bf00      	nop
 8008766:	e7fd      	b.n	8008764 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <xQueueGenericSendFromISR+0x42>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueGenericSendFromISR+0x46>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueGenericSendFromISR+0x48>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10d      	bne.n	800879c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	b672      	cpsid	i
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	b662      	cpsie	i
 8008794:	623b      	str	r3, [r7, #32]
}
 8008796:	bf00      	nop
 8008798:	bf00      	nop
 800879a:	e7fd      	b.n	8008798 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d103      	bne.n	80087aa <xQueueGenericSendFromISR+0x76>
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <xQueueGenericSendFromISR+0x7a>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <xQueueGenericSendFromISR+0x7c>
 80087ae:	2300      	movs	r3, #0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10d      	bne.n	80087d0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b8:	b672      	cpsid	i
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	b662      	cpsie	i
 80087c8:	61fb      	str	r3, [r7, #28]
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	e7fd      	b.n	80087cc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087d0:	f002 feb4 	bl	800b53c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087d4:	f3ef 8211 	mrs	r2, BASEPRI
 80087d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087dc:	b672      	cpsid	i
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	b662      	cpsie	i
 80087ec:	61ba      	str	r2, [r7, #24]
 80087ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <xQueueGenericSendFromISR+0xd2>
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d12c      	bne.n	8008860 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800880c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	68b9      	ldr	r1, [r7, #8]
 8008814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008816:	f000 fcbb 	bl	8009190 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800881a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800881e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008822:	d112      	bne.n	800884a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d016      	beq.n	800885a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	3324      	adds	r3, #36	@ 0x24
 8008830:	4618      	mov	r0, r3
 8008832:	f001 fbd1 	bl	8009fd8 <xTaskRemoveFromEventList>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00e      	beq.n	800885a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	e007      	b.n	800885a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800884a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800884e:	3301      	adds	r3, #1
 8008850:	b2db      	uxtb	r3, r3
 8008852:	b25a      	sxtb	r2, r3
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800885a:	2301      	movs	r3, #1
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800885e:	e001      	b.n	8008864 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008860:	2300      	movs	r3, #0
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
 8008864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008866:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800886e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008872:	4618      	mov	r0, r3
 8008874:	3738      	adds	r7, #56	@ 0x38
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b08e      	sub	sp, #56	@ 0x38
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <xQueueGiveFromISR+0x30>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	b672      	cpsid	i
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	b662      	cpsie	i
 80088a2:	623b      	str	r3, [r7, #32]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00d      	beq.n	80088ce <xQueueGiveFromISR+0x54>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b6:	b672      	cpsid	i
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	b662      	cpsie	i
 80088c6:	61fb      	str	r3, [r7, #28]
}
 80088c8:	bf00      	nop
 80088ca:	bf00      	nop
 80088cc:	e7fd      	b.n	80088ca <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <xQueueGiveFromISR+0x64>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <xQueueGiveFromISR+0x68>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <xQueueGiveFromISR+0x6a>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	61bb      	str	r3, [r7, #24]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008904:	f002 fe1a 	bl	800b53c <vPortValidateInterruptPriority>
	__asm volatile
 8008908:	f3ef 8211 	mrs	r2, BASEPRI
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	b672      	cpsid	i
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	b662      	cpsie	i
 8008920:	617a      	str	r2, [r7, #20]
 8008922:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008924:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008926:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800892e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008934:	429a      	cmp	r2, r3
 8008936:	d22b      	bcs.n	8008990 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800893e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800894a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d112      	bne.n	800897a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d016      	beq.n	800898a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895e:	3324      	adds	r3, #36	@ 0x24
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fb39 	bl	8009fd8 <xTaskRemoveFromEventList>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00e      	beq.n	800898a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2201      	movs	r2, #1
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	e007      	b.n	800898a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800897a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800897e:	3301      	adds	r3, #1
 8008980:	b2db      	uxtb	r3, r3
 8008982:	b25a      	sxtb	r2, r3
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800898a:	2301      	movs	r3, #1
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
 800898e:	e001      	b.n	8008994 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008990:	2300      	movs	r3, #0
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
 8008994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008996:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f383 8811 	msr	BASEPRI, r3
}
 800899e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3738      	adds	r7, #56	@ 0x38
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08c      	sub	sp, #48	@ 0x30
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <xQueueReceive+0x36>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	b672      	cpsid	i
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	b662      	cpsie	i
 80089da:	623b      	str	r3, [r7, #32]
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <xQueueReceive+0x44>
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d101      	bne.n	80089f4 <xQueueReceive+0x48>
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <xQueueReceive+0x4a>
 80089f4:	2300      	movs	r3, #0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10d      	bne.n	8008a16 <xQueueReceive+0x6a>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	b672      	cpsid	i
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	b662      	cpsie	i
 8008a0e:	61fb      	str	r3, [r7, #28]
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	e7fd      	b.n	8008a12 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a16:	f001 fd8b 	bl	800a530 <xTaskGetSchedulerState>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <xQueueReceive+0x7a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <xQueueReceive+0x7e>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e000      	b.n	8008a2c <xQueueReceive+0x80>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d10d      	bne.n	8008a4c <xQueueReceive+0xa0>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	b672      	cpsid	i
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	b662      	cpsie	i
 8008a44:	61bb      	str	r3, [r7, #24]
}
 8008a46:	bf00      	nop
 8008a48:	bf00      	nop
 8008a4a:	e7fd      	b.n	8008a48 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a4c:	f002 fc8e 	bl	800b36c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d01f      	beq.n	8008a9c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a60:	f000 fc00 	bl	8009264 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a66:	1e5a      	subs	r2, r3, #1
 8008a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00f      	beq.n	8008a94 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a76:	3310      	adds	r3, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f001 faad 	bl	8009fd8 <xTaskRemoveFromEventList>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d007      	beq.n	8008a94 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a84:	4b3c      	ldr	r3, [pc, #240]	@ (8008b78 <xQueueReceive+0x1cc>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a94:	f002 fca0 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e069      	b.n	8008b70 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d103      	bne.n	8008aaa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aa2:	f002 fc99 	bl	800b3d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e062      	b.n	8008b70 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ab0:	f107 0310 	add.w	r3, r7, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 faf5 	bl	800a0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aba:	2301      	movs	r3, #1
 8008abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008abe:	f002 fc8b 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ac2:	f000 ffb9 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ac6:	f002 fc51 	bl	800b36c <vPortEnterCritical>
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ad0:	b25b      	sxtb	r3, r3
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d103      	bne.n	8008ae0 <xQueueReceive+0x134>
 8008ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ae6:	b25b      	sxtb	r3, r3
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d103      	bne.n	8008af6 <xQueueReceive+0x14a>
 8008aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008af6:	f002 fc6f 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008afa:	1d3a      	adds	r2, r7, #4
 8008afc:	f107 0310 	add.w	r3, r7, #16
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fae4 	bl	800a0d0 <xTaskCheckForTimeOut>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d123      	bne.n	8008b56 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b10:	f000 fc20 	bl	8009354 <prvIsQueueEmpty>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d017      	beq.n	8008b4a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b1c:	3324      	adds	r3, #36	@ 0x24
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fa02 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b2a:	f000 fbc1 	bl	80092b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b2e:	f000 ff91 	bl	8009a54 <xTaskResumeAll>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d189      	bne.n	8008a4c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8008b38:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <xQueueReceive+0x1cc>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	e780      	b.n	8008a4c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b4c:	f000 fbb0 	bl	80092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b50:	f000 ff80 	bl	8009a54 <xTaskResumeAll>
 8008b54:	e77a      	b.n	8008a4c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b58:	f000 fbaa 	bl	80092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b5c:	f000 ff7a 	bl	8009a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b62:	f000 fbf7 	bl	8009354 <prvIsQueueEmpty>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f43f af6f 	beq.w	8008a4c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3730      	adds	r7, #48	@ 0x30
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08e      	sub	sp, #56	@ 0x38
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d10d      	bne.n	8008bb4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	b672      	cpsid	i
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	b662      	cpsie	i
 8008bac:	623b      	str	r3, [r7, #32]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d00d      	beq.n	8008bd8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8008bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc0:	b672      	cpsid	i
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	b662      	cpsie	i
 8008bd0:	61fb      	str	r3, [r7, #28]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bd8:	f001 fcaa 	bl	800a530 <xTaskGetSchedulerState>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <xQueueSemaphoreTake+0x6c>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <xQueueSemaphoreTake+0x70>
 8008be8:	2301      	movs	r3, #1
 8008bea:	e000      	b.n	8008bee <xQueueSemaphoreTake+0x72>
 8008bec:	2300      	movs	r3, #0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8008bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf6:	b672      	cpsid	i
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	b662      	cpsie	i
 8008c06:	61bb      	str	r3, [r7, #24]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c0e:	f002 fbad 	bl	800b36c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d024      	beq.n	8008c68 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c20:	1e5a      	subs	r2, r3, #1
 8008c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c24:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d104      	bne.n	8008c38 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c2e:	f001 febd 	bl	800a9ac <pvTaskIncrementMutexHeldCount>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00f      	beq.n	8008c60 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c42:	3310      	adds	r3, #16
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f9c7 	bl	8009fd8 <xTaskRemoveFromEventList>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c50:	4b55      	ldr	r3, [pc, #340]	@ (8008da8 <xQueueSemaphoreTake+0x22c>)
 8008c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c60:	f002 fbba 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e09a      	b.n	8008d9e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d114      	bne.n	8008c98 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00d      	beq.n	8008c90 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	b672      	cpsid	i
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	b662      	cpsie	i
 8008c88:	617b      	str	r3, [r7, #20]
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	e7fd      	b.n	8008c8c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c90:	f002 fba2 	bl	800b3d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c94:	2300      	movs	r3, #0
 8008c96:	e082      	b.n	8008d9e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 f9fe 	bl	800a0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cac:	f002 fb94 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cb0:	f000 fec2 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cb4:	f002 fb5a 	bl	800b36c <vPortEnterCritical>
 8008cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cbe:	b25b      	sxtb	r3, r3
 8008cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc4:	d103      	bne.n	8008cce <xQueueSemaphoreTake+0x152>
 8008cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cda:	d103      	bne.n	8008ce4 <xQueueSemaphoreTake+0x168>
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ce4:	f002 fb78 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ce8:	463a      	mov	r2, r7
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f001 f9ed 	bl	800a0d0 <xTaskCheckForTimeOut>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d132      	bne.n	8008d62 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008cfe:	f000 fb29 	bl	8009354 <prvIsQueueEmpty>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d026      	beq.n	8008d56 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8008d10:	f002 fb2c 	bl	800b36c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f001 fc27 	bl	800a56c <xTaskPriorityInherit>
 8008d1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008d20:	f002 fb5a 	bl	800b3d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d26:	3324      	adds	r3, #36	@ 0x24
 8008d28:	683a      	ldr	r2, [r7, #0]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f8fd 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d34:	f000 fabc 	bl	80092b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d38:	f000 fe8c 	bl	8009a54 <xTaskResumeAll>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f47f af65 	bne.w	8008c0e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8008d44:	4b18      	ldr	r3, [pc, #96]	@ (8008da8 <xQueueSemaphoreTake+0x22c>)
 8008d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	e75b      	b.n	8008c0e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d58:	f000 faaa 	bl	80092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d5c:	f000 fe7a 	bl	8009a54 <xTaskResumeAll>
 8008d60:	e755      	b.n	8008c0e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d64:	f000 faa4 	bl	80092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d68:	f000 fe74 	bl	8009a54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d6e:	f000 faf1 	bl	8009354 <prvIsQueueEmpty>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f43f af4a 	beq.w	8008c0e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00d      	beq.n	8008d9c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8008d80:	f002 faf4 	bl	800b36c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d86:	f000 f9eb 	bl	8009160 <prvGetDisinheritPriorityAfterTimeout>
 8008d8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fcc6 	bl	800a724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d98:	f002 fb1e 	bl	800b3d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3738      	adds	r7, #56	@ 0x38
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	e000ed04 	.word	0xe000ed04

08008dac <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08e      	sub	sp, #56	@ 0x38
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10d      	bne.n	8008de2 <xQueuePeek+0x36>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <xQueuePeek+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <xQueuePeek+0x44>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <xQueuePeek+0x48>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <xQueuePeek+0x4a>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10d      	bne.n	8008e16 <xQueuePeek+0x6a>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfe:	b672      	cpsid	i
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	b662      	cpsie	i
 8008e0e:	623b      	str	r3, [r7, #32]
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	e7fd      	b.n	8008e12 <xQueuePeek+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e16:	f001 fb8b 	bl	800a530 <xTaskGetSchedulerState>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <xQueuePeek+0x7a>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <xQueuePeek+0x7e>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <xQueuePeek+0x80>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10d      	bne.n	8008e4c <xQueuePeek+0xa0>
	__asm volatile
 8008e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e34:	b672      	cpsid	i
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	b662      	cpsie	i
 8008e44:	61fb      	str	r3, [r7, #28]
}
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	e7fd      	b.n	8008e48 <xQueuePeek+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e4c:	f002 fa8e 	bl	800b36c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d021      	beq.n	8008ea0 <xQueuePeek+0xf4>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	62bb      	str	r3, [r7, #40]	@ 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e62:	68b9      	ldr	r1, [r7, #8]
 8008e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e66:	f000 f9fd 	bl	8009264 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008e6e:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00f      	beq.n	8008e98 <xQueuePeek+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	3324      	adds	r3, #36	@ 0x24
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f001 f8ab 	bl	8009fd8 <xTaskRemoveFromEventList>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <xQueuePeek+0xec>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e88:	4b3c      	ldr	r3, [pc, #240]	@ (8008f7c <xQueuePeek+0x1d0>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e98:	f002 fa9e 	bl	800b3d8 <vPortExitCritical>
				return pdPASS;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e069      	b.n	8008f74 <xQueuePeek+0x1c8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <xQueuePeek+0x102>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ea6:	f002 fa97 	bl	800b3d8 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e062      	b.n	8008f74 <xQueuePeek+0x1c8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <xQueuePeek+0x116>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb4:	f107 0314 	add.w	r3, r7, #20
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f001 f8f3 	bl	800a0a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ec2:	f002 fa89 	bl	800b3d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec6:	f000 fdb7 	bl	8009a38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eca:	f002 fa4f 	bl	800b36c <vPortEnterCritical>
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d103      	bne.n	8008ee4 <xQueuePeek+0x138>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008eea:	b25b      	sxtb	r3, r3
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <xQueuePeek+0x14e>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008efa:	f002 fa6d 	bl	800b3d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008efe:	1d3a      	adds	r2, r7, #4
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f001 f8e2 	bl	800a0d0 <xTaskCheckForTimeOut>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d123      	bne.n	8008f5a <xQueuePeek+0x1ae>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f14:	f000 fa1e 	bl	8009354 <prvIsQueueEmpty>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d017      	beq.n	8008f4e <xQueuePeek+0x1a2>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f20:	3324      	adds	r3, #36	@ 0x24
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f001 f800 	bl	8009f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f2e:	f000 f9bf 	bl	80092b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f32:	f000 fd8f 	bl	8009a54 <xTaskResumeAll>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d187      	bne.n	8008e4c <xQueuePeek+0xa0>
				{
					portYIELD_WITHIN_API();
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <xQueuePeek+0x1d0>)
 8008f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	e77e      	b.n	8008e4c <xQueuePeek+0xa0>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8008f4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f50:	f000 f9ae 	bl	80092b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f54:	f000 fd7e 	bl	8009a54 <xTaskResumeAll>
 8008f58:	e778      	b.n	8008e4c <xQueuePeek+0xa0>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8008f5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f5c:	f000 f9a8 	bl	80092b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f60:	f000 fd78 	bl	8009a54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f66:	f000 f9f5 	bl	8009354 <prvIsQueueEmpty>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f43f af6d 	beq.w	8008e4c <xQueuePeek+0xa0>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f72:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3738      	adds	r7, #56	@ 0x38
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	e000ed04 	.word	0xe000ed04

08008f80 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	@ 0x38
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	b672      	cpsid	i
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	b662      	cpsie	i
 8008faa:	623b      	str	r3, [r7, #32]
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	e7fd      	b.n	8008fae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d103      	bne.n	8008fc0 <xQueueReceiveFromISR+0x40>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <xQueueReceiveFromISR+0x44>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <xQueueReceiveFromISR+0x46>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10d      	bne.n	8008fe6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	b672      	cpsid	i
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	b662      	cpsie	i
 8008fde:	61fb      	str	r3, [r7, #28]
}
 8008fe0:	bf00      	nop
 8008fe2:	bf00      	nop
 8008fe4:	e7fd      	b.n	8008fe2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe6:	f002 faa9 	bl	800b53c <vPortValidateInterruptPriority>
	__asm volatile
 8008fea:	f3ef 8211 	mrs	r2, BASEPRI
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	61ba      	str	r2, [r7, #24]
 8009004:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009006:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009008:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800900a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02f      	beq.n	8009076 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800901c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009024:	f000 f91e 	bl	8009264 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009030:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009038:	d112      	bne.n	8009060 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d016      	beq.n	8009070 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009044:	3310      	adds	r3, #16
 8009046:	4618      	mov	r0, r3
 8009048:	f000 ffc6 	bl	8009fd8 <xTaskRemoveFromEventList>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00e      	beq.n	8009070 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e007      	b.n	8009070 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009060:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009064:	3301      	adds	r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	b25a      	sxtb	r2, r3
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009070:	2301      	movs	r3, #1
 8009072:	637b      	str	r3, [r7, #52]	@ 0x34
 8009074:	e001      	b.n	800907a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8009076:	2300      	movs	r3, #0
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f383 8811 	msr	BASEPRI, r3
}
 8009084:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009088:	4618      	mov	r0, r3
 800908a:	3738      	adds	r7, #56	@ 0x38
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10d      	bne.n	80090ba <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	b672      	cpsid	i
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	b662      	cpsie	i
 80090b2:	60bb      	str	r3, [r7, #8]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80090ba:	f002 f957 	bl	800b36c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80090c4:	f002 f988 	bl	800b3d8 <vPortExitCritical>

	return uxReturn;
 80090c8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b087      	sub	sp, #28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10d      	bne.n	8009100 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 80090e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e8:	b672      	cpsid	i
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	b662      	cpsie	i
 80090f8:	60fb      	str	r3, [r7, #12]
}
 80090fa:	bf00      	nop
 80090fc:	bf00      	nop
 80090fe:	e7fd      	b.n	80090fc <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009104:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009106:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10d      	bne.n	8009142 <vQueueDelete+0x2e>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912a:	b672      	cpsid	i
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	b662      	cpsie	i
 800913a:	60bb      	str	r3, [r7, #8]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 f95e 	bl	8009404 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f002 fb06 	bl	800b764 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d006      	beq.n	800917e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e001      	b.n	8009182 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009182:	68fb      	ldr	r3, [r7, #12]
	}
 8009184:	4618      	mov	r0, r3
 8009186:	3714      	adds	r7, #20
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d10d      	bne.n	80091ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d14d      	bne.n	8009252 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 fa3e 	bl	800a63c <xTaskPriorityDisinherit>
 80091c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	609a      	str	r2, [r3, #8]
 80091c8:	e043      	b.n	8009252 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d119      	bne.n	8009204 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6858      	ldr	r0, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d8:	461a      	mov	r2, r3
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	f010 fe01 	bl	8019de2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e8:	441a      	add	r2, r3
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685a      	ldr	r2, [r3, #4]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d32b      	bcc.n	8009252 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	605a      	str	r2, [r3, #4]
 8009202:	e026      	b.n	8009252 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68d8      	ldr	r0, [r3, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920c:	461a      	mov	r2, r3
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	f010 fde7 	bl	8019de2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800921c:	425b      	negs	r3, r3
 800921e:	441a      	add	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	429a      	cmp	r2, r3
 800922e:	d207      	bcs.n	8009240 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009238:	425b      	negs	r3, r3
 800923a:	441a      	add	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d105      	bne.n	8009252 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3b01      	subs	r3, #1
 8009250:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1c5a      	adds	r2, r3, #1
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927e:	441a      	add	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	429a      	cmp	r2, r3
 800928e:	d303      	bcc.n	8009298 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68d9      	ldr	r1, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a0:	461a      	mov	r2, r3
 80092a2:	6838      	ldr	r0, [r7, #0]
 80092a4:	f010 fd9d 	bl	8019de2 <memcpy>
	}
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80092b8:	f002 f858 	bl	800b36c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80092c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092c4:	e011      	b.n	80092ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d012      	beq.n	80092f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3324      	adds	r3, #36	@ 0x24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fe80 	bl	8009fd8 <xTaskRemoveFromEventList>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092de:	f000 ff5f 	bl	800a1a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	dce9      	bgt.n	80092c6 <prvUnlockQueue+0x16>
 80092f2:	e000      	b.n	80092f6 <prvUnlockQueue+0x46>
					break;
 80092f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	22ff      	movs	r2, #255	@ 0xff
 80092fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80092fe:	f002 f86b 	bl	800b3d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009302:	f002 f833 	bl	800b36c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800930c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800930e:	e011      	b.n	8009334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3310      	adds	r3, #16
 800931c:	4618      	mov	r0, r3
 800931e:	f000 fe5b 	bl	8009fd8 <xTaskRemoveFromEventList>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009328:	f000 ff3a 	bl	800a1a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	3b01      	subs	r3, #1
 8009330:	b2db      	uxtb	r3, r3
 8009332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dce9      	bgt.n	8009310 <prvUnlockQueue+0x60>
 800933c:	e000      	b.n	8009340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800933e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	22ff      	movs	r2, #255	@ 0xff
 8009344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009348:	f002 f846 	bl	800b3d8 <vPortExitCritical>
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800935c:	f002 f806 	bl	800b36c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	d102      	bne.n	800936e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009368:	2301      	movs	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e001      	b.n	8009372 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800936e:	2300      	movs	r3, #0
 8009370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009372:	f002 f831 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 8009376:	68fb      	ldr	r3, [r7, #12]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009388:	f001 fff0 	bl	800b36c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009394:	429a      	cmp	r2, r3
 8009396:	d102      	bne.n	800939e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	e001      	b.n	80093a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80093a2:	f002 f819 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 80093a6:	68fb      	ldr	r3, [r7, #12]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e014      	b.n	80093ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80093c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009400 <vQueueAddToRegistry+0x50>)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10b      	bne.n	80093e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80093cc:	490c      	ldr	r1, [pc, #48]	@ (8009400 <vQueueAddToRegistry+0x50>)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80093d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009400 <vQueueAddToRegistry+0x50>)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093e2:	e006      	b.n	80093f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	d9e7      	bls.n	80093c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr
 80093fe:	bf00      	nop
 8009400:	20004568 	.word	0x20004568

08009404 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
 8009410:	e016      	b.n	8009440 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009412:	4a10      	ldr	r2, [pc, #64]	@ (8009454 <vQueueUnregisterQueue+0x50>)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	4413      	add	r3, r2
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	429a      	cmp	r2, r3
 8009420:	d10b      	bne.n	800943a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009422:	4a0c      	ldr	r2, [pc, #48]	@ (8009454 <vQueueUnregisterQueue+0x50>)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2100      	movs	r1, #0
 8009428:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800942c:	4a09      	ldr	r2, [pc, #36]	@ (8009454 <vQueueUnregisterQueue+0x50>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	4413      	add	r3, r2
 8009434:	2200      	movs	r2, #0
 8009436:	605a      	str	r2, [r3, #4]
				break;
 8009438:	e006      	b.n	8009448 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3301      	adds	r3, #1
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b07      	cmp	r3, #7
 8009444:	d9e5      	bls.n	8009412 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	20004568 	.word	0x20004568

08009458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009468:	f001 ff80 	bl	800b36c <vPortEnterCritical>
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009472:	b25b      	sxtb	r3, r3
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009478:	d103      	bne.n	8009482 <vQueueWaitForMessageRestricted+0x2a>
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009488:	b25b      	sxtb	r3, r3
 800948a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948e:	d103      	bne.n	8009498 <vQueueWaitForMessageRestricted+0x40>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	2200      	movs	r2, #0
 8009494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009498:	f001 ff9e 	bl	800b3d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d106      	bne.n	80094b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	3324      	adds	r3, #36	@ 0x24
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fd65 	bl	8009f7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff fefc 	bl	80092b0 <prvUnlockQueue>
	}
 80094b8:	bf00      	nop
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	@ 0x38
 80094c4:	af04      	add	r7, sp, #16
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10d      	bne.n	80094f0 <xTaskCreateStatic+0x30>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094d8:	b672      	cpsid	i
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	b662      	cpsie	i
 80094e8:	623b      	str	r3, [r7, #32]
}
 80094ea:	bf00      	nop
 80094ec:	bf00      	nop
 80094ee:	e7fd      	b.n	80094ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <xTaskCreateStatic+0x52>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094fa:	b672      	cpsid	i
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	b662      	cpsie	i
 800950a:	61fb      	str	r3, [r7, #28]
}
 800950c:	bf00      	nop
 800950e:	bf00      	nop
 8009510:	e7fd      	b.n	800950e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009512:	235c      	movs	r3, #92	@ 0x5c
 8009514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b5c      	cmp	r3, #92	@ 0x5c
 800951a:	d00d      	beq.n	8009538 <xTaskCreateStatic+0x78>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009520:	b672      	cpsid	i
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	b662      	cpsie	i
 8009530:	61bb      	str	r3, [r7, #24]
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009538:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800953a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953c:	2b00      	cmp	r3, #0
 800953e:	d01e      	beq.n	800957e <xTaskCreateStatic+0xbe>
 8009540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009542:	2b00      	cmp	r3, #0
 8009544:	d01b      	beq.n	800957e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800954e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009552:	2202      	movs	r2, #2
 8009554:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009558:	2300      	movs	r3, #0
 800955a:	9303      	str	r3, [sp, #12]
 800955c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800955e:	9302      	str	r3, [sp, #8]
 8009560:	f107 0314 	add.w	r3, r7, #20
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f850 	bl	8009616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009576:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009578:	f000 f8e0 	bl	800973c <prvAddNewTaskToReadyList>
 800957c:	e001      	b.n	8009582 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009582:	697b      	ldr	r3, [r7, #20]
	}
 8009584:	4618      	mov	r0, r3
 8009586:	3728      	adds	r7, #40	@ 0x28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	@ 0x30
 8009590:	af04      	add	r7, sp, #16
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f002 f811 	bl	800b5c8 <pvPortMalloc>
 80095a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00e      	beq.n	80095cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095ae:	205c      	movs	r0, #92	@ 0x5c
 80095b0:	f002 f80a 	bl	800b5c8 <pvPortMalloc>
 80095b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80095c2:	e005      	b.n	80095d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f002 f8cd 	bl	800b764 <vPortFree>
 80095ca:	e001      	b.n	80095d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d017      	beq.n	8009606 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	2300      	movs	r3, #0
 80095e2:	9303      	str	r3, [sp, #12]
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	9302      	str	r3, [sp, #8]
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	9301      	str	r3, [sp, #4]
 80095ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	68b9      	ldr	r1, [r7, #8]
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f80e 	bl	8009616 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095fa:	69f8      	ldr	r0, [r7, #28]
 80095fc:	f000 f89e 	bl	800973c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009600:	2301      	movs	r3, #1
 8009602:	61bb      	str	r3, [r7, #24]
 8009604:	e002      	b.n	800960c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009606:	f04f 33ff 	mov.w	r3, #4294967295
 800960a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800960c:	69bb      	ldr	r3, [r7, #24]
	}
 800960e:	4618      	mov	r0, r3
 8009610:	3720      	adds	r7, #32
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b088      	sub	sp, #32
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	60b9      	str	r1, [r7, #8]
 8009620:	607a      	str	r2, [r7, #4]
 8009622:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009626:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	461a      	mov	r2, r3
 800962e:	21a5      	movs	r1, #165	@ 0xa5
 8009630:	f010 fb1e 	bl	8019c70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800963e:	440b      	add	r3, r1
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f023 0307 	bic.w	r3, r3, #7
 800964c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00d      	beq.n	8009674 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	b672      	cpsid	i
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	b662      	cpsie	i
 800966c:	617b      	str	r3, [r7, #20]
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	e7fd      	b.n	8009670 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d01f      	beq.n	80096ba <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800967a:	2300      	movs	r3, #0
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e012      	b.n	80096a6 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	4413      	add	r3, r2
 8009686:	7819      	ldrb	r1, [r3, #0]
 8009688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	3334      	adds	r3, #52	@ 0x34
 8009690:	460a      	mov	r2, r1
 8009692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d006      	beq.n	80096ae <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	3301      	adds	r3, #1
 80096a4:	61fb      	str	r3, [r7, #28]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	2b0f      	cmp	r3, #15
 80096aa:	d9e9      	bls.n	8009680 <prvInitialiseNewTask+0x6a>
 80096ac:	e000      	b.n	80096b0 <prvInitialiseNewTask+0x9a>
			{
				break;
 80096ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80096b8:	e003      	b.n	80096c2 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c4:	2b37      	cmp	r3, #55	@ 0x37
 80096c6:	d901      	bls.n	80096cc <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096c8:	2337      	movs	r3, #55	@ 0x37
 80096ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80096d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096da:	2200      	movs	r2, #0
 80096dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	3304      	adds	r3, #4
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fbfc 	bl	8007ee0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	3318      	adds	r3, #24
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe fbf7 	bl	8007ee0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80096fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009706:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970a:	2200      	movs	r2, #0
 800970c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	68f9      	ldr	r1, [r7, #12]
 800971a:	69b8      	ldr	r0, [r7, #24]
 800971c:	f001 fd16 	bl	800b14c <pxPortInitialiseStack>
 8009720:	4602      	mov	r2, r0
 8009722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009724:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009732:	bf00      	nop
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009744:	f001 fe12 	bl	800b36c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009748:	4b2d      	ldr	r3, [pc, #180]	@ (8009800 <prvAddNewTaskToReadyList+0xc4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3301      	adds	r3, #1
 800974e:	4a2c      	ldr	r2, [pc, #176]	@ (8009800 <prvAddNewTaskToReadyList+0xc4>)
 8009750:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009752:	4b2c      	ldr	r3, [pc, #176]	@ (8009804 <prvAddNewTaskToReadyList+0xc8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800975a:	4a2a      	ldr	r2, [pc, #168]	@ (8009804 <prvAddNewTaskToReadyList+0xc8>)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009760:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <prvAddNewTaskToReadyList+0xc4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d110      	bne.n	800978a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009768:	f000 fd3e 	bl	800a1e8 <prvInitialiseTaskLists>
 800976c:	e00d      	b.n	800978a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800976e:	4b26      	ldr	r3, [pc, #152]	@ (8009808 <prvAddNewTaskToReadyList+0xcc>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009776:	4b23      	ldr	r3, [pc, #140]	@ (8009804 <prvAddNewTaskToReadyList+0xc8>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	429a      	cmp	r2, r3
 8009782:	d802      	bhi.n	800978a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009784:	4a1f      	ldr	r2, [pc, #124]	@ (8009804 <prvAddNewTaskToReadyList+0xc8>)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800978a:	4b20      	ldr	r3, [pc, #128]	@ (800980c <prvAddNewTaskToReadyList+0xd0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	4a1e      	ldr	r2, [pc, #120]	@ (800980c <prvAddNewTaskToReadyList+0xd0>)
 8009792:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009794:	4b1d      	ldr	r3, [pc, #116]	@ (800980c <prvAddNewTaskToReadyList+0xd0>)
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009810 <prvAddNewTaskToReadyList+0xd4>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d903      	bls.n	80097b0 <prvAddNewTaskToReadyList+0x74>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <prvAddNewTaskToReadyList+0xd4>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b4:	4613      	mov	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4a15      	ldr	r2, [pc, #84]	@ (8009814 <prvAddNewTaskToReadyList+0xd8>)
 80097be:	441a      	add	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe fb97 	bl	8007efa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097cc:	f001 fe04 	bl	800b3d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <prvAddNewTaskToReadyList+0xcc>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00e      	beq.n	80097f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009804 <prvAddNewTaskToReadyList+0xc8>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d207      	bcs.n	80097f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <prvAddNewTaskToReadyList+0xdc>)
 80097e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	20004a7c 	.word	0x20004a7c
 8009804:	200045a8 	.word	0x200045a8
 8009808:	20004a88 	.word	0x20004a88
 800980c:	20004a98 	.word	0x20004a98
 8009810:	20004a84 	.word	0x20004a84
 8009814:	200045ac 	.word	0x200045ac
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d01a      	beq.n	8009864 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800982e:	4b15      	ldr	r3, [pc, #84]	@ (8009884 <vTaskDelay+0x68>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <vTaskDelay+0x36>
	__asm volatile
 8009836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983a:	b672      	cpsid	i
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	b662      	cpsie	i
 800984a:	60bb      	str	r3, [r7, #8]
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	e7fd      	b.n	800984e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009852:	f000 f8f1 	bl	8009a38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009856:	2100      	movs	r1, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f001 f8bb 	bl	800a9d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800985e:	f000 f8f9 	bl	8009a54 <xTaskResumeAll>
 8009862:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d107      	bne.n	800987a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800986a:	4b07      	ldr	r3, [pc, #28]	@ (8009888 <vTaskDelay+0x6c>)
 800986c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20004aa4 	.word	0x20004aa4
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10d      	bne.n	80098ba <eTaskGetState+0x2e>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a2:	b672      	cpsid	i
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	b662      	cpsie	i
 80098b2:	60bb      	str	r3, [r7, #8]
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop
 80098b8:	e7fd      	b.n	80098b6 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80098ba:	4b24      	ldr	r3, [pc, #144]	@ (800994c <eTaskGetState+0xc0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d102      	bne.n	80098ca <eTaskGetState+0x3e>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80098c4:	2300      	movs	r3, #0
 80098c6:	77fb      	strb	r3, [r7, #31]
 80098c8:	e03a      	b.n	8009940 <eTaskGetState+0xb4>
		}
		else
		{
			taskENTER_CRITICAL();
 80098ca:	f001 fd4f 	bl	800b36c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80098d4:	4b1e      	ldr	r3, [pc, #120]	@ (8009950 <eTaskGetState+0xc4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80098da:	4b1e      	ldr	r3, [pc, #120]	@ (8009954 <eTaskGetState+0xc8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80098e0:	f001 fd7a 	bl	800b3d8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098e4:	697a      	ldr	r2, [r7, #20]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d003      	beq.n	80098f4 <eTaskGetState+0x68>
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d102      	bne.n	80098fa <eTaskGetState+0x6e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80098f4:	2302      	movs	r3, #2
 80098f6:	77fb      	strb	r3, [r7, #31]
 80098f8:	e022      	b.n	8009940 <eTaskGetState+0xb4>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4a16      	ldr	r2, [pc, #88]	@ (8009958 <eTaskGetState+0xcc>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d112      	bne.n	8009928 <eTaskGetState+0x9c>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <eTaskGetState+0x96>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b01      	cmp	r3, #1
 8009914:	d102      	bne.n	800991c <eTaskGetState+0x90>
							{
								eReturn = eBlocked;
 8009916:	2302      	movs	r3, #2
 8009918:	77fb      	strb	r3, [r7, #31]
 800991a:	e011      	b.n	8009940 <eTaskGetState+0xb4>
							}
							else
							{
								eReturn = eSuspended;
 800991c:	2303      	movs	r3, #3
 800991e:	77fb      	strb	r3, [r7, #31]
 8009920:	e00e      	b.n	8009940 <eTaskGetState+0xb4>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009922:	2302      	movs	r3, #2
 8009924:	77fb      	strb	r3, [r7, #31]
 8009926:	e00b      	b.n	8009940 <eTaskGetState+0xb4>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4a0c      	ldr	r2, [pc, #48]	@ (800995c <eTaskGetState+0xd0>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d002      	beq.n	8009936 <eTaskGetState+0xaa>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009936:	2304      	movs	r3, #4
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e001      	b.n	8009940 <eTaskGetState+0xb4>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800993c:	2301      	movs	r3, #1
 800993e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009940:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009942:	4618      	mov	r0, r3
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	200045a8 	.word	0x200045a8
 8009950:	20004a34 	.word	0x20004a34
 8009954:	20004a38 	.word	0x20004a38
 8009958:	20004a68 	.word	0x20004a68
 800995c:	20004a50 	.word	0x20004a50

08009960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800996e:	463a      	mov	r2, r7
 8009970:	1d39      	adds	r1, r7, #4
 8009972:	f107 0308 	add.w	r3, r7, #8
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe fa5e 	bl	8007e38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	9202      	str	r2, [sp, #8]
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	2300      	movs	r3, #0
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	460a      	mov	r2, r1
 800998e:	4924      	ldr	r1, [pc, #144]	@ (8009a20 <vTaskStartScheduler+0xc0>)
 8009990:	4824      	ldr	r0, [pc, #144]	@ (8009a24 <vTaskStartScheduler+0xc4>)
 8009992:	f7ff fd95 	bl	80094c0 <xTaskCreateStatic>
 8009996:	4603      	mov	r3, r0
 8009998:	4a23      	ldr	r2, [pc, #140]	@ (8009a28 <vTaskStartScheduler+0xc8>)
 800999a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800999c:	4b22      	ldr	r3, [pc, #136]	@ (8009a28 <vTaskStartScheduler+0xc8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	e001      	b.n	80099ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d102      	bne.n	80099ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099b4:	f001 f862 	bl	800aa7c <xTimerCreateTimerTask>
 80099b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d118      	bne.n	80099f2 <vTaskStartScheduler+0x92>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099c4:	b672      	cpsid	i
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	b662      	cpsie	i
 80099d4:	613b      	str	r3, [r7, #16]
}
 80099d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099d8:	4b14      	ldr	r3, [pc, #80]	@ (8009a2c <vTaskStartScheduler+0xcc>)
 80099da:	f04f 32ff 	mov.w	r2, #4294967295
 80099de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099e0:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <vTaskStartScheduler+0xd0>)
 80099e2:	2201      	movs	r2, #1
 80099e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099e6:	4b13      	ldr	r3, [pc, #76]	@ (8009a34 <vTaskStartScheduler+0xd4>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099ec:	f001 fc40 	bl	800b270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099f0:	e011      	b.n	8009a16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f8:	d10d      	bne.n	8009a16 <vTaskStartScheduler+0xb6>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fe:	b672      	cpsid	i
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	b662      	cpsie	i
 8009a0e:	60fb      	str	r3, [r7, #12]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <vTaskStartScheduler+0xb2>
}
 8009a16:	bf00      	nop
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	0801c19c 	.word	0x0801c19c
 8009a24:	0800a1b9 	.word	0x0800a1b9
 8009a28:	20004aa0 	.word	0x20004aa0
 8009a2c:	20004a9c 	.word	0x20004a9c
 8009a30:	20004a88 	.word	0x20004a88
 8009a34:	20004a80 	.word	0x20004a80

08009a38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009a3c:	4b04      	ldr	r3, [pc, #16]	@ (8009a50 <vTaskSuspendAll+0x18>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	4a03      	ldr	r2, [pc, #12]	@ (8009a50 <vTaskSuspendAll+0x18>)
 8009a44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009a46:	bf00      	nop
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	20004aa4 	.word	0x20004aa4

08009a54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a62:	4b43      	ldr	r3, [pc, #268]	@ (8009b70 <xTaskResumeAll+0x11c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10d      	bne.n	8009a86 <xTaskResumeAll+0x32>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6e:	b672      	cpsid	i
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	b662      	cpsie	i
 8009a7e:	603b      	str	r3, [r7, #0]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a86:	f001 fc71 	bl	800b36c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a8a:	4b39      	ldr	r3, [pc, #228]	@ (8009b70 <xTaskResumeAll+0x11c>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	4a37      	ldr	r2, [pc, #220]	@ (8009b70 <xTaskResumeAll+0x11c>)
 8009a92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a94:	4b36      	ldr	r3, [pc, #216]	@ (8009b70 <xTaskResumeAll+0x11c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d162      	bne.n	8009b62 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a9c:	4b35      	ldr	r3, [pc, #212]	@ (8009b74 <xTaskResumeAll+0x120>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d05e      	beq.n	8009b62 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa4:	e02f      	b.n	8009b06 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa6:	4b34      	ldr	r3, [pc, #208]	@ (8009b78 <xTaskResumeAll+0x124>)
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fa7e 	bl	8007fb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fe fa79 	bl	8007fb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b7c <xTaskResumeAll+0x128>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d903      	bls.n	8009ad6 <xTaskResumeAll+0x82>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8009b7c <xTaskResumeAll+0x128>)
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	4a27      	ldr	r2, [pc, #156]	@ (8009b80 <xTaskResumeAll+0x12c>)
 8009ae4:	441a      	add	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	4619      	mov	r1, r3
 8009aec:	4610      	mov	r0, r2
 8009aee:	f7fe fa04 	bl	8007efa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af6:	4b23      	ldr	r3, [pc, #140]	@ (8009b84 <xTaskResumeAll+0x130>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d302      	bcc.n	8009b06 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8009b00:	4b21      	ldr	r3, [pc, #132]	@ (8009b88 <xTaskResumeAll+0x134>)
 8009b02:	2201      	movs	r2, #1
 8009b04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b06:	4b1c      	ldr	r3, [pc, #112]	@ (8009b78 <xTaskResumeAll+0x124>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d1cb      	bne.n	8009aa6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d001      	beq.n	8009b18 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b14:	f000 fcdc 	bl	800a4d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009b18:	4b1c      	ldr	r3, [pc, #112]	@ (8009b8c <xTaskResumeAll+0x138>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d010      	beq.n	8009b46 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b24:	f000 f8e6 	bl	8009cf4 <xTaskIncrementTick>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8009b2e:	4b16      	ldr	r3, [pc, #88]	@ (8009b88 <xTaskResumeAll+0x134>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f1      	bne.n	8009b24 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8009b40:	4b12      	ldr	r3, [pc, #72]	@ (8009b8c <xTaskResumeAll+0x138>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b46:	4b10      	ldr	r3, [pc, #64]	@ (8009b88 <xTaskResumeAll+0x134>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d009      	beq.n	8009b62 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b52:	4b0f      	ldr	r3, [pc, #60]	@ (8009b90 <xTaskResumeAll+0x13c>)
 8009b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b62:	f001 fc39 	bl	800b3d8 <vPortExitCritical>

	return xAlreadyYielded;
 8009b66:	68bb      	ldr	r3, [r7, #8]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	20004aa4 	.word	0x20004aa4
 8009b74:	20004a7c 	.word	0x20004a7c
 8009b78:	20004a3c 	.word	0x20004a3c
 8009b7c:	20004a84 	.word	0x20004a84
 8009b80:	200045ac 	.word	0x200045ac
 8009b84:	200045a8 	.word	0x200045a8
 8009b88:	20004a90 	.word	0x20004a90
 8009b8c:	20004a8c 	.word	0x20004a8c
 8009b90:	e000ed04 	.word	0xe000ed04

08009b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b9a:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <xTaskGetTickCount+0x1c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ba0:	687b      	ldr	r3, [r7, #4]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20004a80 	.word	0x20004a80

08009bb4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bba:	f001 fcbf 	bl	800b53c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bc2:	4b04      	ldr	r3, [pc, #16]	@ (8009bd4 <xTaskGetTickCountFromISR+0x20>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bc8:	683b      	ldr	r3, [r7, #0]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20004a80 	.word	0x20004a80

08009bd8 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
 8009be8:	2338      	movs	r3, #56	@ 0x38
 8009bea:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009bec:	f7ff ff24 	bl	8009a38 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8009cdc <uxTaskGetSystemState+0x104>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d368      	bcc.n	8009ccc <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	4613      	mov	r3, r2
 8009c04:	00db      	lsls	r3, r3, #3
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	1898      	adds	r0, r3, r2
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	4613      	mov	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4a31      	ldr	r2, [pc, #196]	@ (8009ce0 <uxTaskGetSystemState+0x108>)
 8009c1c:	4413      	add	r3, r2
 8009c1e:	2201      	movs	r2, #1
 8009c20:	4619      	mov	r1, r3
 8009c22:	f000 fbb5 	bl	800a390 <prvListTasksWithinSingleList>
 8009c26:	4602      	mov	r2, r0
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1e2      	bne.n	8009bfa <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4613      	mov	r3, r2
 8009c38:	00db      	lsls	r3, r3, #3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4413      	add	r3, r2
 8009c44:	4a27      	ldr	r2, [pc, #156]	@ (8009ce4 <uxTaskGetSystemState+0x10c>)
 8009c46:	6811      	ldr	r1, [r2, #0]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f000 fba0 	bl	800a390 <prvListTasksWithinSingleList>
 8009c50:	4602      	mov	r2, r0
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	4413      	add	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	461a      	mov	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce8 <uxTaskGetSystemState+0x110>)
 8009c6a:	6811      	ldr	r1, [r2, #0]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fb8e 	bl	800a390 <prvListTasksWithinSingleList>
 8009c74:	4602      	mov	r2, r0
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	4413      	add	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	00db      	lsls	r3, r3, #3
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	461a      	mov	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	4917      	ldr	r1, [pc, #92]	@ (8009cec <uxTaskGetSystemState+0x114>)
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fb7d 	bl	800a390 <prvListTasksWithinSingleList>
 8009c96:	4602      	mov	r2, r0
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	461a      	mov	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	4413      	add	r3, r2
 8009cae:	2203      	movs	r2, #3
 8009cb0:	490f      	ldr	r1, [pc, #60]	@ (8009cf0 <uxTaskGetSystemState+0x118>)
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 fb6c 	bl	800a390 <prvListTasksWithinSingleList>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8009ccc:	f7ff fec2 	bl	8009a54 <xTaskResumeAll>

		return uxTask;
 8009cd0:	697b      	ldr	r3, [r7, #20]
	}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20004a7c 	.word	0x20004a7c
 8009ce0:	200045ac 	.word	0x200045ac
 8009ce4:	20004a34 	.word	0x20004a34
 8009ce8:	20004a38 	.word	0x20004a38
 8009cec:	20004a50 	.word	0x20004a50
 8009cf0:	20004a68 	.word	0x20004a68

08009cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfe:	4b50      	ldr	r3, [pc, #320]	@ (8009e40 <xTaskIncrementTick+0x14c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f040 808c 	bne.w	8009e20 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d08:	4b4e      	ldr	r3, [pc, #312]	@ (8009e44 <xTaskIncrementTick+0x150>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d10:	4a4c      	ldr	r2, [pc, #304]	@ (8009e44 <xTaskIncrementTick+0x150>)
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d123      	bne.n	8009d64 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8009e48 <xTaskIncrementTick+0x154>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <xTaskIncrementTick+0x4e>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2a:	b672      	cpsid	i
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	b662      	cpsie	i
 8009d3a:	603b      	str	r3, [r7, #0]
}
 8009d3c:	bf00      	nop
 8009d3e:	bf00      	nop
 8009d40:	e7fd      	b.n	8009d3e <xTaskIncrementTick+0x4a>
 8009d42:	4b41      	ldr	r3, [pc, #260]	@ (8009e48 <xTaskIncrementTick+0x154>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	4b40      	ldr	r3, [pc, #256]	@ (8009e4c <xTaskIncrementTick+0x158>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8009e48 <xTaskIncrementTick+0x154>)
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	4a3e      	ldr	r2, [pc, #248]	@ (8009e4c <xTaskIncrementTick+0x158>)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	4b3e      	ldr	r3, [pc, #248]	@ (8009e50 <xTaskIncrementTick+0x15c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e50 <xTaskIncrementTick+0x15c>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	f000 fbb6 	bl	800a4d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d64:	4b3b      	ldr	r3, [pc, #236]	@ (8009e54 <xTaskIncrementTick+0x160>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d349      	bcc.n	8009e02 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d6e:	4b36      	ldr	r3, [pc, #216]	@ (8009e48 <xTaskIncrementTick+0x154>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d78:	4b36      	ldr	r3, [pc, #216]	@ (8009e54 <xTaskIncrementTick+0x160>)
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	601a      	str	r2, [r3, #0]
					break;
 8009d80:	e03f      	b.n	8009e02 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d82:	4b31      	ldr	r3, [pc, #196]	@ (8009e48 <xTaskIncrementTick+0x154>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d203      	bcs.n	8009da2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8009e54 <xTaskIncrementTick+0x160>)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009da0:	e02f      	b.n	8009e02 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f904 	bl	8007fb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3318      	adds	r3, #24
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fe f8fb 	bl	8007fb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc2:	4b25      	ldr	r3, [pc, #148]	@ (8009e58 <xTaskIncrementTick+0x164>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d903      	bls.n	8009dd2 <xTaskIncrementTick+0xde>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dce:	4a22      	ldr	r2, [pc, #136]	@ (8009e58 <xTaskIncrementTick+0x164>)
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4a1f      	ldr	r2, [pc, #124]	@ (8009e5c <xTaskIncrementTick+0x168>)
 8009de0:	441a      	add	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	3304      	adds	r3, #4
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f7fe f886 	bl	8007efa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e60 <xTaskIncrementTick+0x16c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d3b8      	bcc.n	8009d6e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e00:	e7b5      	b.n	8009d6e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e02:	4b17      	ldr	r3, [pc, #92]	@ (8009e60 <xTaskIncrementTick+0x16c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e08:	4914      	ldr	r1, [pc, #80]	@ (8009e5c <xTaskIncrementTick+0x168>)
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	440b      	add	r3, r1
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d907      	bls.n	8009e2a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	e004      	b.n	8009e2a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e20:	4b10      	ldr	r3, [pc, #64]	@ (8009e64 <xTaskIncrementTick+0x170>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	4a0f      	ldr	r2, [pc, #60]	@ (8009e64 <xTaskIncrementTick+0x170>)
 8009e28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009e68 <xTaskIncrementTick+0x174>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009e32:	2301      	movs	r3, #1
 8009e34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e36:	697b      	ldr	r3, [r7, #20]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20004aa4 	.word	0x20004aa4
 8009e44:	20004a80 	.word	0x20004a80
 8009e48:	20004a34 	.word	0x20004a34
 8009e4c:	20004a38 	.word	0x20004a38
 8009e50:	20004a94 	.word	0x20004a94
 8009e54:	20004a9c 	.word	0x20004a9c
 8009e58:	20004a84 	.word	0x20004a84
 8009e5c:	200045ac 	.word	0x200045ac
 8009e60:	200045a8 	.word	0x200045a8
 8009e64:	20004a8c 	.word	0x20004a8c
 8009e68:	20004a90 	.word	0x20004a90

08009e6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e72:	4b29      	ldr	r3, [pc, #164]	@ (8009f18 <vTaskSwitchContext+0xac>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e7a:	4b28      	ldr	r3, [pc, #160]	@ (8009f1c <vTaskSwitchContext+0xb0>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e80:	e044      	b.n	8009f0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009e82:	4b26      	ldr	r3, [pc, #152]	@ (8009f1c <vTaskSwitchContext+0xb0>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e88:	4b25      	ldr	r3, [pc, #148]	@ (8009f20 <vTaskSwitchContext+0xb4>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	e013      	b.n	8009eb8 <vTaskSwitchContext+0x4c>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10d      	bne.n	8009eb2 <vTaskSwitchContext+0x46>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <vTaskSwitchContext+0x42>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	491a      	ldr	r1, [pc, #104]	@ (8009f24 <vTaskSwitchContext+0xb8>)
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d0e1      	beq.n	8009e90 <vTaskSwitchContext+0x24>
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4a13      	ldr	r2, [pc, #76]	@ (8009f24 <vTaskSwitchContext+0xb8>)
 8009ed8:	4413      	add	r3, r2
 8009eda:	60bb      	str	r3, [r7, #8]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	605a      	str	r2, [r3, #4]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	3308      	adds	r3, #8
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d104      	bne.n	8009efc <vTaskSwitchContext+0x90>
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	605a      	str	r2, [r3, #4]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4a09      	ldr	r2, [pc, #36]	@ (8009f28 <vTaskSwitchContext+0xbc>)
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	4a06      	ldr	r2, [pc, #24]	@ (8009f20 <vTaskSwitchContext+0xb4>)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6013      	str	r3, [r2, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20004aa4 	.word	0x20004aa4
 8009f1c:	20004a90 	.word	0x20004a90
 8009f20:	20004a84 	.word	0x20004a84
 8009f24:	200045ac 	.word	0x200045ac
 8009f28:	200045a8 	.word	0x200045a8

08009f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10d      	bne.n	8009f58 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f40:	b672      	cpsid	i
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	b662      	cpsie	i
 8009f50:	60fb      	str	r3, [r7, #12]
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f58:	4b07      	ldr	r3, [pc, #28]	@ (8009f78 <vTaskPlaceOnEventList+0x4c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7fd ffee 	bl	8007f42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f66:	2101      	movs	r1, #1
 8009f68:	6838      	ldr	r0, [r7, #0]
 8009f6a:	f000 fd33 	bl	800a9d4 <prvAddCurrentTaskToDelayedList>
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200045a8 	.word	0x200045a8

08009f7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10d      	bne.n	8009faa <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	b672      	cpsid	i
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	b662      	cpsie	i
 8009fa2:	617b      	str	r3, [r7, #20]
}
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
 8009fa8:	e7fd      	b.n	8009fa6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009faa:	4b0a      	ldr	r3, [pc, #40]	@ (8009fd4 <vTaskPlaceOnEventListRestricted+0x58>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3318      	adds	r3, #24
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f7fd ffa1 	bl	8007efa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8009fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fc4:	6879      	ldr	r1, [r7, #4]
 8009fc6:	68b8      	ldr	r0, [r7, #8]
 8009fc8:	f000 fd04 	bl	800a9d4 <prvAddCurrentTaskToDelayedList>
	}
 8009fcc:	bf00      	nop
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	200045a8 	.word	0x200045a8

08009fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10d      	bne.n	800a00a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff2:	b672      	cpsid	i
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	b662      	cpsie	i
 800a002:	60fb      	str	r3, [r7, #12]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	3318      	adds	r3, #24
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd ffd0 	bl	8007fb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a014:	4b1d      	ldr	r3, [pc, #116]	@ (800a08c <xTaskRemoveFromEventList+0xb4>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d11d      	bne.n	800a058 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fd ffc7 	bl	8007fb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02a:	4b19      	ldr	r3, [pc, #100]	@ (800a090 <xTaskRemoveFromEventList+0xb8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d903      	bls.n	800a03a <xTaskRemoveFromEventList+0x62>
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a036:	4a16      	ldr	r2, [pc, #88]	@ (800a090 <xTaskRemoveFromEventList+0xb8>)
 800a038:	6013      	str	r3, [r2, #0]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4a13      	ldr	r2, [pc, #76]	@ (800a094 <xTaskRemoveFromEventList+0xbc>)
 800a048:	441a      	add	r2, r3
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	3304      	adds	r3, #4
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f7fd ff52 	bl	8007efa <vListInsertEnd>
 800a056:	e005      	b.n	800a064 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	3318      	adds	r3, #24
 800a05c:	4619      	mov	r1, r3
 800a05e:	480e      	ldr	r0, [pc, #56]	@ (800a098 <xTaskRemoveFromEventList+0xc0>)
 800a060:	f7fd ff4b 	bl	8007efa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a068:	4b0c      	ldr	r3, [pc, #48]	@ (800a09c <xTaskRemoveFromEventList+0xc4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	429a      	cmp	r2, r3
 800a070:	d905      	bls.n	800a07e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a072:	2301      	movs	r3, #1
 800a074:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a076:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <xTaskRemoveFromEventList+0xc8>)
 800a078:	2201      	movs	r2, #1
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	e001      	b.n	800a082 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a082:	697b      	ldr	r3, [r7, #20]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20004aa4 	.word	0x20004aa4
 800a090:	20004a84 	.word	0x20004a84
 800a094:	200045ac 	.word	0x200045ac
 800a098:	20004a3c 	.word	0x20004a3c
 800a09c:	200045a8 	.word	0x200045a8
 800a0a0:	20004a90 	.word	0x20004a90

0800a0a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0ac:	4b06      	ldr	r3, [pc, #24]	@ (800a0c8 <vTaskInternalSetTimeOutState+0x24>)
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <vTaskInternalSetTimeOutState+0x28>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	605a      	str	r2, [r3, #4]
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	20004a94 	.word	0x20004a94
 800a0cc:	20004a80 	.word	0x20004a80

0800a0d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10d      	bne.n	800a0fc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e4:	b672      	cpsid	i
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	b662      	cpsie	i
 800a0f4:	613b      	str	r3, [r7, #16]
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	e7fd      	b.n	800a0f8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10d      	bne.n	800a11e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a106:	b672      	cpsid	i
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	b662      	cpsie	i
 800a116:	60fb      	str	r3, [r7, #12]
}
 800a118:	bf00      	nop
 800a11a:	bf00      	nop
 800a11c:	e7fd      	b.n	800a11a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800a11e:	f001 f925 	bl	800b36c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a122:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <xTaskCheckForTimeOut+0xc8>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13a:	d102      	bne.n	800a142 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e023      	b.n	800a18a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	4b15      	ldr	r3, [pc, #84]	@ (800a19c <xTaskCheckForTimeOut+0xcc>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d007      	beq.n	800a15e <xTaskCheckForTimeOut+0x8e>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	429a      	cmp	r2, r3
 800a156:	d302      	bcc.n	800a15e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a158:	2301      	movs	r3, #1
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e015      	b.n	800a18a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	429a      	cmp	r2, r3
 800a166:	d20b      	bcs.n	800a180 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ff95 	bl	800a0a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e004      	b.n	800a18a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a186:	2301      	movs	r3, #1
 800a188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a18a:	f001 f925 	bl	800b3d8 <vPortExitCritical>

	return xReturn;
 800a18e:	69fb      	ldr	r3, [r7, #28]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3720      	adds	r7, #32
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	20004a80 	.word	0x20004a80
 800a19c:	20004a94 	.word	0x20004a94

0800a1a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1a4:	4b03      	ldr	r3, [pc, #12]	@ (800a1b4 <vTaskMissedYield+0x14>)
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	20004a90 	.word	0x20004a90

0800a1b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1c0:	f000 f852 	bl	800a268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1c4:	4b06      	ldr	r3, [pc, #24]	@ (800a1e0 <prvIdleTask+0x28>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d9f9      	bls.n	800a1c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a1cc:	4b05      	ldr	r3, [pc, #20]	@ (800a1e4 <prvIdleTask+0x2c>)
 800a1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1d2:	601a      	str	r2, [r3, #0]
 800a1d4:	f3bf 8f4f 	dsb	sy
 800a1d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a1dc:	e7f0      	b.n	800a1c0 <prvIdleTask+0x8>
 800a1de:	bf00      	nop
 800a1e0:	200045ac 	.word	0x200045ac
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	e00c      	b.n	800a20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4a12      	ldr	r2, [pc, #72]	@ (800a248 <prvInitialiseTaskLists+0x60>)
 800a200:	4413      	add	r3, r2
 800a202:	4618      	mov	r0, r3
 800a204:	f7fd fe4c 	bl	8007ea0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3301      	adds	r3, #1
 800a20c:	607b      	str	r3, [r7, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b37      	cmp	r3, #55	@ 0x37
 800a212:	d9ef      	bls.n	800a1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a214:	480d      	ldr	r0, [pc, #52]	@ (800a24c <prvInitialiseTaskLists+0x64>)
 800a216:	f7fd fe43 	bl	8007ea0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a21a:	480d      	ldr	r0, [pc, #52]	@ (800a250 <prvInitialiseTaskLists+0x68>)
 800a21c:	f7fd fe40 	bl	8007ea0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a220:	480c      	ldr	r0, [pc, #48]	@ (800a254 <prvInitialiseTaskLists+0x6c>)
 800a222:	f7fd fe3d 	bl	8007ea0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a226:	480c      	ldr	r0, [pc, #48]	@ (800a258 <prvInitialiseTaskLists+0x70>)
 800a228:	f7fd fe3a 	bl	8007ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a22c:	480b      	ldr	r0, [pc, #44]	@ (800a25c <prvInitialiseTaskLists+0x74>)
 800a22e:	f7fd fe37 	bl	8007ea0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a232:	4b0b      	ldr	r3, [pc, #44]	@ (800a260 <prvInitialiseTaskLists+0x78>)
 800a234:	4a05      	ldr	r2, [pc, #20]	@ (800a24c <prvInitialiseTaskLists+0x64>)
 800a236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a238:	4b0a      	ldr	r3, [pc, #40]	@ (800a264 <prvInitialiseTaskLists+0x7c>)
 800a23a:	4a05      	ldr	r2, [pc, #20]	@ (800a250 <prvInitialiseTaskLists+0x68>)
 800a23c:	601a      	str	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200045ac 	.word	0x200045ac
 800a24c:	20004a0c 	.word	0x20004a0c
 800a250:	20004a20 	.word	0x20004a20
 800a254:	20004a3c 	.word	0x20004a3c
 800a258:	20004a50 	.word	0x20004a50
 800a25c:	20004a68 	.word	0x20004a68
 800a260:	20004a34 	.word	0x20004a34
 800a264:	20004a38 	.word	0x20004a38

0800a268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a26e:	e019      	b.n	800a2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a270:	f001 f87c 	bl	800b36c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	4b10      	ldr	r3, [pc, #64]	@ (800a2b8 <prvCheckTasksWaitingTermination+0x50>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3304      	adds	r3, #4
 800a280:	4618      	mov	r0, r3
 800a282:	f7fd fe97 	bl	8007fb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a286:	4b0d      	ldr	r3, [pc, #52]	@ (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	4a0b      	ldr	r2, [pc, #44]	@ (800a2bc <prvCheckTasksWaitingTermination+0x54>)
 800a28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a290:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3b01      	subs	r3, #1
 800a296:	4a0a      	ldr	r2, [pc, #40]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a29a:	f001 f89d 	bl	800b3d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f8e4 	bl	800a46c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <prvCheckTasksWaitingTermination+0x58>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e1      	bne.n	800a270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20004a50 	.word	0x20004a50
 800a2bc:	20004a7c 	.word	0x20004a7c
 800a2c0:	20004a64 	.word	0x20004a64

0800a2c4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d102      	bne.n	800a2de <vTaskGetInfo+0x1a>
 800a2d8:	4b2c      	ldr	r3, [pc, #176]	@ (800a38c <vTaskGetInfo+0xc8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	e000      	b.n	800a2e0 <vTaskGetInfo+0x1c>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	697a      	ldr	r2, [r7, #20]
 800a2e6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2200      	movs	r2, #0
 800a316:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d01a      	beq.n	800a354 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a31e:	4b1b      	ldr	r3, [pc, #108]	@ (800a38c <vTaskGetInfo+0xc8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	429a      	cmp	r2, r3
 800a326:	d103      	bne.n	800a330 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	731a      	strb	r2, [r3, #12]
 800a32e:	e018      	b.n	800a362 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	78fa      	ldrb	r2, [r7, #3]
 800a334:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d112      	bne.n	800a362 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a33c:	f7ff fb7c 	bl	8009a38 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2202      	movs	r2, #2
 800a34c:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a34e:	f7ff fb81 	bl	8009a54 <xTaskResumeAll>
 800a352:	e006      	b.n	800a362 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f7ff fa99 	bl	800988c <eTaskGetState>
 800a35a:	4603      	mov	r3, r0
 800a35c:	461a      	mov	r2, r3
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d009      	beq.n	800a37c <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f861 	bl	800a434 <prvTaskCheckFreeStackSpace>
 800a372:	4603      	mov	r3, r0
 800a374:	461a      	mov	r2, r3
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a37a:	e002      	b.n	800a382 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	2200      	movs	r2, #0
 800a380:	841a      	strh	r2, [r3, #32]
	}
 800a382:	bf00      	nop
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200045a8 	.word	0x200045a8

0800a390 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	@ 0x28
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d03f      	beq.n	800a42a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	623b      	str	r3, [r7, #32]
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	6a3b      	ldr	r3, [r7, #32]
 800a3b6:	605a      	str	r2, [r3, #4]
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	6a3b      	ldr	r3, [r7, #32]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d104      	bne.n	800a3ce <prvListTasksWithinSingleList+0x3e>
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
 800a3cc:	605a      	str	r2, [r3, #4]
 800a3ce:	6a3b      	ldr	r3, [r7, #32]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	605a      	str	r2, [r3, #4]
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d104      	bne.n	800a3fa <prvListTasksWithinSingleList+0x6a>
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	605a      	str	r2, [r3, #4]
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a404:	4613      	mov	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	461a      	mov	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1899      	adds	r1, r3, r2
 800a412:	79fb      	ldrb	r3, [r7, #7]
 800a414:	2201      	movs	r2, #1
 800a416:	6978      	ldr	r0, [r7, #20]
 800a418:	f7ff ff54 	bl	800a2c4 <vTaskGetInfo>
				uxTask++;
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	3301      	adds	r3, #1
 800a420:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	429a      	cmp	r2, r3
 800a428:	d1d5      	bne.n	800a3d6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3728      	adds	r7, #40	@ 0x28
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a440:	e005      	b.n	800a44e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	3301      	adds	r3, #1
 800a446:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3301      	adds	r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2ba5      	cmp	r3, #165	@ 0xa5
 800a454:	d0f5      	beq.n	800a442 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	089b      	lsrs	r3, r3, #2
 800a45a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	b29b      	uxth	r3, r3
	}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d108      	bne.n	800a490 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a482:	4618      	mov	r0, r3
 800a484:	f001 f96e 	bl	800b764 <vPortFree>
				vPortFree( pxTCB );
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f001 f96b 	bl	800b764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a48e:	e01b      	b.n	800a4c8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a496:	2b01      	cmp	r3, #1
 800a498:	d103      	bne.n	800a4a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 f962 	bl	800b764 <vPortFree>
	}
 800a4a0:	e012      	b.n	800a4c8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d00d      	beq.n	800a4c8 <prvDeleteTCB+0x5c>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	b672      	cpsid	i
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	b662      	cpsie	i
 800a4c0:	60fb      	str	r3, [r7, #12]
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <prvDeleteTCB+0x58>
	}
 800a4c8:	bf00      	nop
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a508 <prvResetNextTaskUnblockTime+0x38>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <prvResetNextTaskUnblockTime+0x3c>)
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4e8:	e008      	b.n	800a4fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ea:	4b07      	ldr	r3, [pc, #28]	@ (800a508 <prvResetNextTaskUnblockTime+0x38>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4a04      	ldr	r2, [pc, #16]	@ (800a50c <prvResetNextTaskUnblockTime+0x3c>)
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	20004a34 	.word	0x20004a34
 800a50c:	20004a9c 	.word	0x20004a9c

0800a510 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a516:	4b05      	ldr	r3, [pc, #20]	@ (800a52c <xTaskGetCurrentTaskHandle+0x1c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a51c:	687b      	ldr	r3, [r7, #4]
	}
 800a51e:	4618      	mov	r0, r3
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	200045a8 	.word	0x200045a8

0800a530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a536:	4b0b      	ldr	r3, [pc, #44]	@ (800a564 <xTaskGetSchedulerState+0x34>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d102      	bne.n	800a544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a53e:	2301      	movs	r3, #1
 800a540:	607b      	str	r3, [r7, #4]
 800a542:	e008      	b.n	800a556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a544:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <xTaskGetSchedulerState+0x38>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d102      	bne.n	800a552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a54c:	2302      	movs	r3, #2
 800a54e:	607b      	str	r3, [r7, #4]
 800a550:	e001      	b.n	800a556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a556:	687b      	ldr	r3, [r7, #4]
	}
 800a558:	4618      	mov	r0, r3
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	20004a88 	.word	0x20004a88
 800a568:	20004aa4 	.word	0x20004aa4

0800a56c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a578:	2300      	movs	r3, #0
 800a57a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d051      	beq.n	800a626 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a586:	4b2a      	ldr	r3, [pc, #168]	@ (800a630 <xTaskPriorityInherit+0xc4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d241      	bcs.n	800a614 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	db06      	blt.n	800a5a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a598:	4b25      	ldr	r3, [pc, #148]	@ (800a630 <xTaskPriorityInherit+0xc4>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	6959      	ldr	r1, [r3, #20]
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4a1f      	ldr	r2, [pc, #124]	@ (800a634 <xTaskPriorityInherit+0xc8>)
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	d122      	bne.n	800a604 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fd fcf6 	bl	8007fb4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5c8:	4b19      	ldr	r3, [pc, #100]	@ (800a630 <xTaskPriorityInherit+0xc4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d6:	4b18      	ldr	r3, [pc, #96]	@ (800a638 <xTaskPriorityInherit+0xcc>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d903      	bls.n	800a5e6 <xTaskPriorityInherit+0x7a>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e2:	4a15      	ldr	r2, [pc, #84]	@ (800a638 <xTaskPriorityInherit+0xcc>)
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4a10      	ldr	r2, [pc, #64]	@ (800a634 <xTaskPriorityInherit+0xc8>)
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f7fd fc7c 	bl	8007efa <vListInsertEnd>
 800a602:	e004      	b.n	800a60e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a604:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <xTaskPriorityInherit+0xc4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a60e:	2301      	movs	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]
 800a612:	e008      	b.n	800a626 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a618:	4b05      	ldr	r3, [pc, #20]	@ (800a630 <xTaskPriorityInherit+0xc4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a61e:	429a      	cmp	r2, r3
 800a620:	d201      	bcs.n	800a626 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a622:	2301      	movs	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a626:	68fb      	ldr	r3, [r7, #12]
	}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	200045a8 	.word	0x200045a8
 800a634:	200045ac 	.word	0x200045ac
 800a638:	20004a84 	.word	0x20004a84

0800a63c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d05c      	beq.n	800a70c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a652:	4b31      	ldr	r3, [pc, #196]	@ (800a718 <xTaskPriorityDisinherit+0xdc>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d00d      	beq.n	800a678 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a660:	b672      	cpsid	i
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	b662      	cpsie	i
 800a670:	60fb      	str	r3, [r7, #12]
}
 800a672:	bf00      	nop
 800a674:	bf00      	nop
 800a676:	e7fd      	b.n	800a674 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10d      	bne.n	800a69c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	60bb      	str	r3, [r7, #8]
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6a0:	1e5a      	subs	r2, r3, #1
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d02c      	beq.n	800a70c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d128      	bne.n	800a70c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7fd fc78 	bl	8007fb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800a71c <xTaskPriorityDisinherit+0xe0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d903      	bls.n	800a6ec <xTaskPriorityDisinherit+0xb0>
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a71c <xTaskPriorityDisinherit+0xe0>)
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4a09      	ldr	r2, [pc, #36]	@ (800a720 <xTaskPriorityDisinherit+0xe4>)
 800a6fa:	441a      	add	r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f7fd fbf9 	bl	8007efa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a708:	2301      	movs	r3, #1
 800a70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a70c:	697b      	ldr	r3, [r7, #20]
	}
 800a70e:	4618      	mov	r0, r3
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	200045a8 	.word	0x200045a8
 800a71c:	20004a84 	.word	0x20004a84
 800a720:	200045ac 	.word	0x200045ac

0800a724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a732:	2301      	movs	r3, #1
 800a734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d070      	beq.n	800a81e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10d      	bne.n	800a760 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	b672      	cpsid	i
 800a74a:	f383 8811 	msr	BASEPRI, r3
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	b662      	cpsie	i
 800a758:	60fb      	str	r3, [r7, #12]
}
 800a75a:	bf00      	nop
 800a75c:	bf00      	nop
 800a75e:	e7fd      	b.n	800a75c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d902      	bls.n	800a770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	e002      	b.n	800a776 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a774:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d04e      	beq.n	800a81e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	429a      	cmp	r2, r3
 800a788:	d149      	bne.n	800a81e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a78a:	4b27      	ldr	r3, [pc, #156]	@ (800a828 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	429a      	cmp	r2, r3
 800a792:	d10d      	bne.n	800a7b0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a798:	b672      	cpsid	i
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	b662      	cpsie	i
 800a7a8:	60bb      	str	r3, [r7, #8]
}
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
 800a7ae:	e7fd      	b.n	800a7ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	69fa      	ldr	r2, [r7, #28]
 800a7ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db04      	blt.n	800a7ce <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	6959      	ldr	r1, [r3, #20]
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4a13      	ldr	r2, [pc, #76]	@ (800a82c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a7de:	4413      	add	r3, r2
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	d11c      	bne.n	800a81e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fd fbe3 	bl	8007fb4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800a830 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d903      	bls.n	800a802 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7fe:	4a0c      	ldr	r2, [pc, #48]	@ (800a830 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800a800:	6013      	str	r3, [r2, #0]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4a07      	ldr	r2, [pc, #28]	@ (800a82c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800a810:	441a      	add	r2, r3
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fd fb6e 	bl	8007efa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a81e:	bf00      	nop
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200045a8 	.word	0x200045a8
 800a82c:	200045ac 	.word	0x200045ac
 800a830:	20004a84 	.word	0x20004a84

0800a834 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f00f fac6 	bl	8019dd2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7f5 fd4a 	bl	80002e0 <strlen>
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	e007      	b.n	800a860 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	4413      	add	r3, r2
 800a856:	2220      	movs	r2, #32
 800a858:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3301      	adds	r3, #1
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b0e      	cmp	r3, #14
 800a864:	d9f4      	bls.n	800a850 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	4413      	add	r3, r2
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	4413      	add	r3, r2
	}
 800a876:	4618      	mov	r0, r3
 800a878:	3710      	adds	r7, #16
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800a880:	b590      	push	{r4, r7, lr}
 800a882:	b089      	sub	sp, #36	@ 0x24
 800a884:	af02      	add	r7, sp, #8
 800a886:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800a88e:	4b45      	ldr	r3, [pc, #276]	@ (800a9a4 <vTaskList+0x124>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a894:	4b43      	ldr	r3, [pc, #268]	@ (800a9a4 <vTaskList+0x124>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	4613      	mov	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 fe91 	bl	800b5c8 <pvPortMalloc>
 800a8a6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d076      	beq.n	800a99c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	68f9      	ldr	r1, [r7, #12]
 800a8b2:	68b8      	ldr	r0, [r7, #8]
 800a8b4:	f7ff f990 	bl	8009bd8 <uxTaskGetSystemState>
 800a8b8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]
 800a8be:	e066      	b.n	800a98e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	7b1b      	ldrb	r3, [r3, #12]
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	d81b      	bhi.n	800a90e <vTaskList+0x8e>
 800a8d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8dc <vTaskList+0x5c>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a8f1 	.word	0x0800a8f1
 800a8e0:	0800a8f7 	.word	0x0800a8f7
 800a8e4:	0800a8fd 	.word	0x0800a8fd
 800a8e8:	0800a903 	.word	0x0800a903
 800a8ec:	0800a909 	.word	0x0800a909
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800a8f0:	2358      	movs	r3, #88	@ 0x58
 800a8f2:	74fb      	strb	r3, [r7, #19]
										break;
 800a8f4:	e00e      	b.n	800a914 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800a8f6:	2352      	movs	r3, #82	@ 0x52
 800a8f8:	74fb      	strb	r3, [r7, #19]
										break;
 800a8fa:	e00b      	b.n	800a914 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800a8fc:	2342      	movs	r3, #66	@ 0x42
 800a8fe:	74fb      	strb	r3, [r7, #19]
										break;
 800a900:	e008      	b.n	800a914 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800a902:	2353      	movs	r3, #83	@ 0x53
 800a904:	74fb      	strb	r3, [r7, #19]
										break;
 800a906:	e005      	b.n	800a914 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800a908:	2344      	movs	r3, #68	@ 0x44
 800a90a:	74fb      	strb	r3, [r7, #19]
										break;
 800a90c:	e002      	b.n	800a914 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800a90e:	2300      	movs	r3, #0
 800a910:	74fb      	strb	r3, [r7, #19]
										break;
 800a912:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	4613      	mov	r3, r2
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	461a      	mov	r2, r3
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	4413      	add	r3, r2
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4619      	mov	r1, r3
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff ff83 	bl	800a834 <prvWriteNameToBuffer>
 800a92e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a930:	7cf9      	ldrb	r1, [r7, #19]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	4613      	mov	r3, r2
 800a936:	00db      	lsls	r3, r3, #3
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	461a      	mov	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4413      	add	r3, r2
 800a942:	6918      	ldr	r0, [r3, #16]
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4613      	mov	r3, r2
 800a948:	00db      	lsls	r3, r3, #3
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	461a      	mov	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	4413      	add	r3, r2
 800a954:	8c1b      	ldrh	r3, [r3, #32]
 800a956:	461c      	mov	r4, r3
 800a958:	697a      	ldr	r2, [r7, #20]
 800a95a:	4613      	mov	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	4413      	add	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	461a      	mov	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4413      	add	r3, r2
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	9400      	str	r4, [sp, #0]
 800a96e:	4603      	mov	r3, r0
 800a970:	460a      	mov	r2, r1
 800a972:	490d      	ldr	r1, [pc, #52]	@ (800a9a8 <vTaskList+0x128>)
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f00f f859 	bl	8019a2c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f7f5 fcb0 	bl	80002e0 <strlen>
 800a980:	4602      	mov	r2, r0
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4413      	add	r3, r2
 800a986:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	3301      	adds	r3, #1
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	429a      	cmp	r2, r3
 800a994:	d394      	bcc.n	800a8c0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800a996:	68b8      	ldr	r0, [r7, #8]
 800a998:	f000 fee4 	bl	800b764 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a99c:	bf00      	nop
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd90      	pop	{r4, r7, pc}
 800a9a4:	20004a7c 	.word	0x20004a7c
 800a9a8:	0801c1a4 	.word	0x0801c1a4

0800a9ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a9ac:	b480      	push	{r7}
 800a9ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a9b0:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a9b8:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9be:	3201      	adds	r2, #1
 800a9c0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a9c2:	4b03      	ldr	r3, [pc, #12]	@ (800a9d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
	}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	200045a8 	.word	0x200045a8

0800a9d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9de:	4b21      	ldr	r3, [pc, #132]	@ (800aa64 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9e4:	4b20      	ldr	r3, [pc, #128]	@ (800aa68 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fd fae2 	bl	8007fb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d10a      	bne.n	800aa0e <prvAddCurrentTaskToDelayedList+0x3a>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d007      	beq.n	800aa0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9fe:	4b1a      	ldr	r3, [pc, #104]	@ (800aa68 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4819      	ldr	r0, [pc, #100]	@ (800aa6c <prvAddCurrentTaskToDelayedList+0x98>)
 800aa08:	f7fd fa77 	bl	8007efa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa0c:	e026      	b.n	800aa5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4413      	add	r3, r2
 800aa14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa16:	4b14      	ldr	r3, [pc, #80]	@ (800aa68 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d209      	bcs.n	800aa3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa26:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b0f      	ldr	r3, [pc, #60]	@ (800aa68 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fd fa85 	bl	8007f42 <vListInsert>
}
 800aa38:	e010      	b.n	800aa5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa3a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa68 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7fd fa7b 	bl	8007f42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d202      	bcs.n	800aa5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa56:	4a08      	ldr	r2, [pc, #32]	@ (800aa78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	6013      	str	r3, [r2, #0]
}
 800aa5c:	bf00      	nop
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20004a80 	.word	0x20004a80
 800aa68:	200045a8 	.word	0x200045a8
 800aa6c:	20004a68 	.word	0x20004a68
 800aa70:	20004a38 	.word	0x20004a38
 800aa74:	20004a34 	.word	0x20004a34
 800aa78:	20004a9c 	.word	0x20004a9c

0800aa7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	@ 0x28
 800aa80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa86:	f000 fb21 	bl	800b0cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa8a:	4b1e      	ldr	r3, [pc, #120]	@ (800ab04 <xTimerCreateTimerTask+0x88>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d021      	beq.n	800aad6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa9a:	1d3a      	adds	r2, r7, #4
 800aa9c:	f107 0108 	add.w	r1, r7, #8
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fd f9e1 	bl	8007e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	9202      	str	r2, [sp, #8]
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	2302      	movs	r3, #2
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2300      	movs	r3, #0
 800aaba:	460a      	mov	r2, r1
 800aabc:	4912      	ldr	r1, [pc, #72]	@ (800ab08 <xTimerCreateTimerTask+0x8c>)
 800aabe:	4813      	ldr	r0, [pc, #76]	@ (800ab0c <xTimerCreateTimerTask+0x90>)
 800aac0:	f7fe fcfe 	bl	80094c0 <xTaskCreateStatic>
 800aac4:	4603      	mov	r3, r0
 800aac6:	4a12      	ldr	r2, [pc, #72]	@ (800ab10 <xTimerCreateTimerTask+0x94>)
 800aac8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aaca:	4b11      	ldr	r3, [pc, #68]	@ (800ab10 <xTimerCreateTimerTask+0x94>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d001      	beq.n	800aad6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aad2:	2301      	movs	r3, #1
 800aad4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10d      	bne.n	800aaf8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800aadc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae0:	b672      	cpsid	i
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	b662      	cpsie	i
 800aaf0:	613b      	str	r3, [r7, #16]
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800aaf8:	697b      	ldr	r3, [r7, #20]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20004ad8 	.word	0x20004ad8
 800ab08:	0801c1b4 	.word	0x0801c1b4
 800ab0c:	0800ac55 	.word	0x0800ac55
 800ab10:	20004adc 	.word	0x20004adc

0800ab14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08a      	sub	sp, #40	@ 0x28
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10d      	bne.n	800ab48 <xTimerGenericCommand+0x34>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab30:	b672      	cpsid	i
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	b662      	cpsie	i
 800ab40:	623b      	str	r3, [r7, #32]
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	e7fd      	b.n	800ab44 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab48:	4b19      	ldr	r3, [pc, #100]	@ (800abb0 <xTimerGenericCommand+0x9c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d02a      	beq.n	800aba6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	dc18      	bgt.n	800ab94 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab62:	f7ff fce5 	bl	800a530 <xTaskGetSchedulerState>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d109      	bne.n	800ab80 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab6c:	4b10      	ldr	r3, [pc, #64]	@ (800abb0 <xTimerGenericCommand+0x9c>)
 800ab6e:	6818      	ldr	r0, [r3, #0]
 800ab70:	f107 0110 	add.w	r1, r7, #16
 800ab74:	2300      	movs	r3, #0
 800ab76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab78:	f7fd fcd2 	bl	8008520 <xQueueGenericSend>
 800ab7c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab7e:	e012      	b.n	800aba6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab80:	4b0b      	ldr	r3, [pc, #44]	@ (800abb0 <xTimerGenericCommand+0x9c>)
 800ab82:	6818      	ldr	r0, [r3, #0]
 800ab84:	f107 0110 	add.w	r1, r7, #16
 800ab88:	2300      	movs	r3, #0
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7fd fcc8 	bl	8008520 <xQueueGenericSend>
 800ab90:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab92:	e008      	b.n	800aba6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab94:	4b06      	ldr	r3, [pc, #24]	@ (800abb0 <xTimerGenericCommand+0x9c>)
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	f107 0110 	add.w	r1, r7, #16
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	f7fd fdc8 	bl	8008734 <xQueueGenericSendFromISR>
 800aba4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3728      	adds	r7, #40	@ 0x28
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	20004ad8 	.word	0x20004ad8

0800abb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abbe:	4b24      	ldr	r3, [pc, #144]	@ (800ac50 <prvProcessExpiredTimer+0x9c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fd f9f1 	bl	8007fb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d025      	beq.n	800ac2c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	18d1      	adds	r1, r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	6978      	ldr	r0, [r7, #20]
 800abee:	f000 f8d7 	bl	800ada0 <prvInsertTimerInActiveList>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d022      	beq.n	800ac3e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abf8:	2300      	movs	r3, #0
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	2300      	movs	r3, #0
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	2100      	movs	r1, #0
 800ac02:	6978      	ldr	r0, [r7, #20]
 800ac04:	f7ff ff86 	bl	800ab14 <xTimerGenericCommand>
 800ac08:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d116      	bne.n	800ac3e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac14:	b672      	cpsid	i
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	b662      	cpsie	i
 800ac24:	60fb      	str	r3, [r7, #12]
}
 800ac26:	bf00      	nop
 800ac28:	bf00      	nop
 800ac2a:	e7fd      	b.n	800ac28 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac32:	f023 0301 	bic.w	r3, r3, #1
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	6978      	ldr	r0, [r7, #20]
 800ac44:	4798      	blx	r3
}
 800ac46:	bf00      	nop
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20004ad0 	.word	0x20004ad0

0800ac54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac5c:	f107 0308 	add.w	r3, r7, #8
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f859 	bl	800ad18 <prvGetNextExpireTime>
 800ac66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 f805 	bl	800ac7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac72:	f000 f8d7 	bl	800ae24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac76:	bf00      	nop
 800ac78:	e7f0      	b.n	800ac5c <prvTimerTask+0x8>
	...

0800ac7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac86:	f7fe fed7 	bl	8009a38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f866 	bl	800ad60 <prvSampleTimeNow>
 800ac94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d130      	bne.n	800acfe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <prvProcessTimerOrBlockTask+0x3c>
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d806      	bhi.n	800acb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800acaa:	f7fe fed3 	bl	8009a54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800acae:	68f9      	ldr	r1, [r7, #12]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff ff7f 	bl	800abb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800acb6:	e024      	b.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d008      	beq.n	800acd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800acbe:	4b13      	ldr	r3, [pc, #76]	@ (800ad0c <prvProcessTimerOrBlockTask+0x90>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <prvProcessTimerOrBlockTask+0x50>
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <prvProcessTimerOrBlockTask+0x52>
 800accc:	2300      	movs	r3, #0
 800acce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800acd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ad10 <prvProcessTimerOrBlockTask+0x94>)
 800acd2:	6818      	ldr	r0, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4619      	mov	r1, r3
 800acde:	f7fe fbbb 	bl	8009458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ace2:	f7fe feb7 	bl	8009a54 <xTaskResumeAll>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acec:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <prvProcessTimerOrBlockTask+0x98>)
 800acee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	f3bf 8f6f 	isb	sy
}
 800acfc:	e001      	b.n	800ad02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acfe:	f7fe fea9 	bl	8009a54 <xTaskResumeAll>
}
 800ad02:	bf00      	nop
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20004ad4 	.word	0x20004ad4
 800ad10:	20004ad8 	.word	0x20004ad8
 800ad14:	e000ed04 	.word	0xe000ed04

0800ad18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad20:	4b0e      	ldr	r3, [pc, #56]	@ (800ad5c <prvGetNextExpireTime+0x44>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <prvGetNextExpireTime+0x16>
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	e000      	b.n	800ad30 <prvGetNextExpireTime+0x18>
 800ad2e:	2200      	movs	r2, #0
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d105      	bne.n	800ad48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad3c:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <prvGetNextExpireTime+0x44>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e001      	b.n	800ad4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20004ad0 	.word	0x20004ad0

0800ad60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad68:	f7fe ff14 	bl	8009b94 <xTaskGetTickCount>
 800ad6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad9c <prvSampleTimeNow+0x3c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d205      	bcs.n	800ad84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad78:	f000 f940 	bl	800affc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	e002      	b.n	800ad8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad8a:	4a04      	ldr	r2, [pc, #16]	@ (800ad9c <prvSampleTimeNow+0x3c>)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad90:	68fb      	ldr	r3, [r7, #12]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20004ae0 	.word	0x20004ae0

0800ada0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
 800adac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d812      	bhi.n	800adec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	1ad2      	subs	r2, r2, r3
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	429a      	cmp	r2, r3
 800add2:	d302      	bcc.n	800adda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800add4:	2301      	movs	r3, #1
 800add6:	617b      	str	r3, [r7, #20]
 800add8:	e01b      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adda:	4b10      	ldr	r3, [pc, #64]	@ (800ae1c <prvInsertTimerInActiveList+0x7c>)
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3304      	adds	r3, #4
 800ade2:	4619      	mov	r1, r3
 800ade4:	4610      	mov	r0, r2
 800ade6:	f7fd f8ac 	bl	8007f42 <vListInsert>
 800adea:	e012      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d206      	bcs.n	800ae02 <prvInsertTimerInActiveList+0x62>
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d302      	bcc.n	800ae02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	617b      	str	r3, [r7, #20]
 800ae00:	e007      	b.n	800ae12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae02:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <prvInsertTimerInActiveList+0x80>)
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f7fd f898 	bl	8007f42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae12:	697b      	ldr	r3, [r7, #20]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20004ad4 	.word	0x20004ad4
 800ae20:	20004ad0 	.word	0x20004ad0

0800ae24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	@ 0x38
 800ae28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae2a:	e0d4      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	da1b      	bge.n	800ae6a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae32:	1d3b      	adds	r3, r7, #4
 800ae34:	3304      	adds	r3, #4
 800ae36:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10d      	bne.n	800ae5a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae42:	b672      	cpsid	i
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	b662      	cpsie	i
 800ae52:	61fb      	str	r3, [r7, #28]
}
 800ae54:	bf00      	nop
 800ae56:	bf00      	nop
 800ae58:	e7fd      	b.n	800ae56 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae60:	6850      	ldr	r0, [r2, #4]
 800ae62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae64:	6892      	ldr	r2, [r2, #8]
 800ae66:	4611      	mov	r1, r2
 800ae68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f2c0 80b2 	blt.w	800afd6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	3304      	adds	r3, #4
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fd f896 	bl	8007fb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae88:	463b      	mov	r3, r7
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff ff68 	bl	800ad60 <prvSampleTimeNow>
 800ae90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2b09      	cmp	r3, #9
 800ae96:	f200 809b 	bhi.w	800afd0 <prvProcessReceivedCommands+0x1ac>
 800ae9a:	a201      	add	r2, pc, #4	@ (adr r2, 800aea0 <prvProcessReceivedCommands+0x7c>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aec9 	.word	0x0800aec9
 800aea4:	0800aec9 	.word	0x0800aec9
 800aea8:	0800aec9 	.word	0x0800aec9
 800aeac:	0800af43 	.word	0x0800af43
 800aeb0:	0800af57 	.word	0x0800af57
 800aeb4:	0800afa7 	.word	0x0800afa7
 800aeb8:	0800aec9 	.word	0x0800aec9
 800aebc:	0800aec9 	.word	0x0800aec9
 800aec0:	0800af43 	.word	0x0800af43
 800aec4:	0800af57 	.word	0x0800af57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	18d1      	adds	r1, r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aee8:	f7ff ff5a 	bl	800ada0 <prvInsertTimerInActiveList>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d070      	beq.n	800afd4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aef8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aefa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d065      	beq.n	800afd4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	441a      	add	r2, r3
 800af10:	2300      	movs	r3, #0
 800af12:	9300      	str	r3, [sp, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	2100      	movs	r1, #0
 800af18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af1a:	f7ff fdfb 	bl	800ab14 <xTimerGenericCommand>
 800af1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af20:	6a3b      	ldr	r3, [r7, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d156      	bne.n	800afd4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2a:	b672      	cpsid	i
 800af2c:	f383 8811 	msr	BASEPRI, r3
 800af30:	f3bf 8f6f 	isb	sy
 800af34:	f3bf 8f4f 	dsb	sy
 800af38:	b662      	cpsie	i
 800af3a:	61bb      	str	r3, [r7, #24]
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	e7fd      	b.n	800af3e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af54:	e03f      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	b2da      	uxtb	r2, r3
 800af62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10d      	bne.n	800af92 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	b672      	cpsid	i
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	b662      	cpsie	i
 800af8a:	617b      	str	r3, [r7, #20]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	699a      	ldr	r2, [r3, #24]
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	18d1      	adds	r1, r2, r3
 800af9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afa0:	f7ff fefe 	bl	800ada0 <prvInsertTimerInActiveList>
					break;
 800afa4:	e017      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800afa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d103      	bne.n	800afbc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800afb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afb6:	f000 fbd5 	bl	800b764 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800afba:	e00c      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afc2:	f023 0301 	bic.w	r3, r3, #1
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afce:	e002      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800afd0:	bf00      	nop
 800afd2:	e000      	b.n	800afd6 <prvProcessReceivedCommands+0x1b2>
					break;
 800afd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afd6:	4b08      	ldr	r3, [pc, #32]	@ (800aff8 <prvProcessReceivedCommands+0x1d4>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	1d39      	adds	r1, r7, #4
 800afdc:	2200      	movs	r2, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fd fce4 	bl	80089ac <xQueueReceive>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f47f af20 	bne.w	800ae2c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	3730      	adds	r7, #48	@ 0x30
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20004ad8 	.word	0x20004ad8

0800affc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b002:	e04b      	b.n	800b09c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b004:	4b2f      	ldr	r3, [pc, #188]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b00e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fc ffc9 	bl	8007fb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d031      	beq.n	800b09c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4413      	add	r3, r2
 800b040:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	429a      	cmp	r2, r3
 800b048:	d90e      	bls.n	800b068 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	68ba      	ldr	r2, [r7, #8]
 800b04e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b056:	4b1b      	ldr	r3, [pc, #108]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3304      	adds	r3, #4
 800b05e:	4619      	mov	r1, r3
 800b060:	4610      	mov	r0, r2
 800b062:	f7fc ff6e 	bl	8007f42 <vListInsert>
 800b066:	e019      	b.n	800b09c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b068:	2300      	movs	r3, #0
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	2300      	movs	r3, #0
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	2100      	movs	r1, #0
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7ff fd4e 	bl	800ab14 <xTimerGenericCommand>
 800b078:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10d      	bne.n	800b09c <prvSwitchTimerLists+0xa0>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	b672      	cpsid	i
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	b662      	cpsie	i
 800b094:	603b      	str	r3, [r7, #0]
}
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	e7fd      	b.n	800b098 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b09c:	4b09      	ldr	r3, [pc, #36]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1ae      	bne.n	800b004 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0a6:	4b07      	ldr	r3, [pc, #28]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0ac:	4b06      	ldr	r3, [pc, #24]	@ (800b0c8 <prvSwitchTimerLists+0xcc>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a04      	ldr	r2, [pc, #16]	@ (800b0c4 <prvSwitchTimerLists+0xc8>)
 800b0b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b0b4:	4a04      	ldr	r2, [pc, #16]	@ (800b0c8 <prvSwitchTimerLists+0xcc>)
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	6013      	str	r3, [r2, #0]
}
 800b0ba:	bf00      	nop
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20004ad0 	.word	0x20004ad0
 800b0c8:	20004ad4 	.word	0x20004ad4

0800b0cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b0d2:	f000 f94b 	bl	800b36c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b0d6:	4b15      	ldr	r3, [pc, #84]	@ (800b12c <prvCheckForValidListAndQueue+0x60>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d120      	bne.n	800b120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b0de:	4814      	ldr	r0, [pc, #80]	@ (800b130 <prvCheckForValidListAndQueue+0x64>)
 800b0e0:	f7fc fede 	bl	8007ea0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b0e4:	4813      	ldr	r0, [pc, #76]	@ (800b134 <prvCheckForValidListAndQueue+0x68>)
 800b0e6:	f7fc fedb 	bl	8007ea0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0ea:	4b13      	ldr	r3, [pc, #76]	@ (800b138 <prvCheckForValidListAndQueue+0x6c>)
 800b0ec:	4a10      	ldr	r2, [pc, #64]	@ (800b130 <prvCheckForValidListAndQueue+0x64>)
 800b0ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0f0:	4b12      	ldr	r3, [pc, #72]	@ (800b13c <prvCheckForValidListAndQueue+0x70>)
 800b0f2:	4a10      	ldr	r2, [pc, #64]	@ (800b134 <prvCheckForValidListAndQueue+0x68>)
 800b0f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	4b11      	ldr	r3, [pc, #68]	@ (800b140 <prvCheckForValidListAndQueue+0x74>)
 800b0fc:	4a11      	ldr	r2, [pc, #68]	@ (800b144 <prvCheckForValidListAndQueue+0x78>)
 800b0fe:	2110      	movs	r1, #16
 800b100:	200a      	movs	r0, #10
 800b102:	f7fc ffed 	bl	80080e0 <xQueueGenericCreateStatic>
 800b106:	4603      	mov	r3, r0
 800b108:	4a08      	ldr	r2, [pc, #32]	@ (800b12c <prvCheckForValidListAndQueue+0x60>)
 800b10a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b10c:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <prvCheckForValidListAndQueue+0x60>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d005      	beq.n	800b120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b114:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <prvCheckForValidListAndQueue+0x60>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	490b      	ldr	r1, [pc, #44]	@ (800b148 <prvCheckForValidListAndQueue+0x7c>)
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe f948 	bl	80093b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b120:	f000 f95a 	bl	800b3d8 <vPortExitCritical>
}
 800b124:	bf00      	nop
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20004ad8 	.word	0x20004ad8
 800b130:	20004aa8 	.word	0x20004aa8
 800b134:	20004abc 	.word	0x20004abc
 800b138:	20004ad0 	.word	0x20004ad0
 800b13c:	20004ad4 	.word	0x20004ad4
 800b140:	20004b84 	.word	0x20004b84
 800b144:	20004ae4 	.word	0x20004ae4
 800b148:	0801c1bc 	.word	0x0801c1bc

0800b14c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3b04      	subs	r3, #4
 800b15c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3b04      	subs	r3, #4
 800b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f023 0201 	bic.w	r2, r3, #1
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3b04      	subs	r3, #4
 800b17a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b17c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1b0 <pxPortInitialiseStack+0x64>)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3b14      	subs	r3, #20
 800b186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3b04      	subs	r3, #4
 800b192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f06f 0202 	mvn.w	r2, #2
 800b19a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	3b20      	subs	r3, #32
 800b1a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	0800b1b5 	.word	0x0800b1b5

0800b1b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1be:	4b15      	ldr	r3, [pc, #84]	@ (800b214 <prvTaskExitError+0x60>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c6:	d00d      	beq.n	800b1e4 <prvTaskExitError+0x30>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1cc:	b672      	cpsid	i
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	b662      	cpsie	i
 800b1dc:	60fb      	str	r3, [r7, #12]
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	e7fd      	b.n	800b1e0 <prvTaskExitError+0x2c>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e8:	b672      	cpsid	i
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	b662      	cpsie	i
 800b1f8:	60bb      	str	r3, [r7, #8]
}
 800b1fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1fc:	bf00      	nop
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0fc      	beq.n	800b1fe <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	2000000c 	.word	0x2000000c
	...

0800b220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b220:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <pxCurrentTCBConst2>)
 800b222:	6819      	ldr	r1, [r3, #0]
 800b224:	6808      	ldr	r0, [r1, #0]
 800b226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b22a:	f380 8809 	msr	PSP, r0
 800b22e:	f3bf 8f6f 	isb	sy
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8811 	msr	BASEPRI, r0
 800b23a:	4770      	bx	lr
 800b23c:	f3af 8000 	nop.w

0800b240 <pxCurrentTCBConst2>:
 800b240:	200045a8 	.word	0x200045a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop

0800b248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b248:	4808      	ldr	r0, [pc, #32]	@ (800b26c <prvPortStartFirstTask+0x24>)
 800b24a:	6800      	ldr	r0, [r0, #0]
 800b24c:	6800      	ldr	r0, [r0, #0]
 800b24e:	f380 8808 	msr	MSP, r0
 800b252:	f04f 0000 	mov.w	r0, #0
 800b256:	f380 8814 	msr	CONTROL, r0
 800b25a:	b662      	cpsie	i
 800b25c:	b661      	cpsie	f
 800b25e:	f3bf 8f4f 	dsb	sy
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	df00      	svc	0
 800b268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b26a:	bf00      	nop
 800b26c:	e000ed08 	.word	0xe000ed08

0800b270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b276:	4b37      	ldr	r3, [pc, #220]	@ (800b354 <xPortStartScheduler+0xe4>)
 800b278:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	22ff      	movs	r2, #255	@ 0xff
 800b286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b290:	78fb      	ldrb	r3, [r7, #3]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b298:	b2da      	uxtb	r2, r3
 800b29a:	4b2f      	ldr	r3, [pc, #188]	@ (800b358 <xPortStartScheduler+0xe8>)
 800b29c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b29e:	4b2f      	ldr	r3, [pc, #188]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2a0:	2207      	movs	r2, #7
 800b2a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2a4:	e009      	b.n	800b2ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b2a6:	4b2d      	ldr	r3, [pc, #180]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	4a2b      	ldr	r2, [pc, #172]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2c2:	2b80      	cmp	r3, #128	@ 0x80
 800b2c4:	d0ef      	beq.n	800b2a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2c6:	4b25      	ldr	r3, [pc, #148]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f1c3 0307 	rsb	r3, r3, #7
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	d00d      	beq.n	800b2ee <xPortStartScheduler+0x7e>
	__asm volatile
 800b2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d6:	b672      	cpsid	i
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	b662      	cpsie	i
 800b2e6:	60bb      	str	r3, [r7, #8]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	021b      	lsls	r3, r3, #8
 800b2f4:	4a19      	ldr	r2, [pc, #100]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2f8:	4b18      	ldr	r3, [pc, #96]	@ (800b35c <xPortStartScheduler+0xec>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b300:	4a16      	ldr	r2, [pc, #88]	@ (800b35c <xPortStartScheduler+0xec>)
 800b302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	b2da      	uxtb	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b30c:	4b14      	ldr	r3, [pc, #80]	@ (800b360 <xPortStartScheduler+0xf0>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a13      	ldr	r2, [pc, #76]	@ (800b360 <xPortStartScheduler+0xf0>)
 800b312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b318:	4b11      	ldr	r3, [pc, #68]	@ (800b360 <xPortStartScheduler+0xf0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a10      	ldr	r2, [pc, #64]	@ (800b360 <xPortStartScheduler+0xf0>)
 800b31e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b324:	f000 f8dc 	bl	800b4e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b328:	4b0e      	ldr	r3, [pc, #56]	@ (800b364 <xPortStartScheduler+0xf4>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b32e:	f000 f8fb 	bl	800b528 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b332:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <xPortStartScheduler+0xf8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a0c      	ldr	r2, [pc, #48]	@ (800b368 <xPortStartScheduler+0xf8>)
 800b338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b33c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b33e:	f7ff ff83 	bl	800b248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b342:	f7fe fd93 	bl	8009e6c <vTaskSwitchContext>
	prvTaskExitError();
 800b346:	f7ff ff35 	bl	800b1b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	e000e400 	.word	0xe000e400
 800b358:	20004bd4 	.word	0x20004bd4
 800b35c:	20004bd8 	.word	0x20004bd8
 800b360:	e000ed20 	.word	0xe000ed20
 800b364:	2000000c 	.word	0x2000000c
 800b368:	e000ef34 	.word	0xe000ef34

0800b36c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b376:	b672      	cpsid	i
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	b662      	cpsie	i
 800b386:	607b      	str	r3, [r7, #4]
}
 800b388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b38a:	4b11      	ldr	r3, [pc, #68]	@ (800b3d0 <vPortEnterCritical+0x64>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	4a0f      	ldr	r2, [pc, #60]	@ (800b3d0 <vPortEnterCritical+0x64>)
 800b392:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b394:	4b0e      	ldr	r3, [pc, #56]	@ (800b3d0 <vPortEnterCritical+0x64>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d112      	bne.n	800b3c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b39c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <vPortEnterCritical+0x68>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00d      	beq.n	800b3c2 <vPortEnterCritical+0x56>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3aa:	b672      	cpsid	i
 800b3ac:	f383 8811 	msr	BASEPRI, r3
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	b662      	cpsie	i
 800b3ba:	603b      	str	r3, [r7, #0]
}
 800b3bc:	bf00      	nop
 800b3be:	bf00      	nop
 800b3c0:	e7fd      	b.n	800b3be <vPortEnterCritical+0x52>
	}
}
 800b3c2:	bf00      	nop
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	2000000c 	.word	0x2000000c
 800b3d4:	e000ed04 	.word	0xe000ed04

0800b3d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3de:	4b13      	ldr	r3, [pc, #76]	@ (800b42c <vPortExitCritical+0x54>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10d      	bne.n	800b402 <vPortExitCritical+0x2a>
	__asm volatile
 800b3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ea:	b672      	cpsid	i
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	b662      	cpsie	i
 800b3fa:	607b      	str	r3, [r7, #4]
}
 800b3fc:	bf00      	nop
 800b3fe:	bf00      	nop
 800b400:	e7fd      	b.n	800b3fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b402:	4b0a      	ldr	r3, [pc, #40]	@ (800b42c <vPortExitCritical+0x54>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	3b01      	subs	r3, #1
 800b408:	4a08      	ldr	r2, [pc, #32]	@ (800b42c <vPortExitCritical+0x54>)
 800b40a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b40c:	4b07      	ldr	r3, [pc, #28]	@ (800b42c <vPortExitCritical+0x54>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d105      	bne.n	800b420 <vPortExitCritical+0x48>
 800b414:	2300      	movs	r3, #0
 800b416:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	f383 8811 	msr	BASEPRI, r3
}
 800b41e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	2000000c 	.word	0x2000000c

0800b430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b430:	f3ef 8009 	mrs	r0, PSP
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4b15      	ldr	r3, [pc, #84]	@ (800b490 <pxCurrentTCBConst>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	f01e 0f10 	tst.w	lr, #16
 800b440:	bf08      	it	eq
 800b442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44a:	6010      	str	r0, [r2, #0]
 800b44c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b454:	b672      	cpsid	i
 800b456:	f380 8811 	msr	BASEPRI, r0
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	b662      	cpsie	i
 800b464:	f7fe fd02 	bl	8009e6c <vTaskSwitchContext>
 800b468:	f04f 0000 	mov.w	r0, #0
 800b46c:	f380 8811 	msr	BASEPRI, r0
 800b470:	bc09      	pop	{r0, r3}
 800b472:	6819      	ldr	r1, [r3, #0]
 800b474:	6808      	ldr	r0, [r1, #0]
 800b476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47a:	f01e 0f10 	tst.w	lr, #16
 800b47e:	bf08      	it	eq
 800b480:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b484:	f380 8809 	msr	PSP, r0
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop

0800b490 <pxCurrentTCBConst>:
 800b490:	200045a8 	.word	0x200045a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b494:	bf00      	nop
 800b496:	bf00      	nop

0800b498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	b672      	cpsid	i
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	b662      	cpsie	i
 800b4b2:	607b      	str	r3, [r7, #4]
}
 800b4b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4b6:	f7fe fc1d 	bl	8009cf4 <xTaskIncrementTick>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4c0:	4b06      	ldr	r3, [pc, #24]	@ (800b4dc <SysTick_Handler+0x44>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	f383 8811 	msr	BASEPRI, r3
}
 800b4d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4d4:	bf00      	nop
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800b514 <vPortSetupTimerInterrupt+0x34>)
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b518 <vPortSetupTimerInterrupt+0x38>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b51c <vPortSetupTimerInterrupt+0x3c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a0a      	ldr	r2, [pc, #40]	@ (800b520 <vPortSetupTimerInterrupt+0x40>)
 800b4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fa:	099b      	lsrs	r3, r3, #6
 800b4fc:	4a09      	ldr	r2, [pc, #36]	@ (800b524 <vPortSetupTimerInterrupt+0x44>)
 800b4fe:	3b01      	subs	r3, #1
 800b500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b502:	4b04      	ldr	r3, [pc, #16]	@ (800b514 <vPortSetupTimerInterrupt+0x34>)
 800b504:	2207      	movs	r2, #7
 800b506:	601a      	str	r2, [r3, #0]
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	e000e010 	.word	0xe000e010
 800b518:	e000e018 	.word	0xe000e018
 800b51c:	20000000 	.word	0x20000000
 800b520:	10624dd3 	.word	0x10624dd3
 800b524:	e000e014 	.word	0xe000e014

0800b528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b528:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b538 <vPortEnableVFP+0x10>
 800b52c:	6801      	ldr	r1, [r0, #0]
 800b52e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b532:	6001      	str	r1, [r0, #0]
 800b534:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b536:	bf00      	nop
 800b538:	e000ed88 	.word	0xe000ed88

0800b53c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b542:	f3ef 8305 	mrs	r3, IPSR
 800b546:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b0f      	cmp	r3, #15
 800b54c:	d917      	bls.n	800b57e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b54e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b8 <vPortValidateInterruptPriority+0x7c>)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b558:	4b18      	ldr	r3, [pc, #96]	@ (800b5bc <vPortValidateInterruptPriority+0x80>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	7afa      	ldrb	r2, [r7, #11]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d20d      	bcs.n	800b57e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b566:	b672      	cpsid	i
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	b662      	cpsie	i
 800b576:	607b      	str	r3, [r7, #4]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b57e:	4b10      	ldr	r3, [pc, #64]	@ (800b5c0 <vPortValidateInterruptPriority+0x84>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b586:	4b0f      	ldr	r3, [pc, #60]	@ (800b5c4 <vPortValidateInterruptPriority+0x88>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d90d      	bls.n	800b5aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	b672      	cpsid	i
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	b662      	cpsie	i
 800b5a2:	603b      	str	r3, [r7, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <vPortValidateInterruptPriority+0x6a>
	}
 800b5aa:	bf00      	nop
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	e000e3f0 	.word	0xe000e3f0
 800b5bc:	20004bd4 	.word	0x20004bd4
 800b5c0:	e000ed0c 	.word	0xe000ed0c
 800b5c4:	20004bd8 	.word	0x20004bd8

0800b5c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	@ 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5d4:	f7fe fa30 	bl	8009a38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5d8:	4b5d      	ldr	r3, [pc, #372]	@ (800b750 <pvPortMalloc+0x188>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5e0:	f000 f938 	bl	800b854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5e4:	4b5b      	ldr	r3, [pc, #364]	@ (800b754 <pvPortMalloc+0x18c>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f040 8094 	bne.w	800b71a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d020      	beq.n	800b63a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800b5f8:	2208      	movs	r2, #8
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f003 0307 	and.w	r3, r3, #7
 800b606:	2b00      	cmp	r3, #0
 800b608:	d017      	beq.n	800b63a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f023 0307 	bic.w	r3, r3, #7
 800b610:	3308      	adds	r3, #8
 800b612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00d      	beq.n	800b63a <pvPortMalloc+0x72>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	b672      	cpsid	i
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	b662      	cpsie	i
 800b632:	617b      	str	r3, [r7, #20]
}
 800b634:	bf00      	nop
 800b636:	bf00      	nop
 800b638:	e7fd      	b.n	800b636 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d06c      	beq.n	800b71a <pvPortMalloc+0x152>
 800b640:	4b45      	ldr	r3, [pc, #276]	@ (800b758 <pvPortMalloc+0x190>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	429a      	cmp	r2, r3
 800b648:	d867      	bhi.n	800b71a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b64a:	4b44      	ldr	r3, [pc, #272]	@ (800b75c <pvPortMalloc+0x194>)
 800b64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b64e:	4b43      	ldr	r3, [pc, #268]	@ (800b75c <pvPortMalloc+0x194>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b654:	e004      	b.n	800b660 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d903      	bls.n	800b672 <pvPortMalloc+0xaa>
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f1      	bne.n	800b656 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b672:	4b37      	ldr	r3, [pc, #220]	@ (800b750 <pvPortMalloc+0x188>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b678:	429a      	cmp	r2, r3
 800b67a:	d04e      	beq.n	800b71a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2208      	movs	r2, #8
 800b682:	4413      	add	r3, r2
 800b684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	6a3b      	ldr	r3, [r7, #32]
 800b68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	685a      	ldr	r2, [r3, #4]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	1ad2      	subs	r2, r2, r3
 800b696:	2308      	movs	r3, #8
 800b698:	005b      	lsls	r3, r3, #1
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d922      	bls.n	800b6e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b69e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	f003 0307 	and.w	r3, r3, #7
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00d      	beq.n	800b6cc <pvPortMalloc+0x104>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b4:	b672      	cpsid	i
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	b662      	cpsie	i
 800b6c4:	613b      	str	r3, [r7, #16]
}
 800b6c6:	bf00      	nop
 800b6c8:	bf00      	nop
 800b6ca:	e7fd      	b.n	800b6c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	1ad2      	subs	r2, r2, r3
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6de:	69b8      	ldr	r0, [r7, #24]
 800b6e0:	f000 f91a 	bl	800b918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b758 <pvPortMalloc+0x190>)
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800b758 <pvPortMalloc+0x190>)
 800b6f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6f2:	4b19      	ldr	r3, [pc, #100]	@ (800b758 <pvPortMalloc+0x190>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4b1a      	ldr	r3, [pc, #104]	@ (800b760 <pvPortMalloc+0x198>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d203      	bcs.n	800b706 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6fe:	4b16      	ldr	r3, [pc, #88]	@ (800b758 <pvPortMalloc+0x190>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a17      	ldr	r2, [pc, #92]	@ (800b760 <pvPortMalloc+0x198>)
 800b704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	4b12      	ldr	r3, [pc, #72]	@ (800b754 <pvPortMalloc+0x18c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	431a      	orrs	r2, r3
 800b710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	2200      	movs	r2, #0
 800b718:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b71a:	f7fe f99b 	bl	8009a54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f003 0307 	and.w	r3, r3, #7
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00d      	beq.n	800b744 <pvPortMalloc+0x17c>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72c:	b672      	cpsid	i
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	b662      	cpsie	i
 800b73c:	60fb      	str	r3, [r7, #12]
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	e7fd      	b.n	800b740 <pvPortMalloc+0x178>
	return pvReturn;
 800b744:	69fb      	ldr	r3, [r7, #28]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3728      	adds	r7, #40	@ 0x28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000c3e4 	.word	0x2000c3e4
 800b754:	2000c3f0 	.word	0x2000c3f0
 800b758:	2000c3e8 	.word	0x2000c3e8
 800b75c:	2000c3dc 	.word	0x2000c3dc
 800b760:	2000c3ec 	.word	0x2000c3ec

0800b764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d04e      	beq.n	800b814 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b776:	2308      	movs	r3, #8
 800b778:	425b      	negs	r3, r3
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4413      	add	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	4b24      	ldr	r3, [pc, #144]	@ (800b81c <vPortFree+0xb8>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4013      	ands	r3, r2
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10d      	bne.n	800b7ae <vPortFree+0x4a>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	b672      	cpsid	i
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	b662      	cpsie	i
 800b7a6:	60fb      	str	r3, [r7, #12]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d00d      	beq.n	800b7d2 <vPortFree+0x6e>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ba:	b672      	cpsid	i
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	b662      	cpsie	i
 800b7ca:	60bb      	str	r3, [r7, #8]
}
 800b7cc:	bf00      	nop
 800b7ce:	bf00      	nop
 800b7d0:	e7fd      	b.n	800b7ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	4b11      	ldr	r3, [pc, #68]	@ (800b81c <vPortFree+0xb8>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4013      	ands	r3, r2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d019      	beq.n	800b814 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d115      	bne.n	800b814 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b81c <vPortFree+0xb8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	43db      	mvns	r3, r3
 800b7f2:	401a      	ands	r2, r3
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7f8:	f7fe f91e 	bl	8009a38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	4b07      	ldr	r3, [pc, #28]	@ (800b820 <vPortFree+0xbc>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4413      	add	r3, r2
 800b806:	4a06      	ldr	r2, [pc, #24]	@ (800b820 <vPortFree+0xbc>)
 800b808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b80a:	6938      	ldr	r0, [r7, #16]
 800b80c:	f000 f884 	bl	800b918 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b810:	f7fe f920 	bl	8009a54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	2000c3f0 	.word	0x2000c3f0
 800b820:	2000c3e8 	.word	0x2000c3e8

0800b824 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800b828:	4b03      	ldr	r3, [pc, #12]	@ (800b838 <xPortGetFreeHeapSize+0x14>)
 800b82a:	681b      	ldr	r3, [r3, #0]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	2000c3e8 	.word	0x2000c3e8

0800b83c <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 800b840:	4b03      	ldr	r3, [pc, #12]	@ (800b850 <xPortGetMinimumEverFreeHeapSize+0x14>)
 800b842:	681b      	ldr	r3, [r3, #0]
}
 800b844:	4618      	mov	r0, r3
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	2000c3ec 	.word	0x2000c3ec

0800b854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b85a:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800b85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b860:	4b27      	ldr	r3, [pc, #156]	@ (800b900 <prvHeapInit+0xac>)
 800b862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f003 0307 	and.w	r3, r3, #7
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d00c      	beq.n	800b888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3307      	adds	r3, #7
 800b872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0307 	bic.w	r3, r3, #7
 800b87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	4a1f      	ldr	r2, [pc, #124]	@ (800b900 <prvHeapInit+0xac>)
 800b884:	4413      	add	r3, r2
 800b886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b88c:	4a1d      	ldr	r2, [pc, #116]	@ (800b904 <prvHeapInit+0xb0>)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b892:	4b1c      	ldr	r3, [pc, #112]	@ (800b904 <prvHeapInit+0xb0>)
 800b894:	2200      	movs	r2, #0
 800b896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68ba      	ldr	r2, [r7, #8]
 800b89c:	4413      	add	r3, r2
 800b89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8a0:	2208      	movs	r2, #8
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	1a9b      	subs	r3, r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0307 	bic.w	r3, r3, #7
 800b8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	4a15      	ldr	r2, [pc, #84]	@ (800b908 <prvHeapInit+0xb4>)
 800b8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8b6:	4b14      	ldr	r3, [pc, #80]	@ (800b908 <prvHeapInit+0xb4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8be:	4b12      	ldr	r3, [pc, #72]	@ (800b908 <prvHeapInit+0xb4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <prvHeapInit+0xb4>)
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b90c <prvHeapInit+0xb8>)
 800b8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	4a09      	ldr	r2, [pc, #36]	@ (800b910 <prvHeapInit+0xbc>)
 800b8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8ec:	4b09      	ldr	r3, [pc, #36]	@ (800b914 <prvHeapInit+0xc0>)
 800b8ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8f2:	601a      	str	r2, [r3, #0]
}
 800b8f4:	bf00      	nop
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr
 800b900:	20004bdc 	.word	0x20004bdc
 800b904:	2000c3dc 	.word	0x2000c3dc
 800b908:	2000c3e4 	.word	0x2000c3e4
 800b90c:	2000c3ec 	.word	0x2000c3ec
 800b910:	2000c3e8 	.word	0x2000c3e8
 800b914:	2000c3f0 	.word	0x2000c3f0

0800b918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b920:	4b28      	ldr	r3, [pc, #160]	@ (800b9c4 <prvInsertBlockIntoFreeList+0xac>)
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	e002      	b.n	800b92c <prvInsertBlockIntoFreeList+0x14>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	429a      	cmp	r2, r3
 800b934:	d8f7      	bhi.n	800b926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	4413      	add	r3, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d108      	bne.n	800b95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	441a      	add	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d118      	bne.n	800b9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b15      	ldr	r3, [pc, #84]	@ (800b9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	429a      	cmp	r2, r3
 800b978:	d00d      	beq.n	800b996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685a      	ldr	r2, [r3, #4]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	441a      	add	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	e008      	b.n	800b9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b996:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
 800b99e:	e003      	b.n	800b9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d002      	beq.n	800b9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9b6:	bf00      	nop
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop
 800b9c4:	2000c3dc 	.word	0x2000c3dc
 800b9c8:	2000c3e4 	.word	0x2000c3e4

0800b9cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	330c      	adds	r3, #12
 800b9dc:	461a      	mov	r2, r3
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f002 fa29 	bl	800de38 <tcpip_send_msg_wait_sem>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d103      	bne.n	800b9fa <netconn_apimsg+0x2e>
    return apimsg->err;
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b9f8:	e001      	b.n	800b9fe <netconn_apimsg+0x32>
  }
  return err;
 800b9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
	...

0800ba08 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08c      	sub	sp, #48	@ 0x30
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	603a      	str	r2, [r7, #0]
 800ba12:	71fb      	strb	r3, [r7, #7]
 800ba14:	460b      	mov	r3, r1
 800ba16:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	6839      	ldr	r1, [r7, #0]
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f001 f923 	bl	800cc68 <netconn_alloc>
 800ba22:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800ba24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d054      	beq.n	800bad4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ba2a:	79bb      	ldrb	r3, [r7, #6]
 800ba2c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ba2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba30:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ba32:	f107 0308 	add.w	r3, r7, #8
 800ba36:	4619      	mov	r1, r3
 800ba38:	4829      	ldr	r0, [pc, #164]	@ (800bae0 <netconn_new_with_proto_and_callback+0xd8>)
 800ba3a:	f7ff ffc7 	bl	800b9cc <netconn_apimsg>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800ba44:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d043      	beq.n	800bad4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ba4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <netconn_new_with_proto_and_callback+0x58>
 800ba54:	4b23      	ldr	r3, [pc, #140]	@ (800bae4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba56:	22a3      	movs	r2, #163	@ 0xa3
 800ba58:	4923      	ldr	r1, [pc, #140]	@ (800bae8 <netconn_new_with_proto_and_callback+0xe0>)
 800ba5a:	4824      	ldr	r0, [pc, #144]	@ (800baec <netconn_new_with_proto_and_callback+0xe4>)
 800ba5c:	f00d ff42 	bl	80198e4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ba60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba62:	3310      	adds	r3, #16
 800ba64:	4618      	mov	r0, r3
 800ba66:	f00d f8dd 	bl	8018c24 <sys_mbox_valid>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d105      	bne.n	800ba7c <netconn_new_with_proto_and_callback+0x74>
 800ba70:	4b1c      	ldr	r3, [pc, #112]	@ (800bae4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba72:	22a4      	movs	r2, #164	@ 0xa4
 800ba74:	491e      	ldr	r1, [pc, #120]	@ (800baf0 <netconn_new_with_proto_and_callback+0xe8>)
 800ba76:	481d      	ldr	r0, [pc, #116]	@ (800baec <netconn_new_with_proto_and_callback+0xe4>)
 800ba78:	f00d ff34 	bl	80198e4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ba7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7e:	3314      	adds	r3, #20
 800ba80:	4618      	mov	r0, r3
 800ba82:	f00d f8cf 	bl	8018c24 <sys_mbox_valid>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d005      	beq.n	800ba98 <netconn_new_with_proto_and_callback+0x90>
 800ba8c:	4b15      	ldr	r3, [pc, #84]	@ (800bae4 <netconn_new_with_proto_and_callback+0xdc>)
 800ba8e:	22a6      	movs	r2, #166	@ 0xa6
 800ba90:	4918      	ldr	r1, [pc, #96]	@ (800baf4 <netconn_new_with_proto_and_callback+0xec>)
 800ba92:	4816      	ldr	r0, [pc, #88]	@ (800baec <netconn_new_with_proto_and_callback+0xe4>)
 800ba94:	f00d ff26 	bl	80198e4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ba98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9a:	330c      	adds	r3, #12
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f00d f94f 	bl	8018d40 <sys_sem_valid>
 800baa2:	4603      	mov	r3, r0
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d105      	bne.n	800bab4 <netconn_new_with_proto_and_callback+0xac>
 800baa8:	4b0e      	ldr	r3, [pc, #56]	@ (800bae4 <netconn_new_with_proto_and_callback+0xdc>)
 800baaa:	22a9      	movs	r2, #169	@ 0xa9
 800baac:	4912      	ldr	r1, [pc, #72]	@ (800baf8 <netconn_new_with_proto_and_callback+0xf0>)
 800baae:	480f      	ldr	r0, [pc, #60]	@ (800baec <netconn_new_with_proto_and_callback+0xe4>)
 800bab0:	f00d ff18 	bl	80198e4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800bab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bab6:	330c      	adds	r3, #12
 800bab8:	4618      	mov	r0, r3
 800baba:	f00d f934 	bl	8018d26 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800babe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac0:	3310      	adds	r3, #16
 800bac2:	4618      	mov	r0, r3
 800bac4:	f00d f83a 	bl	8018b3c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800bac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baca:	2007      	movs	r0, #7
 800bacc:	f002 ff1c 	bl	800e908 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	e000      	b.n	800bad6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800bad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3730      	adds	r7, #48	@ 0x30
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	0800cc3d 	.word	0x0800cc3d
 800bae4:	0801c1c4 	.word	0x0801c1c4
 800bae8:	0801c1f8 	.word	0x0801c1f8
 800baec:	0801c21c 	.word	0x0801c21c
 800baf0:	0801c244 	.word	0x0801c244
 800baf4:	0801c25c 	.word	0x0801c25c
 800baf8:	0801c280 	.word	0x0801c280

0800bafc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08c      	sub	sp, #48	@ 0x30
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	e014      	b.n	800bb38 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800bb12:	2329      	movs	r3, #41	@ 0x29
 800bb14:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800bb16:	f107 030c 	add.w	r3, r7, #12
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4808      	ldr	r0, [pc, #32]	@ (800bb40 <netconn_prepare_delete+0x44>)
 800bb1e:	f7ff ff55 	bl	800b9cc <netconn_apimsg>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800bb28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <netconn_prepare_delete+0x3a>
    return err;
 800bb30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bb34:	e000      	b.n	800bb38 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3730      	adds	r7, #48	@ 0x30
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	0800d1a9 	.word	0x0800d1a9

0800bb44 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d101      	bne.n	800bb56 <netconn_delete+0x12>
    return ERR_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	e00d      	b.n	800bb72 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff ffd0 	bl	800bafc <netconn_prepare_delete>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800bb60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <netconn_delete+0x2a>
    netconn_free(conn);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f001 f8eb 	bl	800cd44 <netconn_free>
  }
  return err;
 800bb6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b08e      	sub	sp, #56	@ 0x38
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4613      	mov	r3, r2
 800bb88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d109      	bne.n	800bba4 <netconn_bind+0x28>
 800bb90:	4b11      	ldr	r3, [pc, #68]	@ (800bbd8 <netconn_bind+0x5c>)
 800bb92:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800bb96:	4911      	ldr	r1, [pc, #68]	@ (800bbdc <netconn_bind+0x60>)
 800bb98:	4811      	ldr	r0, [pc, #68]	@ (800bbe0 <netconn_bind+0x64>)
 800bb9a:	f00d fea3 	bl	80198e4 <iprintf>
 800bb9e:	f06f 030f 	mvn.w	r3, #15
 800bba2:	e015      	b.n	800bbd0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800bbaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe4 <netconn_bind+0x68>)
 800bbac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bbb6:	88fb      	ldrh	r3, [r7, #6]
 800bbb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800bbba:	f107 0314 	add.w	r3, r7, #20
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4809      	ldr	r0, [pc, #36]	@ (800bbe8 <netconn_bind+0x6c>)
 800bbc2:	f7ff ff03 	bl	800b9cc <netconn_apimsg>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bbcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3738      	adds	r7, #56	@ 0x38
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	0801c1c4 	.word	0x0801c1c4
 800bbdc:	0801c2fc 	.word	0x0801c2fc
 800bbe0:	0801c21c 	.word	0x0801c21c
 800bbe4:	0801f628 	.word	0x0801f628
 800bbe8:	0800d371 	.word	0x0800d371

0800bbec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b08c      	sub	sp, #48	@ 0x30
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <netconn_listen_with_backlog+0x26>
 800bbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800bc34 <netconn_listen_with_backlog+0x48>)
 800bc00:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800bc04:	490c      	ldr	r1, [pc, #48]	@ (800bc38 <netconn_listen_with_backlog+0x4c>)
 800bc06:	480d      	ldr	r0, [pc, #52]	@ (800bc3c <netconn_listen_with_backlog+0x50>)
 800bc08:	f00d fe6c 	bl	80198e4 <iprintf>
 800bc0c:	f06f 030f 	mvn.w	r3, #15
 800bc10:	e00c      	b.n	800bc2c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800bc16:	f107 030c 	add.w	r3, r7, #12
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4808      	ldr	r0, [pc, #32]	@ (800bc40 <netconn_listen_with_backlog+0x54>)
 800bc1e:	f7ff fed5 	bl	800b9cc <netconn_apimsg>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bc28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3730      	adds	r7, #48	@ 0x30
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0801c1c4 	.word	0x0801c1c4
 800bc38:	0801c37c 	.word	0x0801c37c
 800bc3c:	0801c21c 	.word	0x0801c21c
 800bc40:	0800d3e5 	.word	0x0800d3e5

0800bc44 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d109      	bne.n	800bc68 <netconn_accept+0x24>
 800bc54:	4b3d      	ldr	r3, [pc, #244]	@ (800bd4c <netconn_accept+0x108>)
 800bc56:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bc5a:	493d      	ldr	r1, [pc, #244]	@ (800bd50 <netconn_accept+0x10c>)
 800bc5c:	483d      	ldr	r0, [pc, #244]	@ (800bd54 <netconn_accept+0x110>)
 800bc5e:	f00d fe41 	bl	80198e4 <iprintf>
 800bc62:	f06f 030f 	mvn.w	r3, #15
 800bc66:	e06c      	b.n	800bd42 <netconn_accept+0xfe>
  *new_conn = NULL;
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d109      	bne.n	800bc88 <netconn_accept+0x44>
 800bc74:	4b35      	ldr	r3, [pc, #212]	@ (800bd4c <netconn_accept+0x108>)
 800bc76:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800bc7a:	4937      	ldr	r1, [pc, #220]	@ (800bd58 <netconn_accept+0x114>)
 800bc7c:	4835      	ldr	r0, [pc, #212]	@ (800bd54 <netconn_accept+0x110>)
 800bc7e:	f00d fe31 	bl	80198e4 <iprintf>
 800bc82:	f06f 030f 	mvn.w	r3, #15
 800bc86:	e05c      	b.n	800bd42 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fb6c 	bl	800c366 <netconn_err>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800bc92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d002      	beq.n	800bca0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800bc9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc9e:	e050      	b.n	800bd42 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3314      	adds	r3, #20
 800bca4:	4618      	mov	r0, r3
 800bca6:	f00c ffbd 	bl	8018c24 <sys_mbox_valid>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d005      	beq.n	800bcbc <netconn_accept+0x78>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7f1b      	ldrb	r3, [r3, #28]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800bcbc:	f06f 030e 	mvn.w	r3, #14
 800bcc0:	e03f      	b.n	800bd42 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	7f1b      	ldrb	r3, [r3, #28]
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00e      	beq.n	800bcec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3314      	adds	r3, #20
 800bcd2:	f107 020c 	add.w	r2, r7, #12
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f00c ff8c 	bl	8018bf6 <sys_arch_mbox_tryfetch>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d10a      	bne.n	800bcfc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800bce6:	f06f 0306 	mvn.w	r3, #6
 800bcea:	e02a      	b.n	800bd42 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	3314      	adds	r3, #20
 800bcf0:	f107 010c 	add.w	r1, r7, #12
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f00c ff4c 	bl	8018b94 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d005      	beq.n	800bd10 <netconn_accept+0xcc>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd08:	2200      	movs	r2, #0
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f107 0213 	add.w	r2, r7, #19
 800bd16:	4611      	mov	r1, r2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 fb75 	bl	800c408 <lwip_netconn_is_err_msg>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800bd24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd28:	e00b      	b.n	800bd42 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d102      	bne.n	800bd36 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800bd30:	f06f 030e 	mvn.w	r3, #14
 800bd34:	e005      	b.n	800bd42 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bd40:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	0801c1c4 	.word	0x0801c1c4
 800bd50:	0801c39c 	.word	0x0801c39c
 800bd54:	0801c21c 	.word	0x0801c21c
 800bd58:	0801c3bc 	.word	0x0801c3bc

0800bd5c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	4613      	mov	r3, r2
 800bd68:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d109      	bne.n	800bd88 <netconn_recv_data+0x2c>
 800bd74:	4b58      	ldr	r3, [pc, #352]	@ (800bed8 <netconn_recv_data+0x17c>)
 800bd76:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800bd7a:	4958      	ldr	r1, [pc, #352]	@ (800bedc <netconn_recv_data+0x180>)
 800bd7c:	4858      	ldr	r0, [pc, #352]	@ (800bee0 <netconn_recv_data+0x184>)
 800bd7e:	f00d fdb1 	bl	80198e4 <iprintf>
 800bd82:	f06f 030f 	mvn.w	r3, #15
 800bd86:	e0a2      	b.n	800bece <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d109      	bne.n	800bda8 <netconn_recv_data+0x4c>
 800bd94:	4b50      	ldr	r3, [pc, #320]	@ (800bed8 <netconn_recv_data+0x17c>)
 800bd96:	f240 224a 	movw	r2, #586	@ 0x24a
 800bd9a:	4952      	ldr	r1, [pc, #328]	@ (800bee4 <netconn_recv_data+0x188>)
 800bd9c:	4850      	ldr	r0, [pc, #320]	@ (800bee0 <netconn_recv_data+0x184>)
 800bd9e:	f00d fda1 	bl	80198e4 <iprintf>
 800bda2:	f06f 030f 	mvn.w	r3, #15
 800bda6:	e092      	b.n	800bece <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3310      	adds	r3, #16
 800bdac:	4618      	mov	r0, r3
 800bdae:	f00c ff39 	bl	8018c24 <sys_mbox_valid>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10e      	bne.n	800bdd6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 fad4 	bl	800c366 <netconn_err>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bdc2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bdca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bdce:	e07e      	b.n	800bece <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bdd0:	f06f 030a 	mvn.w	r3, #10
 800bdd4:	e07b      	b.n	800bece <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	7f1b      	ldrb	r3, [r3, #28]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10f      	bne.n	800be02 <netconn_recv_data+0xa6>
 800bde2:	79fb      	ldrb	r3, [r7, #7]
 800bde4:	f003 0304 	and.w	r3, r3, #4
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	7f1b      	ldrb	r3, [r3, #28]
 800bdf0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d023      	beq.n	800be4a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3310      	adds	r3, #16
 800be06:	f107 0218 	add.w	r2, r7, #24
 800be0a:	4611      	mov	r1, r2
 800be0c:	4618      	mov	r0, r3
 800be0e:	f00c fef2 	bl	8018bf6 <sys_arch_mbox_tryfetch>
 800be12:	4603      	mov	r3, r0
 800be14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be18:	d11f      	bne.n	800be5a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f000 faa3 	bl	800c366 <netconn_err>
 800be20:	4603      	mov	r3, r0
 800be22:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800be24:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d002      	beq.n	800be32 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800be2c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800be30:	e04d      	b.n	800bece <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	7f1b      	ldrb	r3, [r3, #28]
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800be3e:	f06f 030a 	mvn.w	r3, #10
 800be42:	e044      	b.n	800bece <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800be44:	f06f 0306 	mvn.w	r3, #6
 800be48:	e041      	b.n	800bece <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3310      	adds	r3, #16
 800be4e:	f107 0118 	add.w	r1, r7, #24
 800be52:	2200      	movs	r2, #0
 800be54:	4618      	mov	r0, r3
 800be56:	f00c fe9d 	bl	8018b94 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be62:	2b10      	cmp	r3, #16
 800be64:	d117      	bne.n	800be96 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	f107 0217 	add.w	r2, r7, #23
 800be6c:	4611      	mov	r1, r2
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 faca 	bl	800c408 <lwip_netconn_is_err_msg>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800be7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be7e:	f113 0f0f 	cmn.w	r3, #15
 800be82:	d101      	bne.n	800be88 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800be84:	2300      	movs	r3, #0
 800be86:	e022      	b.n	800bece <netconn_recv_data+0x172>
      }
      return err;
 800be88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be8c:	e01f      	b.n	800bece <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	891b      	ldrh	r3, [r3, #8]
 800be92:	83fb      	strh	r3, [r7, #30]
 800be94:	e00d      	b.n	800beb2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <netconn_recv_data+0x14e>
 800be9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bed8 <netconn_recv_data+0x17c>)
 800be9e:	f240 2291 	movw	r2, #657	@ 0x291
 800bea2:	4911      	ldr	r1, [pc, #68]	@ (800bee8 <netconn_recv_data+0x18c>)
 800bea4:	480e      	ldr	r0, [pc, #56]	@ (800bee0 <netconn_recv_data+0x184>)
 800bea6:	f00d fd1d 	bl	80198e4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	891b      	ldrh	r3, [r3, #8]
 800beb0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <netconn_recv_data+0x16a>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bebe:	8bfa      	ldrh	r2, [r7, #30]
 800bec0:	2101      	movs	r1, #1
 800bec2:	68f8      	ldr	r0, [r7, #12]
 800bec4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3720      	adds	r7, #32
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	0801c1c4 	.word	0x0801c1c4
 800bedc:	0801c3dc 	.word	0x0801c3dc
 800bee0:	0801c21c 	.word	0x0801c21c
 800bee4:	0801c3fc 	.word	0x0801c3fc
 800bee8:	0801c418 	.word	0x0801c418

0800beec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d005      	beq.n	800bf0a <netconn_tcp_recvd_msg+0x1e>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf06:	2b10      	cmp	r3, #16
 800bf08:	d009      	beq.n	800bf1e <netconn_tcp_recvd_msg+0x32>
 800bf0a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf3c <netconn_tcp_recvd_msg+0x50>)
 800bf0c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800bf10:	490b      	ldr	r1, [pc, #44]	@ (800bf40 <netconn_tcp_recvd_msg+0x54>)
 800bf12:	480c      	ldr	r0, [pc, #48]	@ (800bf44 <netconn_tcp_recvd_msg+0x58>)
 800bf14:	f00d fce6 	bl	80198e4 <iprintf>
 800bf18:	f06f 030f 	mvn.w	r3, #15
 800bf1c:	e00a      	b.n	800bf34 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800bf2a:	6879      	ldr	r1, [r7, #4]
 800bf2c:	4806      	ldr	r0, [pc, #24]	@ (800bf48 <netconn_tcp_recvd_msg+0x5c>)
 800bf2e:	f7ff fd4d 	bl	800b9cc <netconn_apimsg>
 800bf32:	4603      	mov	r3, r0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	0801c1c4 	.word	0x0801c1c4
 800bf40:	0801c424 	.word	0x0801c424
 800bf44:	0801c21c 	.word	0x0801c21c
 800bf48:	0800d515 	.word	0x0800d515

0800bf4c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b090      	sub	sp, #64	@ 0x40
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	4613      	mov	r3, r2
 800bf58:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3310      	adds	r3, #16
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f00c fe60 	bl	8018c24 <sys_mbox_valid>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d102      	bne.n	800bf70 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800bf6a:	f06f 030a 	mvn.w	r3, #10
 800bf6e:	e06d      	b.n	800c04c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	7f1b      	ldrb	r3, [r3, #28]
 800bf74:	b25b      	sxtb	r3, r3
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	da07      	bge.n	800bf8a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	7f1b      	ldrb	r3, [r3, #28]
 800bf7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800bf88:	e039      	b.n	800bffe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f7ff fee3 	bl	800bd5c <netconn_recv_data>
 800bf96:	4603      	mov	r3, r0
 800bf98:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800bf9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800bfa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfa8:	e050      	b.n	800c04c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800bfb0:	79fb      	ldrb	r3, [r7, #7]
 800bfb2:	f003 0308 	and.w	r3, r3, #8
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10e      	bne.n	800bfd8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800bfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <netconn_recv_data_tcp+0x7a>
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc2:	891b      	ldrh	r3, [r3, #8]
 800bfc4:	e000      	b.n	800bfc8 <netconn_recv_data_tcp+0x7c>
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800bfca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bfcc:	f107 0214 	add.w	r2, r7, #20
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff8a 	bl	800beec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d134      	bne.n	800c048 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800bfde:	79fb      	ldrb	r3, [r7, #7]
 800bfe0:	f003 0310 	and.w	r3, r3, #16
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d009      	beq.n	800bffc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	7f1b      	ldrb	r3, [r3, #28]
 800bfec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800bff6:	f06f 0306 	mvn.w	r3, #6
 800bffa:	e027      	b.n	800c04c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800bffc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c002:	2b00      	cmp	r3, #0
 800c004:	d005      	beq.n	800c012 <netconn_recv_data_tcp+0xc6>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00a:	2200      	movs	r2, #0
 800c00c:	2101      	movs	r1, #1
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10f      	bne.n	800c03a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 f9a3 	bl	800c366 <netconn_err>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800c026:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d002      	beq.n	800c034 <netconn_recv_data_tcp+0xe8>
          return err;
 800c02e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c032:	e00b      	b.n	800c04c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c034:	f06f 030d 	mvn.w	r3, #13
 800c038:	e008      	b.n	800c04c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c03a:	2101      	movs	r1, #1
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f000 f955 	bl	800c2ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c042:	f06f 030e 	mvn.w	r3, #14
 800c046:	e001      	b.n	800c04c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c048:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3740      	adds	r7, #64	@ 0x40
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c05e:	2300      	movs	r3, #0
 800c060:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d109      	bne.n	800c07c <netconn_recv+0x28>
 800c068:	4b32      	ldr	r3, [pc, #200]	@ (800c134 <netconn_recv+0xe0>)
 800c06a:	f240 3263 	movw	r2, #867	@ 0x363
 800c06e:	4932      	ldr	r1, [pc, #200]	@ (800c138 <netconn_recv+0xe4>)
 800c070:	4832      	ldr	r0, [pc, #200]	@ (800c13c <netconn_recv+0xe8>)
 800c072:	f00d fc37 	bl	80198e4 <iprintf>
 800c076:	f06f 030f 	mvn.w	r3, #15
 800c07a:	e056      	b.n	800c12a <netconn_recv+0xd6>
  *new_buf = NULL;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d109      	bne.n	800c09c <netconn_recv+0x48>
 800c088:	4b2a      	ldr	r3, [pc, #168]	@ (800c134 <netconn_recv+0xe0>)
 800c08a:	f240 3265 	movw	r2, #869	@ 0x365
 800c08e:	492c      	ldr	r1, [pc, #176]	@ (800c140 <netconn_recv+0xec>)
 800c090:	482a      	ldr	r0, [pc, #168]	@ (800c13c <netconn_recv+0xe8>)
 800c092:	f00d fc27 	bl	80198e4 <iprintf>
 800c096:	f06f 030f 	mvn.w	r3, #15
 800c09a:	e046      	b.n	800c12a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c0a4:	2b10      	cmp	r3, #16
 800c0a6:	d13a      	bne.n	800c11e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c0ac:	2006      	movs	r0, #6
 800c0ae:	f002 fbd9 	bl	800e864 <memp_malloc>
 800c0b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d102      	bne.n	800c0c0 <netconn_recv+0x6c>
      return ERR_MEM;
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	e034      	b.n	800c12a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c0c0:	f107 030c 	add.w	r3, r7, #12
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ff3f 	bl	800bf4c <netconn_recv_data_tcp>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c0d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d006      	beq.n	800c0e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c0da:	6979      	ldr	r1, [r7, #20]
 800c0dc:	2006      	movs	r0, #6
 800c0de:	f002 fc13 	bl	800e908 <memp_free>
      return err;
 800c0e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0e6:	e020      	b.n	800c12a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d106      	bne.n	800c0fc <netconn_recv+0xa8>
 800c0ee:	4b11      	ldr	r3, [pc, #68]	@ (800c134 <netconn_recv+0xe0>)
 800c0f0:	f240 3279 	movw	r2, #889	@ 0x379
 800c0f4:	4913      	ldr	r1, [pc, #76]	@ (800c144 <netconn_recv+0xf0>)
 800c0f6:	4811      	ldr	r0, [pc, #68]	@ (800c13c <netconn_recv+0xe8>)
 800c0f8:	f00d fbf4 	bl	80198e4 <iprintf>

    buf->p = p;
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2200      	movs	r2, #0
 800c10c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2200      	movs	r2, #0
 800c112:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	e005      	b.n	800c12a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c11e:	2200      	movs	r2, #0
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff fe1a 	bl	800bd5c <netconn_recv_data>
 800c128:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	0801c1c4 	.word	0x0801c1c4
 800c138:	0801c3dc 	.word	0x0801c3dc
 800c13c:	0801c21c 	.word	0x0801c21c
 800c140:	0801c3fc 	.word	0x0801c3fc
 800c144:	0801c474 	.word	0x0801c474

0800c148 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b088      	sub	sp, #32
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	f107 0110 	add.w	r1, r7, #16
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	4613      	mov	r3, r2
 800c16a:	2201      	movs	r2, #1
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 f805 	bl	800c17c <netconn_write_vectors_partly>
 800c172:	4603      	mov	r3, r0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b092      	sub	sp, #72	@ 0x48
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4611      	mov	r1, r2
 800c188:	461a      	mov	r2, r3
 800c18a:	460b      	mov	r3, r1
 800c18c:	80fb      	strh	r3, [r7, #6]
 800c18e:	4613      	mov	r3, r2
 800c190:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d109      	bne.n	800c1ac <netconn_write_vectors_partly+0x30>
 800c198:	4b4e      	ldr	r3, [pc, #312]	@ (800c2d4 <netconn_write_vectors_partly+0x158>)
 800c19a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c19e:	494e      	ldr	r1, [pc, #312]	@ (800c2d8 <netconn_write_vectors_partly+0x15c>)
 800c1a0:	484e      	ldr	r0, [pc, #312]	@ (800c2dc <netconn_write_vectors_partly+0x160>)
 800c1a2:	f00d fb9f 	bl	80198e4 <iprintf>
 800c1a6:	f06f 030f 	mvn.w	r3, #15
 800c1aa:	e08e      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c1b4:	2b10      	cmp	r3, #16
 800c1b6:	d009      	beq.n	800c1cc <netconn_write_vectors_partly+0x50>
 800c1b8:	4b46      	ldr	r3, [pc, #280]	@ (800c2d4 <netconn_write_vectors_partly+0x158>)
 800c1ba:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c1be:	4948      	ldr	r1, [pc, #288]	@ (800c2e0 <netconn_write_vectors_partly+0x164>)
 800c1c0:	4846      	ldr	r0, [pc, #280]	@ (800c2dc <netconn_write_vectors_partly+0x160>)
 800c1c2:	f00d fb8f 	bl	80198e4 <iprintf>
 800c1c6:	f06f 0305 	mvn.w	r3, #5
 800c1ca:	e07e      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	7f1b      	ldrb	r3, [r3, #28]
 800c1d0:	f003 0302 	and.w	r3, r3, #2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d104      	bne.n	800c1e2 <netconn_write_vectors_partly+0x66>
 800c1d8:	797b      	ldrb	r3, [r7, #5]
 800c1da:	f003 0304 	and.w	r3, r3, #4
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <netconn_write_vectors_partly+0x6a>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <netconn_write_vectors_partly+0x6c>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c1ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d005      	beq.n	800c200 <netconn_write_vectors_partly+0x84>
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d102      	bne.n	800c200 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c1fa:	f06f 0305 	mvn.w	r3, #5
 800c1fe:	e064      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c204:	2300      	movs	r3, #0
 800c206:	643b      	str	r3, [r7, #64]	@ 0x40
 800c208:	e015      	b.n	800c236 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c20a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	4413      	add	r3, r2
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c216:	4413      	add	r3, r2
 800c218:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c21a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	4413      	add	r3, r2
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c226:	429a      	cmp	r2, r3
 800c228:	d202      	bcs.n	800c230 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c22a:	f06f 0305 	mvn.w	r3, #5
 800c22e:	e04c      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c232:	3301      	adds	r3, #1
 800c234:	643b      	str	r3, [r7, #64]	@ 0x40
 800c236:	88fb      	ldrh	r3, [r7, #6]
 800c238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c23a:	429a      	cmp	r2, r3
 800c23c:	dbe5      	blt.n	800c20a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	e040      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	da0a      	bge.n	800c264 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c250:	2b00      	cmp	r3, #0
 800c252:	d102      	bne.n	800c25a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c254:	f06f 0305 	mvn.w	r3, #5
 800c258:	e037      	b.n	800c2ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c25a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c25e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c262:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c26c:	88fb      	ldrh	r3, [r7, #6]
 800c26e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c274:	797b      	ldrb	r3, [r7, #5]
 800c276:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c27a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c27c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c282:	f107 0314 	add.w	r3, r7, #20
 800c286:	4619      	mov	r1, r3
 800c288:	4816      	ldr	r0, [pc, #88]	@ (800c2e4 <netconn_write_vectors_partly+0x168>)
 800c28a:	f7ff fb9f 	bl	800b9cc <netconn_apimsg>
 800c28e:	4603      	mov	r3, r0
 800c290:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c294:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d114      	bne.n	800c2c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d002      	beq.n	800c2a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c2a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c2a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d006      	beq.n	800c2c6 <netconn_write_vectors_partly+0x14a>
 800c2b8:	4b06      	ldr	r3, [pc, #24]	@ (800c2d4 <netconn_write_vectors_partly+0x158>)
 800c2ba:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c2be:	490a      	ldr	r1, [pc, #40]	@ (800c2e8 <netconn_write_vectors_partly+0x16c>)
 800c2c0:	4806      	ldr	r0, [pc, #24]	@ (800c2dc <netconn_write_vectors_partly+0x160>)
 800c2c2:	f00d fb0f 	bl	80198e4 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c2c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3748      	adds	r7, #72	@ 0x48
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0801c1c4 	.word	0x0801c1c4
 800c2d8:	0801c49c 	.word	0x0801c49c
 800c2dc:	0801c21c 	.word	0x0801c21c
 800c2e0:	0801c4b8 	.word	0x0801c4b8
 800c2e4:	0800d919 	.word	0x0800d919
 800c2e8:	0801c4dc 	.word	0x0801c4dc

0800c2ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08c      	sub	sp, #48	@ 0x30
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d109      	bne.n	800c312 <netconn_close_shutdown+0x26>
 800c2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c33c <netconn_close_shutdown+0x50>)
 800c300:	f240 4247 	movw	r2, #1095	@ 0x447
 800c304:	490e      	ldr	r1, [pc, #56]	@ (800c340 <netconn_close_shutdown+0x54>)
 800c306:	480f      	ldr	r0, [pc, #60]	@ (800c344 <netconn_close_shutdown+0x58>)
 800c308:	f00d faec 	bl	80198e4 <iprintf>
 800c30c:	f06f 030f 	mvn.w	r3, #15
 800c310:	e010      	b.n	800c334 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c31a:	2329      	movs	r3, #41	@ 0x29
 800c31c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c31e:	f107 030c 	add.w	r3, r7, #12
 800c322:	4619      	mov	r1, r3
 800c324:	4808      	ldr	r0, [pc, #32]	@ (800c348 <netconn_close_shutdown+0x5c>)
 800c326:	f7ff fb51 	bl	800b9cc <netconn_apimsg>
 800c32a:	4603      	mov	r3, r0
 800c32c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c330:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c334:	4618      	mov	r0, r3
 800c336:	3730      	adds	r7, #48	@ 0x30
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	0801c1c4 	.word	0x0801c1c4
 800c340:	0801c500 	.word	0x0801c500
 800c344:	0801c21c 	.word	0x0801c21c
 800c348:	0800da31 	.word	0x0800da31

0800c34c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800c354:	2103      	movs	r1, #3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff ffc8 	bl	800c2ec <netconn_close_shutdown>
 800c35c:	4603      	mov	r3, r0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <netconn_err+0x12>
    return ERR_OK;
 800c374:	2300      	movs	r3, #0
 800c376:	e00d      	b.n	800c394 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c378:	f00c fd5e 	bl	8018e38 <sys_arch_protect>
 800c37c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	7a1b      	ldrb	r3, [r3, #8]
 800c382:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2200      	movs	r2, #0
 800c388:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f00c fd62 	bl	8018e54 <sys_arch_unprotect>
  return err;
 800c390:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c394:	4618      	mov	r0, r3
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c3a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3aa:	f113 0f0d 	cmn.w	r3, #13
 800c3ae:	d009      	beq.n	800c3c4 <lwip_netconn_err_to_msg+0x28>
 800c3b0:	f113 0f0d 	cmn.w	r3, #13
 800c3b4:	dc0c      	bgt.n	800c3d0 <lwip_netconn_err_to_msg+0x34>
 800c3b6:	f113 0f0f 	cmn.w	r3, #15
 800c3ba:	d007      	beq.n	800c3cc <lwip_netconn_err_to_msg+0x30>
 800c3bc:	f113 0f0e 	cmn.w	r3, #14
 800c3c0:	d002      	beq.n	800c3c8 <lwip_netconn_err_to_msg+0x2c>
 800c3c2:	e005      	b.n	800c3d0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <lwip_netconn_err_to_msg+0x54>)
 800c3c6:	e00e      	b.n	800c3e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f4 <lwip_netconn_err_to_msg+0x58>)
 800c3ca:	e00c      	b.n	800c3e6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f8 <lwip_netconn_err_to_msg+0x5c>)
 800c3ce:	e00a      	b.n	800c3e6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c3d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <lwip_netconn_err_to_msg+0x48>
 800c3d8:	4b08      	ldr	r3, [pc, #32]	@ (800c3fc <lwip_netconn_err_to_msg+0x60>)
 800c3da:	227d      	movs	r2, #125	@ 0x7d
 800c3dc:	4908      	ldr	r1, [pc, #32]	@ (800c400 <lwip_netconn_err_to_msg+0x64>)
 800c3de:	4809      	ldr	r0, [pc, #36]	@ (800c404 <lwip_netconn_err_to_msg+0x68>)
 800c3e0:	f00d fa80 	bl	80198e4 <iprintf>
      return NULL;
 800c3e4:	2300      	movs	r3, #0
  }
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	0801f514 	.word	0x0801f514
 800c3f4:	0801f515 	.word	0x0801f515
 800c3f8:	0801f516 	.word	0x0801f516
 800c3fc:	0801c51c 	.word	0x0801c51c
 800c400:	0801c550 	.word	0x0801c550
 800c404:	0801c560 	.word	0x0801c560

0800c408 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d105      	bne.n	800c424 <lwip_netconn_is_err_msg+0x1c>
 800c418:	4b12      	ldr	r3, [pc, #72]	@ (800c464 <lwip_netconn_is_err_msg+0x5c>)
 800c41a:	2285      	movs	r2, #133	@ 0x85
 800c41c:	4912      	ldr	r1, [pc, #72]	@ (800c468 <lwip_netconn_is_err_msg+0x60>)
 800c41e:	4813      	ldr	r0, [pc, #76]	@ (800c46c <lwip_netconn_is_err_msg+0x64>)
 800c420:	f00d fa60 	bl	80198e4 <iprintf>

  if (msg == &netconn_aborted) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a12      	ldr	r2, [pc, #72]	@ (800c470 <lwip_netconn_is_err_msg+0x68>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d104      	bne.n	800c436 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	22f3      	movs	r2, #243	@ 0xf3
 800c430:	701a      	strb	r2, [r3, #0]
    return 1;
 800c432:	2301      	movs	r3, #1
 800c434:	e012      	b.n	800c45c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a0e      	ldr	r2, [pc, #56]	@ (800c474 <lwip_netconn_is_err_msg+0x6c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d104      	bne.n	800c448 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	22f2      	movs	r2, #242	@ 0xf2
 800c442:	701a      	strb	r2, [r3, #0]
    return 1;
 800c444:	2301      	movs	r3, #1
 800c446:	e009      	b.n	800c45c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a0b      	ldr	r2, [pc, #44]	@ (800c478 <lwip_netconn_is_err_msg+0x70>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d104      	bne.n	800c45a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	22f1      	movs	r2, #241	@ 0xf1
 800c454:	701a      	strb	r2, [r3, #0]
    return 1;
 800c456:	2301      	movs	r3, #1
 800c458:	e000      	b.n	800c45c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3708      	adds	r7, #8
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}
 800c464:	0801c51c 	.word	0x0801c51c
 800c468:	0801c588 	.word	0x0801c588
 800c46c:	0801c560 	.word	0x0801c560
 800c470:	0801f514 	.word	0x0801f514
 800c474:	0801f515 	.word	0x0801f515
 800c478:	0801f516 	.word	0x0801f516

0800c47c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <recv_udp+0x20>
 800c490:	4b34      	ldr	r3, [pc, #208]	@ (800c564 <recv_udp+0xe8>)
 800c492:	22e5      	movs	r2, #229	@ 0xe5
 800c494:	4934      	ldr	r1, [pc, #208]	@ (800c568 <recv_udp+0xec>)
 800c496:	4835      	ldr	r0, [pc, #212]	@ (800c56c <recv_udp+0xf0>)
 800c498:	f00d fa24 	bl	80198e4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d105      	bne.n	800c4ae <recv_udp+0x32>
 800c4a2:	4b30      	ldr	r3, [pc, #192]	@ (800c564 <recv_udp+0xe8>)
 800c4a4:	22e6      	movs	r2, #230	@ 0xe6
 800c4a6:	4932      	ldr	r1, [pc, #200]	@ (800c570 <recv_udp+0xf4>)
 800c4a8:	4830      	ldr	r0, [pc, #192]	@ (800c56c <recv_udp+0xf0>)
 800c4aa:	f00d fa1b 	bl	80198e4 <iprintf>
  conn = (struct netconn *)arg;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d103      	bne.n	800c4c0 <recv_udp+0x44>
    pbuf_free(p);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f003 f8c9 	bl	800f650 <pbuf_free>
    return;
 800c4be:	e04d      	b.n	800c55c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d005      	beq.n	800c4d6 <recv_udp+0x5a>
 800c4ca:	4b26      	ldr	r3, [pc, #152]	@ (800c564 <recv_udp+0xe8>)
 800c4cc:	22ee      	movs	r2, #238	@ 0xee
 800c4ce:	4929      	ldr	r1, [pc, #164]	@ (800c574 <recv_udp+0xf8>)
 800c4d0:	4826      	ldr	r0, [pc, #152]	@ (800c56c <recv_udp+0xf0>)
 800c4d2:	f00d fa07 	bl	80198e4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	3310      	adds	r3, #16
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f00c fba2 	bl	8018c24 <sys_mbox_valid>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d103      	bne.n	800c4ee <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f003 f8b2 	bl	800f650 <pbuf_free>
    return;
 800c4ec:	e036      	b.n	800c55c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c4ee:	2006      	movs	r0, #6
 800c4f0:	f002 f9b8 	bl	800e864 <memp_malloc>
 800c4f4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d103      	bne.n	800c504 <recv_udp+0x88>
    pbuf_free(p);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f003 f8a7 	bl	800f650 <pbuf_free>
    return;
 800c502:	e02b      	b.n	800c55c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d002      	beq.n	800c51c <recv_udp+0xa0>
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	e000      	b.n	800c51e <recv_udp+0xa2>
 800c51c:	2300      	movs	r3, #0
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c526:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c52e:	69fb      	ldr	r3, [r7, #28]
 800c530:	3310      	adds	r3, #16
 800c532:	69b9      	ldr	r1, [r7, #24]
 800c534:	4618      	mov	r0, r3
 800c536:	f00c fb13 	bl	8018b60 <sys_mbox_trypost>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c540:	69b8      	ldr	r0, [r7, #24]
 800c542:	f001 fb01 	bl	800db48 <netbuf_delete>
    return;
 800c546:	e009      	b.n	800c55c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d005      	beq.n	800c55c <recv_udp+0xe0>
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c554:	8afa      	ldrh	r2, [r7, #22]
 800c556:	2100      	movs	r1, #0
 800c558:	69f8      	ldr	r0, [r7, #28]
 800c55a:	4798      	blx	r3
  }
}
 800c55c:	3720      	adds	r7, #32
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	0801c51c 	.word	0x0801c51c
 800c568:	0801c594 	.word	0x0801c594
 800c56c:	0801c560 	.word	0x0801c560
 800c570:	0801c5b8 	.word	0x0801c5b8
 800c574:	0801c5d8 	.word	0x0801c5d8

0800c578 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <recv_tcp+0x22>
 800c58c:	4b36      	ldr	r3, [pc, #216]	@ (800c668 <recv_tcp+0xf0>)
 800c58e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c592:	4936      	ldr	r1, [pc, #216]	@ (800c66c <recv_tcp+0xf4>)
 800c594:	4836      	ldr	r0, [pc, #216]	@ (800c670 <recv_tcp+0xf8>)
 800c596:	f00d f9a5 	bl	80198e4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <recv_tcp+0x36>
 800c5a0:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <recv_tcp+0xf0>)
 800c5a2:	f240 122d 	movw	r2, #301	@ 0x12d
 800c5a6:	4933      	ldr	r1, [pc, #204]	@ (800c674 <recv_tcp+0xfc>)
 800c5a8:	4831      	ldr	r0, [pc, #196]	@ (800c670 <recv_tcp+0xf8>)
 800c5aa:	f00d f99b 	bl	80198e4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c5ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d006      	beq.n	800c5c4 <recv_tcp+0x4c>
 800c5b6:	4b2c      	ldr	r3, [pc, #176]	@ (800c668 <recv_tcp+0xf0>)
 800c5b8:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800c5bc:	492e      	ldr	r1, [pc, #184]	@ (800c678 <recv_tcp+0x100>)
 800c5be:	482c      	ldr	r0, [pc, #176]	@ (800c670 <recv_tcp+0xf8>)
 800c5c0:	f00d f990 	bl	80198e4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <recv_tcp+0x5c>
    return ERR_VAL;
 800c5ce:	f06f 0305 	mvn.w	r3, #5
 800c5d2:	e045      	b.n	800c660 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	68ba      	ldr	r2, [r7, #8]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	d006      	beq.n	800c5ec <recv_tcp+0x74>
 800c5de:	4b22      	ldr	r3, [pc, #136]	@ (800c668 <recv_tcp+0xf0>)
 800c5e0:	f240 1235 	movw	r2, #309	@ 0x135
 800c5e4:	4925      	ldr	r1, [pc, #148]	@ (800c67c <recv_tcp+0x104>)
 800c5e6:	4822      	ldr	r0, [pc, #136]	@ (800c670 <recv_tcp+0xf8>)
 800c5e8:	f00d f97c 	bl	80198e4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	3310      	adds	r3, #16
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f00c fb17 	bl	8018c24 <sys_mbox_valid>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10d      	bne.n	800c618 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d008      	beq.n	800c614 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	891b      	ldrh	r3, [r3, #8]
 800c606:	4619      	mov	r1, r3
 800c608:	68b8      	ldr	r0, [r7, #8]
 800c60a:	f003 ffd9 	bl	80105c0 <tcp_recved>
      pbuf_free(p);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f003 f81e 	bl	800f650 <pbuf_free>
    }
    return ERR_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	e023      	b.n	800c660 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <recv_tcp+0xb2>
    msg = p;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	891b      	ldrh	r3, [r3, #8]
 800c626:	83fb      	strh	r3, [r7, #30]
 800c628:	e003      	b.n	800c632 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c62a:	4b15      	ldr	r3, [pc, #84]	@ (800c680 <recv_tcp+0x108>)
 800c62c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	3310      	adds	r3, #16
 800c636:	69b9      	ldr	r1, [r7, #24]
 800c638:	4618      	mov	r0, r3
 800c63a:	f00c fa91 	bl	8018b60 <sys_mbox_trypost>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c644:	f04f 33ff 	mov.w	r3, #4294967295
 800c648:	e00a      	b.n	800c660 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d005      	beq.n	800c65e <recv_tcp+0xe6>
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c656:	8bfa      	ldrh	r2, [r7, #30]
 800c658:	2100      	movs	r1, #0
 800c65a:	6978      	ldr	r0, [r7, #20]
 800c65c:	4798      	blx	r3
  }

  return ERR_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3720      	adds	r7, #32
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	0801c51c 	.word	0x0801c51c
 800c66c:	0801c5f8 	.word	0x0801c5f8
 800c670:	0801c560 	.word	0x0801c560
 800c674:	0801c61c 	.word	0x0801c61c
 800c678:	0801c63c 	.word	0x0801c63c
 800c67c:	0801c654 	.word	0x0801c654
 800c680:	0801f516 	.word	0x0801f516

0800c684 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d106      	bne.n	800c6a6 <poll_tcp+0x22>
 800c698:	4b29      	ldr	r3, [pc, #164]	@ (800c740 <poll_tcp+0xbc>)
 800c69a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800c69e:	4929      	ldr	r1, [pc, #164]	@ (800c744 <poll_tcp+0xc0>)
 800c6a0:	4829      	ldr	r0, [pc, #164]	@ (800c748 <poll_tcp+0xc4>)
 800c6a2:	f00d f91f 	bl	80198e4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d104      	bne.n	800c6b8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f000 ff65 	bl	800d580 <lwip_netconn_do_writemore>
 800c6b6:	e016      	b.n	800c6e6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	2b04      	cmp	r3, #4
 800c6be:	d112      	bne.n	800c6e6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <poll_tcp+0x5a>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6a1b      	ldr	r3, [r3, #32]
 800c6cc:	7a5b      	ldrb	r3, [r3, #9]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d005      	beq.n	800c6de <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	7a5a      	ldrb	r2, [r3, #9]
 800c6d8:	3a01      	subs	r2, #1
 800c6da:	b2d2      	uxtb	r2, r2
 800c6dc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c6de:	2101      	movs	r1, #1
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f000 fbf7 	bl	800ced4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	7f1b      	ldrb	r3, [r3, #28]
 800c6ea:	f003 0310 	and.w	r3, r3, #16
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d021      	beq.n	800c736 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d01d      	beq.n	800c736 <poll_tcp+0xb2>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c702:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c706:	d316      	bcc.n	800c736 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c710:	2b04      	cmp	r3, #4
 800c712:	d810      	bhi.n	800c736 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	7f1b      	ldrb	r3, [r3, #28]
 800c718:	f023 0310 	bic.w	r3, r3, #16
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c726:	2b00      	cmp	r3, #0
 800c728:	d005      	beq.n	800c736 <poll_tcp+0xb2>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72e:	2200      	movs	r2, #0
 800c730:	2102      	movs	r1, #2
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c736:	2300      	movs	r3, #0
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	0801c51c 	.word	0x0801c51c
 800c744:	0801c674 	.word	0x0801c674
 800c748:	0801c560 	.word	0x0801c560

0800c74c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	4613      	mov	r3, r2
 800c758:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d106      	bne.n	800c772 <sent_tcp+0x26>
 800c764:	4b20      	ldr	r3, [pc, #128]	@ (800c7e8 <sent_tcp+0x9c>)
 800c766:	f240 1293 	movw	r2, #403	@ 0x193
 800c76a:	4920      	ldr	r1, [pc, #128]	@ (800c7ec <sent_tcp+0xa0>)
 800c76c:	4820      	ldr	r0, [pc, #128]	@ (800c7f0 <sent_tcp+0xa4>)
 800c76e:	f00d f8b9 	bl	80198e4 <iprintf>

  if (conn) {
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d032      	beq.n	800c7de <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	785b      	ldrb	r3, [r3, #1]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d104      	bne.n	800c78a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c780:	2101      	movs	r1, #1
 800c782:	6978      	ldr	r0, [r7, #20]
 800c784:	f000 fefc 	bl	800d580 <lwip_netconn_do_writemore>
 800c788:	e007      	b.n	800c79a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b04      	cmp	r3, #4
 800c790:	d103      	bne.n	800c79a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c792:	2101      	movs	r1, #1
 800c794:	6978      	ldr	r0, [r7, #20]
 800c796:	f000 fb9d 	bl	800ced4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d01d      	beq.n	800c7de <sent_tcp+0x92>
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c7aa:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c7ae:	d316      	bcc.n	800c7de <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c7b8:	2b04      	cmp	r3, #4
 800c7ba:	d810      	bhi.n	800c7de <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	7f1b      	ldrb	r3, [r3, #28]
 800c7c0:	f023 0310 	bic.w	r3, r3, #16
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <sent_tcp+0x92>
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d6:	88fa      	ldrh	r2, [r7, #6]
 800c7d8:	2102      	movs	r1, #2
 800c7da:	6978      	ldr	r0, [r7, #20]
 800c7dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3718      	adds	r7, #24
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0801c51c 	.word	0x0801c51c
 800c7ec:	0801c674 	.word	0x0801c674
 800c7f0:	0801c560 	.word	0x0801c560

0800c7f4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d106      	bne.n	800c818 <err_tcp+0x24>
 800c80a:	4b5f      	ldr	r3, [pc, #380]	@ (800c988 <err_tcp+0x194>)
 800c80c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c810:	495e      	ldr	r1, [pc, #376]	@ (800c98c <err_tcp+0x198>)
 800c812:	485f      	ldr	r0, [pc, #380]	@ (800c990 <err_tcp+0x19c>)
 800c814:	f00d f866 	bl	80198e4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c818:	f00c fb0e 	bl	8018e38 <sys_arch_protect>
 800c81c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	2200      	movs	r2, #0
 800c822:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	78fa      	ldrb	r2, [r7, #3]
 800c828:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	7f1b      	ldrb	r3, [r3, #28]
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	b2da      	uxtb	r2, r3
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	785b      	ldrb	r3, [r3, #1]
 800c83c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	2200      	movs	r2, #0
 800c842:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c844:	69b8      	ldr	r0, [r7, #24]
 800c846:	f00c fb05 	bl	8018e54 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d005      	beq.n	800c85e <err_tcp+0x6a>
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c856:	2200      	movs	r2, #0
 800c858:	2104      	movs	r1, #4
 800c85a:	69f8      	ldr	r0, [r7, #28]
 800c85c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <err_tcp+0x7e>
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c86a:	2200      	movs	r2, #0
 800c86c:	2100      	movs	r1, #0
 800c86e:	69f8      	ldr	r0, [r7, #28]
 800c870:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c876:	2b00      	cmp	r3, #0
 800c878:	d005      	beq.n	800c886 <err_tcp+0x92>
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c87e:	2200      	movs	r2, #0
 800c880:	2102      	movs	r1, #2
 800c882:	69f8      	ldr	r0, [r7, #28]
 800c884:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff fd86 	bl	800c39c <lwip_netconn_err_to_msg>
 800c890:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	3310      	adds	r3, #16
 800c896:	4618      	mov	r0, r3
 800c898:	f00c f9c4 	bl	8018c24 <sys_mbox_valid>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d005      	beq.n	800c8ae <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	3310      	adds	r3, #16
 800c8a6:	6939      	ldr	r1, [r7, #16]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f00c f959 	bl	8018b60 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f00c f9b6 	bl	8018c24 <sys_mbox_valid>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d005      	beq.n	800c8ca <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	6939      	ldr	r1, [r7, #16]
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f00c f94b 	bl	8018b60 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d005      	beq.n	800c8dc <err_tcp+0xe8>
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	2b04      	cmp	r3, #4
 800c8d4:	d002      	beq.n	800c8dc <err_tcp+0xe8>
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	2b03      	cmp	r3, #3
 800c8da:	d143      	bne.n	800c964 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	7f1b      	ldrb	r3, [r3, #28]
 800c8e0:	f003 0304 	and.w	r3, r3, #4
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	bf14      	ite	ne
 800c8e8:	2301      	movne	r3, #1
 800c8ea:	2300      	moveq	r3, #0
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	7f1b      	ldrb	r3, [r3, #28]
 800c8f4:	f023 0304 	bic.w	r3, r3, #4
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d13b      	bne.n	800c97c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	6a1b      	ldr	r3, [r3, #32]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d106      	bne.n	800c91a <err_tcp+0x126>
 800c90c:	4b1e      	ldr	r3, [pc, #120]	@ (800c988 <err_tcp+0x194>)
 800c90e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c912:	4920      	ldr	r1, [pc, #128]	@ (800c994 <err_tcp+0x1a0>)
 800c914:	481e      	ldr	r0, [pc, #120]	@ (800c990 <err_tcp+0x19c>)
 800c916:	f00c ffe5 	bl	80198e4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	2b04      	cmp	r3, #4
 800c91e:	d104      	bne.n	800c92a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	2200      	movs	r2, #0
 800c926:	711a      	strb	r2, [r3, #4]
 800c928:	e003      	b.n	800c932 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	78fa      	ldrb	r2, [r7, #3]
 800c930:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	330c      	adds	r3, #12
 800c93a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c93c:	68b8      	ldr	r0, [r7, #8]
 800c93e:	f00c f9ff 	bl	8018d40 <sys_sem_valid>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d106      	bne.n	800c956 <err_tcp+0x162>
 800c948:	4b0f      	ldr	r3, [pc, #60]	@ (800c988 <err_tcp+0x194>)
 800c94a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c94e:	4912      	ldr	r1, [pc, #72]	@ (800c998 <err_tcp+0x1a4>)
 800c950:	480f      	ldr	r0, [pc, #60]	@ (800c990 <err_tcp+0x19c>)
 800c952:	f00c ffc7 	bl	80198e4 <iprintf>
      conn->current_msg = NULL;
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	2200      	movs	r2, #0
 800c95a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f00c f9d5 	bl	8018d0c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c962:	e00b      	b.n	800c97c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d008      	beq.n	800c97e <err_tcp+0x18a>
 800c96c:	4b06      	ldr	r3, [pc, #24]	@ (800c988 <err_tcp+0x194>)
 800c96e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c972:	490a      	ldr	r1, [pc, #40]	@ (800c99c <err_tcp+0x1a8>)
 800c974:	4806      	ldr	r0, [pc, #24]	@ (800c990 <err_tcp+0x19c>)
 800c976:	f00c ffb5 	bl	80198e4 <iprintf>
  }
}
 800c97a:	e000      	b.n	800c97e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c97c:	bf00      	nop
}
 800c97e:	bf00      	nop
 800c980:	3720      	adds	r7, #32
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	0801c51c 	.word	0x0801c51c
 800c98c:	0801c674 	.word	0x0801c674
 800c990:	0801c560 	.word	0x0801c560
 800c994:	0801c684 	.word	0x0801c684
 800c998:	0801c6a0 	.word	0x0801c6a0
 800c99c:	0801c6bc 	.word	0x0801c6bc

0800c9a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c9ae:	6879      	ldr	r1, [r7, #4]
 800c9b0:	68f8      	ldr	r0, [r7, #12]
 800c9b2:	f004 fccd 	bl	8011350 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c9b6:	490a      	ldr	r1, [pc, #40]	@ (800c9e0 <setup_tcp+0x40>)
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f004 fcdb 	bl	8011374 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c9be:	4909      	ldr	r1, [pc, #36]	@ (800c9e4 <setup_tcp+0x44>)
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f004 fcf9 	bl	80113b8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	4907      	ldr	r1, [pc, #28]	@ (800c9e8 <setup_tcp+0x48>)
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f004 fd50 	bl	8011470 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c9d0:	4906      	ldr	r1, [pc, #24]	@ (800c9ec <setup_tcp+0x4c>)
 800c9d2:	68f8      	ldr	r0, [r7, #12]
 800c9d4:	f004 fd12 	bl	80113fc <tcp_err>
}
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	0800c579 	.word	0x0800c579
 800c9e4:	0800c74d 	.word	0x0800c74d
 800c9e8:	0800c685 	.word	0x0800c685
 800c9ec:	0800c7f5 	.word	0x0800c7f5

0800c9f0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800c9f0:	b590      	push	{r4, r7, lr}
 800c9f2:	b089      	sub	sp, #36	@ 0x24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d102      	bne.n	800ca0e <accept_function+0x1e>
    return ERR_VAL;
 800ca08:	f06f 0305 	mvn.w	r3, #5
 800ca0c:	e0a1      	b.n	800cb52 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	3314      	adds	r3, #20
 800ca12:	4618      	mov	r0, r3
 800ca14:	f00c f906 	bl	8018c24 <sys_mbox_valid>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d102      	bne.n	800ca24 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ca1e:	f06f 0305 	mvn.w	r3, #5
 800ca22:	e096      	b.n	800cb52 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d11b      	bne.n	800ca62 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	f103 0414 	add.w	r4, r3, #20
 800ca30:	f06f 000c 	mvn.w	r0, #12
 800ca34:	f7ff fcb2 	bl	800c39c <lwip_netconn_err_to_msg>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f00c f88f 	bl	8018b60 <sys_mbox_trypost>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d109      	bne.n	800ca5c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <accept_function+0x6c>
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca54:	2200      	movs	r2, #0
 800ca56:	2100      	movs	r1, #0
 800ca58:	69f8      	ldr	r0, [r7, #28]
 800ca5a:	4798      	blx	r3
    }
    return ERR_VAL;
 800ca5c:	f06f 0305 	mvn.w	r3, #5
 800ca60:	e077      	b.n	800cb52 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800ca62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d006      	beq.n	800ca78 <accept_function+0x88>
 800ca6a:	4b3c      	ldr	r3, [pc, #240]	@ (800cb5c <accept_function+0x16c>)
 800ca6c:	f240 222a 	movw	r2, #554	@ 0x22a
 800ca70:	493b      	ldr	r1, [pc, #236]	@ (800cb60 <accept_function+0x170>)
 800ca72:	483c      	ldr	r0, [pc, #240]	@ (800cb64 <accept_function+0x174>)
 800ca74:	f00c ff36 	bl	80198e4 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca80:	4619      	mov	r1, r3
 800ca82:	4610      	mov	r0, r2
 800ca84:	f000 f8f0 	bl	800cc68 <netconn_alloc>
 800ca88:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ca8a:	69bb      	ldr	r3, [r7, #24]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d11b      	bne.n	800cac8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	f103 0414 	add.w	r4, r3, #20
 800ca96:	f06f 000c 	mvn.w	r0, #12
 800ca9a:	f7ff fc7f 	bl	800c39c <lwip_netconn_err_to_msg>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	4619      	mov	r1, r3
 800caa2:	4620      	mov	r0, r4
 800caa4:	f00c f85c 	bl	8018b60 <sys_mbox_trypost>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d109      	bne.n	800cac2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d005      	beq.n	800cac2 <accept_function+0xd2>
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caba:	2200      	movs	r2, #0
 800cabc:	2100      	movs	r1, #0
 800cabe:	69f8      	ldr	r0, [r7, #28]
 800cac0:	4798      	blx	r3
    }
    return ERR_MEM;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	e044      	b.n	800cb52 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800cace:	69b8      	ldr	r0, [r7, #24]
 800cad0:	f7ff ff66 	bl	800c9a0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3314      	adds	r3, #20
 800cad8:	69b9      	ldr	r1, [r7, #24]
 800cada:	4618      	mov	r0, r3
 800cadc:	f00c f840 	bl	8018b60 <sys_mbox_trypost>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d02a      	beq.n	800cb3c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800caec:	2100      	movs	r1, #0
 800caee:	6978      	ldr	r0, [r7, #20]
 800caf0:	f004 fc2e 	bl	8011350 <tcp_arg>
    tcp_recv(pcb, NULL);
 800caf4:	2100      	movs	r1, #0
 800caf6:	6978      	ldr	r0, [r7, #20]
 800caf8:	f004 fc3c 	bl	8011374 <tcp_recv>
    tcp_sent(pcb, NULL);
 800cafc:	2100      	movs	r1, #0
 800cafe:	6978      	ldr	r0, [r7, #20]
 800cb00:	f004 fc5a 	bl	80113b8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800cb04:	2200      	movs	r2, #0
 800cb06:	2100      	movs	r1, #0
 800cb08:	6978      	ldr	r0, [r7, #20]
 800cb0a:	f004 fcb1 	bl	8011470 <tcp_poll>
    tcp_err(pcb, NULL);
 800cb0e:	2100      	movs	r1, #0
 800cb10:	6978      	ldr	r0, [r7, #20]
 800cb12:	f004 fc73 	bl	80113fc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800cb16:	69bb      	ldr	r3, [r7, #24]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	3310      	adds	r3, #16
 800cb20:	4618      	mov	r0, r3
 800cb22:	f00c f80b 	bl	8018b3c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	3310      	adds	r3, #16
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f00c f88b 	bl	8018c46 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800cb30:	69b8      	ldr	r0, [r7, #24]
 800cb32:	f000 f907 	bl	800cd44 <netconn_free>
    return ERR_MEM;
 800cb36:	f04f 33ff 	mov.w	r3, #4294967295
 800cb3a:	e00a      	b.n	800cb52 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d005      	beq.n	800cb50 <accept_function+0x160>
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	2200      	movs	r2, #0
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	69f8      	ldr	r0, [r7, #28]
 800cb4e:	4798      	blx	r3
  }

  return ERR_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3724      	adds	r7, #36	@ 0x24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd90      	pop	{r4, r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0801c51c 	.word	0x0801c51c
 800cb60:	0801c6d8 	.word	0x0801c6d8
 800cb64:	0801c560 	.word	0x0801c560

0800cb68 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800cb68:	b590      	push	{r4, r7, lr}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d006      	beq.n	800cb8c <pcb_new+0x24>
 800cb7e:	4b2b      	ldr	r3, [pc, #172]	@ (800cc2c <pcb_new+0xc4>)
 800cb80:	f240 2265 	movw	r2, #613	@ 0x265
 800cb84:	492a      	ldr	r1, [pc, #168]	@ (800cc30 <pcb_new+0xc8>)
 800cb86:	482b      	ldr	r0, [pc, #172]	@ (800cc34 <pcb_new+0xcc>)
 800cb88:	f00c feac 	bl	80198e4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb96:	2b10      	cmp	r3, #16
 800cb98:	d022      	beq.n	800cbe0 <pcb_new+0x78>
 800cb9a:	2b20      	cmp	r3, #32
 800cb9c:	d133      	bne.n	800cc06 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681c      	ldr	r4, [r3, #0]
 800cba2:	7bfb      	ldrb	r3, [r7, #15]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f009 fcac 	bl	8016502 <udp_new_ip_type>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d02a      	beq.n	800cc0e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	2b22      	cmp	r3, #34	@ 0x22
 800cbc0:	d104      	bne.n	800cbcc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	6858      	ldr	r0, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	4917      	ldr	r1, [pc, #92]	@ (800cc38 <pcb_new+0xd0>)
 800cbda:	f009 fc19 	bl	8016410 <udp_recv>
      }
      break;
 800cbde:	e016      	b.n	800cc0e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681c      	ldr	r4, [r3, #0]
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f004 fba4 	bl	8011334 <tcp_new_ip_type>
 800cbec:	4603      	mov	r3, r0
 800cbee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff fece 	bl	800c9a0 <setup_tcp>
      }
      break;
 800cc04:	e005      	b.n	800cc12 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	22fa      	movs	r2, #250	@ 0xfa
 800cc0a:	711a      	strb	r2, [r3, #4]
      return;
 800cc0c:	e00a      	b.n	800cc24 <pcb_new+0xbc>
      break;
 800cc0e:	bf00      	nop
 800cc10:	e000      	b.n	800cc14 <pcb_new+0xac>
      break;
 800cc12:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d102      	bne.n	800cc24 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	22ff      	movs	r2, #255	@ 0xff
 800cc22:	711a      	strb	r2, [r3, #4]
  }
}
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd90      	pop	{r4, r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0801c51c 	.word	0x0801c51c
 800cc30:	0801c700 	.word	0x0801c700
 800cc34:	0801c560 	.word	0x0801c560
 800cc38:	0800c47d 	.word	0x0800c47d

0800cc3c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b084      	sub	sp, #16
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d102      	bne.n	800cc5e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7ff ff85 	bl	800cb68 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cc5e:	bf00      	nop
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	6039      	str	r1, [r7, #0]
 800cc72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cc78:	2007      	movs	r0, #7
 800cc7a:	f001 fdf3 	bl	800e864 <memp_malloc>
 800cc7e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <netconn_alloc+0x22>
    return NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e052      	b.n	800cd30 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	79fa      	ldrb	r2, [r7, #7]
 800cc94:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800cc9c:	79fb      	ldrb	r3, [r7, #7]
 800cc9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cca2:	2b10      	cmp	r3, #16
 800cca4:	d004      	beq.n	800ccb0 <netconn_alloc+0x48>
 800cca6:	2b20      	cmp	r3, #32
 800cca8:	d105      	bne.n	800ccb6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ccaa:	2306      	movs	r3, #6
 800ccac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ccae:	e00a      	b.n	800ccc6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ccb0:	2306      	movs	r3, #6
 800ccb2:	617b      	str	r3, [r7, #20]
      break;
 800ccb4:	e007      	b.n	800ccc6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ccb6:	4b20      	ldr	r3, [pc, #128]	@ (800cd38 <netconn_alloc+0xd0>)
 800ccb8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800ccbc:	491f      	ldr	r1, [pc, #124]	@ (800cd3c <netconn_alloc+0xd4>)
 800ccbe:	4820      	ldr	r0, [pc, #128]	@ (800cd40 <netconn_alloc+0xd8>)
 800ccc0:	f00c fe10 	bl	80198e4 <iprintf>
      goto free_and_return;
 800ccc4:	e02f      	b.n	800cd26 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3310      	adds	r3, #16
 800ccca:	6979      	ldr	r1, [r7, #20]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f00b ff1b 	bl	8018b08 <sys_mbox_new>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d125      	bne.n	800cd24 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	330c      	adds	r3, #12
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f00b ffbe 	bl	8018c60 <sys_sem_new>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3310      	adds	r3, #16
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f00b ff24 	bl	8018b3c <sys_mbox_free>
    goto free_and_return;
 800ccf4:	e017      	b.n	800cd26 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3314      	adds	r3, #20
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f00b ffa3 	bl	8018c46 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	2200      	movs	r2, #0
 800cd04:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	683a      	ldr	r2, [r7, #0]
 800cd12:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	7cfa      	ldrb	r2, [r7, #19]
 800cd1e:	771a      	strb	r2, [r3, #28]
  return conn;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	e005      	b.n	800cd30 <netconn_alloc+0xc8>
    goto free_and_return;
 800cd24:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cd26:	68f9      	ldr	r1, [r7, #12]
 800cd28:	2007      	movs	r0, #7
 800cd2a:	f001 fded 	bl	800e908 <memp_free>
  return NULL;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3718      	adds	r7, #24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	0801c51c 	.word	0x0801c51c
 800cd3c:	0801c720 	.word	0x0801c720
 800cd40:	0801c560 	.word	0x0801c560

0800cd44 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <netconn_free+0x1e>
 800cd54:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc4 <netconn_free+0x80>)
 800cd56:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cd5a:	491b      	ldr	r1, [pc, #108]	@ (800cdc8 <netconn_free+0x84>)
 800cd5c:	481b      	ldr	r0, [pc, #108]	@ (800cdcc <netconn_free+0x88>)
 800cd5e:	f00c fdc1 	bl	80198e4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	3310      	adds	r3, #16
 800cd66:	4618      	mov	r0, r3
 800cd68:	f00b ff5c 	bl	8018c24 <sys_mbox_valid>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d006      	beq.n	800cd80 <netconn_free+0x3c>
 800cd72:	4b14      	ldr	r3, [pc, #80]	@ (800cdc4 <netconn_free+0x80>)
 800cd74:	f240 3223 	movw	r2, #803	@ 0x323
 800cd78:	4915      	ldr	r1, [pc, #84]	@ (800cdd0 <netconn_free+0x8c>)
 800cd7a:	4814      	ldr	r0, [pc, #80]	@ (800cdcc <netconn_free+0x88>)
 800cd7c:	f00c fdb2 	bl	80198e4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3314      	adds	r3, #20
 800cd84:	4618      	mov	r0, r3
 800cd86:	f00b ff4d 	bl	8018c24 <sys_mbox_valid>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d006      	beq.n	800cd9e <netconn_free+0x5a>
 800cd90:	4b0c      	ldr	r3, [pc, #48]	@ (800cdc4 <netconn_free+0x80>)
 800cd92:	f240 3226 	movw	r2, #806	@ 0x326
 800cd96:	490f      	ldr	r1, [pc, #60]	@ (800cdd4 <netconn_free+0x90>)
 800cd98:	480c      	ldr	r0, [pc, #48]	@ (800cdcc <netconn_free+0x88>)
 800cd9a:	f00c fda3 	bl	80198e4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	330c      	adds	r3, #12
 800cda2:	4618      	mov	r0, r3
 800cda4:	f00b ffbf 	bl	8018d26 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	330c      	adds	r3, #12
 800cdac:	4618      	mov	r0, r3
 800cdae:	f00b ffd8 	bl	8018d62 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	2007      	movs	r0, #7
 800cdb6:	f001 fda7 	bl	800e908 <memp_free>
}
 800cdba:	bf00      	nop
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	0801c51c 	.word	0x0801c51c
 800cdc8:	0801c748 	.word	0x0801c748
 800cdcc:	0801c560 	.word	0x0801c560
 800cdd0:	0801c778 	.word	0x0801c778
 800cdd4:	0801c7b4 	.word	0x0801c7b4

0800cdd8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3310      	adds	r3, #16
 800cde4:	4618      	mov	r0, r3
 800cde6:	f00b ff1d 	bl	8018c24 <sys_mbox_valid>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d02f      	beq.n	800ce50 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cdf0:	e018      	b.n	800ce24 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdfa:	2b10      	cmp	r3, #16
 800cdfc:	d10e      	bne.n	800ce1c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f107 020f 	add.w	r2, r7, #15
 800ce04:	4611      	mov	r1, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff fafe 	bl	800c408 <lwip_netconn_is_err_msg>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d108      	bne.n	800ce24 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f002 fc1b 	bl	800f650 <pbuf_free>
 800ce1a:	e003      	b.n	800ce24 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fe92 	bl	800db48 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3310      	adds	r3, #16
 800ce28:	f107 0210 	add.w	r2, r7, #16
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f00b fee1 	bl	8018bf6 <sys_arch_mbox_tryfetch>
 800ce34:	4603      	mov	r3, r0
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d1da      	bne.n	800cdf2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3310      	adds	r3, #16
 800ce40:	4618      	mov	r0, r3
 800ce42:	f00b fe7b 	bl	8018b3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	3310      	adds	r3, #16
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f00b fefb 	bl	8018c46 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	3314      	adds	r3, #20
 800ce54:	4618      	mov	r0, r3
 800ce56:	f00b fee5 	bl	8018c24 <sys_mbox_valid>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d034      	beq.n	800ceca <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce60:	e01d      	b.n	800ce9e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f107 020e 	add.w	r2, r7, #14
 800ce68:	4611      	mov	r1, r2
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff facc 	bl	800c408 <lwip_netconn_is_err_msg>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d113      	bne.n	800ce9e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800ce7a:	6978      	ldr	r0, [r7, #20]
 800ce7c:	f7ff ffac 	bl	800cdd8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d007      	beq.n	800ce98 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f003 f9cf 	bl	8010230 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2200      	movs	r2, #0
 800ce96:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800ce98:	6978      	ldr	r0, [r7, #20]
 800ce9a:	f7ff ff53 	bl	800cd44 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3314      	adds	r3, #20
 800cea2:	f107 0210 	add.w	r2, r7, #16
 800cea6:	4611      	mov	r1, r2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f00b fea4 	bl	8018bf6 <sys_arch_mbox_tryfetch>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb4:	d1d5      	bne.n	800ce62 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	3314      	adds	r3, #20
 800ceba:	4618      	mov	r0, r3
 800cebc:	f00b fe3e 	bl	8018b3c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3314      	adds	r3, #20
 800cec4:	4618      	mov	r0, r3
 800cec6:	f00b febe 	bl	8018c46 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ceca:	bf00      	nop
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
	...

0800ced4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800cee0:	2300      	movs	r3, #0
 800cee2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <lwip_netconn_do_close_internal+0x24>
 800ceea:	4b87      	ldr	r3, [pc, #540]	@ (800d108 <lwip_netconn_do_close_internal+0x234>)
 800ceec:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800cef0:	4986      	ldr	r1, [pc, #536]	@ (800d10c <lwip_netconn_do_close_internal+0x238>)
 800cef2:	4887      	ldr	r0, [pc, #540]	@ (800d110 <lwip_netconn_do_close_internal+0x23c>)
 800cef4:	f00c fcf6 	bl	80198e4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf00:	2b10      	cmp	r3, #16
 800cf02:	d006      	beq.n	800cf12 <lwip_netconn_do_close_internal+0x3e>
 800cf04:	4b80      	ldr	r3, [pc, #512]	@ (800d108 <lwip_netconn_do_close_internal+0x234>)
 800cf06:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800cf0a:	4982      	ldr	r1, [pc, #520]	@ (800d114 <lwip_netconn_do_close_internal+0x240>)
 800cf0c:	4880      	ldr	r0, [pc, #512]	@ (800d110 <lwip_netconn_do_close_internal+0x23c>)
 800cf0e:	f00c fce9 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	785b      	ldrb	r3, [r3, #1]
 800cf16:	2b04      	cmp	r3, #4
 800cf18:	d006      	beq.n	800cf28 <lwip_netconn_do_close_internal+0x54>
 800cf1a:	4b7b      	ldr	r3, [pc, #492]	@ (800d108 <lwip_netconn_do_close_internal+0x234>)
 800cf1c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800cf20:	497d      	ldr	r1, [pc, #500]	@ (800d118 <lwip_netconn_do_close_internal+0x244>)
 800cf22:	487b      	ldr	r0, [pc, #492]	@ (800d110 <lwip_netconn_do_close_internal+0x23c>)
 800cf24:	f00c fcde 	bl	80198e4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d106      	bne.n	800cf3e <lwip_netconn_do_close_internal+0x6a>
 800cf30:	4b75      	ldr	r3, [pc, #468]	@ (800d108 <lwip_netconn_do_close_internal+0x234>)
 800cf32:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800cf36:	4979      	ldr	r1, [pc, #484]	@ (800d11c <lwip_netconn_do_close_internal+0x248>)
 800cf38:	4875      	ldr	r0, [pc, #468]	@ (800d110 <lwip_netconn_do_close_internal+0x23c>)
 800cf3a:	f00c fcd3 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d106      	bne.n	800cf54 <lwip_netconn_do_close_internal+0x80>
 800cf46:	4b70      	ldr	r3, [pc, #448]	@ (800d108 <lwip_netconn_do_close_internal+0x234>)
 800cf48:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cf4c:	4974      	ldr	r1, [pc, #464]	@ (800d120 <lwip_netconn_do_close_internal+0x24c>)
 800cf4e:	4870      	ldr	r0, [pc, #448]	@ (800d110 <lwip_netconn_do_close_internal+0x23c>)
 800cf50:	f00c fcc8 	bl	80198e4 <iprintf>

  tpcb = conn->pcb.tcp;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	7a1b      	ldrb	r3, [r3, #8]
 800cf60:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800cf6a:	7bfb      	ldrb	r3, [r7, #15]
 800cf6c:	f003 0302 	and.w	r3, r3, #2
 800cf70:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d102      	bne.n	800cf7e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800cf78:	2301      	movs	r3, #1
 800cf7a:	75bb      	strb	r3, [r7, #22]
 800cf7c:	e01f      	b.n	800cfbe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800cf7e:	7bbb      	ldrb	r3, [r7, #14]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d00e      	beq.n	800cfa2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800cf88:	2b05      	cmp	r3, #5
 800cf8a:	d007      	beq.n	800cf9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800cf90:	2b06      	cmp	r3, #6
 800cf92:	d003      	beq.n	800cf9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800cf98:	2b08      	cmp	r3, #8
 800cf9a:	d102      	bne.n	800cfa2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	75bb      	strb	r3, [r7, #22]
 800cfa0:	e00d      	b.n	800cfbe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800cfa2:	7b7b      	ldrb	r3, [r7, #13]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d008      	beq.n	800cfba <lwip_netconn_do_close_internal+0xe6>
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	8b5b      	ldrh	r3, [r3, #26]
 800cfac:	f003 0310 	and.w	r3, r3, #16
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	75bb      	strb	r3, [r7, #22]
 800cfb8:	e001      	b.n	800cfbe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800cfbe:	7dbb      	ldrb	r3, [r7, #22]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6938      	ldr	r0, [r7, #16]
 800cfc8:	f004 f9c2 	bl	8011350 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	7d1b      	ldrb	r3, [r3, #20]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d104      	bne.n	800cfde <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	6938      	ldr	r0, [r7, #16]
 800cfd8:	f004 fa32 	bl	8011440 <tcp_accept>
 800cfdc:	e01d      	b.n	800d01a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800cfde:	7bbb      	ldrb	r3, [r7, #14]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d007      	beq.n	800cff4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	6938      	ldr	r0, [r7, #16]
 800cfe8:	f004 f9c4 	bl	8011374 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cfec:	2100      	movs	r1, #0
 800cfee:	6938      	ldr	r0, [r7, #16]
 800cff0:	f004 fa26 	bl	8011440 <tcp_accept>
    }
    if (shut_tx) {
 800cff4:	7b7b      	ldrb	r3, [r7, #13]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cffa:	2100      	movs	r1, #0
 800cffc:	6938      	ldr	r0, [r7, #16]
 800cffe:	f004 f9db 	bl	80113b8 <tcp_sent>
    }
    if (shut_close) {
 800d002:	7dbb      	ldrb	r3, [r7, #22]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d008      	beq.n	800d01a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d008:	2200      	movs	r2, #0
 800d00a:	2100      	movs	r1, #0
 800d00c:	6938      	ldr	r0, [r7, #16]
 800d00e:	f004 fa2f 	bl	8011470 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d012:	2100      	movs	r1, #0
 800d014:	6938      	ldr	r0, [r7, #16]
 800d016:	f004 f9f1 	bl	80113fc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d01a:	7dbb      	ldrb	r3, [r7, #22]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d005      	beq.n	800d02c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d020:	6938      	ldr	r0, [r7, #16]
 800d022:	f002 ffbf 	bl	800ffa4 <tcp_close>
 800d026:	4603      	mov	r3, r0
 800d028:	75fb      	strb	r3, [r7, #23]
 800d02a:	e007      	b.n	800d03c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	7b7a      	ldrb	r2, [r7, #13]
 800d030:	4619      	mov	r1, r3
 800d032:	6938      	ldr	r0, [r7, #16]
 800d034:	f002 ffe2 	bl	800fffc <tcp_shutdown>
 800d038:	4603      	mov	r3, r0
 800d03a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d03c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d044:	2301      	movs	r3, #1
 800d046:	757b      	strb	r3, [r7, #21]
 800d048:	e016      	b.n	800d078 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d052:	d10f      	bne.n	800d074 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a1b      	ldr	r3, [r3, #32]
 800d058:	7a5b      	ldrb	r3, [r3, #9]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10c      	bne.n	800d078 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d05e:	2301      	movs	r3, #1
 800d060:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d062:	7dbb      	ldrb	r3, [r7, #22]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d068:	6938      	ldr	r0, [r7, #16]
 800d06a:	f003 f8e1 	bl	8010230 <tcp_abort>
          err = ERR_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	75fb      	strb	r3, [r7, #23]
 800d072:	e001      	b.n	800d078 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d074:	2301      	movs	r3, #1
 800d076:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d078:	7d7b      	ldrb	r3, [r7, #21]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d052      	beq.n	800d124 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	330c      	adds	r3, #12
 800d086:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	7dfa      	ldrb	r2, [r7, #23]
 800d08e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d09c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d129      	bne.n	800d0f8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d0a4:	7dbb      	ldrb	r3, [r7, #22]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00c      	beq.n	800d0c4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <lwip_netconn_do_close_internal+0x1f0>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0bc:	2200      	movs	r2, #0
 800d0be:	2104      	movs	r1, #4
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	4798      	blx	r3
      }
      if (shut_rx) {
 800d0c4:	7bbb      	ldrb	r3, [r7, #14]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d009      	beq.n	800d0de <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d005      	beq.n	800d0de <lwip_netconn_do_close_internal+0x20a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	2100      	movs	r1, #0
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	4798      	blx	r3
      }
      if (shut_tx) {
 800d0de:	7b7b      	ldrb	r3, [r7, #13]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d009      	beq.n	800d0f8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d005      	beq.n	800d0f8 <lwip_netconn_do_close_internal+0x224>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2102      	movs	r1, #2
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d0f8:	78fb      	ldrb	r3, [r7, #3]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d0fe:	68b8      	ldr	r0, [r7, #8]
 800d100:	f00b fe04 	bl	8018d0c <sys_sem_signal>
    }
    return ERR_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	e03c      	b.n	800d182 <lwip_netconn_do_close_internal+0x2ae>
 800d108:	0801c51c 	.word	0x0801c51c
 800d10c:	0801c7f0 	.word	0x0801c7f0
 800d110:	0801c560 	.word	0x0801c560
 800d114:	0801c800 	.word	0x0801c800
 800d118:	0801c820 	.word	0x0801c820
 800d11c:	0801c844 	.word	0x0801c844
 800d120:	0801c684 	.word	0x0801c684
  }
  if (!close_finished) {
 800d124:	7d7b      	ldrb	r3, [r7, #21]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d11e      	bne.n	800d168 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	7d1b      	ldrb	r3, [r3, #20]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d106      	bne.n	800d140 <lwip_netconn_do_close_internal+0x26c>
 800d132:	4b16      	ldr	r3, [pc, #88]	@ (800d18c <lwip_netconn_do_close_internal+0x2b8>)
 800d134:	f240 4241 	movw	r2, #1089	@ 0x441
 800d138:	4915      	ldr	r1, [pc, #84]	@ (800d190 <lwip_netconn_do_close_internal+0x2bc>)
 800d13a:	4816      	ldr	r0, [pc, #88]	@ (800d194 <lwip_netconn_do_close_internal+0x2c0>)
 800d13c:	f00c fbd2 	bl	80198e4 <iprintf>
    if (shut_tx) {
 800d140:	7b7b      	ldrb	r3, [r7, #13]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d146:	4914      	ldr	r1, [pc, #80]	@ (800d198 <lwip_netconn_do_close_internal+0x2c4>)
 800d148:	6938      	ldr	r0, [r7, #16]
 800d14a:	f004 f935 	bl	80113b8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d14e:	2201      	movs	r2, #1
 800d150:	4912      	ldr	r1, [pc, #72]	@ (800d19c <lwip_netconn_do_close_internal+0x2c8>)
 800d152:	6938      	ldr	r0, [r7, #16]
 800d154:	f004 f98c 	bl	8011470 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d158:	4911      	ldr	r1, [pc, #68]	@ (800d1a0 <lwip_netconn_do_close_internal+0x2cc>)
 800d15a:	6938      	ldr	r0, [r7, #16]
 800d15c:	f004 f94e 	bl	80113fc <tcp_err>
    tcp_arg(tpcb, conn);
 800d160:	6879      	ldr	r1, [r7, #4]
 800d162:	6938      	ldr	r0, [r7, #16]
 800d164:	f004 f8f4 	bl	8011350 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d106      	bne.n	800d17e <lwip_netconn_do_close_internal+0x2aa>
 800d170:	4b06      	ldr	r3, [pc, #24]	@ (800d18c <lwip_netconn_do_close_internal+0x2b8>)
 800d172:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d176:	490b      	ldr	r1, [pc, #44]	@ (800d1a4 <lwip_netconn_do_close_internal+0x2d0>)
 800d178:	4806      	ldr	r0, [pc, #24]	@ (800d194 <lwip_netconn_do_close_internal+0x2c0>)
 800d17a:	f00c fbb3 	bl	80198e4 <iprintf>
  return err;
 800d17e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d182:	4618      	mov	r0, r3
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	0801c51c 	.word	0x0801c51c
 800d190:	0801c858 	.word	0x0801c858
 800d194:	0801c560 	.word	0x0801c560
 800d198:	0800c74d 	.word	0x0800c74d
 800d19c:	0800c685 	.word	0x0800c685
 800d1a0:	0800c7f5 	.word	0x0800c7f5
 800d1a4:	0801c87c 	.word	0x0801c87c

0800d1a8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d1bc:	7afb      	ldrb	r3, [r7, #11]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00d      	beq.n	800d1de <lwip_netconn_do_delconn+0x36>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1cc:	2b10      	cmp	r3, #16
 800d1ce:	d006      	beq.n	800d1de <lwip_netconn_do_delconn+0x36>
 800d1d0:	4b60      	ldr	r3, [pc, #384]	@ (800d354 <lwip_netconn_do_delconn+0x1ac>)
 800d1d2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d1d6:	4960      	ldr	r1, [pc, #384]	@ (800d358 <lwip_netconn_do_delconn+0x1b0>)
 800d1d8:	4860      	ldr	r0, [pc, #384]	@ (800d35c <lwip_netconn_do_delconn+0x1b4>)
 800d1da:	f00c fb83 	bl	80198e4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d1de:	7afb      	ldrb	r3, [r7, #11]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d005      	beq.n	800d1f0 <lwip_netconn_do_delconn+0x48>
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d002      	beq.n	800d1f0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d1ea:	7afb      	ldrb	r3, [r7, #11]
 800d1ec:	2b03      	cmp	r3, #3
 800d1ee:	d109      	bne.n	800d204 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d1f0:	7afb      	ldrb	r3, [r7, #11]
 800d1f2:	2b03      	cmp	r3, #3
 800d1f4:	d10a      	bne.n	800d20c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	7f1b      	ldrb	r3, [r3, #28]
 800d1fc:	f003 0304 	and.w	r3, r3, #4
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	22fb      	movs	r2, #251	@ 0xfb
 800d208:	711a      	strb	r2, [r3, #4]
 800d20a:	e097      	b.n	800d33c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d20c:	7afb      	ldrb	r3, [r7, #11]
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d10d      	bne.n	800d22e <lwip_netconn_do_delconn+0x86>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	7f1b      	ldrb	r3, [r3, #28]
 800d218:	f003 0304 	and.w	r3, r3, #4
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d106      	bne.n	800d22e <lwip_netconn_do_delconn+0x86>
 800d220:	4b4c      	ldr	r3, [pc, #304]	@ (800d354 <lwip_netconn_do_delconn+0x1ac>)
 800d222:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d226:	494e      	ldr	r1, [pc, #312]	@ (800d360 <lwip_netconn_do_delconn+0x1b8>)
 800d228:	484c      	ldr	r0, [pc, #304]	@ (800d35c <lwip_netconn_do_delconn+0x1b4>)
 800d22a:	f00c fb5b 	bl	80198e4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fdcd 	bl	800cdd8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d05f      	beq.n	800d308 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d252:	2b10      	cmp	r3, #16
 800d254:	d00d      	beq.n	800d272 <lwip_netconn_do_delconn+0xca>
 800d256:	2b20      	cmp	r3, #32
 800d258:	d151      	bne.n	800d2fe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f009 f8f0 	bl	8016450 <udp_remove>
          break;
 800d270:	e046      	b.n	800d300 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d006      	beq.n	800d28a <lwip_netconn_do_delconn+0xe2>
 800d27c:	4b35      	ldr	r3, [pc, #212]	@ (800d354 <lwip_netconn_do_delconn+0x1ac>)
 800d27e:	f240 4294 	movw	r2, #1172	@ 0x494
 800d282:	4938      	ldr	r1, [pc, #224]	@ (800d364 <lwip_netconn_do_delconn+0x1bc>)
 800d284:	4835      	ldr	r0, [pc, #212]	@ (800d35c <lwip_netconn_do_delconn+0x1b4>)
 800d286:	f00c fb2d 	bl	80198e4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	2204      	movs	r2, #4
 800d290:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2203      	movs	r2, #3
 800d296:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff fe14 	bl	800ced4 <lwip_netconn_do_close_internal>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d04b      	beq.n	800d34a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b04      	cmp	r3, #4
 800d2ba:	d006      	beq.n	800d2ca <lwip_netconn_do_delconn+0x122>
 800d2bc:	4b25      	ldr	r3, [pc, #148]	@ (800d354 <lwip_netconn_do_delconn+0x1ac>)
 800d2be:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d2c2:	4929      	ldr	r1, [pc, #164]	@ (800d368 <lwip_netconn_do_delconn+0x1c0>)
 800d2c4:	4825      	ldr	r0, [pc, #148]	@ (800d35c <lwip_netconn_do_delconn+0x1b4>)
 800d2c6:	f00c fb0d 	bl	80198e4 <iprintf>
            UNLOCK_TCPIP_CORE();
 800d2ca:	4828      	ldr	r0, [pc, #160]	@ (800d36c <lwip_netconn_do_delconn+0x1c4>)
 800d2cc:	f00b fd87 	bl	8018dde <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f00b fce6 	bl	8018caa <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d2de:	4823      	ldr	r0, [pc, #140]	@ (800d36c <lwip_netconn_do_delconn+0x1c4>)
 800d2e0:	f00b fd6e 	bl	8018dc0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	785b      	ldrb	r3, [r3, #1]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d02d      	beq.n	800d34a <lwip_netconn_do_delconn+0x1a2>
 800d2ee:	4b19      	ldr	r3, [pc, #100]	@ (800d354 <lwip_netconn_do_delconn+0x1ac>)
 800d2f0:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d2f4:	491c      	ldr	r1, [pc, #112]	@ (800d368 <lwip_netconn_do_delconn+0x1c0>)
 800d2f6:	4819      	ldr	r0, [pc, #100]	@ (800d35c <lwip_netconn_do_delconn+0x1b4>)
 800d2f8:	f00c faf4 	bl	80198e4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d2fc:	e025      	b.n	800d34a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d2fe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2200      	movs	r2, #0
 800d306:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d007      	beq.n	800d322 <lwip_netconn_do_delconn+0x17a>
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d318:	68fa      	ldr	r2, [r7, #12]
 800d31a:	6810      	ldr	r0, [r2, #0]
 800d31c:	2200      	movs	r2, #0
 800d31e:	2100      	movs	r1, #0
 800d320:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d007      	beq.n	800d33c <lwip_netconn_do_delconn+0x194>
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	6810      	ldr	r0, [r2, #0]
 800d336:	2200      	movs	r2, #0
 800d338:	2102      	movs	r1, #2
 800d33a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	330c      	adds	r3, #12
 800d342:	4618      	mov	r0, r3
 800d344:	f00b fcfc 	bl	8018d40 <sys_sem_valid>
 800d348:	e000      	b.n	800d34c <lwip_netconn_do_delconn+0x1a4>
          return;
 800d34a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	0801c51c 	.word	0x0801c51c
 800d358:	0801c88c 	.word	0x0801c88c
 800d35c:	0801c560 	.word	0x0801c560
 800d360:	0801c8a0 	.word	0x0801c8a0
 800d364:	0801c8c0 	.word	0x0801c8c0
 800d368:	0801c8dc 	.word	0x0801c8dc
 800d36c:	2000c400 	.word	0x2000c400

0800d370 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d025      	beq.n	800d3d2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d390:	2b10      	cmp	r3, #16
 800d392:	d00e      	beq.n	800d3b2 <lwip_netconn_do_bind+0x42>
 800d394:	2b20      	cmp	r3, #32
 800d396:	d119      	bne.n	800d3cc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	6858      	ldr	r0, [r3, #4]
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	6899      	ldr	r1, [r3, #8]
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	899b      	ldrh	r3, [r3, #12]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f008 ffaa 	bl	8016300 <udp_bind>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	73fb      	strb	r3, [r7, #15]
        break;
 800d3b0:	e011      	b.n	800d3d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6858      	ldr	r0, [r3, #4]
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	6899      	ldr	r1, [r3, #8]
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	899b      	ldrh	r3, [r3, #12]
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	f002 ff41 	bl	8010248 <tcp_bind>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	73fb      	strb	r3, [r7, #15]
        break;
 800d3ca:	e004      	b.n	800d3d6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d3cc:	23fa      	movs	r3, #250	@ 0xfa
 800d3ce:	73fb      	strb	r3, [r7, #15]
        break;
 800d3d0:	e001      	b.n	800d3d6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d3d2:	23fa      	movs	r3, #250	@ 0xfa
 800d3d4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	7bfa      	ldrb	r2, [r7, #15]
 800d3da:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d3dc:	bf00      	nop
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d07f      	beq.n	800d4fa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d404:	2b10      	cmp	r3, #16
 800d406:	d175      	bne.n	800d4f4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	785b      	ldrb	r3, [r3, #1]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d165      	bne.n	800d4de <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d002      	beq.n	800d424 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d41e:	23fa      	movs	r3, #250	@ 0xfa
 800d420:	72fb      	strb	r3, [r7, #11]
 800d422:	e06c      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d424:	23ff      	movs	r3, #255	@ 0xff
 800d426:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f107 020b 	add.w	r2, r7, #11
 800d432:	7cf9      	ldrb	r1, [r7, #19]
 800d434:	4618      	mov	r0, r3
 800d436:	f002 ffbf 	bl	80103b8 <tcp_listen_with_backlog_and_err>
 800d43a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d05d      	beq.n	800d4fe <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3310      	adds	r3, #16
 800d448:	4618      	mov	r0, r3
 800d44a:	f00b fbeb 	bl	8018c24 <sys_mbox_valid>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00b      	beq.n	800d46c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3310      	adds	r3, #16
 800d45a:	4618      	mov	r0, r3
 800d45c:	f00b fb6e 	bl	8018b3c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	3310      	adds	r3, #16
 800d466:	4618      	mov	r0, r3
 800d468:	f00b fbed 	bl	8018c46 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3314      	adds	r3, #20
 800d476:	4618      	mov	r0, r3
 800d478:	f00b fbd4 	bl	8018c24 <sys_mbox_valid>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d108      	bne.n	800d494 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3314      	adds	r3, #20
 800d488:	2106      	movs	r1, #6
 800d48a:	4618      	mov	r0, r3
 800d48c:	f00b fb3c 	bl	8018b08 <sys_mbox_new>
 800d490:	4603      	mov	r3, r0
 800d492:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d494:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d118      	bne.n	800d4ce <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2202      	movs	r2, #2
 800d4a2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	685a      	ldr	r2, [r3, #4]
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	f003 ff49 	bl	8011350 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	4912      	ldr	r1, [pc, #72]	@ (800d510 <lwip_netconn_do_listen+0x12c>)
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f003 ffba 	bl	8011440 <tcp_accept>
 800d4cc:	e017      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f002 fd68 	bl	800ffa4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	605a      	str	r2, [r3, #4]
 800d4dc:	e00f      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	2b02      	cmp	r3, #2
 800d4e6:	d102      	bne.n	800d4ee <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	72fb      	strb	r3, [r7, #11]
 800d4ec:	e007      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800d4ee:	23f5      	movs	r3, #245	@ 0xf5
 800d4f0:	72fb      	strb	r3, [r7, #11]
 800d4f2:	e004      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800d4f4:	23f0      	movs	r3, #240	@ 0xf0
 800d4f6:	72fb      	strb	r3, [r7, #11]
 800d4f8:	e001      	b.n	800d4fe <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800d4fa:	23f5      	movs	r3, #245	@ 0xf5
 800d4fc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800d4fe:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d506:	bf00      	nop
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	0800c9f1 	.word	0x0800c9f1

0800d514 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b086      	sub	sp, #24
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2200      	movs	r2, #0
 800d524:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d022      	beq.n	800d576 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d53a:	2b10      	cmp	r3, #16
 800d53c:	d11b      	bne.n	800d576 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d54a:	d202      	bcs.n	800d552 <lwip_netconn_do_recv+0x3e>
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	b29b      	uxth	r3, r3
 800d550:	e001      	b.n	800d556 <lwip_netconn_do_recv+0x42>
 800d552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d556:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	89fa      	ldrh	r2, [r7, #14]
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f003 f82c 	bl	80105c0 <tcp_recved>
        remaining -= recved;
 800d568:	89fb      	ldrh	r3, [r7, #14]
 800d56a:	697a      	ldr	r2, [r7, #20]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e6      	bne.n	800d544 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d576:	bf00      	nop
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	460b      	mov	r3, r1
 800d58a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d106      	bne.n	800d5a4 <lwip_netconn_do_writemore+0x24>
 800d596:	4b96      	ldr	r3, [pc, #600]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d598:	f240 6273 	movw	r2, #1651	@ 0x673
 800d59c:	4995      	ldr	r1, [pc, #596]	@ (800d7f4 <lwip_netconn_do_writemore+0x274>)
 800d59e:	4896      	ldr	r0, [pc, #600]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d5a0:	f00c f9a0 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	785b      	ldrb	r3, [r3, #1]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d006      	beq.n	800d5ba <lwip_netconn_do_writemore+0x3a>
 800d5ac:	4b90      	ldr	r3, [pc, #576]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d5ae:	f240 6274 	movw	r2, #1652	@ 0x674
 800d5b2:	4992      	ldr	r1, [pc, #584]	@ (800d7fc <lwip_netconn_do_writemore+0x27c>)
 800d5b4:	4890      	ldr	r0, [pc, #576]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d5b6:	f00c f995 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6a1b      	ldr	r3, [r3, #32]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <lwip_netconn_do_writemore+0x50>
 800d5c2:	4b8b      	ldr	r3, [pc, #556]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d5c4:	f240 6275 	movw	r2, #1653	@ 0x675
 800d5c8:	498d      	ldr	r1, [pc, #564]	@ (800d800 <lwip_netconn_do_writemore+0x280>)
 800d5ca:	488b      	ldr	r0, [pc, #556]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d5cc:	f00c f98a 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	685b      	ldr	r3, [r3, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d106      	bne.n	800d5e6 <lwip_netconn_do_writemore+0x66>
 800d5d8:	4b85      	ldr	r3, [pc, #532]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d5da:	f240 6276 	movw	r2, #1654	@ 0x676
 800d5de:	4989      	ldr	r1, [pc, #548]	@ (800d804 <lwip_netconn_do_writemore+0x284>)
 800d5e0:	4885      	ldr	r0, [pc, #532]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d5e2:	f00c f97f 	bl	80198e4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	699a      	ldr	r2, [r3, #24]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d306      	bcc.n	800d604 <lwip_netconn_do_writemore+0x84>
 800d5f6:	4b7e      	ldr	r3, [pc, #504]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d5f8:	f240 6277 	movw	r2, #1655	@ 0x677
 800d5fc:	4982      	ldr	r1, [pc, #520]	@ (800d808 <lwip_netconn_do_writemore+0x288>)
 800d5fe:	487e      	ldr	r0, [pc, #504]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d600:	f00c f970 	bl	80198e4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	899b      	ldrh	r3, [r3, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d106      	bne.n	800d61c <lwip_netconn_do_writemore+0x9c>
 800d60e:	4b78      	ldr	r3, [pc, #480]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d610:	f240 6279 	movw	r2, #1657	@ 0x679
 800d614:	497d      	ldr	r1, [pc, #500]	@ (800d80c <lwip_netconn_do_writemore+0x28c>)
 800d616:	4878      	ldr	r0, [pc, #480]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d618:	f00c f964 	bl	80198e4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a1b      	ldr	r3, [r3, #32]
 800d620:	7f1b      	ldrb	r3, [r3, #28]
 800d622:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7f1b      	ldrb	r3, [r3, #28]
 800d628:	f003 0302 	and.w	r3, r3, #2
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d104      	bne.n	800d63a <lwip_netconn_do_writemore+0xba>
 800d630:	7ebb      	ldrb	r3, [r7, #26]
 800d632:	f003 0304 	and.w	r3, r3, #4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <lwip_netconn_do_writemore+0xbe>
 800d63a:	2301      	movs	r3, #1
 800d63c:	e000      	b.n	800d640 <lwip_netconn_do_writemore+0xc0>
 800d63e:	2300      	movs	r3, #0
 800d640:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a1b      	ldr	r3, [r3, #32]
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	4413      	add	r3, r2
 800d652:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6a1b      	ldr	r3, [r3, #32]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	691b      	ldr	r3, [r3, #16]
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d66c:	d307      	bcc.n	800d67e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d66e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d672:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d674:	7ebb      	ldrb	r3, [r7, #26]
 800d676:	f043 0302 	orr.w	r3, r3, #2
 800d67a:	76bb      	strb	r3, [r7, #26]
 800d67c:	e001      	b.n	800d682 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d68a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d68c:	89fa      	ldrh	r2, [r7, #14]
 800d68e:	8bbb      	ldrh	r3, [r7, #28]
 800d690:	429a      	cmp	r2, r3
 800d692:	d216      	bcs.n	800d6c2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d694:	89fb      	ldrh	r3, [r7, #14]
 800d696:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d698:	7e3b      	ldrb	r3, [r7, #24]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00d      	beq.n	800d6ba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d69e:	8bbb      	ldrh	r3, [r7, #28]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10e      	bne.n	800d6c2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d102      	bne.n	800d6b4 <lwip_netconn_do_writemore+0x134>
 800d6ae:	f06f 0306 	mvn.w	r3, #6
 800d6b2:	e000      	b.n	800d6b6 <lwip_netconn_do_writemore+0x136>
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d6b8:	e07d      	b.n	800d7b6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d6ba:	7ebb      	ldrb	r3, [r7, #26]
 800d6bc:	f043 0302 	orr.w	r3, r3, #2
 800d6c0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	691a      	ldr	r2, [r3, #16]
 800d6c8:	8bbb      	ldrh	r3, [r7, #28]
 800d6ca:	441a      	add	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d906      	bls.n	800d6e6 <lwip_netconn_do_writemore+0x166>
 800d6d8:	4b45      	ldr	r3, [pc, #276]	@ (800d7f0 <lwip_netconn_do_writemore+0x270>)
 800d6da:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d6de:	494c      	ldr	r1, [pc, #304]	@ (800d810 <lwip_netconn_do_writemore+0x290>)
 800d6e0:	4845      	ldr	r0, [pc, #276]	@ (800d7f8 <lwip_netconn_do_writemore+0x278>)
 800d6e2:	f00c f8ff 	bl	80198e4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d6e6:	8bbb      	ldrh	r3, [r7, #28]
 800d6e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d103      	bne.n	800d6f8 <lwip_netconn_do_writemore+0x178>
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6f6:	d209      	bcs.n	800d70c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d6fc:	8bba      	ldrh	r2, [r7, #28]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d10b      	bne.n	800d71a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	899b      	ldrh	r3, [r3, #12]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d906      	bls.n	800d71a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d70c:	2301      	movs	r3, #1
 800d70e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d710:	7ebb      	ldrb	r3, [r7, #26]
 800d712:	f043 0302 	orr.w	r3, r3, #2
 800d716:	76bb      	strb	r3, [r7, #26]
 800d718:	e001      	b.n	800d71e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6858      	ldr	r0, [r3, #4]
 800d722:	7ebb      	ldrb	r3, [r7, #26]
 800d724:	8bba      	ldrh	r2, [r7, #28]
 800d726:	6979      	ldr	r1, [r7, #20]
 800d728:	f006 fd4e 	bl	80141c8 <tcp_write>
 800d72c:	4603      	mov	r3, r0
 800d72e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d730:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d12c      	bne.n	800d792 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a1b      	ldr	r3, [r3, #32]
 800d73c:	6999      	ldr	r1, [r3, #24]
 800d73e:	8bba      	ldrh	r2, [r7, #28]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6a1b      	ldr	r3, [r3, #32]
 800d744:	440a      	add	r2, r1
 800d746:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a1b      	ldr	r3, [r3, #32]
 800d74c:	6919      	ldr	r1, [r3, #16]
 800d74e:	8bba      	ldrh	r2, [r7, #28]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	440a      	add	r2, r1
 800d756:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	691a      	ldr	r2, [r3, #16]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	429a      	cmp	r2, r3
 800d768:	d113      	bne.n	800d792 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	899a      	ldrh	r2, [r3, #12]
 800d770:	3a01      	subs	r2, #1
 800d772:	b292      	uxth	r2, r2
 800d774:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	899b      	ldrh	r3, [r3, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d008      	beq.n	800d792 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a1b      	ldr	r3, [r3, #32]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	3208      	adds	r2, #8
 800d788:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a1b      	ldr	r3, [r3, #32]
 800d78e:	2200      	movs	r2, #0
 800d790:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d792:	7e7b      	ldrb	r3, [r7, #25]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d004      	beq.n	800d7a2 <lwip_netconn_do_writemore+0x222>
 800d798:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f43f af50 	beq.w	800d642 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d7a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d004      	beq.n	800d7b4 <lwip_netconn_do_writemore+0x234>
 800d7aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d146      	bne.n	800d842 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d7b4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d7b6:	7e3b      	ldrb	r3, [r7, #24]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d02b      	beq.n	800d814 <lwip_netconn_do_writemore+0x294>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6a1b      	ldr	r3, [r3, #32]
 800d7c0:	699a      	ldr	r2, [r3, #24]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a1b      	ldr	r3, [r3, #32]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d223      	bcs.n	800d814 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d005      	beq.n	800d7e0 <lwip_netconn_do_writemore+0x260>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2103      	movs	r1, #3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7f1b      	ldrb	r3, [r3, #28]
 800d7e4:	f043 0310 	orr.w	r3, r3, #16
 800d7e8:	b2da      	uxtb	r2, r3
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	771a      	strb	r2, [r3, #28]
 800d7ee:	e028      	b.n	800d842 <lwip_netconn_do_writemore+0x2c2>
 800d7f0:	0801c51c 	.word	0x0801c51c
 800d7f4:	0801c674 	.word	0x0801c674
 800d7f8:	0801c560 	.word	0x0801c560
 800d7fc:	0801c97c 	.word	0x0801c97c
 800d800:	0801c684 	.word	0x0801c684
 800d804:	0801c99c 	.word	0x0801c99c
 800d808:	0801c9b4 	.word	0x0801c9b4
 800d80c:	0801c9f4 	.word	0x0801c9f4
 800d810:	0801ca1c 	.word	0x0801ca1c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d81c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d820:	d305      	bcc.n	800d82e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d82a:	2b04      	cmp	r3, #4
 800d82c:	d909      	bls.n	800d842 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <lwip_netconn_do_writemore+0x2c2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83a:	2200      	movs	r2, #0
 800d83c:	2103      	movs	r1, #3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d842:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d11d      	bne.n	800d886 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	699a      	ldr	r2, [r3, #24]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6a1b      	ldr	r3, [r3, #32]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	429a      	cmp	r2, r3
 800d858:	d002      	beq.n	800d860 <lwip_netconn_do_writemore+0x2e0>
 800d85a:	7e3b      	ldrb	r3, [r7, #24]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d860:	2301      	movs	r3, #1
 800d862:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	4618      	mov	r0, r3
 800d86a:	f007 fa97 	bl	8014d9c <tcp_output>
 800d86e:	4603      	mov	r3, r0
 800d870:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d872:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d876:	f113 0f04 	cmn.w	r3, #4
 800d87a:	d12c      	bne.n	800d8d6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d87c:	7b3b      	ldrb	r3, [r7, #12]
 800d87e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d880:	2301      	movs	r3, #1
 800d882:	76fb      	strb	r3, [r7, #27]
 800d884:	e027      	b.n	800d8d6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d886:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88e:	d120      	bne.n	800d8d2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	4618      	mov	r0, r3
 800d896:	f007 fa81 	bl	8014d9c <tcp_output>
 800d89a:	4603      	mov	r3, r0
 800d89c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d89e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d8a2:	f113 0f04 	cmn.w	r3, #4
 800d8a6:	d104      	bne.n	800d8b2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d8a8:	7b7b      	ldrb	r3, [r7, #13]
 800d8aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	76fb      	strb	r3, [r7, #27]
 800d8b0:	e011      	b.n	800d8d6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d8b2:	7e3b      	ldrb	r3, [r7, #24]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00e      	beq.n	800d8d6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d102      	bne.n	800d8c8 <lwip_netconn_do_writemore+0x348>
 800d8c2:	f06f 0306 	mvn.w	r3, #6
 800d8c6:	e000      	b.n	800d8ca <lwip_netconn_do_writemore+0x34a>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	76fb      	strb	r3, [r7, #27]
 800d8d0:	e001      	b.n	800d8d6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d8d6:	7efb      	ldrb	r3, [r7, #27]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d015      	beq.n	800d908 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6a1b      	ldr	r3, [r3, #32]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	330c      	adds	r3, #12
 800d8e4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a1b      	ldr	r3, [r3, #32]
 800d8ea:	7ffa      	ldrb	r2, [r7, #31]
 800d8ec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d8fa:	78fb      	ldrb	r3, [r7, #3]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d006      	beq.n	800d90e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d900:	68b8      	ldr	r0, [r7, #8]
 800d902:	f00b fa03 	bl	8018d0c <sys_sem_signal>
 800d906:	e002      	b.n	800d90e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d908:	f04f 33ff 	mov.w	r3, #4294967295
 800d90c:	e000      	b.n	800d910 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fe fd1c 	bl	800c366 <netconn_err>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d166      	bne.n	800da08 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d944:	2b10      	cmp	r3, #16
 800d946:	d15d      	bne.n	800da04 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	785b      	ldrb	r3, [r3, #1]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d952:	23fb      	movs	r3, #251	@ 0xfb
 800d954:	73fb      	strb	r3, [r7, #15]
 800d956:	e057      	b.n	800da08 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d04d      	beq.n	800d9fe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2201      	movs	r2, #1
 800d968:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d006      	beq.n	800d982 <lwip_netconn_do_write+0x6a>
 800d974:	4b28      	ldr	r3, [pc, #160]	@ (800da18 <lwip_netconn_do_write+0x100>)
 800d976:	f240 7223 	movw	r2, #1827	@ 0x723
 800d97a:	4928      	ldr	r1, [pc, #160]	@ (800da1c <lwip_netconn_do_write+0x104>)
 800d97c:	4828      	ldr	r0, [pc, #160]	@ (800da20 <lwip_netconn_do_write+0x108>)
 800d97e:	f00b ffb1 	bl	80198e4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	695b      	ldr	r3, [r3, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <lwip_netconn_do_write+0x80>
 800d98a:	4b23      	ldr	r3, [pc, #140]	@ (800da18 <lwip_netconn_do_write+0x100>)
 800d98c:	f240 7224 	movw	r2, #1828	@ 0x724
 800d990:	4924      	ldr	r1, [pc, #144]	@ (800da24 <lwip_netconn_do_write+0x10c>)
 800d992:	4823      	ldr	r0, [pc, #140]	@ (800da20 <lwip_netconn_do_write+0x108>)
 800d994:	f00b ffa6 	bl	80198e4 <iprintf>
        msg->conn->current_msg = msg;
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff fdea 	bl	800d580 <lwip_netconn_do_writemore>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d02e      	beq.n	800da10 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d006      	beq.n	800d9ca <lwip_netconn_do_write+0xb2>
 800d9bc:	4b16      	ldr	r3, [pc, #88]	@ (800da18 <lwip_netconn_do_write+0x100>)
 800d9be:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d9c2:	4919      	ldr	r1, [pc, #100]	@ (800da28 <lwip_netconn_do_write+0x110>)
 800d9c4:	4816      	ldr	r0, [pc, #88]	@ (800da20 <lwip_netconn_do_write+0x108>)
 800d9c6:	f00b ff8d 	bl	80198e4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800d9ca:	4818      	ldr	r0, [pc, #96]	@ (800da2c <lwip_netconn_do_write+0x114>)
 800d9cc:	f00b fa07 	bl	8018dde <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	330c      	adds	r3, #12
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f00b f966 	bl	8018caa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d9de:	4813      	ldr	r0, [pc, #76]	@ (800da2c <lwip_netconn_do_write+0x114>)
 800d9e0:	f00b f9ee 	bl	8018dc0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	785b      	ldrb	r3, [r3, #1]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	d110      	bne.n	800da10 <lwip_netconn_do_write+0xf8>
 800d9ee:	4b0a      	ldr	r3, [pc, #40]	@ (800da18 <lwip_netconn_do_write+0x100>)
 800d9f0:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d9f4:	490c      	ldr	r1, [pc, #48]	@ (800da28 <lwip_netconn_do_write+0x110>)
 800d9f6:	480a      	ldr	r0, [pc, #40]	@ (800da20 <lwip_netconn_do_write+0x108>)
 800d9f8:	f00b ff74 	bl	80198e4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d9fc:	e008      	b.n	800da10 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800d9fe:	23f5      	movs	r3, #245	@ 0xf5
 800da00:	73fb      	strb	r3, [r7, #15]
 800da02:	e001      	b.n	800da08 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800da04:	23fa      	movs	r3, #250	@ 0xfa
 800da06:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	7bfa      	ldrb	r2, [r7, #15]
 800da0c:	711a      	strb	r2, [r3, #4]
 800da0e:	e000      	b.n	800da12 <lwip_netconn_do_write+0xfa>
        return;
 800da10:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	0801c51c 	.word	0x0801c51c
 800da1c:	0801c8c0 	.word	0x0801c8c0
 800da20:	0801c560 	.word	0x0801c560
 800da24:	0801ca48 	.word	0x0801ca48
 800da28:	0801c8dc 	.word	0x0801c8dc
 800da2c:	2000c400 	.word	0x2000c400

0800da30 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d069      	beq.n	800db22 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800da58:	2b10      	cmp	r3, #16
 800da5a:	d162      	bne.n	800db22 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800da60:	2b03      	cmp	r3, #3
 800da62:	d002      	beq.n	800da6a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800da64:	7afb      	ldrb	r3, [r7, #11]
 800da66:	2b02      	cmp	r3, #2
 800da68:	d05b      	beq.n	800db22 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800da6a:	7afb      	ldrb	r3, [r7, #11]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d103      	bne.n	800da78 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	22f5      	movs	r2, #245	@ 0xf5
 800da74:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800da76:	e059      	b.n	800db2c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800da78:	7afb      	ldrb	r3, [r7, #11]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d103      	bne.n	800da86 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	22fb      	movs	r2, #251	@ 0xfb
 800da82:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800da84:	e052      	b.n	800db2c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	7a1b      	ldrb	r3, [r3, #8]
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d004      	beq.n	800da9c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4618      	mov	r0, r3
 800da98:	f7ff f99e 	bl	800cdd8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6a1b      	ldr	r3, [r3, #32]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d006      	beq.n	800dab4 <lwip_netconn_do_close+0x84>
 800daa6:	4b23      	ldr	r3, [pc, #140]	@ (800db34 <lwip_netconn_do_close+0x104>)
 800daa8:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800daac:	4922      	ldr	r1, [pc, #136]	@ (800db38 <lwip_netconn_do_close+0x108>)
 800daae:	4823      	ldr	r0, [pc, #140]	@ (800db3c <lwip_netconn_do_close+0x10c>)
 800dab0:	f00b ff18 	bl	80198e4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2204      	movs	r2, #4
 800daba:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2100      	movs	r1, #0
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff fa02 	bl	800ced4 <lwip_netconn_do_close_internal>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d029      	beq.n	800db2a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	785b      	ldrb	r3, [r3, #1]
 800dadc:	2b04      	cmp	r3, #4
 800dade:	d006      	beq.n	800daee <lwip_netconn_do_close+0xbe>
 800dae0:	4b14      	ldr	r3, [pc, #80]	@ (800db34 <lwip_netconn_do_close+0x104>)
 800dae2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800dae6:	4916      	ldr	r1, [pc, #88]	@ (800db40 <lwip_netconn_do_close+0x110>)
 800dae8:	4814      	ldr	r0, [pc, #80]	@ (800db3c <lwip_netconn_do_close+0x10c>)
 800daea:	f00b fefb 	bl	80198e4 <iprintf>
        UNLOCK_TCPIP_CORE();
 800daee:	4815      	ldr	r0, [pc, #84]	@ (800db44 <lwip_netconn_do_close+0x114>)
 800daf0:	f00b f975 	bl	8018dde <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	330c      	adds	r3, #12
 800dafa:	2100      	movs	r1, #0
 800dafc:	4618      	mov	r0, r3
 800dafe:	f00b f8d4 	bl	8018caa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800db02:	4810      	ldr	r0, [pc, #64]	@ (800db44 <lwip_netconn_do_close+0x114>)
 800db04:	f00b f95c 	bl	8018dc0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	785b      	ldrb	r3, [r3, #1]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00b      	beq.n	800db2a <lwip_netconn_do_close+0xfa>
 800db12:	4b08      	ldr	r3, [pc, #32]	@ (800db34 <lwip_netconn_do_close+0x104>)
 800db14:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800db18:	4909      	ldr	r1, [pc, #36]	@ (800db40 <lwip_netconn_do_close+0x110>)
 800db1a:	4808      	ldr	r0, [pc, #32]	@ (800db3c <lwip_netconn_do_close+0x10c>)
 800db1c:	f00b fee2 	bl	80198e4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800db20:	e003      	b.n	800db2a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	22f5      	movs	r2, #245	@ 0xf5
 800db26:	711a      	strb	r2, [r3, #4]
 800db28:	e000      	b.n	800db2c <lwip_netconn_do_close+0xfc>
      return;
 800db2a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	0801c51c 	.word	0x0801c51c
 800db38:	0801c8c0 	.word	0x0801c8c0
 800db3c:	0801c560 	.word	0x0801c560
 800db40:	0801c8dc 	.word	0x0801c8dc
 800db44:	2000c400 	.word	0x2000c400

0800db48 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d013      	beq.n	800db7e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00b      	beq.n	800db76 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4618      	mov	r0, r3
 800db64:	f001 fd74 	bl	800f650 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2200      	movs	r2, #0
 800db6c:	605a      	str	r2, [r3, #4]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800db76:	6879      	ldr	r1, [r7, #4]
 800db78:	2006      	movs	r0, #6
 800db7a:	f000 fec5 	bl	800e908 <memp_free>
  }
}
 800db7e:	bf00      	nop
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
	...

0800db88 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800db92:	f008 f9bb 	bl	8015f0c <sys_timeouts_sleeptime>
 800db96:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d10b      	bne.n	800dbb8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800dba0:	4813      	ldr	r0, [pc, #76]	@ (800dbf0 <tcpip_timeouts_mbox_fetch+0x68>)
 800dba2:	f00b f91c 	bl	8018dde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dba6:	2200      	movs	r2, #0
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f00a fff2 	bl	8018b94 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800dbb0:	480f      	ldr	r0, [pc, #60]	@ (800dbf0 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbb2:	f00b f905 	bl	8018dc0 <sys_mutex_lock>
    return;
 800dbb6:	e018      	b.n	800dbea <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800dbbe:	f008 f96b 	bl	8015e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dbc2:	e7e6      	b.n	800db92 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800dbc4:	480a      	ldr	r0, [pc, #40]	@ (800dbf0 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbc6:	f00b f90a 	bl	8018dde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	6839      	ldr	r1, [r7, #0]
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f00a ffe0 	bl	8018b94 <sys_arch_mbox_fetch>
 800dbd4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800dbd6:	4806      	ldr	r0, [pc, #24]	@ (800dbf0 <tcpip_timeouts_mbox_fetch+0x68>)
 800dbd8:	f00b f8f2 	bl	8018dc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe2:	d102      	bne.n	800dbea <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800dbe4:	f008 f958 	bl	8015e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800dbe8:	e7d3      	b.n	800db92 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	2000c400 	.word	0x2000c400

0800dbf4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dbfc:	4810      	ldr	r0, [pc, #64]	@ (800dc40 <tcpip_thread+0x4c>)
 800dbfe:	f00b f8df 	bl	8018dc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dc02:	4b10      	ldr	r3, [pc, #64]	@ (800dc44 <tcpip_thread+0x50>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d005      	beq.n	800dc16 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dc0a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc44 <tcpip_thread+0x50>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a0e      	ldr	r2, [pc, #56]	@ (800dc48 <tcpip_thread+0x54>)
 800dc10:	6812      	ldr	r2, [r2, #0]
 800dc12:	4610      	mov	r0, r2
 800dc14:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc16:	f107 030c 	add.w	r3, r7, #12
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	480b      	ldr	r0, [pc, #44]	@ (800dc4c <tcpip_thread+0x58>)
 800dc1e:	f7ff ffb3 	bl	800db88 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d106      	bne.n	800dc36 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dc28:	4b09      	ldr	r3, [pc, #36]	@ (800dc50 <tcpip_thread+0x5c>)
 800dc2a:	2291      	movs	r2, #145	@ 0x91
 800dc2c:	4909      	ldr	r1, [pc, #36]	@ (800dc54 <tcpip_thread+0x60>)
 800dc2e:	480a      	ldr	r0, [pc, #40]	@ (800dc58 <tcpip_thread+0x64>)
 800dc30:	f00b fe58 	bl	80198e4 <iprintf>
      continue;
 800dc34:	e003      	b.n	800dc3e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f000 f80f 	bl	800dc5c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dc3e:	e7ea      	b.n	800dc16 <tcpip_thread+0x22>
 800dc40:	2000c400 	.word	0x2000c400
 800dc44:	2000c3f4 	.word	0x2000c3f4
 800dc48:	2000c3f8 	.word	0x2000c3f8
 800dc4c:	2000c3fc 	.word	0x2000c3fc
 800dc50:	0801ca74 	.word	0x0801ca74
 800dc54:	0801caa4 	.word	0x0801caa4
 800dc58:	0801cac4 	.word	0x0801cac4

0800dc5c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	2b02      	cmp	r3, #2
 800dc6a:	d026      	beq.n	800dcba <tcpip_thread_handle_msg+0x5e>
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	dc2b      	bgt.n	800dcc8 <tcpip_thread_handle_msg+0x6c>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <tcpip_thread_handle_msg+0x1e>
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d015      	beq.n	800dca4 <tcpip_thread_handle_msg+0x48>
 800dc78:	e026      	b.n	800dcc8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	6850      	ldr	r0, [r2, #4]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	6892      	ldr	r2, [r2, #8]
 800dc86:	4611      	mov	r1, r2
 800dc88:	4798      	blx	r3
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d004      	beq.n	800dc9a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 fcdb 	bl	800f650 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	2009      	movs	r0, #9
 800dc9e:	f000 fe33 	bl	800e908 <memp_free>
      break;
 800dca2:	e018      	b.n	800dcd6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	6892      	ldr	r2, [r2, #8]
 800dcac:	4610      	mov	r0, r2
 800dcae:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	2008      	movs	r0, #8
 800dcb4:	f000 fe28 	bl	800e908 <memp_free>
      break;
 800dcb8:	e00d      	b.n	800dcd6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	6892      	ldr	r2, [r2, #8]
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	4798      	blx	r3
      break;
 800dcc6:	e006      	b.n	800dcd6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dcc8:	4b05      	ldr	r3, [pc, #20]	@ (800dce0 <tcpip_thread_handle_msg+0x84>)
 800dcca:	22cf      	movs	r2, #207	@ 0xcf
 800dccc:	4905      	ldr	r1, [pc, #20]	@ (800dce4 <tcpip_thread_handle_msg+0x88>)
 800dcce:	4806      	ldr	r0, [pc, #24]	@ (800dce8 <tcpip_thread_handle_msg+0x8c>)
 800dcd0:	f00b fe08 	bl	80198e4 <iprintf>
      break;
 800dcd4:	bf00      	nop
  }
}
 800dcd6:	bf00      	nop
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	0801ca74 	.word	0x0801ca74
 800dce4:	0801caa4 	.word	0x0801caa4
 800dce8:	0801cac4 	.word	0x0801cac4

0800dcec <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dcf8:	481a      	ldr	r0, [pc, #104]	@ (800dd64 <tcpip_inpkt+0x78>)
 800dcfa:	f00a ff93 	bl	8018c24 <sys_mbox_valid>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d105      	bne.n	800dd10 <tcpip_inpkt+0x24>
 800dd04:	4b18      	ldr	r3, [pc, #96]	@ (800dd68 <tcpip_inpkt+0x7c>)
 800dd06:	22fc      	movs	r2, #252	@ 0xfc
 800dd08:	4918      	ldr	r1, [pc, #96]	@ (800dd6c <tcpip_inpkt+0x80>)
 800dd0a:	4819      	ldr	r0, [pc, #100]	@ (800dd70 <tcpip_inpkt+0x84>)
 800dd0c:	f00b fdea 	bl	80198e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dd10:	2009      	movs	r0, #9
 800dd12:	f000 fda7 	bl	800e864 <memp_malloc>
 800dd16:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d102      	bne.n	800dd24 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd22:	e01a      	b.n	800dd5a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	2200      	movs	r2, #0
 800dd28:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	68ba      	ldr	r2, [r7, #8]
 800dd34:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dd3c:	6979      	ldr	r1, [r7, #20]
 800dd3e:	4809      	ldr	r0, [pc, #36]	@ (800dd64 <tcpip_inpkt+0x78>)
 800dd40:	f00a ff0e 	bl	8018b60 <sys_mbox_trypost>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d006      	beq.n	800dd58 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dd4a:	6979      	ldr	r1, [r7, #20]
 800dd4c:	2009      	movs	r0, #9
 800dd4e:	f000 fddb 	bl	800e908 <memp_free>
    return ERR_MEM;
 800dd52:	f04f 33ff 	mov.w	r3, #4294967295
 800dd56:	e000      	b.n	800dd5a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dd58:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
 800dd62:	bf00      	nop
 800dd64:	2000c3fc 	.word	0x2000c3fc
 800dd68:	0801ca74 	.word	0x0801ca74
 800dd6c:	0801caec 	.word	0x0801caec
 800dd70:	0801cac4 	.word	0x0801cac4

0800dd74 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd84:	f003 0318 	and.w	r3, r3, #24
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dd8c:	4a08      	ldr	r2, [pc, #32]	@ (800ddb0 <tcpip_input+0x3c>)
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ffab 	bl	800dcec <tcpip_inpkt>
 800dd96:	4603      	mov	r3, r0
 800dd98:	e005      	b.n	800dda6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800dd9a:	4a06      	ldr	r2, [pc, #24]	@ (800ddb4 <tcpip_input+0x40>)
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7ff ffa4 	bl	800dcec <tcpip_inpkt>
 800dda4:	4603      	mov	r3, r0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	0801895d 	.word	0x0801895d
 800ddb4:	08017865 	.word	0x08017865

0800ddb8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ddc2:	4819      	ldr	r0, [pc, #100]	@ (800de28 <tcpip_try_callback+0x70>)
 800ddc4:	f00a ff2e 	bl	8018c24 <sys_mbox_valid>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <tcpip_try_callback+0x24>
 800ddce:	4b17      	ldr	r3, [pc, #92]	@ (800de2c <tcpip_try_callback+0x74>)
 800ddd0:	f240 125d 	movw	r2, #349	@ 0x15d
 800ddd4:	4916      	ldr	r1, [pc, #88]	@ (800de30 <tcpip_try_callback+0x78>)
 800ddd6:	4817      	ldr	r0, [pc, #92]	@ (800de34 <tcpip_try_callback+0x7c>)
 800ddd8:	f00b fd84 	bl	80198e4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dddc:	2008      	movs	r0, #8
 800ddde:	f000 fd41 	bl	800e864 <memp_malloc>
 800dde2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ddea:	f04f 33ff 	mov.w	r3, #4294967295
 800ddee:	e017      	b.n	800de20 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800de02:	68f9      	ldr	r1, [r7, #12]
 800de04:	4808      	ldr	r0, [pc, #32]	@ (800de28 <tcpip_try_callback+0x70>)
 800de06:	f00a feab 	bl	8018b60 <sys_mbox_trypost>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d006      	beq.n	800de1e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800de10:	68f9      	ldr	r1, [r7, #12]
 800de12:	2008      	movs	r0, #8
 800de14:	f000 fd78 	bl	800e908 <memp_free>
    return ERR_MEM;
 800de18:	f04f 33ff 	mov.w	r3, #4294967295
 800de1c:	e000      	b.n	800de20 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	2000c3fc 	.word	0x2000c3fc
 800de2c:	0801ca74 	.word	0x0801ca74
 800de30:	0801caec 	.word	0x0801caec
 800de34:	0801cac4 	.word	0x0801cac4

0800de38 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800de44:	4806      	ldr	r0, [pc, #24]	@ (800de60 <tcpip_send_msg_wait_sem+0x28>)
 800de46:	f00a ffbb 	bl	8018dc0 <sys_mutex_lock>
  fn(apimsg);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	68b8      	ldr	r0, [r7, #8]
 800de4e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800de50:	4803      	ldr	r0, [pc, #12]	@ (800de60 <tcpip_send_msg_wait_sem+0x28>)
 800de52:	f00a ffc4 	bl	8018dde <sys_mutex_unlock>
  return ERR_OK;
 800de56:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	2000c400 	.word	0x2000c400

0800de64 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af02      	add	r7, sp, #8
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800de6e:	f000 f871 	bl	800df54 <lwip_init>

  tcpip_init_done = initfunc;
 800de72:	4a17      	ldr	r2, [pc, #92]	@ (800ded0 <tcpip_init+0x6c>)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800de78:	4a16      	ldr	r2, [pc, #88]	@ (800ded4 <tcpip_init+0x70>)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800de7e:	2106      	movs	r1, #6
 800de80:	4815      	ldr	r0, [pc, #84]	@ (800ded8 <tcpip_init+0x74>)
 800de82:	f00a fe41 	bl	8018b08 <sys_mbox_new>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d006      	beq.n	800de9a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800de8c:	4b13      	ldr	r3, [pc, #76]	@ (800dedc <tcpip_init+0x78>)
 800de8e:	f240 2261 	movw	r2, #609	@ 0x261
 800de92:	4913      	ldr	r1, [pc, #76]	@ (800dee0 <tcpip_init+0x7c>)
 800de94:	4813      	ldr	r0, [pc, #76]	@ (800dee4 <tcpip_init+0x80>)
 800de96:	f00b fd25 	bl	80198e4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800de9a:	4813      	ldr	r0, [pc, #76]	@ (800dee8 <tcpip_init+0x84>)
 800de9c:	f00a ff7a 	bl	8018d94 <sys_mutex_new>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d006      	beq.n	800deb4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dea6:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <tcpip_init+0x78>)
 800dea8:	f240 2265 	movw	r2, #613	@ 0x265
 800deac:	490f      	ldr	r1, [pc, #60]	@ (800deec <tcpip_init+0x88>)
 800deae:	480d      	ldr	r0, [pc, #52]	@ (800dee4 <tcpip_init+0x80>)
 800deb0:	f00b fd18 	bl	80198e4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800deb4:	2318      	movs	r3, #24
 800deb6:	9300      	str	r3, [sp, #0]
 800deb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800debc:	2200      	movs	r2, #0
 800debe:	490c      	ldr	r1, [pc, #48]	@ (800def0 <tcpip_init+0x8c>)
 800dec0:	480c      	ldr	r0, [pc, #48]	@ (800def4 <tcpip_init+0x90>)
 800dec2:	f00a ff99 	bl	8018df8 <sys_thread_new>
}
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	2000c3f4 	.word	0x2000c3f4
 800ded4:	2000c3f8 	.word	0x2000c3f8
 800ded8:	2000c3fc 	.word	0x2000c3fc
 800dedc:	0801ca74 	.word	0x0801ca74
 800dee0:	0801cafc 	.word	0x0801cafc
 800dee4:	0801cac4 	.word	0x0801cac4
 800dee8:	2000c400 	.word	0x2000c400
 800deec:	0801cb20 	.word	0x0801cb20
 800def0:	0800dbf5 	.word	0x0800dbf5
 800def4:	0801cb44 	.word	0x0801cb44

0800def8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800df02:	88fb      	ldrh	r3, [r7, #6]
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	b21a      	sxth	r2, r3
 800df08:	88fb      	ldrh	r3, [r7, #6]
 800df0a:	0a1b      	lsrs	r3, r3, #8
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	b21b      	sxth	r3, r3
 800df10:	4313      	orrs	r3, r2
 800df12:	b21b      	sxth	r3, r3
 800df14:	b29b      	uxth	r3, r3
}
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800df22:	b480      	push	{r7}
 800df24:	b083      	sub	sp, #12
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	061a      	lsls	r2, r3, #24
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	021b      	lsls	r3, r3, #8
 800df32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df36:	431a      	orrs	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	0a1b      	lsrs	r3, r3, #8
 800df3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df40:	431a      	orrs	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	0e1b      	lsrs	r3, r3, #24
 800df46:	4313      	orrs	r3, r2
}
 800df48:	4618      	mov	r0, r3
 800df4a:	370c      	adds	r7, #12
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800df5e:	f00a ff0d 	bl	8018d7c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800df62:	f000 f8d5 	bl	800e110 <mem_init>
  memp_init();
 800df66:	f000 fc31 	bl	800e7cc <memp_init>
  pbuf_init();
  netif_init();
 800df6a:	f000 fcf7 	bl	800e95c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800df6e:	f008 f805 	bl	8015f7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800df72:	f001 fe07 	bl	800fb84 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800df76:	f007 ff47 	bl	8015e08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800df7a:	bf00      	nop
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800df8e:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <ptr_to_mem+0x20>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	88fb      	ldrh	r3, [r7, #6]
 800df94:	4413      	add	r3, r2
}
 800df96:	4618      	mov	r0, r3
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	2000ec30 	.word	0x2000ec30

0800dfa8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dfb0:	4b05      	ldr	r3, [pc, #20]	@ (800dfc8 <mem_to_ptr+0x20>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	b29b      	uxth	r3, r3
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	370c      	adds	r7, #12
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	2000ec30 	.word	0x2000ec30

0800dfcc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b085      	sub	sp, #20
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dfd4:	4b45      	ldr	r3, [pc, #276]	@ (800e0ec <plug_holes+0x120>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d206      	bcs.n	800dfec <plug_holes+0x20>
 800dfde:	4b44      	ldr	r3, [pc, #272]	@ (800e0f0 <plug_holes+0x124>)
 800dfe0:	f240 12df 	movw	r2, #479	@ 0x1df
 800dfe4:	4943      	ldr	r1, [pc, #268]	@ (800e0f4 <plug_holes+0x128>)
 800dfe6:	4844      	ldr	r0, [pc, #272]	@ (800e0f8 <plug_holes+0x12c>)
 800dfe8:	f00b fc7c 	bl	80198e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dfec:	4b43      	ldr	r3, [pc, #268]	@ (800e0fc <plug_holes+0x130>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d306      	bcc.n	800e004 <plug_holes+0x38>
 800dff6:	4b3e      	ldr	r3, [pc, #248]	@ (800e0f0 <plug_holes+0x124>)
 800dff8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dffc:	4940      	ldr	r1, [pc, #256]	@ (800e100 <plug_holes+0x134>)
 800dffe:	483e      	ldr	r0, [pc, #248]	@ (800e0f8 <plug_holes+0x12c>)
 800e000:	f00b fc70 	bl	80198e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	791b      	ldrb	r3, [r3, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d006      	beq.n	800e01a <plug_holes+0x4e>
 800e00c:	4b38      	ldr	r3, [pc, #224]	@ (800e0f0 <plug_holes+0x124>)
 800e00e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e012:	493c      	ldr	r1, [pc, #240]	@ (800e104 <plug_holes+0x138>)
 800e014:	4838      	ldr	r0, [pc, #224]	@ (800e0f8 <plug_holes+0x12c>)
 800e016:	f00b fc65 	bl	80198e4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e022:	d906      	bls.n	800e032 <plug_holes+0x66>
 800e024:	4b32      	ldr	r3, [pc, #200]	@ (800e0f0 <plug_holes+0x124>)
 800e026:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800e02a:	4937      	ldr	r1, [pc, #220]	@ (800e108 <plug_holes+0x13c>)
 800e02c:	4832      	ldr	r0, [pc, #200]	@ (800e0f8 <plug_holes+0x12c>)
 800e02e:	f00b fc59 	bl	80198e4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	881b      	ldrh	r3, [r3, #0]
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff ffa4 	bl	800df84 <ptr_to_mem>
 800e03c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	429a      	cmp	r2, r3
 800e044:	d024      	beq.n	800e090 <plug_holes+0xc4>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	791b      	ldrb	r3, [r3, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d120      	bne.n	800e090 <plug_holes+0xc4>
 800e04e:	4b2b      	ldr	r3, [pc, #172]	@ (800e0fc <plug_holes+0x130>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	429a      	cmp	r2, r3
 800e056:	d01b      	beq.n	800e090 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e058:	4b2c      	ldr	r3, [pc, #176]	@ (800e10c <plug_holes+0x140>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d102      	bne.n	800e068 <plug_holes+0x9c>
      lfree = mem;
 800e062:	4a2a      	ldr	r2, [pc, #168]	@ (800e10c <plug_holes+0x140>)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	881a      	ldrh	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e078:	d00a      	beq.n	800e090 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff ff80 	bl	800df84 <ptr_to_mem>
 800e084:	4604      	mov	r4, r0
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff ff8e 	bl	800dfa8 <mem_to_ptr>
 800e08c:	4603      	mov	r3, r0
 800e08e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	885b      	ldrh	r3, [r3, #2]
 800e094:	4618      	mov	r0, r3
 800e096:	f7ff ff75 	bl	800df84 <ptr_to_mem>
 800e09a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d01f      	beq.n	800e0e4 <plug_holes+0x118>
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	791b      	ldrb	r3, [r3, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d11b      	bne.n	800e0e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e0ac:	4b17      	ldr	r3, [pc, #92]	@ (800e10c <plug_holes+0x140>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d102      	bne.n	800e0bc <plug_holes+0xf0>
      lfree = pmem;
 800e0b6:	4a15      	ldr	r2, [pc, #84]	@ (800e10c <plug_holes+0x140>)
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	881a      	ldrh	r2, [r3, #0]
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	881b      	ldrh	r3, [r3, #0]
 800e0c8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e0cc:	d00a      	beq.n	800e0e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	881b      	ldrh	r3, [r3, #0]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7ff ff56 	bl	800df84 <ptr_to_mem>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	68b8      	ldr	r0, [r7, #8]
 800e0dc:	f7ff ff64 	bl	800dfa8 <mem_to_ptr>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e0e4:	bf00      	nop
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd90      	pop	{r4, r7, pc}
 800e0ec:	2000ec30 	.word	0x2000ec30
 800e0f0:	0801cb54 	.word	0x0801cb54
 800e0f4:	0801cb84 	.word	0x0801cb84
 800e0f8:	0801cb9c 	.word	0x0801cb9c
 800e0fc:	2000ec34 	.word	0x2000ec34
 800e100:	0801cbc4 	.word	0x0801cbc4
 800e104:	0801cbe0 	.word	0x0801cbe0
 800e108:	0801cbfc 	.word	0x0801cbfc
 800e10c:	2000ec3c 	.word	0x2000ec3c

0800e110 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e116:	4b1f      	ldr	r3, [pc, #124]	@ (800e194 <mem_init+0x84>)
 800e118:	3303      	adds	r3, #3
 800e11a:	f023 0303 	bic.w	r3, r3, #3
 800e11e:	461a      	mov	r2, r3
 800e120:	4b1d      	ldr	r3, [pc, #116]	@ (800e198 <mem_init+0x88>)
 800e122:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e124:	4b1c      	ldr	r3, [pc, #112]	@ (800e198 <mem_init+0x88>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e130:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2200      	movs	r2, #0
 800e13c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e13e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800e142:	f7ff ff1f 	bl	800df84 <ptr_to_mem>
 800e146:	4603      	mov	r3, r0
 800e148:	4a14      	ldr	r2, [pc, #80]	@ (800e19c <mem_init+0x8c>)
 800e14a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e14c:	4b13      	ldr	r3, [pc, #76]	@ (800e19c <mem_init+0x8c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2201      	movs	r2, #1
 800e152:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e154:	4b11      	ldr	r3, [pc, #68]	@ (800e19c <mem_init+0x8c>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e15c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e15e:	4b0f      	ldr	r3, [pc, #60]	@ (800e19c <mem_init+0x8c>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800e166:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e168:	4b0b      	ldr	r3, [pc, #44]	@ (800e198 <mem_init+0x88>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a0c      	ldr	r2, [pc, #48]	@ (800e1a0 <mem_init+0x90>)
 800e16e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e170:	480c      	ldr	r0, [pc, #48]	@ (800e1a4 <mem_init+0x94>)
 800e172:	f00a fe0f 	bl	8018d94 <sys_mutex_new>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d006      	beq.n	800e18a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e17c:	4b0a      	ldr	r3, [pc, #40]	@ (800e1a8 <mem_init+0x98>)
 800e17e:	f240 221f 	movw	r2, #543	@ 0x21f
 800e182:	490a      	ldr	r1, [pc, #40]	@ (800e1ac <mem_init+0x9c>)
 800e184:	480a      	ldr	r0, [pc, #40]	@ (800e1b0 <mem_init+0xa0>)
 800e186:	f00b fbad 	bl	80198e4 <iprintf>
  }
}
 800e18a:	bf00      	nop
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	2000c41c 	.word	0x2000c41c
 800e198:	2000ec30 	.word	0x2000ec30
 800e19c:	2000ec34 	.word	0x2000ec34
 800e1a0:	2000ec3c 	.word	0x2000ec3c
 800e1a4:	2000ec38 	.word	0x2000ec38
 800e1a8:	0801cb54 	.word	0x0801cb54
 800e1ac:	0801cc28 	.word	0x0801cc28
 800e1b0:	0801cb9c 	.word	0x0801cb9c

0800e1b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff fef3 	bl	800dfa8 <mem_to_ptr>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	881b      	ldrh	r3, [r3, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7ff feda 	bl	800df84 <ptr_to_mem>
 800e1d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	885b      	ldrh	r3, [r3, #2]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7ff fed4 	bl	800df84 <ptr_to_mem>
 800e1dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e1e6:	d818      	bhi.n	800e21a <mem_link_valid+0x66>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	885b      	ldrh	r3, [r3, #2]
 800e1ec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e1f0:	d813      	bhi.n	800e21a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e1f6:	8afa      	ldrh	r2, [r7, #22]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d004      	beq.n	800e206 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	8afa      	ldrh	r2, [r7, #22]
 800e202:	429a      	cmp	r2, r3
 800e204:	d109      	bne.n	800e21a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e206:	4b08      	ldr	r3, [pc, #32]	@ (800e228 <mem_link_valid+0x74>)
 800e208:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e20a:	693a      	ldr	r2, [r7, #16]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d006      	beq.n	800e21e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	885b      	ldrh	r3, [r3, #2]
 800e214:	8afa      	ldrh	r2, [r7, #22]
 800e216:	429a      	cmp	r2, r3
 800e218:	d001      	beq.n	800e21e <mem_link_valid+0x6a>
    return 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	e000      	b.n	800e220 <mem_link_valid+0x6c>
  }
  return 1;
 800e21e:	2301      	movs	r3, #1
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	2000ec34 	.word	0x2000ec34

0800e22c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d070      	beq.n	800e31c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f003 0303 	and.w	r3, r3, #3
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00d      	beq.n	800e260 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e244:	4b37      	ldr	r3, [pc, #220]	@ (800e324 <mem_free+0xf8>)
 800e246:	f240 2273 	movw	r2, #627	@ 0x273
 800e24a:	4937      	ldr	r1, [pc, #220]	@ (800e328 <mem_free+0xfc>)
 800e24c:	4837      	ldr	r0, [pc, #220]	@ (800e32c <mem_free+0x100>)
 800e24e:	f00b fb49 	bl	80198e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e252:	f00a fdf1 	bl	8018e38 <sys_arch_protect>
 800e256:	60f8      	str	r0, [r7, #12]
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f00a fdfb 	bl	8018e54 <sys_arch_unprotect>
    return;
 800e25e:	e05e      	b.n	800e31e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3b08      	subs	r3, #8
 800e264:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e266:	4b32      	ldr	r3, [pc, #200]	@ (800e330 <mem_free+0x104>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	69fa      	ldr	r2, [r7, #28]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d306      	bcc.n	800e27e <mem_free+0x52>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f103 020c 	add.w	r2, r3, #12
 800e276:	4b2f      	ldr	r3, [pc, #188]	@ (800e334 <mem_free+0x108>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d90d      	bls.n	800e29a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e27e:	4b29      	ldr	r3, [pc, #164]	@ (800e324 <mem_free+0xf8>)
 800e280:	f240 227f 	movw	r2, #639	@ 0x27f
 800e284:	492c      	ldr	r1, [pc, #176]	@ (800e338 <mem_free+0x10c>)
 800e286:	4829      	ldr	r0, [pc, #164]	@ (800e32c <mem_free+0x100>)
 800e288:	f00b fb2c 	bl	80198e4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e28c:	f00a fdd4 	bl	8018e38 <sys_arch_protect>
 800e290:	6138      	str	r0, [r7, #16]
 800e292:	6938      	ldr	r0, [r7, #16]
 800e294:	f00a fdde 	bl	8018e54 <sys_arch_unprotect>
    return;
 800e298:	e041      	b.n	800e31e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e29a:	4828      	ldr	r0, [pc, #160]	@ (800e33c <mem_free+0x110>)
 800e29c:	f00a fd90 	bl	8018dc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	791b      	ldrb	r3, [r3, #4]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d110      	bne.n	800e2ca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e2a8:	4b1e      	ldr	r3, [pc, #120]	@ (800e324 <mem_free+0xf8>)
 800e2aa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e2ae:	4924      	ldr	r1, [pc, #144]	@ (800e340 <mem_free+0x114>)
 800e2b0:	481e      	ldr	r0, [pc, #120]	@ (800e32c <mem_free+0x100>)
 800e2b2:	f00b fb17 	bl	80198e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2b6:	4821      	ldr	r0, [pc, #132]	@ (800e33c <mem_free+0x110>)
 800e2b8:	f00a fd91 	bl	8018dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2bc:	f00a fdbc 	bl	8018e38 <sys_arch_protect>
 800e2c0:	6178      	str	r0, [r7, #20]
 800e2c2:	6978      	ldr	r0, [r7, #20]
 800e2c4:	f00a fdc6 	bl	8018e54 <sys_arch_unprotect>
    return;
 800e2c8:	e029      	b.n	800e31e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e2ca:	69f8      	ldr	r0, [r7, #28]
 800e2cc:	f7ff ff72 	bl	800e1b4 <mem_link_valid>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d110      	bne.n	800e2f8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e2d6:	4b13      	ldr	r3, [pc, #76]	@ (800e324 <mem_free+0xf8>)
 800e2d8:	f240 2295 	movw	r2, #661	@ 0x295
 800e2dc:	4919      	ldr	r1, [pc, #100]	@ (800e344 <mem_free+0x118>)
 800e2de:	4813      	ldr	r0, [pc, #76]	@ (800e32c <mem_free+0x100>)
 800e2e0:	f00b fb00 	bl	80198e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e2e4:	4815      	ldr	r0, [pc, #84]	@ (800e33c <mem_free+0x110>)
 800e2e6:	f00a fd7a 	bl	8018dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e2ea:	f00a fda5 	bl	8018e38 <sys_arch_protect>
 800e2ee:	61b8      	str	r0, [r7, #24]
 800e2f0:	69b8      	ldr	r0, [r7, #24]
 800e2f2:	f00a fdaf 	bl	8018e54 <sys_arch_unprotect>
    return;
 800e2f6:	e012      	b.n	800e31e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e2f8:	69fb      	ldr	r3, [r7, #28]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e2fe:	4b12      	ldr	r3, [pc, #72]	@ (800e348 <mem_free+0x11c>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69fa      	ldr	r2, [r7, #28]
 800e304:	429a      	cmp	r2, r3
 800e306:	d202      	bcs.n	800e30e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e308:	4a0f      	ldr	r2, [pc, #60]	@ (800e348 <mem_free+0x11c>)
 800e30a:	69fb      	ldr	r3, [r7, #28]
 800e30c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e30e:	69f8      	ldr	r0, [r7, #28]
 800e310:	f7ff fe5c 	bl	800dfcc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e314:	4809      	ldr	r0, [pc, #36]	@ (800e33c <mem_free+0x110>)
 800e316:	f00a fd62 	bl	8018dde <sys_mutex_unlock>
 800e31a:	e000      	b.n	800e31e <mem_free+0xf2>
    return;
 800e31c:	bf00      	nop
}
 800e31e:	3720      	adds	r7, #32
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}
 800e324:	0801cb54 	.word	0x0801cb54
 800e328:	0801cc44 	.word	0x0801cc44
 800e32c:	0801cb9c 	.word	0x0801cb9c
 800e330:	2000ec30 	.word	0x2000ec30
 800e334:	2000ec34 	.word	0x2000ec34
 800e338:	0801cc68 	.word	0x0801cc68
 800e33c:	2000ec38 	.word	0x2000ec38
 800e340:	0801cc84 	.word	0x0801cc84
 800e344:	0801ccac 	.word	0x0801ccac
 800e348:	2000ec3c 	.word	0x2000ec3c

0800e34c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e358:	887b      	ldrh	r3, [r7, #2]
 800e35a:	3303      	adds	r3, #3
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	f023 0303 	bic.w	r3, r3, #3
 800e362:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e364:	8bfb      	ldrh	r3, [r7, #30]
 800e366:	2b0b      	cmp	r3, #11
 800e368:	d801      	bhi.n	800e36e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e36a:	230c      	movs	r3, #12
 800e36c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e36e:	8bfb      	ldrh	r3, [r7, #30]
 800e370:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e374:	d803      	bhi.n	800e37e <mem_trim+0x32>
 800e376:	8bfa      	ldrh	r2, [r7, #30]
 800e378:	887b      	ldrh	r3, [r7, #2]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d201      	bcs.n	800e382 <mem_trim+0x36>
    return NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	e0d8      	b.n	800e534 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e382:	4b6e      	ldr	r3, [pc, #440]	@ (800e53c <mem_trim+0x1f0>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d304      	bcc.n	800e396 <mem_trim+0x4a>
 800e38c:	4b6c      	ldr	r3, [pc, #432]	@ (800e540 <mem_trim+0x1f4>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	429a      	cmp	r2, r3
 800e394:	d306      	bcc.n	800e3a4 <mem_trim+0x58>
 800e396:	4b6b      	ldr	r3, [pc, #428]	@ (800e544 <mem_trim+0x1f8>)
 800e398:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e39c:	496a      	ldr	r1, [pc, #424]	@ (800e548 <mem_trim+0x1fc>)
 800e39e:	486b      	ldr	r0, [pc, #428]	@ (800e54c <mem_trim+0x200>)
 800e3a0:	f00b faa0 	bl	80198e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e3a4:	4b65      	ldr	r3, [pc, #404]	@ (800e53c <mem_trim+0x1f0>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d304      	bcc.n	800e3b8 <mem_trim+0x6c>
 800e3ae:	4b64      	ldr	r3, [pc, #400]	@ (800e540 <mem_trim+0x1f4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d307      	bcc.n	800e3c8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e3b8:	f00a fd3e 	bl	8018e38 <sys_arch_protect>
 800e3bc:	60b8      	str	r0, [r7, #8]
 800e3be:	68b8      	ldr	r0, [r7, #8]
 800e3c0:	f00a fd48 	bl	8018e54 <sys_arch_unprotect>
    return rmem;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	e0b5      	b.n	800e534 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3b08      	subs	r3, #8
 800e3cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e3ce:	69b8      	ldr	r0, [r7, #24]
 800e3d0:	f7ff fdea 	bl	800dfa8 <mem_to_ptr>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	881a      	ldrh	r2, [r3, #0]
 800e3dc:	8afb      	ldrh	r3, [r7, #22]
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	3b08      	subs	r3, #8
 800e3e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e3e6:	8bfa      	ldrh	r2, [r7, #30]
 800e3e8:	8abb      	ldrh	r3, [r7, #20]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d906      	bls.n	800e3fc <mem_trim+0xb0>
 800e3ee:	4b55      	ldr	r3, [pc, #340]	@ (800e544 <mem_trim+0x1f8>)
 800e3f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e3f4:	4956      	ldr	r1, [pc, #344]	@ (800e550 <mem_trim+0x204>)
 800e3f6:	4855      	ldr	r0, [pc, #340]	@ (800e54c <mem_trim+0x200>)
 800e3f8:	f00b fa74 	bl	80198e4 <iprintf>
  if (newsize > size) {
 800e3fc:	8bfa      	ldrh	r2, [r7, #30]
 800e3fe:	8abb      	ldrh	r3, [r7, #20]
 800e400:	429a      	cmp	r2, r3
 800e402:	d901      	bls.n	800e408 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e404:	2300      	movs	r3, #0
 800e406:	e095      	b.n	800e534 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e408:	8bfa      	ldrh	r2, [r7, #30]
 800e40a:	8abb      	ldrh	r3, [r7, #20]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d101      	bne.n	800e414 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	e08f      	b.n	800e534 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e414:	484f      	ldr	r0, [pc, #316]	@ (800e554 <mem_trim+0x208>)
 800e416:	f00a fcd3 	bl	8018dc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff fdb0 	bl	800df84 <ptr_to_mem>
 800e424:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	791b      	ldrb	r3, [r3, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d13f      	bne.n	800e4ae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	881b      	ldrh	r3, [r3, #0]
 800e432:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e436:	d106      	bne.n	800e446 <mem_trim+0xfa>
 800e438:	4b42      	ldr	r3, [pc, #264]	@ (800e544 <mem_trim+0x1f8>)
 800e43a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e43e:	4946      	ldr	r1, [pc, #280]	@ (800e558 <mem_trim+0x20c>)
 800e440:	4842      	ldr	r0, [pc, #264]	@ (800e54c <mem_trim+0x200>)
 800e442:	f00b fa4f 	bl	80198e4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e44c:	8afa      	ldrh	r2, [r7, #22]
 800e44e:	8bfb      	ldrh	r3, [r7, #30]
 800e450:	4413      	add	r3, r2
 800e452:	b29b      	uxth	r3, r3
 800e454:	3308      	adds	r3, #8
 800e456:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e458:	4b40      	ldr	r3, [pc, #256]	@ (800e55c <mem_trim+0x210>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d106      	bne.n	800e470 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e462:	89fb      	ldrh	r3, [r7, #14]
 800e464:	4618      	mov	r0, r3
 800e466:	f7ff fd8d 	bl	800df84 <ptr_to_mem>
 800e46a:	4603      	mov	r3, r0
 800e46c:	4a3b      	ldr	r2, [pc, #236]	@ (800e55c <mem_trim+0x210>)
 800e46e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e470:	89fb      	ldrh	r3, [r7, #14]
 800e472:	4618      	mov	r0, r3
 800e474:	f7ff fd86 	bl	800df84 <ptr_to_mem>
 800e478:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	2200      	movs	r2, #0
 800e47e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	89ba      	ldrh	r2, [r7, #12]
 800e484:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	8afa      	ldrh	r2, [r7, #22]
 800e48a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	89fa      	ldrh	r2, [r7, #14]
 800e490:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e49a:	d047      	beq.n	800e52c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	881b      	ldrh	r3, [r3, #0]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7ff fd6f 	bl	800df84 <ptr_to_mem>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	8053      	strh	r3, [r2, #2]
 800e4ac:	e03e      	b.n	800e52c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e4ae:	8bfb      	ldrh	r3, [r7, #30]
 800e4b0:	f103 0214 	add.w	r2, r3, #20
 800e4b4:	8abb      	ldrh	r3, [r7, #20]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d838      	bhi.n	800e52c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e4ba:	8afa      	ldrh	r2, [r7, #22]
 800e4bc:	8bfb      	ldrh	r3, [r7, #30]
 800e4be:	4413      	add	r3, r2
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e4ce:	d106      	bne.n	800e4de <mem_trim+0x192>
 800e4d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e544 <mem_trim+0x1f8>)
 800e4d2:	f240 3216 	movw	r2, #790	@ 0x316
 800e4d6:	4920      	ldr	r1, [pc, #128]	@ (800e558 <mem_trim+0x20c>)
 800e4d8:	481c      	ldr	r0, [pc, #112]	@ (800e54c <mem_trim+0x200>)
 800e4da:	f00b fa03 	bl	80198e4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e4de:	89fb      	ldrh	r3, [r7, #14]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7ff fd4f 	bl	800df84 <ptr_to_mem>
 800e4e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e4e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e55c <mem_trim+0x210>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d202      	bcs.n	800e4f8 <mem_trim+0x1ac>
      lfree = mem2;
 800e4f2:	4a1a      	ldr	r2, [pc, #104]	@ (800e55c <mem_trim+0x210>)
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	881a      	ldrh	r2, [r3, #0]
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	8afa      	ldrh	r2, [r7, #22]
 800e50a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	89fa      	ldrh	r2, [r7, #14]
 800e510:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e51a:	d007      	beq.n	800e52c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fd2f 	bl	800df84 <ptr_to_mem>
 800e526:	4602      	mov	r2, r0
 800e528:	89fb      	ldrh	r3, [r7, #14]
 800e52a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e52c:	4809      	ldr	r0, [pc, #36]	@ (800e554 <mem_trim+0x208>)
 800e52e:	f00a fc56 	bl	8018dde <sys_mutex_unlock>
  return rmem;
 800e532:	687b      	ldr	r3, [r7, #4]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3720      	adds	r7, #32
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	2000ec30 	.word	0x2000ec30
 800e540:	2000ec34 	.word	0x2000ec34
 800e544:	0801cb54 	.word	0x0801cb54
 800e548:	0801cce0 	.word	0x0801cce0
 800e54c:	0801cb9c 	.word	0x0801cb9c
 800e550:	0801ccf8 	.word	0x0801ccf8
 800e554:	2000ec38 	.word	0x2000ec38
 800e558:	0801cd18 	.word	0x0801cd18
 800e55c:	2000ec3c 	.word	0x2000ec3c

0800e560 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e56a:	88fb      	ldrh	r3, [r7, #6]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <mem_malloc+0x14>
    return NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	e0e2      	b.n	800e73a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	3303      	adds	r3, #3
 800e578:	b29b      	uxth	r3, r3
 800e57a:	f023 0303 	bic.w	r3, r3, #3
 800e57e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e580:	8bbb      	ldrh	r3, [r7, #28]
 800e582:	2b0b      	cmp	r3, #11
 800e584:	d801      	bhi.n	800e58a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e586:	230c      	movs	r3, #12
 800e588:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e58a:	8bbb      	ldrh	r3, [r7, #28]
 800e58c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e590:	d803      	bhi.n	800e59a <mem_malloc+0x3a>
 800e592:	8bba      	ldrh	r2, [r7, #28]
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	429a      	cmp	r2, r3
 800e598:	d201      	bcs.n	800e59e <mem_malloc+0x3e>
    return NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	e0cd      	b.n	800e73a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e59e:	4869      	ldr	r0, [pc, #420]	@ (800e744 <mem_malloc+0x1e4>)
 800e5a0:	f00a fc0e 	bl	8018dc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e5a4:	4b68      	ldr	r3, [pc, #416]	@ (800e748 <mem_malloc+0x1e8>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fcfd 	bl	800dfa8 <mem_to_ptr>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	83fb      	strh	r3, [r7, #30]
 800e5b2:	e0b7      	b.n	800e724 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e5b4:	8bfb      	ldrh	r3, [r7, #30]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff fce4 	bl	800df84 <ptr_to_mem>
 800e5bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	791b      	ldrb	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f040 80a7 	bne.w	800e716 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	8bfb      	ldrh	r3, [r7, #30]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	f1a3 0208 	sub.w	r2, r3, #8
 800e5d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	f0c0 809c 	bcc.w	800e716 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	8bfb      	ldrh	r3, [r7, #30]
 800e5e6:	1ad3      	subs	r3, r2, r3
 800e5e8:	f1a3 0208 	sub.w	r2, r3, #8
 800e5ec:	8bbb      	ldrh	r3, [r7, #28]
 800e5ee:	3314      	adds	r3, #20
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d333      	bcc.n	800e65c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e5f4:	8bfa      	ldrh	r2, [r7, #30]
 800e5f6:	8bbb      	ldrh	r3, [r7, #28]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	3308      	adds	r3, #8
 800e5fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e600:	8a7b      	ldrh	r3, [r7, #18]
 800e602:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e606:	d106      	bne.n	800e616 <mem_malloc+0xb6>
 800e608:	4b50      	ldr	r3, [pc, #320]	@ (800e74c <mem_malloc+0x1ec>)
 800e60a:	f240 3287 	movw	r2, #903	@ 0x387
 800e60e:	4950      	ldr	r1, [pc, #320]	@ (800e750 <mem_malloc+0x1f0>)
 800e610:	4850      	ldr	r0, [pc, #320]	@ (800e754 <mem_malloc+0x1f4>)
 800e612:	f00b f967 	bl	80198e4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e616:	8a7b      	ldrh	r3, [r7, #18]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff fcb3 	bl	800df84 <ptr_to_mem>
 800e61e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2200      	movs	r2, #0
 800e624:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	881a      	ldrh	r2, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	8bfa      	ldrh	r2, [r7, #30]
 800e632:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	8a7a      	ldrh	r2, [r7, #18]
 800e638:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2201      	movs	r2, #1
 800e63e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800e648:	d00b      	beq.n	800e662 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7ff fc98 	bl	800df84 <ptr_to_mem>
 800e654:	4602      	mov	r2, r0
 800e656:	8a7b      	ldrh	r3, [r7, #18]
 800e658:	8053      	strh	r3, [r2, #2]
 800e65a:	e002      	b.n	800e662 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	2201      	movs	r2, #1
 800e660:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e662:	4b39      	ldr	r3, [pc, #228]	@ (800e748 <mem_malloc+0x1e8>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	697a      	ldr	r2, [r7, #20]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d127      	bne.n	800e6bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e66c:	4b36      	ldr	r3, [pc, #216]	@ (800e748 <mem_malloc+0x1e8>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e672:	e005      	b.n	800e680 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	881b      	ldrh	r3, [r3, #0]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff fc83 	bl	800df84 <ptr_to_mem>
 800e67e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	791b      	ldrb	r3, [r3, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <mem_malloc+0x132>
 800e688:	4b33      	ldr	r3, [pc, #204]	@ (800e758 <mem_malloc+0x1f8>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	69ba      	ldr	r2, [r7, #24]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d1f0      	bne.n	800e674 <mem_malloc+0x114>
          }
          lfree = cur;
 800e692:	4a2d      	ldr	r2, [pc, #180]	@ (800e748 <mem_malloc+0x1e8>)
 800e694:	69bb      	ldr	r3, [r7, #24]
 800e696:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e698:	4b2b      	ldr	r3, [pc, #172]	@ (800e748 <mem_malloc+0x1e8>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	4b2e      	ldr	r3, [pc, #184]	@ (800e758 <mem_malloc+0x1f8>)
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d00b      	beq.n	800e6bc <mem_malloc+0x15c>
 800e6a4:	4b28      	ldr	r3, [pc, #160]	@ (800e748 <mem_malloc+0x1e8>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	791b      	ldrb	r3, [r3, #4]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d006      	beq.n	800e6bc <mem_malloc+0x15c>
 800e6ae:	4b27      	ldr	r3, [pc, #156]	@ (800e74c <mem_malloc+0x1ec>)
 800e6b0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e6b4:	4929      	ldr	r1, [pc, #164]	@ (800e75c <mem_malloc+0x1fc>)
 800e6b6:	4827      	ldr	r0, [pc, #156]	@ (800e754 <mem_malloc+0x1f4>)
 800e6b8:	f00b f914 	bl	80198e4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e6bc:	4821      	ldr	r0, [pc, #132]	@ (800e744 <mem_malloc+0x1e4>)
 800e6be:	f00a fb8e 	bl	8018dde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e6c2:	8bba      	ldrh	r2, [r7, #28]
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	3308      	adds	r3, #8
 800e6ca:	4a23      	ldr	r2, [pc, #140]	@ (800e758 <mem_malloc+0x1f8>)
 800e6cc:	6812      	ldr	r2, [r2, #0]
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d906      	bls.n	800e6e0 <mem_malloc+0x180>
 800e6d2:	4b1e      	ldr	r3, [pc, #120]	@ (800e74c <mem_malloc+0x1ec>)
 800e6d4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e6d8:	4921      	ldr	r1, [pc, #132]	@ (800e760 <mem_malloc+0x200>)
 800e6da:	481e      	ldr	r0, [pc, #120]	@ (800e754 <mem_malloc+0x1f4>)
 800e6dc:	f00b f902 	bl	80198e4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	f003 0303 	and.w	r3, r3, #3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d006      	beq.n	800e6f8 <mem_malloc+0x198>
 800e6ea:	4b18      	ldr	r3, [pc, #96]	@ (800e74c <mem_malloc+0x1ec>)
 800e6ec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e6f0:	491c      	ldr	r1, [pc, #112]	@ (800e764 <mem_malloc+0x204>)
 800e6f2:	4818      	ldr	r0, [pc, #96]	@ (800e754 <mem_malloc+0x1f4>)
 800e6f4:	f00b f8f6 	bl	80198e4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	f003 0303 	and.w	r3, r3, #3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d006      	beq.n	800e710 <mem_malloc+0x1b0>
 800e702:	4b12      	ldr	r3, [pc, #72]	@ (800e74c <mem_malloc+0x1ec>)
 800e704:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e708:	4917      	ldr	r1, [pc, #92]	@ (800e768 <mem_malloc+0x208>)
 800e70a:	4812      	ldr	r0, [pc, #72]	@ (800e754 <mem_malloc+0x1f4>)
 800e70c:	f00b f8ea 	bl	80198e4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	3308      	adds	r3, #8
 800e714:	e011      	b.n	800e73a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e716:	8bfb      	ldrh	r3, [r7, #30]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7ff fc33 	bl	800df84 <ptr_to_mem>
 800e71e:	4603      	mov	r3, r0
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e724:	8bfa      	ldrh	r2, [r7, #30]
 800e726:	8bbb      	ldrh	r3, [r7, #28]
 800e728:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800e72c:	429a      	cmp	r2, r3
 800e72e:	f4ff af41 	bcc.w	800e5b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e732:	4804      	ldr	r0, [pc, #16]	@ (800e744 <mem_malloc+0x1e4>)
 800e734:	f00a fb53 	bl	8018dde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3720      	adds	r7, #32
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	2000ec38 	.word	0x2000ec38
 800e748:	2000ec3c 	.word	0x2000ec3c
 800e74c:	0801cb54 	.word	0x0801cb54
 800e750:	0801cd18 	.word	0x0801cd18
 800e754:	0801cb9c 	.word	0x0801cb9c
 800e758:	2000ec34 	.word	0x2000ec34
 800e75c:	0801cd2c 	.word	0x0801cd2c
 800e760:	0801cd48 	.word	0x0801cd48
 800e764:	0801cd78 	.word	0x0801cd78
 800e768:	0801cda8 	.word	0x0801cda8

0800e76c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689b      	ldr	r3, [r3, #8]
 800e778:	2200      	movs	r2, #0
 800e77a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	3303      	adds	r3, #3
 800e782:	f023 0303 	bic.w	r3, r3, #3
 800e786:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e788:	2300      	movs	r3, #0
 800e78a:	60fb      	str	r3, [r7, #12]
 800e78c:	e011      	b.n	800e7b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	881b      	ldrh	r3, [r3, #0]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	885b      	ldrh	r3, [r3, #2]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	dbe7      	blt.n	800e78e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e7be:	bf00      	nop
 800e7c0:	bf00      	nop
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	80fb      	strh	r3, [r7, #6]
 800e7d6:	e009      	b.n	800e7ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e7d8:	88fb      	ldrh	r3, [r7, #6]
 800e7da:	4a08      	ldr	r2, [pc, #32]	@ (800e7fc <memp_init+0x30>)
 800e7dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7ff ffc3 	bl	800e76c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	80fb      	strh	r3, [r7, #6]
 800e7ec:	88fb      	ldrh	r3, [r7, #6]
 800e7ee:	2b0c      	cmp	r3, #12
 800e7f0:	d9f2      	bls.n	800e7d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e7f2:	bf00      	nop
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	0801f5b4 	.word	0x0801f5b4

0800e800 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e808:	f00a fb16 	bl	8018e38 <sys_arch_protect>
 800e80c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d015      	beq.n	800e848 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	689b      	ldr	r3, [r3, #8]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	6812      	ldr	r2, [r2, #0]
 800e824:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d006      	beq.n	800e83e <do_memp_malloc_pool+0x3e>
 800e830:	4b09      	ldr	r3, [pc, #36]	@ (800e858 <do_memp_malloc_pool+0x58>)
 800e832:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e836:	4909      	ldr	r1, [pc, #36]	@ (800e85c <do_memp_malloc_pool+0x5c>)
 800e838:	4809      	ldr	r0, [pc, #36]	@ (800e860 <do_memp_malloc_pool+0x60>)
 800e83a:	f00b f853 	bl	80198e4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f00a fb08 	bl	8018e54 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	e003      	b.n	800e850 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f00a fb03 	bl	8018e54 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	0801cdcc 	.word	0x0801cdcc
 800e85c:	0801cdfc 	.word	0x0801cdfc
 800e860:	0801ce20 	.word	0x0801ce20

0800e864 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e86e:	79fb      	ldrb	r3, [r7, #7]
 800e870:	2b0c      	cmp	r3, #12
 800e872:	d908      	bls.n	800e886 <memp_malloc+0x22>
 800e874:	4b0a      	ldr	r3, [pc, #40]	@ (800e8a0 <memp_malloc+0x3c>)
 800e876:	f240 1257 	movw	r2, #343	@ 0x157
 800e87a:	490a      	ldr	r1, [pc, #40]	@ (800e8a4 <memp_malloc+0x40>)
 800e87c:	480a      	ldr	r0, [pc, #40]	@ (800e8a8 <memp_malloc+0x44>)
 800e87e:	f00b f831 	bl	80198e4 <iprintf>
 800e882:	2300      	movs	r3, #0
 800e884:	e008      	b.n	800e898 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	4a08      	ldr	r2, [pc, #32]	@ (800e8ac <memp_malloc+0x48>)
 800e88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff ffb6 	bl	800e800 <do_memp_malloc_pool>
 800e894:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e896:	68fb      	ldr	r3, [r7, #12]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	0801cdcc 	.word	0x0801cdcc
 800e8a4:	0801ce5c 	.word	0x0801ce5c
 800e8a8:	0801ce20 	.word	0x0801ce20
 800e8ac:	0801f5b4 	.word	0x0801f5b4

0800e8b0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	f003 0303 	and.w	r3, r3, #3
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d006      	beq.n	800e8d2 <do_memp_free_pool+0x22>
 800e8c4:	4b0d      	ldr	r3, [pc, #52]	@ (800e8fc <do_memp_free_pool+0x4c>)
 800e8c6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e8ca:	490d      	ldr	r1, [pc, #52]	@ (800e900 <do_memp_free_pool+0x50>)
 800e8cc:	480d      	ldr	r0, [pc, #52]	@ (800e904 <do_memp_free_pool+0x54>)
 800e8ce:	f00b f809 	bl	80198e4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e8d6:	f00a faaf 	bl	8018e38 <sys_arch_protect>
 800e8da:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e8ee:	68b8      	ldr	r0, [r7, #8]
 800e8f0:	f00a fab0 	bl	8018e54 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e8f4:	bf00      	nop
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	0801cdcc 	.word	0x0801cdcc
 800e900:	0801ce7c 	.word	0x0801ce7c
 800e904:	0801ce20 	.word	0x0801ce20

0800e908 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	4603      	mov	r3, r0
 800e910:	6039      	str	r1, [r7, #0]
 800e912:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e914:	79fb      	ldrb	r3, [r7, #7]
 800e916:	2b0c      	cmp	r3, #12
 800e918:	d907      	bls.n	800e92a <memp_free+0x22>
 800e91a:	4b0c      	ldr	r3, [pc, #48]	@ (800e94c <memp_free+0x44>)
 800e91c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e920:	490b      	ldr	r1, [pc, #44]	@ (800e950 <memp_free+0x48>)
 800e922:	480c      	ldr	r0, [pc, #48]	@ (800e954 <memp_free+0x4c>)
 800e924:	f00a ffde 	bl	80198e4 <iprintf>
 800e928:	e00c      	b.n	800e944 <memp_free+0x3c>

  if (mem == NULL) {
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d008      	beq.n	800e942 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e930:	79fb      	ldrb	r3, [r7, #7]
 800e932:	4a09      	ldr	r2, [pc, #36]	@ (800e958 <memp_free+0x50>)
 800e934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7ff ffb8 	bl	800e8b0 <do_memp_free_pool>
 800e940:	e000      	b.n	800e944 <memp_free+0x3c>
    return;
 800e942:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e944:	3708      	adds	r7, #8
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	0801cdcc 	.word	0x0801cdcc
 800e950:	0801ce9c 	.word	0x0801ce9c
 800e954:	0801ce20 	.word	0x0801ce20
 800e958:	0801f5b4 	.word	0x0801f5b4

0800e95c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e95c:	b480      	push	{r7}
 800e95e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e960:	bf00      	nop
 800e962:	46bd      	mov	sp, r7
 800e964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e968:	4770      	bx	lr
	...

0800e96c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
 800e978:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d108      	bne.n	800e992 <netif_add+0x26>
 800e980:	4b57      	ldr	r3, [pc, #348]	@ (800eae0 <netif_add+0x174>)
 800e982:	f240 1227 	movw	r2, #295	@ 0x127
 800e986:	4957      	ldr	r1, [pc, #348]	@ (800eae4 <netif_add+0x178>)
 800e988:	4857      	ldr	r0, [pc, #348]	@ (800eae8 <netif_add+0x17c>)
 800e98a:	f00a ffab 	bl	80198e4 <iprintf>
 800e98e:	2300      	movs	r3, #0
 800e990:	e0a2      	b.n	800ead8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e994:	2b00      	cmp	r3, #0
 800e996:	d108      	bne.n	800e9aa <netif_add+0x3e>
 800e998:	4b51      	ldr	r3, [pc, #324]	@ (800eae0 <netif_add+0x174>)
 800e99a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e99e:	4953      	ldr	r1, [pc, #332]	@ (800eaec <netif_add+0x180>)
 800e9a0:	4851      	ldr	r0, [pc, #324]	@ (800eae8 <netif_add+0x17c>)
 800e9a2:	f00a ff9f 	bl	80198e4 <iprintf>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e096      	b.n	800ead8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d101      	bne.n	800e9b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e9b0:	4b4f      	ldr	r3, [pc, #316]	@ (800eaf0 <netif_add+0x184>)
 800e9b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e9ba:	4b4d      	ldr	r3, [pc, #308]	@ (800eaf0 <netif_add+0x184>)
 800e9bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d101      	bne.n	800e9c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e9c4:	4b4a      	ldr	r3, [pc, #296]	@ (800eaf0 <netif_add+0x184>)
 800e9c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4a45      	ldr	r2, [pc, #276]	@ (800eaf4 <netif_add+0x188>)
 800e9de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a3a      	ldr	r2, [r7, #32]
 800e9f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e9fa:	4b3f      	ldr	r3, [pc, #252]	@ (800eaf8 <netif_add+0x18c>)
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea08:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	68b9      	ldr	r1, [r7, #8]
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f000 f913 	bl	800ec3c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ea16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	4798      	blx	r3
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <netif_add+0xba>
    return NULL;
 800ea22:	2300      	movs	r3, #0
 800ea24:	e058      	b.n	800ead8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea2c:	2bff      	cmp	r3, #255	@ 0xff
 800ea2e:	d103      	bne.n	800ea38 <netif_add+0xcc>
        netif->num = 0;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea3c:	4b2f      	ldr	r3, [pc, #188]	@ (800eafc <netif_add+0x190>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e02b      	b.n	800ea9c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d106      	bne.n	800ea5a <netif_add+0xee>
 800ea4c:	4b24      	ldr	r3, [pc, #144]	@ (800eae0 <netif_add+0x174>)
 800ea4e:	f240 128b 	movw	r2, #395	@ 0x18b
 800ea52:	492b      	ldr	r1, [pc, #172]	@ (800eb00 <netif_add+0x194>)
 800ea54:	4824      	ldr	r0, [pc, #144]	@ (800eae8 <netif_add+0x17c>)
 800ea56:	f00a ff45 	bl	80198e4 <iprintf>
        num_netifs++;
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	2bff      	cmp	r3, #255	@ 0xff
 800ea64:	dd06      	ble.n	800ea74 <netif_add+0x108>
 800ea66:	4b1e      	ldr	r3, [pc, #120]	@ (800eae0 <netif_add+0x174>)
 800ea68:	f240 128d 	movw	r2, #397	@ 0x18d
 800ea6c:	4925      	ldr	r1, [pc, #148]	@ (800eb04 <netif_add+0x198>)
 800ea6e:	481e      	ldr	r0, [pc, #120]	@ (800eae8 <netif_add+0x17c>)
 800ea70:	f00a ff38 	bl	80198e4 <iprintf>
        if (netif2->num == netif->num) {
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d108      	bne.n	800ea96 <netif_add+0x12a>
          netif->num++;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	b2da      	uxtb	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ea94:	e005      	b.n	800eaa2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	617b      	str	r3, [r7, #20]
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1d0      	bne.n	800ea44 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1be      	bne.n	800ea26 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eaae:	2bfe      	cmp	r3, #254	@ 0xfe
 800eab0:	d103      	bne.n	800eaba <netif_add+0x14e>
    netif_num = 0;
 800eab2:	4b11      	ldr	r3, [pc, #68]	@ (800eaf8 <netif_add+0x18c>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	701a      	strb	r2, [r3, #0]
 800eab8:	e006      	b.n	800eac8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eac0:	3301      	adds	r3, #1
 800eac2:	b2da      	uxtb	r2, r3
 800eac4:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf8 <netif_add+0x18c>)
 800eac6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800eac8:	4b0c      	ldr	r3, [pc, #48]	@ (800eafc <netif_add+0x190>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ead0:	4a0a      	ldr	r2, [pc, #40]	@ (800eafc <netif_add+0x190>)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ead6:	68fb      	ldr	r3, [r7, #12]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	0801ceb8 	.word	0x0801ceb8
 800eae4:	0801cf4c 	.word	0x0801cf4c
 800eae8:	0801cf08 	.word	0x0801cf08
 800eaec:	0801cf68 	.word	0x0801cf68
 800eaf0:	0801f628 	.word	0x0801f628
 800eaf4:	0800ef17 	.word	0x0800ef17
 800eaf8:	20011d14 	.word	0x20011d14
 800eafc:	20011d0c 	.word	0x20011d0c
 800eb00:	0801cf8c 	.word	0x0801cf8c
 800eb04:	0801cfa0 	.word	0x0801cfa0

0800eb08 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f002 fe51 	bl	80117bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f007 fcfd 	bl	801651c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800eb22:	bf00      	nop
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
	...

0800eb2c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b086      	sub	sp, #24
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d106      	bne.n	800eb4c <netif_do_set_ipaddr+0x20>
 800eb3e:	4b1d      	ldr	r3, [pc, #116]	@ (800ebb4 <netif_do_set_ipaddr+0x88>)
 800eb40:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800eb44:	491c      	ldr	r1, [pc, #112]	@ (800ebb8 <netif_do_set_ipaddr+0x8c>)
 800eb46:	481d      	ldr	r0, [pc, #116]	@ (800ebbc <netif_do_set_ipaddr+0x90>)
 800eb48:	f00a fecc 	bl	80198e4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d106      	bne.n	800eb60 <netif_do_set_ipaddr+0x34>
 800eb52:	4b18      	ldr	r3, [pc, #96]	@ (800ebb4 <netif_do_set_ipaddr+0x88>)
 800eb54:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800eb58:	4917      	ldr	r1, [pc, #92]	@ (800ebb8 <netif_do_set_ipaddr+0x8c>)
 800eb5a:	4818      	ldr	r0, [pc, #96]	@ (800ebbc <netif_do_set_ipaddr+0x90>)
 800eb5c:	f00a fec2 	bl	80198e4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3304      	adds	r3, #4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d01c      	beq.n	800eba8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3304      	adds	r3, #4
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800eb7e:	f107 0314 	add.w	r3, r7, #20
 800eb82:	4619      	mov	r1, r3
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7ff ffbf 	bl	800eb08 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <netif_do_set_ipaddr+0x6a>
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	e000      	b.n	800eb98 <netif_do_set_ipaddr+0x6c>
 800eb96:	2300      	movs	r3, #0
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	f000 f8d2 	bl	800ed48 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800eba4:	2301      	movs	r3, #1
 800eba6:	e000      	b.n	800ebaa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	0801ceb8 	.word	0x0801ceb8
 800ebb8:	0801cfd0 	.word	0x0801cfd0
 800ebbc:	0801cf08 	.word	0x0801cf08

0800ebc0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d00a      	beq.n	800ebf0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d002      	beq.n	800ebe6 <netif_do_set_netmask+0x26>
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	e000      	b.n	800ebe8 <netif_do_set_netmask+0x28>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	68fa      	ldr	r2, [r7, #12]
 800ebea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ebec:	2301      	movs	r3, #1
 800ebee:	e000      	b.n	800ebf2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b085      	sub	sp, #20
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	60f8      	str	r0, [r7, #12]
 800ec06:	60b9      	str	r1, [r7, #8]
 800ec08:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	330c      	adds	r3, #12
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d00a      	beq.n	800ec2e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d002      	beq.n	800ec24 <netif_do_set_gw+0x26>
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	e000      	b.n	800ec26 <netif_do_set_gw+0x28>
 800ec24:	2300      	movs	r3, #0
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e000      	b.n	800ec30 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3714      	adds	r7, #20
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b088      	sub	sp, #32
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d101      	bne.n	800ec5c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ec58:	4b1c      	ldr	r3, [pc, #112]	@ (800eccc <netif_set_addr+0x90>)
 800ec5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ec62:	4b1a      	ldr	r3, [pc, #104]	@ (800eccc <netif_set_addr+0x90>)
 800ec64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ec6c:	4b17      	ldr	r3, [pc, #92]	@ (800eccc <netif_set_addr+0x90>)
 800ec6e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d003      	beq.n	800ec7e <netif_set_addr+0x42>
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d101      	bne.n	800ec82 <netif_set_addr+0x46>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	e000      	b.n	800ec84 <netif_set_addr+0x48>
 800ec82:	2300      	movs	r3, #0
 800ec84:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d006      	beq.n	800ec9a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ec8c:	f107 0310 	add.w	r3, r7, #16
 800ec90:	461a      	mov	r2, r3
 800ec92:	68b9      	ldr	r1, [r7, #8]
 800ec94:	68f8      	ldr	r0, [r7, #12]
 800ec96:	f7ff ff49 	bl	800eb2c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ec9a:	69fa      	ldr	r2, [r7, #28]
 800ec9c:	6879      	ldr	r1, [r7, #4]
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff ff8e 	bl	800ebc0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800eca4:	69ba      	ldr	r2, [r7, #24]
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	68f8      	ldr	r0, [r7, #12]
 800ecaa:	f7ff ffa8 	bl	800ebfe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ecb4:	f107 0310 	add.w	r3, r7, #16
 800ecb8:	461a      	mov	r2, r3
 800ecba:	68b9      	ldr	r1, [r7, #8]
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7ff ff35 	bl	800eb2c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ecc2:	bf00      	nop
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	0801f628 	.word	0x0801f628

0800ecd0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ecd8:	4a04      	ldr	r2, [pc, #16]	@ (800ecec <netif_set_default+0x1c>)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	20011d10 	.word	0x20011d10

0800ecf0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d107      	bne.n	800ed0e <netif_set_up+0x1e>
 800ecfe:	4b0f      	ldr	r3, [pc, #60]	@ (800ed3c <netif_set_up+0x4c>)
 800ed00:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ed04:	490e      	ldr	r1, [pc, #56]	@ (800ed40 <netif_set_up+0x50>)
 800ed06:	480f      	ldr	r0, [pc, #60]	@ (800ed44 <netif_set_up+0x54>)
 800ed08:	f00a fdec 	bl	80198e4 <iprintf>
 800ed0c:	e013      	b.n	800ed36 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10c      	bne.n	800ed36 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed22:	f043 0301 	orr.w	r3, r3, #1
 800ed26:	b2da      	uxtb	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ed2e:	2103      	movs	r1, #3
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f809 	bl	800ed48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	0801ceb8 	.word	0x0801ceb8
 800ed40:	0801d040 	.word	0x0801d040
 800ed44:	0801cf08 	.word	0x0801cf08

0800ed48 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <netif_issue_reports+0x20>
 800ed5a:	4b18      	ldr	r3, [pc, #96]	@ (800edbc <netif_issue_reports+0x74>)
 800ed5c:	f240 326d 	movw	r2, #877	@ 0x36d
 800ed60:	4917      	ldr	r1, [pc, #92]	@ (800edc0 <netif_issue_reports+0x78>)
 800ed62:	4818      	ldr	r0, [pc, #96]	@ (800edc4 <netif_issue_reports+0x7c>)
 800ed64:	f00a fdbe 	bl	80198e4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed6e:	f003 0304 	and.w	r3, r3, #4
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d01e      	beq.n	800edb4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed7c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d017      	beq.n	800edb4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	f003 0301 	and.w	r3, r3, #1
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d013      	beq.n	800edb6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	3304      	adds	r3, #4
 800ed92:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00e      	beq.n	800edb6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed9e:	f003 0308 	and.w	r3, r3, #8
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d007      	beq.n	800edb6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3304      	adds	r3, #4
 800edaa:	4619      	mov	r1, r3
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f008 fb1f 	bl	80173f0 <etharp_request>
 800edb2:	e000      	b.n	800edb6 <netif_issue_reports+0x6e>
    return;
 800edb4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	0801ceb8 	.word	0x0801ceb8
 800edc0:	0801d05c 	.word	0x0801d05c
 800edc4:	0801cf08 	.word	0x0801cf08

0800edc8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b082      	sub	sp, #8
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d107      	bne.n	800ede6 <netif_set_down+0x1e>
 800edd6:	4b12      	ldr	r3, [pc, #72]	@ (800ee20 <netif_set_down+0x58>)
 800edd8:	f240 329b 	movw	r2, #923	@ 0x39b
 800eddc:	4911      	ldr	r1, [pc, #68]	@ (800ee24 <netif_set_down+0x5c>)
 800edde:	4812      	ldr	r0, [pc, #72]	@ (800ee28 <netif_set_down+0x60>)
 800ede0:	f00a fd80 	bl	80198e4 <iprintf>
 800ede4:	e019      	b.n	800ee1a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d012      	beq.n	800ee1a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800edfa:	f023 0301 	bic.w	r3, r3, #1
 800edfe:	b2da      	uxtb	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee0c:	f003 0308 	and.w	r3, r3, #8
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d002      	beq.n	800ee1a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f007 fea9 	bl	8016b6c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	0801ceb8 	.word	0x0801ceb8
 800ee24:	0801d080 	.word	0x0801d080
 800ee28:	0801cf08 	.word	0x0801cf08

0800ee2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d107      	bne.n	800ee4a <netif_set_link_up+0x1e>
 800ee3a:	4b13      	ldr	r3, [pc, #76]	@ (800ee88 <netif_set_link_up+0x5c>)
 800ee3c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ee40:	4912      	ldr	r1, [pc, #72]	@ (800ee8c <netif_set_link_up+0x60>)
 800ee42:	4813      	ldr	r0, [pc, #76]	@ (800ee90 <netif_set_link_up+0x64>)
 800ee44:	f00a fd4e 	bl	80198e4 <iprintf>
 800ee48:	e01b      	b.n	800ee82 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d114      	bne.n	800ee82 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee5e:	f043 0304 	orr.w	r3, r3, #4
 800ee62:	b2da      	uxtb	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ee6a:	2103      	movs	r1, #3
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7ff ff6b 	bl	800ed48 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	69db      	ldr	r3, [r3, #28]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <netif_set_link_up+0x56>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	69db      	ldr	r3, [r3, #28]
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ee82:	3708      	adds	r7, #8
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801ceb8 	.word	0x0801ceb8
 800ee8c:	0801d0a0 	.word	0x0801d0a0
 800ee90:	0801cf08 	.word	0x0801cf08

0800ee94 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d107      	bne.n	800eeb2 <netif_set_link_down+0x1e>
 800eea2:	4b11      	ldr	r3, [pc, #68]	@ (800eee8 <netif_set_link_down+0x54>)
 800eea4:	f240 4206 	movw	r2, #1030	@ 0x406
 800eea8:	4910      	ldr	r1, [pc, #64]	@ (800eeec <netif_set_link_down+0x58>)
 800eeaa:	4811      	ldr	r0, [pc, #68]	@ (800eef0 <netif_set_link_down+0x5c>)
 800eeac:	f00a fd1a 	bl	80198e4 <iprintf>
 800eeb0:	e017      	b.n	800eee2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eeb8:	f003 0304 	and.w	r3, r3, #4
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d010      	beq.n	800eee2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800eec6:	f023 0304 	bic.w	r3, r3, #4
 800eeca:	b2da      	uxtb	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	69db      	ldr	r3, [r3, #28]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <netif_set_link_down+0x4e>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	69db      	ldr	r3, [r3, #28]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	0801ceb8 	.word	0x0801ceb8
 800eeec:	0801d0c4 	.word	0x0801d0c4
 800eef0:	0801cf08 	.word	0x0801cf08

0800eef4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	61da      	str	r2, [r3, #28]
  }
}
 800ef0a:	bf00      	nop
 800ef0c:	370c      	adds	r7, #12
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr

0800ef16 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ef16:	b480      	push	{r7}
 800ef18:	b085      	sub	sp, #20
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	60f8      	str	r0, [r7, #12]
 800ef1e:	60b9      	str	r1, [r7, #8]
 800ef20:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ef22:	f06f 030b 	mvn.w	r3, #11
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3714      	adds	r7, #20
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef30:	4770      	bx	lr
	...

0800ef34 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ef3e:	79fb      	ldrb	r3, [r7, #7]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d013      	beq.n	800ef6c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ef44:	4b0d      	ldr	r3, [pc, #52]	@ (800ef7c <netif_get_by_index+0x48>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	60fb      	str	r3, [r7, #12]
 800ef4a:	e00c      	b.n	800ef66 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef52:	3301      	adds	r3, #1
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	79fa      	ldrb	r2, [r7, #7]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d101      	bne.n	800ef60 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	e006      	b.n	800ef6e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1ef      	bne.n	800ef4c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ef6c:	2300      	movs	r3, #0
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3714      	adds	r7, #20
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20011d0c 	.word	0x20011d0c

0800ef80 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ef86:	f009 ff57 	bl	8018e38 <sys_arch_protect>
 800ef8a:	6038      	str	r0, [r7, #0]
 800ef8c:	4b0d      	ldr	r3, [pc, #52]	@ (800efc4 <pbuf_free_ooseq+0x44>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	701a      	strb	r2, [r3, #0]
 800ef92:	6838      	ldr	r0, [r7, #0]
 800ef94:	f009 ff5e 	bl	8018e54 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ef98:	4b0b      	ldr	r3, [pc, #44]	@ (800efc8 <pbuf_free_ooseq+0x48>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	607b      	str	r3, [r7, #4]
 800ef9e:	e00a      	b.n	800efb6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d003      	beq.n	800efb0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f002 fc45 	bl	8011838 <tcp_free_ooseq>
      return;
 800efae:	e005      	b.n	800efbc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	607b      	str	r3, [r7, #4]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1f1      	bne.n	800efa0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800efbc:	3708      	adds	r7, #8
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20011d15 	.word	0x20011d15
 800efc8:	20011d24 	.word	0x20011d24

0800efcc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800efd4:	f7ff ffd4 	bl	800ef80 <pbuf_free_ooseq>
}
 800efd8:	bf00      	nop
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800efe6:	f009 ff27 	bl	8018e38 <sys_arch_protect>
 800efea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800efec:	4b0f      	ldr	r3, [pc, #60]	@ (800f02c <pbuf_pool_is_empty+0x4c>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800eff2:	4b0e      	ldr	r3, [pc, #56]	@ (800f02c <pbuf_pool_is_empty+0x4c>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f009 ff2b 	bl	8018e54 <sys_arch_unprotect>

  if (!queued) {
 800effe:	78fb      	ldrb	r3, [r7, #3]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10f      	bne.n	800f024 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f004:	2100      	movs	r1, #0
 800f006:	480a      	ldr	r0, [pc, #40]	@ (800f030 <pbuf_pool_is_empty+0x50>)
 800f008:	f7fe fed6 	bl	800ddb8 <tcpip_try_callback>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d008      	beq.n	800f024 <pbuf_pool_is_empty+0x44>
 800f012:	f009 ff11 	bl	8018e38 <sys_arch_protect>
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	4b04      	ldr	r3, [pc, #16]	@ (800f02c <pbuf_pool_is_empty+0x4c>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	701a      	strb	r2, [r3, #0]
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f009 ff18 	bl	8018e54 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f024:	bf00      	nop
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}
 800f02c:	20011d15 	.word	0x20011d15
 800f030:	0800efcd 	.word	0x0800efcd

0800f034 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f034:	b480      	push	{r7}
 800f036:	b085      	sub	sp, #20
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	4611      	mov	r1, r2
 800f040:	461a      	mov	r2, r3
 800f042:	460b      	mov	r3, r1
 800f044:	80fb      	strh	r3, [r7, #6]
 800f046:	4613      	mov	r3, r2
 800f048:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	68ba      	ldr	r2, [r7, #8]
 800f054:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	88fa      	ldrh	r2, [r7, #6]
 800f05a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	88ba      	ldrh	r2, [r7, #4]
 800f060:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f062:	8b3b      	ldrh	r3, [r7, #24]
 800f064:	b2da      	uxtb	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	7f3a      	ldrb	r2, [r7, #28]
 800f06e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2201      	movs	r2, #1
 800f074:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	73da      	strb	r2, [r3, #15]
}
 800f07c:	bf00      	nop
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b08c      	sub	sp, #48	@ 0x30
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	4603      	mov	r3, r0
 800f090:	71fb      	strb	r3, [r7, #7]
 800f092:	460b      	mov	r3, r1
 800f094:	80bb      	strh	r3, [r7, #4]
 800f096:	4613      	mov	r3, r2
 800f098:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f09a:	79fb      	ldrb	r3, [r7, #7]
 800f09c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f09e:	887b      	ldrh	r3, [r7, #2]
 800f0a0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f0a4:	d07f      	beq.n	800f1a6 <pbuf_alloc+0x11e>
 800f0a6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f0aa:	f300 80c8 	bgt.w	800f23e <pbuf_alloc+0x1b6>
 800f0ae:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f0b2:	d010      	beq.n	800f0d6 <pbuf_alloc+0x4e>
 800f0b4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f0b8:	f300 80c1 	bgt.w	800f23e <pbuf_alloc+0x1b6>
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d002      	beq.n	800f0c6 <pbuf_alloc+0x3e>
 800f0c0:	2b41      	cmp	r3, #65	@ 0x41
 800f0c2:	f040 80bc 	bne.w	800f23e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f0c6:	887a      	ldrh	r2, [r7, #2]
 800f0c8:	88bb      	ldrh	r3, [r7, #4]
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	f000 f8d1 	bl	800f274 <pbuf_alloc_reference>
 800f0d2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800f0d4:	e0bd      	b.n	800f252 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f0de:	88bb      	ldrh	r3, [r7, #4]
 800f0e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f0e2:	200c      	movs	r0, #12
 800f0e4:	f7ff fbbe 	bl	800e864 <memp_malloc>
 800f0e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d109      	bne.n	800f104 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f0f0:	f7ff ff76 	bl	800efe0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d002      	beq.n	800f100 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0fc:	f000 faa8 	bl	800f650 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	e0a7      	b.n	800f254 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f104:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f106:	3303      	adds	r3, #3
 800f108:	b29b      	uxth	r3, r3
 800f10a:	f023 0303 	bic.w	r3, r3, #3
 800f10e:	b29b      	uxth	r3, r3
 800f110:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800f114:	b29b      	uxth	r3, r3
 800f116:	8b7a      	ldrh	r2, [r7, #26]
 800f118:	4293      	cmp	r3, r2
 800f11a:	bf28      	it	cs
 800f11c:	4613      	movcs	r3, r2
 800f11e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f120:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f122:	3310      	adds	r3, #16
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	4413      	add	r3, r2
 800f128:	3303      	adds	r3, #3
 800f12a:	f023 0303 	bic.w	r3, r3, #3
 800f12e:	4618      	mov	r0, r3
 800f130:	89f9      	ldrh	r1, [r7, #14]
 800f132:	8b7a      	ldrh	r2, [r7, #26]
 800f134:	2300      	movs	r3, #0
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	887b      	ldrh	r3, [r7, #2]
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	460b      	mov	r3, r1
 800f13e:	4601      	mov	r1, r0
 800f140:	6938      	ldr	r0, [r7, #16]
 800f142:	f7ff ff77 	bl	800f034 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	f003 0303 	and.w	r3, r3, #3
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d006      	beq.n	800f160 <pbuf_alloc+0xd8>
 800f152:	4b42      	ldr	r3, [pc, #264]	@ (800f25c <pbuf_alloc+0x1d4>)
 800f154:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f158:	4941      	ldr	r1, [pc, #260]	@ (800f260 <pbuf_alloc+0x1d8>)
 800f15a:	4842      	ldr	r0, [pc, #264]	@ (800f264 <pbuf_alloc+0x1dc>)
 800f15c:	f00a fbc2 	bl	80198e4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f160:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f162:	3303      	adds	r3, #3
 800f164:	f023 0303 	bic.w	r3, r3, #3
 800f168:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800f16c:	d106      	bne.n	800f17c <pbuf_alloc+0xf4>
 800f16e:	4b3b      	ldr	r3, [pc, #236]	@ (800f25c <pbuf_alloc+0x1d4>)
 800f170:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f174:	493c      	ldr	r1, [pc, #240]	@ (800f268 <pbuf_alloc+0x1e0>)
 800f176:	483b      	ldr	r0, [pc, #236]	@ (800f264 <pbuf_alloc+0x1dc>)
 800f178:	f00a fbb4 	bl	80198e4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d102      	bne.n	800f188 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	627b      	str	r3, [r7, #36]	@ 0x24
 800f186:	e002      	b.n	800f18e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f192:	8b7a      	ldrh	r2, [r7, #26]
 800f194:	89fb      	ldrh	r3, [r7, #14]
 800f196:	1ad3      	subs	r3, r2, r3
 800f198:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f19e:	8b7b      	ldrh	r3, [r7, #26]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d19e      	bne.n	800f0e2 <pbuf_alloc+0x5a>
      break;
 800f1a4:	e055      	b.n	800f252 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f1a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1a8:	3303      	adds	r3, #3
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	f023 0303 	bic.w	r3, r3, #3
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	88bb      	ldrh	r3, [r7, #4]
 800f1b4:	3303      	adds	r3, #3
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	f023 0303 	bic.w	r3, r3, #3
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	4413      	add	r3, r2
 800f1c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f1c2:	8b3b      	ldrh	r3, [r7, #24]
 800f1c4:	3310      	adds	r3, #16
 800f1c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f1c8:	8b3a      	ldrh	r2, [r7, #24]
 800f1ca:	88bb      	ldrh	r3, [r7, #4]
 800f1cc:	3303      	adds	r3, #3
 800f1ce:	f023 0303 	bic.w	r3, r3, #3
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d306      	bcc.n	800f1e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f1d6:	8afa      	ldrh	r2, [r7, #22]
 800f1d8:	88bb      	ldrh	r3, [r7, #4]
 800f1da:	3303      	adds	r3, #3
 800f1dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d201      	bcs.n	800f1e8 <pbuf_alloc+0x160>
        return NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	e035      	b.n	800f254 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f1e8:	8afb      	ldrh	r3, [r7, #22]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff f9b8 	bl	800e560 <mem_malloc>
 800f1f0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d101      	bne.n	800f1fc <pbuf_alloc+0x174>
        return NULL;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	e02b      	b.n	800f254 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f1fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1fe:	3310      	adds	r3, #16
 800f200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f202:	4413      	add	r3, r2
 800f204:	3303      	adds	r3, #3
 800f206:	f023 0303 	bic.w	r3, r3, #3
 800f20a:	4618      	mov	r0, r3
 800f20c:	88b9      	ldrh	r1, [r7, #4]
 800f20e:	88ba      	ldrh	r2, [r7, #4]
 800f210:	2300      	movs	r3, #0
 800f212:	9301      	str	r3, [sp, #4]
 800f214:	887b      	ldrh	r3, [r7, #2]
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	460b      	mov	r3, r1
 800f21a:	4601      	mov	r1, r0
 800f21c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f21e:	f7ff ff09 	bl	800f034 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	f003 0303 	and.w	r3, r3, #3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d010      	beq.n	800f250 <pbuf_alloc+0x1c8>
 800f22e:	4b0b      	ldr	r3, [pc, #44]	@ (800f25c <pbuf_alloc+0x1d4>)
 800f230:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f234:	490d      	ldr	r1, [pc, #52]	@ (800f26c <pbuf_alloc+0x1e4>)
 800f236:	480b      	ldr	r0, [pc, #44]	@ (800f264 <pbuf_alloc+0x1dc>)
 800f238:	f00a fb54 	bl	80198e4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f23c:	e008      	b.n	800f250 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f23e:	4b07      	ldr	r3, [pc, #28]	@ (800f25c <pbuf_alloc+0x1d4>)
 800f240:	f240 1227 	movw	r2, #295	@ 0x127
 800f244:	490a      	ldr	r1, [pc, #40]	@ (800f270 <pbuf_alloc+0x1e8>)
 800f246:	4807      	ldr	r0, [pc, #28]	@ (800f264 <pbuf_alloc+0x1dc>)
 800f248:	f00a fb4c 	bl	80198e4 <iprintf>
      return NULL;
 800f24c:	2300      	movs	r3, #0
 800f24e:	e001      	b.n	800f254 <pbuf_alloc+0x1cc>
      break;
 800f250:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f254:	4618      	mov	r0, r3
 800f256:	3728      	adds	r7, #40	@ 0x28
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	0801d0e8 	.word	0x0801d0e8
 800f260:	0801d118 	.word	0x0801d118
 800f264:	0801d148 	.word	0x0801d148
 800f268:	0801d170 	.word	0x0801d170
 800f26c:	0801d1a4 	.word	0x0801d1a4
 800f270:	0801d1d0 	.word	0x0801d1d0

0800f274 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b086      	sub	sp, #24
 800f278:	af02      	add	r7, sp, #8
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	460b      	mov	r3, r1
 800f27e:	807b      	strh	r3, [r7, #2]
 800f280:	4613      	mov	r3, r2
 800f282:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f284:	883b      	ldrh	r3, [r7, #0]
 800f286:	2b41      	cmp	r3, #65	@ 0x41
 800f288:	d009      	beq.n	800f29e <pbuf_alloc_reference+0x2a>
 800f28a:	883b      	ldrh	r3, [r7, #0]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d006      	beq.n	800f29e <pbuf_alloc_reference+0x2a>
 800f290:	4b0f      	ldr	r3, [pc, #60]	@ (800f2d0 <pbuf_alloc_reference+0x5c>)
 800f292:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f296:	490f      	ldr	r1, [pc, #60]	@ (800f2d4 <pbuf_alloc_reference+0x60>)
 800f298:	480f      	ldr	r0, [pc, #60]	@ (800f2d8 <pbuf_alloc_reference+0x64>)
 800f29a:	f00a fb23 	bl	80198e4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f29e:	200b      	movs	r0, #11
 800f2a0:	f7ff fae0 	bl	800e864 <memp_malloc>
 800f2a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d101      	bne.n	800f2b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	e00b      	b.n	800f2c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f2b0:	8879      	ldrh	r1, [r7, #2]
 800f2b2:	887a      	ldrh	r2, [r7, #2]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	9301      	str	r3, [sp, #4]
 800f2b8:	883b      	ldrh	r3, [r7, #0]
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	460b      	mov	r3, r1
 800f2be:	6879      	ldr	r1, [r7, #4]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7ff feb7 	bl	800f034 <pbuf_init_alloced_pbuf>
  return p;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	0801d0e8 	.word	0x0801d0e8
 800f2d4:	0801d1ec 	.word	0x0801d1ec
 800f2d8:	0801d148 	.word	0x0801d148

0800f2dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b088      	sub	sp, #32
 800f2e0:	af02      	add	r7, sp, #8
 800f2e2:	607b      	str	r3, [r7, #4]
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]
 800f2e8:	460b      	mov	r3, r1
 800f2ea:	81bb      	strh	r3, [r7, #12]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f2f0:	7bfb      	ldrb	r3, [r7, #15]
 800f2f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f2f4:	8a7b      	ldrh	r3, [r7, #18]
 800f2f6:	3303      	adds	r3, #3
 800f2f8:	f023 0203 	bic.w	r2, r3, #3
 800f2fc:	89bb      	ldrh	r3, [r7, #12]
 800f2fe:	441a      	add	r2, r3
 800f300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f302:	429a      	cmp	r2, r3
 800f304:	d901      	bls.n	800f30a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f306:	2300      	movs	r3, #0
 800f308:	e018      	b.n	800f33c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f30a:	6a3b      	ldr	r3, [r7, #32]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d007      	beq.n	800f320 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f310:	8a7b      	ldrh	r3, [r7, #18]
 800f312:	3303      	adds	r3, #3
 800f314:	f023 0303 	bic.w	r3, r3, #3
 800f318:	6a3a      	ldr	r2, [r7, #32]
 800f31a:	4413      	add	r3, r2
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e001      	b.n	800f324 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f320:	2300      	movs	r3, #0
 800f322:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	89b9      	ldrh	r1, [r7, #12]
 800f328:	89ba      	ldrh	r2, [r7, #12]
 800f32a:	2302      	movs	r3, #2
 800f32c:	9301      	str	r3, [sp, #4]
 800f32e:	897b      	ldrh	r3, [r7, #10]
 800f330:	9300      	str	r3, [sp, #0]
 800f332:	460b      	mov	r3, r1
 800f334:	6979      	ldr	r1, [r7, #20]
 800f336:	f7ff fe7d 	bl	800f034 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f33a:	687b      	ldr	r3, [r7, #4]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3718      	adds	r7, #24
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	460b      	mov	r3, r1
 800f34e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d106      	bne.n	800f364 <pbuf_realloc+0x20>
 800f356:	4b3a      	ldr	r3, [pc, #232]	@ (800f440 <pbuf_realloc+0xfc>)
 800f358:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f35c:	4939      	ldr	r1, [pc, #228]	@ (800f444 <pbuf_realloc+0x100>)
 800f35e:	483a      	ldr	r0, [pc, #232]	@ (800f448 <pbuf_realloc+0x104>)
 800f360:	f00a fac0 	bl	80198e4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	891b      	ldrh	r3, [r3, #8]
 800f368:	887a      	ldrh	r2, [r7, #2]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d263      	bcs.n	800f436 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	891a      	ldrh	r2, [r3, #8]
 800f372:	887b      	ldrh	r3, [r7, #2]
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f378:	887b      	ldrh	r3, [r7, #2]
 800f37a:	817b      	strh	r3, [r7, #10]
  q = p;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f380:	e018      	b.n	800f3b4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	895b      	ldrh	r3, [r3, #10]
 800f386:	897a      	ldrh	r2, [r7, #10]
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	891a      	ldrh	r2, [r3, #8]
 800f390:	893b      	ldrh	r3, [r7, #8]
 800f392:	1ad3      	subs	r3, r2, r3
 800f394:	b29a      	uxth	r2, r3
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d106      	bne.n	800f3b4 <pbuf_realloc+0x70>
 800f3a6:	4b26      	ldr	r3, [pc, #152]	@ (800f440 <pbuf_realloc+0xfc>)
 800f3a8:	f240 12af 	movw	r2, #431	@ 0x1af
 800f3ac:	4927      	ldr	r1, [pc, #156]	@ (800f44c <pbuf_realloc+0x108>)
 800f3ae:	4826      	ldr	r0, [pc, #152]	@ (800f448 <pbuf_realloc+0x104>)
 800f3b0:	f00a fa98 	bl	80198e4 <iprintf>
  while (rem_len > q->len) {
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	895b      	ldrh	r3, [r3, #10]
 800f3b8:	897a      	ldrh	r2, [r7, #10]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d8e1      	bhi.n	800f382 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	7b1b      	ldrb	r3, [r3, #12]
 800f3c2:	f003 030f 	and.w	r3, r3, #15
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d121      	bne.n	800f40e <pbuf_realloc+0xca>
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	895b      	ldrh	r3, [r3, #10]
 800f3ce:	897a      	ldrh	r2, [r7, #10]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d01c      	beq.n	800f40e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	7b5b      	ldrb	r3, [r3, #13]
 800f3d8:	f003 0302 	and.w	r3, r3, #2
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d116      	bne.n	800f40e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	685a      	ldr	r2, [r3, #4]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	1ad3      	subs	r3, r2, r3
 800f3e8:	b29a      	uxth	r2, r3
 800f3ea:	897b      	ldrh	r3, [r7, #10]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f7fe ffaa 	bl	800e34c <mem_trim>
 800f3f8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d106      	bne.n	800f40e <pbuf_realloc+0xca>
 800f400:	4b0f      	ldr	r3, [pc, #60]	@ (800f440 <pbuf_realloc+0xfc>)
 800f402:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f406:	4912      	ldr	r1, [pc, #72]	@ (800f450 <pbuf_realloc+0x10c>)
 800f408:	480f      	ldr	r0, [pc, #60]	@ (800f448 <pbuf_realloc+0x104>)
 800f40a:	f00a fa6b 	bl	80198e4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	897a      	ldrh	r2, [r7, #10]
 800f412:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	895a      	ldrh	r2, [r3, #10]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d004      	beq.n	800f42e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4618      	mov	r0, r3
 800f42a:	f000 f911 	bl	800f650 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	e000      	b.n	800f438 <pbuf_realloc+0xf4>
    return;
 800f436:	bf00      	nop

}
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	0801d0e8 	.word	0x0801d0e8
 800f444:	0801d200 	.word	0x0801d200
 800f448:	0801d148 	.word	0x0801d148
 800f44c:	0801d218 	.word	0x0801d218
 800f450:	0801d230 	.word	0x0801d230

0800f454 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	4613      	mov	r3, r2
 800f460:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d106      	bne.n	800f476 <pbuf_add_header_impl+0x22>
 800f468:	4b2b      	ldr	r3, [pc, #172]	@ (800f518 <pbuf_add_header_impl+0xc4>)
 800f46a:	f240 12df 	movw	r2, #479	@ 0x1df
 800f46e:	492b      	ldr	r1, [pc, #172]	@ (800f51c <pbuf_add_header_impl+0xc8>)
 800f470:	482b      	ldr	r0, [pc, #172]	@ (800f520 <pbuf_add_header_impl+0xcc>)
 800f472:	f00a fa37 	bl	80198e4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d003      	beq.n	800f484 <pbuf_add_header_impl+0x30>
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f482:	d301      	bcc.n	800f488 <pbuf_add_header_impl+0x34>
    return 1;
 800f484:	2301      	movs	r3, #1
 800f486:	e043      	b.n	800f510 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d101      	bne.n	800f492 <pbuf_add_header_impl+0x3e>
    return 0;
 800f48e:	2300      	movs	r3, #0
 800f490:	e03e      	b.n	800f510 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	891a      	ldrh	r2, [r3, #8]
 800f49a:	8a7b      	ldrh	r3, [r7, #18]
 800f49c:	4413      	add	r3, r2
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	8a7a      	ldrh	r2, [r7, #18]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d901      	bls.n	800f4aa <pbuf_add_header_impl+0x56>
    return 1;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e032      	b.n	800f510 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	7b1b      	ldrb	r3, [r3, #12]
 800f4ae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f4b0:	8a3b      	ldrh	r3, [r7, #16]
 800f4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00c      	beq.n	800f4d4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	425b      	negs	r3, r3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	3310      	adds	r3, #16
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d20d      	bcs.n	800f4ec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e01d      	b.n	800f510 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f4d4:	79fb      	ldrb	r3, [r7, #7]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d006      	beq.n	800f4e8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	425b      	negs	r3, r3
 800f4e2:	4413      	add	r3, r2
 800f4e4:	617b      	str	r3, [r7, #20]
 800f4e6:	e001      	b.n	800f4ec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e011      	b.n	800f510 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	697a      	ldr	r2, [r7, #20]
 800f4f0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	895a      	ldrh	r2, [r3, #10]
 800f4f6:	8a7b      	ldrh	r3, [r7, #18]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	891a      	ldrh	r2, [r3, #8]
 800f504:	8a7b      	ldrh	r3, [r7, #18]
 800f506:	4413      	add	r3, r2
 800f508:	b29a      	uxth	r2, r3
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	811a      	strh	r2, [r3, #8]


  return 0;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	0801d0e8 	.word	0x0801d0e8
 800f51c:	0801d24c 	.word	0x0801d24c
 800f520:	0801d148 	.word	0x0801d148

0800f524 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f52e:	2200      	movs	r2, #0
 800f530:	6839      	ldr	r1, [r7, #0]
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f7ff ff8e 	bl	800f454 <pbuf_add_header_impl>
 800f538:	4603      	mov	r3, r0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
	...

0800f544 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d106      	bne.n	800f562 <pbuf_remove_header+0x1e>
 800f554:	4b20      	ldr	r3, [pc, #128]	@ (800f5d8 <pbuf_remove_header+0x94>)
 800f556:	f240 224b 	movw	r2, #587	@ 0x24b
 800f55a:	4920      	ldr	r1, [pc, #128]	@ (800f5dc <pbuf_remove_header+0x98>)
 800f55c:	4820      	ldr	r0, [pc, #128]	@ (800f5e0 <pbuf_remove_header+0x9c>)
 800f55e:	f00a f9c1 	bl	80198e4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <pbuf_remove_header+0x2c>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f56e:	d301      	bcc.n	800f574 <pbuf_remove_header+0x30>
    return 1;
 800f570:	2301      	movs	r3, #1
 800f572:	e02c      	b.n	800f5ce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d101      	bne.n	800f57e <pbuf_remove_header+0x3a>
    return 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	e027      	b.n	800f5ce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	895b      	ldrh	r3, [r3, #10]
 800f586:	89fa      	ldrh	r2, [r7, #14]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d908      	bls.n	800f59e <pbuf_remove_header+0x5a>
 800f58c:	4b12      	ldr	r3, [pc, #72]	@ (800f5d8 <pbuf_remove_header+0x94>)
 800f58e:	f240 2255 	movw	r2, #597	@ 0x255
 800f592:	4914      	ldr	r1, [pc, #80]	@ (800f5e4 <pbuf_remove_header+0xa0>)
 800f594:	4812      	ldr	r0, [pc, #72]	@ (800f5e0 <pbuf_remove_header+0x9c>)
 800f596:	f00a f9a5 	bl	80198e4 <iprintf>
 800f59a:	2301      	movs	r3, #1
 800f59c:	e017      	b.n	800f5ce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685a      	ldr	r2, [r3, #4]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	441a      	add	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	895a      	ldrh	r2, [r3, #10]
 800f5b4:	89fb      	ldrh	r3, [r7, #14]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	891a      	ldrh	r2, [r3, #8]
 800f5c2:	89fb      	ldrh	r3, [r7, #14]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f5cc:	2300      	movs	r3, #0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3710      	adds	r7, #16
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	0801d0e8 	.word	0x0801d0e8
 800f5dc:	0801d24c 	.word	0x0801d24c
 800f5e0:	0801d148 	.word	0x0801d148
 800f5e4:	0801d258 	.word	0x0801d258

0800f5e8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	807b      	strh	r3, [r7, #2]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f5f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	da08      	bge.n	800f612 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f604:	425b      	negs	r3, r3
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff ff9b 	bl	800f544 <pbuf_remove_header>
 800f60e:	4603      	mov	r3, r0
 800f610:	e007      	b.n	800f622 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f612:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f616:	787a      	ldrb	r2, [r7, #1]
 800f618:	4619      	mov	r1, r3
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7ff ff1a 	bl	800f454 <pbuf_add_header_impl>
 800f620:	4603      	mov	r3, r0
  }
}
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	460b      	mov	r3, r1
 800f634:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f63a:	2201      	movs	r2, #1
 800f63c:	4619      	mov	r1, r3
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ffd2 	bl	800f5e8 <pbuf_header_impl>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
	...

0800f650 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10b      	bne.n	800f676 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d106      	bne.n	800f672 <pbuf_free+0x22>
 800f664:	4b3b      	ldr	r3, [pc, #236]	@ (800f754 <pbuf_free+0x104>)
 800f666:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f66a:	493b      	ldr	r1, [pc, #236]	@ (800f758 <pbuf_free+0x108>)
 800f66c:	483b      	ldr	r0, [pc, #236]	@ (800f75c <pbuf_free+0x10c>)
 800f66e:	f00a f939 	bl	80198e4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f672:	2300      	movs	r3, #0
 800f674:	e069      	b.n	800f74a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f67a:	e062      	b.n	800f742 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f67c:	f009 fbdc 	bl	8018e38 <sys_arch_protect>
 800f680:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	7b9b      	ldrb	r3, [r3, #14]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d106      	bne.n	800f698 <pbuf_free+0x48>
 800f68a:	4b32      	ldr	r3, [pc, #200]	@ (800f754 <pbuf_free+0x104>)
 800f68c:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f690:	4933      	ldr	r1, [pc, #204]	@ (800f760 <pbuf_free+0x110>)
 800f692:	4832      	ldr	r0, [pc, #200]	@ (800f75c <pbuf_free+0x10c>)
 800f694:	f00a f926 	bl	80198e4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	7b9b      	ldrb	r3, [r3, #14]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	b2da      	uxtb	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	739a      	strb	r2, [r3, #14]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	7b9b      	ldrb	r3, [r3, #14]
 800f6a8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f6aa:	69b8      	ldr	r0, [r7, #24]
 800f6ac:	f009 fbd2 	bl	8018e54 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f6b0:	7dfb      	ldrb	r3, [r7, #23]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d143      	bne.n	800f73e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7b1b      	ldrb	r3, [r3, #12]
 800f6c0:	f003 030f 	and.w	r3, r3, #15
 800f6c4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	7b5b      	ldrb	r3, [r3, #13]
 800f6ca:	f003 0302 	and.w	r3, r3, #2
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d011      	beq.n	800f6f6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d106      	bne.n	800f6ec <pbuf_free+0x9c>
 800f6de:	4b1d      	ldr	r3, [pc, #116]	@ (800f754 <pbuf_free+0x104>)
 800f6e0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f6e4:	491f      	ldr	r1, [pc, #124]	@ (800f764 <pbuf_free+0x114>)
 800f6e6:	481d      	ldr	r0, [pc, #116]	@ (800f75c <pbuf_free+0x10c>)
 800f6e8:	f00a f8fc 	bl	80198e4 <iprintf>
        pc->custom_free_function(p);
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	4798      	blx	r3
 800f6f4:	e01d      	b.n	800f732 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d104      	bne.n	800f706 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f6fc:	6879      	ldr	r1, [r7, #4]
 800f6fe:	200c      	movs	r0, #12
 800f700:	f7ff f902 	bl	800e908 <memp_free>
 800f704:	e015      	b.n	800f732 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f706:	7bfb      	ldrb	r3, [r7, #15]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d104      	bne.n	800f716 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f70c:	6879      	ldr	r1, [r7, #4]
 800f70e:	200b      	movs	r0, #11
 800f710:	f7ff f8fa 	bl	800e908 <memp_free>
 800f714:	e00d      	b.n	800f732 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f716:	7bfb      	ldrb	r3, [r7, #15]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d103      	bne.n	800f724 <pbuf_free+0xd4>
          mem_free(p);
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f7fe fd85 	bl	800e22c <mem_free>
 800f722:	e006      	b.n	800f732 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f724:	4b0b      	ldr	r3, [pc, #44]	@ (800f754 <pbuf_free+0x104>)
 800f726:	f240 320f 	movw	r2, #783	@ 0x30f
 800f72a:	490f      	ldr	r1, [pc, #60]	@ (800f768 <pbuf_free+0x118>)
 800f72c:	480b      	ldr	r0, [pc, #44]	@ (800f75c <pbuf_free+0x10c>)
 800f72e:	f00a f8d9 	bl	80198e4 <iprintf>
        }
      }
      count++;
 800f732:	7ffb      	ldrb	r3, [r7, #31]
 800f734:	3301      	adds	r3, #1
 800f736:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	607b      	str	r3, [r7, #4]
 800f73c:	e001      	b.n	800f742 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d199      	bne.n	800f67c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f748:	7ffb      	ldrb	r3, [r7, #31]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3720      	adds	r7, #32
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	0801d0e8 	.word	0x0801d0e8
 800f758:	0801d24c 	.word	0x0801d24c
 800f75c:	0801d148 	.word	0x0801d148
 800f760:	0801d278 	.word	0x0801d278
 800f764:	0801d290 	.word	0x0801d290
 800f768:	0801d2b4 	.word	0x0801d2b4

0800f76c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f778:	e005      	b.n	800f786 <pbuf_clen+0x1a>
    ++len;
 800f77a:	89fb      	ldrh	r3, [r7, #14]
 800f77c:	3301      	adds	r3, #1
 800f77e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1f6      	bne.n	800f77a <pbuf_clen+0xe>
  }
  return len;
 800f78c:	89fb      	ldrh	r3, [r7, #14]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3714      	adds	r7, #20
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr
	...

0800f79c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d016      	beq.n	800f7d8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f7aa:	f009 fb45 	bl	8018e38 <sys_arch_protect>
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	7b9b      	ldrb	r3, [r3, #14]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	739a      	strb	r2, [r3, #14]
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f009 fb49 	bl	8018e54 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	7b9b      	ldrb	r3, [r3, #14]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d106      	bne.n	800f7d8 <pbuf_ref+0x3c>
 800f7ca:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <pbuf_ref+0x44>)
 800f7cc:	f240 3242 	movw	r2, #834	@ 0x342
 800f7d0:	4904      	ldr	r1, [pc, #16]	@ (800f7e4 <pbuf_ref+0x48>)
 800f7d2:	4805      	ldr	r0, [pc, #20]	@ (800f7e8 <pbuf_ref+0x4c>)
 800f7d4:	f00a f886 	bl	80198e4 <iprintf>
  }
}
 800f7d8:	bf00      	nop
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	0801d0e8 	.word	0x0801d0e8
 800f7e4:	0801d2c8 	.word	0x0801d2c8
 800f7e8:	0801d148 	.word	0x0801d148

0800f7ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <pbuf_cat+0x16>
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d107      	bne.n	800f812 <pbuf_cat+0x26>
 800f802:	4b20      	ldr	r3, [pc, #128]	@ (800f884 <pbuf_cat+0x98>)
 800f804:	f240 3259 	movw	r2, #857	@ 0x359
 800f808:	491f      	ldr	r1, [pc, #124]	@ (800f888 <pbuf_cat+0x9c>)
 800f80a:	4820      	ldr	r0, [pc, #128]	@ (800f88c <pbuf_cat+0xa0>)
 800f80c:	f00a f86a 	bl	80198e4 <iprintf>
 800f810:	e034      	b.n	800f87c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	60fb      	str	r3, [r7, #12]
 800f816:	e00a      	b.n	800f82e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	891a      	ldrh	r2, [r3, #8]
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	891b      	ldrh	r3, [r3, #8]
 800f820:	4413      	add	r3, r2
 800f822:	b29a      	uxth	r2, r3
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1f0      	bne.n	800f818 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	891a      	ldrh	r2, [r3, #8]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	895b      	ldrh	r3, [r3, #10]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d006      	beq.n	800f850 <pbuf_cat+0x64>
 800f842:	4b10      	ldr	r3, [pc, #64]	@ (800f884 <pbuf_cat+0x98>)
 800f844:	f240 3262 	movw	r2, #866	@ 0x362
 800f848:	4911      	ldr	r1, [pc, #68]	@ (800f890 <pbuf_cat+0xa4>)
 800f84a:	4810      	ldr	r0, [pc, #64]	@ (800f88c <pbuf_cat+0xa0>)
 800f84c:	f00a f84a 	bl	80198e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d006      	beq.n	800f866 <pbuf_cat+0x7a>
 800f858:	4b0a      	ldr	r3, [pc, #40]	@ (800f884 <pbuf_cat+0x98>)
 800f85a:	f240 3263 	movw	r2, #867	@ 0x363
 800f85e:	490d      	ldr	r1, [pc, #52]	@ (800f894 <pbuf_cat+0xa8>)
 800f860:	480a      	ldr	r0, [pc, #40]	@ (800f88c <pbuf_cat+0xa0>)
 800f862:	f00a f83f 	bl	80198e4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	891a      	ldrh	r2, [r3, #8]
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	891b      	ldrh	r3, [r3, #8]
 800f86e:	4413      	add	r3, r2
 800f870:	b29a      	uxth	r2, r3
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	0801d0e8 	.word	0x0801d0e8
 800f888:	0801d2dc 	.word	0x0801d2dc
 800f88c:	0801d148 	.word	0x0801d148
 800f890:	0801d314 	.word	0x0801d314
 800f894:	0801d344 	.word	0x0801d344

0800f898 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	617b      	str	r3, [r7, #20]
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d008      	beq.n	800f8c2 <pbuf_copy+0x2a>
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d005      	beq.n	800f8c2 <pbuf_copy+0x2a>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	891a      	ldrh	r2, [r3, #8]
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	891b      	ldrh	r3, [r3, #8]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d209      	bcs.n	800f8d6 <pbuf_copy+0x3e>
 800f8c2:	4b57      	ldr	r3, [pc, #348]	@ (800fa20 <pbuf_copy+0x188>)
 800f8c4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f8c8:	4956      	ldr	r1, [pc, #344]	@ (800fa24 <pbuf_copy+0x18c>)
 800f8ca:	4857      	ldr	r0, [pc, #348]	@ (800fa28 <pbuf_copy+0x190>)
 800f8cc:	f00a f80a 	bl	80198e4 <iprintf>
 800f8d0:	f06f 030f 	mvn.w	r3, #15
 800f8d4:	e09f      	b.n	800fa16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	895b      	ldrh	r3, [r3, #10]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	1ad2      	subs	r2, r2, r3
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	895b      	ldrh	r3, [r3, #10]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	1acb      	subs	r3, r1, r3
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d306      	bcc.n	800f8fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	895b      	ldrh	r3, [r3, #10]
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	60fb      	str	r3, [r7, #12]
 800f8fa:	e005      	b.n	800f908 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	895b      	ldrh	r3, [r3, #10]
 800f900:	461a      	mov	r2, r3
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	1ad3      	subs	r3, r2, r3
 800f906:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	685a      	ldr	r2, [r3, #4]
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	18d0      	adds	r0, r2, r3
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	4413      	add	r3, r2
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	4619      	mov	r1, r3
 800f91c:	f00a fa61 	bl	8019de2 <memcpy>
    offset_to += len;
 800f920:	697a      	ldr	r2, [r7, #20]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	4413      	add	r3, r2
 800f926:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	4413      	add	r3, r2
 800f92e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	895b      	ldrh	r3, [r3, #10]
 800f934:	461a      	mov	r2, r3
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	4293      	cmp	r3, r2
 800f93a:	d906      	bls.n	800f94a <pbuf_copy+0xb2>
 800f93c:	4b38      	ldr	r3, [pc, #224]	@ (800fa20 <pbuf_copy+0x188>)
 800f93e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f942:	493a      	ldr	r1, [pc, #232]	@ (800fa2c <pbuf_copy+0x194>)
 800f944:	4838      	ldr	r0, [pc, #224]	@ (800fa28 <pbuf_copy+0x190>)
 800f946:	f009 ffcd 	bl	80198e4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	895b      	ldrh	r3, [r3, #10]
 800f94e:	461a      	mov	r2, r3
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	4293      	cmp	r3, r2
 800f954:	d906      	bls.n	800f964 <pbuf_copy+0xcc>
 800f956:	4b32      	ldr	r3, [pc, #200]	@ (800fa20 <pbuf_copy+0x188>)
 800f958:	f240 32da 	movw	r2, #986	@ 0x3da
 800f95c:	4934      	ldr	r1, [pc, #208]	@ (800fa30 <pbuf_copy+0x198>)
 800f95e:	4832      	ldr	r0, [pc, #200]	@ (800fa28 <pbuf_copy+0x190>)
 800f960:	f009 ffc0 	bl	80198e4 <iprintf>
    if (offset_from >= p_from->len) {
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	895b      	ldrh	r3, [r3, #10]
 800f968:	461a      	mov	r2, r3
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d304      	bcc.n	800f97a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f970:	2300      	movs	r3, #0
 800f972:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	895b      	ldrh	r3, [r3, #10]
 800f97e:	461a      	mov	r2, r3
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	4293      	cmp	r3, r2
 800f984:	d114      	bne.n	800f9b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f986:	2300      	movs	r3, #0
 800f988:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d10c      	bne.n	800f9b0 <pbuf_copy+0x118>
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <pbuf_copy+0x118>
 800f99c:	4b20      	ldr	r3, [pc, #128]	@ (800fa20 <pbuf_copy+0x188>)
 800f99e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f9a2:	4924      	ldr	r1, [pc, #144]	@ (800fa34 <pbuf_copy+0x19c>)
 800f9a4:	4820      	ldr	r0, [pc, #128]	@ (800fa28 <pbuf_copy+0x190>)
 800f9a6:	f009 ff9d 	bl	80198e4 <iprintf>
 800f9aa:	f06f 030f 	mvn.w	r3, #15
 800f9ae:	e032      	b.n	800fa16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d013      	beq.n	800f9de <pbuf_copy+0x146>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	895a      	ldrh	r2, [r3, #10]
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	891b      	ldrh	r3, [r3, #8]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d10d      	bne.n	800f9de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d009      	beq.n	800f9de <pbuf_copy+0x146>
 800f9ca:	4b15      	ldr	r3, [pc, #84]	@ (800fa20 <pbuf_copy+0x188>)
 800f9cc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f9d0:	4919      	ldr	r1, [pc, #100]	@ (800fa38 <pbuf_copy+0x1a0>)
 800f9d2:	4815      	ldr	r0, [pc, #84]	@ (800fa28 <pbuf_copy+0x190>)
 800f9d4:	f009 ff86 	bl	80198e4 <iprintf>
 800f9d8:	f06f 0305 	mvn.w	r3, #5
 800f9dc:	e01b      	b.n	800fa16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d013      	beq.n	800fa0c <pbuf_copy+0x174>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	895a      	ldrh	r2, [r3, #10]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	891b      	ldrh	r3, [r3, #8]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d10d      	bne.n	800fa0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d009      	beq.n	800fa0c <pbuf_copy+0x174>
 800f9f8:	4b09      	ldr	r3, [pc, #36]	@ (800fa20 <pbuf_copy+0x188>)
 800f9fa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f9fe:	490e      	ldr	r1, [pc, #56]	@ (800fa38 <pbuf_copy+0x1a0>)
 800fa00:	4809      	ldr	r0, [pc, #36]	@ (800fa28 <pbuf_copy+0x190>)
 800fa02:	f009 ff6f 	bl	80198e4 <iprintf>
 800fa06:	f06f 0305 	mvn.w	r3, #5
 800fa0a:	e004      	b.n	800fa16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f47f af61 	bne.w	800f8d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	0801d0e8 	.word	0x0801d0e8
 800fa24:	0801d390 	.word	0x0801d390
 800fa28:	0801d148 	.word	0x0801d148
 800fa2c:	0801d3c0 	.word	0x0801d3c0
 800fa30:	0801d3d8 	.word	0x0801d3d8
 800fa34:	0801d3f4 	.word	0x0801d3f4
 800fa38:	0801d404 	.word	0x0801d404

0800fa3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b088      	sub	sp, #32
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	4611      	mov	r1, r2
 800fa48:	461a      	mov	r2, r3
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	80fb      	strh	r3, [r7, #6]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d108      	bne.n	800fa72 <pbuf_copy_partial+0x36>
 800fa60:	4b2b      	ldr	r3, [pc, #172]	@ (800fb10 <pbuf_copy_partial+0xd4>)
 800fa62:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fa66:	492b      	ldr	r1, [pc, #172]	@ (800fb14 <pbuf_copy_partial+0xd8>)
 800fa68:	482b      	ldr	r0, [pc, #172]	@ (800fb18 <pbuf_copy_partial+0xdc>)
 800fa6a:	f009 ff3b 	bl	80198e4 <iprintf>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	e04a      	b.n	800fb08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d108      	bne.n	800fa8a <pbuf_copy_partial+0x4e>
 800fa78:	4b25      	ldr	r3, [pc, #148]	@ (800fb10 <pbuf_copy_partial+0xd4>)
 800fa7a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800fa7e:	4927      	ldr	r1, [pc, #156]	@ (800fb1c <pbuf_copy_partial+0xe0>)
 800fa80:	4825      	ldr	r0, [pc, #148]	@ (800fb18 <pbuf_copy_partial+0xdc>)
 800fa82:	f009 ff2f 	bl	80198e4 <iprintf>
 800fa86:	2300      	movs	r3, #0
 800fa88:	e03e      	b.n	800fb08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	61fb      	str	r3, [r7, #28]
 800fa8e:	e034      	b.n	800fafa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fa90:	88bb      	ldrh	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00a      	beq.n	800faac <pbuf_copy_partial+0x70>
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	895b      	ldrh	r3, [r3, #10]
 800fa9a:	88ba      	ldrh	r2, [r7, #4]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d305      	bcc.n	800faac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	895b      	ldrh	r3, [r3, #10]
 800faa4:	88ba      	ldrh	r2, [r7, #4]
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	80bb      	strh	r3, [r7, #4]
 800faaa:	e023      	b.n	800faf4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	895a      	ldrh	r2, [r3, #10]
 800fab0:	88bb      	ldrh	r3, [r7, #4]
 800fab2:	1ad3      	subs	r3, r2, r3
 800fab4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fab6:	8b3a      	ldrh	r2, [r7, #24]
 800fab8:	88fb      	ldrh	r3, [r7, #6]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d901      	bls.n	800fac2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fabe:	88fb      	ldrh	r3, [r7, #6]
 800fac0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fac2:	8b7b      	ldrh	r3, [r7, #26]
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	18d0      	adds	r0, r2, r3
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	88bb      	ldrh	r3, [r7, #4]
 800face:	4413      	add	r3, r2
 800fad0:	8b3a      	ldrh	r2, [r7, #24]
 800fad2:	4619      	mov	r1, r3
 800fad4:	f00a f985 	bl	8019de2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fad8:	8afa      	ldrh	r2, [r7, #22]
 800fada:	8b3b      	ldrh	r3, [r7, #24]
 800fadc:	4413      	add	r3, r2
 800fade:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fae0:	8b7a      	ldrh	r2, [r7, #26]
 800fae2:	8b3b      	ldrh	r3, [r7, #24]
 800fae4:	4413      	add	r3, r2
 800fae6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	8b3b      	ldrh	r3, [r7, #24]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800faf0:	2300      	movs	r3, #0
 800faf2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	61fb      	str	r3, [r7, #28]
 800fafa:	88fb      	ldrh	r3, [r7, #6]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <pbuf_copy_partial+0xca>
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1c4      	bne.n	800fa90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fb06:	8afb      	ldrh	r3, [r7, #22]
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3720      	adds	r7, #32
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	0801d0e8 	.word	0x0801d0e8
 800fb14:	0801d430 	.word	0x0801d430
 800fb18:	0801d148 	.word	0x0801d148
 800fb1c:	0801d450 	.word	0x0801d450

0800fb20 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	4603      	mov	r3, r0
 800fb28:	603a      	str	r2, [r7, #0]
 800fb2a:	71fb      	strb	r3, [r7, #7]
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	8919      	ldrh	r1, [r3, #8]
 800fb34:	88ba      	ldrh	r2, [r7, #4]
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff faa5 	bl	800f088 <pbuf_alloc>
 800fb3e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d101      	bne.n	800fb4a <pbuf_clone+0x2a>
    return NULL;
 800fb46:	2300      	movs	r3, #0
 800fb48:	e011      	b.n	800fb6e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	68f8      	ldr	r0, [r7, #12]
 800fb4e:	f7ff fea3 	bl	800f898 <pbuf_copy>
 800fb52:	4603      	mov	r3, r0
 800fb54:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fb56:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d006      	beq.n	800fb6c <pbuf_clone+0x4c>
 800fb5e:	4b06      	ldr	r3, [pc, #24]	@ (800fb78 <pbuf_clone+0x58>)
 800fb60:	f240 5224 	movw	r2, #1316	@ 0x524
 800fb64:	4905      	ldr	r1, [pc, #20]	@ (800fb7c <pbuf_clone+0x5c>)
 800fb66:	4806      	ldr	r0, [pc, #24]	@ (800fb80 <pbuf_clone+0x60>)
 800fb68:	f009 febc 	bl	80198e4 <iprintf>
  return q;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	0801d0e8 	.word	0x0801d0e8
 800fb7c:	0801d55c 	.word	0x0801d55c
 800fb80:	0801d148 	.word	0x0801d148

0800fb84 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fb88:	f009 f974 	bl	8018e74 <rand>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	4b01      	ldr	r3, [pc, #4]	@ (800fba4 <tcp_init+0x20>)
 800fb9e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fba0:	bf00      	nop
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	20000010 	.word	0x20000010

0800fba8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b082      	sub	sp, #8
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d105      	bne.n	800fbc4 <tcp_free+0x1c>
 800fbb8:	4b06      	ldr	r3, [pc, #24]	@ (800fbd4 <tcp_free+0x2c>)
 800fbba:	22d4      	movs	r2, #212	@ 0xd4
 800fbbc:	4906      	ldr	r1, [pc, #24]	@ (800fbd8 <tcp_free+0x30>)
 800fbbe:	4807      	ldr	r0, [pc, #28]	@ (800fbdc <tcp_free+0x34>)
 800fbc0:	f009 fe90 	bl	80198e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	f7fe fe9e 	bl	800e908 <memp_free>
}
 800fbcc:	bf00      	nop
 800fbce:	3708      	adds	r7, #8
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	0801d5e8 	.word	0x0801d5e8
 800fbd8:	0801d618 	.word	0x0801d618
 800fbdc:	0801d62c 	.word	0x0801d62c

0800fbe0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	7d1b      	ldrb	r3, [r3, #20]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d105      	bne.n	800fbfc <tcp_free_listen+0x1c>
 800fbf0:	4b06      	ldr	r3, [pc, #24]	@ (800fc0c <tcp_free_listen+0x2c>)
 800fbf2:	22df      	movs	r2, #223	@ 0xdf
 800fbf4:	4906      	ldr	r1, [pc, #24]	@ (800fc10 <tcp_free_listen+0x30>)
 800fbf6:	4807      	ldr	r0, [pc, #28]	@ (800fc14 <tcp_free_listen+0x34>)
 800fbf8:	f009 fe74 	bl	80198e4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fbfc:	6879      	ldr	r1, [r7, #4]
 800fbfe:	2002      	movs	r0, #2
 800fc00:	f7fe fe82 	bl	800e908 <memp_free>
}
 800fc04:	bf00      	nop
 800fc06:	3708      	adds	r7, #8
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}
 800fc0c:	0801d5e8 	.word	0x0801d5e8
 800fc10:	0801d654 	.word	0x0801d654
 800fc14:	0801d62c 	.word	0x0801d62c

0800fc18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fc1c:	f001 f8a8 	bl	8010d70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fc20:	4b07      	ldr	r3, [pc, #28]	@ (800fc40 <tcp_tmr+0x28>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	3301      	adds	r3, #1
 800fc26:	b2da      	uxtb	r2, r3
 800fc28:	4b05      	ldr	r3, [pc, #20]	@ (800fc40 <tcp_tmr+0x28>)
 800fc2a:	701a      	strb	r2, [r3, #0]
 800fc2c:	4b04      	ldr	r3, [pc, #16]	@ (800fc40 <tcp_tmr+0x28>)
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d001      	beq.n	800fc3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fc38:	f000 fd58 	bl	80106ec <tcp_slowtmr>
  }
}
 800fc3c:	bf00      	nop
 800fc3e:	bd80      	pop	{r7, pc}
 800fc40:	20011d2d 	.word	0x20011d2d

0800fc44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d105      	bne.n	800fc60 <tcp_remove_listener+0x1c>
 800fc54:	4b0d      	ldr	r3, [pc, #52]	@ (800fc8c <tcp_remove_listener+0x48>)
 800fc56:	22ff      	movs	r2, #255	@ 0xff
 800fc58:	490d      	ldr	r1, [pc, #52]	@ (800fc90 <tcp_remove_listener+0x4c>)
 800fc5a:	480e      	ldr	r0, [pc, #56]	@ (800fc94 <tcp_remove_listener+0x50>)
 800fc5c:	f009 fe42 	bl	80198e4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	60fb      	str	r3, [r7, #12]
 800fc64:	e00a      	b.n	800fc7c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc6a:	683a      	ldr	r2, [r7, #0]
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d102      	bne.n	800fc76 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1f1      	bne.n	800fc66 <tcp_remove_listener+0x22>
    }
  }
}
 800fc82:	bf00      	nop
 800fc84:	bf00      	nop
 800fc86:	3710      	adds	r7, #16
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}
 800fc8c:	0801d5e8 	.word	0x0801d5e8
 800fc90:	0801d670 	.word	0x0801d670
 800fc94:	0801d62c 	.word	0x0801d62c

0800fc98 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_listen_closed+0x1c>
 800fca6:	4b14      	ldr	r3, [pc, #80]	@ (800fcf8 <tcp_listen_closed+0x60>)
 800fca8:	f240 1211 	movw	r2, #273	@ 0x111
 800fcac:	4913      	ldr	r1, [pc, #76]	@ (800fcfc <tcp_listen_closed+0x64>)
 800fcae:	4814      	ldr	r0, [pc, #80]	@ (800fd00 <tcp_listen_closed+0x68>)
 800fcb0:	f009 fe18 	bl	80198e4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d006      	beq.n	800fcca <tcp_listen_closed+0x32>
 800fcbc:	4b0e      	ldr	r3, [pc, #56]	@ (800fcf8 <tcp_listen_closed+0x60>)
 800fcbe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800fcc2:	4910      	ldr	r1, [pc, #64]	@ (800fd04 <tcp_listen_closed+0x6c>)
 800fcc4:	480e      	ldr	r0, [pc, #56]	@ (800fd00 <tcp_listen_closed+0x68>)
 800fcc6:	f009 fe0d 	bl	80198e4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fcca:	2301      	movs	r3, #1
 800fccc:	60fb      	str	r3, [r7, #12]
 800fcce:	e00b      	b.n	800fce8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fcd0:	4a0d      	ldr	r2, [pc, #52]	@ (800fd08 <tcp_listen_closed+0x70>)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	6879      	ldr	r1, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff ffb1 	bl	800fc44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d9f0      	bls.n	800fcd0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fcee:	bf00      	nop
 800fcf0:	bf00      	nop
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	0801d5e8 	.word	0x0801d5e8
 800fcfc:	0801d698 	.word	0x0801d698
 800fd00:	0801d62c 	.word	0x0801d62c
 800fd04:	0801d6a4 	.word	0x0801d6a4
 800fd08:	0801f600 	.word	0x0801f600

0800fd0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fd0c:	b5b0      	push	{r4, r5, r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af04      	add	r7, sp, #16
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	460b      	mov	r3, r1
 800fd16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <tcp_close_shutdown+0x20>
 800fd1e:	4b63      	ldr	r3, [pc, #396]	@ (800feac <tcp_close_shutdown+0x1a0>)
 800fd20:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fd24:	4962      	ldr	r1, [pc, #392]	@ (800feb0 <tcp_close_shutdown+0x1a4>)
 800fd26:	4863      	ldr	r0, [pc, #396]	@ (800feb4 <tcp_close_shutdown+0x1a8>)
 800fd28:	f009 fddc 	bl	80198e4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fd2c:	78fb      	ldrb	r3, [r7, #3]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d066      	beq.n	800fe00 <tcp_close_shutdown+0xf4>
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	7d1b      	ldrb	r3, [r3, #20]
 800fd36:	2b04      	cmp	r3, #4
 800fd38:	d003      	beq.n	800fd42 <tcp_close_shutdown+0x36>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	7d1b      	ldrb	r3, [r3, #20]
 800fd3e:	2b07      	cmp	r3, #7
 800fd40:	d15e      	bne.n	800fe00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d104      	bne.n	800fd54 <tcp_close_shutdown+0x48>
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fd52:	d055      	beq.n	800fe00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	8b5b      	ldrh	r3, [r3, #26]
 800fd58:	f003 0310 	and.w	r3, r3, #16
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d106      	bne.n	800fd6e <tcp_close_shutdown+0x62>
 800fd60:	4b52      	ldr	r3, [pc, #328]	@ (800feac <tcp_close_shutdown+0x1a0>)
 800fd62:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fd66:	4954      	ldr	r1, [pc, #336]	@ (800feb8 <tcp_close_shutdown+0x1ac>)
 800fd68:	4852      	ldr	r0, [pc, #328]	@ (800feb4 <tcp_close_shutdown+0x1a8>)
 800fd6a:	f009 fdbb 	bl	80198e4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fd76:	687d      	ldr	r5, [r7, #4]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	8ad2      	ldrh	r2, [r2, #22]
 800fd80:	6879      	ldr	r1, [r7, #4]
 800fd82:	8b09      	ldrh	r1, [r1, #24]
 800fd84:	9102      	str	r1, [sp, #8]
 800fd86:	9201      	str	r2, [sp, #4]
 800fd88:	9300      	str	r3, [sp, #0]
 800fd8a:	462b      	mov	r3, r5
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4601      	mov	r1, r0
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f005 fdb7 	bl	8015904 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f001 fb9a 	bl	80114d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fd9c:	4b47      	ldr	r3, [pc, #284]	@ (800febc <tcp_close_shutdown+0x1b0>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	687a      	ldr	r2, [r7, #4]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d105      	bne.n	800fdb2 <tcp_close_shutdown+0xa6>
 800fda6:	4b45      	ldr	r3, [pc, #276]	@ (800febc <tcp_close_shutdown+0x1b0>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	4a43      	ldr	r2, [pc, #268]	@ (800febc <tcp_close_shutdown+0x1b0>)
 800fdae:	6013      	str	r3, [r2, #0]
 800fdb0:	e013      	b.n	800fdda <tcp_close_shutdown+0xce>
 800fdb2:	4b42      	ldr	r3, [pc, #264]	@ (800febc <tcp_close_shutdown+0x1b0>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	60fb      	str	r3, [r7, #12]
 800fdb8:	e00c      	b.n	800fdd4 <tcp_close_shutdown+0xc8>
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d104      	bne.n	800fdce <tcp_close_shutdown+0xc2>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68da      	ldr	r2, [r3, #12]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	60da      	str	r2, [r3, #12]
 800fdcc:	e005      	b.n	800fdda <tcp_close_shutdown+0xce>
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	60fb      	str	r3, [r7, #12]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1ef      	bne.n	800fdba <tcp_close_shutdown+0xae>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2200      	movs	r2, #0
 800fdde:	60da      	str	r2, [r3, #12]
 800fde0:	4b37      	ldr	r3, [pc, #220]	@ (800fec0 <tcp_close_shutdown+0x1b4>)
 800fde2:	2201      	movs	r2, #1
 800fde4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fde6:	4b37      	ldr	r3, [pc, #220]	@ (800fec4 <tcp_close_shutdown+0x1b8>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d102      	bne.n	800fdf6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fdf0:	f004 f82e 	bl	8013e50 <tcp_trigger_input_pcb_close>
 800fdf4:	e002      	b.n	800fdfc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f7ff fed6 	bl	800fba8 <tcp_free>
      }
      return ERR_OK;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	e050      	b.n	800fea2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	7d1b      	ldrb	r3, [r3, #20]
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	d03b      	beq.n	800fe80 <tcp_close_shutdown+0x174>
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	dc44      	bgt.n	800fe96 <tcp_close_shutdown+0x18a>
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <tcp_close_shutdown+0x10a>
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d02a      	beq.n	800fe6a <tcp_close_shutdown+0x15e>
 800fe14:	e03f      	b.n	800fe96 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	8adb      	ldrh	r3, [r3, #22]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d021      	beq.n	800fe62 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe1e:	4b2a      	ldr	r3, [pc, #168]	@ (800fec8 <tcp_close_shutdown+0x1bc>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d105      	bne.n	800fe34 <tcp_close_shutdown+0x128>
 800fe28:	4b27      	ldr	r3, [pc, #156]	@ (800fec8 <tcp_close_shutdown+0x1bc>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	4a26      	ldr	r2, [pc, #152]	@ (800fec8 <tcp_close_shutdown+0x1bc>)
 800fe30:	6013      	str	r3, [r2, #0]
 800fe32:	e013      	b.n	800fe5c <tcp_close_shutdown+0x150>
 800fe34:	4b24      	ldr	r3, [pc, #144]	@ (800fec8 <tcp_close_shutdown+0x1bc>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	60bb      	str	r3, [r7, #8]
 800fe3a:	e00c      	b.n	800fe56 <tcp_close_shutdown+0x14a>
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d104      	bne.n	800fe50 <tcp_close_shutdown+0x144>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68da      	ldr	r2, [r3, #12]
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	60da      	str	r2, [r3, #12]
 800fe4e:	e005      	b.n	800fe5c <tcp_close_shutdown+0x150>
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	60bb      	str	r3, [r7, #8]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1ef      	bne.n	800fe3c <tcp_close_shutdown+0x130>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7ff fea0 	bl	800fba8 <tcp_free>
      break;
 800fe68:	e01a      	b.n	800fea0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7ff ff14 	bl	800fc98 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	4816      	ldr	r0, [pc, #88]	@ (800fecc <tcp_close_shutdown+0x1c0>)
 800fe74:	f001 fb7c 	bl	8011570 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f7ff feb1 	bl	800fbe0 <tcp_free_listen>
      break;
 800fe7e:	e00f      	b.n	800fea0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe80:	6879      	ldr	r1, [r7, #4]
 800fe82:	480e      	ldr	r0, [pc, #56]	@ (800febc <tcp_close_shutdown+0x1b0>)
 800fe84:	f001 fb74 	bl	8011570 <tcp_pcb_remove>
 800fe88:	4b0d      	ldr	r3, [pc, #52]	@ (800fec0 <tcp_close_shutdown+0x1b4>)
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fe8a 	bl	800fba8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fe94:	e004      	b.n	800fea0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f81a 	bl	800fed0 <tcp_close_shutdown_fin>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	e000      	b.n	800fea2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3710      	adds	r7, #16
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bdb0      	pop	{r4, r5, r7, pc}
 800feaa:	bf00      	nop
 800feac:	0801d5e8 	.word	0x0801d5e8
 800feb0:	0801d6bc 	.word	0x0801d6bc
 800feb4:	0801d62c 	.word	0x0801d62c
 800feb8:	0801d6dc 	.word	0x0801d6dc
 800febc:	20011d24 	.word	0x20011d24
 800fec0:	20011d2c 	.word	0x20011d2c
 800fec4:	20011d64 	.word	0x20011d64
 800fec8:	20011d1c 	.word	0x20011d1c
 800fecc:	20011d20 	.word	0x20011d20

0800fed0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_close_shutdown_fin+0x1c>
 800fede:	4b2e      	ldr	r3, [pc, #184]	@ (800ff98 <tcp_close_shutdown_fin+0xc8>)
 800fee0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fee4:	492d      	ldr	r1, [pc, #180]	@ (800ff9c <tcp_close_shutdown_fin+0xcc>)
 800fee6:	482e      	ldr	r0, [pc, #184]	@ (800ffa0 <tcp_close_shutdown_fin+0xd0>)
 800fee8:	f009 fcfc 	bl	80198e4 <iprintf>

  switch (pcb->state) {
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	7d1b      	ldrb	r3, [r3, #20]
 800fef0:	2b07      	cmp	r3, #7
 800fef2:	d020      	beq.n	800ff36 <tcp_close_shutdown_fin+0x66>
 800fef4:	2b07      	cmp	r3, #7
 800fef6:	dc2b      	bgt.n	800ff50 <tcp_close_shutdown_fin+0x80>
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d002      	beq.n	800ff02 <tcp_close_shutdown_fin+0x32>
 800fefc:	2b04      	cmp	r3, #4
 800fefe:	d00d      	beq.n	800ff1c <tcp_close_shutdown_fin+0x4c>
 800ff00:	e026      	b.n	800ff50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f004 fe0c 	bl	8014b20 <tcp_send_fin>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d11f      	bne.n	800ff54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2205      	movs	r2, #5
 800ff18:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff1a:	e01b      	b.n	800ff54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f004 fdff 	bl	8014b20 <tcp_send_fin>
 800ff22:	4603      	mov	r3, r0
 800ff24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d114      	bne.n	800ff58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2205      	movs	r2, #5
 800ff32:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff34:	e010      	b.n	800ff58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f004 fdf2 	bl	8014b20 <tcp_send_fin>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ff40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d109      	bne.n	800ff5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2209      	movs	r2, #9
 800ff4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff4e:	e005      	b.n	800ff5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e01c      	b.n	800ff8e <tcp_close_shutdown_fin+0xbe>
      break;
 800ff54:	bf00      	nop
 800ff56:	e002      	b.n	800ff5e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff58:	bf00      	nop
 800ff5a:	e000      	b.n	800ff5e <tcp_close_shutdown_fin+0x8e>
      break;
 800ff5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ff5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d103      	bne.n	800ff6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f004 ff18 	bl	8014d9c <tcp_output>
 800ff6c:	e00d      	b.n	800ff8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ff6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff76:	d108      	bne.n	800ff8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8b5b      	ldrh	r3, [r3, #26]
 800ff7c:	f043 0308 	orr.w	r3, r3, #8
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ff86:	2300      	movs	r3, #0
 800ff88:	e001      	b.n	800ff8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ff8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3710      	adds	r7, #16
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop
 800ff98:	0801d5e8 	.word	0x0801d5e8
 800ff9c:	0801d698 	.word	0x0801d698
 800ffa0:	0801d62c 	.word	0x0801d62c

0800ffa4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d109      	bne.n	800ffc6 <tcp_close+0x22>
 800ffb2:	4b0f      	ldr	r3, [pc, #60]	@ (800fff0 <tcp_close+0x4c>)
 800ffb4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800ffb8:	490e      	ldr	r1, [pc, #56]	@ (800fff4 <tcp_close+0x50>)
 800ffba:	480f      	ldr	r0, [pc, #60]	@ (800fff8 <tcp_close+0x54>)
 800ffbc:	f009 fc92 	bl	80198e4 <iprintf>
 800ffc0:	f06f 030f 	mvn.w	r3, #15
 800ffc4:	e00f      	b.n	800ffe6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	7d1b      	ldrb	r3, [r3, #20]
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d006      	beq.n	800ffdc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8b5b      	ldrh	r3, [r3, #26]
 800ffd2:	f043 0310 	orr.w	r3, r3, #16
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ffdc:	2101      	movs	r1, #1
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7ff fe94 	bl	800fd0c <tcp_close_shutdown>
 800ffe4:	4603      	mov	r3, r0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	0801d5e8 	.word	0x0801d5e8
 800fff4:	0801d6f8 	.word	0x0801d6f8
 800fff8:	0801d62c 	.word	0x0801d62c

0800fffc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d109      	bne.n	8010022 <tcp_shutdown+0x26>
 801000e:	4b26      	ldr	r3, [pc, #152]	@ (80100a8 <tcp_shutdown+0xac>)
 8010010:	f240 2207 	movw	r2, #519	@ 0x207
 8010014:	4925      	ldr	r1, [pc, #148]	@ (80100ac <tcp_shutdown+0xb0>)
 8010016:	4826      	ldr	r0, [pc, #152]	@ (80100b0 <tcp_shutdown+0xb4>)
 8010018:	f009 fc64 	bl	80198e4 <iprintf>
 801001c:	f06f 030f 	mvn.w	r3, #15
 8010020:	e03d      	b.n	801009e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	2b01      	cmp	r3, #1
 8010028:	d102      	bne.n	8010030 <tcp_shutdown+0x34>
    return ERR_CONN;
 801002a:	f06f 030a 	mvn.w	r3, #10
 801002e:	e036      	b.n	801009e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d01b      	beq.n	801006e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	8b5b      	ldrh	r3, [r3, #26]
 801003a:	f043 0310 	orr.w	r3, r3, #16
 801003e:	b29a      	uxth	r2, r3
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d005      	beq.n	8010056 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801004a:	2101      	movs	r1, #1
 801004c:	68f8      	ldr	r0, [r7, #12]
 801004e:	f7ff fe5d 	bl	800fd0c <tcp_close_shutdown>
 8010052:	4603      	mov	r3, r0
 8010054:	e023      	b.n	801009e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801005a:	2b00      	cmp	r3, #0
 801005c:	d007      	beq.n	801006e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff faf4 	bl	800f650 <pbuf_free>
      pcb->refused_data = NULL;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d013      	beq.n	801009c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	7d1b      	ldrb	r3, [r3, #20]
 8010078:	2b04      	cmp	r3, #4
 801007a:	dc02      	bgt.n	8010082 <tcp_shutdown+0x86>
 801007c:	2b03      	cmp	r3, #3
 801007e:	da02      	bge.n	8010086 <tcp_shutdown+0x8a>
 8010080:	e009      	b.n	8010096 <tcp_shutdown+0x9a>
 8010082:	2b07      	cmp	r3, #7
 8010084:	d107      	bne.n	8010096 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	b2db      	uxtb	r3, r3
 801008a:	4619      	mov	r1, r3
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7ff fe3d 	bl	800fd0c <tcp_close_shutdown>
 8010092:	4603      	mov	r3, r0
 8010094:	e003      	b.n	801009e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8010096:	f06f 030a 	mvn.w	r3, #10
 801009a:	e000      	b.n	801009e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop
 80100a8:	0801d5e8 	.word	0x0801d5e8
 80100ac:	0801d710 	.word	0x0801d710
 80100b0:	0801d62c 	.word	0x0801d62c

080100b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b08e      	sub	sp, #56	@ 0x38
 80100b8:	af04      	add	r7, sp, #16
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d107      	bne.n	80100d4 <tcp_abandon+0x20>
 80100c4:	4b52      	ldr	r3, [pc, #328]	@ (8010210 <tcp_abandon+0x15c>)
 80100c6:	f240 223d 	movw	r2, #573	@ 0x23d
 80100ca:	4952      	ldr	r1, [pc, #328]	@ (8010214 <tcp_abandon+0x160>)
 80100cc:	4852      	ldr	r0, [pc, #328]	@ (8010218 <tcp_abandon+0x164>)
 80100ce:	f009 fc09 	bl	80198e4 <iprintf>
 80100d2:	e099      	b.n	8010208 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	7d1b      	ldrb	r3, [r3, #20]
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d106      	bne.n	80100ea <tcp_abandon+0x36>
 80100dc:	4b4c      	ldr	r3, [pc, #304]	@ (8010210 <tcp_abandon+0x15c>)
 80100de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80100e2:	494e      	ldr	r1, [pc, #312]	@ (801021c <tcp_abandon+0x168>)
 80100e4:	484c      	ldr	r0, [pc, #304]	@ (8010218 <tcp_abandon+0x164>)
 80100e6:	f009 fbfd 	bl	80198e4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7d1b      	ldrb	r3, [r3, #20]
 80100ee:	2b0a      	cmp	r3, #10
 80100f0:	d107      	bne.n	8010102 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80100f2:	6879      	ldr	r1, [r7, #4]
 80100f4:	484a      	ldr	r0, [pc, #296]	@ (8010220 <tcp_abandon+0x16c>)
 80100f6:	f001 fa3b 	bl	8011570 <tcp_pcb_remove>
    tcp_free(pcb);
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff fd54 	bl	800fba8 <tcp_free>
 8010100:	e082      	b.n	8010208 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010114:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801011c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	7d1b      	ldrb	r3, [r3, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d126      	bne.n	801017a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	8adb      	ldrh	r3, [r3, #22]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d02e      	beq.n	8010192 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010134:	4b3b      	ldr	r3, [pc, #236]	@ (8010224 <tcp_abandon+0x170>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	429a      	cmp	r2, r3
 801013c:	d105      	bne.n	801014a <tcp_abandon+0x96>
 801013e:	4b39      	ldr	r3, [pc, #228]	@ (8010224 <tcp_abandon+0x170>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68db      	ldr	r3, [r3, #12]
 8010144:	4a37      	ldr	r2, [pc, #220]	@ (8010224 <tcp_abandon+0x170>)
 8010146:	6013      	str	r3, [r2, #0]
 8010148:	e013      	b.n	8010172 <tcp_abandon+0xbe>
 801014a:	4b36      	ldr	r3, [pc, #216]	@ (8010224 <tcp_abandon+0x170>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	61fb      	str	r3, [r7, #28]
 8010150:	e00c      	b.n	801016c <tcp_abandon+0xb8>
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d104      	bne.n	8010166 <tcp_abandon+0xb2>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	68da      	ldr	r2, [r3, #12]
 8010160:	69fb      	ldr	r3, [r7, #28]
 8010162:	60da      	str	r2, [r3, #12]
 8010164:	e005      	b.n	8010172 <tcp_abandon+0xbe>
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	61fb      	str	r3, [r7, #28]
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1ef      	bne.n	8010152 <tcp_abandon+0x9e>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	60da      	str	r2, [r3, #12]
 8010178:	e00b      	b.n	8010192 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	8adb      	ldrh	r3, [r3, #22]
 8010182:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010184:	6879      	ldr	r1, [r7, #4]
 8010186:	4828      	ldr	r0, [pc, #160]	@ (8010228 <tcp_abandon+0x174>)
 8010188:	f001 f9f2 	bl	8011570 <tcp_pcb_remove>
 801018c:	4b27      	ldr	r3, [pc, #156]	@ (801022c <tcp_abandon+0x178>)
 801018e:	2201      	movs	r2, #1
 8010190:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010196:	2b00      	cmp	r3, #0
 8010198:	d004      	beq.n	80101a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 fec6 	bl	8010f30 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d004      	beq.n	80101b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 febd 	bl	8010f30 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d004      	beq.n	80101c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101c2:	4618      	mov	r0, r3
 80101c4:	f000 feb4 	bl	8010f30 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80101c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80101ce:	6879      	ldr	r1, [r7, #4]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3304      	adds	r3, #4
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	8b12      	ldrh	r2, [r2, #24]
 80101d8:	9202      	str	r2, [sp, #8]
 80101da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80101dc:	9201      	str	r2, [sp, #4]
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	460b      	mov	r3, r1
 80101e2:	697a      	ldr	r2, [r7, #20]
 80101e4:	69b9      	ldr	r1, [r7, #24]
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f005 fb8c 	bl	8015904 <tcp_rst>
    }
    last_state = pcb->state;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff fcd8 	bl	800fba8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d004      	beq.n	8010208 <tcp_abandon+0x154>
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	f06f 010c 	mvn.w	r1, #12
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	4798      	blx	r3
  }
}
 8010208:	3728      	adds	r7, #40	@ 0x28
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	0801d5e8 	.word	0x0801d5e8
 8010214:	0801d72c 	.word	0x0801d72c
 8010218:	0801d62c 	.word	0x0801d62c
 801021c:	0801d748 	.word	0x0801d748
 8010220:	20011d28 	.word	0x20011d28
 8010224:	20011d1c 	.word	0x20011d1c
 8010228:	20011d24 	.word	0x20011d24
 801022c:	20011d2c 	.word	0x20011d2c

08010230 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010238:	2101      	movs	r1, #1
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f7ff ff3a 	bl	80100b4 <tcp_abandon>
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b088      	sub	sp, #32
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	4613      	mov	r3, r2
 8010254:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010256:	2304      	movs	r3, #4
 8010258:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d101      	bne.n	8010264 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010260:	4b3e      	ldr	r3, [pc, #248]	@ (801035c <tcp_bind+0x114>)
 8010262:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d109      	bne.n	801027e <tcp_bind+0x36>
 801026a:	4b3d      	ldr	r3, [pc, #244]	@ (8010360 <tcp_bind+0x118>)
 801026c:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8010270:	493c      	ldr	r1, [pc, #240]	@ (8010364 <tcp_bind+0x11c>)
 8010272:	483d      	ldr	r0, [pc, #244]	@ (8010368 <tcp_bind+0x120>)
 8010274:	f009 fb36 	bl	80198e4 <iprintf>
 8010278:	f06f 030f 	mvn.w	r3, #15
 801027c:	e06a      	b.n	8010354 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	7d1b      	ldrb	r3, [r3, #20]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <tcp_bind+0x52>
 8010286:	4b36      	ldr	r3, [pc, #216]	@ (8010360 <tcp_bind+0x118>)
 8010288:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801028c:	4937      	ldr	r1, [pc, #220]	@ (801036c <tcp_bind+0x124>)
 801028e:	4836      	ldr	r0, [pc, #216]	@ (8010368 <tcp_bind+0x120>)
 8010290:	f009 fb28 	bl	80198e4 <iprintf>
 8010294:	f06f 0305 	mvn.w	r3, #5
 8010298:	e05c      	b.n	8010354 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801029a:	88fb      	ldrh	r3, [r7, #6]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d109      	bne.n	80102b4 <tcp_bind+0x6c>
    port = tcp_new_port();
 80102a0:	f000 f9de 	bl	8010660 <tcp_new_port>
 80102a4:	4603      	mov	r3, r0
 80102a6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80102a8:	88fb      	ldrh	r3, [r7, #6]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d135      	bne.n	801031a <tcp_bind+0xd2>
      return ERR_BUF;
 80102ae:	f06f 0301 	mvn.w	r3, #1
 80102b2:	e04f      	b.n	8010354 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80102b4:	2300      	movs	r3, #0
 80102b6:	61fb      	str	r3, [r7, #28]
 80102b8:	e02b      	b.n	8010312 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80102ba:	4a2d      	ldr	r2, [pc, #180]	@ (8010370 <tcp_bind+0x128>)
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	61bb      	str	r3, [r7, #24]
 80102c6:	e01e      	b.n	8010306 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	8adb      	ldrh	r3, [r3, #22]
 80102cc:	88fa      	ldrh	r2, [r7, #6]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d116      	bne.n	8010300 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80102d2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d010      	beq.n	80102fa <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00c      	beq.n	80102fa <tcp_bind+0xb2>
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d009      	beq.n	80102fa <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d005      	beq.n	80102fa <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d102      	bne.n	8010300 <tcp_bind+0xb8>
              return ERR_USE;
 80102fa:	f06f 0307 	mvn.w	r3, #7
 80102fe:	e029      	b.n	8010354 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	61bb      	str	r3, [r7, #24]
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1dd      	bne.n	80102c8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	3301      	adds	r3, #1
 8010310:	61fb      	str	r3, [r7, #28]
 8010312:	69fa      	ldr	r2, [r7, #28]
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	429a      	cmp	r2, r3
 8010318:	dbcf      	blt.n	80102ba <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00c      	beq.n	801033a <tcp_bind+0xf2>
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d008      	beq.n	801033a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <tcp_bind+0xec>
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	e000      	b.n	8010336 <tcp_bind+0xee>
 8010334:	2300      	movs	r3, #0
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	88fa      	ldrh	r2, [r7, #6]
 801033e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010340:	4b0c      	ldr	r3, [pc, #48]	@ (8010374 <tcp_bind+0x12c>)
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	60da      	str	r2, [r3, #12]
 8010348:	4a0a      	ldr	r2, [pc, #40]	@ (8010374 <tcp_bind+0x12c>)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	f005 fc9b 	bl	8015c88 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010352:	2300      	movs	r3, #0
}
 8010354:	4618      	mov	r0, r3
 8010356:	3720      	adds	r7, #32
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	0801f628 	.word	0x0801f628
 8010360:	0801d5e8 	.word	0x0801d5e8
 8010364:	0801d77c 	.word	0x0801d77c
 8010368:	0801d62c 	.word	0x0801d62c
 801036c:	0801d794 	.word	0x0801d794
 8010370:	0801f600 	.word	0x0801f600
 8010374:	20011d1c 	.word	0x20011d1c

08010378 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	4613      	mov	r3, r2
 8010384:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <tcp_accept_null+0x22>
 801038c:	4b07      	ldr	r3, [pc, #28]	@ (80103ac <tcp_accept_null+0x34>)
 801038e:	f240 320f 	movw	r2, #783	@ 0x30f
 8010392:	4907      	ldr	r1, [pc, #28]	@ (80103b0 <tcp_accept_null+0x38>)
 8010394:	4807      	ldr	r0, [pc, #28]	@ (80103b4 <tcp_accept_null+0x3c>)
 8010396:	f009 faa5 	bl	80198e4 <iprintf>

  tcp_abort(pcb);
 801039a:	68b8      	ldr	r0, [r7, #8]
 801039c:	f7ff ff48 	bl	8010230 <tcp_abort>

  return ERR_ABRT;
 80103a0:	f06f 030c 	mvn.w	r3, #12
}
 80103a4:	4618      	mov	r0, r3
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}
 80103ac:	0801d5e8 	.word	0x0801d5e8
 80103b0:	0801d7bc 	.word	0x0801d7bc
 80103b4:	0801d62c 	.word	0x0801d62c

080103b8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b088      	sub	sp, #32
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	460b      	mov	r3, r1
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80103c6:	2300      	movs	r3, #0
 80103c8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d109      	bne.n	80103e4 <tcp_listen_with_backlog_and_err+0x2c>
 80103d0:	4b47      	ldr	r3, [pc, #284]	@ (80104f0 <tcp_listen_with_backlog_and_err+0x138>)
 80103d2:	f240 3259 	movw	r2, #857	@ 0x359
 80103d6:	4947      	ldr	r1, [pc, #284]	@ (80104f4 <tcp_listen_with_backlog_and_err+0x13c>)
 80103d8:	4847      	ldr	r0, [pc, #284]	@ (80104f8 <tcp_listen_with_backlog_and_err+0x140>)
 80103da:	f009 fa83 	bl	80198e4 <iprintf>
 80103de:	23f0      	movs	r3, #240	@ 0xf0
 80103e0:	76fb      	strb	r3, [r7, #27]
 80103e2:	e079      	b.n	80104d8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	7d1b      	ldrb	r3, [r3, #20]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d009      	beq.n	8010400 <tcp_listen_with_backlog_and_err+0x48>
 80103ec:	4b40      	ldr	r3, [pc, #256]	@ (80104f0 <tcp_listen_with_backlog_and_err+0x138>)
 80103ee:	f240 325a 	movw	r2, #858	@ 0x35a
 80103f2:	4942      	ldr	r1, [pc, #264]	@ (80104fc <tcp_listen_with_backlog_and_err+0x144>)
 80103f4:	4840      	ldr	r0, [pc, #256]	@ (80104f8 <tcp_listen_with_backlog_and_err+0x140>)
 80103f6:	f009 fa75 	bl	80198e4 <iprintf>
 80103fa:	23f1      	movs	r3, #241	@ 0xf1
 80103fc:	76fb      	strb	r3, [r7, #27]
 80103fe:	e06b      	b.n	80104d8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	7d1b      	ldrb	r3, [r3, #20]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d104      	bne.n	8010412 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801040c:	23f7      	movs	r3, #247	@ 0xf7
 801040e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010410:	e062      	b.n	80104d8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010412:	2002      	movs	r0, #2
 8010414:	f7fe fa26 	bl	800e864 <memp_malloc>
 8010418:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8010420:	23ff      	movs	r3, #255	@ 0xff
 8010422:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010424:	e058      	b.n	80104d8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	691a      	ldr	r2, [r3, #16]
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	8ada      	ldrh	r2, [r3, #22]
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	2201      	movs	r2, #1
 801043a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	7d5a      	ldrb	r2, [r3, #21]
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	7a5a      	ldrb	r2, [r3, #9]
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	2200      	movs	r2, #0
 8010450:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	7ada      	ldrb	r2, [r3, #11]
 8010456:	69fb      	ldr	r3, [r7, #28]
 8010458:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	7a9a      	ldrb	r2, [r3, #10]
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	8adb      	ldrh	r3, [r3, #22]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d021      	beq.n	80104b6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010472:	4b23      	ldr	r3, [pc, #140]	@ (8010500 <tcp_listen_with_backlog_and_err+0x148>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	429a      	cmp	r2, r3
 801047a:	d105      	bne.n	8010488 <tcp_listen_with_backlog_and_err+0xd0>
 801047c:	4b20      	ldr	r3, [pc, #128]	@ (8010500 <tcp_listen_with_backlog_and_err+0x148>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	4a1f      	ldr	r2, [pc, #124]	@ (8010500 <tcp_listen_with_backlog_and_err+0x148>)
 8010484:	6013      	str	r3, [r2, #0]
 8010486:	e013      	b.n	80104b0 <tcp_listen_with_backlog_and_err+0xf8>
 8010488:	4b1d      	ldr	r3, [pc, #116]	@ (8010500 <tcp_listen_with_backlog_and_err+0x148>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	617b      	str	r3, [r7, #20]
 801048e:	e00c      	b.n	80104aa <tcp_listen_with_backlog_and_err+0xf2>
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	68fa      	ldr	r2, [r7, #12]
 8010496:	429a      	cmp	r2, r3
 8010498:	d104      	bne.n	80104a4 <tcp_listen_with_backlog_and_err+0xec>
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	68da      	ldr	r2, [r3, #12]
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	60da      	str	r2, [r3, #12]
 80104a2:	e005      	b.n	80104b0 <tcp_listen_with_backlog_and_err+0xf8>
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	617b      	str	r3, [r7, #20]
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1ef      	bne.n	8010490 <tcp_listen_with_backlog_and_err+0xd8>
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2200      	movs	r2, #0
 80104b4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f7ff fb76 	bl	800fba8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	4a11      	ldr	r2, [pc, #68]	@ (8010504 <tcp_listen_with_backlog_and_err+0x14c>)
 80104c0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80104c2:	4b11      	ldr	r3, [pc, #68]	@ (8010508 <tcp_listen_with_backlog_and_err+0x150>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	60da      	str	r2, [r3, #12]
 80104ca:	4a0f      	ldr	r2, [pc, #60]	@ (8010508 <tcp_listen_with_backlog_and_err+0x150>)
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	6013      	str	r3, [r2, #0]
 80104d0:	f005 fbda 	bl	8015c88 <tcp_timer_needed>
  res = ERR_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d002      	beq.n	80104e4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7efa      	ldrb	r2, [r7, #27]
 80104e2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80104e4:	69fb      	ldr	r3, [r7, #28]
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3720      	adds	r7, #32
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	0801d5e8 	.word	0x0801d5e8
 80104f4:	0801d7dc 	.word	0x0801d7dc
 80104f8:	0801d62c 	.word	0x0801d62c
 80104fc:	0801d80c 	.word	0x0801d80c
 8010500:	20011d1c 	.word	0x20011d1c
 8010504:	08010379 	.word	0x08010379
 8010508:	20011d20 	.word	0x20011d20

0801050c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d106      	bne.n	8010528 <tcp_update_rcv_ann_wnd+0x1c>
 801051a:	4b25      	ldr	r3, [pc, #148]	@ (80105b0 <tcp_update_rcv_ann_wnd+0xa4>)
 801051c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010520:	4924      	ldr	r1, [pc, #144]	@ (80105b4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010522:	4825      	ldr	r0, [pc, #148]	@ (80105b8 <tcp_update_rcv_ann_wnd+0xac>)
 8010524:	f009 f9de 	bl	80198e4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010530:	4413      	add	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801053c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8010540:	bf28      	it	cs
 8010542:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8010546:	b292      	uxth	r2, r2
 8010548:	4413      	add	r3, r2
 801054a:	68fa      	ldr	r2, [r7, #12]
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	2b00      	cmp	r3, #0
 8010550:	db08      	blt.n	8010564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	e020      	b.n	80105a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	2b00      	cmp	r3, #0
 8010570:	dd03      	ble.n	801057a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010578:	e014      	b.n	80105a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010582:	1ad3      	subs	r3, r2, r3
 8010584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801058c:	d306      	bcc.n	801059c <tcp_update_rcv_ann_wnd+0x90>
 801058e:	4b08      	ldr	r3, [pc, #32]	@ (80105b0 <tcp_update_rcv_ann_wnd+0xa4>)
 8010590:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8010594:	4909      	ldr	r1, [pc, #36]	@ (80105bc <tcp_update_rcv_ann_wnd+0xb0>)
 8010596:	4808      	ldr	r0, [pc, #32]	@ (80105b8 <tcp_update_rcv_ann_wnd+0xac>)
 8010598:	f009 f9a4 	bl	80198e4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	b29a      	uxth	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80105a4:	2300      	movs	r3, #0
  }
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	0801d5e8 	.word	0x0801d5e8
 80105b4:	0801d844 	.word	0x0801d844
 80105b8:	0801d62c 	.word	0x0801d62c
 80105bc:	0801d868 	.word	0x0801d868

080105c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	460b      	mov	r3, r1
 80105ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d107      	bne.n	80105e2 <tcp_recved+0x22>
 80105d2:	4b1f      	ldr	r3, [pc, #124]	@ (8010650 <tcp_recved+0x90>)
 80105d4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80105d8:	491e      	ldr	r1, [pc, #120]	@ (8010654 <tcp_recved+0x94>)
 80105da:	481f      	ldr	r0, [pc, #124]	@ (8010658 <tcp_recved+0x98>)
 80105dc:	f009 f982 	bl	80198e4 <iprintf>
 80105e0:	e032      	b.n	8010648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	7d1b      	ldrb	r3, [r3, #20]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d106      	bne.n	80105f8 <tcp_recved+0x38>
 80105ea:	4b19      	ldr	r3, [pc, #100]	@ (8010650 <tcp_recved+0x90>)
 80105ec:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80105f0:	491a      	ldr	r1, [pc, #104]	@ (801065c <tcp_recved+0x9c>)
 80105f2:	4819      	ldr	r0, [pc, #100]	@ (8010658 <tcp_recved+0x98>)
 80105f4:	f009 f976 	bl	80198e4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80105fc:	887b      	ldrh	r3, [r7, #2]
 80105fe:	4413      	add	r3, r2
 8010600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010602:	89fb      	ldrh	r3, [r7, #14]
 8010604:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010608:	d804      	bhi.n	8010614 <tcp_recved+0x54>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801060e:	89fa      	ldrh	r2, [r7, #14]
 8010610:	429a      	cmp	r2, r3
 8010612:	d204      	bcs.n	801061e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801061a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801061c:	e002      	b.n	8010624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	89fa      	ldrh	r2, [r7, #14]
 8010622:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7ff ff71 	bl	801050c <tcp_update_rcv_ann_wnd>
 801062a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010632:	d309      	bcc.n	8010648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	8b5b      	ldrh	r3, [r3, #26]
 8010638:	f043 0302 	orr.w	r3, r3, #2
 801063c:	b29a      	uxth	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f004 fbaa 	bl	8014d9c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010648:	3710      	adds	r7, #16
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	0801d5e8 	.word	0x0801d5e8
 8010654:	0801d884 	.word	0x0801d884
 8010658:	0801d62c 	.word	0x0801d62c
 801065c:	0801d89c 	.word	0x0801d89c

08010660 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801066a:	4b1e      	ldr	r3, [pc, #120]	@ (80106e4 <tcp_new_port+0x84>)
 801066c:	881b      	ldrh	r3, [r3, #0]
 801066e:	3301      	adds	r3, #1
 8010670:	b29a      	uxth	r2, r3
 8010672:	4b1c      	ldr	r3, [pc, #112]	@ (80106e4 <tcp_new_port+0x84>)
 8010674:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010676:	4b1b      	ldr	r3, [pc, #108]	@ (80106e4 <tcp_new_port+0x84>)
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801067e:	4293      	cmp	r3, r2
 8010680:	d103      	bne.n	801068a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010682:	4b18      	ldr	r3, [pc, #96]	@ (80106e4 <tcp_new_port+0x84>)
 8010684:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010688:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801068a:	2300      	movs	r3, #0
 801068c:	71fb      	strb	r3, [r7, #7]
 801068e:	e01e      	b.n	80106ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010690:	79fb      	ldrb	r3, [r7, #7]
 8010692:	4a15      	ldr	r2, [pc, #84]	@ (80106e8 <tcp_new_port+0x88>)
 8010694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	603b      	str	r3, [r7, #0]
 801069c:	e011      	b.n	80106c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	8ada      	ldrh	r2, [r3, #22]
 80106a2:	4b10      	ldr	r3, [pc, #64]	@ (80106e4 <tcp_new_port+0x84>)
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d108      	bne.n	80106bc <tcp_new_port+0x5c>
        n++;
 80106aa:	88bb      	ldrh	r3, [r7, #4]
 80106ac:	3301      	adds	r3, #1
 80106ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80106b0:	88bb      	ldrh	r3, [r7, #4]
 80106b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80106b6:	d3d8      	bcc.n	801066a <tcp_new_port+0xa>
          return 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	e00d      	b.n	80106d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	603b      	str	r3, [r7, #0]
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d1ea      	bne.n	801069e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80106c8:	79fb      	ldrb	r3, [r7, #7]
 80106ca:	3301      	adds	r3, #1
 80106cc:	71fb      	strb	r3, [r7, #7]
 80106ce:	79fb      	ldrb	r3, [r7, #7]
 80106d0:	2b03      	cmp	r3, #3
 80106d2:	d9dd      	bls.n	8010690 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80106d4:	4b03      	ldr	r3, [pc, #12]	@ (80106e4 <tcp_new_port+0x84>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr
 80106e4:	20000010 	.word	0x20000010
 80106e8:	0801f600 	.word	0x0801f600

080106ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80106ec:	b5b0      	push	{r4, r5, r7, lr}
 80106ee:	b090      	sub	sp, #64	@ 0x40
 80106f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80106f8:	4b95      	ldr	r3, [pc, #596]	@ (8010950 <tcp_slowtmr+0x264>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	3301      	adds	r3, #1
 80106fe:	4a94      	ldr	r2, [pc, #592]	@ (8010950 <tcp_slowtmr+0x264>)
 8010700:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010702:	4b94      	ldr	r3, [pc, #592]	@ (8010954 <tcp_slowtmr+0x268>)
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	3301      	adds	r3, #1
 8010708:	b2da      	uxtb	r2, r3
 801070a:	4b92      	ldr	r3, [pc, #584]	@ (8010954 <tcp_slowtmr+0x268>)
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	e000      	b.n	8010712 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010710:	bf00      	nop
  prev = NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8010716:	4b90      	ldr	r3, [pc, #576]	@ (8010958 <tcp_slowtmr+0x26c>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801071c:	e29d      	b.n	8010c5a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010720:	7d1b      	ldrb	r3, [r3, #20]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d106      	bne.n	8010734 <tcp_slowtmr+0x48>
 8010726:	4b8d      	ldr	r3, [pc, #564]	@ (801095c <tcp_slowtmr+0x270>)
 8010728:	f240 42be 	movw	r2, #1214	@ 0x4be
 801072c:	498c      	ldr	r1, [pc, #560]	@ (8010960 <tcp_slowtmr+0x274>)
 801072e:	488d      	ldr	r0, [pc, #564]	@ (8010964 <tcp_slowtmr+0x278>)
 8010730:	f009 f8d8 	bl	80198e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	7d1b      	ldrb	r3, [r3, #20]
 8010738:	2b01      	cmp	r3, #1
 801073a:	d106      	bne.n	801074a <tcp_slowtmr+0x5e>
 801073c:	4b87      	ldr	r3, [pc, #540]	@ (801095c <tcp_slowtmr+0x270>)
 801073e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010742:	4989      	ldr	r1, [pc, #548]	@ (8010968 <tcp_slowtmr+0x27c>)
 8010744:	4887      	ldr	r0, [pc, #540]	@ (8010964 <tcp_slowtmr+0x278>)
 8010746:	f009 f8cd 	bl	80198e4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801074a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	2b0a      	cmp	r3, #10
 8010750:	d106      	bne.n	8010760 <tcp_slowtmr+0x74>
 8010752:	4b82      	ldr	r3, [pc, #520]	@ (801095c <tcp_slowtmr+0x270>)
 8010754:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010758:	4984      	ldr	r1, [pc, #528]	@ (801096c <tcp_slowtmr+0x280>)
 801075a:	4882      	ldr	r0, [pc, #520]	@ (8010964 <tcp_slowtmr+0x278>)
 801075c:	f009 f8c2 	bl	80198e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010762:	7f9a      	ldrb	r2, [r3, #30]
 8010764:	4b7b      	ldr	r3, [pc, #492]	@ (8010954 <tcp_slowtmr+0x268>)
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	429a      	cmp	r2, r3
 801076a:	d105      	bne.n	8010778 <tcp_slowtmr+0x8c>
      prev = pcb;
 801076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010776:	e270      	b.n	8010c5a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010778:	4b76      	ldr	r3, [pc, #472]	@ (8010954 <tcp_slowtmr+0x268>)
 801077a:	781a      	ldrb	r2, [r3, #0]
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010786:	2300      	movs	r3, #0
 8010788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801078c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078e:	7d1b      	ldrb	r3, [r3, #20]
 8010790:	2b02      	cmp	r3, #2
 8010792:	d10a      	bne.n	80107aa <tcp_slowtmr+0xbe>
 8010794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801079a:	2b05      	cmp	r3, #5
 801079c:	d905      	bls.n	80107aa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801079e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107a2:	3301      	adds	r3, #1
 80107a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107a8:	e11e      	b.n	80109e8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80107aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80107b0:	2b0b      	cmp	r3, #11
 80107b2:	d905      	bls.n	80107c0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80107b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107b8:	3301      	adds	r3, #1
 80107ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80107be:	e113      	b.n	80109e8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d075      	beq.n	80108b6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80107ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d006      	beq.n	80107e0 <tcp_slowtmr+0xf4>
 80107d2:	4b62      	ldr	r3, [pc, #392]	@ (801095c <tcp_slowtmr+0x270>)
 80107d4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80107d8:	4965      	ldr	r1, [pc, #404]	@ (8010970 <tcp_slowtmr+0x284>)
 80107da:	4862      	ldr	r0, [pc, #392]	@ (8010964 <tcp_slowtmr+0x278>)
 80107dc:	f009 f882 	bl	80198e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80107e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d106      	bne.n	80107f6 <tcp_slowtmr+0x10a>
 80107e8:	4b5c      	ldr	r3, [pc, #368]	@ (801095c <tcp_slowtmr+0x270>)
 80107ea:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80107ee:	4961      	ldr	r1, [pc, #388]	@ (8010974 <tcp_slowtmr+0x288>)
 80107f0:	485c      	ldr	r0, [pc, #368]	@ (8010964 <tcp_slowtmr+0x278>)
 80107f2:	f009 f877 	bl	80198e4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80107f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107f8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80107fc:	2b0b      	cmp	r3, #11
 80107fe:	d905      	bls.n	801080c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010804:	3301      	adds	r3, #1
 8010806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801080a:	e0ed      	b.n	80109e8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010812:	3b01      	subs	r3, #1
 8010814:	4a58      	ldr	r2, [pc, #352]	@ (8010978 <tcp_slowtmr+0x28c>)
 8010816:	5cd3      	ldrb	r3, [r2, r3]
 8010818:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801081a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801081c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010820:	7c7a      	ldrb	r2, [r7, #17]
 8010822:	429a      	cmp	r2, r3
 8010824:	d907      	bls.n	8010836 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010828:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801082c:	3301      	adds	r3, #1
 801082e:	b2da      	uxtb	r2, r3
 8010830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010832:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010838:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801083c:	7c7a      	ldrb	r2, [r7, #17]
 801083e:	429a      	cmp	r2, r3
 8010840:	f200 80d2 	bhi.w	80109e8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010844:	2301      	movs	r3, #1
 8010846:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801084e:	2b00      	cmp	r3, #0
 8010850:	d108      	bne.n	8010864 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010852:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010854:	f005 f94a 	bl	8015aec <tcp_zero_window_probe>
 8010858:	4603      	mov	r3, r0
 801085a:	2b00      	cmp	r3, #0
 801085c:	d014      	beq.n	8010888 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801085e:	2300      	movs	r3, #0
 8010860:	623b      	str	r3, [r7, #32]
 8010862:	e011      	b.n	8010888 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801086a:	4619      	mov	r1, r3
 801086c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801086e:	f004 f80f 	bl	8014890 <tcp_split_unsent_seg>
 8010872:	4603      	mov	r3, r0
 8010874:	2b00      	cmp	r3, #0
 8010876:	d107      	bne.n	8010888 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010878:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801087a:	f004 fa8f 	bl	8014d9c <tcp_output>
 801087e:	4603      	mov	r3, r0
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010884:	2300      	movs	r3, #0
 8010886:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010888:	6a3b      	ldr	r3, [r7, #32]
 801088a:	2b00      	cmp	r3, #0
 801088c:	f000 80ac 	beq.w	80109e8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010892:	2200      	movs	r2, #0
 8010894:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801089e:	2b06      	cmp	r3, #6
 80108a0:	f200 80a2 	bhi.w	80109e8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80108a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80108aa:	3301      	adds	r3, #1
 80108ac:	b2da      	uxtb	r2, r3
 80108ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80108b4:	e098      	b.n	80109e8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80108b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108bc:	2b00      	cmp	r3, #0
 80108be:	db0f      	blt.n	80108e0 <tcp_slowtmr+0x1f4>
 80108c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108c6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d008      	beq.n	80108e0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	3301      	adds	r3, #1
 80108d8:	b29b      	uxth	r3, r3
 80108da:	b21a      	sxth	r2, r3
 80108dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108de:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80108e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80108e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80108ec:	429a      	cmp	r2, r3
 80108ee:	db7b      	blt.n	80109e8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80108f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80108f2:	f004 fd47 	bl	8015384 <tcp_rexmit_rto_prepare>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d007      	beq.n	801090c <tcp_slowtmr+0x220>
 80108fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010900:	2b00      	cmp	r3, #0
 8010902:	d171      	bne.n	80109e8 <tcp_slowtmr+0x2fc>
 8010904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010908:	2b00      	cmp	r3, #0
 801090a:	d06d      	beq.n	80109e8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801090e:	7d1b      	ldrb	r3, [r3, #20]
 8010910:	2b02      	cmp	r3, #2
 8010912:	d03a      	beq.n	801098a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801091a:	2b0c      	cmp	r3, #12
 801091c:	bf28      	it	cs
 801091e:	230c      	movcs	r3, #12
 8010920:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010928:	10db      	asrs	r3, r3, #3
 801092a:	b21b      	sxth	r3, r3
 801092c:	461a      	mov	r2, r3
 801092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010930:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010934:	4413      	add	r3, r2
 8010936:	7efa      	ldrb	r2, [r7, #27]
 8010938:	4910      	ldr	r1, [pc, #64]	@ (801097c <tcp_slowtmr+0x290>)
 801093a:	5c8a      	ldrb	r2, [r1, r2]
 801093c:	4093      	lsls	r3, r2
 801093e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010946:	4293      	cmp	r3, r2
 8010948:	dc1a      	bgt.n	8010980 <tcp_slowtmr+0x294>
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	b21a      	sxth	r2, r3
 801094e:	e019      	b.n	8010984 <tcp_slowtmr+0x298>
 8010950:	20011d18 	.word	0x20011d18
 8010954:	20011d2e 	.word	0x20011d2e
 8010958:	20011d24 	.word	0x20011d24
 801095c:	0801d5e8 	.word	0x0801d5e8
 8010960:	0801d92c 	.word	0x0801d92c
 8010964:	0801d62c 	.word	0x0801d62c
 8010968:	0801d958 	.word	0x0801d958
 801096c:	0801d984 	.word	0x0801d984
 8010970:	0801d9b4 	.word	0x0801d9b4
 8010974:	0801d9e8 	.word	0x0801d9e8
 8010978:	0801f5f8 	.word	0x0801f5f8
 801097c:	0801f5e8 	.word	0x0801f5e8
 8010980:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010986:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801098a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098c:	2200      	movs	r2, #0
 801098e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010998:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801099c:	4293      	cmp	r3, r2
 801099e:	bf28      	it	cs
 80109a0:	4613      	movcs	r3, r2
 80109a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80109a4:	8a7b      	ldrh	r3, [r7, #18]
 80109a6:	085b      	lsrs	r3, r3, #1
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ac:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80109b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80109b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	b29b      	uxth	r3, r3
 80109be:	429a      	cmp	r2, r3
 80109c0:	d206      	bcs.n	80109d0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80109c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80109d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80109d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80109da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109dc:	2200      	movs	r2, #0
 80109de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80109e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109e4:	f004 fd3e 	bl	8015464 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80109e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ea:	7d1b      	ldrb	r3, [r3, #20]
 80109ec:	2b06      	cmp	r3, #6
 80109ee:	d111      	bne.n	8010a14 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80109f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109f2:	8b5b      	ldrh	r3, [r3, #26]
 80109f4:	f003 0310 	and.w	r3, r3, #16
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00b      	beq.n	8010a14 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80109fc:	4b9c      	ldr	r3, [pc, #624]	@ (8010c70 <tcp_slowtmr+0x584>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a02:	6a1b      	ldr	r3, [r3, #32]
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	2b28      	cmp	r3, #40	@ 0x28
 8010a08:	d904      	bls.n	8010a14 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a0e:	3301      	adds	r3, #1
 8010a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a16:	7a5b      	ldrb	r3, [r3, #9]
 8010a18:	f003 0308 	and.w	r3, r3, #8
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d04a      	beq.n	8010ab6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010a24:	2b04      	cmp	r3, #4
 8010a26:	d003      	beq.n	8010a30 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010a2c:	2b07      	cmp	r3, #7
 8010a2e:	d142      	bne.n	8010ab6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a30:	4b8f      	ldr	r3, [pc, #572]	@ (8010c70 <tcp_slowtmr+0x584>)
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a36:	6a1b      	ldr	r3, [r3, #32]
 8010a38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a40:	4b8c      	ldr	r3, [pc, #560]	@ (8010c74 <tcp_slowtmr+0x588>)
 8010a42:	440b      	add	r3, r1
 8010a44:	498c      	ldr	r1, [pc, #560]	@ (8010c78 <tcp_slowtmr+0x58c>)
 8010a46:	fba1 1303 	umull	r1, r3, r1, r3
 8010a4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d90a      	bls.n	8010a66 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a54:	3301      	adds	r3, #1
 8010a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010a5e:	3301      	adds	r3, #1
 8010a60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010a64:	e027      	b.n	8010ab6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a66:	4b82      	ldr	r3, [pc, #520]	@ (8010c70 <tcp_slowtmr+0x584>)
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a72:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a78:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	4b7f      	ldr	r3, [pc, #508]	@ (8010c7c <tcp_slowtmr+0x590>)
 8010a80:	fb00 f303 	mul.w	r3, r0, r3
 8010a84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010a86:	497c      	ldr	r1, [pc, #496]	@ (8010c78 <tcp_slowtmr+0x58c>)
 8010a88:	fba1 1303 	umull	r1, r3, r1, r3
 8010a8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d911      	bls.n	8010ab6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010a92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a94:	f004 ffea 	bl	8015a6c <tcp_keepalive>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010a9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d107      	bne.n	8010ab6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010aac:	3301      	adds	r3, #1
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d011      	beq.n	8010ae2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010abe:	4b6c      	ldr	r3, [pc, #432]	@ (8010c70 <tcp_slowtmr+0x584>)
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac4:	6a1b      	ldr	r3, [r3, #32]
 8010ac6:	1ad2      	subs	r2, r2, r3
 8010ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010ace:	4619      	mov	r1, r3
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	005b      	lsls	r3, r3, #1
 8010ad4:	440b      	add	r3, r1
 8010ad6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d302      	bcc.n	8010ae2 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ade:	f000 feab 	bl	8011838 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae4:	7d1b      	ldrb	r3, [r3, #20]
 8010ae6:	2b03      	cmp	r3, #3
 8010ae8:	d10b      	bne.n	8010b02 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010aea:	4b61      	ldr	r3, [pc, #388]	@ (8010c70 <tcp_slowtmr+0x584>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af0:	6a1b      	ldr	r3, [r3, #32]
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	2b28      	cmp	r3, #40	@ 0x28
 8010af6:	d904      	bls.n	8010b02 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010afc:	3301      	adds	r3, #1
 8010afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b04:	7d1b      	ldrb	r3, [r3, #20]
 8010b06:	2b09      	cmp	r3, #9
 8010b08:	d10b      	bne.n	8010b22 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010b0a:	4b59      	ldr	r3, [pc, #356]	@ (8010c70 <tcp_slowtmr+0x584>)
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b10:	6a1b      	ldr	r3, [r3, #32]
 8010b12:	1ad3      	subs	r3, r2, r3
 8010b14:	2bf0      	cmp	r3, #240	@ 0xf0
 8010b16:	d904      	bls.n	8010b22 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b1c:	3301      	adds	r3, #1
 8010b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010b22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d060      	beq.n	8010bec <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010b30:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010b32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b34:	f000 fccc 	bl	80114d0 <tcp_pcb_purge>
      if (prev != NULL) {
 8010b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d010      	beq.n	8010b60 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010b3e:	4b50      	ldr	r3, [pc, #320]	@ (8010c80 <tcp_slowtmr+0x594>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d106      	bne.n	8010b56 <tcp_slowtmr+0x46a>
 8010b48:	4b4e      	ldr	r3, [pc, #312]	@ (8010c84 <tcp_slowtmr+0x598>)
 8010b4a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010b4e:	494e      	ldr	r1, [pc, #312]	@ (8010c88 <tcp_slowtmr+0x59c>)
 8010b50:	484e      	ldr	r0, [pc, #312]	@ (8010c8c <tcp_slowtmr+0x5a0>)
 8010b52:	f008 fec7 	bl	80198e4 <iprintf>
        prev->next = pcb->next;
 8010b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b58:	68da      	ldr	r2, [r3, #12]
 8010b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5c:	60da      	str	r2, [r3, #12]
 8010b5e:	e00f      	b.n	8010b80 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010b60:	4b47      	ldr	r3, [pc, #284]	@ (8010c80 <tcp_slowtmr+0x594>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d006      	beq.n	8010b78 <tcp_slowtmr+0x48c>
 8010b6a:	4b46      	ldr	r3, [pc, #280]	@ (8010c84 <tcp_slowtmr+0x598>)
 8010b6c:	f240 5271 	movw	r2, #1393	@ 0x571
 8010b70:	4947      	ldr	r1, [pc, #284]	@ (8010c90 <tcp_slowtmr+0x5a4>)
 8010b72:	4846      	ldr	r0, [pc, #280]	@ (8010c8c <tcp_slowtmr+0x5a0>)
 8010b74:	f008 feb6 	bl	80198e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	4a40      	ldr	r2, [pc, #256]	@ (8010c80 <tcp_slowtmr+0x594>)
 8010b7e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010b80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d013      	beq.n	8010bb0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010b90:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b94:	3304      	adds	r3, #4
 8010b96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b98:	8ad2      	ldrh	r2, [r2, #22]
 8010b9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b9c:	8b09      	ldrh	r1, [r1, #24]
 8010b9e:	9102      	str	r1, [sp, #8]
 8010ba0:	9201      	str	r2, [sp, #4]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	462b      	mov	r3, r5
 8010ba6:	4622      	mov	r2, r4
 8010ba8:	4601      	mov	r1, r0
 8010baa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bac:	f004 feaa 	bl	8015904 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb2:	691b      	ldr	r3, [r3, #16]
 8010bb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb8:	7d1b      	ldrb	r3, [r3, #20]
 8010bba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010bc6:	6838      	ldr	r0, [r7, #0]
 8010bc8:	f7fe ffee 	bl	800fba8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010bcc:	4b31      	ldr	r3, [pc, #196]	@ (8010c94 <tcp_slowtmr+0x5a8>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d004      	beq.n	8010be2 <tcp_slowtmr+0x4f6>
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f06f 010c 	mvn.w	r1, #12
 8010bde:	68b8      	ldr	r0, [r7, #8]
 8010be0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010be2:	4b2c      	ldr	r3, [pc, #176]	@ (8010c94 <tcp_slowtmr+0x5a8>)
 8010be4:	781b      	ldrb	r3, [r3, #0]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d037      	beq.n	8010c5a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010bea:	e592      	b.n	8010712 <tcp_slowtmr+0x26>
      prev = pcb;
 8010bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf8:	7f1b      	ldrb	r3, [r3, #28]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c04:	7f1a      	ldrb	r2, [r3, #28]
 8010c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c08:	7f5b      	ldrb	r3, [r3, #29]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d325      	bcc.n	8010c5a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c10:	2200      	movs	r2, #0
 8010c12:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010c14:	4b1f      	ldr	r3, [pc, #124]	@ (8010c94 <tcp_slowtmr+0x5a8>)
 8010c16:	2200      	movs	r2, #0
 8010c18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00b      	beq.n	8010c3c <tcp_slowtmr+0x550>
 8010c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010c2c:	6912      	ldr	r2, [r2, #16]
 8010c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c30:	4610      	mov	r0, r2
 8010c32:	4798      	blx	r3
 8010c34:	4603      	mov	r3, r0
 8010c36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010c3a:	e002      	b.n	8010c42 <tcp_slowtmr+0x556>
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010c42:	4b14      	ldr	r3, [pc, #80]	@ (8010c94 <tcp_slowtmr+0x5a8>)
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f47f ad62 	bne.w	8010710 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010c4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d102      	bne.n	8010c5a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010c56:	f004 f8a1 	bl	8014d9c <tcp_output>
  while (pcb != NULL) {
 8010c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f47f ad5e 	bne.w	801071e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010c66:	4b0c      	ldr	r3, [pc, #48]	@ (8010c98 <tcp_slowtmr+0x5ac>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010c6c:	e069      	b.n	8010d42 <tcp_slowtmr+0x656>
 8010c6e:	bf00      	nop
 8010c70:	20011d18 	.word	0x20011d18
 8010c74:	000a4cb8 	.word	0x000a4cb8
 8010c78:	10624dd3 	.word	0x10624dd3
 8010c7c:	000124f8 	.word	0x000124f8
 8010c80:	20011d24 	.word	0x20011d24
 8010c84:	0801d5e8 	.word	0x0801d5e8
 8010c88:	0801da20 	.word	0x0801da20
 8010c8c:	0801d62c 	.word	0x0801d62c
 8010c90:	0801da4c 	.word	0x0801da4c
 8010c94:	20011d2c 	.word	0x20011d2c
 8010c98:	20011d28 	.word	0x20011d28
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c9e:	7d1b      	ldrb	r3, [r3, #20]
 8010ca0:	2b0a      	cmp	r3, #10
 8010ca2:	d006      	beq.n	8010cb2 <tcp_slowtmr+0x5c6>
 8010ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8010d54 <tcp_slowtmr+0x668>)
 8010ca6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010caa:	492b      	ldr	r1, [pc, #172]	@ (8010d58 <tcp_slowtmr+0x66c>)
 8010cac:	482b      	ldr	r0, [pc, #172]	@ (8010d5c <tcp_slowtmr+0x670>)
 8010cae:	f008 fe19 	bl	80198e4 <iprintf>
    pcb_remove = 0;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010cb8:	4b29      	ldr	r3, [pc, #164]	@ (8010d60 <tcp_slowtmr+0x674>)
 8010cba:	681a      	ldr	r2, [r3, #0]
 8010cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cbe:	6a1b      	ldr	r3, [r3, #32]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	2bf0      	cmp	r3, #240	@ 0xf0
 8010cc4:	d904      	bls.n	8010cd0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cca:	3301      	adds	r3, #1
 8010ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d02f      	beq.n	8010d38 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010cd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cda:	f000 fbf9 	bl	80114d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d010      	beq.n	8010d06 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8010d64 <tcp_slowtmr+0x678>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cea:	429a      	cmp	r2, r3
 8010cec:	d106      	bne.n	8010cfc <tcp_slowtmr+0x610>
 8010cee:	4b19      	ldr	r3, [pc, #100]	@ (8010d54 <tcp_slowtmr+0x668>)
 8010cf0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010cf4:	491c      	ldr	r1, [pc, #112]	@ (8010d68 <tcp_slowtmr+0x67c>)
 8010cf6:	4819      	ldr	r0, [pc, #100]	@ (8010d5c <tcp_slowtmr+0x670>)
 8010cf8:	f008 fdf4 	bl	80198e4 <iprintf>
        prev->next = pcb->next;
 8010cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfe:	68da      	ldr	r2, [r3, #12]
 8010d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d02:	60da      	str	r2, [r3, #12]
 8010d04:	e00f      	b.n	8010d26 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010d06:	4b17      	ldr	r3, [pc, #92]	@ (8010d64 <tcp_slowtmr+0x678>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d006      	beq.n	8010d1e <tcp_slowtmr+0x632>
 8010d10:	4b10      	ldr	r3, [pc, #64]	@ (8010d54 <tcp_slowtmr+0x668>)
 8010d12:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010d16:	4915      	ldr	r1, [pc, #84]	@ (8010d6c <tcp_slowtmr+0x680>)
 8010d18:	4810      	ldr	r0, [pc, #64]	@ (8010d5c <tcp_slowtmr+0x670>)
 8010d1a:	f008 fde3 	bl	80198e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	4a10      	ldr	r2, [pc, #64]	@ (8010d64 <tcp_slowtmr+0x678>)
 8010d24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010d30:	69f8      	ldr	r0, [r7, #28]
 8010d32:	f7fe ff39 	bl	800fba8 <tcp_free>
 8010d36:	e004      	b.n	8010d42 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3e:	68db      	ldr	r3, [r3, #12]
 8010d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d1a9      	bne.n	8010c9c <tcp_slowtmr+0x5b0>
    }
  }
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	3730      	adds	r7, #48	@ 0x30
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bdb0      	pop	{r4, r5, r7, pc}
 8010d52:	bf00      	nop
 8010d54:	0801d5e8 	.word	0x0801d5e8
 8010d58:	0801da78 	.word	0x0801da78
 8010d5c:	0801d62c 	.word	0x0801d62c
 8010d60:	20011d18 	.word	0x20011d18
 8010d64:	20011d28 	.word	0x20011d28
 8010d68:	0801daa8 	.word	0x0801daa8
 8010d6c:	0801dad0 	.word	0x0801dad0

08010d70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010d76:	4b2d      	ldr	r3, [pc, #180]	@ (8010e2c <tcp_fasttmr+0xbc>)
 8010d78:	781b      	ldrb	r3, [r3, #0]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8010e2c <tcp_fasttmr+0xbc>)
 8010d80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010d82:	4b2b      	ldr	r3, [pc, #172]	@ (8010e30 <tcp_fasttmr+0xc0>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010d88:	e048      	b.n	8010e1c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	7f9a      	ldrb	r2, [r3, #30]
 8010d8e:	4b27      	ldr	r3, [pc, #156]	@ (8010e2c <tcp_fasttmr+0xbc>)
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d03f      	beq.n	8010e16 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010d96:	4b25      	ldr	r3, [pc, #148]	@ (8010e2c <tcp_fasttmr+0xbc>)
 8010d98:	781a      	ldrb	r2, [r3, #0]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8b5b      	ldrh	r3, [r3, #26]
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d010      	beq.n	8010dcc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	8b5b      	ldrh	r3, [r3, #26]
 8010dae:	f043 0302 	orr.w	r3, r3, #2
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f003 ffef 	bl	8014d9c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f023 0303 	bic.w	r3, r3, #3
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	8b5b      	ldrh	r3, [r3, #26]
 8010dd0:	f003 0308 	and.w	r3, r3, #8
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d009      	beq.n	8010dec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	8b5b      	ldrh	r3, [r3, #26]
 8010ddc:	f023 0308 	bic.w	r3, r3, #8
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f7ff f872 	bl	800fed0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	68db      	ldr	r3, [r3, #12]
 8010df0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d00a      	beq.n	8010e10 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8010e34 <tcp_fasttmr+0xc4>)
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 f819 	bl	8010e38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010e06:	4b0b      	ldr	r3, [pc, #44]	@ (8010e34 <tcp_fasttmr+0xc4>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d000      	beq.n	8010e10 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010e0e:	e7b8      	b.n	8010d82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	607b      	str	r3, [r7, #4]
 8010e14:	e002      	b.n	8010e1c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	68db      	ldr	r3, [r3, #12]
 8010e1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d1b3      	bne.n	8010d8a <tcp_fasttmr+0x1a>
    }
  }
}
 8010e22:	bf00      	nop
 8010e24:	bf00      	nop
 8010e26:	3708      	adds	r7, #8
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20011d2e 	.word	0x20011d2e
 8010e30:	20011d24 	.word	0x20011d24
 8010e34:	20011d2c 	.word	0x20011d2c

08010e38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010e38:	b590      	push	{r4, r7, lr}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d109      	bne.n	8010e5a <tcp_process_refused_data+0x22>
 8010e46:	4b37      	ldr	r3, [pc, #220]	@ (8010f24 <tcp_process_refused_data+0xec>)
 8010e48:	f240 6209 	movw	r2, #1545	@ 0x609
 8010e4c:	4936      	ldr	r1, [pc, #216]	@ (8010f28 <tcp_process_refused_data+0xf0>)
 8010e4e:	4837      	ldr	r0, [pc, #220]	@ (8010f2c <tcp_process_refused_data+0xf4>)
 8010e50:	f008 fd48 	bl	80198e4 <iprintf>
 8010e54:	f06f 030f 	mvn.w	r3, #15
 8010e58:	e060      	b.n	8010f1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e5e:	7b5b      	ldrb	r3, [r3, #13]
 8010e60:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e66:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00b      	beq.n	8010e90 <tcp_process_refused_data+0x58>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6918      	ldr	r0, [r3, #16]
 8010e82:	2300      	movs	r3, #0
 8010e84:	68ba      	ldr	r2, [r7, #8]
 8010e86:	6879      	ldr	r1, [r7, #4]
 8010e88:	47a0      	blx	r4
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	73fb      	strb	r3, [r7, #15]
 8010e8e:	e007      	b.n	8010ea0 <tcp_process_refused_data+0x68>
 8010e90:	2300      	movs	r3, #0
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	6879      	ldr	r1, [r7, #4]
 8010e96:	2000      	movs	r0, #0
 8010e98:	f000 f8a4 	bl	8010fe4 <tcp_recv_null>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d12a      	bne.n	8010efe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010ea8:	7bbb      	ldrb	r3, [r7, #14]
 8010eaa:	f003 0320 	and.w	r3, r3, #32
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d033      	beq.n	8010f1a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010eb6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010eba:	d005      	beq.n	8010ec8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00b      	beq.n	8010eea <tcp_process_refused_data+0xb2>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6918      	ldr	r0, [r3, #16]
 8010edc:	2300      	movs	r3, #0
 8010ede:	2200      	movs	r2, #0
 8010ee0:	6879      	ldr	r1, [r7, #4]
 8010ee2:	47a0      	blx	r4
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	73fb      	strb	r3, [r7, #15]
 8010ee8:	e001      	b.n	8010eee <tcp_process_refused_data+0xb6>
 8010eea:	2300      	movs	r3, #0
 8010eec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef2:	f113 0f0d 	cmn.w	r3, #13
 8010ef6:	d110      	bne.n	8010f1a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010ef8:	f06f 030c 	mvn.w	r3, #12
 8010efc:	e00e      	b.n	8010f1c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f02:	f113 0f0d 	cmn.w	r3, #13
 8010f06:	d102      	bne.n	8010f0e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010f08:	f06f 030c 	mvn.w	r3, #12
 8010f0c:	e006      	b.n	8010f1c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68ba      	ldr	r2, [r7, #8]
 8010f12:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010f14:	f06f 0304 	mvn.w	r3, #4
 8010f18:	e000      	b.n	8010f1c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd90      	pop	{r4, r7, pc}
 8010f24:	0801d5e8 	.word	0x0801d5e8
 8010f28:	0801daf8 	.word	0x0801daf8
 8010f2c:	0801d62c 	.word	0x0801d62c

08010f30 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010f38:	e007      	b.n	8010f4a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 f80a 	bl	8010f5a <tcp_seg_free>
    seg = next;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d1f4      	bne.n	8010f3a <tcp_segs_free+0xa>
  }
}
 8010f50:	bf00      	nop
 8010f52:	bf00      	nop
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b082      	sub	sp, #8
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00c      	beq.n	8010f82 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d004      	beq.n	8010f7a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fe fb6b 	bl	800f650 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010f7a:	6879      	ldr	r1, [r7, #4]
 8010f7c:	2003      	movs	r0, #3
 8010f7e:	f7fd fcc3 	bl	800e908 <memp_free>
  }
}
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
	...

08010f8c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d106      	bne.n	8010fa8 <tcp_seg_copy+0x1c>
 8010f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd8 <tcp_seg_copy+0x4c>)
 8010f9c:	f240 6282 	movw	r2, #1666	@ 0x682
 8010fa0:	490e      	ldr	r1, [pc, #56]	@ (8010fdc <tcp_seg_copy+0x50>)
 8010fa2:	480f      	ldr	r0, [pc, #60]	@ (8010fe0 <tcp_seg_copy+0x54>)
 8010fa4:	f008 fc9e 	bl	80198e4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010fa8:	2003      	movs	r0, #3
 8010faa:	f7fd fc5b 	bl	800e864 <memp_malloc>
 8010fae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <tcp_seg_copy+0x2e>
    return NULL;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e00a      	b.n	8010fd0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010fba:	2210      	movs	r2, #16
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f008 ff0f 	bl	8019de2 <memcpy>
  pbuf_ref(cseg->p);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fe fbe7 	bl	800f79c <pbuf_ref>
  return cseg;
 8010fce:	68fb      	ldr	r3, [r7, #12]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3710      	adds	r7, #16
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	0801d5e8 	.word	0x0801d5e8
 8010fdc:	0801db3c 	.word	0x0801db3c
 8010fe0:	0801d62c 	.word	0x0801d62c

08010fe4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	607a      	str	r2, [r7, #4]
 8010ff0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d109      	bne.n	801100c <tcp_recv_null+0x28>
 8010ff8:	4b12      	ldr	r3, [pc, #72]	@ (8011044 <tcp_recv_null+0x60>)
 8010ffa:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010ffe:	4912      	ldr	r1, [pc, #72]	@ (8011048 <tcp_recv_null+0x64>)
 8011000:	4812      	ldr	r0, [pc, #72]	@ (801104c <tcp_recv_null+0x68>)
 8011002:	f008 fc6f 	bl	80198e4 <iprintf>
 8011006:	f06f 030f 	mvn.w	r3, #15
 801100a:	e016      	b.n	801103a <tcp_recv_null+0x56>

  if (p != NULL) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d009      	beq.n	8011026 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	891b      	ldrh	r3, [r3, #8]
 8011016:	4619      	mov	r1, r3
 8011018:	68b8      	ldr	r0, [r7, #8]
 801101a:	f7ff fad1 	bl	80105c0 <tcp_recved>
    pbuf_free(p);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7fe fb16 	bl	800f650 <pbuf_free>
 8011024:	e008      	b.n	8011038 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d104      	bne.n	8011038 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801102e:	68b8      	ldr	r0, [r7, #8]
 8011030:	f7fe ffb8 	bl	800ffa4 <tcp_close>
 8011034:	4603      	mov	r3, r0
 8011036:	e000      	b.n	801103a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011038:	2300      	movs	r3, #0
}
 801103a:	4618      	mov	r0, r3
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	0801d5e8 	.word	0x0801d5e8
 8011048:	0801db58 	.word	0x0801db58
 801104c:	0801d62c 	.word	0x0801d62c

08011050 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	4603      	mov	r3, r0
 8011058:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801105e:	2b00      	cmp	r3, #0
 8011060:	db01      	blt.n	8011066 <tcp_kill_prio+0x16>
 8011062:	79fb      	ldrb	r3, [r7, #7]
 8011064:	e000      	b.n	8011068 <tcp_kill_prio+0x18>
 8011066:	237f      	movs	r3, #127	@ 0x7f
 8011068:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801106a:	7afb      	ldrb	r3, [r7, #11]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d034      	beq.n	80110da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011070:	7afb      	ldrb	r3, [r7, #11]
 8011072:	3b01      	subs	r3, #1
 8011074:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011076:	2300      	movs	r3, #0
 8011078:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801107a:	2300      	movs	r3, #0
 801107c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801107e:	4b19      	ldr	r3, [pc, #100]	@ (80110e4 <tcp_kill_prio+0x94>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	617b      	str	r3, [r7, #20]
 8011084:	e01f      	b.n	80110c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	7d5b      	ldrb	r3, [r3, #21]
 801108a:	7afa      	ldrb	r2, [r7, #11]
 801108c:	429a      	cmp	r2, r3
 801108e:	d80c      	bhi.n	80110aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011094:	7afa      	ldrb	r2, [r7, #11]
 8011096:	429a      	cmp	r2, r3
 8011098:	d112      	bne.n	80110c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801109a:	4b13      	ldr	r3, [pc, #76]	@ (80110e8 <tcp_kill_prio+0x98>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	6a1b      	ldr	r3, [r3, #32]
 80110a2:	1ad3      	subs	r3, r2, r3
 80110a4:	68fa      	ldr	r2, [r7, #12]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d80a      	bhi.n	80110c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80110aa:	4b0f      	ldr	r3, [pc, #60]	@ (80110e8 <tcp_kill_prio+0x98>)
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	6a1b      	ldr	r3, [r3, #32]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	7d5b      	ldrb	r3, [r3, #21]
 80110be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	68db      	ldr	r3, [r3, #12]
 80110c4:	617b      	str	r3, [r7, #20]
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d1dc      	bne.n	8011086 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d004      	beq.n	80110dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80110d2:	6938      	ldr	r0, [r7, #16]
 80110d4:	f7ff f8ac 	bl	8010230 <tcp_abort>
 80110d8:	e000      	b.n	80110dc <tcp_kill_prio+0x8c>
    return;
 80110da:	bf00      	nop
  }
}
 80110dc:	3718      	adds	r7, #24
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	20011d24 	.word	0x20011d24
 80110e8:	20011d18 	.word	0x20011d18

080110ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	4603      	mov	r3, r0
 80110f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80110f6:	79fb      	ldrb	r3, [r7, #7]
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d009      	beq.n	8011110 <tcp_kill_state+0x24>
 80110fc:	79fb      	ldrb	r3, [r7, #7]
 80110fe:	2b09      	cmp	r3, #9
 8011100:	d006      	beq.n	8011110 <tcp_kill_state+0x24>
 8011102:	4b1a      	ldr	r3, [pc, #104]	@ (801116c <tcp_kill_state+0x80>)
 8011104:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011108:	4919      	ldr	r1, [pc, #100]	@ (8011170 <tcp_kill_state+0x84>)
 801110a:	481a      	ldr	r0, [pc, #104]	@ (8011174 <tcp_kill_state+0x88>)
 801110c:	f008 fbea 	bl	80198e4 <iprintf>

  inactivity = 0;
 8011110:	2300      	movs	r3, #0
 8011112:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011114:	2300      	movs	r3, #0
 8011116:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011118:	4b17      	ldr	r3, [pc, #92]	@ (8011178 <tcp_kill_state+0x8c>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	617b      	str	r3, [r7, #20]
 801111e:	e017      	b.n	8011150 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	7d1b      	ldrb	r3, [r3, #20]
 8011124:	79fa      	ldrb	r2, [r7, #7]
 8011126:	429a      	cmp	r2, r3
 8011128:	d10f      	bne.n	801114a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801112a:	4b14      	ldr	r3, [pc, #80]	@ (801117c <tcp_kill_state+0x90>)
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	6a1b      	ldr	r3, [r3, #32]
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	429a      	cmp	r2, r3
 8011138:	d807      	bhi.n	801114a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801113a:	4b10      	ldr	r3, [pc, #64]	@ (801117c <tcp_kill_state+0x90>)
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	1ad3      	subs	r3, r2, r3
 8011144:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	617b      	str	r3, [r7, #20]
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d1e4      	bne.n	8011120 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801115c:	2100      	movs	r1, #0
 801115e:	6938      	ldr	r0, [r7, #16]
 8011160:	f7fe ffa8 	bl	80100b4 <tcp_abandon>
  }
}
 8011164:	bf00      	nop
 8011166:	3718      	adds	r7, #24
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	0801d5e8 	.word	0x0801d5e8
 8011170:	0801db74 	.word	0x0801db74
 8011174:	0801d62c 	.word	0x0801d62c
 8011178:	20011d24 	.word	0x20011d24
 801117c:	20011d18 	.word	0x20011d18

08011180 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b084      	sub	sp, #16
 8011184:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011186:	2300      	movs	r3, #0
 8011188:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801118a:	2300      	movs	r3, #0
 801118c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801118e:	4b12      	ldr	r3, [pc, #72]	@ (80111d8 <tcp_kill_timewait+0x58>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	60fb      	str	r3, [r7, #12]
 8011194:	e012      	b.n	80111bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011196:	4b11      	ldr	r3, [pc, #68]	@ (80111dc <tcp_kill_timewait+0x5c>)
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	6a1b      	ldr	r3, [r3, #32]
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	687a      	ldr	r2, [r7, #4]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d807      	bhi.n	80111b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80111a6:	4b0d      	ldr	r3, [pc, #52]	@ (80111dc <tcp_kill_timewait+0x5c>)
 80111a8:	681a      	ldr	r2, [r3, #0]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	60fb      	str	r3, [r7, #12]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1e9      	bne.n	8011196 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d002      	beq.n	80111ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80111c8:	68b8      	ldr	r0, [r7, #8]
 80111ca:	f7ff f831 	bl	8010230 <tcp_abort>
  }
}
 80111ce:	bf00      	nop
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	20011d28 	.word	0x20011d28
 80111dc:	20011d18 	.word	0x20011d18

080111e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80111e6:	4b10      	ldr	r3, [pc, #64]	@ (8011228 <tcp_handle_closepend+0x48>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80111ec:	e014      	b.n	8011218 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	8b5b      	ldrh	r3, [r3, #26]
 80111f8:	f003 0308 	and.w	r3, r3, #8
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d009      	beq.n	8011214 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	8b5b      	ldrh	r3, [r3, #26]
 8011204:	f023 0308 	bic.w	r3, r3, #8
 8011208:	b29a      	uxth	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801120e:	6878      	ldr	r0, [r7, #4]
 8011210:	f7fe fe5e 	bl	800fed0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1e7      	bne.n	80111ee <tcp_handle_closepend+0xe>
  }
}
 801121e:	bf00      	nop
 8011220:	bf00      	nop
 8011222:	3708      	adds	r7, #8
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}
 8011228:	20011d24 	.word	0x20011d24

0801122c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b084      	sub	sp, #16
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011236:	2001      	movs	r0, #1
 8011238:	f7fd fb14 	bl	800e864 <memp_malloc>
 801123c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d126      	bne.n	8011292 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011244:	f7ff ffcc 	bl	80111e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011248:	f7ff ff9a 	bl	8011180 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801124c:	2001      	movs	r0, #1
 801124e:	f7fd fb09 	bl	800e864 <memp_malloc>
 8011252:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d11b      	bne.n	8011292 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801125a:	2009      	movs	r0, #9
 801125c:	f7ff ff46 	bl	80110ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011260:	2001      	movs	r0, #1
 8011262:	f7fd faff 	bl	800e864 <memp_malloc>
 8011266:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d111      	bne.n	8011292 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801126e:	2008      	movs	r0, #8
 8011270:	f7ff ff3c 	bl	80110ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011274:	2001      	movs	r0, #1
 8011276:	f7fd faf5 	bl	800e864 <memp_malloc>
 801127a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d107      	bne.n	8011292 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011282:	79fb      	ldrb	r3, [r7, #7]
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fee3 	bl	8011050 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801128a:	2001      	movs	r0, #1
 801128c:	f7fd faea 	bl	800e864 <memp_malloc>
 8011290:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d03f      	beq.n	8011318 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011298:	229c      	movs	r2, #156	@ 0x9c
 801129a:	2100      	movs	r1, #0
 801129c:	68f8      	ldr	r0, [r7, #12]
 801129e:	f008 fce7 	bl	8019c70 <memset>
    pcb->prio = prio;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	79fa      	ldrb	r2, [r7, #7]
 80112a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80112ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80112b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	22ff      	movs	r2, #255	@ 0xff
 80112c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80112ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	2206      	movs	r2, #6
 80112d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2206      	movs	r2, #6
 80112dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112e4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80112ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011324 <tcp_alloc+0xf8>)
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80112f6:	4b0c      	ldr	r3, [pc, #48]	@ (8011328 <tcp_alloc+0xfc>)
 80112f8:	781a      	ldrb	r2, [r3, #0]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011304:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	4a08      	ldr	r2, [pc, #32]	@ (801132c <tcp_alloc+0x100>)
 801130c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	4a07      	ldr	r2, [pc, #28]	@ (8011330 <tcp_alloc+0x104>)
 8011314:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011318:	68fb      	ldr	r3, [r7, #12]
}
 801131a:	4618      	mov	r0, r3
 801131c:	3710      	adds	r7, #16
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}
 8011322:	bf00      	nop
 8011324:	20011d18 	.word	0x20011d18
 8011328:	20011d2e 	.word	0x20011d2e
 801132c:	08010fe5 	.word	0x08010fe5
 8011330:	006ddd00 	.word	0x006ddd00

08011334 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801133e:	2040      	movs	r0, #64	@ 0x40
 8011340:	f7ff ff74 	bl	801122c <tcp_alloc>
 8011344:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011346:	68fb      	ldr	r3, [r7, #12]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}

08011350 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	683a      	ldr	r2, [r7, #0]
 8011364:	611a      	str	r2, [r3, #16]
  }
}
 8011366:	bf00      	nop
 8011368:	370c      	adds	r7, #12
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
	...

08011374 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00e      	beq.n	80113a2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7d1b      	ldrb	r3, [r3, #20]
 8011388:	2b01      	cmp	r3, #1
 801138a:	d106      	bne.n	801139a <tcp_recv+0x26>
 801138c:	4b07      	ldr	r3, [pc, #28]	@ (80113ac <tcp_recv+0x38>)
 801138e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8011392:	4907      	ldr	r1, [pc, #28]	@ (80113b0 <tcp_recv+0x3c>)
 8011394:	4807      	ldr	r0, [pc, #28]	@ (80113b4 <tcp_recv+0x40>)
 8011396:	f008 faa5 	bl	80198e4 <iprintf>
    pcb->recv = recv;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80113a2:	bf00      	nop
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	0801d5e8 	.word	0x0801d5e8
 80113b0:	0801db84 	.word	0x0801db84
 80113b4:	0801d62c 	.word	0x0801d62c

080113b8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00e      	beq.n	80113e6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d106      	bne.n	80113de <tcp_sent+0x26>
 80113d0:	4b07      	ldr	r3, [pc, #28]	@ (80113f0 <tcp_sent+0x38>)
 80113d2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80113d6:	4907      	ldr	r1, [pc, #28]	@ (80113f4 <tcp_sent+0x3c>)
 80113d8:	4807      	ldr	r0, [pc, #28]	@ (80113f8 <tcp_sent+0x40>)
 80113da:	f008 fa83 	bl	80198e4 <iprintf>
    pcb->sent = sent;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80113e6:	bf00      	nop
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	0801d5e8 	.word	0x0801d5e8
 80113f4:	0801dbac 	.word	0x0801dbac
 80113f8:	0801d62c 	.word	0x0801d62c

080113fc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d00e      	beq.n	801142a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	7d1b      	ldrb	r3, [r3, #20]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d106      	bne.n	8011422 <tcp_err+0x26>
 8011414:	4b07      	ldr	r3, [pc, #28]	@ (8011434 <tcp_err+0x38>)
 8011416:	f640 020d 	movw	r2, #2061	@ 0x80d
 801141a:	4907      	ldr	r1, [pc, #28]	@ (8011438 <tcp_err+0x3c>)
 801141c:	4807      	ldr	r0, [pc, #28]	@ (801143c <tcp_err+0x40>)
 801141e:	f008 fa61 	bl	80198e4 <iprintf>
    pcb->errf = err;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	683a      	ldr	r2, [r7, #0]
 8011426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801142a:	bf00      	nop
 801142c:	3708      	adds	r7, #8
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	0801d5e8 	.word	0x0801d5e8
 8011438:	0801dbd4 	.word	0x0801dbd4
 801143c:	0801d62c 	.word	0x0801d62c

08011440 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d008      	beq.n	8011462 <tcp_accept+0x22>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	7d1b      	ldrb	r3, [r3, #20]
 8011454:	2b01      	cmp	r3, #1
 8011456:	d104      	bne.n	8011462 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	683a      	ldr	r2, [r7, #0]
 8011460:	619a      	str	r2, [r3, #24]
  }
}
 8011462:	bf00      	nop
 8011464:	3714      	adds	r7, #20
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr
	...

08011470 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	4613      	mov	r3, r2
 801147c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d107      	bne.n	8011494 <tcp_poll+0x24>
 8011484:	4b0e      	ldr	r3, [pc, #56]	@ (80114c0 <tcp_poll+0x50>)
 8011486:	f640 023d 	movw	r2, #2109	@ 0x83d
 801148a:	490e      	ldr	r1, [pc, #56]	@ (80114c4 <tcp_poll+0x54>)
 801148c:	480e      	ldr	r0, [pc, #56]	@ (80114c8 <tcp_poll+0x58>)
 801148e:	f008 fa29 	bl	80198e4 <iprintf>
 8011492:	e011      	b.n	80114b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	7d1b      	ldrb	r3, [r3, #20]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d106      	bne.n	80114aa <tcp_poll+0x3a>
 801149c:	4b08      	ldr	r3, [pc, #32]	@ (80114c0 <tcp_poll+0x50>)
 801149e:	f640 023e 	movw	r2, #2110	@ 0x83e
 80114a2:	490a      	ldr	r1, [pc, #40]	@ (80114cc <tcp_poll+0x5c>)
 80114a4:	4808      	ldr	r0, [pc, #32]	@ (80114c8 <tcp_poll+0x58>)
 80114a6:	f008 fa1d 	bl	80198e4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	68ba      	ldr	r2, [r7, #8]
 80114ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	79fa      	ldrb	r2, [r7, #7]
 80114b6:	775a      	strb	r2, [r3, #29]
}
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	0801d5e8 	.word	0x0801d5e8
 80114c4:	0801dbfc 	.word	0x0801dbfc
 80114c8:	0801d62c 	.word	0x0801d62c
 80114cc:	0801dc14 	.word	0x0801dc14

080114d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d107      	bne.n	80114ee <tcp_pcb_purge+0x1e>
 80114de:	4b21      	ldr	r3, [pc, #132]	@ (8011564 <tcp_pcb_purge+0x94>)
 80114e0:	f640 0251 	movw	r2, #2129	@ 0x851
 80114e4:	4920      	ldr	r1, [pc, #128]	@ (8011568 <tcp_pcb_purge+0x98>)
 80114e6:	4821      	ldr	r0, [pc, #132]	@ (801156c <tcp_pcb_purge+0x9c>)
 80114e8:	f008 f9fc 	bl	80198e4 <iprintf>
 80114ec:	e037      	b.n	801155e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7d1b      	ldrb	r3, [r3, #20]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d033      	beq.n	801155e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80114fa:	2b0a      	cmp	r3, #10
 80114fc:	d02f      	beq.n	801155e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011502:	2b01      	cmp	r3, #1
 8011504:	d02b      	beq.n	801155e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801150a:	2b00      	cmp	r3, #0
 801150c:	d007      	beq.n	801151e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe f89c 	bl	800f650 <pbuf_free>
      pcb->refused_data = NULL;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2200      	movs	r2, #0
 801151c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011522:	2b00      	cmp	r3, #0
 8011524:	d002      	beq.n	801152c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f000 f986 	bl	8011838 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011532:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011538:	4618      	mov	r0, r3
 801153a:	f7ff fcf9 	bl	8010f30 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff fcf4 	bl	8010f30 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	0801d5e8 	.word	0x0801d5e8
 8011568:	0801dc34 	.word	0x0801dc34
 801156c:	0801d62c 	.word	0x0801d62c

08011570 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d106      	bne.n	801158e <tcp_pcb_remove+0x1e>
 8011580:	4b3e      	ldr	r3, [pc, #248]	@ (801167c <tcp_pcb_remove+0x10c>)
 8011582:	f640 0283 	movw	r2, #2179	@ 0x883
 8011586:	493e      	ldr	r1, [pc, #248]	@ (8011680 <tcp_pcb_remove+0x110>)
 8011588:	483e      	ldr	r0, [pc, #248]	@ (8011684 <tcp_pcb_remove+0x114>)
 801158a:	f008 f9ab 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d106      	bne.n	80115a2 <tcp_pcb_remove+0x32>
 8011594:	4b39      	ldr	r3, [pc, #228]	@ (801167c <tcp_pcb_remove+0x10c>)
 8011596:	f640 0284 	movw	r2, #2180	@ 0x884
 801159a:	493b      	ldr	r1, [pc, #236]	@ (8011688 <tcp_pcb_remove+0x118>)
 801159c:	4839      	ldr	r0, [pc, #228]	@ (8011684 <tcp_pcb_remove+0x114>)
 801159e:	f008 f9a1 	bl	80198e4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	683a      	ldr	r2, [r7, #0]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d105      	bne.n	80115b8 <tcp_pcb_remove+0x48>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	68da      	ldr	r2, [r3, #12]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	601a      	str	r2, [r3, #0]
 80115b6:	e013      	b.n	80115e0 <tcp_pcb_remove+0x70>
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	60fb      	str	r3, [r7, #12]
 80115be:	e00c      	b.n	80115da <tcp_pcb_remove+0x6a>
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	683a      	ldr	r2, [r7, #0]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	d104      	bne.n	80115d4 <tcp_pcb_remove+0x64>
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	68da      	ldr	r2, [r3, #12]
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	60da      	str	r2, [r3, #12]
 80115d2:	e005      	b.n	80115e0 <tcp_pcb_remove+0x70>
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	60fb      	str	r3, [r7, #12]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d1ef      	bne.n	80115c0 <tcp_pcb_remove+0x50>
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	2200      	movs	r2, #0
 80115e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80115e6:	6838      	ldr	r0, [r7, #0]
 80115e8:	f7ff ff72 	bl	80114d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	7d1b      	ldrb	r3, [r3, #20]
 80115f0:	2b0a      	cmp	r3, #10
 80115f2:	d013      	beq.n	801161c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d00f      	beq.n	801161c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	8b5b      	ldrh	r3, [r3, #26]
 8011600:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011604:	2b00      	cmp	r3, #0
 8011606:	d009      	beq.n	801161c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	8b5b      	ldrh	r3, [r3, #26]
 801160c:	f043 0302 	orr.w	r3, r3, #2
 8011610:	b29a      	uxth	r2, r3
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011616:	6838      	ldr	r0, [r7, #0]
 8011618:	f003 fbc0 	bl	8014d9c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	7d1b      	ldrb	r3, [r3, #20]
 8011620:	2b01      	cmp	r3, #1
 8011622:	d020      	beq.n	8011666 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011628:	2b00      	cmp	r3, #0
 801162a:	d006      	beq.n	801163a <tcp_pcb_remove+0xca>
 801162c:	4b13      	ldr	r3, [pc, #76]	@ (801167c <tcp_pcb_remove+0x10c>)
 801162e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011632:	4916      	ldr	r1, [pc, #88]	@ (801168c <tcp_pcb_remove+0x11c>)
 8011634:	4813      	ldr	r0, [pc, #76]	@ (8011684 <tcp_pcb_remove+0x114>)
 8011636:	f008 f955 	bl	80198e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801163e:	2b00      	cmp	r3, #0
 8011640:	d006      	beq.n	8011650 <tcp_pcb_remove+0xe0>
 8011642:	4b0e      	ldr	r3, [pc, #56]	@ (801167c <tcp_pcb_remove+0x10c>)
 8011644:	f640 0294 	movw	r2, #2196	@ 0x894
 8011648:	4911      	ldr	r1, [pc, #68]	@ (8011690 <tcp_pcb_remove+0x120>)
 801164a:	480e      	ldr	r0, [pc, #56]	@ (8011684 <tcp_pcb_remove+0x114>)
 801164c:	f008 f94a 	bl	80198e4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011654:	2b00      	cmp	r3, #0
 8011656:	d006      	beq.n	8011666 <tcp_pcb_remove+0xf6>
 8011658:	4b08      	ldr	r3, [pc, #32]	@ (801167c <tcp_pcb_remove+0x10c>)
 801165a:	f640 0296 	movw	r2, #2198	@ 0x896
 801165e:	490d      	ldr	r1, [pc, #52]	@ (8011694 <tcp_pcb_remove+0x124>)
 8011660:	4808      	ldr	r0, [pc, #32]	@ (8011684 <tcp_pcb_remove+0x114>)
 8011662:	f008 f93f 	bl	80198e4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	2200      	movs	r2, #0
 801166a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	2200      	movs	r2, #0
 8011670:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011672:	bf00      	nop
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	0801d5e8 	.word	0x0801d5e8
 8011680:	0801dc50 	.word	0x0801dc50
 8011684:	0801d62c 	.word	0x0801d62c
 8011688:	0801dc6c 	.word	0x0801dc6c
 801168c:	0801dc8c 	.word	0x0801dc8c
 8011690:	0801dca4 	.word	0x0801dca4
 8011694:	0801dcc0 	.word	0x0801dcc0

08011698 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d106      	bne.n	80116b4 <tcp_next_iss+0x1c>
 80116a6:	4b0a      	ldr	r3, [pc, #40]	@ (80116d0 <tcp_next_iss+0x38>)
 80116a8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80116ac:	4909      	ldr	r1, [pc, #36]	@ (80116d4 <tcp_next_iss+0x3c>)
 80116ae:	480a      	ldr	r0, [pc, #40]	@ (80116d8 <tcp_next_iss+0x40>)
 80116b0:	f008 f918 	bl	80198e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80116b4:	4b09      	ldr	r3, [pc, #36]	@ (80116dc <tcp_next_iss+0x44>)
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	4b09      	ldr	r3, [pc, #36]	@ (80116e0 <tcp_next_iss+0x48>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4413      	add	r3, r2
 80116be:	4a07      	ldr	r2, [pc, #28]	@ (80116dc <tcp_next_iss+0x44>)
 80116c0:	6013      	str	r3, [r2, #0]
  return iss;
 80116c2:	4b06      	ldr	r3, [pc, #24]	@ (80116dc <tcp_next_iss+0x44>)
 80116c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3708      	adds	r7, #8
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	0801d5e8 	.word	0x0801d5e8
 80116d4:	0801dcd8 	.word	0x0801dcd8
 80116d8:	0801d62c 	.word	0x0801d62c
 80116dc:	20000014 	.word	0x20000014
 80116e0:	20011d18 	.word	0x20011d18

080116e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	4603      	mov	r3, r0
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d106      	bne.n	8011706 <tcp_eff_send_mss_netif+0x22>
 80116f8:	4b14      	ldr	r3, [pc, #80]	@ (801174c <tcp_eff_send_mss_netif+0x68>)
 80116fa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80116fe:	4914      	ldr	r1, [pc, #80]	@ (8011750 <tcp_eff_send_mss_netif+0x6c>)
 8011700:	4814      	ldr	r0, [pc, #80]	@ (8011754 <tcp_eff_send_mss_netif+0x70>)
 8011702:	f008 f8ef 	bl	80198e4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d101      	bne.n	8011710 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801170c:	89fb      	ldrh	r3, [r7, #14]
 801170e:	e019      	b.n	8011744 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011714:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011716:	8afb      	ldrh	r3, [r7, #22]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d012      	beq.n	8011742 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801171c:	2328      	movs	r3, #40	@ 0x28
 801171e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011720:	8afa      	ldrh	r2, [r7, #22]
 8011722:	8abb      	ldrh	r3, [r7, #20]
 8011724:	429a      	cmp	r2, r3
 8011726:	d904      	bls.n	8011732 <tcp_eff_send_mss_netif+0x4e>
 8011728:	8afa      	ldrh	r2, [r7, #22]
 801172a:	8abb      	ldrh	r3, [r7, #20]
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	b29b      	uxth	r3, r3
 8011730:	e000      	b.n	8011734 <tcp_eff_send_mss_netif+0x50>
 8011732:	2300      	movs	r3, #0
 8011734:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011736:	8a7a      	ldrh	r2, [r7, #18]
 8011738:	89fb      	ldrh	r3, [r7, #14]
 801173a:	4293      	cmp	r3, r2
 801173c:	bf28      	it	cs
 801173e:	4613      	movcs	r3, r2
 8011740:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011742:	89fb      	ldrh	r3, [r7, #14]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3718      	adds	r7, #24
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	0801d5e8 	.word	0x0801d5e8
 8011750:	0801dcf4 	.word	0x0801dcf4
 8011754:	0801d62c 	.word	0x0801d62c

08011758 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d119      	bne.n	80117a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801176c:	4b10      	ldr	r3, [pc, #64]	@ (80117b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801176e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8011772:	4910      	ldr	r1, [pc, #64]	@ (80117b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011774:	4810      	ldr	r0, [pc, #64]	@ (80117b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011776:	f008 f8b5 	bl	80198e4 <iprintf>

  while (pcb != NULL) {
 801177a:	e011      	b.n	80117a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	429a      	cmp	r2, r3
 8011786:	d108      	bne.n	801179a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f7fe fd4e 	bl	8010230 <tcp_abort>
      pcb = next;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	e002      	b.n	80117a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1ea      	bne.n	801177c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80117a6:	bf00      	nop
 80117a8:	bf00      	nop
 80117aa:	3710      	adds	r7, #16
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}
 80117b0:	0801d5e8 	.word	0x0801d5e8
 80117b4:	0801dd1c 	.word	0x0801dd1c
 80117b8:	0801d62c 	.word	0x0801d62c

080117bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d02a      	beq.n	8011822 <tcp_netif_ip_addr_changed+0x66>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d026      	beq.n	8011822 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80117d4:	4b15      	ldr	r3, [pc, #84]	@ (801182c <tcp_netif_ip_addr_changed+0x70>)
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	4619      	mov	r1, r3
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f7ff ffbc 	bl	8011758 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80117e0:	4b13      	ldr	r3, [pc, #76]	@ (8011830 <tcp_netif_ip_addr_changed+0x74>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4619      	mov	r1, r3
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7ff ffb6 	bl	8011758 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d017      	beq.n	8011822 <tcp_netif_ip_addr_changed+0x66>
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d013      	beq.n	8011822 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117fa:	4b0e      	ldr	r3, [pc, #56]	@ (8011834 <tcp_netif_ip_addr_changed+0x78>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	60fb      	str	r3, [r7, #12]
 8011800:	e00c      	b.n	801181c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	429a      	cmp	r2, r3
 801180c:	d103      	bne.n	8011816 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	68db      	ldr	r3, [r3, #12]
 801181a:	60fb      	str	r3, [r7, #12]
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d1ef      	bne.n	8011802 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011822:	bf00      	nop
 8011824:	3710      	adds	r7, #16
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	20011d24 	.word	0x20011d24
 8011830:	20011d1c 	.word	0x20011d1c
 8011834:	20011d20 	.word	0x20011d20

08011838 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011844:	2b00      	cmp	r3, #0
 8011846:	d007      	beq.n	8011858 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801184c:	4618      	mov	r0, r3
 801184e:	f7ff fb6f 	bl	8010f30 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2200      	movs	r2, #0
 8011856:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011858:	bf00      	nop
 801185a:	3708      	adds	r7, #8
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011860:	b590      	push	{r4, r7, lr}
 8011862:	b08d      	sub	sp, #52	@ 0x34
 8011864:	af04      	add	r7, sp, #16
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d105      	bne.n	801187c <tcp_input+0x1c>
 8011870:	4b9b      	ldr	r3, [pc, #620]	@ (8011ae0 <tcp_input+0x280>)
 8011872:	2283      	movs	r2, #131	@ 0x83
 8011874:	499b      	ldr	r1, [pc, #620]	@ (8011ae4 <tcp_input+0x284>)
 8011876:	489c      	ldr	r0, [pc, #624]	@ (8011ae8 <tcp_input+0x288>)
 8011878:	f008 f834 	bl	80198e4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	4a9a      	ldr	r2, [pc, #616]	@ (8011aec <tcp_input+0x28c>)
 8011882:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	895b      	ldrh	r3, [r3, #10]
 8011888:	2b13      	cmp	r3, #19
 801188a:	f240 83d1 	bls.w	8012030 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801188e:	4b98      	ldr	r3, [pc, #608]	@ (8011af0 <tcp_input+0x290>)
 8011890:	695b      	ldr	r3, [r3, #20]
 8011892:	4a97      	ldr	r2, [pc, #604]	@ (8011af0 <tcp_input+0x290>)
 8011894:	6812      	ldr	r2, [r2, #0]
 8011896:	4611      	mov	r1, r2
 8011898:	4618      	mov	r0, r3
 801189a:	f006 f9df 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 801189e:	4603      	mov	r3, r0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f040 83c7 	bne.w	8012034 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80118a6:	4b92      	ldr	r3, [pc, #584]	@ (8011af0 <tcp_input+0x290>)
 80118a8:	695b      	ldr	r3, [r3, #20]
 80118aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80118ae:	2be0      	cmp	r3, #224	@ 0xe0
 80118b0:	f000 83c0 	beq.w	8012034 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80118b4:	4b8d      	ldr	r3, [pc, #564]	@ (8011aec <tcp_input+0x28c>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	b29b      	uxth	r3, r3
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fc fb1b 	bl	800def8 <lwip_htons>
 80118c2:	4603      	mov	r3, r0
 80118c4:	0b1b      	lsrs	r3, r3, #12
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	b2db      	uxtb	r3, r3
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80118ce:	7cbb      	ldrb	r3, [r7, #18]
 80118d0:	2b13      	cmp	r3, #19
 80118d2:	f240 83b1 	bls.w	8012038 <tcp_input+0x7d8>
 80118d6:	7cbb      	ldrb	r3, [r7, #18]
 80118d8:	b29a      	uxth	r2, r3
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	891b      	ldrh	r3, [r3, #8]
 80118de:	429a      	cmp	r2, r3
 80118e0:	f200 83aa 	bhi.w	8012038 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80118e4:	7cbb      	ldrb	r3, [r7, #18]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	3b14      	subs	r3, #20
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	4b81      	ldr	r3, [pc, #516]	@ (8011af4 <tcp_input+0x294>)
 80118ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80118f0:	4b81      	ldr	r3, [pc, #516]	@ (8011af8 <tcp_input+0x298>)
 80118f2:	2200      	movs	r2, #0
 80118f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	895a      	ldrh	r2, [r3, #10]
 80118fa:	7cbb      	ldrb	r3, [r7, #18]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	429a      	cmp	r2, r3
 8011900:	d309      	bcc.n	8011916 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011902:	4b7c      	ldr	r3, [pc, #496]	@ (8011af4 <tcp_input+0x294>)
 8011904:	881a      	ldrh	r2, [r3, #0]
 8011906:	4b7d      	ldr	r3, [pc, #500]	@ (8011afc <tcp_input+0x29c>)
 8011908:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801190a:	7cbb      	ldrb	r3, [r7, #18]
 801190c:	4619      	mov	r1, r3
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f7fd fe18 	bl	800f544 <pbuf_remove_header>
 8011914:	e04e      	b.n	80119b4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d105      	bne.n	801192a <tcp_input+0xca>
 801191e:	4b70      	ldr	r3, [pc, #448]	@ (8011ae0 <tcp_input+0x280>)
 8011920:	22c2      	movs	r2, #194	@ 0xc2
 8011922:	4977      	ldr	r1, [pc, #476]	@ (8011b00 <tcp_input+0x2a0>)
 8011924:	4870      	ldr	r0, [pc, #448]	@ (8011ae8 <tcp_input+0x288>)
 8011926:	f007 ffdd 	bl	80198e4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801192a:	2114      	movs	r1, #20
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7fd fe09 	bl	800f544 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	895a      	ldrh	r2, [r3, #10]
 8011936:	4b71      	ldr	r3, [pc, #452]	@ (8011afc <tcp_input+0x29c>)
 8011938:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801193a:	4b6e      	ldr	r3, [pc, #440]	@ (8011af4 <tcp_input+0x294>)
 801193c:	881a      	ldrh	r2, [r3, #0]
 801193e:	4b6f      	ldr	r3, [pc, #444]	@ (8011afc <tcp_input+0x29c>)
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011946:	4b6d      	ldr	r3, [pc, #436]	@ (8011afc <tcp_input+0x29c>)
 8011948:	881b      	ldrh	r3, [r3, #0]
 801194a:	4619      	mov	r1, r3
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7fd fdf9 	bl	800f544 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	895b      	ldrh	r3, [r3, #10]
 8011958:	8a3a      	ldrh	r2, [r7, #16]
 801195a:	429a      	cmp	r2, r3
 801195c:	f200 836e 	bhi.w	801203c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	4a64      	ldr	r2, [pc, #400]	@ (8011af8 <tcp_input+0x298>)
 8011968:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	8a3a      	ldrh	r2, [r7, #16]
 8011970:	4611      	mov	r1, r2
 8011972:	4618      	mov	r0, r3
 8011974:	f7fd fde6 	bl	800f544 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	891a      	ldrh	r2, [r3, #8]
 801197c:	8a3b      	ldrh	r3, [r7, #16]
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	895b      	ldrh	r3, [r3, #10]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d005      	beq.n	801199a <tcp_input+0x13a>
 801198e:	4b54      	ldr	r3, [pc, #336]	@ (8011ae0 <tcp_input+0x280>)
 8011990:	22df      	movs	r2, #223	@ 0xdf
 8011992:	495c      	ldr	r1, [pc, #368]	@ (8011b04 <tcp_input+0x2a4>)
 8011994:	4854      	ldr	r0, [pc, #336]	@ (8011ae8 <tcp_input+0x288>)
 8011996:	f007 ffa5 	bl	80198e4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	891a      	ldrh	r2, [r3, #8]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	891b      	ldrh	r3, [r3, #8]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d005      	beq.n	80119b4 <tcp_input+0x154>
 80119a8:	4b4d      	ldr	r3, [pc, #308]	@ (8011ae0 <tcp_input+0x280>)
 80119aa:	22e0      	movs	r2, #224	@ 0xe0
 80119ac:	4956      	ldr	r1, [pc, #344]	@ (8011b08 <tcp_input+0x2a8>)
 80119ae:	484e      	ldr	r0, [pc, #312]	@ (8011ae8 <tcp_input+0x288>)
 80119b0:	f007 ff98 	bl	80198e4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80119b4:	4b4d      	ldr	r3, [pc, #308]	@ (8011aec <tcp_input+0x28c>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	4a4b      	ldr	r2, [pc, #300]	@ (8011aec <tcp_input+0x28c>)
 80119be:	6814      	ldr	r4, [r2, #0]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fc fa99 	bl	800def8 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80119ca:	4b48      	ldr	r3, [pc, #288]	@ (8011aec <tcp_input+0x28c>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	885b      	ldrh	r3, [r3, #2]
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	4a46      	ldr	r2, [pc, #280]	@ (8011aec <tcp_input+0x28c>)
 80119d4:	6814      	ldr	r4, [r2, #0]
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fc fa8e 	bl	800def8 <lwip_htons>
 80119dc:	4603      	mov	r3, r0
 80119de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80119e0:	4b42      	ldr	r3, [pc, #264]	@ (8011aec <tcp_input+0x28c>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	4a41      	ldr	r2, [pc, #260]	@ (8011aec <tcp_input+0x28c>)
 80119e8:	6814      	ldr	r4, [r2, #0]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fc fa99 	bl	800df22 <lwip_htonl>
 80119f0:	4603      	mov	r3, r0
 80119f2:	6063      	str	r3, [r4, #4]
 80119f4:	6863      	ldr	r3, [r4, #4]
 80119f6:	4a45      	ldr	r2, [pc, #276]	@ (8011b0c <tcp_input+0x2ac>)
 80119f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80119fa:	4b3c      	ldr	r3, [pc, #240]	@ (8011aec <tcp_input+0x28c>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	689b      	ldr	r3, [r3, #8]
 8011a00:	4a3a      	ldr	r2, [pc, #232]	@ (8011aec <tcp_input+0x28c>)
 8011a02:	6814      	ldr	r4, [r2, #0]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fc fa8c 	bl	800df22 <lwip_htonl>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	60a3      	str	r3, [r4, #8]
 8011a0e:	68a3      	ldr	r3, [r4, #8]
 8011a10:	4a3f      	ldr	r2, [pc, #252]	@ (8011b10 <tcp_input+0x2b0>)
 8011a12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011a14:	4b35      	ldr	r3, [pc, #212]	@ (8011aec <tcp_input+0x28c>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	89db      	ldrh	r3, [r3, #14]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4a33      	ldr	r2, [pc, #204]	@ (8011aec <tcp_input+0x28c>)
 8011a1e:	6814      	ldr	r4, [r2, #0]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f7fc fa69 	bl	800def8 <lwip_htons>
 8011a26:	4603      	mov	r3, r0
 8011a28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011a2a:	4b30      	ldr	r3, [pc, #192]	@ (8011aec <tcp_input+0x28c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	899b      	ldrh	r3, [r3, #12]
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fc fa60 	bl	800def8 <lwip_htons>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	4b34      	ldr	r3, [pc, #208]	@ (8011b14 <tcp_input+0x2b4>)
 8011a44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	891a      	ldrh	r2, [r3, #8]
 8011a4a:	4b33      	ldr	r3, [pc, #204]	@ (8011b18 <tcp_input+0x2b8>)
 8011a4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011a4e:	4b31      	ldr	r3, [pc, #196]	@ (8011b14 <tcp_input+0x2b4>)
 8011a50:	781b      	ldrb	r3, [r3, #0]
 8011a52:	f003 0303 	and.w	r3, r3, #3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d00c      	beq.n	8011a74 <tcp_input+0x214>
    tcplen++;
 8011a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8011b18 <tcp_input+0x2b8>)
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	4b2d      	ldr	r3, [pc, #180]	@ (8011b18 <tcp_input+0x2b8>)
 8011a64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	891a      	ldrh	r2, [r3, #8]
 8011a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8011b18 <tcp_input+0x2b8>)
 8011a6c:	881b      	ldrh	r3, [r3, #0]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	f200 82e6 	bhi.w	8012040 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011a74:	2300      	movs	r3, #0
 8011a76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a78:	4b28      	ldr	r3, [pc, #160]	@ (8011b1c <tcp_input+0x2bc>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	61fb      	str	r3, [r7, #28]
 8011a7e:	e09d      	b.n	8011bbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	7d1b      	ldrb	r3, [r3, #20]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d105      	bne.n	8011a94 <tcp_input+0x234>
 8011a88:	4b15      	ldr	r3, [pc, #84]	@ (8011ae0 <tcp_input+0x280>)
 8011a8a:	22fb      	movs	r2, #251	@ 0xfb
 8011a8c:	4924      	ldr	r1, [pc, #144]	@ (8011b20 <tcp_input+0x2c0>)
 8011a8e:	4816      	ldr	r0, [pc, #88]	@ (8011ae8 <tcp_input+0x288>)
 8011a90:	f007 ff28 	bl	80198e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	7d1b      	ldrb	r3, [r3, #20]
 8011a98:	2b0a      	cmp	r3, #10
 8011a9a:	d105      	bne.n	8011aa8 <tcp_input+0x248>
 8011a9c:	4b10      	ldr	r3, [pc, #64]	@ (8011ae0 <tcp_input+0x280>)
 8011a9e:	22fc      	movs	r2, #252	@ 0xfc
 8011aa0:	4920      	ldr	r1, [pc, #128]	@ (8011b24 <tcp_input+0x2c4>)
 8011aa2:	4811      	ldr	r0, [pc, #68]	@ (8011ae8 <tcp_input+0x288>)
 8011aa4:	f007 ff1e 	bl	80198e4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	7d1b      	ldrb	r3, [r3, #20]
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d105      	bne.n	8011abc <tcp_input+0x25c>
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8011ae0 <tcp_input+0x280>)
 8011ab2:	22fd      	movs	r2, #253	@ 0xfd
 8011ab4:	491c      	ldr	r1, [pc, #112]	@ (8011b28 <tcp_input+0x2c8>)
 8011ab6:	480c      	ldr	r0, [pc, #48]	@ (8011ae8 <tcp_input+0x288>)
 8011ab8:	f007 ff14 	bl	80198e4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	7a1b      	ldrb	r3, [r3, #8]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d033      	beq.n	8011b2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	7a1a      	ldrb	r2, [r3, #8]
 8011ac8:	4b09      	ldr	r3, [pc, #36]	@ (8011af0 <tcp_input+0x290>)
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d029      	beq.n	8011b2c <tcp_input+0x2cc>
      prev = pcb;
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	61bb      	str	r3, [r7, #24]
      continue;
 8011adc:	e06b      	b.n	8011bb6 <tcp_input+0x356>
 8011ade:	bf00      	nop
 8011ae0:	0801dd50 	.word	0x0801dd50
 8011ae4:	0801dd84 	.word	0x0801dd84
 8011ae8:	0801dd9c 	.word	0x0801dd9c
 8011aec:	20011d40 	.word	0x20011d40
 8011af0:	2000c404 	.word	0x2000c404
 8011af4:	20011d44 	.word	0x20011d44
 8011af8:	20011d48 	.word	0x20011d48
 8011afc:	20011d46 	.word	0x20011d46
 8011b00:	0801ddc4 	.word	0x0801ddc4
 8011b04:	0801ddd4 	.word	0x0801ddd4
 8011b08:	0801dde0 	.word	0x0801dde0
 8011b0c:	20011d50 	.word	0x20011d50
 8011b10:	20011d54 	.word	0x20011d54
 8011b14:	20011d5c 	.word	0x20011d5c
 8011b18:	20011d5a 	.word	0x20011d5a
 8011b1c:	20011d24 	.word	0x20011d24
 8011b20:	0801de00 	.word	0x0801de00
 8011b24:	0801de28 	.word	0x0801de28
 8011b28:	0801de54 	.word	0x0801de54
    }

    if (pcb->remote_port == tcphdr->src &&
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	8b1a      	ldrh	r2, [r3, #24]
 8011b30:	4b72      	ldr	r3, [pc, #456]	@ (8011cfc <tcp_input+0x49c>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d13a      	bne.n	8011bb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	8ada      	ldrh	r2, [r3, #22]
 8011b40:	4b6e      	ldr	r3, [pc, #440]	@ (8011cfc <tcp_input+0x49c>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	885b      	ldrh	r3, [r3, #2]
 8011b46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d132      	bne.n	8011bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	685a      	ldr	r2, [r3, #4]
 8011b50:	4b6b      	ldr	r3, [pc, #428]	@ (8011d00 <tcp_input+0x4a0>)
 8011b52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d12c      	bne.n	8011bb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	4b68      	ldr	r3, [pc, #416]	@ (8011d00 <tcp_input+0x4a0>)
 8011b5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d126      	bne.n	8011bb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	69fa      	ldr	r2, [r7, #28]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d106      	bne.n	8011b7c <tcp_input+0x31c>
 8011b6e:	4b65      	ldr	r3, [pc, #404]	@ (8011d04 <tcp_input+0x4a4>)
 8011b70:	f240 120d 	movw	r2, #269	@ 0x10d
 8011b74:	4964      	ldr	r1, [pc, #400]	@ (8011d08 <tcp_input+0x4a8>)
 8011b76:	4865      	ldr	r0, [pc, #404]	@ (8011d0c <tcp_input+0x4ac>)
 8011b78:	f007 feb4 	bl	80198e4 <iprintf>
      if (prev != NULL) {
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d00a      	beq.n	8011b98 <tcp_input+0x338>
        prev->next = pcb->next;
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	68da      	ldr	r2, [r3, #12]
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011b8a:	4b61      	ldr	r3, [pc, #388]	@ (8011d10 <tcp_input+0x4b0>)
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011b92:	4a5f      	ldr	r2, [pc, #380]	@ (8011d10 <tcp_input+0x4b0>)
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	69fa      	ldr	r2, [r7, #28]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d111      	bne.n	8011bc6 <tcp_input+0x366>
 8011ba2:	4b58      	ldr	r3, [pc, #352]	@ (8011d04 <tcp_input+0x4a4>)
 8011ba4:	f240 1215 	movw	r2, #277	@ 0x115
 8011ba8:	495a      	ldr	r1, [pc, #360]	@ (8011d14 <tcp_input+0x4b4>)
 8011baa:	4858      	ldr	r0, [pc, #352]	@ (8011d0c <tcp_input+0x4ac>)
 8011bac:	f007 fe9a 	bl	80198e4 <iprintf>
      break;
 8011bb0:	e009      	b.n	8011bc6 <tcp_input+0x366>
    }
    prev = pcb;
 8011bb2:	69fb      	ldr	r3, [r7, #28]
 8011bb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	61fb      	str	r3, [r7, #28]
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f47f af5e 	bne.w	8011a80 <tcp_input+0x220>
 8011bc4:	e000      	b.n	8011bc8 <tcp_input+0x368>
      break;
 8011bc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8011bc8:	69fb      	ldr	r3, [r7, #28]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f040 80aa 	bne.w	8011d24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bd0:	4b51      	ldr	r3, [pc, #324]	@ (8011d18 <tcp_input+0x4b8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	61fb      	str	r3, [r7, #28]
 8011bd6:	e03f      	b.n	8011c58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	7d1b      	ldrb	r3, [r3, #20]
 8011bdc:	2b0a      	cmp	r3, #10
 8011bde:	d006      	beq.n	8011bee <tcp_input+0x38e>
 8011be0:	4b48      	ldr	r3, [pc, #288]	@ (8011d04 <tcp_input+0x4a4>)
 8011be2:	f240 121f 	movw	r2, #287	@ 0x11f
 8011be6:	494d      	ldr	r1, [pc, #308]	@ (8011d1c <tcp_input+0x4bc>)
 8011be8:	4848      	ldr	r0, [pc, #288]	@ (8011d0c <tcp_input+0x4ac>)
 8011bea:	f007 fe7b 	bl	80198e4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	7a1b      	ldrb	r3, [r3, #8]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d009      	beq.n	8011c0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011bf6:	69fb      	ldr	r3, [r7, #28]
 8011bf8:	7a1a      	ldrb	r2, [r3, #8]
 8011bfa:	4b41      	ldr	r3, [pc, #260]	@ (8011d00 <tcp_input+0x4a0>)
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c02:	3301      	adds	r3, #1
 8011c04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d122      	bne.n	8011c50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011c0a:	69fb      	ldr	r3, [r7, #28]
 8011c0c:	8b1a      	ldrh	r2, [r3, #24]
 8011c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8011cfc <tcp_input+0x49c>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	881b      	ldrh	r3, [r3, #0]
 8011c14:	b29b      	uxth	r3, r3
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d11b      	bne.n	8011c52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011c1a:	69fb      	ldr	r3, [r7, #28]
 8011c1c:	8ada      	ldrh	r2, [r3, #22]
 8011c1e:	4b37      	ldr	r3, [pc, #220]	@ (8011cfc <tcp_input+0x49c>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	885b      	ldrh	r3, [r3, #2]
 8011c24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d113      	bne.n	8011c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	4b34      	ldr	r3, [pc, #208]	@ (8011d00 <tcp_input+0x4a0>)
 8011c30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d10d      	bne.n	8011c52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	681a      	ldr	r2, [r3, #0]
 8011c3a:	4b31      	ldr	r3, [pc, #196]	@ (8011d00 <tcp_input+0x4a0>)
 8011c3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d107      	bne.n	8011c52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011c42:	69f8      	ldr	r0, [r7, #28]
 8011c44:	f000 fb56 	bl	80122f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7fd fd01 	bl	800f650 <pbuf_free>
        return;
 8011c4e:	e1fd      	b.n	801204c <tcp_input+0x7ec>
        continue;
 8011c50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	61fb      	str	r3, [r7, #28]
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d1bc      	bne.n	8011bd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011c62:	4b2f      	ldr	r3, [pc, #188]	@ (8011d20 <tcp_input+0x4c0>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e02a      	b.n	8011cc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	7a1b      	ldrb	r3, [r3, #8]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00c      	beq.n	8011c8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	7a1a      	ldrb	r2, [r3, #8]
 8011c76:	4b22      	ldr	r3, [pc, #136]	@ (8011d00 <tcp_input+0x4a0>)
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011c7e:	3301      	adds	r3, #1
 8011c80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d002      	beq.n	8011c8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	61bb      	str	r3, [r7, #24]
        continue;
 8011c8a:	e016      	b.n	8011cba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	8ada      	ldrh	r2, [r3, #22]
 8011c90:	4b1a      	ldr	r3, [pc, #104]	@ (8011cfc <tcp_input+0x49c>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	885b      	ldrh	r3, [r3, #2]
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d10c      	bne.n	8011cb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	681a      	ldr	r2, [r3, #0]
 8011ca0:	4b17      	ldr	r3, [pc, #92]	@ (8011d00 <tcp_input+0x4a0>)
 8011ca2:	695b      	ldr	r3, [r3, #20]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d00f      	beq.n	8011cc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00d      	beq.n	8011cca <tcp_input+0x46a>
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d009      	beq.n	8011cca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	617b      	str	r3, [r7, #20]
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1d1      	bne.n	8011c6a <tcp_input+0x40a>
 8011cc6:	e000      	b.n	8011cca <tcp_input+0x46a>
            break;
 8011cc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d029      	beq.n	8011d24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00a      	beq.n	8011cec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	68da      	ldr	r2, [r3, #12]
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011cde:	4b10      	ldr	r3, [pc, #64]	@ (8011d20 <tcp_input+0x4c0>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8011d20 <tcp_input+0x4c0>)
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011cec:	6978      	ldr	r0, [r7, #20]
 8011cee:	f000 fa03 	bl	80120f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7fd fcac 	bl	800f650 <pbuf_free>
      return;
 8011cf8:	e1a8      	b.n	801204c <tcp_input+0x7ec>
 8011cfa:	bf00      	nop
 8011cfc:	20011d40 	.word	0x20011d40
 8011d00:	2000c404 	.word	0x2000c404
 8011d04:	0801dd50 	.word	0x0801dd50
 8011d08:	0801de7c 	.word	0x0801de7c
 8011d0c:	0801dd9c 	.word	0x0801dd9c
 8011d10:	20011d24 	.word	0x20011d24
 8011d14:	0801dea8 	.word	0x0801dea8
 8011d18:	20011d28 	.word	0x20011d28
 8011d1c:	0801ded4 	.word	0x0801ded4
 8011d20:	20011d20 	.word	0x20011d20
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 8158 	beq.w	8011fdc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011d2c:	4b95      	ldr	r3, [pc, #596]	@ (8011f84 <tcp_input+0x724>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	891a      	ldrh	r2, [r3, #8]
 8011d36:	4b93      	ldr	r3, [pc, #588]	@ (8011f84 <tcp_input+0x724>)
 8011d38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011d3a:	4a92      	ldr	r2, [pc, #584]	@ (8011f84 <tcp_input+0x724>)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011d40:	4b91      	ldr	r3, [pc, #580]	@ (8011f88 <tcp_input+0x728>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4a8f      	ldr	r2, [pc, #572]	@ (8011f84 <tcp_input+0x724>)
 8011d46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011d48:	4b90      	ldr	r3, [pc, #576]	@ (8011f8c <tcp_input+0x72c>)
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011d4e:	4b90      	ldr	r3, [pc, #576]	@ (8011f90 <tcp_input+0x730>)
 8011d50:	2200      	movs	r2, #0
 8011d52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011d54:	4b8f      	ldr	r3, [pc, #572]	@ (8011f94 <tcp_input+0x734>)
 8011d56:	2200      	movs	r2, #0
 8011d58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8011f98 <tcp_input+0x738>)
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	f003 0308 	and.w	r3, r3, #8
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d006      	beq.n	8011d74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	7b5b      	ldrb	r3, [r3, #13]
 8011d6a:	f043 0301 	orr.w	r3, r3, #1
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d017      	beq.n	8011dac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d7c:	69f8      	ldr	r0, [r7, #28]
 8011d7e:	f7ff f85b 	bl	8010e38 <tcp_process_refused_data>
 8011d82:	4603      	mov	r3, r0
 8011d84:	f113 0f0d 	cmn.w	r3, #13
 8011d88:	d007      	beq.n	8011d9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00c      	beq.n	8011dac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011d92:	4b82      	ldr	r3, [pc, #520]	@ (8011f9c <tcp_input+0x73c>)
 8011d94:	881b      	ldrh	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d008      	beq.n	8011dac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011d9a:	69fb      	ldr	r3, [r7, #28]
 8011d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 80e3 	bne.w	8011f6a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011da4:	69f8      	ldr	r0, [r7, #28]
 8011da6:	f003 fdff 	bl	80159a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011daa:	e0de      	b.n	8011f6a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011dac:	4a7c      	ldr	r2, [pc, #496]	@ (8011fa0 <tcp_input+0x740>)
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011db2:	69f8      	ldr	r0, [r7, #28]
 8011db4:	f000 fb18 	bl	80123e8 <tcp_process>
 8011db8:	4603      	mov	r3, r0
 8011dba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011dbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011dc0:	f113 0f0d 	cmn.w	r3, #13
 8011dc4:	f000 80d3 	beq.w	8011f6e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011dc8:	4b71      	ldr	r3, [pc, #452]	@ (8011f90 <tcp_input+0x730>)
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	f003 0308 	and.w	r3, r3, #8
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d015      	beq.n	8011e00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d008      	beq.n	8011df0 <tcp_input+0x590>
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011de4:	69fa      	ldr	r2, [r7, #28]
 8011de6:	6912      	ldr	r2, [r2, #16]
 8011de8:	f06f 010d 	mvn.w	r1, #13
 8011dec:	4610      	mov	r0, r2
 8011dee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011df0:	69f9      	ldr	r1, [r7, #28]
 8011df2:	486c      	ldr	r0, [pc, #432]	@ (8011fa4 <tcp_input+0x744>)
 8011df4:	f7ff fbbc 	bl	8011570 <tcp_pcb_remove>
        tcp_free(pcb);
 8011df8:	69f8      	ldr	r0, [r7, #28]
 8011dfa:	f7fd fed5 	bl	800fba8 <tcp_free>
 8011dfe:	e0da      	b.n	8011fb6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011e00:	2300      	movs	r3, #0
 8011e02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011e04:	4b63      	ldr	r3, [pc, #396]	@ (8011f94 <tcp_input+0x734>)
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d01d      	beq.n	8011e48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011e0c:	4b61      	ldr	r3, [pc, #388]	@ (8011f94 <tcp_input+0x734>)
 8011e0e:	881b      	ldrh	r3, [r3, #0]
 8011e10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d00a      	beq.n	8011e32 <tcp_input+0x5d2>
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011e22:	69fa      	ldr	r2, [r7, #28]
 8011e24:	6910      	ldr	r0, [r2, #16]
 8011e26:	89fa      	ldrh	r2, [r7, #14]
 8011e28:	69f9      	ldr	r1, [r7, #28]
 8011e2a:	4798      	blx	r3
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	74fb      	strb	r3, [r7, #19]
 8011e30:	e001      	b.n	8011e36 <tcp_input+0x5d6>
 8011e32:	2300      	movs	r3, #0
 8011e34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011e36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e3a:	f113 0f0d 	cmn.w	r3, #13
 8011e3e:	f000 8098 	beq.w	8011f72 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011e42:	4b54      	ldr	r3, [pc, #336]	@ (8011f94 <tcp_input+0x734>)
 8011e44:	2200      	movs	r2, #0
 8011e46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011e48:	69f8      	ldr	r0, [r7, #28]
 8011e4a:	f000 f915 	bl	8012078 <tcp_input_delayed_close>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f040 8090 	bne.w	8011f76 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011e56:	4b4d      	ldr	r3, [pc, #308]	@ (8011f8c <tcp_input+0x72c>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d041      	beq.n	8011ee2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d006      	beq.n	8011e74 <tcp_input+0x614>
 8011e66:	4b50      	ldr	r3, [pc, #320]	@ (8011fa8 <tcp_input+0x748>)
 8011e68:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e6c:	494f      	ldr	r1, [pc, #316]	@ (8011fac <tcp_input+0x74c>)
 8011e6e:	4850      	ldr	r0, [pc, #320]	@ (8011fb0 <tcp_input+0x750>)
 8011e70:	f007 fd38 	bl	80198e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	8b5b      	ldrh	r3, [r3, #26]
 8011e78:	f003 0310 	and.w	r3, r3, #16
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d008      	beq.n	8011e92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011e80:	4b42      	ldr	r3, [pc, #264]	@ (8011f8c <tcp_input+0x72c>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fd fbe3 	bl	800f650 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011e8a:	69f8      	ldr	r0, [r7, #28]
 8011e8c:	f7fe f9d0 	bl	8010230 <tcp_abort>
            goto aborted;
 8011e90:	e091      	b.n	8011fb6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00c      	beq.n	8011eb6 <tcp_input+0x656>
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	6918      	ldr	r0, [r3, #16]
 8011ea6:	4b39      	ldr	r3, [pc, #228]	@ (8011f8c <tcp_input+0x72c>)
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	2300      	movs	r3, #0
 8011eac:	69f9      	ldr	r1, [r7, #28]
 8011eae:	47a0      	blx	r4
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	74fb      	strb	r3, [r7, #19]
 8011eb4:	e008      	b.n	8011ec8 <tcp_input+0x668>
 8011eb6:	4b35      	ldr	r3, [pc, #212]	@ (8011f8c <tcp_input+0x72c>)
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	69f9      	ldr	r1, [r7, #28]
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	f7ff f890 	bl	8010fe4 <tcp_recv_null>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011ec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ecc:	f113 0f0d 	cmn.w	r3, #13
 8011ed0:	d053      	beq.n	8011f7a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011ed2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d003      	beq.n	8011ee2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011eda:	4b2c      	ldr	r3, [pc, #176]	@ (8011f8c <tcp_input+0x72c>)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	69fb      	ldr	r3, [r7, #28]
 8011ee0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8011f90 <tcp_input+0x730>)
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	f003 0320 	and.w	r3, r3, #32
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d030      	beq.n	8011f50 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d009      	beq.n	8011f0a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011ef6:	69fb      	ldr	r3, [r7, #28]
 8011ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011efa:	7b5a      	ldrb	r2, [r3, #13]
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f00:	f042 0220 	orr.w	r2, r2, #32
 8011f04:	b2d2      	uxtb	r2, r2
 8011f06:	735a      	strb	r2, [r3, #13]
 8011f08:	e022      	b.n	8011f50 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f0e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011f12:	d005      	beq.n	8011f20 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f18:	3301      	adds	r3, #1
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d00b      	beq.n	8011f42 <tcp_input+0x6e2>
 8011f2a:	69fb      	ldr	r3, [r7, #28]
 8011f2c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	6918      	ldr	r0, [r3, #16]
 8011f34:	2300      	movs	r3, #0
 8011f36:	2200      	movs	r2, #0
 8011f38:	69f9      	ldr	r1, [r7, #28]
 8011f3a:	47a0      	blx	r4
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	74fb      	strb	r3, [r7, #19]
 8011f40:	e001      	b.n	8011f46 <tcp_input+0x6e6>
 8011f42:	2300      	movs	r3, #0
 8011f44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011f46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f4a:	f113 0f0d 	cmn.w	r3, #13
 8011f4e:	d016      	beq.n	8011f7e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011f50:	4b13      	ldr	r3, [pc, #76]	@ (8011fa0 <tcp_input+0x740>)
 8011f52:	2200      	movs	r2, #0
 8011f54:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011f56:	69f8      	ldr	r0, [r7, #28]
 8011f58:	f000 f88e 	bl	8012078 <tcp_input_delayed_close>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d128      	bne.n	8011fb4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011f62:	69f8      	ldr	r0, [r7, #28]
 8011f64:	f002 ff1a 	bl	8014d9c <tcp_output>
 8011f68:	e025      	b.n	8011fb6 <tcp_input+0x756>
        goto aborted;
 8011f6a:	bf00      	nop
 8011f6c:	e023      	b.n	8011fb6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011f6e:	bf00      	nop
 8011f70:	e021      	b.n	8011fb6 <tcp_input+0x756>
              goto aborted;
 8011f72:	bf00      	nop
 8011f74:	e01f      	b.n	8011fb6 <tcp_input+0x756>
          goto aborted;
 8011f76:	bf00      	nop
 8011f78:	e01d      	b.n	8011fb6 <tcp_input+0x756>
            goto aborted;
 8011f7a:	bf00      	nop
 8011f7c:	e01b      	b.n	8011fb6 <tcp_input+0x756>
              goto aborted;
 8011f7e:	bf00      	nop
 8011f80:	e019      	b.n	8011fb6 <tcp_input+0x756>
 8011f82:	bf00      	nop
 8011f84:	20011d30 	.word	0x20011d30
 8011f88:	20011d40 	.word	0x20011d40
 8011f8c:	20011d60 	.word	0x20011d60
 8011f90:	20011d5d 	.word	0x20011d5d
 8011f94:	20011d58 	.word	0x20011d58
 8011f98:	20011d5c 	.word	0x20011d5c
 8011f9c:	20011d5a 	.word	0x20011d5a
 8011fa0:	20011d64 	.word	0x20011d64
 8011fa4:	20011d24 	.word	0x20011d24
 8011fa8:	0801dd50 	.word	0x0801dd50
 8011fac:	0801df04 	.word	0x0801df04
 8011fb0:	0801dd9c 	.word	0x0801dd9c
          goto aborted;
 8011fb4:	bf00      	nop
    tcp_input_pcb = NULL;
 8011fb6:	4b27      	ldr	r3, [pc, #156]	@ (8012054 <tcp_input+0x7f4>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011fbc:	4b26      	ldr	r3, [pc, #152]	@ (8012058 <tcp_input+0x7f8>)
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011fc2:	4b26      	ldr	r3, [pc, #152]	@ (801205c <tcp_input+0x7fc>)
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d03f      	beq.n	801204a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011fca:	4b24      	ldr	r3, [pc, #144]	@ (801205c <tcp_input+0x7fc>)
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f7fd fb3e 	bl	800f650 <pbuf_free>
      inseg.p = NULL;
 8011fd4:	4b21      	ldr	r3, [pc, #132]	@ (801205c <tcp_input+0x7fc>)
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011fda:	e036      	b.n	801204a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011fdc:	4b20      	ldr	r3, [pc, #128]	@ (8012060 <tcp_input+0x800>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	899b      	ldrh	r3, [r3, #12]
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fb ff87 	bl	800def8 <lwip_htons>
 8011fea:	4603      	mov	r3, r0
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	f003 0304 	and.w	r3, r3, #4
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d118      	bne.n	8012028 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8012064 <tcp_input+0x804>)
 8011ff8:	6819      	ldr	r1, [r3, #0]
 8011ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8012068 <tcp_input+0x808>)
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	461a      	mov	r2, r3
 8012000:	4b1a      	ldr	r3, [pc, #104]	@ (801206c <tcp_input+0x80c>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012006:	4b16      	ldr	r3, [pc, #88]	@ (8012060 <tcp_input+0x800>)
 8012008:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801200a:	885b      	ldrh	r3, [r3, #2]
 801200c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801200e:	4a14      	ldr	r2, [pc, #80]	@ (8012060 <tcp_input+0x800>)
 8012010:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012012:	8812      	ldrh	r2, [r2, #0]
 8012014:	b292      	uxth	r2, r2
 8012016:	9202      	str	r2, [sp, #8]
 8012018:	9301      	str	r3, [sp, #4]
 801201a:	4b15      	ldr	r3, [pc, #84]	@ (8012070 <tcp_input+0x810>)
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	4b15      	ldr	r3, [pc, #84]	@ (8012074 <tcp_input+0x814>)
 8012020:	4602      	mov	r2, r0
 8012022:	2000      	movs	r0, #0
 8012024:	f003 fc6e 	bl	8015904 <tcp_rst>
    pbuf_free(p);
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f7fd fb11 	bl	800f650 <pbuf_free>
  return;
 801202e:	e00c      	b.n	801204a <tcp_input+0x7ea>
    goto dropped;
 8012030:	bf00      	nop
 8012032:	e006      	b.n	8012042 <tcp_input+0x7e2>
    goto dropped;
 8012034:	bf00      	nop
 8012036:	e004      	b.n	8012042 <tcp_input+0x7e2>
    goto dropped;
 8012038:	bf00      	nop
 801203a:	e002      	b.n	8012042 <tcp_input+0x7e2>
      goto dropped;
 801203c:	bf00      	nop
 801203e:	e000      	b.n	8012042 <tcp_input+0x7e2>
      goto dropped;
 8012040:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7fd fb04 	bl	800f650 <pbuf_free>
 8012048:	e000      	b.n	801204c <tcp_input+0x7ec>
  return;
 801204a:	bf00      	nop
}
 801204c:	3724      	adds	r7, #36	@ 0x24
 801204e:	46bd      	mov	sp, r7
 8012050:	bd90      	pop	{r4, r7, pc}
 8012052:	bf00      	nop
 8012054:	20011d64 	.word	0x20011d64
 8012058:	20011d60 	.word	0x20011d60
 801205c:	20011d30 	.word	0x20011d30
 8012060:	20011d40 	.word	0x20011d40
 8012064:	20011d54 	.word	0x20011d54
 8012068:	20011d5a 	.word	0x20011d5a
 801206c:	20011d50 	.word	0x20011d50
 8012070:	2000c414 	.word	0x2000c414
 8012074:	2000c418 	.word	0x2000c418

08012078 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d106      	bne.n	8012094 <tcp_input_delayed_close+0x1c>
 8012086:	4b17      	ldr	r3, [pc, #92]	@ (80120e4 <tcp_input_delayed_close+0x6c>)
 8012088:	f240 225a 	movw	r2, #602	@ 0x25a
 801208c:	4916      	ldr	r1, [pc, #88]	@ (80120e8 <tcp_input_delayed_close+0x70>)
 801208e:	4817      	ldr	r0, [pc, #92]	@ (80120ec <tcp_input_delayed_close+0x74>)
 8012090:	f007 fc28 	bl	80198e4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012094:	4b16      	ldr	r3, [pc, #88]	@ (80120f0 <tcp_input_delayed_close+0x78>)
 8012096:	781b      	ldrb	r3, [r3, #0]
 8012098:	f003 0310 	and.w	r3, r3, #16
 801209c:	2b00      	cmp	r3, #0
 801209e:	d01c      	beq.n	80120da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	8b5b      	ldrh	r3, [r3, #26]
 80120a4:	f003 0310 	and.w	r3, r3, #16
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10d      	bne.n	80120c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d008      	beq.n	80120c8 <tcp_input_delayed_close+0x50>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	6912      	ldr	r2, [r2, #16]
 80120c0:	f06f 010e 	mvn.w	r1, #14
 80120c4:	4610      	mov	r0, r2
 80120c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80120c8:	6879      	ldr	r1, [r7, #4]
 80120ca:	480a      	ldr	r0, [pc, #40]	@ (80120f4 <tcp_input_delayed_close+0x7c>)
 80120cc:	f7ff fa50 	bl	8011570 <tcp_pcb_remove>
    tcp_free(pcb);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7fd fd69 	bl	800fba8 <tcp_free>
    return 1;
 80120d6:	2301      	movs	r3, #1
 80120d8:	e000      	b.n	80120dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80120da:	2300      	movs	r3, #0
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3708      	adds	r7, #8
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}
 80120e4:	0801dd50 	.word	0x0801dd50
 80120e8:	0801df20 	.word	0x0801df20
 80120ec:	0801dd9c 	.word	0x0801dd9c
 80120f0:	20011d5d 	.word	0x20011d5d
 80120f4:	20011d24 	.word	0x20011d24

080120f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80120f8:	b590      	push	{r4, r7, lr}
 80120fa:	b08b      	sub	sp, #44	@ 0x2c
 80120fc:	af04      	add	r7, sp, #16
 80120fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012100:	4b6f      	ldr	r3, [pc, #444]	@ (80122c0 <tcp_listen_input+0x1c8>)
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	f003 0304 	and.w	r3, r3, #4
 8012108:	2b00      	cmp	r3, #0
 801210a:	f040 80d2 	bne.w	80122b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d106      	bne.n	8012122 <tcp_listen_input+0x2a>
 8012114:	4b6b      	ldr	r3, [pc, #428]	@ (80122c4 <tcp_listen_input+0x1cc>)
 8012116:	f240 2281 	movw	r2, #641	@ 0x281
 801211a:	496b      	ldr	r1, [pc, #428]	@ (80122c8 <tcp_listen_input+0x1d0>)
 801211c:	486b      	ldr	r0, [pc, #428]	@ (80122cc <tcp_listen_input+0x1d4>)
 801211e:	f007 fbe1 	bl	80198e4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012122:	4b67      	ldr	r3, [pc, #412]	@ (80122c0 <tcp_listen_input+0x1c8>)
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f003 0310 	and.w	r3, r3, #16
 801212a:	2b00      	cmp	r3, #0
 801212c:	d019      	beq.n	8012162 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801212e:	4b68      	ldr	r3, [pc, #416]	@ (80122d0 <tcp_listen_input+0x1d8>)
 8012130:	6819      	ldr	r1, [r3, #0]
 8012132:	4b68      	ldr	r3, [pc, #416]	@ (80122d4 <tcp_listen_input+0x1dc>)
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	461a      	mov	r2, r3
 8012138:	4b67      	ldr	r3, [pc, #412]	@ (80122d8 <tcp_listen_input+0x1e0>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801213e:	4b67      	ldr	r3, [pc, #412]	@ (80122dc <tcp_listen_input+0x1e4>)
 8012140:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012142:	885b      	ldrh	r3, [r3, #2]
 8012144:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012146:	4a65      	ldr	r2, [pc, #404]	@ (80122dc <tcp_listen_input+0x1e4>)
 8012148:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801214a:	8812      	ldrh	r2, [r2, #0]
 801214c:	b292      	uxth	r2, r2
 801214e:	9202      	str	r2, [sp, #8]
 8012150:	9301      	str	r3, [sp, #4]
 8012152:	4b63      	ldr	r3, [pc, #396]	@ (80122e0 <tcp_listen_input+0x1e8>)
 8012154:	9300      	str	r3, [sp, #0]
 8012156:	4b63      	ldr	r3, [pc, #396]	@ (80122e4 <tcp_listen_input+0x1ec>)
 8012158:	4602      	mov	r2, r0
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f003 fbd2 	bl	8015904 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012160:	e0a9      	b.n	80122b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012162:	4b57      	ldr	r3, [pc, #348]	@ (80122c0 <tcp_listen_input+0x1c8>)
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	f003 0302 	and.w	r3, r3, #2
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 80a3 	beq.w	80122b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7d5b      	ldrb	r3, [r3, #21]
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff f859 	bl	801122c <tcp_alloc>
 801217a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d111      	bne.n	80121a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	699b      	ldr	r3, [r3, #24]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <tcp_listen_input+0xa8>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	699b      	ldr	r3, [r3, #24]
 801218e:	687a      	ldr	r2, [r7, #4]
 8012190:	6910      	ldr	r0, [r2, #16]
 8012192:	f04f 32ff 	mov.w	r2, #4294967295
 8012196:	2100      	movs	r1, #0
 8012198:	4798      	blx	r3
 801219a:	4603      	mov	r3, r0
 801219c:	73bb      	strb	r3, [r7, #14]
      return;
 801219e:	e08b      	b.n	80122b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80121a0:	23f0      	movs	r3, #240	@ 0xf0
 80121a2:	73bb      	strb	r3, [r7, #14]
      return;
 80121a4:	e088      	b.n	80122b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80121a6:	4b50      	ldr	r3, [pc, #320]	@ (80122e8 <tcp_listen_input+0x1f0>)
 80121a8:	695a      	ldr	r2, [r3, #20]
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80121ae:	4b4e      	ldr	r3, [pc, #312]	@ (80122e8 <tcp_listen_input+0x1f0>)
 80121b0:	691a      	ldr	r2, [r3, #16]
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	8ada      	ldrh	r2, [r3, #22]
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80121be:	4b47      	ldr	r3, [pc, #284]	@ (80122dc <tcp_listen_input+0x1e4>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	881b      	ldrh	r3, [r3, #0]
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2203      	movs	r2, #3
 80121ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80121d0:	4b41      	ldr	r3, [pc, #260]	@ (80122d8 <tcp_listen_input+0x1e0>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	1c5a      	adds	r2, r3, #1
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121de:	697b      	ldr	r3, [r7, #20]
 80121e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80121e2:	6978      	ldr	r0, [r7, #20]
 80121e4:	f7ff fa58 	bl	8011698 <tcp_next_iss>
 80121e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	693a      	ldr	r2, [r7, #16]
 80121ee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	693a      	ldr	r2, [r7, #16]
 80121f4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	693a      	ldr	r2, [r7, #16]
 80121fa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	693a      	ldr	r2, [r7, #16]
 8012200:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012202:	4b35      	ldr	r3, [pc, #212]	@ (80122d8 <tcp_listen_input+0x1e0>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	1e5a      	subs	r2, r3, #1
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	691a      	ldr	r2, [r3, #16]
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	687a      	ldr	r2, [r7, #4]
 8012218:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	7a5b      	ldrb	r3, [r3, #9]
 801221e:	f003 030c 	and.w	r3, r3, #12
 8012222:	b2da      	uxtb	r2, r3
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	7a1a      	ldrb	r2, [r3, #8]
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012230:	4b2e      	ldr	r3, [pc, #184]	@ (80122ec <tcp_listen_input+0x1f4>)
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	60da      	str	r2, [r3, #12]
 8012238:	4a2c      	ldr	r2, [pc, #176]	@ (80122ec <tcp_listen_input+0x1f4>)
 801223a:	697b      	ldr	r3, [r7, #20]
 801223c:	6013      	str	r3, [r2, #0]
 801223e:	f003 fd23 	bl	8015c88 <tcp_timer_needed>
 8012242:	4b2b      	ldr	r3, [pc, #172]	@ (80122f0 <tcp_listen_input+0x1f8>)
 8012244:	2201      	movs	r2, #1
 8012246:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012248:	6978      	ldr	r0, [r7, #20]
 801224a:	f001 fd8b 	bl	8013d64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801224e:	4b23      	ldr	r3, [pc, #140]	@ (80122dc <tcp_listen_input+0x1e4>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	89db      	ldrh	r3, [r3, #14]
 8012254:	b29a      	uxth	r2, r3
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	3304      	adds	r3, #4
 8012270:	4618      	mov	r0, r3
 8012272:	f005 fa5d 	bl	8017730 <ip4_route>
 8012276:	4601      	mov	r1, r0
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	3304      	adds	r3, #4
 801227c:	461a      	mov	r2, r3
 801227e:	4620      	mov	r0, r4
 8012280:	f7ff fa30 	bl	80116e4 <tcp_eff_send_mss_netif>
 8012284:	4603      	mov	r3, r0
 8012286:	461a      	mov	r2, r3
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801228c:	2112      	movs	r1, #18
 801228e:	6978      	ldr	r0, [r7, #20]
 8012290:	f002 fc96 	bl	8014bc0 <tcp_enqueue_flags>
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d004      	beq.n	80122aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80122a0:	2100      	movs	r1, #0
 80122a2:	6978      	ldr	r0, [r7, #20]
 80122a4:	f7fd ff06 	bl	80100b4 <tcp_abandon>
      return;
 80122a8:	e006      	b.n	80122b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80122aa:	6978      	ldr	r0, [r7, #20]
 80122ac:	f002 fd76 	bl	8014d9c <tcp_output>
  return;
 80122b0:	e001      	b.n	80122b6 <tcp_listen_input+0x1be>
    return;
 80122b2:	bf00      	nop
 80122b4:	e000      	b.n	80122b8 <tcp_listen_input+0x1c0>
  return;
 80122b6:	bf00      	nop
}
 80122b8:	371c      	adds	r7, #28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd90      	pop	{r4, r7, pc}
 80122be:	bf00      	nop
 80122c0:	20011d5c 	.word	0x20011d5c
 80122c4:	0801dd50 	.word	0x0801dd50
 80122c8:	0801df48 	.word	0x0801df48
 80122cc:	0801dd9c 	.word	0x0801dd9c
 80122d0:	20011d54 	.word	0x20011d54
 80122d4:	20011d5a 	.word	0x20011d5a
 80122d8:	20011d50 	.word	0x20011d50
 80122dc:	20011d40 	.word	0x20011d40
 80122e0:	2000c414 	.word	0x2000c414
 80122e4:	2000c418 	.word	0x2000c418
 80122e8:	2000c404 	.word	0x2000c404
 80122ec:	20011d24 	.word	0x20011d24
 80122f0:	20011d2c 	.word	0x20011d2c

080122f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af04      	add	r7, sp, #16
 80122fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80122fc:	4b2f      	ldr	r3, [pc, #188]	@ (80123bc <tcp_timewait_input+0xc8>)
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	f003 0304 	and.w	r3, r3, #4
 8012304:	2b00      	cmp	r3, #0
 8012306:	d153      	bne.n	80123b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d106      	bne.n	801231c <tcp_timewait_input+0x28>
 801230e:	4b2c      	ldr	r3, [pc, #176]	@ (80123c0 <tcp_timewait_input+0xcc>)
 8012310:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012314:	492b      	ldr	r1, [pc, #172]	@ (80123c4 <tcp_timewait_input+0xd0>)
 8012316:	482c      	ldr	r0, [pc, #176]	@ (80123c8 <tcp_timewait_input+0xd4>)
 8012318:	f007 fae4 	bl	80198e4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801231c:	4b27      	ldr	r3, [pc, #156]	@ (80123bc <tcp_timewait_input+0xc8>)
 801231e:	781b      	ldrb	r3, [r3, #0]
 8012320:	f003 0302 	and.w	r3, r3, #2
 8012324:	2b00      	cmp	r3, #0
 8012326:	d02a      	beq.n	801237e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012328:	4b28      	ldr	r3, [pc, #160]	@ (80123cc <tcp_timewait_input+0xd8>)
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	db2d      	blt.n	8012392 <tcp_timewait_input+0x9e>
 8012336:	4b25      	ldr	r3, [pc, #148]	@ (80123cc <tcp_timewait_input+0xd8>)
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801233e:	6879      	ldr	r1, [r7, #4]
 8012340:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012342:	440b      	add	r3, r1
 8012344:	1ad3      	subs	r3, r2, r3
 8012346:	2b00      	cmp	r3, #0
 8012348:	dc23      	bgt.n	8012392 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801234a:	4b21      	ldr	r3, [pc, #132]	@ (80123d0 <tcp_timewait_input+0xdc>)
 801234c:	6819      	ldr	r1, [r3, #0]
 801234e:	4b21      	ldr	r3, [pc, #132]	@ (80123d4 <tcp_timewait_input+0xe0>)
 8012350:	881b      	ldrh	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	4b1d      	ldr	r3, [pc, #116]	@ (80123cc <tcp_timewait_input+0xd8>)
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801235a:	4b1f      	ldr	r3, [pc, #124]	@ (80123d8 <tcp_timewait_input+0xe4>)
 801235c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801235e:	885b      	ldrh	r3, [r3, #2]
 8012360:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012362:	4a1d      	ldr	r2, [pc, #116]	@ (80123d8 <tcp_timewait_input+0xe4>)
 8012364:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012366:	8812      	ldrh	r2, [r2, #0]
 8012368:	b292      	uxth	r2, r2
 801236a:	9202      	str	r2, [sp, #8]
 801236c:	9301      	str	r3, [sp, #4]
 801236e:	4b1b      	ldr	r3, [pc, #108]	@ (80123dc <tcp_timewait_input+0xe8>)
 8012370:	9300      	str	r3, [sp, #0]
 8012372:	4b1b      	ldr	r3, [pc, #108]	@ (80123e0 <tcp_timewait_input+0xec>)
 8012374:	4602      	mov	r2, r0
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f003 fac4 	bl	8015904 <tcp_rst>
      return;
 801237c:	e01b      	b.n	80123b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801237e:	4b0f      	ldr	r3, [pc, #60]	@ (80123bc <tcp_timewait_input+0xc8>)
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	f003 0301 	and.w	r3, r3, #1
 8012386:	2b00      	cmp	r3, #0
 8012388:	d003      	beq.n	8012392 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801238a:	4b16      	ldr	r3, [pc, #88]	@ (80123e4 <tcp_timewait_input+0xf0>)
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012392:	4b10      	ldr	r3, [pc, #64]	@ (80123d4 <tcp_timewait_input+0xe0>)
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00c      	beq.n	80123b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	8b5b      	ldrh	r3, [r3, #26]
 801239e:	f043 0302 	orr.w	r3, r3, #2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f002 fcf7 	bl	8014d9c <tcp_output>
  }
  return;
 80123ae:	e001      	b.n	80123b4 <tcp_timewait_input+0xc0>
    return;
 80123b0:	bf00      	nop
 80123b2:	e000      	b.n	80123b6 <tcp_timewait_input+0xc2>
  return;
 80123b4:	bf00      	nop
}
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	20011d5c 	.word	0x20011d5c
 80123c0:	0801dd50 	.word	0x0801dd50
 80123c4:	0801df68 	.word	0x0801df68
 80123c8:	0801dd9c 	.word	0x0801dd9c
 80123cc:	20011d50 	.word	0x20011d50
 80123d0:	20011d54 	.word	0x20011d54
 80123d4:	20011d5a 	.word	0x20011d5a
 80123d8:	20011d40 	.word	0x20011d40
 80123dc:	2000c414 	.word	0x2000c414
 80123e0:	2000c418 	.word	0x2000c418
 80123e4:	20011d18 	.word	0x20011d18

080123e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b08d      	sub	sp, #52	@ 0x34
 80123ec:	af04      	add	r7, sp, #16
 80123ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80123f4:	2300      	movs	r3, #0
 80123f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d106      	bne.n	801240c <tcp_process+0x24>
 80123fe:	4b9d      	ldr	r3, [pc, #628]	@ (8012674 <tcp_process+0x28c>)
 8012400:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012404:	499c      	ldr	r1, [pc, #624]	@ (8012678 <tcp_process+0x290>)
 8012406:	489d      	ldr	r0, [pc, #628]	@ (801267c <tcp_process+0x294>)
 8012408:	f007 fa6c 	bl	80198e4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801240c:	4b9c      	ldr	r3, [pc, #624]	@ (8012680 <tcp_process+0x298>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	f003 0304 	and.w	r3, r3, #4
 8012414:	2b00      	cmp	r3, #0
 8012416:	d04e      	beq.n	80124b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	7d1b      	ldrb	r3, [r3, #20]
 801241c:	2b02      	cmp	r3, #2
 801241e:	d108      	bne.n	8012432 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012424:	4b97      	ldr	r3, [pc, #604]	@ (8012684 <tcp_process+0x29c>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	429a      	cmp	r2, r3
 801242a:	d123      	bne.n	8012474 <tcp_process+0x8c>
        acceptable = 1;
 801242c:	2301      	movs	r3, #1
 801242e:	76fb      	strb	r3, [r7, #27]
 8012430:	e020      	b.n	8012474 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012436:	4b94      	ldr	r3, [pc, #592]	@ (8012688 <tcp_process+0x2a0>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	429a      	cmp	r2, r3
 801243c:	d102      	bne.n	8012444 <tcp_process+0x5c>
        acceptable = 1;
 801243e:	2301      	movs	r3, #1
 8012440:	76fb      	strb	r3, [r7, #27]
 8012442:	e017      	b.n	8012474 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012444:	4b90      	ldr	r3, [pc, #576]	@ (8012688 <tcp_process+0x2a0>)
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801244c:	1ad3      	subs	r3, r2, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	db10      	blt.n	8012474 <tcp_process+0x8c>
 8012452:	4b8d      	ldr	r3, [pc, #564]	@ (8012688 <tcp_process+0x2a0>)
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801245a:	6879      	ldr	r1, [r7, #4]
 801245c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801245e:	440b      	add	r3, r1
 8012460:	1ad3      	subs	r3, r2, r3
 8012462:	2b00      	cmp	r3, #0
 8012464:	dc06      	bgt.n	8012474 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	8b5b      	ldrh	r3, [r3, #26]
 801246a:	f043 0302 	orr.w	r3, r3, #2
 801246e:	b29a      	uxth	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012474:	7efb      	ldrb	r3, [r7, #27]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d01b      	beq.n	80124b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	7d1b      	ldrb	r3, [r3, #20]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d106      	bne.n	8012490 <tcp_process+0xa8>
 8012482:	4b7c      	ldr	r3, [pc, #496]	@ (8012674 <tcp_process+0x28c>)
 8012484:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8012488:	4980      	ldr	r1, [pc, #512]	@ (801268c <tcp_process+0x2a4>)
 801248a:	487c      	ldr	r0, [pc, #496]	@ (801267c <tcp_process+0x294>)
 801248c:	f007 fa2a 	bl	80198e4 <iprintf>
      recv_flags |= TF_RESET;
 8012490:	4b7f      	ldr	r3, [pc, #508]	@ (8012690 <tcp_process+0x2a8>)
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	f043 0308 	orr.w	r3, r3, #8
 8012498:	b2da      	uxtb	r2, r3
 801249a:	4b7d      	ldr	r3, [pc, #500]	@ (8012690 <tcp_process+0x2a8>)
 801249c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	8b5b      	ldrh	r3, [r3, #26]
 80124a2:	f023 0301 	bic.w	r3, r3, #1
 80124a6:	b29a      	uxth	r2, r3
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80124ac:	f06f 030d 	mvn.w	r3, #13
 80124b0:	e37a      	b.n	8012ba8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80124b2:	2300      	movs	r3, #0
 80124b4:	e378      	b.n	8012ba8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80124b6:	4b72      	ldr	r3, [pc, #456]	@ (8012680 <tcp_process+0x298>)
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	f003 0302 	and.w	r3, r3, #2
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d010      	beq.n	80124e4 <tcp_process+0xfc>
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	7d1b      	ldrb	r3, [r3, #20]
 80124c6:	2b02      	cmp	r3, #2
 80124c8:	d00c      	beq.n	80124e4 <tcp_process+0xfc>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	7d1b      	ldrb	r3, [r3, #20]
 80124ce:	2b03      	cmp	r3, #3
 80124d0:	d008      	beq.n	80124e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	8b5b      	ldrh	r3, [r3, #26]
 80124d6:	f043 0302 	orr.w	r3, r3, #2
 80124da:	b29a      	uxth	r2, r3
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80124e0:	2300      	movs	r3, #0
 80124e2:	e361      	b.n	8012ba8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	8b5b      	ldrh	r3, [r3, #26]
 80124e8:	f003 0310 	and.w	r3, r3, #16
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d103      	bne.n	80124f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80124f0:	4b68      	ldr	r3, [pc, #416]	@ (8012694 <tcp_process+0x2ac>)
 80124f2:	681a      	ldr	r2, [r3, #0]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f001 fc2b 	bl	8013d64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	7d1b      	ldrb	r3, [r3, #20]
 8012512:	3b02      	subs	r3, #2
 8012514:	2b07      	cmp	r3, #7
 8012516:	f200 8337 	bhi.w	8012b88 <tcp_process+0x7a0>
 801251a:	a201      	add	r2, pc, #4	@ (adr r2, 8012520 <tcp_process+0x138>)
 801251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012520:	08012541 	.word	0x08012541
 8012524:	08012771 	.word	0x08012771
 8012528:	080128e9 	.word	0x080128e9
 801252c:	08012913 	.word	0x08012913
 8012530:	08012a37 	.word	0x08012a37
 8012534:	080128e9 	.word	0x080128e9
 8012538:	08012ac3 	.word	0x08012ac3
 801253c:	08012b53 	.word	0x08012b53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012540:	4b4f      	ldr	r3, [pc, #316]	@ (8012680 <tcp_process+0x298>)
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	f003 0310 	and.w	r3, r3, #16
 8012548:	2b00      	cmp	r3, #0
 801254a:	f000 80e4 	beq.w	8012716 <tcp_process+0x32e>
 801254e:	4b4c      	ldr	r3, [pc, #304]	@ (8012680 <tcp_process+0x298>)
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	f003 0302 	and.w	r3, r3, #2
 8012556:	2b00      	cmp	r3, #0
 8012558:	f000 80dd 	beq.w	8012716 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012560:	1c5a      	adds	r2, r3, #1
 8012562:	4b48      	ldr	r3, [pc, #288]	@ (8012684 <tcp_process+0x29c>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	429a      	cmp	r2, r3
 8012568:	f040 80d5 	bne.w	8012716 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801256c:	4b46      	ldr	r3, [pc, #280]	@ (8012688 <tcp_process+0x2a0>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	1c5a      	adds	r2, r3, #1
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801257e:	4b41      	ldr	r3, [pc, #260]	@ (8012684 <tcp_process+0x29c>)
 8012580:	681a      	ldr	r2, [r3, #0]
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012586:	4b44      	ldr	r3, [pc, #272]	@ (8012698 <tcp_process+0x2b0>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	89db      	ldrh	r3, [r3, #14]
 801258c:	b29a      	uxth	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80125a0:	4b39      	ldr	r3, [pc, #228]	@ (8012688 <tcp_process+0x2a0>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	1e5a      	subs	r2, r3, #1
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2204      	movs	r2, #4
 80125ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	3304      	adds	r3, #4
 80125b8:	4618      	mov	r0, r3
 80125ba:	f005 f8b9 	bl	8017730 <ip4_route>
 80125be:	4601      	mov	r1, r0
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	3304      	adds	r3, #4
 80125c4:	461a      	mov	r2, r3
 80125c6:	4620      	mov	r0, r4
 80125c8:	f7ff f88c 	bl	80116e4 <tcp_eff_send_mss_netif>
 80125cc:	4603      	mov	r3, r0
 80125ce:	461a      	mov	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125d8:	009a      	lsls	r2, r3, #2
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125de:	005b      	lsls	r3, r3, #1
 80125e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80125e4:	428b      	cmp	r3, r1
 80125e6:	bf38      	it	cc
 80125e8:	460b      	movcc	r3, r1
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d204      	bcs.n	80125f8 <tcp_process+0x210>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	e00d      	b.n	8012614 <tcp_process+0x22c>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012602:	4293      	cmp	r3, r2
 8012604:	d904      	bls.n	8012610 <tcp_process+0x228>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801260a:	005b      	lsls	r3, r3, #1
 801260c:	b29b      	uxth	r3, r3
 801260e:	e001      	b.n	8012614 <tcp_process+0x22c>
 8012610:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012614:	687a      	ldr	r2, [r7, #4]
 8012616:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012620:	2b00      	cmp	r3, #0
 8012622:	d106      	bne.n	8012632 <tcp_process+0x24a>
 8012624:	4b13      	ldr	r3, [pc, #76]	@ (8012674 <tcp_process+0x28c>)
 8012626:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801262a:	491c      	ldr	r1, [pc, #112]	@ (801269c <tcp_process+0x2b4>)
 801262c:	4813      	ldr	r0, [pc, #76]	@ (801267c <tcp_process+0x294>)
 801262e:	f007 f959 	bl	80198e4 <iprintf>
        --pcb->snd_queuelen;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012638:	3b01      	subs	r3, #1
 801263a:	b29a      	uxth	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012646:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d12a      	bne.n	80126a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012652:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_process+0x280>
 801265a:	4b06      	ldr	r3, [pc, #24]	@ (8012674 <tcp_process+0x28c>)
 801265c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012660:	490f      	ldr	r1, [pc, #60]	@ (80126a0 <tcp_process+0x2b8>)
 8012662:	4806      	ldr	r0, [pc, #24]	@ (801267c <tcp_process+0x294>)
 8012664:	f007 f93e 	bl	80198e4 <iprintf>
          pcb->unsent = rseg->next;
 8012668:	69fb      	ldr	r3, [r7, #28]
 801266a:	681a      	ldr	r2, [r3, #0]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012670:	e01c      	b.n	80126ac <tcp_process+0x2c4>
 8012672:	bf00      	nop
 8012674:	0801dd50 	.word	0x0801dd50
 8012678:	0801df88 	.word	0x0801df88
 801267c:	0801dd9c 	.word	0x0801dd9c
 8012680:	20011d5c 	.word	0x20011d5c
 8012684:	20011d54 	.word	0x20011d54
 8012688:	20011d50 	.word	0x20011d50
 801268c:	0801dfa4 	.word	0x0801dfa4
 8012690:	20011d5d 	.word	0x20011d5d
 8012694:	20011d18 	.word	0x20011d18
 8012698:	20011d40 	.word	0x20011d40
 801269c:	0801dfc4 	.word	0x0801dfc4
 80126a0:	0801dfdc 	.word	0x0801dfdc
        } else {
          pcb->unacked = rseg->next;
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80126ac:	69f8      	ldr	r0, [r7, #28]
 80126ae:	f7fe fc54 	bl	8010f5a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d104      	bne.n	80126c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80126c0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80126c2:	e006      	b.n	80126d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d00a      	beq.n	80126f2 <tcp_process+0x30a>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	6910      	ldr	r0, [r2, #16]
 80126e6:	2200      	movs	r2, #0
 80126e8:	6879      	ldr	r1, [r7, #4]
 80126ea:	4798      	blx	r3
 80126ec:	4603      	mov	r3, r0
 80126ee:	76bb      	strb	r3, [r7, #26]
 80126f0:	e001      	b.n	80126f6 <tcp_process+0x30e>
 80126f2:	2300      	movs	r3, #0
 80126f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80126f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80126fa:	f113 0f0d 	cmn.w	r3, #13
 80126fe:	d102      	bne.n	8012706 <tcp_process+0x31e>
          return ERR_ABRT;
 8012700:	f06f 030c 	mvn.w	r3, #12
 8012704:	e250      	b.n	8012ba8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	8b5b      	ldrh	r3, [r3, #26]
 801270a:	f043 0302 	orr.w	r3, r3, #2
 801270e:	b29a      	uxth	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012714:	e23a      	b.n	8012b8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012716:	4b98      	ldr	r3, [pc, #608]	@ (8012978 <tcp_process+0x590>)
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	f003 0310 	and.w	r3, r3, #16
 801271e:	2b00      	cmp	r3, #0
 8012720:	f000 8234 	beq.w	8012b8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012724:	4b95      	ldr	r3, [pc, #596]	@ (801297c <tcp_process+0x594>)
 8012726:	6819      	ldr	r1, [r3, #0]
 8012728:	4b95      	ldr	r3, [pc, #596]	@ (8012980 <tcp_process+0x598>)
 801272a:	881b      	ldrh	r3, [r3, #0]
 801272c:	461a      	mov	r2, r3
 801272e:	4b95      	ldr	r3, [pc, #596]	@ (8012984 <tcp_process+0x59c>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012734:	4b94      	ldr	r3, [pc, #592]	@ (8012988 <tcp_process+0x5a0>)
 8012736:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012738:	885b      	ldrh	r3, [r3, #2]
 801273a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801273c:	4a92      	ldr	r2, [pc, #584]	@ (8012988 <tcp_process+0x5a0>)
 801273e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012740:	8812      	ldrh	r2, [r2, #0]
 8012742:	b292      	uxth	r2, r2
 8012744:	9202      	str	r2, [sp, #8]
 8012746:	9301      	str	r3, [sp, #4]
 8012748:	4b90      	ldr	r3, [pc, #576]	@ (801298c <tcp_process+0x5a4>)
 801274a:	9300      	str	r3, [sp, #0]
 801274c:	4b90      	ldr	r3, [pc, #576]	@ (8012990 <tcp_process+0x5a8>)
 801274e:	4602      	mov	r2, r0
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f003 f8d7 	bl	8015904 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801275c:	2b05      	cmp	r3, #5
 801275e:	f200 8215 	bhi.w	8012b8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2200      	movs	r2, #0
 8012766:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f002 fea3 	bl	80154b4 <tcp_rexmit_rto>
      break;
 801276e:	e20d      	b.n	8012b8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012770:	4b81      	ldr	r3, [pc, #516]	@ (8012978 <tcp_process+0x590>)
 8012772:	781b      	ldrb	r3, [r3, #0]
 8012774:	f003 0310 	and.w	r3, r3, #16
 8012778:	2b00      	cmp	r3, #0
 801277a:	f000 80a1 	beq.w	80128c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801277e:	4b7f      	ldr	r3, [pc, #508]	@ (801297c <tcp_process+0x594>)
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012786:	1ad3      	subs	r3, r2, r3
 8012788:	3b01      	subs	r3, #1
 801278a:	2b00      	cmp	r3, #0
 801278c:	db7e      	blt.n	801288c <tcp_process+0x4a4>
 801278e:	4b7b      	ldr	r3, [pc, #492]	@ (801297c <tcp_process+0x594>)
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	2b00      	cmp	r3, #0
 801279a:	dc77      	bgt.n	801288c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2204      	movs	r2, #4
 80127a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d102      	bne.n	80127b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80127aa:	23fa      	movs	r3, #250	@ 0xfa
 80127ac:	76bb      	strb	r3, [r7, #26]
 80127ae:	e01d      	b.n	80127ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127b4:	699b      	ldr	r3, [r3, #24]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d106      	bne.n	80127c8 <tcp_process+0x3e0>
 80127ba:	4b76      	ldr	r3, [pc, #472]	@ (8012994 <tcp_process+0x5ac>)
 80127bc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80127c0:	4975      	ldr	r1, [pc, #468]	@ (8012998 <tcp_process+0x5b0>)
 80127c2:	4876      	ldr	r0, [pc, #472]	@ (801299c <tcp_process+0x5b4>)
 80127c4:	f007 f88e 	bl	80198e4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127cc:	699b      	ldr	r3, [r3, #24]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00a      	beq.n	80127e8 <tcp_process+0x400>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80127d6:	699b      	ldr	r3, [r3, #24]
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	6910      	ldr	r0, [r2, #16]
 80127dc:	2200      	movs	r2, #0
 80127de:	6879      	ldr	r1, [r7, #4]
 80127e0:	4798      	blx	r3
 80127e2:	4603      	mov	r3, r0
 80127e4:	76bb      	strb	r3, [r7, #26]
 80127e6:	e001      	b.n	80127ec <tcp_process+0x404>
 80127e8:	23f0      	movs	r3, #240	@ 0xf0
 80127ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80127ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d00a      	beq.n	801280a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80127f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80127f8:	f113 0f0d 	cmn.w	r3, #13
 80127fc:	d002      	beq.n	8012804 <tcp_process+0x41c>
              tcp_abort(pcb);
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f7fd fd16 	bl	8010230 <tcp_abort>
            }
            return ERR_ABRT;
 8012804:	f06f 030c 	mvn.w	r3, #12
 8012808:	e1ce      	b.n	8012ba8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f000 fae0 	bl	8012dd0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012810:	4b63      	ldr	r3, [pc, #396]	@ (80129a0 <tcp_process+0x5b8>)
 8012812:	881b      	ldrh	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d005      	beq.n	8012824 <tcp_process+0x43c>
            recv_acked--;
 8012818:	4b61      	ldr	r3, [pc, #388]	@ (80129a0 <tcp_process+0x5b8>)
 801281a:	881b      	ldrh	r3, [r3, #0]
 801281c:	3b01      	subs	r3, #1
 801281e:	b29a      	uxth	r2, r3
 8012820:	4b5f      	ldr	r3, [pc, #380]	@ (80129a0 <tcp_process+0x5b8>)
 8012822:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012828:	009a      	lsls	r2, r3, #2
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801282e:	005b      	lsls	r3, r3, #1
 8012830:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012834:	428b      	cmp	r3, r1
 8012836:	bf38      	it	cc
 8012838:	460b      	movcc	r3, r1
 801283a:	429a      	cmp	r2, r3
 801283c:	d204      	bcs.n	8012848 <tcp_process+0x460>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	b29b      	uxth	r3, r3
 8012846:	e00d      	b.n	8012864 <tcp_process+0x47c>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012852:	4293      	cmp	r3, r2
 8012854:	d904      	bls.n	8012860 <tcp_process+0x478>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801285a:	005b      	lsls	r3, r3, #1
 801285c:	b29b      	uxth	r3, r3
 801285e:	e001      	b.n	8012864 <tcp_process+0x47c>
 8012860:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801286a:	4b4e      	ldr	r3, [pc, #312]	@ (80129a4 <tcp_process+0x5bc>)
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	f003 0320 	and.w	r3, r3, #32
 8012872:	2b00      	cmp	r3, #0
 8012874:	d037      	beq.n	80128e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	8b5b      	ldrh	r3, [r3, #26]
 801287a:	f043 0302 	orr.w	r3, r3, #2
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2207      	movs	r2, #7
 8012888:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801288a:	e02c      	b.n	80128e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801288c:	4b3b      	ldr	r3, [pc, #236]	@ (801297c <tcp_process+0x594>)
 801288e:	6819      	ldr	r1, [r3, #0]
 8012890:	4b3b      	ldr	r3, [pc, #236]	@ (8012980 <tcp_process+0x598>)
 8012892:	881b      	ldrh	r3, [r3, #0]
 8012894:	461a      	mov	r2, r3
 8012896:	4b3b      	ldr	r3, [pc, #236]	@ (8012984 <tcp_process+0x59c>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801289c:	4b3a      	ldr	r3, [pc, #232]	@ (8012988 <tcp_process+0x5a0>)
 801289e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128a0:	885b      	ldrh	r3, [r3, #2]
 80128a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80128a4:	4a38      	ldr	r2, [pc, #224]	@ (8012988 <tcp_process+0x5a0>)
 80128a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80128a8:	8812      	ldrh	r2, [r2, #0]
 80128aa:	b292      	uxth	r2, r2
 80128ac:	9202      	str	r2, [sp, #8]
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	4b36      	ldr	r3, [pc, #216]	@ (801298c <tcp_process+0x5a4>)
 80128b2:	9300      	str	r3, [sp, #0]
 80128b4:	4b36      	ldr	r3, [pc, #216]	@ (8012990 <tcp_process+0x5a8>)
 80128b6:	4602      	mov	r2, r0
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f003 f823 	bl	8015904 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80128be:	e167      	b.n	8012b90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80128c0:	4b2d      	ldr	r3, [pc, #180]	@ (8012978 <tcp_process+0x590>)
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 8161 	beq.w	8012b90 <tcp_process+0x7a8>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128d2:	1e5a      	subs	r2, r3, #1
 80128d4:	4b2b      	ldr	r3, [pc, #172]	@ (8012984 <tcp_process+0x59c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	429a      	cmp	r2, r3
 80128da:	f040 8159 	bne.w	8012b90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f002 fe0a 	bl	80154f8 <tcp_rexmit>
      break;
 80128e4:	e154      	b.n	8012b90 <tcp_process+0x7a8>
 80128e6:	e153      	b.n	8012b90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fa71 	bl	8012dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80128ee:	4b2d      	ldr	r3, [pc, #180]	@ (80129a4 <tcp_process+0x5bc>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	f003 0320 	and.w	r3, r3, #32
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 814c 	beq.w	8012b94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	8b5b      	ldrh	r3, [r3, #26]
 8012900:	f043 0302 	orr.w	r3, r3, #2
 8012904:	b29a      	uxth	r2, r3
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2207      	movs	r2, #7
 801290e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012910:	e140      	b.n	8012b94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 fa5c 	bl	8012dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012918:	4b22      	ldr	r3, [pc, #136]	@ (80129a4 <tcp_process+0x5bc>)
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	f003 0320 	and.w	r3, r3, #32
 8012920:	2b00      	cmp	r3, #0
 8012922:	d071      	beq.n	8012a08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012924:	4b14      	ldr	r3, [pc, #80]	@ (8012978 <tcp_process+0x590>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f003 0310 	and.w	r3, r3, #16
 801292c:	2b00      	cmp	r3, #0
 801292e:	d060      	beq.n	80129f2 <tcp_process+0x60a>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012934:	4b11      	ldr	r3, [pc, #68]	@ (801297c <tcp_process+0x594>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	429a      	cmp	r2, r3
 801293a:	d15a      	bne.n	80129f2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012940:	2b00      	cmp	r3, #0
 8012942:	d156      	bne.n	80129f2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	8b5b      	ldrh	r3, [r3, #26]
 8012948:	f043 0302 	orr.w	r3, r3, #2
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7fe fdbc 	bl	80114d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012958:	4b13      	ldr	r3, [pc, #76]	@ (80129a8 <tcp_process+0x5c0>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	429a      	cmp	r2, r3
 8012960:	d105      	bne.n	801296e <tcp_process+0x586>
 8012962:	4b11      	ldr	r3, [pc, #68]	@ (80129a8 <tcp_process+0x5c0>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	4a0f      	ldr	r2, [pc, #60]	@ (80129a8 <tcp_process+0x5c0>)
 801296a:	6013      	str	r3, [r2, #0]
 801296c:	e02e      	b.n	80129cc <tcp_process+0x5e4>
 801296e:	4b0e      	ldr	r3, [pc, #56]	@ (80129a8 <tcp_process+0x5c0>)
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	617b      	str	r3, [r7, #20]
 8012974:	e027      	b.n	80129c6 <tcp_process+0x5de>
 8012976:	bf00      	nop
 8012978:	20011d5c 	.word	0x20011d5c
 801297c:	20011d54 	.word	0x20011d54
 8012980:	20011d5a 	.word	0x20011d5a
 8012984:	20011d50 	.word	0x20011d50
 8012988:	20011d40 	.word	0x20011d40
 801298c:	2000c414 	.word	0x2000c414
 8012990:	2000c418 	.word	0x2000c418
 8012994:	0801dd50 	.word	0x0801dd50
 8012998:	0801dff0 	.word	0x0801dff0
 801299c:	0801dd9c 	.word	0x0801dd9c
 80129a0:	20011d58 	.word	0x20011d58
 80129a4:	20011d5d 	.word	0x20011d5d
 80129a8:	20011d24 	.word	0x20011d24
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	68db      	ldr	r3, [r3, #12]
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d104      	bne.n	80129c0 <tcp_process+0x5d8>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	68da      	ldr	r2, [r3, #12]
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	60da      	str	r2, [r3, #12]
 80129be:	e005      	b.n	80129cc <tcp_process+0x5e4>
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	697b      	ldr	r3, [r7, #20]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1ef      	bne.n	80129ac <tcp_process+0x5c4>
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	60da      	str	r2, [r3, #12]
 80129d2:	4b77      	ldr	r3, [pc, #476]	@ (8012bb0 <tcp_process+0x7c8>)
 80129d4:	2201      	movs	r2, #1
 80129d6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	220a      	movs	r2, #10
 80129dc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80129de:	4b75      	ldr	r3, [pc, #468]	@ (8012bb4 <tcp_process+0x7cc>)
 80129e0:	681a      	ldr	r2, [r3, #0]
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	60da      	str	r2, [r3, #12]
 80129e6:	4a73      	ldr	r2, [pc, #460]	@ (8012bb4 <tcp_process+0x7cc>)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	f003 f94c 	bl	8015c88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80129f0:	e0d2      	b.n	8012b98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	8b5b      	ldrh	r3, [r3, #26]
 80129f6:	f043 0302 	orr.w	r3, r3, #2
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2208      	movs	r2, #8
 8012a04:	751a      	strb	r2, [r3, #20]
      break;
 8012a06:	e0c7      	b.n	8012b98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a08:	4b6b      	ldr	r3, [pc, #428]	@ (8012bb8 <tcp_process+0x7d0>)
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	f003 0310 	and.w	r3, r3, #16
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	f000 80c1 	beq.w	8012b98 <tcp_process+0x7b0>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a1a:	4b68      	ldr	r3, [pc, #416]	@ (8012bbc <tcp_process+0x7d4>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	f040 80ba 	bne.w	8012b98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f040 80b5 	bne.w	8012b98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2206      	movs	r2, #6
 8012a32:	751a      	strb	r2, [r3, #20]
      break;
 8012a34:	e0b0      	b.n	8012b98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f000 f9ca 	bl	8012dd0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012a3c:	4b60      	ldr	r3, [pc, #384]	@ (8012bc0 <tcp_process+0x7d8>)
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	f003 0320 	and.w	r3, r3, #32
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 80a9 	beq.w	8012b9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	8b5b      	ldrh	r3, [r3, #26]
 8012a4e:	f043 0302 	orr.w	r3, r3, #2
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f7fe fd39 	bl	80114d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012a5e:	4b59      	ldr	r3, [pc, #356]	@ (8012bc4 <tcp_process+0x7dc>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d105      	bne.n	8012a74 <tcp_process+0x68c>
 8012a68:	4b56      	ldr	r3, [pc, #344]	@ (8012bc4 <tcp_process+0x7dc>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	68db      	ldr	r3, [r3, #12]
 8012a6e:	4a55      	ldr	r2, [pc, #340]	@ (8012bc4 <tcp_process+0x7dc>)
 8012a70:	6013      	str	r3, [r2, #0]
 8012a72:	e013      	b.n	8012a9c <tcp_process+0x6b4>
 8012a74:	4b53      	ldr	r3, [pc, #332]	@ (8012bc4 <tcp_process+0x7dc>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	613b      	str	r3, [r7, #16]
 8012a7a:	e00c      	b.n	8012a96 <tcp_process+0x6ae>
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d104      	bne.n	8012a90 <tcp_process+0x6a8>
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	68da      	ldr	r2, [r3, #12]
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	60da      	str	r2, [r3, #12]
 8012a8e:	e005      	b.n	8012a9c <tcp_process+0x6b4>
 8012a90:	693b      	ldr	r3, [r7, #16]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	613b      	str	r3, [r7, #16]
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d1ef      	bne.n	8012a7c <tcp_process+0x694>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	60da      	str	r2, [r3, #12]
 8012aa2:	4b43      	ldr	r3, [pc, #268]	@ (8012bb0 <tcp_process+0x7c8>)
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	220a      	movs	r2, #10
 8012aac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012aae:	4b41      	ldr	r3, [pc, #260]	@ (8012bb4 <tcp_process+0x7cc>)
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	60da      	str	r2, [r3, #12]
 8012ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8012bb4 <tcp_process+0x7cc>)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6013      	str	r3, [r2, #0]
 8012abc:	f003 f8e4 	bl	8015c88 <tcp_timer_needed>
      }
      break;
 8012ac0:	e06c      	b.n	8012b9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f000 f984 	bl	8012dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8012bb8 <tcp_process+0x7d0>)
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	f003 0310 	and.w	r3, r3, #16
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d065      	beq.n	8012ba0 <tcp_process+0x7b8>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012ad8:	4b38      	ldr	r3, [pc, #224]	@ (8012bbc <tcp_process+0x7d4>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d15f      	bne.n	8012ba0 <tcp_process+0x7b8>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d15b      	bne.n	8012ba0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7fe fcf1 	bl	80114d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012aee:	4b35      	ldr	r3, [pc, #212]	@ (8012bc4 <tcp_process+0x7dc>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d105      	bne.n	8012b04 <tcp_process+0x71c>
 8012af8:	4b32      	ldr	r3, [pc, #200]	@ (8012bc4 <tcp_process+0x7dc>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	68db      	ldr	r3, [r3, #12]
 8012afe:	4a31      	ldr	r2, [pc, #196]	@ (8012bc4 <tcp_process+0x7dc>)
 8012b00:	6013      	str	r3, [r2, #0]
 8012b02:	e013      	b.n	8012b2c <tcp_process+0x744>
 8012b04:	4b2f      	ldr	r3, [pc, #188]	@ (8012bc4 <tcp_process+0x7dc>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	60fb      	str	r3, [r7, #12]
 8012b0a:	e00c      	b.n	8012b26 <tcp_process+0x73e>
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	68db      	ldr	r3, [r3, #12]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d104      	bne.n	8012b20 <tcp_process+0x738>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	68da      	ldr	r2, [r3, #12]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	60da      	str	r2, [r3, #12]
 8012b1e:	e005      	b.n	8012b2c <tcp_process+0x744>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	68db      	ldr	r3, [r3, #12]
 8012b24:	60fb      	str	r3, [r7, #12]
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1ef      	bne.n	8012b0c <tcp_process+0x724>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	60da      	str	r2, [r3, #12]
 8012b32:	4b1f      	ldr	r3, [pc, #124]	@ (8012bb0 <tcp_process+0x7c8>)
 8012b34:	2201      	movs	r2, #1
 8012b36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	220a      	movs	r2, #10
 8012b3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8012bb4 <tcp_process+0x7cc>)
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	60da      	str	r2, [r3, #12]
 8012b46:	4a1b      	ldr	r2, [pc, #108]	@ (8012bb4 <tcp_process+0x7cc>)
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6013      	str	r3, [r2, #0]
 8012b4c:	f003 f89c 	bl	8015c88 <tcp_timer_needed>
      }
      break;
 8012b50:	e026      	b.n	8012ba0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 f93c 	bl	8012dd0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012b58:	4b17      	ldr	r3, [pc, #92]	@ (8012bb8 <tcp_process+0x7d0>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	f003 0310 	and.w	r3, r3, #16
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d01f      	beq.n	8012ba4 <tcp_process+0x7bc>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b68:	4b14      	ldr	r3, [pc, #80]	@ (8012bbc <tcp_process+0x7d4>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d119      	bne.n	8012ba4 <tcp_process+0x7bc>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d115      	bne.n	8012ba4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012b78:	4b11      	ldr	r3, [pc, #68]	@ (8012bc0 <tcp_process+0x7d8>)
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	f043 0310 	orr.w	r3, r3, #16
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	4b0f      	ldr	r3, [pc, #60]	@ (8012bc0 <tcp_process+0x7d8>)
 8012b84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012b86:	e00d      	b.n	8012ba4 <tcp_process+0x7bc>
    default:
      break;
 8012b88:	bf00      	nop
 8012b8a:	e00c      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012b8c:	bf00      	nop
 8012b8e:	e00a      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012b90:	bf00      	nop
 8012b92:	e008      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012b94:	bf00      	nop
 8012b96:	e006      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012b98:	bf00      	nop
 8012b9a:	e004      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012b9c:	bf00      	nop
 8012b9e:	e002      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012ba0:	bf00      	nop
 8012ba2:	e000      	b.n	8012ba6 <tcp_process+0x7be>
      break;
 8012ba4:	bf00      	nop
  }
  return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3724      	adds	r7, #36	@ 0x24
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd90      	pop	{r4, r7, pc}
 8012bb0:	20011d2c 	.word	0x20011d2c
 8012bb4:	20011d28 	.word	0x20011d28
 8012bb8:	20011d5c 	.word	0x20011d5c
 8012bbc:	20011d54 	.word	0x20011d54
 8012bc0:	20011d5d 	.word	0x20011d5d
 8012bc4:	20011d24 	.word	0x20011d24

08012bc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012bc8:	b590      	push	{r4, r7, lr}
 8012bca:	b085      	sub	sp, #20
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d106      	bne.n	8012be6 <tcp_oos_insert_segment+0x1e>
 8012bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8012cc8 <tcp_oos_insert_segment+0x100>)
 8012bda:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012bde:	493b      	ldr	r1, [pc, #236]	@ (8012ccc <tcp_oos_insert_segment+0x104>)
 8012be0:	483b      	ldr	r0, [pc, #236]	@ (8012cd0 <tcp_oos_insert_segment+0x108>)
 8012be2:	f006 fe7f 	bl	80198e4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	899b      	ldrh	r3, [r3, #12]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fb f982 	bl	800def8 <lwip_htons>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d028      	beq.n	8012c52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012c00:	6838      	ldr	r0, [r7, #0]
 8012c02:	f7fe f995 	bl	8010f30 <tcp_segs_free>
    next = NULL;
 8012c06:	2300      	movs	r3, #0
 8012c08:	603b      	str	r3, [r7, #0]
 8012c0a:	e056      	b.n	8012cba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	68db      	ldr	r3, [r3, #12]
 8012c10:	899b      	ldrh	r3, [r3, #12]
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fb f96f 	bl	800def8 <lwip_htons>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	b2db      	uxtb	r3, r3
 8012c1e:	f003 0301 	and.w	r3, r3, #1
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d00d      	beq.n	8012c42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	68db      	ldr	r3, [r3, #12]
 8012c2a:	899b      	ldrh	r3, [r3, #12]
 8012c2c:	b29c      	uxth	r4, r3
 8012c2e:	2001      	movs	r0, #1
 8012c30:	f7fb f962 	bl	800def8 <lwip_htons>
 8012c34:	4603      	mov	r3, r0
 8012c36:	461a      	mov	r2, r3
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	4322      	orrs	r2, r4
 8012c3e:	b292      	uxth	r2, r2
 8012c40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f7fe f984 	bl	8010f5a <tcp_seg_free>
    while (next &&
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00e      	beq.n	8012c76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	891b      	ldrh	r3, [r3, #8]
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012cd4 <tcp_oos_insert_segment+0x10c>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	441a      	add	r2, r3
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	6839      	ldr	r1, [r7, #0]
 8012c6c:	8909      	ldrh	r1, [r1, #8]
 8012c6e:	440b      	add	r3, r1
 8012c70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	daca      	bge.n	8012c0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d01e      	beq.n	8012cba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	891b      	ldrh	r3, [r3, #8]
 8012c80:	461a      	mov	r2, r3
 8012c82:	4b14      	ldr	r3, [pc, #80]	@ (8012cd4 <tcp_oos_insert_segment+0x10c>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	441a      	add	r2, r3
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dd12      	ble.n	8012cba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	68db      	ldr	r3, [r3, #12]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012cd4 <tcp_oos_insert_segment+0x10c>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	b29a      	uxth	r2, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	685a      	ldr	r2, [r3, #4]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	891b      	ldrh	r3, [r3, #8]
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	f7fc fb45 	bl	800f344 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	683a      	ldr	r2, [r7, #0]
 8012cbe:	601a      	str	r2, [r3, #0]
}
 8012cc0:	bf00      	nop
 8012cc2:	3714      	adds	r7, #20
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd90      	pop	{r4, r7, pc}
 8012cc8:	0801dd50 	.word	0x0801dd50
 8012ccc:	0801e010 	.word	0x0801e010
 8012cd0:	0801dd9c 	.word	0x0801dd9c
 8012cd4:	20011d50 	.word	0x20011d50

08012cd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012cd8:	b5b0      	push	{r4, r5, r7, lr}
 8012cda:	b086      	sub	sp, #24
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	607a      	str	r2, [r7, #4]
 8012ce4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012ce6:	e03e      	b.n	8012d66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7fc fd38 	bl	800f76c <pbuf_clen>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d06:	8a7a      	ldrh	r2, [r7, #18]
 8012d08:	429a      	cmp	r2, r3
 8012d0a:	d906      	bls.n	8012d1a <tcp_free_acked_segments+0x42>
 8012d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8012db8 <tcp_free_acked_segments+0xe0>)
 8012d0e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012d12:	492a      	ldr	r1, [pc, #168]	@ (8012dbc <tcp_free_acked_segments+0xe4>)
 8012d14:	482a      	ldr	r0, [pc, #168]	@ (8012dc0 <tcp_free_acked_segments+0xe8>)
 8012d16:	f006 fde5 	bl	80198e4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012d20:	8a7b      	ldrh	r3, [r7, #18]
 8012d22:	1ad3      	subs	r3, r2, r3
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	891a      	ldrh	r2, [r3, #8]
 8012d30:	4b24      	ldr	r3, [pc, #144]	@ (8012dc4 <tcp_free_acked_segments+0xec>)
 8012d32:	881b      	ldrh	r3, [r3, #0]
 8012d34:	4413      	add	r3, r2
 8012d36:	b29a      	uxth	r2, r3
 8012d38:	4b22      	ldr	r3, [pc, #136]	@ (8012dc4 <tcp_free_acked_segments+0xec>)
 8012d3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012d3c:	6978      	ldr	r0, [r7, #20]
 8012d3e:	f7fe f90c 	bl	8010f5a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00c      	beq.n	8012d66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d109      	bne.n	8012d66 <tcp_free_acked_segments+0x8e>
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d106      	bne.n	8012d66 <tcp_free_acked_segments+0x8e>
 8012d58:	4b17      	ldr	r3, [pc, #92]	@ (8012db8 <tcp_free_acked_segments+0xe0>)
 8012d5a:	f240 4261 	movw	r2, #1121	@ 0x461
 8012d5e:	491a      	ldr	r1, [pc, #104]	@ (8012dc8 <tcp_free_acked_segments+0xf0>)
 8012d60:	4817      	ldr	r0, [pc, #92]	@ (8012dc0 <tcp_free_acked_segments+0xe8>)
 8012d62:	f006 fdbf 	bl	80198e4 <iprintf>
  while (seg_list != NULL &&
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d020      	beq.n	8012dae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fb f8d5 	bl	800df22 <lwip_htonl>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	891b      	ldrh	r3, [r3, #8]
 8012d7e:	461d      	mov	r5, r3
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	899b      	ldrh	r3, [r3, #12]
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f7fb f8b5 	bl	800def8 <lwip_htons>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	b2db      	uxtb	r3, r3
 8012d92:	f003 0303 	and.w	r3, r3, #3
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d001      	beq.n	8012d9e <tcp_free_acked_segments+0xc6>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e000      	b.n	8012da0 <tcp_free_acked_segments+0xc8>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	442b      	add	r3, r5
 8012da2:	18e2      	adds	r2, r4, r3
 8012da4:	4b09      	ldr	r3, [pc, #36]	@ (8012dcc <tcp_free_acked_segments+0xf4>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	dd9c      	ble.n	8012ce8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012dae:	68bb      	ldr	r3, [r7, #8]
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3718      	adds	r7, #24
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bdb0      	pop	{r4, r5, r7, pc}
 8012db8:	0801dd50 	.word	0x0801dd50
 8012dbc:	0801e038 	.word	0x0801e038
 8012dc0:	0801dd9c 	.word	0x0801dd9c
 8012dc4:	20011d58 	.word	0x20011d58
 8012dc8:	0801e060 	.word	0x0801e060
 8012dcc:	20011d54 	.word	0x20011d54

08012dd0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012dd0:	b5b0      	push	{r4, r5, r7, lr}
 8012dd2:	b094      	sub	sp, #80	@ 0x50
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d106      	bne.n	8012df0 <tcp_receive+0x20>
 8012de2:	4b91      	ldr	r3, [pc, #580]	@ (8013028 <tcp_receive+0x258>)
 8012de4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012de8:	4990      	ldr	r1, [pc, #576]	@ (801302c <tcp_receive+0x25c>)
 8012dea:	4891      	ldr	r0, [pc, #580]	@ (8013030 <tcp_receive+0x260>)
 8012dec:	f006 fd7a 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	7d1b      	ldrb	r3, [r3, #20]
 8012df4:	2b03      	cmp	r3, #3
 8012df6:	d806      	bhi.n	8012e06 <tcp_receive+0x36>
 8012df8:	4b8b      	ldr	r3, [pc, #556]	@ (8013028 <tcp_receive+0x258>)
 8012dfa:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012dfe:	498d      	ldr	r1, [pc, #564]	@ (8013034 <tcp_receive+0x264>)
 8012e00:	488b      	ldr	r0, [pc, #556]	@ (8013030 <tcp_receive+0x260>)
 8012e02:	f006 fd6f 	bl	80198e4 <iprintf>

  if (flags & TCP_ACK) {
 8012e06:	4b8c      	ldr	r3, [pc, #560]	@ (8013038 <tcp_receive+0x268>)
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	f003 0310 	and.w	r3, r3, #16
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f000 8264 	beq.w	80132dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012e20:	4413      	add	r3, r2
 8012e22:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e28:	4b84      	ldr	r3, [pc, #528]	@ (801303c <tcp_receive+0x26c>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	1ad3      	subs	r3, r2, r3
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	db1b      	blt.n	8012e6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012e36:	4b81      	ldr	r3, [pc, #516]	@ (801303c <tcp_receive+0x26c>)
 8012e38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d106      	bne.n	8012e4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e42:	4b7f      	ldr	r3, [pc, #508]	@ (8013040 <tcp_receive+0x270>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	db0e      	blt.n	8012e6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012e50:	4b7b      	ldr	r3, [pc, #492]	@ (8013040 <tcp_receive+0x270>)
 8012e52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d125      	bne.n	8012ea4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e58:	4b7a      	ldr	r3, [pc, #488]	@ (8013044 <tcp_receive+0x274>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	89db      	ldrh	r3, [r3, #14]
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d91c      	bls.n	8012ea4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012e6a:	4b76      	ldr	r3, [pc, #472]	@ (8013044 <tcp_receive+0x274>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	89db      	ldrh	r3, [r3, #14]
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d205      	bcs.n	8012e94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012e94:	4b69      	ldr	r3, [pc, #420]	@ (801303c <tcp_receive+0x26c>)
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012e9c:	4b68      	ldr	r3, [pc, #416]	@ (8013040 <tcp_receive+0x270>)
 8012e9e:	681a      	ldr	r2, [r3, #0]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012ea4:	4b66      	ldr	r3, [pc, #408]	@ (8013040 <tcp_receive+0x270>)
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012eac:	1ad3      	subs	r3, r2, r3
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	dc58      	bgt.n	8012f64 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012eb2:	4b65      	ldr	r3, [pc, #404]	@ (8013048 <tcp_receive+0x278>)
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d14b      	bne.n	8012f52 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012ec4:	4413      	add	r3, r2
 8012ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d142      	bne.n	8012f52 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	db3d      	blt.n	8012f52 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012eda:	4b59      	ldr	r3, [pc, #356]	@ (8013040 <tcp_receive+0x270>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	429a      	cmp	r2, r3
 8012ee0:	d137      	bne.n	8012f52 <tcp_receive+0x182>
              found_dupack = 1;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012eec:	2bff      	cmp	r3, #255	@ 0xff
 8012eee:	d007      	beq.n	8012f00 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	d91b      	bls.n	8012f42 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f14:	4413      	add	r3, r2
 8012f16:	b29a      	uxth	r2, r3
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d30a      	bcc.n	8012f38 <tcp_receive+0x168>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f2c:	4413      	add	r3, r2
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012f36:	e004      	b.n	8012f42 <tcp_receive+0x172>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012f48:	2b02      	cmp	r3, #2
 8012f4a:	d902      	bls.n	8012f52 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f002 fb3f 	bl	80155d0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	f040 8161 	bne.w	801321c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012f62:	e15b      	b.n	801321c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012f64:	4b36      	ldr	r3, [pc, #216]	@ (8013040 <tcp_receive+0x270>)
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	f2c0 814e 	blt.w	8013212 <tcp_receive+0x442>
 8012f76:	4b32      	ldr	r3, [pc, #200]	@ (8013040 <tcp_receive+0x270>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f7e:	1ad3      	subs	r3, r2, r3
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f300 8146 	bgt.w	8013212 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	8b5b      	ldrh	r3, [r3, #26]
 8012f8a:	f003 0304 	and.w	r3, r3, #4
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d010      	beq.n	8012fb4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	8b5b      	ldrh	r3, [r3, #26]
 8012f96:	f023 0304 	bic.w	r3, r3, #4
 8012f9a:	b29a      	uxth	r2, r3
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012fc2:	10db      	asrs	r3, r3, #3
 8012fc4:	b21b      	sxth	r3, r3
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	4413      	add	r3, r2
 8012fd2:	b29b      	uxth	r3, r3
 8012fd4:	b21a      	sxth	r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012fdc:	4b18      	ldr	r3, [pc, #96]	@ (8013040 <tcp_receive+0x270>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012ff4:	4b12      	ldr	r3, [pc, #72]	@ (8013040 <tcp_receive+0x270>)
 8012ff6:	681a      	ldr	r2, [r3, #0]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7d1b      	ldrb	r3, [r3, #20]
 8013000:	2b03      	cmp	r3, #3
 8013002:	f240 8097 	bls.w	8013134 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013012:	429a      	cmp	r2, r3
 8013014:	d245      	bcs.n	80130a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	8b5b      	ldrh	r3, [r3, #26]
 801301a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801301e:	2b00      	cmp	r3, #0
 8013020:	d014      	beq.n	801304c <tcp_receive+0x27c>
 8013022:	2301      	movs	r3, #1
 8013024:	e013      	b.n	801304e <tcp_receive+0x27e>
 8013026:	bf00      	nop
 8013028:	0801dd50 	.word	0x0801dd50
 801302c:	0801e080 	.word	0x0801e080
 8013030:	0801dd9c 	.word	0x0801dd9c
 8013034:	0801e09c 	.word	0x0801e09c
 8013038:	20011d5c 	.word	0x20011d5c
 801303c:	20011d50 	.word	0x20011d50
 8013040:	20011d54 	.word	0x20011d54
 8013044:	20011d40 	.word	0x20011d40
 8013048:	20011d5a 	.word	0x20011d5a
 801304c:	2302      	movs	r3, #2
 801304e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013052:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013056:	b29a      	uxth	r2, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801305c:	fb12 f303 	smulbb	r3, r2, r3
 8013060:	b29b      	uxth	r3, r3
 8013062:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013064:	4293      	cmp	r3, r2
 8013066:	bf28      	it	cs
 8013068:	4613      	movcs	r3, r2
 801306a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013072:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013074:	4413      	add	r3, r2
 8013076:	b29a      	uxth	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801307e:	429a      	cmp	r2, r3
 8013080:	d309      	bcc.n	8013096 <tcp_receive+0x2c6>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013088:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801308a:	4413      	add	r3, r2
 801308c:	b29a      	uxth	r2, r3
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013094:	e04e      	b.n	8013134 <tcp_receive+0x364>
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801309c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80130a0:	e048      	b.n	8013134 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80130aa:	4413      	add	r3, r2
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d309      	bcc.n	80130cc <tcp_receive+0x2fc>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80130c0:	4413      	add	r3, r2
 80130c2:	b29a      	uxth	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80130ca:	e004      	b.n	80130d6 <tcp_receive+0x306>
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d326      	bcc.n	8013134 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80130f2:	1ad3      	subs	r3, r2, r3
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013106:	4413      	add	r3, r2
 8013108:	b29a      	uxth	r2, r3
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013110:	429a      	cmp	r2, r3
 8013112:	d30a      	bcc.n	801312a <tcp_receive+0x35a>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801311e:	4413      	add	r3, r2
 8013120:	b29a      	uxth	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013128:	e004      	b.n	8013134 <tcp_receive+0x364>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013130:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801313c:	4a98      	ldr	r2, [pc, #608]	@ (80133a0 <tcp_receive+0x5d0>)
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff fdca 	bl	8012cd8 <tcp_free_acked_segments>
 8013144:	4602      	mov	r2, r0
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013152:	4a94      	ldr	r2, [pc, #592]	@ (80133a4 <tcp_receive+0x5d4>)
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff fdbf 	bl	8012cd8 <tcp_free_acked_segments>
 801315a:	4602      	mov	r2, r0
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013164:	2b00      	cmp	r3, #0
 8013166:	d104      	bne.n	8013172 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801316e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013170:	e002      	b.n	8013178 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2200      	movs	r2, #0
 8013176:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2200      	movs	r2, #0
 801317c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013182:	2b00      	cmp	r3, #0
 8013184:	d103      	bne.n	801318e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	2200      	movs	r2, #0
 801318a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013194:	4b84      	ldr	r3, [pc, #528]	@ (80133a8 <tcp_receive+0x5d8>)
 8013196:	881b      	ldrh	r3, [r3, #0]
 8013198:	4413      	add	r3, r2
 801319a:	b29a      	uxth	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	8b5b      	ldrh	r3, [r3, #26]
 80131a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d035      	beq.n	801321a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d118      	bne.n	80131e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d00c      	beq.n	80131d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fa fea9 	bl	800df22 <lwip_htonl>
 80131d0:	4603      	mov	r3, r0
 80131d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	dc20      	bgt.n	801321a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	8b5b      	ldrh	r3, [r3, #26]
 80131dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80131e0:	b29a      	uxth	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80131e6:	e018      	b.n	801321a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fa fe94 	bl	800df22 <lwip_htonl>
 80131fa:	4603      	mov	r3, r0
 80131fc:	1ae3      	subs	r3, r4, r3
 80131fe:	2b00      	cmp	r3, #0
 8013200:	dc0b      	bgt.n	801321a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	8b5b      	ldrh	r3, [r3, #26]
 8013206:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801320a:	b29a      	uxth	r2, r3
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013210:	e003      	b.n	801321a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f002 fbc8 	bl	80159a8 <tcp_send_empty_ack>
 8013218:	e000      	b.n	801321c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801321a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013220:	2b00      	cmp	r3, #0
 8013222:	d05b      	beq.n	80132dc <tcp_receive+0x50c>
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013228:	4b60      	ldr	r3, [pc, #384]	@ (80133ac <tcp_receive+0x5dc>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	1ad3      	subs	r3, r2, r3
 801322e:	2b00      	cmp	r3, #0
 8013230:	da54      	bge.n	80132dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013232:	4b5f      	ldr	r3, [pc, #380]	@ (80133b0 <tcp_receive+0x5e0>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	b29a      	uxth	r2, r3
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801323c:	b29b      	uxth	r3, r3
 801323e:	1ad3      	subs	r3, r2, r3
 8013240:	b29b      	uxth	r3, r3
 8013242:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013246:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013250:	10db      	asrs	r3, r3, #3
 8013252:	b21b      	sxth	r3, r3
 8013254:	b29b      	uxth	r3, r3
 8013256:	1ad3      	subs	r3, r2, r3
 8013258:	b29b      	uxth	r3, r3
 801325a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013264:	b29a      	uxth	r2, r3
 8013266:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801326a:	4413      	add	r3, r2
 801326c:	b29b      	uxth	r3, r3
 801326e:	b21a      	sxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013274:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013278:	2b00      	cmp	r3, #0
 801327a:	da05      	bge.n	8013288 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801327c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013280:	425b      	negs	r3, r3
 8013282:	b29b      	uxth	r3, r3
 8013284:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013288:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013292:	109b      	asrs	r3, r3, #2
 8013294:	b21b      	sxth	r3, r3
 8013296:	b29b      	uxth	r3, r3
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	b29b      	uxth	r3, r3
 801329c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80132ac:	4413      	add	r3, r2
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	b21a      	sxth	r2, r3
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80132bc:	10db      	asrs	r3, r3, #3
 80132be:	b21b      	sxth	r3, r3
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	4413      	add	r3, r2
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	b21a      	sxth	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2200      	movs	r2, #0
 80132da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80132dc:	4b35      	ldr	r3, [pc, #212]	@ (80133b4 <tcp_receive+0x5e4>)
 80132de:	881b      	ldrh	r3, [r3, #0]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	f000 84df 	beq.w	8013ca4 <tcp_receive+0xed4>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	7d1b      	ldrb	r3, [r3, #20]
 80132ea:	2b06      	cmp	r3, #6
 80132ec:	f200 84da 	bhi.w	8013ca4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80132f4:	4b30      	ldr	r3, [pc, #192]	@ (80133b8 <tcp_receive+0x5e8>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	1ad3      	subs	r3, r2, r3
 80132fa:	3b01      	subs	r3, #1
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f2c0 808f 	blt.w	8013420 <tcp_receive+0x650>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013306:	4b2b      	ldr	r3, [pc, #172]	@ (80133b4 <tcp_receive+0x5e4>)
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	4619      	mov	r1, r3
 801330c:	4b2a      	ldr	r3, [pc, #168]	@ (80133b8 <tcp_receive+0x5e8>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	440b      	add	r3, r1
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	3301      	adds	r3, #1
 8013316:	2b00      	cmp	r3, #0
 8013318:	f300 8082 	bgt.w	8013420 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801331c:	4b27      	ldr	r3, [pc, #156]	@ (80133bc <tcp_receive+0x5ec>)
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013326:	4b24      	ldr	r3, [pc, #144]	@ (80133b8 <tcp_receive+0x5e8>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801332e:	4b23      	ldr	r3, [pc, #140]	@ (80133bc <tcp_receive+0x5ec>)
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <tcp_receive+0x574>
 8013336:	4b22      	ldr	r3, [pc, #136]	@ (80133c0 <tcp_receive+0x5f0>)
 8013338:	f240 5294 	movw	r2, #1428	@ 0x594
 801333c:	4921      	ldr	r1, [pc, #132]	@ (80133c4 <tcp_receive+0x5f4>)
 801333e:	4822      	ldr	r0, [pc, #136]	@ (80133c8 <tcp_receive+0x5f8>)
 8013340:	f006 fad0 	bl	80198e4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013346:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801334a:	4293      	cmp	r3, r2
 801334c:	d906      	bls.n	801335c <tcp_receive+0x58c>
 801334e:	4b1c      	ldr	r3, [pc, #112]	@ (80133c0 <tcp_receive+0x5f0>)
 8013350:	f240 5295 	movw	r2, #1429	@ 0x595
 8013354:	491d      	ldr	r1, [pc, #116]	@ (80133cc <tcp_receive+0x5fc>)
 8013356:	481c      	ldr	r0, [pc, #112]	@ (80133c8 <tcp_receive+0x5f8>)
 8013358:	f006 fac4 	bl	80198e4 <iprintf>
      off = (u16_t)off32;
 801335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801335e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013362:	4b16      	ldr	r3, [pc, #88]	@ (80133bc <tcp_receive+0x5ec>)
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	891b      	ldrh	r3, [r3, #8]
 8013368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801336c:	429a      	cmp	r2, r3
 801336e:	d906      	bls.n	801337e <tcp_receive+0x5ae>
 8013370:	4b13      	ldr	r3, [pc, #76]	@ (80133c0 <tcp_receive+0x5f0>)
 8013372:	f240 5297 	movw	r2, #1431	@ 0x597
 8013376:	4916      	ldr	r1, [pc, #88]	@ (80133d0 <tcp_receive+0x600>)
 8013378:	4813      	ldr	r0, [pc, #76]	@ (80133c8 <tcp_receive+0x5f8>)
 801337a:	f006 fab3 	bl	80198e4 <iprintf>
      inseg.len -= off;
 801337e:	4b0f      	ldr	r3, [pc, #60]	@ (80133bc <tcp_receive+0x5ec>)
 8013380:	891a      	ldrh	r2, [r3, #8]
 8013382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	b29a      	uxth	r2, r3
 801338a:	4b0c      	ldr	r3, [pc, #48]	@ (80133bc <tcp_receive+0x5ec>)
 801338c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801338e:	4b0b      	ldr	r3, [pc, #44]	@ (80133bc <tcp_receive+0x5ec>)
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	891a      	ldrh	r2, [r3, #8]
 8013394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013398:	1ad3      	subs	r3, r2, r3
 801339a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801339c:	e02a      	b.n	80133f4 <tcp_receive+0x624>
 801339e:	bf00      	nop
 80133a0:	0801e0b8 	.word	0x0801e0b8
 80133a4:	0801e0c0 	.word	0x0801e0c0
 80133a8:	20011d58 	.word	0x20011d58
 80133ac:	20011d54 	.word	0x20011d54
 80133b0:	20011d18 	.word	0x20011d18
 80133b4:	20011d5a 	.word	0x20011d5a
 80133b8:	20011d50 	.word	0x20011d50
 80133bc:	20011d30 	.word	0x20011d30
 80133c0:	0801dd50 	.word	0x0801dd50
 80133c4:	0801e0c8 	.word	0x0801e0c8
 80133c8:	0801dd9c 	.word	0x0801dd9c
 80133cc:	0801e0d8 	.word	0x0801e0d8
 80133d0:	0801e0e8 	.word	0x0801e0e8
        off -= p->len;
 80133d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133d6:	895b      	ldrh	r3, [r3, #10]
 80133d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80133dc:	1ad3      	subs	r3, r2, r3
 80133de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80133e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80133e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80133e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133ea:	2200      	movs	r2, #0
 80133ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80133ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80133f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80133f6:	895b      	ldrh	r3, [r3, #10]
 80133f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d8e9      	bhi.n	80133d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013404:	4619      	mov	r1, r3
 8013406:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013408:	f7fc f89c 	bl	800f544 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013410:	4a90      	ldr	r2, [pc, #576]	@ (8013654 <tcp_receive+0x884>)
 8013412:	6013      	str	r3, [r2, #0]
 8013414:	4b90      	ldr	r3, [pc, #576]	@ (8013658 <tcp_receive+0x888>)
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	4a8e      	ldr	r2, [pc, #568]	@ (8013654 <tcp_receive+0x884>)
 801341a:	6812      	ldr	r2, [r2, #0]
 801341c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801341e:	e00d      	b.n	801343c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013420:	4b8c      	ldr	r3, [pc, #560]	@ (8013654 <tcp_receive+0x884>)
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	2b00      	cmp	r3, #0
 801342c:	da06      	bge.n	801343c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	8b5b      	ldrh	r3, [r3, #26]
 8013432:	f043 0302 	orr.w	r3, r3, #2
 8013436:	b29a      	uxth	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801343c:	4b85      	ldr	r3, [pc, #532]	@ (8013654 <tcp_receive+0x884>)
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013444:	1ad3      	subs	r3, r2, r3
 8013446:	2b00      	cmp	r3, #0
 8013448:	f2c0 8427 	blt.w	8013c9a <tcp_receive+0xeca>
 801344c:	4b81      	ldr	r3, [pc, #516]	@ (8013654 <tcp_receive+0x884>)
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013454:	6879      	ldr	r1, [r7, #4]
 8013456:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013458:	440b      	add	r3, r1
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	3301      	adds	r3, #1
 801345e:	2b00      	cmp	r3, #0
 8013460:	f300 841b 	bgt.w	8013c9a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013468:	4b7a      	ldr	r3, [pc, #488]	@ (8013654 <tcp_receive+0x884>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	429a      	cmp	r2, r3
 801346e:	f040 8298 	bne.w	80139a2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013472:	4b79      	ldr	r3, [pc, #484]	@ (8013658 <tcp_receive+0x888>)
 8013474:	891c      	ldrh	r4, [r3, #8]
 8013476:	4b78      	ldr	r3, [pc, #480]	@ (8013658 <tcp_receive+0x888>)
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	899b      	ldrh	r3, [r3, #12]
 801347c:	b29b      	uxth	r3, r3
 801347e:	4618      	mov	r0, r3
 8013480:	f7fa fd3a 	bl	800def8 <lwip_htons>
 8013484:	4603      	mov	r3, r0
 8013486:	b2db      	uxtb	r3, r3
 8013488:	f003 0303 	and.w	r3, r3, #3
 801348c:	2b00      	cmp	r3, #0
 801348e:	d001      	beq.n	8013494 <tcp_receive+0x6c4>
 8013490:	2301      	movs	r3, #1
 8013492:	e000      	b.n	8013496 <tcp_receive+0x6c6>
 8013494:	2300      	movs	r3, #0
 8013496:	4423      	add	r3, r4
 8013498:	b29a      	uxth	r2, r3
 801349a:	4b70      	ldr	r3, [pc, #448]	@ (801365c <tcp_receive+0x88c>)
 801349c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134a2:	4b6e      	ldr	r3, [pc, #440]	@ (801365c <tcp_receive+0x88c>)
 80134a4:	881b      	ldrh	r3, [r3, #0]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d274      	bcs.n	8013594 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80134aa:	4b6b      	ldr	r3, [pc, #428]	@ (8013658 <tcp_receive+0x888>)
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	899b      	ldrh	r3, [r3, #12]
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fa fd20 	bl	800def8 <lwip_htons>
 80134b8:	4603      	mov	r3, r0
 80134ba:	b2db      	uxtb	r3, r3
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d01e      	beq.n	8013502 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80134c4:	4b64      	ldr	r3, [pc, #400]	@ (8013658 <tcp_receive+0x888>)
 80134c6:	68db      	ldr	r3, [r3, #12]
 80134c8:	899b      	ldrh	r3, [r3, #12]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	b21b      	sxth	r3, r3
 80134ce:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80134d2:	b21c      	sxth	r4, r3
 80134d4:	4b60      	ldr	r3, [pc, #384]	@ (8013658 <tcp_receive+0x888>)
 80134d6:	68db      	ldr	r3, [r3, #12]
 80134d8:	899b      	ldrh	r3, [r3, #12]
 80134da:	b29b      	uxth	r3, r3
 80134dc:	4618      	mov	r0, r3
 80134de:	f7fa fd0b 	bl	800def8 <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	b2db      	uxtb	r3, r3
 80134e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fa fd03 	bl	800def8 <lwip_htons>
 80134f2:	4603      	mov	r3, r0
 80134f4:	b21b      	sxth	r3, r3
 80134f6:	4323      	orrs	r3, r4
 80134f8:	b21a      	sxth	r2, r3
 80134fa:	4b57      	ldr	r3, [pc, #348]	@ (8013658 <tcp_receive+0x888>)
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	b292      	uxth	r2, r2
 8013500:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013506:	4b54      	ldr	r3, [pc, #336]	@ (8013658 <tcp_receive+0x888>)
 8013508:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801350a:	4b53      	ldr	r3, [pc, #332]	@ (8013658 <tcp_receive+0x888>)
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	899b      	ldrh	r3, [r3, #12]
 8013510:	b29b      	uxth	r3, r3
 8013512:	4618      	mov	r0, r3
 8013514:	f7fa fcf0 	bl	800def8 <lwip_htons>
 8013518:	4603      	mov	r3, r0
 801351a:	b2db      	uxtb	r3, r3
 801351c:	f003 0302 	and.w	r3, r3, #2
 8013520:	2b00      	cmp	r3, #0
 8013522:	d005      	beq.n	8013530 <tcp_receive+0x760>
            inseg.len -= 1;
 8013524:	4b4c      	ldr	r3, [pc, #304]	@ (8013658 <tcp_receive+0x888>)
 8013526:	891b      	ldrh	r3, [r3, #8]
 8013528:	3b01      	subs	r3, #1
 801352a:	b29a      	uxth	r2, r3
 801352c:	4b4a      	ldr	r3, [pc, #296]	@ (8013658 <tcp_receive+0x888>)
 801352e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013530:	4b49      	ldr	r3, [pc, #292]	@ (8013658 <tcp_receive+0x888>)
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	4a48      	ldr	r2, [pc, #288]	@ (8013658 <tcp_receive+0x888>)
 8013536:	8912      	ldrh	r2, [r2, #8]
 8013538:	4611      	mov	r1, r2
 801353a:	4618      	mov	r0, r3
 801353c:	f7fb ff02 	bl	800f344 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013540:	4b45      	ldr	r3, [pc, #276]	@ (8013658 <tcp_receive+0x888>)
 8013542:	891c      	ldrh	r4, [r3, #8]
 8013544:	4b44      	ldr	r3, [pc, #272]	@ (8013658 <tcp_receive+0x888>)
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	899b      	ldrh	r3, [r3, #12]
 801354a:	b29b      	uxth	r3, r3
 801354c:	4618      	mov	r0, r3
 801354e:	f7fa fcd3 	bl	800def8 <lwip_htons>
 8013552:	4603      	mov	r3, r0
 8013554:	b2db      	uxtb	r3, r3
 8013556:	f003 0303 	and.w	r3, r3, #3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d001      	beq.n	8013562 <tcp_receive+0x792>
 801355e:	2301      	movs	r3, #1
 8013560:	e000      	b.n	8013564 <tcp_receive+0x794>
 8013562:	2300      	movs	r3, #0
 8013564:	4423      	add	r3, r4
 8013566:	b29a      	uxth	r2, r3
 8013568:	4b3c      	ldr	r3, [pc, #240]	@ (801365c <tcp_receive+0x88c>)
 801356a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801356c:	4b3b      	ldr	r3, [pc, #236]	@ (801365c <tcp_receive+0x88c>)
 801356e:	881b      	ldrh	r3, [r3, #0]
 8013570:	461a      	mov	r2, r3
 8013572:	4b38      	ldr	r3, [pc, #224]	@ (8013654 <tcp_receive+0x884>)
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	441a      	add	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801357c:	6879      	ldr	r1, [r7, #4]
 801357e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013580:	440b      	add	r3, r1
 8013582:	429a      	cmp	r2, r3
 8013584:	d006      	beq.n	8013594 <tcp_receive+0x7c4>
 8013586:	4b36      	ldr	r3, [pc, #216]	@ (8013660 <tcp_receive+0x890>)
 8013588:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801358c:	4935      	ldr	r1, [pc, #212]	@ (8013664 <tcp_receive+0x894>)
 801358e:	4836      	ldr	r0, [pc, #216]	@ (8013668 <tcp_receive+0x898>)
 8013590:	f006 f9a8 	bl	80198e4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013598:	2b00      	cmp	r3, #0
 801359a:	f000 80e6 	beq.w	801376a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801359e:	4b2e      	ldr	r3, [pc, #184]	@ (8013658 <tcp_receive+0x888>)
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	899b      	ldrh	r3, [r3, #12]
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fa fca6 	bl	800def8 <lwip_htons>
 80135ac:	4603      	mov	r3, r0
 80135ae:	b2db      	uxtb	r3, r3
 80135b0:	f003 0301 	and.w	r3, r3, #1
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d010      	beq.n	80135da <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80135b8:	e00a      	b.n	80135d0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80135ca:	68f8      	ldr	r0, [r7, #12]
 80135cc:	f7fd fcc5 	bl	8010f5a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1f0      	bne.n	80135ba <tcp_receive+0x7ea>
 80135d8:	e0c7      	b.n	801376a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80135de:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80135e0:	e051      	b.n	8013686 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80135e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	899b      	ldrh	r3, [r3, #12]
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fa fc84 	bl	800def8 <lwip_htons>
 80135f0:	4603      	mov	r3, r0
 80135f2:	b2db      	uxtb	r3, r3
 80135f4:	f003 0301 	and.w	r3, r3, #1
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d03c      	beq.n	8013676 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80135fc:	4b16      	ldr	r3, [pc, #88]	@ (8013658 <tcp_receive+0x888>)
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	899b      	ldrh	r3, [r3, #12]
 8013602:	b29b      	uxth	r3, r3
 8013604:	4618      	mov	r0, r3
 8013606:	f7fa fc77 	bl	800def8 <lwip_htons>
 801360a:	4603      	mov	r3, r0
 801360c:	b2db      	uxtb	r3, r3
 801360e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013612:	2b00      	cmp	r3, #0
 8013614:	d12f      	bne.n	8013676 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013616:	4b10      	ldr	r3, [pc, #64]	@ (8013658 <tcp_receive+0x888>)
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	899b      	ldrh	r3, [r3, #12]
 801361c:	b29c      	uxth	r4, r3
 801361e:	2001      	movs	r0, #1
 8013620:	f7fa fc6a 	bl	800def8 <lwip_htons>
 8013624:	4603      	mov	r3, r0
 8013626:	461a      	mov	r2, r3
 8013628:	4b0b      	ldr	r3, [pc, #44]	@ (8013658 <tcp_receive+0x888>)
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	4322      	orrs	r2, r4
 801362e:	b292      	uxth	r2, r2
 8013630:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013632:	4b09      	ldr	r3, [pc, #36]	@ (8013658 <tcp_receive+0x888>)
 8013634:	891c      	ldrh	r4, [r3, #8]
 8013636:	4b08      	ldr	r3, [pc, #32]	@ (8013658 <tcp_receive+0x888>)
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	899b      	ldrh	r3, [r3, #12]
 801363c:	b29b      	uxth	r3, r3
 801363e:	4618      	mov	r0, r3
 8013640:	f7fa fc5a 	bl	800def8 <lwip_htons>
 8013644:	4603      	mov	r3, r0
 8013646:	b2db      	uxtb	r3, r3
 8013648:	f003 0303 	and.w	r3, r3, #3
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00d      	beq.n	801366c <tcp_receive+0x89c>
 8013650:	2301      	movs	r3, #1
 8013652:	e00c      	b.n	801366e <tcp_receive+0x89e>
 8013654:	20011d50 	.word	0x20011d50
 8013658:	20011d30 	.word	0x20011d30
 801365c:	20011d5a 	.word	0x20011d5a
 8013660:	0801dd50 	.word	0x0801dd50
 8013664:	0801e0f8 	.word	0x0801e0f8
 8013668:	0801dd9c 	.word	0x0801dd9c
 801366c:	2300      	movs	r3, #0
 801366e:	4423      	add	r3, r4
 8013670:	b29a      	uxth	r2, r3
 8013672:	4b98      	ldr	r3, [pc, #608]	@ (80138d4 <tcp_receive+0xb04>)
 8013674:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013678:	613b      	str	r3, [r7, #16]
              next = next->next;
 801367a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8013680:	6938      	ldr	r0, [r7, #16]
 8013682:	f7fd fc6a 	bl	8010f5a <tcp_seg_free>
            while (next &&
 8013686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00e      	beq.n	80136aa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801368c:	4b91      	ldr	r3, [pc, #580]	@ (80138d4 <tcp_receive+0xb04>)
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	461a      	mov	r2, r3
 8013692:	4b91      	ldr	r3, [pc, #580]	@ (80138d8 <tcp_receive+0xb08>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	441a      	add	r2, r3
 8013698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80136a0:	8909      	ldrh	r1, [r1, #8]
 80136a2:	440b      	add	r3, r1
 80136a4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	da9b      	bge.n	80135e2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80136aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d059      	beq.n	8013764 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80136b0:	4b88      	ldr	r3, [pc, #544]	@ (80138d4 <tcp_receive+0xb04>)
 80136b2:	881b      	ldrh	r3, [r3, #0]
 80136b4:	461a      	mov	r2, r3
 80136b6:	4b88      	ldr	r3, [pc, #544]	@ (80138d8 <tcp_receive+0xb08>)
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	441a      	add	r2, r3
 80136bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	685b      	ldr	r3, [r3, #4]
 80136c2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	dd4d      	ble.n	8013764 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80136c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	4b81      	ldr	r3, [pc, #516]	@ (80138d8 <tcp_receive+0xb08>)
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	1ad3      	subs	r3, r2, r3
 80136d8:	b29a      	uxth	r2, r3
 80136da:	4b80      	ldr	r3, [pc, #512]	@ (80138dc <tcp_receive+0xb0c>)
 80136dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80136de:	4b7f      	ldr	r3, [pc, #508]	@ (80138dc <tcp_receive+0xb0c>)
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	899b      	ldrh	r3, [r3, #12]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fa fc06 	bl	800def8 <lwip_htons>
 80136ec:	4603      	mov	r3, r0
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	f003 0302 	and.w	r3, r3, #2
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d005      	beq.n	8013704 <tcp_receive+0x934>
                inseg.len -= 1;
 80136f8:	4b78      	ldr	r3, [pc, #480]	@ (80138dc <tcp_receive+0xb0c>)
 80136fa:	891b      	ldrh	r3, [r3, #8]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	b29a      	uxth	r2, r3
 8013700:	4b76      	ldr	r3, [pc, #472]	@ (80138dc <tcp_receive+0xb0c>)
 8013702:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013704:	4b75      	ldr	r3, [pc, #468]	@ (80138dc <tcp_receive+0xb0c>)
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	4a74      	ldr	r2, [pc, #464]	@ (80138dc <tcp_receive+0xb0c>)
 801370a:	8912      	ldrh	r2, [r2, #8]
 801370c:	4611      	mov	r1, r2
 801370e:	4618      	mov	r0, r3
 8013710:	f7fb fe18 	bl	800f344 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013714:	4b71      	ldr	r3, [pc, #452]	@ (80138dc <tcp_receive+0xb0c>)
 8013716:	891c      	ldrh	r4, [r3, #8]
 8013718:	4b70      	ldr	r3, [pc, #448]	@ (80138dc <tcp_receive+0xb0c>)
 801371a:	68db      	ldr	r3, [r3, #12]
 801371c:	899b      	ldrh	r3, [r3, #12]
 801371e:	b29b      	uxth	r3, r3
 8013720:	4618      	mov	r0, r3
 8013722:	f7fa fbe9 	bl	800def8 <lwip_htons>
 8013726:	4603      	mov	r3, r0
 8013728:	b2db      	uxtb	r3, r3
 801372a:	f003 0303 	and.w	r3, r3, #3
 801372e:	2b00      	cmp	r3, #0
 8013730:	d001      	beq.n	8013736 <tcp_receive+0x966>
 8013732:	2301      	movs	r3, #1
 8013734:	e000      	b.n	8013738 <tcp_receive+0x968>
 8013736:	2300      	movs	r3, #0
 8013738:	4423      	add	r3, r4
 801373a:	b29a      	uxth	r2, r3
 801373c:	4b65      	ldr	r3, [pc, #404]	@ (80138d4 <tcp_receive+0xb04>)
 801373e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013740:	4b64      	ldr	r3, [pc, #400]	@ (80138d4 <tcp_receive+0xb04>)
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	4b64      	ldr	r3, [pc, #400]	@ (80138d8 <tcp_receive+0xb08>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	441a      	add	r2, r3
 801374c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	429a      	cmp	r2, r3
 8013754:	d006      	beq.n	8013764 <tcp_receive+0x994>
 8013756:	4b62      	ldr	r3, [pc, #392]	@ (80138e0 <tcp_receive+0xb10>)
 8013758:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801375c:	4961      	ldr	r1, [pc, #388]	@ (80138e4 <tcp_receive+0xb14>)
 801375e:	4862      	ldr	r0, [pc, #392]	@ (80138e8 <tcp_receive+0xb18>)
 8013760:	f006 f8c0 	bl	80198e4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013768:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801376a:	4b5a      	ldr	r3, [pc, #360]	@ (80138d4 <tcp_receive+0xb04>)
 801376c:	881b      	ldrh	r3, [r3, #0]
 801376e:	461a      	mov	r2, r3
 8013770:	4b59      	ldr	r3, [pc, #356]	@ (80138d8 <tcp_receive+0xb08>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	441a      	add	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801377e:	4b55      	ldr	r3, [pc, #340]	@ (80138d4 <tcp_receive+0xb04>)
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	429a      	cmp	r2, r3
 8013784:	d206      	bcs.n	8013794 <tcp_receive+0x9c4>
 8013786:	4b56      	ldr	r3, [pc, #344]	@ (80138e0 <tcp_receive+0xb10>)
 8013788:	f240 6207 	movw	r2, #1543	@ 0x607
 801378c:	4957      	ldr	r1, [pc, #348]	@ (80138ec <tcp_receive+0xb1c>)
 801378e:	4856      	ldr	r0, [pc, #344]	@ (80138e8 <tcp_receive+0xb18>)
 8013790:	f006 f8a8 	bl	80198e4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013798:	4b4e      	ldr	r3, [pc, #312]	@ (80138d4 <tcp_receive+0xb04>)
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	b29a      	uxth	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f7fc feb1 	bl	801050c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80137aa:	4b4c      	ldr	r3, [pc, #304]	@ (80138dc <tcp_receive+0xb0c>)
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	891b      	ldrh	r3, [r3, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d006      	beq.n	80137c2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80137b4:	4b49      	ldr	r3, [pc, #292]	@ (80138dc <tcp_receive+0xb0c>)
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	4a4d      	ldr	r2, [pc, #308]	@ (80138f0 <tcp_receive+0xb20>)
 80137ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80137bc:	4b47      	ldr	r3, [pc, #284]	@ (80138dc <tcp_receive+0xb0c>)
 80137be:	2200      	movs	r2, #0
 80137c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80137c2:	4b46      	ldr	r3, [pc, #280]	@ (80138dc <tcp_receive+0xb0c>)
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	899b      	ldrh	r3, [r3, #12]
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fa fb94 	bl	800def8 <lwip_htons>
 80137d0:	4603      	mov	r3, r0
 80137d2:	b2db      	uxtb	r3, r3
 80137d4:	f003 0301 	and.w	r3, r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	f000 80b8 	beq.w	801394e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80137de:	4b45      	ldr	r3, [pc, #276]	@ (80138f4 <tcp_receive+0xb24>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	f043 0320 	orr.w	r3, r3, #32
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	4b42      	ldr	r3, [pc, #264]	@ (80138f4 <tcp_receive+0xb24>)
 80137ea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80137ec:	e0af      	b.n	801394e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137f2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137f8:	68db      	ldr	r3, [r3, #12]
 80137fa:	685b      	ldr	r3, [r3, #4]
 80137fc:	4a36      	ldr	r2, [pc, #216]	@ (80138d8 <tcp_receive+0xb08>)
 80137fe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	891b      	ldrh	r3, [r3, #8]
 8013804:	461c      	mov	r4, r3
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	899b      	ldrh	r3, [r3, #12]
 801380c:	b29b      	uxth	r3, r3
 801380e:	4618      	mov	r0, r3
 8013810:	f7fa fb72 	bl	800def8 <lwip_htons>
 8013814:	4603      	mov	r3, r0
 8013816:	b2db      	uxtb	r3, r3
 8013818:	f003 0303 	and.w	r3, r3, #3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <tcp_receive+0xa54>
 8013820:	2301      	movs	r3, #1
 8013822:	e000      	b.n	8013826 <tcp_receive+0xa56>
 8013824:	2300      	movs	r3, #0
 8013826:	191a      	adds	r2, r3, r4
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801382c:	441a      	add	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013836:	461c      	mov	r4, r3
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	891b      	ldrh	r3, [r3, #8]
 801383c:	461d      	mov	r5, r3
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	899b      	ldrh	r3, [r3, #12]
 8013844:	b29b      	uxth	r3, r3
 8013846:	4618      	mov	r0, r3
 8013848:	f7fa fb56 	bl	800def8 <lwip_htons>
 801384c:	4603      	mov	r3, r0
 801384e:	b2db      	uxtb	r3, r3
 8013850:	f003 0303 	and.w	r3, r3, #3
 8013854:	2b00      	cmp	r3, #0
 8013856:	d001      	beq.n	801385c <tcp_receive+0xa8c>
 8013858:	2301      	movs	r3, #1
 801385a:	e000      	b.n	801385e <tcp_receive+0xa8e>
 801385c:	2300      	movs	r3, #0
 801385e:	442b      	add	r3, r5
 8013860:	429c      	cmp	r4, r3
 8013862:	d206      	bcs.n	8013872 <tcp_receive+0xaa2>
 8013864:	4b1e      	ldr	r3, [pc, #120]	@ (80138e0 <tcp_receive+0xb10>)
 8013866:	f240 622b 	movw	r2, #1579	@ 0x62b
 801386a:	4923      	ldr	r1, [pc, #140]	@ (80138f8 <tcp_receive+0xb28>)
 801386c:	481e      	ldr	r0, [pc, #120]	@ (80138e8 <tcp_receive+0xb18>)
 801386e:	f006 f839 	bl	80198e4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	891b      	ldrh	r3, [r3, #8]
 8013876:	461c      	mov	r4, r3
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	899b      	ldrh	r3, [r3, #12]
 801387e:	b29b      	uxth	r3, r3
 8013880:	4618      	mov	r0, r3
 8013882:	f7fa fb39 	bl	800def8 <lwip_htons>
 8013886:	4603      	mov	r3, r0
 8013888:	b2db      	uxtb	r3, r3
 801388a:	f003 0303 	and.w	r3, r3, #3
 801388e:	2b00      	cmp	r3, #0
 8013890:	d001      	beq.n	8013896 <tcp_receive+0xac6>
 8013892:	2301      	movs	r3, #1
 8013894:	e000      	b.n	8013898 <tcp_receive+0xac8>
 8013896:	2300      	movs	r3, #0
 8013898:	1919      	adds	r1, r3, r4
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801389e:	b28b      	uxth	r3, r1
 80138a0:	1ad3      	subs	r3, r2, r3
 80138a2:	b29a      	uxth	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f7fc fe2f 	bl	801050c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	891b      	ldrh	r3, [r3, #8]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d028      	beq.n	801390a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80138b8:	4b0d      	ldr	r3, [pc, #52]	@ (80138f0 <tcp_receive+0xb20>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d01d      	beq.n	80138fc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80138c0:	4b0b      	ldr	r3, [pc, #44]	@ (80138f0 <tcp_receive+0xb20>)
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	685b      	ldr	r3, [r3, #4]
 80138c8:	4619      	mov	r1, r3
 80138ca:	4610      	mov	r0, r2
 80138cc:	f7fb ff8e 	bl	800f7ec <pbuf_cat>
 80138d0:	e018      	b.n	8013904 <tcp_receive+0xb34>
 80138d2:	bf00      	nop
 80138d4:	20011d5a 	.word	0x20011d5a
 80138d8:	20011d50 	.word	0x20011d50
 80138dc:	20011d30 	.word	0x20011d30
 80138e0:	0801dd50 	.word	0x0801dd50
 80138e4:	0801e130 	.word	0x0801e130
 80138e8:	0801dd9c 	.word	0x0801dd9c
 80138ec:	0801e16c 	.word	0x0801e16c
 80138f0:	20011d60 	.word	0x20011d60
 80138f4:	20011d5d 	.word	0x20011d5d
 80138f8:	0801e18c 	.word	0x0801e18c
            } else {
              recv_data = cseg->p;
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	4a70      	ldr	r2, [pc, #448]	@ (8013ac4 <tcp_receive+0xcf4>)
 8013902:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	2200      	movs	r2, #0
 8013908:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	899b      	ldrh	r3, [r3, #12]
 8013910:	b29b      	uxth	r3, r3
 8013912:	4618      	mov	r0, r3
 8013914:	f7fa faf0 	bl	800def8 <lwip_htons>
 8013918:	4603      	mov	r3, r0
 801391a:	b2db      	uxtb	r3, r3
 801391c:	f003 0301 	and.w	r3, r3, #1
 8013920:	2b00      	cmp	r3, #0
 8013922:	d00d      	beq.n	8013940 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013924:	4b68      	ldr	r3, [pc, #416]	@ (8013ac8 <tcp_receive+0xcf8>)
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	f043 0320 	orr.w	r3, r3, #32
 801392c:	b2da      	uxtb	r2, r3
 801392e:	4b66      	ldr	r3, [pc, #408]	@ (8013ac8 <tcp_receive+0xcf8>)
 8013930:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	7d1b      	ldrb	r3, [r3, #20]
 8013936:	2b04      	cmp	r3, #4
 8013938:	d102      	bne.n	8013940 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2207      	movs	r2, #7
 801393e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013948:	68b8      	ldr	r0, [r7, #8]
 801394a:	f7fd fb06 	bl	8010f5a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013952:	2b00      	cmp	r3, #0
 8013954:	d008      	beq.n	8013968 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	685a      	ldr	r2, [r3, #4]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013962:	429a      	cmp	r2, r3
 8013964:	f43f af43 	beq.w	80137ee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	8b5b      	ldrh	r3, [r3, #26]
 801396c:	f003 0301 	and.w	r3, r3, #1
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00e      	beq.n	8013992 <tcp_receive+0xbc2>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	8b5b      	ldrh	r3, [r3, #26]
 8013978:	f023 0301 	bic.w	r3, r3, #1
 801397c:	b29a      	uxth	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	835a      	strh	r2, [r3, #26]
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	8b5b      	ldrh	r3, [r3, #26]
 8013986:	f043 0302 	orr.w	r3, r3, #2
 801398a:	b29a      	uxth	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013990:	e187      	b.n	8013ca2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8b5b      	ldrh	r3, [r3, #26]
 8013996:	f043 0301 	orr.w	r3, r3, #1
 801399a:	b29a      	uxth	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80139a0:	e17f      	b.n	8013ca2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d106      	bne.n	80139b8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80139aa:	4848      	ldr	r0, [pc, #288]	@ (8013acc <tcp_receive+0xcfc>)
 80139ac:	f7fd faee 	bl	8010f8c <tcp_seg_copy>
 80139b0:	4602      	mov	r2, r0
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	675a      	str	r2, [r3, #116]	@ 0x74
 80139b6:	e16c      	b.n	8013c92 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80139b8:	2300      	movs	r3, #0
 80139ba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139c2:	e156      	b.n	8013c72 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80139c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	685a      	ldr	r2, [r3, #4]
 80139ca:	4b41      	ldr	r3, [pc, #260]	@ (8013ad0 <tcp_receive+0xd00>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d11d      	bne.n	8013a0e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80139d2:	4b3e      	ldr	r3, [pc, #248]	@ (8013acc <tcp_receive+0xcfc>)
 80139d4:	891a      	ldrh	r2, [r3, #8]
 80139d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139d8:	891b      	ldrh	r3, [r3, #8]
 80139da:	429a      	cmp	r2, r3
 80139dc:	f240 814e 	bls.w	8013c7c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80139e0:	483a      	ldr	r0, [pc, #232]	@ (8013acc <tcp_receive+0xcfc>)
 80139e2:	f7fd fad3 	bl	8010f8c <tcp_seg_copy>
 80139e6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80139e8:	697b      	ldr	r3, [r7, #20]
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	f000 8148 	beq.w	8013c80 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80139f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d003      	beq.n	80139fe <tcp_receive+0xc2e>
                    prev->next = cseg;
 80139f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139f8:	697a      	ldr	r2, [r7, #20]
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	e002      	b.n	8013a04 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	697a      	ldr	r2, [r7, #20]
 8013a02:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013a04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013a06:	6978      	ldr	r0, [r7, #20]
 8013a08:	f7ff f8de 	bl	8012bc8 <tcp_oos_insert_segment>
                }
                break;
 8013a0c:	e138      	b.n	8013c80 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d117      	bne.n	8013a44 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013a14:	4b2e      	ldr	r3, [pc, #184]	@ (8013ad0 <tcp_receive+0xd00>)
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	1ad3      	subs	r3, r2, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	da57      	bge.n	8013ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a24:	4829      	ldr	r0, [pc, #164]	@ (8013acc <tcp_receive+0xcfc>)
 8013a26:	f7fd fab1 	bl	8010f8c <tcp_seg_copy>
 8013a2a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013a2c:	69bb      	ldr	r3, [r7, #24]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f000 8128 	beq.w	8013c84 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	69ba      	ldr	r2, [r7, #24]
 8013a38:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013a3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013a3c:	69b8      	ldr	r0, [r7, #24]
 8013a3e:	f7ff f8c3 	bl	8012bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8013a42:	e11f      	b.n	8013c84 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013a44:	4b22      	ldr	r3, [pc, #136]	@ (8013ad0 <tcp_receive+0xd00>)
 8013a46:	681a      	ldr	r2, [r3, #0]
 8013a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a4a:	68db      	ldr	r3, [r3, #12]
 8013a4c:	685b      	ldr	r3, [r3, #4]
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	3b01      	subs	r3, #1
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	db3e      	blt.n	8013ad4 <tcp_receive+0xd04>
 8013a56:	4b1e      	ldr	r3, [pc, #120]	@ (8013ad0 <tcp_receive+0xd00>)
 8013a58:	681a      	ldr	r2, [r3, #0]
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a5c:	68db      	ldr	r3, [r3, #12]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	3301      	adds	r3, #1
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	dc35      	bgt.n	8013ad4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a68:	4818      	ldr	r0, [pc, #96]	@ (8013acc <tcp_receive+0xcfc>)
 8013a6a:	f7fd fa8f 	bl	8010f8c <tcp_seg_copy>
 8013a6e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 8108 	beq.w	8013c88 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a7a:	68db      	ldr	r3, [r3, #12]
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a80:	8912      	ldrh	r2, [r2, #8]
 8013a82:	441a      	add	r2, r3
 8013a84:	4b12      	ldr	r3, [pc, #72]	@ (8013ad0 <tcp_receive+0xd00>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	1ad3      	subs	r3, r2, r3
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	dd12      	ble.n	8013ab4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013a8e:	4b10      	ldr	r3, [pc, #64]	@ (8013ad0 <tcp_receive+0xd00>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	685b      	ldr	r3, [r3, #4]
 8013a9a:	b29b      	uxth	r3, r3
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	b29a      	uxth	r2, r3
 8013aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa6:	685a      	ldr	r2, [r3, #4]
 8013aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aaa:	891b      	ldrh	r3, [r3, #8]
 8013aac:	4619      	mov	r1, r3
 8013aae:	4610      	mov	r0, r2
 8013ab0:	f7fb fc48 	bl	800f344 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ab6:	69fa      	ldr	r2, [r7, #28]
 8013ab8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013aba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013abc:	69f8      	ldr	r0, [r7, #28]
 8013abe:	f7ff f883 	bl	8012bc8 <tcp_oos_insert_segment>
                  }
                  break;
 8013ac2:	e0e1      	b.n	8013c88 <tcp_receive+0xeb8>
 8013ac4:	20011d60 	.word	0x20011d60
 8013ac8:	20011d5d 	.word	0x20011d5d
 8013acc:	20011d30 	.word	0x20011d30
 8013ad0:	20011d50 	.word	0x20011d50
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f040 80c5 	bne.w	8013c6c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8013ce0 <tcp_receive+0xf10>)
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f340 80bc 	ble.w	8013c6c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	899b      	ldrh	r3, [r3, #12]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	4618      	mov	r0, r3
 8013afe:	f7fa f9fb 	bl	800def8 <lwip_htons>
 8013b02:	4603      	mov	r3, r0
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	f003 0301 	and.w	r3, r3, #1
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f040 80be 	bne.w	8013c8c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013b10:	4874      	ldr	r0, [pc, #464]	@ (8013ce4 <tcp_receive+0xf14>)
 8013b12:	f7fd fa3b 	bl	8010f8c <tcp_seg_copy>
 8013b16:	4602      	mov	r2, r0
 8013b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f000 80b5 	beq.w	8013c90 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013b2e:	8912      	ldrh	r2, [r2, #8]
 8013b30:	441a      	add	r2, r3
 8013b32:	4b6b      	ldr	r3, [pc, #428]	@ (8013ce0 <tcp_receive+0xf10>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	1ad3      	subs	r3, r2, r3
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	dd12      	ble.n	8013b62 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013b3c:	4b68      	ldr	r3, [pc, #416]	@ (8013ce0 <tcp_receive+0xf10>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	b29a      	uxth	r2, r3
 8013b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	b29b      	uxth	r3, r3
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b50:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b54:	685a      	ldr	r2, [r3, #4]
 8013b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b58:	891b      	ldrh	r3, [r3, #8]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	4610      	mov	r0, r2
 8013b5e:	f7fb fbf1 	bl	800f344 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013b62:	4b61      	ldr	r3, [pc, #388]	@ (8013ce8 <tcp_receive+0xf18>)
 8013b64:	881b      	ldrh	r3, [r3, #0]
 8013b66:	461a      	mov	r2, r3
 8013b68:	4b5d      	ldr	r3, [pc, #372]	@ (8013ce0 <tcp_receive+0xf10>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	441a      	add	r2, r3
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b72:	6879      	ldr	r1, [r7, #4]
 8013b74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013b76:	440b      	add	r3, r1
 8013b78:	1ad3      	subs	r3, r2, r3
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	f340 8088 	ble.w	8013c90 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	68db      	ldr	r3, [r3, #12]
 8013b86:	899b      	ldrh	r3, [r3, #12]
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fa f9b4 	bl	800def8 <lwip_htons>
 8013b90:	4603      	mov	r3, r0
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	f003 0301 	and.w	r3, r3, #1
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d021      	beq.n	8013be0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	899b      	ldrh	r3, [r3, #12]
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	b21b      	sxth	r3, r3
 8013ba8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013bac:	b21c      	sxth	r4, r3
 8013bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	899b      	ldrh	r3, [r3, #12]
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fa f99d 	bl	800def8 <lwip_htons>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f7fa f995 	bl	800def8 <lwip_htons>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	b21b      	sxth	r3, r3
 8013bd2:	4323      	orrs	r3, r4
 8013bd4:	b21a      	sxth	r2, r3
 8013bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	68db      	ldr	r3, [r3, #12]
 8013bdc:	b292      	uxth	r2, r2
 8013bde:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013bea:	4413      	add	r3, r2
 8013bec:	b299      	uxth	r1, r3
 8013bee:	4b3c      	ldr	r3, [pc, #240]	@ (8013ce0 <tcp_receive+0xf10>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	b29a      	uxth	r2, r3
 8013bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	1a8a      	subs	r2, r1, r2
 8013bfa:	b292      	uxth	r2, r2
 8013bfc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	685a      	ldr	r2, [r3, #4]
 8013c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	891b      	ldrh	r3, [r3, #8]
 8013c0a:	4619      	mov	r1, r3
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	f7fb fb99 	bl	800f344 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	891c      	ldrh	r4, [r3, #8]
 8013c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	899b      	ldrh	r3, [r3, #12]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fa f968 	bl	800def8 <lwip_htons>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	f003 0303 	and.w	r3, r3, #3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <tcp_receive+0xe68>
 8013c34:	2301      	movs	r3, #1
 8013c36:	e000      	b.n	8013c3a <tcp_receive+0xe6a>
 8013c38:	2300      	movs	r3, #0
 8013c3a:	4423      	add	r3, r4
 8013c3c:	b29a      	uxth	r2, r3
 8013c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8013ce8 <tcp_receive+0xf18>)
 8013c40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013c42:	4b29      	ldr	r3, [pc, #164]	@ (8013ce8 <tcp_receive+0xf18>)
 8013c44:	881b      	ldrh	r3, [r3, #0]
 8013c46:	461a      	mov	r2, r3
 8013c48:	4b25      	ldr	r3, [pc, #148]	@ (8013ce0 <tcp_receive+0xf10>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	441a      	add	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013c52:	6879      	ldr	r1, [r7, #4]
 8013c54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013c56:	440b      	add	r3, r1
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d019      	beq.n	8013c90 <tcp_receive+0xec0>
 8013c5c:	4b23      	ldr	r3, [pc, #140]	@ (8013cec <tcp_receive+0xf1c>)
 8013c5e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013c62:	4923      	ldr	r1, [pc, #140]	@ (8013cf0 <tcp_receive+0xf20>)
 8013c64:	4823      	ldr	r0, [pc, #140]	@ (8013cf4 <tcp_receive+0xf24>)
 8013c66:	f005 fe3d 	bl	80198e4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013c6a:	e011      	b.n	8013c90 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	f47f aea5 	bne.w	80139c4 <tcp_receive+0xbf4>
 8013c7a:	e00a      	b.n	8013c92 <tcp_receive+0xec2>
                break;
 8013c7c:	bf00      	nop
 8013c7e:	e008      	b.n	8013c92 <tcp_receive+0xec2>
                break;
 8013c80:	bf00      	nop
 8013c82:	e006      	b.n	8013c92 <tcp_receive+0xec2>
                  break;
 8013c84:	bf00      	nop
 8013c86:	e004      	b.n	8013c92 <tcp_receive+0xec2>
                  break;
 8013c88:	bf00      	nop
 8013c8a:	e002      	b.n	8013c92 <tcp_receive+0xec2>
                  break;
 8013c8c:	bf00      	nop
 8013c8e:	e000      	b.n	8013c92 <tcp_receive+0xec2>
                break;
 8013c90:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f001 fe88 	bl	80159a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013c98:	e003      	b.n	8013ca2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f001 fe84 	bl	80159a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013ca0:	e01a      	b.n	8013cd8 <tcp_receive+0xf08>
 8013ca2:	e019      	b.n	8013cd8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8013ce0 <tcp_receive+0xf10>)
 8013ca6:	681a      	ldr	r2, [r3, #0]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cac:	1ad3      	subs	r3, r2, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	db0a      	blt.n	8013cc8 <tcp_receive+0xef8>
 8013cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8013ce0 <tcp_receive+0xf10>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cba:	6879      	ldr	r1, [r7, #4]
 8013cbc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013cbe:	440b      	add	r3, r1
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	dd07      	ble.n	8013cd8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	8b5b      	ldrh	r3, [r3, #26]
 8013ccc:	f043 0302 	orr.w	r3, r3, #2
 8013cd0:	b29a      	uxth	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013cd6:	e7ff      	b.n	8013cd8 <tcp_receive+0xf08>
 8013cd8:	bf00      	nop
 8013cda:	3750      	adds	r7, #80	@ 0x50
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce0:	20011d50 	.word	0x20011d50
 8013ce4:	20011d30 	.word	0x20011d30
 8013ce8:	20011d5a 	.word	0x20011d5a
 8013cec:	0801dd50 	.word	0x0801dd50
 8013cf0:	0801e0f8 	.word	0x0801e0f8
 8013cf4:	0801dd9c 	.word	0x0801dd9c

08013cf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013cf8:	b480      	push	{r7}
 8013cfa:	b083      	sub	sp, #12
 8013cfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013cfe:	4b15      	ldr	r3, [pc, #84]	@ (8013d54 <tcp_get_next_optbyte+0x5c>)
 8013d00:	881b      	ldrh	r3, [r3, #0]
 8013d02:	1c5a      	adds	r2, r3, #1
 8013d04:	b291      	uxth	r1, r2
 8013d06:	4a13      	ldr	r2, [pc, #76]	@ (8013d54 <tcp_get_next_optbyte+0x5c>)
 8013d08:	8011      	strh	r1, [r2, #0]
 8013d0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013d0c:	4b12      	ldr	r3, [pc, #72]	@ (8013d58 <tcp_get_next_optbyte+0x60>)
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d004      	beq.n	8013d1e <tcp_get_next_optbyte+0x26>
 8013d14:	4b11      	ldr	r3, [pc, #68]	@ (8013d5c <tcp_get_next_optbyte+0x64>)
 8013d16:	881b      	ldrh	r3, [r3, #0]
 8013d18:	88fa      	ldrh	r2, [r7, #6]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d208      	bcs.n	8013d30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013d1e:	4b10      	ldr	r3, [pc, #64]	@ (8013d60 <tcp_get_next_optbyte+0x68>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	3314      	adds	r3, #20
 8013d24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013d26:	88fb      	ldrh	r3, [r7, #6]
 8013d28:	683a      	ldr	r2, [r7, #0]
 8013d2a:	4413      	add	r3, r2
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	e00b      	b.n	8013d48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013d30:	88fb      	ldrh	r3, [r7, #6]
 8013d32:	b2da      	uxtb	r2, r3
 8013d34:	4b09      	ldr	r3, [pc, #36]	@ (8013d5c <tcp_get_next_optbyte+0x64>)
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013d3e:	4b06      	ldr	r3, [pc, #24]	@ (8013d58 <tcp_get_next_optbyte+0x60>)
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	797b      	ldrb	r3, [r7, #5]
 8013d44:	4413      	add	r3, r2
 8013d46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	370c      	adds	r7, #12
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr
 8013d54:	20011d4c 	.word	0x20011d4c
 8013d58:	20011d48 	.word	0x20011d48
 8013d5c:	20011d46 	.word	0x20011d46
 8013d60:	20011d40 	.word	0x20011d40

08013d64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d106      	bne.n	8013d80 <tcp_parseopt+0x1c>
 8013d72:	4b32      	ldr	r3, [pc, #200]	@ (8013e3c <tcp_parseopt+0xd8>)
 8013d74:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013d78:	4931      	ldr	r1, [pc, #196]	@ (8013e40 <tcp_parseopt+0xdc>)
 8013d7a:	4832      	ldr	r0, [pc, #200]	@ (8013e44 <tcp_parseopt+0xe0>)
 8013d7c:	f005 fdb2 	bl	80198e4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013d80:	4b31      	ldr	r3, [pc, #196]	@ (8013e48 <tcp_parseopt+0xe4>)
 8013d82:	881b      	ldrh	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d056      	beq.n	8013e36 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013d88:	4b30      	ldr	r3, [pc, #192]	@ (8013e4c <tcp_parseopt+0xe8>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	801a      	strh	r2, [r3, #0]
 8013d8e:	e046      	b.n	8013e1e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013d90:	f7ff ffb2 	bl	8013cf8 <tcp_get_next_optbyte>
 8013d94:	4603      	mov	r3, r0
 8013d96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013d98:	7bfb      	ldrb	r3, [r7, #15]
 8013d9a:	2b02      	cmp	r3, #2
 8013d9c:	d006      	beq.n	8013dac <tcp_parseopt+0x48>
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	dc2a      	bgt.n	8013df8 <tcp_parseopt+0x94>
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d042      	beq.n	8013e2c <tcp_parseopt+0xc8>
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d038      	beq.n	8013e1c <tcp_parseopt+0xb8>
 8013daa:	e025      	b.n	8013df8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013dac:	f7ff ffa4 	bl	8013cf8 <tcp_get_next_optbyte>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b04      	cmp	r3, #4
 8013db4:	d13c      	bne.n	8013e30 <tcp_parseopt+0xcc>
 8013db6:	4b25      	ldr	r3, [pc, #148]	@ (8013e4c <tcp_parseopt+0xe8>)
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	3301      	adds	r3, #1
 8013dbc:	4a22      	ldr	r2, [pc, #136]	@ (8013e48 <tcp_parseopt+0xe4>)
 8013dbe:	8812      	ldrh	r2, [r2, #0]
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	da35      	bge.n	8013e30 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013dc4:	f7ff ff98 	bl	8013cf8 <tcp_get_next_optbyte>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	021b      	lsls	r3, r3, #8
 8013dcc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013dce:	f7ff ff93 	bl	8013cf8 <tcp_get_next_optbyte>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	89bb      	ldrh	r3, [r7, #12]
 8013dd8:	4313      	orrs	r3, r2
 8013dda:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013ddc:	89bb      	ldrh	r3, [r7, #12]
 8013dde:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013de2:	d804      	bhi.n	8013dee <tcp_parseopt+0x8a>
 8013de4:	89bb      	ldrh	r3, [r7, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d001      	beq.n	8013dee <tcp_parseopt+0x8a>
 8013dea:	89ba      	ldrh	r2, [r7, #12]
 8013dec:	e001      	b.n	8013df2 <tcp_parseopt+0x8e>
 8013dee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013df6:	e012      	b.n	8013e1e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013df8:	f7ff ff7e 	bl	8013cf8 <tcp_get_next_optbyte>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013e00:	7afb      	ldrb	r3, [r7, #11]
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d916      	bls.n	8013e34 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013e06:	7afb      	ldrb	r3, [r7, #11]
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	4b10      	ldr	r3, [pc, #64]	@ (8013e4c <tcp_parseopt+0xe8>)
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	4413      	add	r3, r2
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	3b02      	subs	r3, #2
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	4b0d      	ldr	r3, [pc, #52]	@ (8013e4c <tcp_parseopt+0xe8>)
 8013e18:	801a      	strh	r2, [r3, #0]
 8013e1a:	e000      	b.n	8013e1e <tcp_parseopt+0xba>
          break;
 8013e1c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8013e4c <tcp_parseopt+0xe8>)
 8013e20:	881a      	ldrh	r2, [r3, #0]
 8013e22:	4b09      	ldr	r3, [pc, #36]	@ (8013e48 <tcp_parseopt+0xe4>)
 8013e24:	881b      	ldrh	r3, [r3, #0]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d3b2      	bcc.n	8013d90 <tcp_parseopt+0x2c>
 8013e2a:	e004      	b.n	8013e36 <tcp_parseopt+0xd2>
          return;
 8013e2c:	bf00      	nop
 8013e2e:	e002      	b.n	8013e36 <tcp_parseopt+0xd2>
            return;
 8013e30:	bf00      	nop
 8013e32:	e000      	b.n	8013e36 <tcp_parseopt+0xd2>
            return;
 8013e34:	bf00      	nop
      }
    }
  }
}
 8013e36:	3710      	adds	r7, #16
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}
 8013e3c:	0801dd50 	.word	0x0801dd50
 8013e40:	0801e1b4 	.word	0x0801e1b4
 8013e44:	0801dd9c 	.word	0x0801dd9c
 8013e48:	20011d44 	.word	0x20011d44
 8013e4c:	20011d4c 	.word	0x20011d4c

08013e50 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013e50:	b480      	push	{r7}
 8013e52:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013e54:	4b05      	ldr	r3, [pc, #20]	@ (8013e6c <tcp_trigger_input_pcb_close+0x1c>)
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	f043 0310 	orr.w	r3, r3, #16
 8013e5c:	b2da      	uxtb	r2, r3
 8013e5e:	4b03      	ldr	r3, [pc, #12]	@ (8013e6c <tcp_trigger_input_pcb_close+0x1c>)
 8013e60:	701a      	strb	r2, [r3, #0]
}
 8013e62:	bf00      	nop
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr
 8013e6c:	20011d5d 	.word	0x20011d5d

08013e70 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b084      	sub	sp, #16
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d00a      	beq.n	8013e98 <tcp_route+0x28>
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	7a1b      	ldrb	r3, [r3, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d006      	beq.n	8013e98 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	7a1b      	ldrb	r3, [r3, #8]
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7fb f850 	bl	800ef34 <netif_get_by_index>
 8013e94:	4603      	mov	r3, r0
 8013e96:	e003      	b.n	8013ea0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f003 fc49 	bl	8017730 <ip4_route>
 8013e9e:	4603      	mov	r3, r0
  }
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013ea8:	b590      	push	{r4, r7, lr}
 8013eaa:	b087      	sub	sp, #28
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	603b      	str	r3, [r7, #0]
 8013eb4:	4613      	mov	r3, r2
 8013eb6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d105      	bne.n	8013eca <tcp_create_segment+0x22>
 8013ebe:	4b43      	ldr	r3, [pc, #268]	@ (8013fcc <tcp_create_segment+0x124>)
 8013ec0:	22a3      	movs	r2, #163	@ 0xa3
 8013ec2:	4943      	ldr	r1, [pc, #268]	@ (8013fd0 <tcp_create_segment+0x128>)
 8013ec4:	4843      	ldr	r0, [pc, #268]	@ (8013fd4 <tcp_create_segment+0x12c>)
 8013ec6:	f005 fd0d 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d105      	bne.n	8013edc <tcp_create_segment+0x34>
 8013ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8013fcc <tcp_create_segment+0x124>)
 8013ed2:	22a4      	movs	r2, #164	@ 0xa4
 8013ed4:	4940      	ldr	r1, [pc, #256]	@ (8013fd8 <tcp_create_segment+0x130>)
 8013ed6:	483f      	ldr	r0, [pc, #252]	@ (8013fd4 <tcp_create_segment+0x12c>)
 8013ed8:	f005 fd04 	bl	80198e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013edc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013ee0:	009b      	lsls	r3, r3, #2
 8013ee2:	b2db      	uxtb	r3, r3
 8013ee4:	f003 0304 	and.w	r3, r3, #4
 8013ee8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013eea:	2003      	movs	r0, #3
 8013eec:	f7fa fcba 	bl	800e864 <memp_malloc>
 8013ef0:	6138      	str	r0, [r7, #16]
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d104      	bne.n	8013f02 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013ef8:	68b8      	ldr	r0, [r7, #8]
 8013efa:	f7fb fba9 	bl	800f650 <pbuf_free>
    return NULL;
 8013efe:	2300      	movs	r3, #0
 8013f00:	e060      	b.n	8013fc4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013f08:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	68ba      	ldr	r2, [r7, #8]
 8013f14:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	891a      	ldrh	r2, [r3, #8]
 8013f1a:	7dfb      	ldrb	r3, [r7, #23]
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d205      	bcs.n	8013f2e <tcp_create_segment+0x86>
 8013f22:	4b2a      	ldr	r3, [pc, #168]	@ (8013fcc <tcp_create_segment+0x124>)
 8013f24:	22b0      	movs	r2, #176	@ 0xb0
 8013f26:	492d      	ldr	r1, [pc, #180]	@ (8013fdc <tcp_create_segment+0x134>)
 8013f28:	482a      	ldr	r0, [pc, #168]	@ (8013fd4 <tcp_create_segment+0x12c>)
 8013f2a:	f005 fcdb 	bl	80198e4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	891a      	ldrh	r2, [r3, #8]
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
 8013f34:	b29b      	uxth	r3, r3
 8013f36:	1ad3      	subs	r3, r2, r3
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013f3e:	2114      	movs	r1, #20
 8013f40:	68b8      	ldr	r0, [r7, #8]
 8013f42:	f7fb faef 	bl	800f524 <pbuf_add_header>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d004      	beq.n	8013f56 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013f4c:	6938      	ldr	r0, [r7, #16]
 8013f4e:	f7fd f804 	bl	8010f5a <tcp_seg_free>
    return NULL;
 8013f52:	2300      	movs	r3, #0
 8013f54:	e036      	b.n	8013fc4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	8ada      	ldrh	r2, [r3, #22]
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	68dc      	ldr	r4, [r3, #12]
 8013f68:	4610      	mov	r0, r2
 8013f6a:	f7f9 ffc5 	bl	800def8 <lwip_htons>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	8b1a      	ldrh	r2, [r3, #24]
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	68dc      	ldr	r4, [r3, #12]
 8013f7a:	4610      	mov	r0, r2
 8013f7c:	f7f9 ffbc 	bl	800def8 <lwip_htons>
 8013f80:	4603      	mov	r3, r0
 8013f82:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	68dc      	ldr	r4, [r3, #12]
 8013f88:	6838      	ldr	r0, [r7, #0]
 8013f8a:	f7f9 ffca 	bl	800df22 <lwip_htonl>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013f92:	7dfb      	ldrb	r3, [r7, #23]
 8013f94:	089b      	lsrs	r3, r3, #2
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	3305      	adds	r3, #5
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	031b      	lsls	r3, r3, #12
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	68dc      	ldr	r4, [r3, #12]
 8013fac:	4610      	mov	r0, r2
 8013fae:	f7f9 ffa3 	bl	800def8 <lwip_htons>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	68db      	ldr	r3, [r3, #12]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	749a      	strb	r2, [r3, #18]
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	74da      	strb	r2, [r3, #19]
  return seg;
 8013fc2:	693b      	ldr	r3, [r7, #16]
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	371c      	adds	r7, #28
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd90      	pop	{r4, r7, pc}
 8013fcc:	0801e1d0 	.word	0x0801e1d0
 8013fd0:	0801e204 	.word	0x0801e204
 8013fd4:	0801e224 	.word	0x0801e224
 8013fd8:	0801e24c 	.word	0x0801e24c
 8013fdc:	0801e270 	.word	0x0801e270

08013fe0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	607b      	str	r3, [r7, #4]
 8013fe8:	4603      	mov	r3, r0
 8013fea:	73fb      	strb	r3, [r7, #15]
 8013fec:	460b      	mov	r3, r1
 8013fee:	81bb      	strh	r3, [r7, #12]
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013ff4:	89bb      	ldrh	r3, [r7, #12]
 8013ff6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d105      	bne.n	801400a <tcp_pbuf_prealloc+0x2a>
 8013ffe:	4b30      	ldr	r3, [pc, #192]	@ (80140c0 <tcp_pbuf_prealloc+0xe0>)
 8014000:	22e8      	movs	r2, #232	@ 0xe8
 8014002:	4930      	ldr	r1, [pc, #192]	@ (80140c4 <tcp_pbuf_prealloc+0xe4>)
 8014004:	4830      	ldr	r0, [pc, #192]	@ (80140c8 <tcp_pbuf_prealloc+0xe8>)
 8014006:	f005 fc6d 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801400a:	6a3b      	ldr	r3, [r7, #32]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d105      	bne.n	801401c <tcp_pbuf_prealloc+0x3c>
 8014010:	4b2b      	ldr	r3, [pc, #172]	@ (80140c0 <tcp_pbuf_prealloc+0xe0>)
 8014012:	22e9      	movs	r2, #233	@ 0xe9
 8014014:	492d      	ldr	r1, [pc, #180]	@ (80140cc <tcp_pbuf_prealloc+0xec>)
 8014016:	482c      	ldr	r0, [pc, #176]	@ (80140c8 <tcp_pbuf_prealloc+0xe8>)
 8014018:	f005 fc64 	bl	80198e4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801401c:	89ba      	ldrh	r2, [r7, #12]
 801401e:	897b      	ldrh	r3, [r7, #10]
 8014020:	429a      	cmp	r2, r3
 8014022:	d221      	bcs.n	8014068 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014024:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014028:	f003 0302 	and.w	r3, r3, #2
 801402c:	2b00      	cmp	r3, #0
 801402e:	d111      	bne.n	8014054 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014030:	6a3b      	ldr	r3, [r7, #32]
 8014032:	8b5b      	ldrh	r3, [r3, #26]
 8014034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014038:	2b00      	cmp	r3, #0
 801403a:	d115      	bne.n	8014068 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801403c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014040:	2b00      	cmp	r3, #0
 8014042:	d007      	beq.n	8014054 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014044:	6a3b      	ldr	r3, [r7, #32]
 8014046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8014050:	2b00      	cmp	r3, #0
 8014052:	d009      	beq.n	8014068 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014054:	89bb      	ldrh	r3, [r7, #12]
 8014056:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801405a:	f023 0203 	bic.w	r2, r3, #3
 801405e:	897b      	ldrh	r3, [r7, #10]
 8014060:	4293      	cmp	r3, r2
 8014062:	bf28      	it	cs
 8014064:	4613      	movcs	r3, r2
 8014066:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014068:	8af9      	ldrh	r1, [r7, #22]
 801406a:	7bfb      	ldrb	r3, [r7, #15]
 801406c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014070:	4618      	mov	r0, r3
 8014072:	f7fb f809 	bl	800f088 <pbuf_alloc>
 8014076:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d101      	bne.n	8014082 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801407e:	2300      	movs	r3, #0
 8014080:	e019      	b.n	80140b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d006      	beq.n	8014098 <tcp_pbuf_prealloc+0xb8>
 801408a:	4b0d      	ldr	r3, [pc, #52]	@ (80140c0 <tcp_pbuf_prealloc+0xe0>)
 801408c:	f240 120b 	movw	r2, #267	@ 0x10b
 8014090:	490f      	ldr	r1, [pc, #60]	@ (80140d0 <tcp_pbuf_prealloc+0xf0>)
 8014092:	480d      	ldr	r0, [pc, #52]	@ (80140c8 <tcp_pbuf_prealloc+0xe8>)
 8014094:	f005 fc26 	bl	80198e4 <iprintf>
  *oversize = p->len - length;
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	895a      	ldrh	r2, [r3, #10]
 801409c:	89bb      	ldrh	r3, [r7, #12]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	b29a      	uxth	r2, r3
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80140a6:	693b      	ldr	r3, [r7, #16]
 80140a8:	89ba      	ldrh	r2, [r7, #12]
 80140aa:	811a      	strh	r2, [r3, #8]
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	891a      	ldrh	r2, [r3, #8]
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	815a      	strh	r2, [r3, #10]
  return p;
 80140b4:	693b      	ldr	r3, [r7, #16]
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3718      	adds	r7, #24
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}
 80140be:	bf00      	nop
 80140c0:	0801e1d0 	.word	0x0801e1d0
 80140c4:	0801e288 	.word	0x0801e288
 80140c8:	0801e224 	.word	0x0801e224
 80140cc:	0801e2ac 	.word	0x0801e2ac
 80140d0:	0801e2cc 	.word	0x0801e2cc

080140d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	460b      	mov	r3, r1
 80140de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d106      	bne.n	80140f4 <tcp_write_checks+0x20>
 80140e6:	4b33      	ldr	r3, [pc, #204]	@ (80141b4 <tcp_write_checks+0xe0>)
 80140e8:	f240 1233 	movw	r2, #307	@ 0x133
 80140ec:	4932      	ldr	r1, [pc, #200]	@ (80141b8 <tcp_write_checks+0xe4>)
 80140ee:	4833      	ldr	r0, [pc, #204]	@ (80141bc <tcp_write_checks+0xe8>)
 80140f0:	f005 fbf8 	bl	80198e4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	7d1b      	ldrb	r3, [r3, #20]
 80140f8:	2b04      	cmp	r3, #4
 80140fa:	d00e      	beq.n	801411a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014100:	2b07      	cmp	r3, #7
 8014102:	d00a      	beq.n	801411a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014108:	2b02      	cmp	r3, #2
 801410a:	d006      	beq.n	801411a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014110:	2b03      	cmp	r3, #3
 8014112:	d002      	beq.n	801411a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014114:	f06f 030a 	mvn.w	r3, #10
 8014118:	e048      	b.n	80141ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801411a:	887b      	ldrh	r3, [r7, #2]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d101      	bne.n	8014124 <tcp_write_checks+0x50>
    return ERR_OK;
 8014120:	2300      	movs	r3, #0
 8014122:	e043      	b.n	80141ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801412a:	887a      	ldrh	r2, [r7, #2]
 801412c:	429a      	cmp	r2, r3
 801412e:	d909      	bls.n	8014144 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	8b5b      	ldrh	r3, [r3, #26]
 8014134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014138:	b29a      	uxth	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801413e:	f04f 33ff 	mov.w	r3, #4294967295
 8014142:	e033      	b.n	80141ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801414a:	2b08      	cmp	r3, #8
 801414c:	d909      	bls.n	8014162 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	8b5b      	ldrh	r3, [r3, #26]
 8014152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014156:	b29a      	uxth	r2, r3
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801415c:	f04f 33ff 	mov.w	r3, #4294967295
 8014160:	e024      	b.n	80141ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014168:	2b00      	cmp	r3, #0
 801416a:	d00f      	beq.n	801418c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014170:	2b00      	cmp	r3, #0
 8014172:	d11a      	bne.n	80141aa <tcp_write_checks+0xd6>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014178:	2b00      	cmp	r3, #0
 801417a:	d116      	bne.n	80141aa <tcp_write_checks+0xd6>
 801417c:	4b0d      	ldr	r3, [pc, #52]	@ (80141b4 <tcp_write_checks+0xe0>)
 801417e:	f240 1255 	movw	r2, #341	@ 0x155
 8014182:	490f      	ldr	r1, [pc, #60]	@ (80141c0 <tcp_write_checks+0xec>)
 8014184:	480d      	ldr	r0, [pc, #52]	@ (80141bc <tcp_write_checks+0xe8>)
 8014186:	f005 fbad 	bl	80198e4 <iprintf>
 801418a:	e00e      	b.n	80141aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014190:	2b00      	cmp	r3, #0
 8014192:	d103      	bne.n	801419c <tcp_write_checks+0xc8>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014198:	2b00      	cmp	r3, #0
 801419a:	d006      	beq.n	80141aa <tcp_write_checks+0xd6>
 801419c:	4b05      	ldr	r3, [pc, #20]	@ (80141b4 <tcp_write_checks+0xe0>)
 801419e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80141a2:	4908      	ldr	r1, [pc, #32]	@ (80141c4 <tcp_write_checks+0xf0>)
 80141a4:	4805      	ldr	r0, [pc, #20]	@ (80141bc <tcp_write_checks+0xe8>)
 80141a6:	f005 fb9d 	bl	80198e4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80141aa:	2300      	movs	r3, #0
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	3708      	adds	r7, #8
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	0801e1d0 	.word	0x0801e1d0
 80141b8:	0801e2e0 	.word	0x0801e2e0
 80141bc:	0801e224 	.word	0x0801e224
 80141c0:	0801e300 	.word	0x0801e300
 80141c4:	0801e33c 	.word	0x0801e33c

080141c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80141c8:	b590      	push	{r4, r7, lr}
 80141ca:	b09b      	sub	sp, #108	@ 0x6c
 80141cc:	af04      	add	r7, sp, #16
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	4611      	mov	r1, r2
 80141d4:	461a      	mov	r2, r3
 80141d6:	460b      	mov	r3, r1
 80141d8:	80fb      	strh	r3, [r7, #6]
 80141da:	4613      	mov	r3, r2
 80141dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80141de:	2300      	movs	r3, #0
 80141e0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80141e2:	2300      	movs	r3, #0
 80141e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80141e6:	2300      	movs	r3, #0
 80141e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80141ea:	2300      	movs	r3, #0
 80141ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141ee:	2300      	movs	r3, #0
 80141f0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80141f2:	2300      	movs	r3, #0
 80141f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80141f8:	2300      	movs	r3, #0
 80141fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014202:	2300      	movs	r3, #0
 8014204:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d109      	bne.n	8014224 <tcp_write+0x5c>
 8014210:	4ba4      	ldr	r3, [pc, #656]	@ (80144a4 <tcp_write+0x2dc>)
 8014212:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8014216:	49a4      	ldr	r1, [pc, #656]	@ (80144a8 <tcp_write+0x2e0>)
 8014218:	48a4      	ldr	r0, [pc, #656]	@ (80144ac <tcp_write+0x2e4>)
 801421a:	f005 fb63 	bl	80198e4 <iprintf>
 801421e:	f06f 030f 	mvn.w	r3, #15
 8014222:	e32a      	b.n	801487a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801422a:	085b      	lsrs	r3, r3, #1
 801422c:	b29a      	uxth	r2, r3
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014232:	4293      	cmp	r3, r2
 8014234:	bf28      	it	cs
 8014236:	4613      	movcs	r3, r2
 8014238:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801423a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801423c:	2b00      	cmp	r3, #0
 801423e:	d102      	bne.n	8014246 <tcp_write+0x7e>
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014244:	e000      	b.n	8014248 <tcp_write+0x80>
 8014246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014248:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d109      	bne.n	8014264 <tcp_write+0x9c>
 8014250:	4b94      	ldr	r3, [pc, #592]	@ (80144a4 <tcp_write+0x2dc>)
 8014252:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8014256:	4996      	ldr	r1, [pc, #600]	@ (80144b0 <tcp_write+0x2e8>)
 8014258:	4894      	ldr	r0, [pc, #592]	@ (80144ac <tcp_write+0x2e4>)
 801425a:	f005 fb43 	bl	80198e4 <iprintf>
 801425e:	f06f 030f 	mvn.w	r3, #15
 8014262:	e30a      	b.n	801487a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014264:	88fb      	ldrh	r3, [r7, #6]
 8014266:	4619      	mov	r1, r3
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f7ff ff33 	bl	80140d4 <tcp_write_checks>
 801426e:	4603      	mov	r3, r0
 8014270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8014274:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014278:	2b00      	cmp	r3, #0
 801427a:	d002      	beq.n	8014282 <tcp_write+0xba>
    return err;
 801427c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8014280:	e2fb      	b.n	801487a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014288:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801428c:	2300      	movs	r3, #0
 801428e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014296:	2b00      	cmp	r3, #0
 8014298:	f000 80f6 	beq.w	8014488 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80142a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80142a2:	e002      	b.n	80142aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80142a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80142aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d1f8      	bne.n	80142a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80142b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142b4:	7a9b      	ldrb	r3, [r3, #10]
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	b29b      	uxth	r3, r3
 80142ba:	f003 0304 	and.w	r3, r3, #4
 80142be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80142c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80142c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142c4:	891b      	ldrh	r3, [r3, #8]
 80142c6:	4619      	mov	r1, r3
 80142c8:	8c3b      	ldrh	r3, [r7, #32]
 80142ca:	440b      	add	r3, r1
 80142cc:	429a      	cmp	r2, r3
 80142ce:	da06      	bge.n	80142de <tcp_write+0x116>
 80142d0:	4b74      	ldr	r3, [pc, #464]	@ (80144a4 <tcp_write+0x2dc>)
 80142d2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80142d6:	4977      	ldr	r1, [pc, #476]	@ (80144b4 <tcp_write+0x2ec>)
 80142d8:	4874      	ldr	r0, [pc, #464]	@ (80144ac <tcp_write+0x2e4>)
 80142da:	f005 fb03 	bl	80198e4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80142de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e0:	891a      	ldrh	r2, [r3, #8]
 80142e2:	8c3b      	ldrh	r3, [r7, #32]
 80142e4:	4413      	add	r3, r2
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80142ea:	1ad3      	subs	r3, r2, r3
 80142ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80142f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80142f6:	8a7b      	ldrh	r3, [r7, #18]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d026      	beq.n	801434a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80142fc:	8a7b      	ldrh	r3, [r7, #18]
 80142fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014300:	429a      	cmp	r2, r3
 8014302:	d206      	bcs.n	8014312 <tcp_write+0x14a>
 8014304:	4b67      	ldr	r3, [pc, #412]	@ (80144a4 <tcp_write+0x2dc>)
 8014306:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801430a:	496b      	ldr	r1, [pc, #428]	@ (80144b8 <tcp_write+0x2f0>)
 801430c:	4867      	ldr	r0, [pc, #412]	@ (80144ac <tcp_write+0x2e4>)
 801430e:	f005 fae9 	bl	80198e4 <iprintf>
      seg = last_unsent;
 8014312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014314:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014316:	8a7b      	ldrh	r3, [r7, #18]
 8014318:	88fa      	ldrh	r2, [r7, #6]
 801431a:	4293      	cmp	r3, r2
 801431c:	bf28      	it	cs
 801431e:	4613      	movcs	r3, r2
 8014320:	b29b      	uxth	r3, r3
 8014322:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014324:	4293      	cmp	r3, r2
 8014326:	bf28      	it	cs
 8014328:	4613      	movcs	r3, r2
 801432a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801432c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014330:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014332:	4413      	add	r3, r2
 8014334:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8014338:	8a7a      	ldrh	r2, [r7, #18]
 801433a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801433c:	1ad3      	subs	r3, r2, r3
 801433e:	b29b      	uxth	r3, r3
 8014340:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014342:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014344:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801434a:	8a7b      	ldrh	r3, [r7, #18]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <tcp_write+0x1a0>
 8014350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014354:	88fb      	ldrh	r3, [r7, #6]
 8014356:	429a      	cmp	r2, r3
 8014358:	d006      	beq.n	8014368 <tcp_write+0x1a0>
 801435a:	4b52      	ldr	r3, [pc, #328]	@ (80144a4 <tcp_write+0x2dc>)
 801435c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014360:	4956      	ldr	r1, [pc, #344]	@ (80144bc <tcp_write+0x2f4>)
 8014362:	4852      	ldr	r0, [pc, #328]	@ (80144ac <tcp_write+0x2e4>)
 8014364:	f005 fabe 	bl	80198e4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8014368:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801436c:	88fb      	ldrh	r3, [r7, #6]
 801436e:	429a      	cmp	r2, r3
 8014370:	f080 8167 	bcs.w	8014642 <tcp_write+0x47a>
 8014374:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014376:	2b00      	cmp	r3, #0
 8014378:	f000 8163 	beq.w	8014642 <tcp_write+0x47a>
 801437c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801437e:	891b      	ldrh	r3, [r3, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	f000 815e 	beq.w	8014642 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8014386:	88fa      	ldrh	r2, [r7, #6]
 8014388:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801438c:	1ad2      	subs	r2, r2, r3
 801438e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014390:	4293      	cmp	r3, r2
 8014392:	bfa8      	it	ge
 8014394:	4613      	movge	r3, r2
 8014396:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8014398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801439a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801439c:	797b      	ldrb	r3, [r7, #5]
 801439e:	f003 0301 	and.w	r3, r3, #1
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d027      	beq.n	80143f6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80143a6:	f107 0012 	add.w	r0, r7, #18
 80143aa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80143ac:	8bf9      	ldrh	r1, [r7, #30]
 80143ae:	2301      	movs	r3, #1
 80143b0:	9302      	str	r3, [sp, #8]
 80143b2:	797b      	ldrb	r3, [r7, #5]
 80143b4:	9301      	str	r3, [sp, #4]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	4603      	mov	r3, r0
 80143bc:	2000      	movs	r0, #0
 80143be:	f7ff fe0f 	bl	8013fe0 <tcp_pbuf_prealloc>
 80143c2:	6578      	str	r0, [r7, #84]	@ 0x54
 80143c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	f000 8225 	beq.w	8014816 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80143cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80143ce:	6858      	ldr	r0, [r3, #4]
 80143d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80143d4:	68ba      	ldr	r2, [r7, #8]
 80143d6:	4413      	add	r3, r2
 80143d8:	8bfa      	ldrh	r2, [r7, #30]
 80143da:	4619      	mov	r1, r3
 80143dc:	f005 fd01 	bl	8019de2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80143e0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80143e2:	f7fb f9c3 	bl	800f76c <pbuf_clen>
 80143e6:	4603      	mov	r3, r0
 80143e8:	461a      	mov	r2, r3
 80143ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80143ee:	4413      	add	r3, r2
 80143f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80143f4:	e041      	b.n	801447a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80143f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80143fc:	e002      	b.n	8014404 <tcp_write+0x23c>
 80143fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	637b      	str	r3, [r7, #52]	@ 0x34
 8014404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d1f8      	bne.n	80143fe <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801440c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801440e:	7b1b      	ldrb	r3, [r3, #12]
 8014410:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014414:	2b00      	cmp	r3, #0
 8014416:	d115      	bne.n	8014444 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801441e:	8952      	ldrh	r2, [r2, #10]
 8014420:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014422:	68ba      	ldr	r2, [r7, #8]
 8014424:	429a      	cmp	r2, r3
 8014426:	d10d      	bne.n	8014444 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801442c:	2b00      	cmp	r3, #0
 801442e:	d006      	beq.n	801443e <tcp_write+0x276>
 8014430:	4b1c      	ldr	r3, [pc, #112]	@ (80144a4 <tcp_write+0x2dc>)
 8014432:	f240 2231 	movw	r2, #561	@ 0x231
 8014436:	4922      	ldr	r1, [pc, #136]	@ (80144c0 <tcp_write+0x2f8>)
 8014438:	481c      	ldr	r0, [pc, #112]	@ (80144ac <tcp_write+0x2e4>)
 801443a:	f005 fa53 	bl	80198e4 <iprintf>
          extendlen = seglen;
 801443e:	8bfb      	ldrh	r3, [r7, #30]
 8014440:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8014442:	e01a      	b.n	801447a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014444:	8bfb      	ldrh	r3, [r7, #30]
 8014446:	2201      	movs	r2, #1
 8014448:	4619      	mov	r1, r3
 801444a:	2000      	movs	r0, #0
 801444c:	f7fa fe1c 	bl	800f088 <pbuf_alloc>
 8014450:	6578      	str	r0, [r7, #84]	@ 0x54
 8014452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014454:	2b00      	cmp	r3, #0
 8014456:	f000 81e0 	beq.w	801481a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801445a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	441a      	add	r2, r3
 8014462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014464:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8014466:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014468:	f7fb f980 	bl	800f76c <pbuf_clen>
 801446c:	4603      	mov	r3, r0
 801446e:	461a      	mov	r2, r3
 8014470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014474:	4413      	add	r3, r2
 8014476:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801447a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801447e:	8bfb      	ldrh	r3, [r7, #30]
 8014480:	4413      	add	r3, r2
 8014482:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8014486:	e0dc      	b.n	8014642 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801448e:	2b00      	cmp	r3, #0
 8014490:	f000 80d7 	beq.w	8014642 <tcp_write+0x47a>
 8014494:	4b03      	ldr	r3, [pc, #12]	@ (80144a4 <tcp_write+0x2dc>)
 8014496:	f240 224a 	movw	r2, #586	@ 0x24a
 801449a:	490a      	ldr	r1, [pc, #40]	@ (80144c4 <tcp_write+0x2fc>)
 801449c:	4803      	ldr	r0, [pc, #12]	@ (80144ac <tcp_write+0x2e4>)
 801449e:	f005 fa21 	bl	80198e4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80144a2:	e0ce      	b.n	8014642 <tcp_write+0x47a>
 80144a4:	0801e1d0 	.word	0x0801e1d0
 80144a8:	0801e370 	.word	0x0801e370
 80144ac:	0801e224 	.word	0x0801e224
 80144b0:	0801e388 	.word	0x0801e388
 80144b4:	0801e3bc 	.word	0x0801e3bc
 80144b8:	0801e3d4 	.word	0x0801e3d4
 80144bc:	0801e3f4 	.word	0x0801e3f4
 80144c0:	0801e414 	.word	0x0801e414
 80144c4:	0801e440 	.word	0x0801e440
    struct pbuf *p;
    u16_t left = len - pos;
 80144c8:	88fa      	ldrh	r2, [r7, #6]
 80144ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80144ce:	1ad3      	subs	r3, r2, r3
 80144d0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80144d2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80144de:	8b7a      	ldrh	r2, [r7, #26]
 80144e0:	8bbb      	ldrh	r3, [r7, #28]
 80144e2:	4293      	cmp	r3, r2
 80144e4:	bf28      	it	cs
 80144e6:	4613      	movcs	r3, r2
 80144e8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80144ea:	797b      	ldrb	r3, [r7, #5]
 80144ec:	f003 0301 	and.w	r3, r3, #1
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d036      	beq.n	8014562 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80144f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80144f8:	b29a      	uxth	r2, r3
 80144fa:	8b3b      	ldrh	r3, [r7, #24]
 80144fc:	4413      	add	r3, r2
 80144fe:	b299      	uxth	r1, r3
 8014500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014502:	2b00      	cmp	r3, #0
 8014504:	bf0c      	ite	eq
 8014506:	2301      	moveq	r3, #1
 8014508:	2300      	movne	r3, #0
 801450a:	b2db      	uxtb	r3, r3
 801450c:	f107 0012 	add.w	r0, r7, #18
 8014510:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014512:	9302      	str	r3, [sp, #8]
 8014514:	797b      	ldrb	r3, [r7, #5]
 8014516:	9301      	str	r3, [sp, #4]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	4603      	mov	r3, r0
 801451e:	2036      	movs	r0, #54	@ 0x36
 8014520:	f7ff fd5e 	bl	8013fe0 <tcp_pbuf_prealloc>
 8014524:	6338      	str	r0, [r7, #48]	@ 0x30
 8014526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014528:	2b00      	cmp	r3, #0
 801452a:	f000 8178 	beq.w	801481e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014530:	895b      	ldrh	r3, [r3, #10]
 8014532:	8b3a      	ldrh	r2, [r7, #24]
 8014534:	429a      	cmp	r2, r3
 8014536:	d906      	bls.n	8014546 <tcp_write+0x37e>
 8014538:	4b8c      	ldr	r3, [pc, #560]	@ (801476c <tcp_write+0x5a4>)
 801453a:	f240 2266 	movw	r2, #614	@ 0x266
 801453e:	498c      	ldr	r1, [pc, #560]	@ (8014770 <tcp_write+0x5a8>)
 8014540:	488c      	ldr	r0, [pc, #560]	@ (8014774 <tcp_write+0x5ac>)
 8014542:	f005 f9cf 	bl	80198e4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014548:	685a      	ldr	r2, [r3, #4]
 801454a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801454e:	18d0      	adds	r0, r2, r3
 8014550:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014554:	68ba      	ldr	r2, [r7, #8]
 8014556:	4413      	add	r3, r2
 8014558:	8b3a      	ldrh	r2, [r7, #24]
 801455a:	4619      	mov	r1, r3
 801455c:	f005 fc41 	bl	8019de2 <memcpy>
 8014560:	e02f      	b.n	80145c2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014562:	8a7b      	ldrh	r3, [r7, #18]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d006      	beq.n	8014576 <tcp_write+0x3ae>
 8014568:	4b80      	ldr	r3, [pc, #512]	@ (801476c <tcp_write+0x5a4>)
 801456a:	f240 2271 	movw	r2, #625	@ 0x271
 801456e:	4982      	ldr	r1, [pc, #520]	@ (8014778 <tcp_write+0x5b0>)
 8014570:	4880      	ldr	r0, [pc, #512]	@ (8014774 <tcp_write+0x5ac>)
 8014572:	f005 f9b7 	bl	80198e4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8014576:	8b3b      	ldrh	r3, [r7, #24]
 8014578:	2201      	movs	r2, #1
 801457a:	4619      	mov	r1, r3
 801457c:	2036      	movs	r0, #54	@ 0x36
 801457e:	f7fa fd83 	bl	800f088 <pbuf_alloc>
 8014582:	6178      	str	r0, [r7, #20]
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	2b00      	cmp	r3, #0
 8014588:	f000 814b 	beq.w	8014822 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801458c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014590:	68ba      	ldr	r2, [r7, #8]
 8014592:	441a      	add	r2, r3
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014598:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801459c:	b29b      	uxth	r3, r3
 801459e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80145a2:	4619      	mov	r1, r3
 80145a4:	2036      	movs	r0, #54	@ 0x36
 80145a6:	f7fa fd6f 	bl	800f088 <pbuf_alloc>
 80145aa:	6338      	str	r0, [r7, #48]	@ 0x30
 80145ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d103      	bne.n	80145ba <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80145b2:	6978      	ldr	r0, [r7, #20]
 80145b4:	f7fb f84c 	bl	800f650 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80145b8:	e136      	b.n	8014828 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80145ba:	6979      	ldr	r1, [r7, #20]
 80145bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145be:	f7fb f915 	bl	800f7ec <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80145c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145c4:	f7fb f8d2 	bl	800f76c <pbuf_clen>
 80145c8:	4603      	mov	r3, r0
 80145ca:	461a      	mov	r2, r3
 80145cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145d0:	4413      	add	r3, r2
 80145d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80145d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80145da:	2b09      	cmp	r3, #9
 80145dc:	d903      	bls.n	80145e6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80145de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145e0:	f7fb f836 	bl	800f650 <pbuf_free>
      goto memerr;
 80145e4:	e120      	b.n	8014828 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80145ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145ee:	441a      	add	r2, r3
 80145f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	4613      	mov	r3, r2
 80145f8:	2200      	movs	r2, #0
 80145fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80145fc:	68f8      	ldr	r0, [r7, #12]
 80145fe:	f7ff fc53 	bl	8013ea8 <tcp_create_segment>
 8014602:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014606:	2b00      	cmp	r3, #0
 8014608:	f000 810d 	beq.w	8014826 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801460e:	2b00      	cmp	r3, #0
 8014610:	d102      	bne.n	8014618 <tcp_write+0x450>
      queue = seg;
 8014612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014614:	647b      	str	r3, [r7, #68]	@ 0x44
 8014616:	e00c      	b.n	8014632 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <tcp_write+0x464>
 801461e:	4b53      	ldr	r3, [pc, #332]	@ (801476c <tcp_write+0x5a4>)
 8014620:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014624:	4955      	ldr	r1, [pc, #340]	@ (801477c <tcp_write+0x5b4>)
 8014626:	4853      	ldr	r0, [pc, #332]	@ (8014774 <tcp_write+0x5ac>)
 8014628:	f005 f95c 	bl	80198e4 <iprintf>
      prev_seg->next = seg;
 801462c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801462e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014630:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014634:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014636:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801463a:	8b3b      	ldrh	r3, [r7, #24]
 801463c:	4413      	add	r3, r2
 801463e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8014642:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014646:	88fb      	ldrh	r3, [r7, #6]
 8014648:	429a      	cmp	r2, r3
 801464a:	f4ff af3d 	bcc.w	80144c8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801464e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014650:	2b00      	cmp	r3, #0
 8014652:	d02c      	beq.n	80146ae <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801465a:	e01e      	b.n	801469a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465e:	891a      	ldrh	r2, [r3, #8]
 8014660:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014662:	4413      	add	r3, r2
 8014664:	b29a      	uxth	r2, r3
 8014666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014668:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d110      	bne.n	8014694 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014678:	8952      	ldrh	r2, [r2, #10]
 801467a:	4413      	add	r3, r2
 801467c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801467e:	68b9      	ldr	r1, [r7, #8]
 8014680:	4618      	mov	r0, r3
 8014682:	f005 fbae 	bl	8019de2 <memcpy>
        p->len += oversize_used;
 8014686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014688:	895a      	ldrh	r2, [r3, #10]
 801468a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801468c:	4413      	add	r3, r2
 801468e:	b29a      	uxth	r2, r3
 8014690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014692:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801469a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1dd      	bne.n	801465c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80146a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146a2:	891a      	ldrh	r2, [r3, #8]
 80146a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80146a6:	4413      	add	r3, r2
 80146a8:	b29a      	uxth	r2, r3
 80146aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146ac:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80146ae:	8a7a      	ldrh	r2, [r7, #18]
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80146b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d018      	beq.n	80146ee <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80146bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d106      	bne.n	80146d0 <tcp_write+0x508>
 80146c2:	4b2a      	ldr	r3, [pc, #168]	@ (801476c <tcp_write+0x5a4>)
 80146c4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80146c8:	492d      	ldr	r1, [pc, #180]	@ (8014780 <tcp_write+0x5b8>)
 80146ca:	482a      	ldr	r0, [pc, #168]	@ (8014774 <tcp_write+0x5ac>)
 80146cc:	f005 f90a 	bl	80198e4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80146d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7fb f888 	bl	800f7ec <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80146dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146de:	891a      	ldrh	r2, [r3, #8]
 80146e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146e2:	891b      	ldrh	r3, [r3, #8]
 80146e4:	4413      	add	r3, r2
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146ea:	811a      	strh	r2, [r3, #8]
 80146ec:	e037      	b.n	801475e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80146ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d034      	beq.n	801475e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80146f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d003      	beq.n	8014702 <tcp_write+0x53a>
 80146fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d106      	bne.n	8014710 <tcp_write+0x548>
 8014702:	4b1a      	ldr	r3, [pc, #104]	@ (801476c <tcp_write+0x5a4>)
 8014704:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014708:	491e      	ldr	r1, [pc, #120]	@ (8014784 <tcp_write+0x5bc>)
 801470a:	481a      	ldr	r0, [pc, #104]	@ (8014774 <tcp_write+0x5ac>)
 801470c:	f005 f8ea 	bl	80198e4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014716:	e009      	b.n	801472c <tcp_write+0x564>
      p->tot_len += extendlen;
 8014718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801471a:	891a      	ldrh	r2, [r3, #8]
 801471c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801471e:	4413      	add	r3, r2
 8014720:	b29a      	uxth	r2, r3
 8014722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014724:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d1f1      	bne.n	8014718 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014736:	891a      	ldrh	r2, [r3, #8]
 8014738:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801473a:	4413      	add	r3, r2
 801473c:	b29a      	uxth	r2, r3
 801473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014740:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014744:	895a      	ldrh	r2, [r3, #10]
 8014746:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014748:	4413      	add	r3, r2
 801474a:	b29a      	uxth	r2, r3
 801474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801474e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014752:	891a      	ldrh	r2, [r3, #8]
 8014754:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014756:	4413      	add	r3, r2
 8014758:	b29a      	uxth	r2, r3
 801475a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801475c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801475e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014760:	2b00      	cmp	r3, #0
 8014762:	d111      	bne.n	8014788 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014768:	66da      	str	r2, [r3, #108]	@ 0x6c
 801476a:	e010      	b.n	801478e <tcp_write+0x5c6>
 801476c:	0801e1d0 	.word	0x0801e1d0
 8014770:	0801e470 	.word	0x0801e470
 8014774:	0801e224 	.word	0x0801e224
 8014778:	0801e4b0 	.word	0x0801e4b0
 801477c:	0801e4c0 	.word	0x0801e4c0
 8014780:	0801e4d4 	.word	0x0801e4d4
 8014784:	0801e50c 	.word	0x0801e50c
  } else {
    last_unsent->next = queue;
 8014788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801478a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801478c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014792:	88fb      	ldrh	r3, [r7, #6]
 8014794:	441a      	add	r2, r3
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80147a0:	88fb      	ldrh	r3, [r7, #6]
 80147a2:	1ad3      	subs	r3, r2, r3
 80147a4:	b29a      	uxth	r2, r3
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80147b2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d00e      	beq.n	80147de <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d10a      	bne.n	80147de <tcp_write+0x616>
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d106      	bne.n	80147de <tcp_write+0x616>
 80147d0:	4b2c      	ldr	r3, [pc, #176]	@ (8014884 <tcp_write+0x6bc>)
 80147d2:	f240 3212 	movw	r2, #786	@ 0x312
 80147d6:	492c      	ldr	r1, [pc, #176]	@ (8014888 <tcp_write+0x6c0>)
 80147d8:	482c      	ldr	r0, [pc, #176]	@ (801488c <tcp_write+0x6c4>)
 80147da:	f005 f883 	bl	80198e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80147de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d016      	beq.n	8014812 <tcp_write+0x64a>
 80147e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147e6:	68db      	ldr	r3, [r3, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d012      	beq.n	8014812 <tcp_write+0x64a>
 80147ec:	797b      	ldrb	r3, [r7, #5]
 80147ee:	f003 0302 	and.w	r3, r3, #2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10d      	bne.n	8014812 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80147f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	899b      	ldrh	r3, [r3, #12]
 80147fc:	b29c      	uxth	r4, r3
 80147fe:	2008      	movs	r0, #8
 8014800:	f7f9 fb7a 	bl	800def8 <lwip_htons>
 8014804:	4603      	mov	r3, r0
 8014806:	461a      	mov	r2, r3
 8014808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	4322      	orrs	r2, r4
 801480e:	b292      	uxth	r2, r2
 8014810:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014812:	2300      	movs	r3, #0
 8014814:	e031      	b.n	801487a <tcp_write+0x6b2>
          goto memerr;
 8014816:	bf00      	nop
 8014818:	e006      	b.n	8014828 <tcp_write+0x660>
            goto memerr;
 801481a:	bf00      	nop
 801481c:	e004      	b.n	8014828 <tcp_write+0x660>
        goto memerr;
 801481e:	bf00      	nop
 8014820:	e002      	b.n	8014828 <tcp_write+0x660>
        goto memerr;
 8014822:	bf00      	nop
 8014824:	e000      	b.n	8014828 <tcp_write+0x660>
      goto memerr;
 8014826:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	8b5b      	ldrh	r3, [r3, #26]
 801482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014830:	b29a      	uxth	r2, r3
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801483c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801483e:	f7fa ff07 	bl	800f650 <pbuf_free>
  }
  if (queue != NULL) {
 8014842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <tcp_write+0x686>
    tcp_segs_free(queue);
 8014848:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801484a:	f7fc fb71 	bl	8010f30 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014854:	2b00      	cmp	r3, #0
 8014856:	d00e      	beq.n	8014876 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801485c:	2b00      	cmp	r3, #0
 801485e:	d10a      	bne.n	8014876 <tcp_write+0x6ae>
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014864:	2b00      	cmp	r3, #0
 8014866:	d106      	bne.n	8014876 <tcp_write+0x6ae>
 8014868:	4b06      	ldr	r3, [pc, #24]	@ (8014884 <tcp_write+0x6bc>)
 801486a:	f240 3227 	movw	r2, #807	@ 0x327
 801486e:	4906      	ldr	r1, [pc, #24]	@ (8014888 <tcp_write+0x6c0>)
 8014870:	4806      	ldr	r0, [pc, #24]	@ (801488c <tcp_write+0x6c4>)
 8014872:	f005 f837 	bl	80198e4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014876:	f04f 33ff 	mov.w	r3, #4294967295
}
 801487a:	4618      	mov	r0, r3
 801487c:	375c      	adds	r7, #92	@ 0x5c
 801487e:	46bd      	mov	sp, r7
 8014880:	bd90      	pop	{r4, r7, pc}
 8014882:	bf00      	nop
 8014884:	0801e1d0 	.word	0x0801e1d0
 8014888:	0801e544 	.word	0x0801e544
 801488c:	0801e224 	.word	0x0801e224

08014890 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014890:	b590      	push	{r4, r7, lr}
 8014892:	b08b      	sub	sp, #44	@ 0x2c
 8014894:	af02      	add	r7, sp, #8
 8014896:	6078      	str	r0, [r7, #4]
 8014898:	460b      	mov	r3, r1
 801489a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801489c:	2300      	movs	r3, #0
 801489e:	61fb      	str	r3, [r7, #28]
 80148a0:	2300      	movs	r3, #0
 80148a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80148a4:	2300      	movs	r3, #0
 80148a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d106      	bne.n	80148bc <tcp_split_unsent_seg+0x2c>
 80148ae:	4b95      	ldr	r3, [pc, #596]	@ (8014b04 <tcp_split_unsent_seg+0x274>)
 80148b0:	f240 324b 	movw	r2, #843	@ 0x34b
 80148b4:	4994      	ldr	r1, [pc, #592]	@ (8014b08 <tcp_split_unsent_seg+0x278>)
 80148b6:	4895      	ldr	r0, [pc, #596]	@ (8014b0c <tcp_split_unsent_seg+0x27c>)
 80148b8:	f005 f814 	bl	80198e4 <iprintf>

  useg = pcb->unsent;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d102      	bne.n	80148ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80148c8:	f04f 33ff 	mov.w	r3, #4294967295
 80148cc:	e116      	b.n	8014afc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80148ce:	887b      	ldrh	r3, [r7, #2]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d109      	bne.n	80148e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80148d4:	4b8b      	ldr	r3, [pc, #556]	@ (8014b04 <tcp_split_unsent_seg+0x274>)
 80148d6:	f240 3253 	movw	r2, #851	@ 0x353
 80148da:	498d      	ldr	r1, [pc, #564]	@ (8014b10 <tcp_split_unsent_seg+0x280>)
 80148dc:	488b      	ldr	r0, [pc, #556]	@ (8014b0c <tcp_split_unsent_seg+0x27c>)
 80148de:	f005 f801 	bl	80198e4 <iprintf>
    return ERR_VAL;
 80148e2:	f06f 0305 	mvn.w	r3, #5
 80148e6:	e109      	b.n	8014afc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80148e8:	697b      	ldr	r3, [r7, #20]
 80148ea:	891b      	ldrh	r3, [r3, #8]
 80148ec:	887a      	ldrh	r2, [r7, #2]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d301      	bcc.n	80148f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80148f2:	2300      	movs	r3, #0
 80148f4:	e102      	b.n	8014afc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148fa:	887a      	ldrh	r2, [r7, #2]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d906      	bls.n	801490e <tcp_split_unsent_seg+0x7e>
 8014900:	4b80      	ldr	r3, [pc, #512]	@ (8014b04 <tcp_split_unsent_seg+0x274>)
 8014902:	f240 325b 	movw	r2, #859	@ 0x35b
 8014906:	4983      	ldr	r1, [pc, #524]	@ (8014b14 <tcp_split_unsent_seg+0x284>)
 8014908:	4880      	ldr	r0, [pc, #512]	@ (8014b0c <tcp_split_unsent_seg+0x27c>)
 801490a:	f004 ffeb 	bl	80198e4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801490e:	697b      	ldr	r3, [r7, #20]
 8014910:	891b      	ldrh	r3, [r3, #8]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <tcp_split_unsent_seg+0x94>
 8014916:	4b7b      	ldr	r3, [pc, #492]	@ (8014b04 <tcp_split_unsent_seg+0x274>)
 8014918:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801491c:	497e      	ldr	r1, [pc, #504]	@ (8014b18 <tcp_split_unsent_seg+0x288>)
 801491e:	487b      	ldr	r0, [pc, #492]	@ (8014b0c <tcp_split_unsent_seg+0x27c>)
 8014920:	f004 ffe0 	bl	80198e4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	7a9b      	ldrb	r3, [r3, #10]
 8014928:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801492a:	7bfb      	ldrb	r3, [r7, #15]
 801492c:	009b      	lsls	r3, r3, #2
 801492e:	b2db      	uxtb	r3, r3
 8014930:	f003 0304 	and.w	r3, r3, #4
 8014934:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	891a      	ldrh	r2, [r3, #8]
 801493a:	887b      	ldrh	r3, [r7, #2]
 801493c:	1ad3      	subs	r3, r2, r3
 801493e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014940:	7bbb      	ldrb	r3, [r7, #14]
 8014942:	b29a      	uxth	r2, r3
 8014944:	89bb      	ldrh	r3, [r7, #12]
 8014946:	4413      	add	r3, r2
 8014948:	b29b      	uxth	r3, r3
 801494a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801494e:	4619      	mov	r1, r3
 8014950:	2036      	movs	r0, #54	@ 0x36
 8014952:	f7fa fb99 	bl	800f088 <pbuf_alloc>
 8014956:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f000 80b7 	beq.w	8014ace <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	685b      	ldr	r3, [r3, #4]
 8014964:	891a      	ldrh	r2, [r3, #8]
 8014966:	697b      	ldr	r3, [r7, #20]
 8014968:	891b      	ldrh	r3, [r3, #8]
 801496a:	1ad3      	subs	r3, r2, r3
 801496c:	b29a      	uxth	r2, r3
 801496e:	887b      	ldrh	r3, [r7, #2]
 8014970:	4413      	add	r3, r2
 8014972:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	6858      	ldr	r0, [r3, #4]
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	685a      	ldr	r2, [r3, #4]
 801497c:	7bbb      	ldrb	r3, [r7, #14]
 801497e:	18d1      	adds	r1, r2, r3
 8014980:	897b      	ldrh	r3, [r7, #10]
 8014982:	89ba      	ldrh	r2, [r7, #12]
 8014984:	f7fb f85a 	bl	800fa3c <pbuf_copy_partial>
 8014988:	4603      	mov	r3, r0
 801498a:	461a      	mov	r2, r3
 801498c:	89bb      	ldrh	r3, [r7, #12]
 801498e:	4293      	cmp	r3, r2
 8014990:	f040 809f 	bne.w	8014ad2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	899b      	ldrh	r3, [r3, #12]
 801499a:	b29b      	uxth	r3, r3
 801499c:	4618      	mov	r0, r3
 801499e:	f7f9 faab 	bl	800def8 <lwip_htons>
 80149a2:	4603      	mov	r3, r0
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80149aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80149ac:	2300      	movs	r3, #0
 80149ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80149b0:	7efb      	ldrb	r3, [r7, #27]
 80149b2:	f003 0308 	and.w	r3, r3, #8
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d007      	beq.n	80149ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80149ba:	7efb      	ldrb	r3, [r7, #27]
 80149bc:	f023 0308 	bic.w	r3, r3, #8
 80149c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80149c2:	7ebb      	ldrb	r3, [r7, #26]
 80149c4:	f043 0308 	orr.w	r3, r3, #8
 80149c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80149ca:	7efb      	ldrb	r3, [r7, #27]
 80149cc:	f003 0301 	and.w	r3, r3, #1
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d007      	beq.n	80149e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80149d4:	7efb      	ldrb	r3, [r7, #27]
 80149d6:	f023 0301 	bic.w	r3, r3, #1
 80149da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80149dc:	7ebb      	ldrb	r3, [r7, #26]
 80149de:	f043 0301 	orr.w	r3, r3, #1
 80149e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	68db      	ldr	r3, [r3, #12]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	4618      	mov	r0, r3
 80149ec:	f7f9 fa99 	bl	800df22 <lwip_htonl>
 80149f0:	4602      	mov	r2, r0
 80149f2:	887b      	ldrh	r3, [r7, #2]
 80149f4:	18d1      	adds	r1, r2, r3
 80149f6:	7eba      	ldrb	r2, [r7, #26]
 80149f8:	7bfb      	ldrb	r3, [r7, #15]
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	460b      	mov	r3, r1
 80149fe:	6939      	ldr	r1, [r7, #16]
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f7ff fa51 	bl	8013ea8 <tcp_create_segment>
 8014a06:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014a08:	69fb      	ldr	r3, [r7, #28]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d063      	beq.n	8014ad6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	685b      	ldr	r3, [r3, #4]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7fa feaa 	bl	800f76c <pbuf_clen>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	461a      	mov	r2, r3
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a22:	1a9b      	subs	r3, r3, r2
 8014a24:	b29a      	uxth	r2, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	6858      	ldr	r0, [r3, #4]
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	685b      	ldr	r3, [r3, #4]
 8014a34:	891a      	ldrh	r2, [r3, #8]
 8014a36:	89bb      	ldrh	r3, [r7, #12]
 8014a38:	1ad3      	subs	r3, r2, r3
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	4619      	mov	r1, r3
 8014a3e:	f7fa fc81 	bl	800f344 <pbuf_realloc>
  useg->len -= remainder;
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	891a      	ldrh	r2, [r3, #8]
 8014a46:	89bb      	ldrh	r3, [r7, #12]
 8014a48:	1ad3      	subs	r3, r2, r3
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	899b      	ldrh	r3, [r3, #12]
 8014a56:	b29c      	uxth	r4, r3
 8014a58:	7efb      	ldrb	r3, [r7, #27]
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f9 fa4b 	bl	800def8 <lwip_htons>
 8014a62:	4603      	mov	r3, r0
 8014a64:	461a      	mov	r2, r3
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	4322      	orrs	r2, r4
 8014a6c:	b292      	uxth	r2, r2
 8014a6e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	685b      	ldr	r3, [r3, #4]
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fa fe79 	bl	800f76c <pbuf_clen>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a84:	4413      	add	r3, r2
 8014a86:	b29a      	uxth	r2, r3
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	685b      	ldr	r3, [r3, #4]
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fa fe6a 	bl	800f76c <pbuf_clen>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014aa2:	4413      	add	r3, r2
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014ab4:	697b      	ldr	r3, [r7, #20]
 8014ab6:	69fa      	ldr	r2, [r7, #28]
 8014ab8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d103      	bne.n	8014aca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014aca:	2300      	movs	r3, #0
 8014acc:	e016      	b.n	8014afc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014ace:	bf00      	nop
 8014ad0:	e002      	b.n	8014ad8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ad2:	bf00      	nop
 8014ad4:	e000      	b.n	8014ad8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014ad6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d006      	beq.n	8014aec <tcp_split_unsent_seg+0x25c>
 8014ade:	4b09      	ldr	r3, [pc, #36]	@ (8014b04 <tcp_split_unsent_seg+0x274>)
 8014ae0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014ae4:	490d      	ldr	r1, [pc, #52]	@ (8014b1c <tcp_split_unsent_seg+0x28c>)
 8014ae6:	4809      	ldr	r0, [pc, #36]	@ (8014b0c <tcp_split_unsent_seg+0x27c>)
 8014ae8:	f004 fefc 	bl	80198e4 <iprintf>
  if (p != NULL) {
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d002      	beq.n	8014af8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014af2:	6938      	ldr	r0, [r7, #16]
 8014af4:	f7fa fdac 	bl	800f650 <pbuf_free>
  }

  return ERR_MEM;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3724      	adds	r7, #36	@ 0x24
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd90      	pop	{r4, r7, pc}
 8014b04:	0801e1d0 	.word	0x0801e1d0
 8014b08:	0801e564 	.word	0x0801e564
 8014b0c:	0801e224 	.word	0x0801e224
 8014b10:	0801e588 	.word	0x0801e588
 8014b14:	0801e5ac 	.word	0x0801e5ac
 8014b18:	0801e5bc 	.word	0x0801e5bc
 8014b1c:	0801e5cc 	.word	0x0801e5cc

08014b20 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014b20:	b590      	push	{r4, r7, lr}
 8014b22:	b085      	sub	sp, #20
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d106      	bne.n	8014b3c <tcp_send_fin+0x1c>
 8014b2e:	4b21      	ldr	r3, [pc, #132]	@ (8014bb4 <tcp_send_fin+0x94>)
 8014b30:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014b34:	4920      	ldr	r1, [pc, #128]	@ (8014bb8 <tcp_send_fin+0x98>)
 8014b36:	4821      	ldr	r0, [pc, #132]	@ (8014bbc <tcp_send_fin+0x9c>)
 8014b38:	f004 fed4 	bl	80198e4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d02e      	beq.n	8014ba2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b48:	60fb      	str	r3, [r7, #12]
 8014b4a:	e002      	b.n	8014b52 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d1f8      	bne.n	8014b4c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	899b      	ldrh	r3, [r3, #12]
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7f9 f9c8 	bl	800def8 <lwip_htons>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	b2db      	uxtb	r3, r3
 8014b6c:	f003 0307 	and.w	r3, r3, #7
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d116      	bne.n	8014ba2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	68db      	ldr	r3, [r3, #12]
 8014b78:	899b      	ldrh	r3, [r3, #12]
 8014b7a:	b29c      	uxth	r4, r3
 8014b7c:	2001      	movs	r0, #1
 8014b7e:	f7f9 f9bb 	bl	800def8 <lwip_htons>
 8014b82:	4603      	mov	r3, r0
 8014b84:	461a      	mov	r2, r3
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	68db      	ldr	r3, [r3, #12]
 8014b8a:	4322      	orrs	r2, r4
 8014b8c:	b292      	uxth	r2, r2
 8014b8e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	8b5b      	ldrh	r3, [r3, #26]
 8014b94:	f043 0320 	orr.w	r3, r3, #32
 8014b98:	b29a      	uxth	r2, r3
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e004      	b.n	8014bac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014ba2:	2101      	movs	r1, #1
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 f80b 	bl	8014bc0 <tcp_enqueue_flags>
 8014baa:	4603      	mov	r3, r0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3714      	adds	r7, #20
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd90      	pop	{r4, r7, pc}
 8014bb4:	0801e1d0 	.word	0x0801e1d0
 8014bb8:	0801e5d8 	.word	0x0801e5d8
 8014bbc:	0801e224 	.word	0x0801e224

08014bc0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b08a      	sub	sp, #40	@ 0x28
 8014bc4:	af02      	add	r7, sp, #8
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	460b      	mov	r3, r1
 8014bca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014bd4:	78fb      	ldrb	r3, [r7, #3]
 8014bd6:	f003 0303 	and.w	r3, r3, #3
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d106      	bne.n	8014bec <tcp_enqueue_flags+0x2c>
 8014bde:	4b67      	ldr	r3, [pc, #412]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014be0:	f240 4211 	movw	r2, #1041	@ 0x411
 8014be4:	4966      	ldr	r1, [pc, #408]	@ (8014d80 <tcp_enqueue_flags+0x1c0>)
 8014be6:	4867      	ldr	r0, [pc, #412]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014be8:	f004 fe7c 	bl	80198e4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d106      	bne.n	8014c00 <tcp_enqueue_flags+0x40>
 8014bf2:	4b62      	ldr	r3, [pc, #392]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014bf4:	f240 4213 	movw	r2, #1043	@ 0x413
 8014bf8:	4963      	ldr	r1, [pc, #396]	@ (8014d88 <tcp_enqueue_flags+0x1c8>)
 8014bfa:	4862      	ldr	r0, [pc, #392]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014bfc:	f004 fe72 	bl	80198e4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014c00:	78fb      	ldrb	r3, [r7, #3]
 8014c02:	f003 0302 	and.w	r3, r3, #2
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d001      	beq.n	8014c0e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c0e:	7ffb      	ldrb	r3, [r7, #31]
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	b2db      	uxtb	r3, r3
 8014c14:	f003 0304 	and.w	r3, r3, #4
 8014c18:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014c1a:	7dfb      	ldrb	r3, [r7, #23]
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c22:	4619      	mov	r1, r3
 8014c24:	2036      	movs	r0, #54	@ 0x36
 8014c26:	f7fa fa2f 	bl	800f088 <pbuf_alloc>
 8014c2a:	6138      	str	r0, [r7, #16]
 8014c2c:	693b      	ldr	r3, [r7, #16]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d109      	bne.n	8014c46 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8b5b      	ldrh	r3, [r3, #26]
 8014c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c3a:	b29a      	uxth	r2, r3
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c40:	f04f 33ff 	mov.w	r3, #4294967295
 8014c44:	e095      	b.n	8014d72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	895a      	ldrh	r2, [r3, #10]
 8014c4a:	7dfb      	ldrb	r3, [r7, #23]
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d206      	bcs.n	8014c60 <tcp_enqueue_flags+0xa0>
 8014c52:	4b4a      	ldr	r3, [pc, #296]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014c54:	f240 4239 	movw	r2, #1081	@ 0x439
 8014c58:	494c      	ldr	r1, [pc, #304]	@ (8014d8c <tcp_enqueue_flags+0x1cc>)
 8014c5a:	484a      	ldr	r0, [pc, #296]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014c5c:	f004 fe42 	bl	80198e4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014c64:	78fa      	ldrb	r2, [r7, #3]
 8014c66:	7ffb      	ldrb	r3, [r7, #31]
 8014c68:	9300      	str	r3, [sp, #0]
 8014c6a:	460b      	mov	r3, r1
 8014c6c:	6939      	ldr	r1, [r7, #16]
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f7ff f91a 	bl	8013ea8 <tcp_create_segment>
 8014c74:	60f8      	str	r0, [r7, #12]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d109      	bne.n	8014c90 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	8b5b      	ldrh	r3, [r3, #26]
 8014c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014c84:	b29a      	uxth	r2, r3
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c8e:	e070      	b.n	8014d72 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	f003 0303 	and.w	r3, r3, #3
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d006      	beq.n	8014caa <tcp_enqueue_flags+0xea>
 8014c9c:	4b37      	ldr	r3, [pc, #220]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014c9e:	f240 4242 	movw	r2, #1090	@ 0x442
 8014ca2:	493b      	ldr	r1, [pc, #236]	@ (8014d90 <tcp_enqueue_flags+0x1d0>)
 8014ca4:	4837      	ldr	r0, [pc, #220]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014ca6:	f004 fe1d 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	891b      	ldrh	r3, [r3, #8]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d006      	beq.n	8014cc0 <tcp_enqueue_flags+0x100>
 8014cb2:	4b32      	ldr	r3, [pc, #200]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014cb4:	f240 4243 	movw	r2, #1091	@ 0x443
 8014cb8:	4936      	ldr	r1, [pc, #216]	@ (8014d94 <tcp_enqueue_flags+0x1d4>)
 8014cba:	4832      	ldr	r0, [pc, #200]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014cbc:	f004 fe12 	bl	80198e4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d103      	bne.n	8014cd0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014cce:	e00d      	b.n	8014cec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014cd4:	61bb      	str	r3, [r7, #24]
 8014cd6:	e002      	b.n	8014cde <tcp_enqueue_flags+0x11e>
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	61bb      	str	r3, [r7, #24]
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d1f8      	bne.n	8014cd8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014cf4:	78fb      	ldrb	r3, [r7, #3]
 8014cf6:	f003 0302 	and.w	r3, r3, #2
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d104      	bne.n	8014d08 <tcp_enqueue_flags+0x148>
 8014cfe:	78fb      	ldrb	r3, [r7, #3]
 8014d00:	f003 0301 	and.w	r3, r3, #1
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d004      	beq.n	8014d12 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d0c:	1c5a      	adds	r2, r3, #1
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014d12:	78fb      	ldrb	r3, [r7, #3]
 8014d14:	f003 0301 	and.w	r3, r3, #1
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d006      	beq.n	8014d2a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	8b5b      	ldrh	r3, [r3, #26]
 8014d20:	f043 0320 	orr.w	r3, r3, #32
 8014d24:	b29a      	uxth	r2, r3
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f7fa fd1c 	bl	800f76c <pbuf_clen>
 8014d34:	4603      	mov	r3, r0
 8014d36:	461a      	mov	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d3e:	4413      	add	r3, r2
 8014d40:	b29a      	uxth	r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d00e      	beq.n	8014d70 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d10a      	bne.n	8014d70 <tcp_enqueue_flags+0x1b0>
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d106      	bne.n	8014d70 <tcp_enqueue_flags+0x1b0>
 8014d62:	4b06      	ldr	r3, [pc, #24]	@ (8014d7c <tcp_enqueue_flags+0x1bc>)
 8014d64:	f240 4265 	movw	r2, #1125	@ 0x465
 8014d68:	490b      	ldr	r1, [pc, #44]	@ (8014d98 <tcp_enqueue_flags+0x1d8>)
 8014d6a:	4806      	ldr	r0, [pc, #24]	@ (8014d84 <tcp_enqueue_flags+0x1c4>)
 8014d6c:	f004 fdba 	bl	80198e4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014d70:	2300      	movs	r3, #0
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3720      	adds	r7, #32
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	0801e1d0 	.word	0x0801e1d0
 8014d80:	0801e5f4 	.word	0x0801e5f4
 8014d84:	0801e224 	.word	0x0801e224
 8014d88:	0801e64c 	.word	0x0801e64c
 8014d8c:	0801e66c 	.word	0x0801e66c
 8014d90:	0801e6a8 	.word	0x0801e6a8
 8014d94:	0801e6c0 	.word	0x0801e6c0
 8014d98:	0801e6ec 	.word	0x0801e6ec

08014d9c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014d9c:	b5b0      	push	{r4, r5, r7, lr}
 8014d9e:	b08a      	sub	sp, #40	@ 0x28
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d106      	bne.n	8014db8 <tcp_output+0x1c>
 8014daa:	4b8a      	ldr	r3, [pc, #552]	@ (8014fd4 <tcp_output+0x238>)
 8014dac:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014db0:	4989      	ldr	r1, [pc, #548]	@ (8014fd8 <tcp_output+0x23c>)
 8014db2:	488a      	ldr	r0, [pc, #552]	@ (8014fdc <tcp_output+0x240>)
 8014db4:	f004 fd96 	bl	80198e4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	7d1b      	ldrb	r3, [r3, #20]
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d106      	bne.n	8014dce <tcp_output+0x32>
 8014dc0:	4b84      	ldr	r3, [pc, #528]	@ (8014fd4 <tcp_output+0x238>)
 8014dc2:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014dc6:	4986      	ldr	r1, [pc, #536]	@ (8014fe0 <tcp_output+0x244>)
 8014dc8:	4884      	ldr	r0, [pc, #528]	@ (8014fdc <tcp_output+0x240>)
 8014dca:	f004 fd8b 	bl	80198e4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014dce:	4b85      	ldr	r3, [pc, #532]	@ (8014fe4 <tcp_output+0x248>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	687a      	ldr	r2, [r7, #4]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d101      	bne.n	8014ddc <tcp_output+0x40>
    return ERR_OK;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	e1ce      	b.n	801517a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014de8:	4293      	cmp	r3, r2
 8014dea:	bf28      	it	cs
 8014dec:	4613      	movcs	r3, r2
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014df6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d10b      	bne.n	8014e16 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f003 0302 	and.w	r3, r3, #2
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f000 81aa 	beq.w	8015160 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014e0c:	6878      	ldr	r0, [r7, #4]
 8014e0e:	f000 fdcb 	bl	80159a8 <tcp_send_empty_ack>
 8014e12:	4603      	mov	r3, r0
 8014e14:	e1b1      	b.n	801517a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014e16:	6879      	ldr	r1, [r7, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	3304      	adds	r3, #4
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f7ff f826 	bl	8013e70 <tcp_route>
 8014e24:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014e26:	697b      	ldr	r3, [r7, #20]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d102      	bne.n	8014e32 <tcp_output+0x96>
    return ERR_RTE;
 8014e2c:	f06f 0303 	mvn.w	r3, #3
 8014e30:	e1a3      	b.n	801517a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d003      	beq.n	8014e40 <tcp_output+0xa4>
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d111      	bne.n	8014e64 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d002      	beq.n	8014e4c <tcp_output+0xb0>
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	e000      	b.n	8014e4e <tcp_output+0xb2>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d102      	bne.n	8014e5c <tcp_output+0xc0>
      return ERR_RTE;
 8014e56:	f06f 0303 	mvn.w	r3, #3
 8014e5a:	e18e      	b.n	801517a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014e5c:	693b      	ldr	r3, [r7, #16]
 8014e5e:	681a      	ldr	r2, [r3, #0]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e66:	68db      	ldr	r3, [r3, #12]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7f9 f859 	bl	800df22 <lwip_htonl>
 8014e70:	4602      	mov	r2, r0
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014e76:	1ad3      	subs	r3, r2, r3
 8014e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e7a:	8912      	ldrh	r2, [r2, #8]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	69ba      	ldr	r2, [r7, #24]
 8014e80:	429a      	cmp	r2, r3
 8014e82:	d227      	bcs.n	8014ed4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	69bb      	ldr	r3, [r7, #24]
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d114      	bne.n	8014ebc <tcp_output+0x120>
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d110      	bne.n	8014ebc <tcp_output+0x120>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d10b      	bne.n	8014ebc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	8b5b      	ldrh	r3, [r3, #26]
 8014ec0:	f003 0302 	and.w	r3, r3, #2
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	f000 814d 	beq.w	8015164 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f000 fd6c 	bl	80159a8 <tcp_send_empty_ack>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	e152      	b.n	801517a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ee0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014ee2:	6a3b      	ldr	r3, [r7, #32]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f000 811c 	beq.w	8015122 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014eea:	e002      	b.n	8014ef2 <tcp_output+0x156>
 8014eec:	6a3b      	ldr	r3, [r7, #32]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	623b      	str	r3, [r7, #32]
 8014ef2:	6a3b      	ldr	r3, [r7, #32]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d1f8      	bne.n	8014eec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014efa:	e112      	b.n	8015122 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	899b      	ldrh	r3, [r3, #12]
 8014f02:	b29b      	uxth	r3, r3
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7f8 fff7 	bl	800def8 <lwip_htons>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	b2db      	uxtb	r3, r3
 8014f0e:	f003 0304 	and.w	r3, r3, #4
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d006      	beq.n	8014f24 <tcp_output+0x188>
 8014f16:	4b2f      	ldr	r3, [pc, #188]	@ (8014fd4 <tcp_output+0x238>)
 8014f18:	f240 5236 	movw	r2, #1334	@ 0x536
 8014f1c:	4932      	ldr	r1, [pc, #200]	@ (8014fe8 <tcp_output+0x24c>)
 8014f1e:	482f      	ldr	r0, [pc, #188]	@ (8014fdc <tcp_output+0x240>)
 8014f20:	f004 fce0 	bl	80198e4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d01f      	beq.n	8014f6c <tcp_output+0x1d0>
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	8b5b      	ldrh	r3, [r3, #26]
 8014f30:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d119      	bne.n	8014f6c <tcp_output+0x1d0>
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d00b      	beq.n	8014f58 <tcp_output+0x1bc>
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d110      	bne.n	8014f6c <tcp_output+0x1d0>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f4e:	891a      	ldrh	r2, [r3, #8]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d209      	bcs.n	8014f6c <tcp_output+0x1d0>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d004      	beq.n	8014f6c <tcp_output+0x1d0>
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f68:	2b08      	cmp	r3, #8
 8014f6a:	d901      	bls.n	8014f70 <tcp_output+0x1d4>
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	e000      	b.n	8014f72 <tcp_output+0x1d6>
 8014f70:	2300      	movs	r3, #0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d106      	bne.n	8014f84 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	8b5b      	ldrh	r3, [r3, #26]
 8014f7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	f000 80e4 	beq.w	801514c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	7d1b      	ldrb	r3, [r3, #20]
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	d00d      	beq.n	8014fa8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	899b      	ldrh	r3, [r3, #12]
 8014f92:	b29c      	uxth	r4, r3
 8014f94:	2010      	movs	r0, #16
 8014f96:	f7f8 ffaf 	bl	800def8 <lwip_htons>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	4322      	orrs	r2, r4
 8014fa4:	b292      	uxth	r2, r2
 8014fa6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014fa8:	697a      	ldr	r2, [r7, #20]
 8014faa:	6879      	ldr	r1, [r7, #4]
 8014fac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014fae:	f000 f909 	bl	80151c4 <tcp_output_segment>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d016      	beq.n	8014fec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	8b5b      	ldrh	r3, [r3, #26]
 8014fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014fc6:	b29a      	uxth	r2, r3
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	835a      	strh	r2, [r3, #26]
      return err;
 8014fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fd0:	e0d3      	b.n	801517a <tcp_output+0x3de>
 8014fd2:	bf00      	nop
 8014fd4:	0801e1d0 	.word	0x0801e1d0
 8014fd8:	0801e714 	.word	0x0801e714
 8014fdc:	0801e224 	.word	0x0801e224
 8014fe0:	0801e72c 	.word	0x0801e72c
 8014fe4:	20011d64 	.word	0x20011d64
 8014fe8:	0801e754 	.word	0x0801e754
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fee:	681a      	ldr	r2, [r3, #0]
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	7d1b      	ldrb	r3, [r3, #20]
 8014ff8:	2b02      	cmp	r3, #2
 8014ffa:	d006      	beq.n	801500a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	8b5b      	ldrh	r3, [r3, #26]
 8015000:	f023 0303 	bic.w	r3, r3, #3
 8015004:	b29a      	uxth	r2, r3
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500c:	68db      	ldr	r3, [r3, #12]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	4618      	mov	r0, r3
 8015012:	f7f8 ff86 	bl	800df22 <lwip_htonl>
 8015016:	4604      	mov	r4, r0
 8015018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501a:	891b      	ldrh	r3, [r3, #8]
 801501c:	461d      	mov	r5, r3
 801501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015020:	68db      	ldr	r3, [r3, #12]
 8015022:	899b      	ldrh	r3, [r3, #12]
 8015024:	b29b      	uxth	r3, r3
 8015026:	4618      	mov	r0, r3
 8015028:	f7f8 ff66 	bl	800def8 <lwip_htons>
 801502c:	4603      	mov	r3, r0
 801502e:	b2db      	uxtb	r3, r3
 8015030:	f003 0303 	and.w	r3, r3, #3
 8015034:	2b00      	cmp	r3, #0
 8015036:	d001      	beq.n	801503c <tcp_output+0x2a0>
 8015038:	2301      	movs	r3, #1
 801503a:	e000      	b.n	801503e <tcp_output+0x2a2>
 801503c:	2300      	movs	r3, #0
 801503e:	442b      	add	r3, r5
 8015040:	4423      	add	r3, r4
 8015042:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	1ad3      	subs	r3, r2, r3
 801504c:	2b00      	cmp	r3, #0
 801504e:	da02      	bge.n	8015056 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	68ba      	ldr	r2, [r7, #8]
 8015054:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015058:	891b      	ldrh	r3, [r3, #8]
 801505a:	461c      	mov	r4, r3
 801505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801505e:	68db      	ldr	r3, [r3, #12]
 8015060:	899b      	ldrh	r3, [r3, #12]
 8015062:	b29b      	uxth	r3, r3
 8015064:	4618      	mov	r0, r3
 8015066:	f7f8 ff47 	bl	800def8 <lwip_htons>
 801506a:	4603      	mov	r3, r0
 801506c:	b2db      	uxtb	r3, r3
 801506e:	f003 0303 	and.w	r3, r3, #3
 8015072:	2b00      	cmp	r3, #0
 8015074:	d001      	beq.n	801507a <tcp_output+0x2de>
 8015076:	2301      	movs	r3, #1
 8015078:	e000      	b.n	801507c <tcp_output+0x2e0>
 801507a:	2300      	movs	r3, #0
 801507c:	4423      	add	r3, r4
 801507e:	2b00      	cmp	r3, #0
 8015080:	d049      	beq.n	8015116 <tcp_output+0x37a>
      seg->next = NULL;
 8015082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015084:	2200      	movs	r2, #0
 8015086:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801508c:	2b00      	cmp	r3, #0
 801508e:	d105      	bne.n	801509c <tcp_output+0x300>
        pcb->unacked = seg;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015094:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8015096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015098:	623b      	str	r3, [r7, #32]
 801509a:	e03f      	b.n	801511c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	4618      	mov	r0, r3
 80150a4:	f7f8 ff3d 	bl	800df22 <lwip_htonl>
 80150a8:	4604      	mov	r4, r0
 80150aa:	6a3b      	ldr	r3, [r7, #32]
 80150ac:	68db      	ldr	r3, [r3, #12]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f8 ff36 	bl	800df22 <lwip_htonl>
 80150b6:	4603      	mov	r3, r0
 80150b8:	1ae3      	subs	r3, r4, r3
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	da24      	bge.n	8015108 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	3370      	adds	r3, #112	@ 0x70
 80150c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150c4:	e002      	b.n	80150cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d011      	beq.n	80150f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	685b      	ldr	r3, [r3, #4]
 80150dc:	4618      	mov	r0, r3
 80150de:	f7f8 ff20 	bl	800df22 <lwip_htonl>
 80150e2:	4604      	mov	r4, r0
 80150e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7f8 ff19 	bl	800df22 <lwip_htonl>
 80150f0:	4603      	mov	r3, r0
 80150f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	dbe6      	blt.n	80150c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015104:	601a      	str	r2, [r3, #0]
 8015106:	e009      	b.n	801511c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015108:	6a3b      	ldr	r3, [r7, #32]
 801510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801510c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801510e:	6a3b      	ldr	r3, [r7, #32]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	623b      	str	r3, [r7, #32]
 8015114:	e002      	b.n	801511c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015116:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015118:	f7fb ff1f 	bl	8010f5a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015120:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015124:	2b00      	cmp	r3, #0
 8015126:	d012      	beq.n	801514e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801512a:	68db      	ldr	r3, [r3, #12]
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	4618      	mov	r0, r3
 8015130:	f7f8 fef7 	bl	800df22 <lwip_htonl>
 8015134:	4602      	mov	r2, r0
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801513a:	1ad3      	subs	r3, r2, r3
 801513c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801513e:	8912      	ldrh	r2, [r2, #8]
 8015140:	4413      	add	r3, r2
  while (seg != NULL &&
 8015142:	69ba      	ldr	r2, [r7, #24]
 8015144:	429a      	cmp	r2, r3
 8015146:	f4bf aed9 	bcs.w	8014efc <tcp_output+0x160>
 801514a:	e000      	b.n	801514e <tcp_output+0x3b2>
      break;
 801514c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015152:	2b00      	cmp	r3, #0
 8015154:	d108      	bne.n	8015168 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2200      	movs	r2, #0
 801515a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801515e:	e004      	b.n	801516a <tcp_output+0x3ce>
    goto output_done;
 8015160:	bf00      	nop
 8015162:	e002      	b.n	801516a <tcp_output+0x3ce>
    goto output_done;
 8015164:	bf00      	nop
 8015166:	e000      	b.n	801516a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015168:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	8b5b      	ldrh	r3, [r3, #26]
 801516e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015172:	b29a      	uxth	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015178:	2300      	movs	r3, #0
}
 801517a:	4618      	mov	r0, r3
 801517c:	3728      	adds	r7, #40	@ 0x28
 801517e:	46bd      	mov	sp, r7
 8015180:	bdb0      	pop	{r4, r5, r7, pc}
 8015182:	bf00      	nop

08015184 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d106      	bne.n	80151a0 <tcp_output_segment_busy+0x1c>
 8015192:	4b09      	ldr	r3, [pc, #36]	@ (80151b8 <tcp_output_segment_busy+0x34>)
 8015194:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015198:	4908      	ldr	r1, [pc, #32]	@ (80151bc <tcp_output_segment_busy+0x38>)
 801519a:	4809      	ldr	r0, [pc, #36]	@ (80151c0 <tcp_output_segment_busy+0x3c>)
 801519c:	f004 fba2 	bl	80198e4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	7b9b      	ldrb	r3, [r3, #14]
 80151a6:	2b01      	cmp	r3, #1
 80151a8:	d001      	beq.n	80151ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80151aa:	2301      	movs	r3, #1
 80151ac:	e000      	b.n	80151b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80151ae:	2300      	movs	r3, #0
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	3708      	adds	r7, #8
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	0801e1d0 	.word	0x0801e1d0
 80151bc:	0801e76c 	.word	0x0801e76c
 80151c0:	0801e224 	.word	0x0801e224

080151c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80151c4:	b5b0      	push	{r4, r5, r7, lr}
 80151c6:	b08c      	sub	sp, #48	@ 0x30
 80151c8:	af04      	add	r7, sp, #16
 80151ca:	60f8      	str	r0, [r7, #12]
 80151cc:	60b9      	str	r1, [r7, #8]
 80151ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <tcp_output_segment+0x20>
 80151d6:	4b64      	ldr	r3, [pc, #400]	@ (8015368 <tcp_output_segment+0x1a4>)
 80151d8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80151dc:	4963      	ldr	r1, [pc, #396]	@ (801536c <tcp_output_segment+0x1a8>)
 80151de:	4864      	ldr	r0, [pc, #400]	@ (8015370 <tcp_output_segment+0x1ac>)
 80151e0:	f004 fb80 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d106      	bne.n	80151f8 <tcp_output_segment+0x34>
 80151ea:	4b5f      	ldr	r3, [pc, #380]	@ (8015368 <tcp_output_segment+0x1a4>)
 80151ec:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80151f0:	4960      	ldr	r1, [pc, #384]	@ (8015374 <tcp_output_segment+0x1b0>)
 80151f2:	485f      	ldr	r0, [pc, #380]	@ (8015370 <tcp_output_segment+0x1ac>)
 80151f4:	f004 fb76 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d106      	bne.n	801520c <tcp_output_segment+0x48>
 80151fe:	4b5a      	ldr	r3, [pc, #360]	@ (8015368 <tcp_output_segment+0x1a4>)
 8015200:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015204:	495c      	ldr	r1, [pc, #368]	@ (8015378 <tcp_output_segment+0x1b4>)
 8015206:	485a      	ldr	r0, [pc, #360]	@ (8015370 <tcp_output_segment+0x1ac>)
 8015208:	f004 fb6c 	bl	80198e4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801520c:	68f8      	ldr	r0, [r7, #12]
 801520e:	f7ff ffb9 	bl	8015184 <tcp_output_segment_busy>
 8015212:	4603      	mov	r3, r0
 8015214:	2b00      	cmp	r3, #0
 8015216:	d001      	beq.n	801521c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015218:	2300      	movs	r3, #0
 801521a:	e0a1      	b.n	8015360 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	68dc      	ldr	r4, [r3, #12]
 8015224:	4610      	mov	r0, r2
 8015226:	f7f8 fe7c 	bl	800df22 <lwip_htonl>
 801522a:	4603      	mov	r3, r0
 801522c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	68dc      	ldr	r4, [r3, #12]
 8015236:	4610      	mov	r0, r2
 8015238:	f7f8 fe5e 	bl	800def8 <lwip_htons>
 801523c:	4603      	mov	r3, r0
 801523e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015244:	68ba      	ldr	r2, [r7, #8]
 8015246:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015248:	441a      	add	r2, r3
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	68db      	ldr	r3, [r3, #12]
 8015252:	3314      	adds	r3, #20
 8015254:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	7a9b      	ldrb	r3, [r3, #10]
 801525a:	f003 0301 	and.w	r3, r3, #1
 801525e:	2b00      	cmp	r3, #0
 8015260:	d015      	beq.n	801528e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	3304      	adds	r3, #4
 8015266:	461a      	mov	r2, r3
 8015268:	6879      	ldr	r1, [r7, #4]
 801526a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801526e:	f7fc fa39 	bl	80116e4 <tcp_eff_send_mss_netif>
 8015272:	4603      	mov	r3, r0
 8015274:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015276:	8b7b      	ldrh	r3, [r7, #26]
 8015278:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801527c:	4618      	mov	r0, r3
 801527e:	f7f8 fe50 	bl	800df22 <lwip_htonl>
 8015282:	4602      	mov	r2, r0
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	3304      	adds	r3, #4
 801528c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015294:	2b00      	cmp	r3, #0
 8015296:	da02      	bge.n	801529e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	2200      	movs	r2, #0
 801529c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d10c      	bne.n	80152c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80152a6:	4b35      	ldr	r3, [pc, #212]	@ (801537c <tcp_output_segment+0x1b8>)
 80152a8:	681a      	ldr	r2, [r3, #0]
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	685b      	ldr	r3, [r3, #4]
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7f8 fe34 	bl	800df22 <lwip_htonl>
 80152ba:	4602      	mov	r2, r0
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	68da      	ldr	r2, [r3, #12]
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	685b      	ldr	r3, [r3, #4]
 80152ca:	1ad3      	subs	r3, r2, r3
 80152cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	8959      	ldrh	r1, [r3, #10]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	8b3a      	ldrh	r2, [r7, #24]
 80152da:	1a8a      	subs	r2, r1, r2
 80152dc:	b292      	uxth	r2, r2
 80152de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	685b      	ldr	r3, [r3, #4]
 80152e4:	8919      	ldrh	r1, [r3, #8]
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	8b3a      	ldrh	r2, [r7, #24]
 80152ec:	1a8a      	subs	r2, r1, r2
 80152ee:	b292      	uxth	r2, r2
 80152f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	68fa      	ldr	r2, [r7, #12]
 80152f8:	68d2      	ldr	r2, [r2, #12]
 80152fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	2200      	movs	r2, #0
 8015302:	741a      	strb	r2, [r3, #16]
 8015304:	2200      	movs	r2, #0
 8015306:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	68da      	ldr	r2, [r3, #12]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	7a9b      	ldrb	r3, [r3, #10]
 8015310:	f003 0301 	and.w	r3, r3, #1
 8015314:	2b00      	cmp	r3, #0
 8015316:	d001      	beq.n	801531c <tcp_output_segment+0x158>
 8015318:	2318      	movs	r3, #24
 801531a:	e000      	b.n	801531e <tcp_output_segment+0x15a>
 801531c:	2314      	movs	r3, #20
 801531e:	4413      	add	r3, r2
 8015320:	69fa      	ldr	r2, [r7, #28]
 8015322:	429a      	cmp	r2, r3
 8015324:	d006      	beq.n	8015334 <tcp_output_segment+0x170>
 8015326:	4b10      	ldr	r3, [pc, #64]	@ (8015368 <tcp_output_segment+0x1a4>)
 8015328:	f240 621c 	movw	r2, #1564	@ 0x61c
 801532c:	4914      	ldr	r1, [pc, #80]	@ (8015380 <tcp_output_segment+0x1bc>)
 801532e:	4810      	ldr	r0, [pc, #64]	@ (8015370 <tcp_output_segment+0x1ac>)
 8015330:	f004 fad8 	bl	80198e4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	6858      	ldr	r0, [r3, #4]
 8015338:	68b9      	ldr	r1, [r7, #8]
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	1d1c      	adds	r4, r3, #4
 801533e:	68bb      	ldr	r3, [r7, #8]
 8015340:	7add      	ldrb	r5, [r3, #11]
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	7a9b      	ldrb	r3, [r3, #10]
 8015346:	687a      	ldr	r2, [r7, #4]
 8015348:	9202      	str	r2, [sp, #8]
 801534a:	2206      	movs	r2, #6
 801534c:	9201      	str	r2, [sp, #4]
 801534e:	9300      	str	r3, [sp, #0]
 8015350:	462b      	mov	r3, r5
 8015352:	4622      	mov	r2, r4
 8015354:	f002 fbaa 	bl	8017aac <ip4_output_if>
 8015358:	4603      	mov	r3, r0
 801535a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801535c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015360:	4618      	mov	r0, r3
 8015362:	3720      	adds	r7, #32
 8015364:	46bd      	mov	sp, r7
 8015366:	bdb0      	pop	{r4, r5, r7, pc}
 8015368:	0801e1d0 	.word	0x0801e1d0
 801536c:	0801e794 	.word	0x0801e794
 8015370:	0801e224 	.word	0x0801e224
 8015374:	0801e7b4 	.word	0x0801e7b4
 8015378:	0801e7d4 	.word	0x0801e7d4
 801537c:	20011d18 	.word	0x20011d18
 8015380:	0801e7f8 	.word	0x0801e7f8

08015384 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015384:	b5b0      	push	{r4, r5, r7, lr}
 8015386:	b084      	sub	sp, #16
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d106      	bne.n	80153a0 <tcp_rexmit_rto_prepare+0x1c>
 8015392:	4b31      	ldr	r3, [pc, #196]	@ (8015458 <tcp_rexmit_rto_prepare+0xd4>)
 8015394:	f240 6263 	movw	r2, #1635	@ 0x663
 8015398:	4930      	ldr	r1, [pc, #192]	@ (801545c <tcp_rexmit_rto_prepare+0xd8>)
 801539a:	4831      	ldr	r0, [pc, #196]	@ (8015460 <tcp_rexmit_rto_prepare+0xdc>)
 801539c:	f004 faa2 	bl	80198e4 <iprintf>

  if (pcb->unacked == NULL) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d102      	bne.n	80153ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80153a8:	f06f 0305 	mvn.w	r3, #5
 80153ac:	e050      	b.n	8015450 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153b2:	60fb      	str	r3, [r7, #12]
 80153b4:	e00b      	b.n	80153ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80153b6:	68f8      	ldr	r0, [r7, #12]
 80153b8:	f7ff fee4 	bl	8015184 <tcp_output_segment_busy>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d002      	beq.n	80153c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80153c2:	f06f 0305 	mvn.w	r3, #5
 80153c6:	e043      	b.n	8015450 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	60fb      	str	r3, [r7, #12]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d1ef      	bne.n	80153b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80153d6:	68f8      	ldr	r0, [r7, #12]
 80153d8:	f7ff fed4 	bl	8015184 <tcp_output_segment_busy>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d002      	beq.n	80153e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80153e2:	f06f 0305 	mvn.w	r3, #5
 80153e6:	e033      	b.n	8015450 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2200      	movs	r2, #0
 80153fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	8b5b      	ldrh	r3, [r3, #26]
 8015402:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015406:	b29a      	uxth	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	68db      	ldr	r3, [r3, #12]
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	4618      	mov	r0, r3
 8015414:	f7f8 fd85 	bl	800df22 <lwip_htonl>
 8015418:	4604      	mov	r4, r0
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	891b      	ldrh	r3, [r3, #8]
 801541e:	461d      	mov	r5, r3
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	68db      	ldr	r3, [r3, #12]
 8015424:	899b      	ldrh	r3, [r3, #12]
 8015426:	b29b      	uxth	r3, r3
 8015428:	4618      	mov	r0, r3
 801542a:	f7f8 fd65 	bl	800def8 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	b2db      	uxtb	r3, r3
 8015432:	f003 0303 	and.w	r3, r3, #3
 8015436:	2b00      	cmp	r3, #0
 8015438:	d001      	beq.n	801543e <tcp_rexmit_rto_prepare+0xba>
 801543a:	2301      	movs	r3, #1
 801543c:	e000      	b.n	8015440 <tcp_rexmit_rto_prepare+0xbc>
 801543e:	2300      	movs	r3, #0
 8015440:	442b      	add	r3, r5
 8015442:	18e2      	adds	r2, r4, r3
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	2200      	movs	r2, #0
 801544c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801544e:	2300      	movs	r3, #0
}
 8015450:	4618      	mov	r0, r3
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bdb0      	pop	{r4, r5, r7, pc}
 8015458:	0801e1d0 	.word	0x0801e1d0
 801545c:	0801e80c 	.word	0x0801e80c
 8015460:	0801e224 	.word	0x0801e224

08015464 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d106      	bne.n	8015480 <tcp_rexmit_rto_commit+0x1c>
 8015472:	4b0d      	ldr	r3, [pc, #52]	@ (80154a8 <tcp_rexmit_rto_commit+0x44>)
 8015474:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015478:	490c      	ldr	r1, [pc, #48]	@ (80154ac <tcp_rexmit_rto_commit+0x48>)
 801547a:	480d      	ldr	r0, [pc, #52]	@ (80154b0 <tcp_rexmit_rto_commit+0x4c>)
 801547c:	f004 fa32 	bl	80198e4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015486:	2bff      	cmp	r3, #255	@ 0xff
 8015488:	d007      	beq.n	801549a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015490:	3301      	adds	r3, #1
 8015492:	b2da      	uxtb	r2, r3
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801549a:	6878      	ldr	r0, [r7, #4]
 801549c:	f7ff fc7e 	bl	8014d9c <tcp_output>
}
 80154a0:	bf00      	nop
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	0801e1d0 	.word	0x0801e1d0
 80154ac:	0801e830 	.word	0x0801e830
 80154b0:	0801e224 	.word	0x0801e224

080154b4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d106      	bne.n	80154d0 <tcp_rexmit_rto+0x1c>
 80154c2:	4b0a      	ldr	r3, [pc, #40]	@ (80154ec <tcp_rexmit_rto+0x38>)
 80154c4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80154c8:	4909      	ldr	r1, [pc, #36]	@ (80154f0 <tcp_rexmit_rto+0x3c>)
 80154ca:	480a      	ldr	r0, [pc, #40]	@ (80154f4 <tcp_rexmit_rto+0x40>)
 80154cc:	f004 fa0a 	bl	80198e4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f7ff ff57 	bl	8015384 <tcp_rexmit_rto_prepare>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d102      	bne.n	80154e2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7ff ffc1 	bl	8015464 <tcp_rexmit_rto_commit>
  }
}
 80154e2:	bf00      	nop
 80154e4:	3708      	adds	r7, #8
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
 80154ea:	bf00      	nop
 80154ec:	0801e1d0 	.word	0x0801e1d0
 80154f0:	0801e854 	.word	0x0801e854
 80154f4:	0801e224 	.word	0x0801e224

080154f8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80154f8:	b590      	push	{r4, r7, lr}
 80154fa:	b085      	sub	sp, #20
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d106      	bne.n	8015514 <tcp_rexmit+0x1c>
 8015506:	4b2f      	ldr	r3, [pc, #188]	@ (80155c4 <tcp_rexmit+0xcc>)
 8015508:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801550c:	492e      	ldr	r1, [pc, #184]	@ (80155c8 <tcp_rexmit+0xd0>)
 801550e:	482f      	ldr	r0, [pc, #188]	@ (80155cc <tcp_rexmit+0xd4>)
 8015510:	f004 f9e8 	bl	80198e4 <iprintf>

  if (pcb->unacked == NULL) {
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015518:	2b00      	cmp	r3, #0
 801551a:	d102      	bne.n	8015522 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801551c:	f06f 0305 	mvn.w	r3, #5
 8015520:	e04c      	b.n	80155bc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015526:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015528:	68b8      	ldr	r0, [r7, #8]
 801552a:	f7ff fe2b 	bl	8015184 <tcp_output_segment_busy>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	d002      	beq.n	801553a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015534:	f06f 0305 	mvn.w	r3, #5
 8015538:	e040      	b.n	80155bc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	336c      	adds	r3, #108	@ 0x6c
 8015546:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015548:	e002      	b.n	8015550 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d011      	beq.n	801557c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	685b      	ldr	r3, [r3, #4]
 8015560:	4618      	mov	r0, r3
 8015562:	f7f8 fcde 	bl	800df22 <lwip_htonl>
 8015566:	4604      	mov	r4, r0
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	68db      	ldr	r3, [r3, #12]
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	4618      	mov	r0, r3
 8015570:	f7f8 fcd7 	bl	800df22 <lwip_htonl>
 8015574:	4603      	mov	r3, r0
 8015576:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015578:	2b00      	cmp	r3, #0
 801557a:	dbe6      	blt.n	801554a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	68ba      	ldr	r2, [r7, #8]
 8015588:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d103      	bne.n	801559a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2200      	movs	r2, #0
 8015596:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155a0:	2bff      	cmp	r3, #255	@ 0xff
 80155a2:	d007      	beq.n	80155b4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155aa:	3301      	adds	r3, #1
 80155ac:	b2da      	uxtb	r2, r3
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2200      	movs	r2, #0
 80155b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3714      	adds	r7, #20
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd90      	pop	{r4, r7, pc}
 80155c4:	0801e1d0 	.word	0x0801e1d0
 80155c8:	0801e870 	.word	0x0801e870
 80155cc:	0801e224 	.word	0x0801e224

080155d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d106      	bne.n	80155ec <tcp_rexmit_fast+0x1c>
 80155de:	4b2a      	ldr	r3, [pc, #168]	@ (8015688 <tcp_rexmit_fast+0xb8>)
 80155e0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80155e4:	4929      	ldr	r1, [pc, #164]	@ (801568c <tcp_rexmit_fast+0xbc>)
 80155e6:	482a      	ldr	r0, [pc, #168]	@ (8015690 <tcp_rexmit_fast+0xc0>)
 80155e8:	f004 f97c 	bl	80198e4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d045      	beq.n	8015680 <tcp_rexmit_fast+0xb0>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	8b5b      	ldrh	r3, [r3, #26]
 80155f8:	f003 0304 	and.w	r3, r3, #4
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d13f      	bne.n	8015680 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f7ff ff79 	bl	80154f8 <tcp_rexmit>
 8015606:	4603      	mov	r3, r0
 8015608:	2b00      	cmp	r3, #0
 801560a:	d139      	bne.n	8015680 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015618:	4293      	cmp	r3, r2
 801561a:	bf28      	it	cs
 801561c:	4613      	movcs	r3, r2
 801561e:	b29b      	uxth	r3, r3
 8015620:	2b00      	cmp	r3, #0
 8015622:	da00      	bge.n	8015626 <tcp_rexmit_fast+0x56>
 8015624:	3301      	adds	r3, #1
 8015626:	105b      	asrs	r3, r3, #1
 8015628:	b29a      	uxth	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015636:	461a      	mov	r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801563c:	005b      	lsls	r3, r3, #1
 801563e:	429a      	cmp	r2, r3
 8015640:	d206      	bcs.n	8015650 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015646:	005b      	lsls	r3, r3, #1
 8015648:	b29a      	uxth	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801565a:	4619      	mov	r1, r3
 801565c:	0049      	lsls	r1, r1, #1
 801565e:	440b      	add	r3, r1
 8015660:	b29b      	uxth	r3, r3
 8015662:	4413      	add	r3, r2
 8015664:	b29a      	uxth	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	8b5b      	ldrh	r3, [r3, #26]
 8015670:	f043 0304 	orr.w	r3, r3, #4
 8015674:	b29a      	uxth	r2, r3
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2200      	movs	r2, #0
 801567e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	0801e1d0 	.word	0x0801e1d0
 801568c:	0801e888 	.word	0x0801e888
 8015690:	0801e224 	.word	0x0801e224

08015694 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b086      	sub	sp, #24
 8015698:	af00      	add	r7, sp, #0
 801569a:	60f8      	str	r0, [r7, #12]
 801569c:	607b      	str	r3, [r7, #4]
 801569e:	460b      	mov	r3, r1
 80156a0:	817b      	strh	r3, [r7, #10]
 80156a2:	4613      	mov	r3, r2
 80156a4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80156a6:	897a      	ldrh	r2, [r7, #10]
 80156a8:	893b      	ldrh	r3, [r7, #8]
 80156aa:	4413      	add	r3, r2
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	3314      	adds	r3, #20
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80156b6:	4619      	mov	r1, r3
 80156b8:	2022      	movs	r0, #34	@ 0x22
 80156ba:	f7f9 fce5 	bl	800f088 <pbuf_alloc>
 80156be:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d04d      	beq.n	8015762 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80156c6:	897b      	ldrh	r3, [r7, #10]
 80156c8:	3313      	adds	r3, #19
 80156ca:	697a      	ldr	r2, [r7, #20]
 80156cc:	8952      	ldrh	r2, [r2, #10]
 80156ce:	4293      	cmp	r3, r2
 80156d0:	db06      	blt.n	80156e0 <tcp_output_alloc_header_common+0x4c>
 80156d2:	4b26      	ldr	r3, [pc, #152]	@ (801576c <tcp_output_alloc_header_common+0xd8>)
 80156d4:	f240 7223 	movw	r2, #1827	@ 0x723
 80156d8:	4925      	ldr	r1, [pc, #148]	@ (8015770 <tcp_output_alloc_header_common+0xdc>)
 80156da:	4826      	ldr	r0, [pc, #152]	@ (8015774 <tcp_output_alloc_header_common+0xe0>)
 80156dc:	f004 f902 	bl	80198e4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80156e6:	8c3b      	ldrh	r3, [r7, #32]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7f8 fc05 	bl	800def8 <lwip_htons>
 80156ee:	4603      	mov	r3, r0
 80156f0:	461a      	mov	r2, r3
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80156f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f8 fbfd 	bl	800def8 <lwip_htons>
 80156fe:	4603      	mov	r3, r0
 8015700:	461a      	mov	r2, r3
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801570c:	68f8      	ldr	r0, [r7, #12]
 801570e:	f7f8 fc08 	bl	800df22 <lwip_htonl>
 8015712:	4602      	mov	r2, r0
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015718:	897b      	ldrh	r3, [r7, #10]
 801571a:	089b      	lsrs	r3, r3, #2
 801571c:	b29b      	uxth	r3, r3
 801571e:	3305      	adds	r3, #5
 8015720:	b29b      	uxth	r3, r3
 8015722:	031b      	lsls	r3, r3, #12
 8015724:	b29a      	uxth	r2, r3
 8015726:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801572a:	b29b      	uxth	r3, r3
 801572c:	4313      	orrs	r3, r2
 801572e:	b29b      	uxth	r3, r3
 8015730:	4618      	mov	r0, r3
 8015732:	f7f8 fbe1 	bl	800def8 <lwip_htons>
 8015736:	4603      	mov	r3, r0
 8015738:	461a      	mov	r2, r3
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801573e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015740:	4618      	mov	r0, r3
 8015742:	f7f8 fbd9 	bl	800def8 <lwip_htons>
 8015746:	4603      	mov	r3, r0
 8015748:	461a      	mov	r2, r3
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	2200      	movs	r2, #0
 8015752:	741a      	strb	r2, [r3, #16]
 8015754:	2200      	movs	r2, #0
 8015756:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	2200      	movs	r2, #0
 801575c:	749a      	strb	r2, [r3, #18]
 801575e:	2200      	movs	r2, #0
 8015760:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015762:	697b      	ldr	r3, [r7, #20]
}
 8015764:	4618      	mov	r0, r3
 8015766:	3718      	adds	r7, #24
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	0801e1d0 	.word	0x0801e1d0
 8015770:	0801e8a8 	.word	0x0801e8a8
 8015774:	0801e224 	.word	0x0801e224

08015778 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015778:	b5b0      	push	{r4, r5, r7, lr}
 801577a:	b08a      	sub	sp, #40	@ 0x28
 801577c:	af04      	add	r7, sp, #16
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	607b      	str	r3, [r7, #4]
 8015782:	460b      	mov	r3, r1
 8015784:	817b      	strh	r3, [r7, #10]
 8015786:	4613      	mov	r3, r2
 8015788:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d106      	bne.n	801579e <tcp_output_alloc_header+0x26>
 8015790:	4b15      	ldr	r3, [pc, #84]	@ (80157e8 <tcp_output_alloc_header+0x70>)
 8015792:	f240 7242 	movw	r2, #1858	@ 0x742
 8015796:	4915      	ldr	r1, [pc, #84]	@ (80157ec <tcp_output_alloc_header+0x74>)
 8015798:	4815      	ldr	r0, [pc, #84]	@ (80157f0 <tcp_output_alloc_header+0x78>)
 801579a:	f004 f8a3 	bl	80198e4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	8adb      	ldrh	r3, [r3, #22]
 80157a6:	68fa      	ldr	r2, [r7, #12]
 80157a8:	8b12      	ldrh	r2, [r2, #24]
 80157aa:	68f9      	ldr	r1, [r7, #12]
 80157ac:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80157ae:	893d      	ldrh	r5, [r7, #8]
 80157b0:	897c      	ldrh	r4, [r7, #10]
 80157b2:	9103      	str	r1, [sp, #12]
 80157b4:	2110      	movs	r1, #16
 80157b6:	9102      	str	r1, [sp, #8]
 80157b8:	9201      	str	r2, [sp, #4]
 80157ba:	9300      	str	r3, [sp, #0]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	462a      	mov	r2, r5
 80157c0:	4621      	mov	r1, r4
 80157c2:	f7ff ff67 	bl	8015694 <tcp_output_alloc_header_common>
 80157c6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d006      	beq.n	80157dc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157d2:	68fa      	ldr	r2, [r7, #12]
 80157d4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80157d6:	441a      	add	r2, r3
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80157dc:	697b      	ldr	r3, [r7, #20]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3718      	adds	r7, #24
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bdb0      	pop	{r4, r5, r7, pc}
 80157e6:	bf00      	nop
 80157e8:	0801e1d0 	.word	0x0801e1d0
 80157ec:	0801e8d8 	.word	0x0801e8d8
 80157f0:	0801e224 	.word	0x0801e224

080157f4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b088      	sub	sp, #32
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	4611      	mov	r1, r2
 8015800:	461a      	mov	r2, r3
 8015802:	460b      	mov	r3, r1
 8015804:	71fb      	strb	r3, [r7, #7]
 8015806:	4613      	mov	r3, r2
 8015808:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801580a:	2300      	movs	r3, #0
 801580c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d106      	bne.n	8015822 <tcp_output_fill_options+0x2e>
 8015814:	4b12      	ldr	r3, [pc, #72]	@ (8015860 <tcp_output_fill_options+0x6c>)
 8015816:	f240 7256 	movw	r2, #1878	@ 0x756
 801581a:	4912      	ldr	r1, [pc, #72]	@ (8015864 <tcp_output_fill_options+0x70>)
 801581c:	4812      	ldr	r0, [pc, #72]	@ (8015868 <tcp_output_fill_options+0x74>)
 801581e:	f004 f861 	bl	80198e4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	3314      	adds	r3, #20
 801582c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801582e:	8bfb      	ldrh	r3, [r7, #30]
 8015830:	009b      	lsls	r3, r3, #2
 8015832:	461a      	mov	r2, r3
 8015834:	79fb      	ldrb	r3, [r7, #7]
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	f003 0304 	and.w	r3, r3, #4
 801583c:	4413      	add	r3, r2
 801583e:	3314      	adds	r3, #20
 8015840:	69ba      	ldr	r2, [r7, #24]
 8015842:	4413      	add	r3, r2
 8015844:	697a      	ldr	r2, [r7, #20]
 8015846:	429a      	cmp	r2, r3
 8015848:	d006      	beq.n	8015858 <tcp_output_fill_options+0x64>
 801584a:	4b05      	ldr	r3, [pc, #20]	@ (8015860 <tcp_output_fill_options+0x6c>)
 801584c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015850:	4906      	ldr	r1, [pc, #24]	@ (801586c <tcp_output_fill_options+0x78>)
 8015852:	4805      	ldr	r0, [pc, #20]	@ (8015868 <tcp_output_fill_options+0x74>)
 8015854:	f004 f846 	bl	80198e4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015858:	bf00      	nop
 801585a:	3720      	adds	r7, #32
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	0801e1d0 	.word	0x0801e1d0
 8015864:	0801e900 	.word	0x0801e900
 8015868:	0801e224 	.word	0x0801e224
 801586c:	0801e7f8 	.word	0x0801e7f8

08015870 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b08a      	sub	sp, #40	@ 0x28
 8015874:	af04      	add	r7, sp, #16
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
 801587c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d106      	bne.n	8015892 <tcp_output_control_segment+0x22>
 8015884:	4b1c      	ldr	r3, [pc, #112]	@ (80158f8 <tcp_output_control_segment+0x88>)
 8015886:	f240 7287 	movw	r2, #1927	@ 0x787
 801588a:	491c      	ldr	r1, [pc, #112]	@ (80158fc <tcp_output_control_segment+0x8c>)
 801588c:	481c      	ldr	r0, [pc, #112]	@ (8015900 <tcp_output_control_segment+0x90>)
 801588e:	f004 f829 	bl	80198e4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015892:	683a      	ldr	r2, [r7, #0]
 8015894:	6879      	ldr	r1, [r7, #4]
 8015896:	68f8      	ldr	r0, [r7, #12]
 8015898:	f7fe faea 	bl	8013e70 <tcp_route>
 801589c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d102      	bne.n	80158aa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80158a4:	23fc      	movs	r3, #252	@ 0xfc
 80158a6:	75fb      	strb	r3, [r7, #23]
 80158a8:	e01c      	b.n	80158e4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d006      	beq.n	80158be <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	7adb      	ldrb	r3, [r3, #11]
 80158b4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	7a9b      	ldrb	r3, [r3, #10]
 80158ba:	757b      	strb	r3, [r7, #21]
 80158bc:	e003      	b.n	80158c6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80158be:	23ff      	movs	r3, #255	@ 0xff
 80158c0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80158c2:	2300      	movs	r3, #0
 80158c4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80158c6:	7dba      	ldrb	r2, [r7, #22]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	9302      	str	r3, [sp, #8]
 80158cc:	2306      	movs	r3, #6
 80158ce:	9301      	str	r3, [sp, #4]
 80158d0:	7d7b      	ldrb	r3, [r7, #21]
 80158d2:	9300      	str	r3, [sp, #0]
 80158d4:	4613      	mov	r3, r2
 80158d6:	683a      	ldr	r2, [r7, #0]
 80158d8:	6879      	ldr	r1, [r7, #4]
 80158da:	68b8      	ldr	r0, [r7, #8]
 80158dc:	f002 f8e6 	bl	8017aac <ip4_output_if>
 80158e0:	4603      	mov	r3, r0
 80158e2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80158e4:	68b8      	ldr	r0, [r7, #8]
 80158e6:	f7f9 feb3 	bl	800f650 <pbuf_free>
  return err;
 80158ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3718      	adds	r7, #24
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}
 80158f6:	bf00      	nop
 80158f8:	0801e1d0 	.word	0x0801e1d0
 80158fc:	0801e928 	.word	0x0801e928
 8015900:	0801e224 	.word	0x0801e224

08015904 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015904:	b590      	push	{r4, r7, lr}
 8015906:	b08b      	sub	sp, #44	@ 0x2c
 8015908:	af04      	add	r7, sp, #16
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	60b9      	str	r1, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
 8015910:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d106      	bne.n	8015926 <tcp_rst+0x22>
 8015918:	4b1f      	ldr	r3, [pc, #124]	@ (8015998 <tcp_rst+0x94>)
 801591a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801591e:	491f      	ldr	r1, [pc, #124]	@ (801599c <tcp_rst+0x98>)
 8015920:	481f      	ldr	r0, [pc, #124]	@ (80159a0 <tcp_rst+0x9c>)
 8015922:	f003 ffdf 	bl	80198e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015928:	2b00      	cmp	r3, #0
 801592a:	d106      	bne.n	801593a <tcp_rst+0x36>
 801592c:	4b1a      	ldr	r3, [pc, #104]	@ (8015998 <tcp_rst+0x94>)
 801592e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015932:	491c      	ldr	r1, [pc, #112]	@ (80159a4 <tcp_rst+0xa0>)
 8015934:	481a      	ldr	r0, [pc, #104]	@ (80159a0 <tcp_rst+0x9c>)
 8015936:	f003 ffd5 	bl	80198e4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801593a:	2300      	movs	r3, #0
 801593c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801593e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015942:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015944:	7dfb      	ldrb	r3, [r7, #23]
 8015946:	b29c      	uxth	r4, r3
 8015948:	68b8      	ldr	r0, [r7, #8]
 801594a:	f7f8 faea 	bl	800df22 <lwip_htonl>
 801594e:	4602      	mov	r2, r0
 8015950:	8abb      	ldrh	r3, [r7, #20]
 8015952:	9303      	str	r3, [sp, #12]
 8015954:	2314      	movs	r3, #20
 8015956:	9302      	str	r3, [sp, #8]
 8015958:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801595a:	9301      	str	r3, [sp, #4]
 801595c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801595e:	9300      	str	r3, [sp, #0]
 8015960:	4613      	mov	r3, r2
 8015962:	2200      	movs	r2, #0
 8015964:	4621      	mov	r1, r4
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f7ff fe94 	bl	8015694 <tcp_output_alloc_header_common>
 801596c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d00c      	beq.n	801598e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015974:	7dfb      	ldrb	r3, [r7, #23]
 8015976:	2200      	movs	r2, #0
 8015978:	6939      	ldr	r1, [r7, #16]
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	f7ff ff3a 	bl	80157f4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015982:	683a      	ldr	r2, [r7, #0]
 8015984:	6939      	ldr	r1, [r7, #16]
 8015986:	68f8      	ldr	r0, [r7, #12]
 8015988:	f7ff ff72 	bl	8015870 <tcp_output_control_segment>
 801598c:	e000      	b.n	8015990 <tcp_rst+0x8c>
    return;
 801598e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015990:	371c      	adds	r7, #28
 8015992:	46bd      	mov	sp, r7
 8015994:	bd90      	pop	{r4, r7, pc}
 8015996:	bf00      	nop
 8015998:	0801e1d0 	.word	0x0801e1d0
 801599c:	0801e954 	.word	0x0801e954
 80159a0:	0801e224 	.word	0x0801e224
 80159a4:	0801e970 	.word	0x0801e970

080159a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80159a8:	b590      	push	{r4, r7, lr}
 80159aa:	b087      	sub	sp, #28
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80159b0:	2300      	movs	r3, #0
 80159b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80159b4:	2300      	movs	r3, #0
 80159b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d106      	bne.n	80159cc <tcp_send_empty_ack+0x24>
 80159be:	4b28      	ldr	r3, [pc, #160]	@ (8015a60 <tcp_send_empty_ack+0xb8>)
 80159c0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80159c4:	4927      	ldr	r1, [pc, #156]	@ (8015a64 <tcp_send_empty_ack+0xbc>)
 80159c6:	4828      	ldr	r0, [pc, #160]	@ (8015a68 <tcp_send_empty_ack+0xc0>)
 80159c8:	f003 ff8c 	bl	80198e4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80159cc:	7dfb      	ldrb	r3, [r7, #23]
 80159ce:	009b      	lsls	r3, r3, #2
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	f003 0304 	and.w	r3, r3, #4
 80159d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80159d8:	7d7b      	ldrb	r3, [r7, #21]
 80159da:	b29c      	uxth	r4, r3
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f8 fa9e 	bl	800df22 <lwip_htonl>
 80159e6:	4603      	mov	r3, r0
 80159e8:	2200      	movs	r2, #0
 80159ea:	4621      	mov	r1, r4
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f7ff fec3 	bl	8015778 <tcp_output_alloc_header>
 80159f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d109      	bne.n	8015a0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	8b5b      	ldrh	r3, [r3, #26]
 80159fe:	f043 0303 	orr.w	r3, r3, #3
 8015a02:	b29a      	uxth	r2, r3
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015a08:	f06f 0301 	mvn.w	r3, #1
 8015a0c:	e023      	b.n	8015a56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015a0e:	7dbb      	ldrb	r3, [r7, #22]
 8015a10:	7dfa      	ldrb	r2, [r7, #23]
 8015a12:	6939      	ldr	r1, [r7, #16]
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7ff feed 	bl	80157f4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	3304      	adds	r3, #4
 8015a20:	6939      	ldr	r1, [r7, #16]
 8015a22:	6878      	ldr	r0, [r7, #4]
 8015a24:	f7ff ff24 	bl	8015870 <tcp_output_control_segment>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d007      	beq.n	8015a44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	8b5b      	ldrh	r3, [r3, #26]
 8015a38:	f043 0303 	orr.w	r3, r3, #3
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	835a      	strh	r2, [r3, #26]
 8015a42:	e006      	b.n	8015a52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	8b5b      	ldrh	r3, [r3, #26]
 8015a48:	f023 0303 	bic.w	r3, r3, #3
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	371c      	adds	r7, #28
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd90      	pop	{r4, r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	0801e1d0 	.word	0x0801e1d0
 8015a64:	0801e98c 	.word	0x0801e98c
 8015a68:	0801e224 	.word	0x0801e224

08015a6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015a6c:	b590      	push	{r4, r7, lr}
 8015a6e:	b087      	sub	sp, #28
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015a74:	2300      	movs	r3, #0
 8015a76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d106      	bne.n	8015a8c <tcp_keepalive+0x20>
 8015a7e:	4b18      	ldr	r3, [pc, #96]	@ (8015ae0 <tcp_keepalive+0x74>)
 8015a80:	f640 0224 	movw	r2, #2084	@ 0x824
 8015a84:	4917      	ldr	r1, [pc, #92]	@ (8015ae4 <tcp_keepalive+0x78>)
 8015a86:	4818      	ldr	r0, [pc, #96]	@ (8015ae8 <tcp_keepalive+0x7c>)
 8015a88:	f003 ff2c 	bl	80198e4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015a8c:	7dfb      	ldrb	r3, [r7, #23]
 8015a8e:	b29c      	uxth	r4, r3
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a94:	3b01      	subs	r3, #1
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7f8 fa43 	bl	800df22 <lwip_htonl>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	4621      	mov	r1, r4
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f7ff fe68 	bl	8015778 <tcp_output_alloc_header>
 8015aa8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d102      	bne.n	8015ab6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ab4:	e010      	b.n	8015ad8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ab6:	7dfb      	ldrb	r3, [r7, #23]
 8015ab8:	2200      	movs	r2, #0
 8015aba:	6939      	ldr	r1, [r7, #16]
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f7ff fe99 	bl	80157f4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	3304      	adds	r3, #4
 8015ac8:	6939      	ldr	r1, [r7, #16]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f7ff fed0 	bl	8015870 <tcp_output_control_segment>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	371c      	adds	r7, #28
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd90      	pop	{r4, r7, pc}
 8015ae0:	0801e1d0 	.word	0x0801e1d0
 8015ae4:	0801e9ac 	.word	0x0801e9ac
 8015ae8:	0801e224 	.word	0x0801e224

08015aec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015aec:	b590      	push	{r4, r7, lr}
 8015aee:	b08b      	sub	sp, #44	@ 0x2c
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015af4:	2300      	movs	r3, #0
 8015af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d106      	bne.n	8015b0e <tcp_zero_window_probe+0x22>
 8015b00:	4b4c      	ldr	r3, [pc, #304]	@ (8015c34 <tcp_zero_window_probe+0x148>)
 8015b02:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015b06:	494c      	ldr	r1, [pc, #304]	@ (8015c38 <tcp_zero_window_probe+0x14c>)
 8015b08:	484c      	ldr	r0, [pc, #304]	@ (8015c3c <tcp_zero_window_probe+0x150>)
 8015b0a:	f003 feeb 	bl	80198e4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015b14:	6a3b      	ldr	r3, [r7, #32]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d101      	bne.n	8015b1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	e086      	b.n	8015c2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b24:	2bff      	cmp	r3, #255	@ 0xff
 8015b26:	d007      	beq.n	8015b38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015b2e:	3301      	adds	r3, #1
 8015b30:	b2da      	uxtb	r2, r3
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015b38:	6a3b      	ldr	r3, [r7, #32]
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	899b      	ldrh	r3, [r3, #12]
 8015b3e:	b29b      	uxth	r3, r3
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7f8 f9d9 	bl	800def8 <lwip_htons>
 8015b46:	4603      	mov	r3, r0
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	f003 0301 	and.w	r3, r3, #1
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d005      	beq.n	8015b5e <tcp_zero_window_probe+0x72>
 8015b52:	6a3b      	ldr	r3, [r7, #32]
 8015b54:	891b      	ldrh	r3, [r3, #8]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d101      	bne.n	8015b5e <tcp_zero_window_probe+0x72>
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	e000      	b.n	8015b60 <tcp_zero_window_probe+0x74>
 8015b5e:	2300      	movs	r3, #0
 8015b60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015b62:	7ffb      	ldrb	r3, [r7, #31]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	bf0c      	ite	eq
 8015b68:	2301      	moveq	r3, #1
 8015b6a:	2300      	movne	r3, #0
 8015b6c:	b2db      	uxtb	r3, r3
 8015b6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b74:	b299      	uxth	r1, r3
 8015b76:	6a3b      	ldr	r3, [r7, #32]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	8bba      	ldrh	r2, [r7, #28]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f7ff fdfa 	bl	8015778 <tcp_output_alloc_header>
 8015b84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015b86:	69bb      	ldr	r3, [r7, #24]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d102      	bne.n	8015b92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015b90:	e04c      	b.n	8015c2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015b92:	69bb      	ldr	r3, [r7, #24]
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015b98:	7ffb      	ldrb	r3, [r7, #31]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d011      	beq.n	8015bc2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	899b      	ldrh	r3, [r3, #12]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	b21b      	sxth	r3, r3
 8015ba6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015baa:	b21c      	sxth	r4, r3
 8015bac:	2011      	movs	r0, #17
 8015bae:	f7f8 f9a3 	bl	800def8 <lwip_htons>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	b21b      	sxth	r3, r3
 8015bb6:	4323      	orrs	r3, r4
 8015bb8:	b21b      	sxth	r3, r3
 8015bba:	b29a      	uxth	r2, r3
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	819a      	strh	r2, [r3, #12]
 8015bc0:	e010      	b.n	8015be4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015bc2:	69bb      	ldr	r3, [r7, #24]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	3314      	adds	r3, #20
 8015bc8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015bca:	6a3b      	ldr	r3, [r7, #32]
 8015bcc:	6858      	ldr	r0, [r3, #4]
 8015bce:	6a3b      	ldr	r3, [r7, #32]
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	891a      	ldrh	r2, [r3, #8]
 8015bd4:	6a3b      	ldr	r3, [r7, #32]
 8015bd6:	891b      	ldrh	r3, [r3, #8]
 8015bd8:	1ad3      	subs	r3, r2, r3
 8015bda:	b29b      	uxth	r3, r3
 8015bdc:	2201      	movs	r2, #1
 8015bde:	6939      	ldr	r1, [r7, #16]
 8015be0:	f7f9 ff2c 	bl	800fa3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015be4:	6a3b      	ldr	r3, [r7, #32]
 8015be6:	68db      	ldr	r3, [r3, #12]
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7f8 f999 	bl	800df22 <lwip_htonl>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	da02      	bge.n	8015c08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	69b9      	ldr	r1, [r7, #24]
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ff fdef 	bl	80157f4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c16:	687a      	ldr	r2, [r7, #4]
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	3304      	adds	r3, #4
 8015c1c:	69b9      	ldr	r1, [r7, #24]
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f7ff fe26 	bl	8015870 <tcp_output_control_segment>
 8015c24:	4603      	mov	r3, r0
 8015c26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015c28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	372c      	adds	r7, #44	@ 0x2c
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd90      	pop	{r4, r7, pc}
 8015c34:	0801e1d0 	.word	0x0801e1d0
 8015c38:	0801e9c8 	.word	0x0801e9c8
 8015c3c:	0801e224 	.word	0x0801e224

08015c40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015c48:	f7f9 ffe6 	bl	800fc18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8015c78 <tcpip_tcp_timer+0x38>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d103      	bne.n	8015c5c <tcpip_tcp_timer+0x1c>
 8015c54:	4b09      	ldr	r3, [pc, #36]	@ (8015c7c <tcpip_tcp_timer+0x3c>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d005      	beq.n	8015c68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	4908      	ldr	r1, [pc, #32]	@ (8015c80 <tcpip_tcp_timer+0x40>)
 8015c60:	20fa      	movs	r0, #250	@ 0xfa
 8015c62:	f000 f8f3 	bl	8015e4c <sys_timeout>
 8015c66:	e003      	b.n	8015c70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015c68:	4b06      	ldr	r3, [pc, #24]	@ (8015c84 <tcpip_tcp_timer+0x44>)
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	601a      	str	r2, [r3, #0]
  }
}
 8015c6e:	bf00      	nop
 8015c70:	bf00      	nop
 8015c72:	3708      	adds	r7, #8
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	20011d24 	.word	0x20011d24
 8015c7c:	20011d28 	.word	0x20011d28
 8015c80:	08015c41 	.word	0x08015c41
 8015c84:	20011d70 	.word	0x20011d70

08015c88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8015cb8 <tcp_timer_needed+0x30>)
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d10f      	bne.n	8015cb4 <tcp_timer_needed+0x2c>
 8015c94:	4b09      	ldr	r3, [pc, #36]	@ (8015cbc <tcp_timer_needed+0x34>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d103      	bne.n	8015ca4 <tcp_timer_needed+0x1c>
 8015c9c:	4b08      	ldr	r3, [pc, #32]	@ (8015cc0 <tcp_timer_needed+0x38>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d007      	beq.n	8015cb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015ca4:	4b04      	ldr	r3, [pc, #16]	@ (8015cb8 <tcp_timer_needed+0x30>)
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015caa:	2200      	movs	r2, #0
 8015cac:	4905      	ldr	r1, [pc, #20]	@ (8015cc4 <tcp_timer_needed+0x3c>)
 8015cae:	20fa      	movs	r0, #250	@ 0xfa
 8015cb0:	f000 f8cc 	bl	8015e4c <sys_timeout>
  }
}
 8015cb4:	bf00      	nop
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	20011d70 	.word	0x20011d70
 8015cbc:	20011d24 	.word	0x20011d24
 8015cc0:	20011d28 	.word	0x20011d28
 8015cc4:	08015c41 	.word	0x08015c41

08015cc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b086      	sub	sp, #24
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	60f8      	str	r0, [r7, #12]
 8015cd0:	60b9      	str	r1, [r7, #8]
 8015cd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015cd4:	200a      	movs	r0, #10
 8015cd6:	f7f8 fdc5 	bl	800e864 <memp_malloc>
 8015cda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d109      	bne.n	8015cf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d151      	bne.n	8015d8c <sys_timeout_abs+0xc4>
 8015ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8015d94 <sys_timeout_abs+0xcc>)
 8015cea:	22be      	movs	r2, #190	@ 0xbe
 8015cec:	492a      	ldr	r1, [pc, #168]	@ (8015d98 <sys_timeout_abs+0xd0>)
 8015cee:	482b      	ldr	r0, [pc, #172]	@ (8015d9c <sys_timeout_abs+0xd4>)
 8015cf0:	f003 fdf8 	bl	80198e4 <iprintf>
    return;
 8015cf4:	e04a      	b.n	8015d8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	68ba      	ldr	r2, [r7, #8]
 8015d00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	687a      	ldr	r2, [r7, #4]
 8015d06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	68fa      	ldr	r2, [r7, #12]
 8015d0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015d0e:	4b24      	ldr	r3, [pc, #144]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d103      	bne.n	8015d1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015d16:	4a22      	ldr	r2, [pc, #136]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	6013      	str	r3, [r2, #0]
    return;
 8015d1c:	e037      	b.n	8015d8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	685a      	ldr	r2, [r3, #4]
 8015d22:	4b1f      	ldr	r3, [pc, #124]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	0fdb      	lsrs	r3, r3, #31
 8015d2c:	f003 0301 	and.w	r3, r3, #1
 8015d30:	b2db      	uxtb	r3, r3
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d007      	beq.n	8015d46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015d36:	4b1a      	ldr	r3, [pc, #104]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015d3e:	4a18      	ldr	r2, [pc, #96]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	6013      	str	r3, [r2, #0]
 8015d44:	e023      	b.n	8015d8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015d46:	4b16      	ldr	r3, [pc, #88]	@ (8015da0 <sys_timeout_abs+0xd8>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	617b      	str	r3, [r7, #20]
 8015d4c:	e01a      	b.n	8015d84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00b      	beq.n	8015d6e <sys_timeout_abs+0xa6>
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	685a      	ldr	r2, [r3, #4]
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	685b      	ldr	r3, [r3, #4]
 8015d60:	1ad3      	subs	r3, r2, r3
 8015d62:	0fdb      	lsrs	r3, r3, #31
 8015d64:	f003 0301 	and.w	r3, r3, #1
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d007      	beq.n	8015d7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	693b      	ldr	r3, [r7, #16]
 8015d74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	693a      	ldr	r2, [r7, #16]
 8015d7a:	601a      	str	r2, [r3, #0]
        break;
 8015d7c:	e007      	b.n	8015d8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	617b      	str	r3, [r7, #20]
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d1e1      	bne.n	8015d4e <sys_timeout_abs+0x86>
 8015d8a:	e000      	b.n	8015d8e <sys_timeout_abs+0xc6>
    return;
 8015d8c:	bf00      	nop
      }
    }
  }
}
 8015d8e:	3718      	adds	r7, #24
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	0801e9ec 	.word	0x0801e9ec
 8015d98:	0801ea20 	.word	0x0801ea20
 8015d9c:	0801ea60 	.word	0x0801ea60
 8015da0:	20011d68 	.word	0x20011d68

08015da4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b086      	sub	sp, #24
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	4798      	blx	r3

  now = sys_now();
 8015db6:	f7f1 f95b 	bl	8007070 <sys_now>
 8015dba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8015e00 <lwip_cyclic_timer+0x5c>)
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4413      	add	r3, r2
 8015dc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	693b      	ldr	r3, [r7, #16]
 8015dcc:	1ad3      	subs	r3, r2, r3
 8015dce:	0fdb      	lsrs	r3, r3, #31
 8015dd0:	f003 0301 	and.w	r3, r3, #1
 8015dd4:	b2db      	uxtb	r3, r3
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d009      	beq.n	8015dee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	681a      	ldr	r2, [r3, #0]
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	4413      	add	r3, r2
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	4907      	ldr	r1, [pc, #28]	@ (8015e04 <lwip_cyclic_timer+0x60>)
 8015de6:	4618      	mov	r0, r3
 8015de8:	f7ff ff6e 	bl	8015cc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015dec:	e004      	b.n	8015df8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	4904      	ldr	r1, [pc, #16]	@ (8015e04 <lwip_cyclic_timer+0x60>)
 8015df2:	68f8      	ldr	r0, [r7, #12]
 8015df4:	f7ff ff68 	bl	8015cc8 <sys_timeout_abs>
}
 8015df8:	bf00      	nop
 8015dfa:	3718      	adds	r7, #24
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	20011d6c 	.word	0x20011d6c
 8015e04:	08015da5 	.word	0x08015da5

08015e08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e0e:	2301      	movs	r3, #1
 8015e10:	607b      	str	r3, [r7, #4]
 8015e12:	e00e      	b.n	8015e32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015e14:	4a0b      	ldr	r2, [pc, #44]	@ (8015e44 <sys_timeouts_init+0x3c>)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	00db      	lsls	r3, r3, #3
 8015e20:	4a08      	ldr	r2, [pc, #32]	@ (8015e44 <sys_timeouts_init+0x3c>)
 8015e22:	4413      	add	r3, r2
 8015e24:	461a      	mov	r2, r3
 8015e26:	4908      	ldr	r1, [pc, #32]	@ (8015e48 <sys_timeouts_init+0x40>)
 8015e28:	f000 f810 	bl	8015e4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	3301      	adds	r3, #1
 8015e30:	607b      	str	r3, [r7, #4]
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2b02      	cmp	r3, #2
 8015e36:	d9ed      	bls.n	8015e14 <sys_timeouts_init+0xc>
  }
}
 8015e38:	bf00      	nop
 8015e3a:	bf00      	nop
 8015e3c:	3708      	adds	r7, #8
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}
 8015e42:	bf00      	nop
 8015e44:	0801f610 	.word	0x0801f610
 8015e48:	08015da5 	.word	0x08015da5

08015e4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b086      	sub	sp, #24
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015e5e:	d306      	bcc.n	8015e6e <sys_timeout+0x22>
 8015e60:	4b0a      	ldr	r3, [pc, #40]	@ (8015e8c <sys_timeout+0x40>)
 8015e62:	f240 1229 	movw	r2, #297	@ 0x129
 8015e66:	490a      	ldr	r1, [pc, #40]	@ (8015e90 <sys_timeout+0x44>)
 8015e68:	480a      	ldr	r0, [pc, #40]	@ (8015e94 <sys_timeout+0x48>)
 8015e6a:	f003 fd3b 	bl	80198e4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015e6e:	f7f1 f8ff 	bl	8007070 <sys_now>
 8015e72:	4602      	mov	r2, r0
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	4413      	add	r3, r2
 8015e78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015e7a:	687a      	ldr	r2, [r7, #4]
 8015e7c:	68b9      	ldr	r1, [r7, #8]
 8015e7e:	6978      	ldr	r0, [r7, #20]
 8015e80:	f7ff ff22 	bl	8015cc8 <sys_timeout_abs>
#endif
}
 8015e84:	bf00      	nop
 8015e86:	3718      	adds	r7, #24
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0801e9ec 	.word	0x0801e9ec
 8015e90:	0801ea88 	.word	0x0801ea88
 8015e94:	0801ea60 	.word	0x0801ea60

08015e98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b084      	sub	sp, #16
 8015e9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015e9e:	f7f1 f8e7 	bl	8007070 <sys_now>
 8015ea2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015ea4:	4b17      	ldr	r3, [pc, #92]	@ (8015f04 <sys_check_timeouts+0x6c>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d022      	beq.n	8015ef6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	68fa      	ldr	r2, [r7, #12]
 8015eb6:	1ad3      	subs	r3, r2, r3
 8015eb8:	0fdb      	lsrs	r3, r3, #31
 8015eba:	f003 0301 	and.w	r3, r3, #1
 8015ebe:	b2db      	uxtb	r3, r3
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d11a      	bne.n	8015efa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8015f04 <sys_check_timeouts+0x6c>)
 8015eca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	689b      	ldr	r3, [r3, #8]
 8015ed0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	685b      	ldr	r3, [r3, #4]
 8015edc:	4a0a      	ldr	r2, [pc, #40]	@ (8015f08 <sys_check_timeouts+0x70>)
 8015ede:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015ee0:	68b9      	ldr	r1, [r7, #8]
 8015ee2:	200a      	movs	r0, #10
 8015ee4:	f7f8 fd10 	bl	800e908 <memp_free>
    if (handler != NULL) {
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d0da      	beq.n	8015ea4 <sys_check_timeouts+0xc>
      handler(arg);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	6838      	ldr	r0, [r7, #0]
 8015ef2:	4798      	blx	r3
  do {
 8015ef4:	e7d6      	b.n	8015ea4 <sys_check_timeouts+0xc>
      return;
 8015ef6:	bf00      	nop
 8015ef8:	e000      	b.n	8015efc <sys_check_timeouts+0x64>
      return;
 8015efa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	20011d68 	.word	0x20011d68
 8015f08:	20011d6c 	.word	0x20011d6c

08015f0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015f12:	4b16      	ldr	r3, [pc, #88]	@ (8015f6c <sys_timeouts_sleeptime+0x60>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d102      	bne.n	8015f20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f1e:	e020      	b.n	8015f62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015f20:	f7f1 f8a6 	bl	8007070 <sys_now>
 8015f24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015f26:	4b11      	ldr	r3, [pc, #68]	@ (8015f6c <sys_timeouts_sleeptime+0x60>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	685a      	ldr	r2, [r3, #4]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	0fdb      	lsrs	r3, r3, #31
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	b2db      	uxtb	r3, r3
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d001      	beq.n	8015f40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	e010      	b.n	8015f62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015f40:	4b0a      	ldr	r3, [pc, #40]	@ (8015f6c <sys_timeouts_sleeptime+0x60>)
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	685a      	ldr	r2, [r3, #4]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	1ad3      	subs	r3, r2, r3
 8015f4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	da06      	bge.n	8015f60 <sys_timeouts_sleeptime+0x54>
 8015f52:	4b07      	ldr	r3, [pc, #28]	@ (8015f70 <sys_timeouts_sleeptime+0x64>)
 8015f54:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015f58:	4906      	ldr	r1, [pc, #24]	@ (8015f74 <sys_timeouts_sleeptime+0x68>)
 8015f5a:	4807      	ldr	r0, [pc, #28]	@ (8015f78 <sys_timeouts_sleeptime+0x6c>)
 8015f5c:	f003 fcc2 	bl	80198e4 <iprintf>
    return ret;
 8015f60:	683b      	ldr	r3, [r7, #0]
  }
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	20011d68 	.word	0x20011d68
 8015f70:	0801e9ec 	.word	0x0801e9ec
 8015f74:	0801eac0 	.word	0x0801eac0
 8015f78:	0801ea60 	.word	0x0801ea60

08015f7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015f80:	f002 ff78 	bl	8018e74 <rand>
 8015f84:	4603      	mov	r3, r0
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015f8c:	b29b      	uxth	r3, r3
 8015f8e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	4b01      	ldr	r3, [pc, #4]	@ (8015f9c <udp_init+0x20>)
 8015f96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015f98:	bf00      	nop
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	20000018 	.word	0x20000018

08015fa0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b083      	sub	sp, #12
 8015fa4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015faa:	4b17      	ldr	r3, [pc, #92]	@ (8016008 <udp_new_port+0x68>)
 8015fac:	881b      	ldrh	r3, [r3, #0]
 8015fae:	1c5a      	adds	r2, r3, #1
 8015fb0:	b291      	uxth	r1, r2
 8015fb2:	4a15      	ldr	r2, [pc, #84]	@ (8016008 <udp_new_port+0x68>)
 8015fb4:	8011      	strh	r1, [r2, #0]
 8015fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015fba:	4293      	cmp	r3, r2
 8015fbc:	d103      	bne.n	8015fc6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015fbe:	4b12      	ldr	r3, [pc, #72]	@ (8016008 <udp_new_port+0x68>)
 8015fc0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015fc4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fc6:	4b11      	ldr	r3, [pc, #68]	@ (801600c <udp_new_port+0x6c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	603b      	str	r3, [r7, #0]
 8015fcc:	e011      	b.n	8015ff2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	8a5a      	ldrh	r2, [r3, #18]
 8015fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016008 <udp_new_port+0x68>)
 8015fd4:	881b      	ldrh	r3, [r3, #0]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	d108      	bne.n	8015fec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015fda:	88fb      	ldrh	r3, [r7, #6]
 8015fdc:	3301      	adds	r3, #1
 8015fde:	80fb      	strh	r3, [r7, #6]
 8015fe0:	88fb      	ldrh	r3, [r7, #6]
 8015fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015fe6:	d3e0      	bcc.n	8015faa <udp_new_port+0xa>
        return 0;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	e007      	b.n	8015ffc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fec:	683b      	ldr	r3, [r7, #0]
 8015fee:	68db      	ldr	r3, [r3, #12]
 8015ff0:	603b      	str	r3, [r7, #0]
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d1ea      	bne.n	8015fce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015ff8:	4b03      	ldr	r3, [pc, #12]	@ (8016008 <udp_new_port+0x68>)
 8015ffa:	881b      	ldrh	r3, [r3, #0]
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	370c      	adds	r7, #12
 8016000:	46bd      	mov	sp, r7
 8016002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016006:	4770      	bx	lr
 8016008:	20000018 	.word	0x20000018
 801600c:	20011d74 	.word	0x20011d74

08016010 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	60f8      	str	r0, [r7, #12]
 8016018:	60b9      	str	r1, [r7, #8]
 801601a:	4613      	mov	r3, r2
 801601c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d105      	bne.n	8016030 <udp_input_local_match+0x20>
 8016024:	4b27      	ldr	r3, [pc, #156]	@ (80160c4 <udp_input_local_match+0xb4>)
 8016026:	2287      	movs	r2, #135	@ 0x87
 8016028:	4927      	ldr	r1, [pc, #156]	@ (80160c8 <udp_input_local_match+0xb8>)
 801602a:	4828      	ldr	r0, [pc, #160]	@ (80160cc <udp_input_local_match+0xbc>)
 801602c:	f003 fc5a 	bl	80198e4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016030:	68bb      	ldr	r3, [r7, #8]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d105      	bne.n	8016042 <udp_input_local_match+0x32>
 8016036:	4b23      	ldr	r3, [pc, #140]	@ (80160c4 <udp_input_local_match+0xb4>)
 8016038:	2288      	movs	r2, #136	@ 0x88
 801603a:	4925      	ldr	r1, [pc, #148]	@ (80160d0 <udp_input_local_match+0xc0>)
 801603c:	4823      	ldr	r0, [pc, #140]	@ (80160cc <udp_input_local_match+0xbc>)
 801603e:	f003 fc51 	bl	80198e4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	7a1b      	ldrb	r3, [r3, #8]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d00b      	beq.n	8016062 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	7a1a      	ldrb	r2, [r3, #8]
 801604e:	4b21      	ldr	r3, [pc, #132]	@ (80160d4 <udp_input_local_match+0xc4>)
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016056:	3301      	adds	r3, #1
 8016058:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801605a:	429a      	cmp	r2, r3
 801605c:	d001      	beq.n	8016062 <udp_input_local_match+0x52>
    return 0;
 801605e:	2300      	movs	r3, #0
 8016060:	e02b      	b.n	80160ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016062:	79fb      	ldrb	r3, [r7, #7]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d018      	beq.n	801609a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d013      	beq.n	8016096 <udp_input_local_match+0x86>
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00f      	beq.n	8016096 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016076:	4b17      	ldr	r3, [pc, #92]	@ (80160d4 <udp_input_local_match+0xc4>)
 8016078:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801607e:	d00a      	beq.n	8016096 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	4b13      	ldr	r3, [pc, #76]	@ (80160d4 <udp_input_local_match+0xc4>)
 8016086:	695b      	ldr	r3, [r3, #20]
 8016088:	405a      	eors	r2, r3
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	3308      	adds	r3, #8
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016092:	2b00      	cmp	r3, #0
 8016094:	d110      	bne.n	80160b8 <udp_input_local_match+0xa8>
          return 1;
 8016096:	2301      	movs	r3, #1
 8016098:	e00f      	b.n	80160ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d009      	beq.n	80160b4 <udp_input_local_match+0xa4>
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d005      	beq.n	80160b4 <udp_input_local_match+0xa4>
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681a      	ldr	r2, [r3, #0]
 80160ac:	4b09      	ldr	r3, [pc, #36]	@ (80160d4 <udp_input_local_match+0xc4>)
 80160ae:	695b      	ldr	r3, [r3, #20]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d101      	bne.n	80160b8 <udp_input_local_match+0xa8>
        return 1;
 80160b4:	2301      	movs	r3, #1
 80160b6:	e000      	b.n	80160ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80160b8:	2300      	movs	r3, #0
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	0801ead4 	.word	0x0801ead4
 80160c8:	0801eb04 	.word	0x0801eb04
 80160cc:	0801eb28 	.word	0x0801eb28
 80160d0:	0801eb50 	.word	0x0801eb50
 80160d4:	2000c404 	.word	0x2000c404

080160d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80160d8:	b590      	push	{r4, r7, lr}
 80160da:	b08d      	sub	sp, #52	@ 0x34
 80160dc:	af02      	add	r7, sp, #8
 80160de:	6078      	str	r0, [r7, #4]
 80160e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d105      	bne.n	80160f8 <udp_input+0x20>
 80160ec:	4b7c      	ldr	r3, [pc, #496]	@ (80162e0 <udp_input+0x208>)
 80160ee:	22cf      	movs	r2, #207	@ 0xcf
 80160f0:	497c      	ldr	r1, [pc, #496]	@ (80162e4 <udp_input+0x20c>)
 80160f2:	487d      	ldr	r0, [pc, #500]	@ (80162e8 <udp_input+0x210>)
 80160f4:	f003 fbf6 	bl	80198e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d105      	bne.n	801610a <udp_input+0x32>
 80160fe:	4b78      	ldr	r3, [pc, #480]	@ (80162e0 <udp_input+0x208>)
 8016100:	22d0      	movs	r2, #208	@ 0xd0
 8016102:	497a      	ldr	r1, [pc, #488]	@ (80162ec <udp_input+0x214>)
 8016104:	4878      	ldr	r0, [pc, #480]	@ (80162e8 <udp_input+0x210>)
 8016106:	f003 fbed 	bl	80198e4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	895b      	ldrh	r3, [r3, #10]
 801610e:	2b07      	cmp	r3, #7
 8016110:	d803      	bhi.n	801611a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016112:	6878      	ldr	r0, [r7, #4]
 8016114:	f7f9 fa9c 	bl	800f650 <pbuf_free>
    goto end;
 8016118:	e0de      	b.n	80162d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016120:	4b73      	ldr	r3, [pc, #460]	@ (80162f0 <udp_input+0x218>)
 8016122:	695b      	ldr	r3, [r3, #20]
 8016124:	4a72      	ldr	r2, [pc, #456]	@ (80162f0 <udp_input+0x218>)
 8016126:	6812      	ldr	r2, [r2, #0]
 8016128:	4611      	mov	r1, r2
 801612a:	4618      	mov	r0, r3
 801612c:	f001 fd96 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8016130:	4603      	mov	r3, r0
 8016132:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	881b      	ldrh	r3, [r3, #0]
 8016138:	b29b      	uxth	r3, r3
 801613a:	4618      	mov	r0, r3
 801613c:	f7f7 fedc 	bl	800def8 <lwip_htons>
 8016140:	4603      	mov	r3, r0
 8016142:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	885b      	ldrh	r3, [r3, #2]
 8016148:	b29b      	uxth	r3, r3
 801614a:	4618      	mov	r0, r3
 801614c:	f7f7 fed4 	bl	800def8 <lwip_htons>
 8016150:	4603      	mov	r3, r0
 8016152:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016154:	2300      	movs	r3, #0
 8016156:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016158:	2300      	movs	r3, #0
 801615a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801615c:	2300      	movs	r3, #0
 801615e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016160:	4b64      	ldr	r3, [pc, #400]	@ (80162f4 <udp_input+0x21c>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	627b      	str	r3, [r7, #36]	@ 0x24
 8016166:	e054      	b.n	8016212 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801616a:	8a5b      	ldrh	r3, [r3, #18]
 801616c:	89fa      	ldrh	r2, [r7, #14]
 801616e:	429a      	cmp	r2, r3
 8016170:	d14a      	bne.n	8016208 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016172:	7cfb      	ldrb	r3, [r7, #19]
 8016174:	461a      	mov	r2, r3
 8016176:	6839      	ldr	r1, [r7, #0]
 8016178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801617a:	f7ff ff49 	bl	8016010 <udp_input_local_match>
 801617e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016180:	2b00      	cmp	r3, #0
 8016182:	d041      	beq.n	8016208 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016186:	7c1b      	ldrb	r3, [r3, #16]
 8016188:	f003 0304 	and.w	r3, r3, #4
 801618c:	2b00      	cmp	r3, #0
 801618e:	d11d      	bne.n	80161cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d102      	bne.n	801619c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016198:	61fb      	str	r3, [r7, #28]
 801619a:	e017      	b.n	80161cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801619c:	7cfb      	ldrb	r3, [r7, #19]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d014      	beq.n	80161cc <udp_input+0xf4>
 80161a2:	4b53      	ldr	r3, [pc, #332]	@ (80162f0 <udp_input+0x218>)
 80161a4:	695b      	ldr	r3, [r3, #20]
 80161a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161aa:	d10f      	bne.n	80161cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	3304      	adds	r3, #4
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d008      	beq.n	80161cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80161ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	3304      	adds	r3, #4
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d101      	bne.n	80161cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80161c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80161cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161ce:	8a9b      	ldrh	r3, [r3, #20]
 80161d0:	8a3a      	ldrh	r2, [r7, #16]
 80161d2:	429a      	cmp	r2, r3
 80161d4:	d118      	bne.n	8016208 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80161d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d005      	beq.n	80161ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80161de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161e0:	685a      	ldr	r2, [r3, #4]
 80161e2:	4b43      	ldr	r3, [pc, #268]	@ (80162f0 <udp_input+0x218>)
 80161e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d10e      	bne.n	8016208 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80161ea:	6a3b      	ldr	r3, [r7, #32]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d014      	beq.n	801621a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80161f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161f2:	68da      	ldr	r2, [r3, #12]
 80161f4:	6a3b      	ldr	r3, [r7, #32]
 80161f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80161f8:	4b3e      	ldr	r3, [pc, #248]	@ (80162f4 <udp_input+0x21c>)
 80161fa:	681a      	ldr	r2, [r3, #0]
 80161fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016200:	4a3c      	ldr	r2, [pc, #240]	@ (80162f4 <udp_input+0x21c>)
 8016202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016204:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016206:	e008      	b.n	801621a <udp_input+0x142>
      }
    }

    prev = pcb;
 8016208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620e:	68db      	ldr	r3, [r3, #12]
 8016210:	627b      	str	r3, [r7, #36]	@ 0x24
 8016212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016214:	2b00      	cmp	r3, #0
 8016216:	d1a7      	bne.n	8016168 <udp_input+0x90>
 8016218:	e000      	b.n	801621c <udp_input+0x144>
        break;
 801621a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621e:	2b00      	cmp	r3, #0
 8016220:	d101      	bne.n	8016226 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016228:	2b00      	cmp	r3, #0
 801622a:	d002      	beq.n	8016232 <udp_input+0x15a>
    for_us = 1;
 801622c:	2301      	movs	r3, #1
 801622e:	76fb      	strb	r3, [r7, #27]
 8016230:	e00a      	b.n	8016248 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	3304      	adds	r3, #4
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	4b2d      	ldr	r3, [pc, #180]	@ (80162f0 <udp_input+0x218>)
 801623a:	695b      	ldr	r3, [r3, #20]
 801623c:	429a      	cmp	r2, r3
 801623e:	bf0c      	ite	eq
 8016240:	2301      	moveq	r3, #1
 8016242:	2300      	movne	r3, #0
 8016244:	b2db      	uxtb	r3, r3
 8016246:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016248:	7efb      	ldrb	r3, [r7, #27]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d041      	beq.n	80162d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801624e:	2108      	movs	r1, #8
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f7f9 f977 	bl	800f544 <pbuf_remove_header>
 8016256:	4603      	mov	r3, r0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d00a      	beq.n	8016272 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801625c:	4b20      	ldr	r3, [pc, #128]	@ (80162e0 <udp_input+0x208>)
 801625e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8016262:	4925      	ldr	r1, [pc, #148]	@ (80162f8 <udp_input+0x220>)
 8016264:	4820      	ldr	r0, [pc, #128]	@ (80162e8 <udp_input+0x210>)
 8016266:	f003 fb3d 	bl	80198e4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f7f9 f9f0 	bl	800f650 <pbuf_free>
      goto end;
 8016270:	e032      	b.n	80162d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016274:	2b00      	cmp	r3, #0
 8016276:	d012      	beq.n	801629e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801627a:	699b      	ldr	r3, [r3, #24]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d00a      	beq.n	8016296 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016282:	699c      	ldr	r4, [r3, #24]
 8016284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016286:	69d8      	ldr	r0, [r3, #28]
 8016288:	8a3b      	ldrh	r3, [r7, #16]
 801628a:	9300      	str	r3, [sp, #0]
 801628c:	4b1b      	ldr	r3, [pc, #108]	@ (80162fc <udp_input+0x224>)
 801628e:	687a      	ldr	r2, [r7, #4]
 8016290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016292:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016294:	e021      	b.n	80162da <udp_input+0x202>
        pbuf_free(p);
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f7f9 f9da 	bl	800f650 <pbuf_free>
        goto end;
 801629c:	e01c      	b.n	80162d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801629e:	7cfb      	ldrb	r3, [r7, #19]
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d112      	bne.n	80162ca <udp_input+0x1f2>
 80162a4:	4b12      	ldr	r3, [pc, #72]	@ (80162f0 <udp_input+0x218>)
 80162a6:	695b      	ldr	r3, [r3, #20]
 80162a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80162ac:	2be0      	cmp	r3, #224	@ 0xe0
 80162ae:	d00c      	beq.n	80162ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80162b0:	4b0f      	ldr	r3, [pc, #60]	@ (80162f0 <udp_input+0x218>)
 80162b2:	899b      	ldrh	r3, [r3, #12]
 80162b4:	3308      	adds	r3, #8
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	b21b      	sxth	r3, r3
 80162ba:	4619      	mov	r1, r3
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f7f9 f9b4 	bl	800f62a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80162c2:	2103      	movs	r1, #3
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f001 f9a9 	bl	801761c <icmp_dest_unreach>
      pbuf_free(p);
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	f7f9 f9c0 	bl	800f650 <pbuf_free>
  return;
 80162d0:	e003      	b.n	80162da <udp_input+0x202>
    pbuf_free(p);
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f7f9 f9bc 	bl	800f650 <pbuf_free>
  return;
 80162d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80162da:	372c      	adds	r7, #44	@ 0x2c
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd90      	pop	{r4, r7, pc}
 80162e0:	0801ead4 	.word	0x0801ead4
 80162e4:	0801eb78 	.word	0x0801eb78
 80162e8:	0801eb28 	.word	0x0801eb28
 80162ec:	0801eb90 	.word	0x0801eb90
 80162f0:	2000c404 	.word	0x2000c404
 80162f4:	20011d74 	.word	0x20011d74
 80162f8:	0801ebac 	.word	0x0801ebac
 80162fc:	2000c414 	.word	0x2000c414

08016300 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b086      	sub	sp, #24
 8016304:	af00      	add	r7, sp, #0
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	4613      	mov	r3, r2
 801630c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d101      	bne.n	8016318 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016314:	4b39      	ldr	r3, [pc, #228]	@ (80163fc <udp_bind+0xfc>)
 8016316:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d109      	bne.n	8016332 <udp_bind+0x32>
 801631e:	4b38      	ldr	r3, [pc, #224]	@ (8016400 <udp_bind+0x100>)
 8016320:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016324:	4937      	ldr	r1, [pc, #220]	@ (8016404 <udp_bind+0x104>)
 8016326:	4838      	ldr	r0, [pc, #224]	@ (8016408 <udp_bind+0x108>)
 8016328:	f003 fadc 	bl	80198e4 <iprintf>
 801632c:	f06f 030f 	mvn.w	r3, #15
 8016330:	e060      	b.n	80163f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016336:	4b35      	ldr	r3, [pc, #212]	@ (801640c <udp_bind+0x10c>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	617b      	str	r3, [r7, #20]
 801633c:	e009      	b.n	8016352 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	429a      	cmp	r2, r3
 8016344:	d102      	bne.n	801634c <udp_bind+0x4c>
      rebind = 1;
 8016346:	2301      	movs	r3, #1
 8016348:	74fb      	strb	r3, [r7, #19]
      break;
 801634a:	e005      	b.n	8016358 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	68db      	ldr	r3, [r3, #12]
 8016350:	617b      	str	r3, [r7, #20]
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d1f2      	bne.n	801633e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016358:	88fb      	ldrh	r3, [r7, #6]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d109      	bne.n	8016372 <udp_bind+0x72>
    port = udp_new_port();
 801635e:	f7ff fe1f 	bl	8015fa0 <udp_new_port>
 8016362:	4603      	mov	r3, r0
 8016364:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016366:	88fb      	ldrh	r3, [r7, #6]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d12c      	bne.n	80163c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801636c:	f06f 0307 	mvn.w	r3, #7
 8016370:	e040      	b.n	80163f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016372:	4b26      	ldr	r3, [pc, #152]	@ (801640c <udp_bind+0x10c>)
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	617b      	str	r3, [r7, #20]
 8016378:	e022      	b.n	80163c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801637a:	68fa      	ldr	r2, [r7, #12]
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	429a      	cmp	r2, r3
 8016380:	d01b      	beq.n	80163ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016382:	697b      	ldr	r3, [r7, #20]
 8016384:	8a5b      	ldrh	r3, [r3, #18]
 8016386:	88fa      	ldrh	r2, [r7, #6]
 8016388:	429a      	cmp	r2, r3
 801638a:	d116      	bne.n	80163ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	681a      	ldr	r2, [r3, #0]
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016394:	429a      	cmp	r2, r3
 8016396:	d00d      	beq.n	80163b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00a      	beq.n	80163b4 <udp_bind+0xb4>
 801639e:	68bb      	ldr	r3, [r7, #8]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d006      	beq.n	80163b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d003      	beq.n	80163b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d102      	bne.n	80163ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163b4:	f06f 0307 	mvn.w	r3, #7
 80163b8:	e01c      	b.n	80163f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	617b      	str	r3, [r7, #20]
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d1d9      	bne.n	801637a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80163c6:	68bb      	ldr	r3, [r7, #8]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d002      	beq.n	80163d2 <udp_bind+0xd2>
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	e000      	b.n	80163d4 <udp_bind+0xd4>
 80163d2:	2300      	movs	r3, #0
 80163d4:	68fa      	ldr	r2, [r7, #12]
 80163d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	88fa      	ldrh	r2, [r7, #6]
 80163dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80163de:	7cfb      	ldrb	r3, [r7, #19]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d106      	bne.n	80163f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80163e4:	4b09      	ldr	r3, [pc, #36]	@ (801640c <udp_bind+0x10c>)
 80163e6:	681a      	ldr	r2, [r3, #0]
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163ec:	4a07      	ldr	r2, [pc, #28]	@ (801640c <udp_bind+0x10c>)
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80163f2:	2300      	movs	r3, #0
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	3718      	adds	r7, #24
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	0801f628 	.word	0x0801f628
 8016400:	0801ead4 	.word	0x0801ead4
 8016404:	0801ed9c 	.word	0x0801ed9c
 8016408:	0801eb28 	.word	0x0801eb28
 801640c:	20011d74 	.word	0x20011d74

08016410 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	60f8      	str	r0, [r7, #12]
 8016418:	60b9      	str	r1, [r7, #8]
 801641a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d107      	bne.n	8016432 <udp_recv+0x22>
 8016422:	4b08      	ldr	r3, [pc, #32]	@ (8016444 <udp_recv+0x34>)
 8016424:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016428:	4907      	ldr	r1, [pc, #28]	@ (8016448 <udp_recv+0x38>)
 801642a:	4808      	ldr	r0, [pc, #32]	@ (801644c <udp_recv+0x3c>)
 801642c:	f003 fa5a 	bl	80198e4 <iprintf>
 8016430:	e005      	b.n	801643e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	68ba      	ldr	r2, [r7, #8]
 8016436:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	687a      	ldr	r2, [r7, #4]
 801643c:	61da      	str	r2, [r3, #28]
}
 801643e:	3710      	adds	r7, #16
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	0801ead4 	.word	0x0801ead4
 8016448:	0801ee08 	.word	0x0801ee08
 801644c:	0801eb28 	.word	0x0801eb28

08016450 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d107      	bne.n	801646e <udp_remove+0x1e>
 801645e:	4b19      	ldr	r3, [pc, #100]	@ (80164c4 <udp_remove+0x74>)
 8016460:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8016464:	4918      	ldr	r1, [pc, #96]	@ (80164c8 <udp_remove+0x78>)
 8016466:	4819      	ldr	r0, [pc, #100]	@ (80164cc <udp_remove+0x7c>)
 8016468:	f003 fa3c 	bl	80198e4 <iprintf>
 801646c:	e026      	b.n	80164bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801646e:	4b18      	ldr	r3, [pc, #96]	@ (80164d0 <udp_remove+0x80>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	429a      	cmp	r2, r3
 8016476:	d105      	bne.n	8016484 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016478:	4b15      	ldr	r3, [pc, #84]	@ (80164d0 <udp_remove+0x80>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	4a14      	ldr	r2, [pc, #80]	@ (80164d0 <udp_remove+0x80>)
 8016480:	6013      	str	r3, [r2, #0]
 8016482:	e017      	b.n	80164b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016484:	4b12      	ldr	r3, [pc, #72]	@ (80164d0 <udp_remove+0x80>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	60fb      	str	r3, [r7, #12]
 801648a:	e010      	b.n	80164ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	68db      	ldr	r3, [r3, #12]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d009      	beq.n	80164a8 <udp_remove+0x58>
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	429a      	cmp	r2, r3
 801649c:	d104      	bne.n	80164a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	68da      	ldr	r2, [r3, #12]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	60da      	str	r2, [r3, #12]
        break;
 80164a6:	e005      	b.n	80164b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	60fb      	str	r3, [r7, #12]
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1eb      	bne.n	801648c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80164b4:	6879      	ldr	r1, [r7, #4]
 80164b6:	2000      	movs	r0, #0
 80164b8:	f7f8 fa26 	bl	800e908 <memp_free>
}
 80164bc:	3710      	adds	r7, #16
 80164be:	46bd      	mov	sp, r7
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	bf00      	nop
 80164c4:	0801ead4 	.word	0x0801ead4
 80164c8:	0801ee20 	.word	0x0801ee20
 80164cc:	0801eb28 	.word	0x0801eb28
 80164d0:	20011d74 	.word	0x20011d74

080164d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80164da:	2000      	movs	r0, #0
 80164dc:	f7f8 f9c2 	bl	800e864 <memp_malloc>
 80164e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d007      	beq.n	80164f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80164e8:	2220      	movs	r2, #32
 80164ea:	2100      	movs	r1, #0
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f003 fbbf 	bl	8019c70 <memset>
    pcb->ttl = UDP_TTL;
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	22ff      	movs	r2, #255	@ 0xff
 80164f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80164f8:	687b      	ldr	r3, [r7, #4]
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3708      	adds	r7, #8
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b084      	sub	sp, #16
 8016506:	af00      	add	r7, sp, #0
 8016508:	4603      	mov	r3, r0
 801650a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801650c:	f7ff ffe2 	bl	80164d4 <udp_new>
 8016510:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016512:	68fb      	ldr	r3, [r7, #12]
}
 8016514:	4618      	mov	r0, r3
 8016516:	3710      	adds	r7, #16
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}

0801651c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801651c:	b480      	push	{r7}
 801651e:	b085      	sub	sp, #20
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d01e      	beq.n	801656a <udp_netif_ip_addr_changed+0x4e>
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d01a      	beq.n	801656a <udp_netif_ip_addr_changed+0x4e>
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d017      	beq.n	801656a <udp_netif_ip_addr_changed+0x4e>
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d013      	beq.n	801656a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016542:	4b0d      	ldr	r3, [pc, #52]	@ (8016578 <udp_netif_ip_addr_changed+0x5c>)
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	60fb      	str	r3, [r7, #12]
 8016548:	e00c      	b.n	8016564 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681a      	ldr	r2, [r3, #0]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	429a      	cmp	r2, r3
 8016554:	d103      	bne.n	801655e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016556:	683b      	ldr	r3, [r7, #0]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	68db      	ldr	r3, [r3, #12]
 8016562:	60fb      	str	r3, [r7, #12]
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d1ef      	bne.n	801654a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801656a:	bf00      	nop
 801656c:	3714      	adds	r7, #20
 801656e:	46bd      	mov	sp, r7
 8016570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop
 8016578:	20011d74 	.word	0x20011d74

0801657c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b082      	sub	sp, #8
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016584:	4915      	ldr	r1, [pc, #84]	@ (80165dc <etharp_free_entry+0x60>)
 8016586:	687a      	ldr	r2, [r7, #4]
 8016588:	4613      	mov	r3, r2
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	4413      	add	r3, r2
 801658e:	00db      	lsls	r3, r3, #3
 8016590:	440b      	add	r3, r1
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d013      	beq.n	80165c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016598:	4910      	ldr	r1, [pc, #64]	@ (80165dc <etharp_free_entry+0x60>)
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	4613      	mov	r3, r2
 801659e:	005b      	lsls	r3, r3, #1
 80165a0:	4413      	add	r3, r2
 80165a2:	00db      	lsls	r3, r3, #3
 80165a4:	440b      	add	r3, r1
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7f9 f851 	bl	800f650 <pbuf_free>
    arp_table[i].q = NULL;
 80165ae:	490b      	ldr	r1, [pc, #44]	@ (80165dc <etharp_free_entry+0x60>)
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	4613      	mov	r3, r2
 80165b4:	005b      	lsls	r3, r3, #1
 80165b6:	4413      	add	r3, r2
 80165b8:	00db      	lsls	r3, r3, #3
 80165ba:	440b      	add	r3, r1
 80165bc:	2200      	movs	r2, #0
 80165be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80165c0:	4906      	ldr	r1, [pc, #24]	@ (80165dc <etharp_free_entry+0x60>)
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	4613      	mov	r3, r2
 80165c6:	005b      	lsls	r3, r3, #1
 80165c8:	4413      	add	r3, r2
 80165ca:	00db      	lsls	r3, r3, #3
 80165cc:	440b      	add	r3, r1
 80165ce:	3314      	adds	r3, #20
 80165d0:	2200      	movs	r2, #0
 80165d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80165d4:	bf00      	nop
 80165d6:	3708      	adds	r7, #8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}
 80165dc:	20011d78 	.word	0x20011d78

080165e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b082      	sub	sp, #8
 80165e4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165e6:	2300      	movs	r3, #0
 80165e8:	607b      	str	r3, [r7, #4]
 80165ea:	e096      	b.n	801671a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80165ec:	494f      	ldr	r1, [pc, #316]	@ (801672c <etharp_tmr+0x14c>)
 80165ee:	687a      	ldr	r2, [r7, #4]
 80165f0:	4613      	mov	r3, r2
 80165f2:	005b      	lsls	r3, r3, #1
 80165f4:	4413      	add	r3, r2
 80165f6:	00db      	lsls	r3, r3, #3
 80165f8:	440b      	add	r3, r1
 80165fa:	3314      	adds	r3, #20
 80165fc:	781b      	ldrb	r3, [r3, #0]
 80165fe:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016600:	78fb      	ldrb	r3, [r7, #3]
 8016602:	2b00      	cmp	r3, #0
 8016604:	f000 8086 	beq.w	8016714 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016608:	4948      	ldr	r1, [pc, #288]	@ (801672c <etharp_tmr+0x14c>)
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	440b      	add	r3, r1
 8016616:	3312      	adds	r3, #18
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	3301      	adds	r3, #1
 801661c:	b298      	uxth	r0, r3
 801661e:	4943      	ldr	r1, [pc, #268]	@ (801672c <etharp_tmr+0x14c>)
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	4613      	mov	r3, r2
 8016624:	005b      	lsls	r3, r3, #1
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	440b      	add	r3, r1
 801662c:	3312      	adds	r3, #18
 801662e:	4602      	mov	r2, r0
 8016630:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016632:	493e      	ldr	r1, [pc, #248]	@ (801672c <etharp_tmr+0x14c>)
 8016634:	687a      	ldr	r2, [r7, #4]
 8016636:	4613      	mov	r3, r2
 8016638:	005b      	lsls	r3, r3, #1
 801663a:	4413      	add	r3, r2
 801663c:	00db      	lsls	r3, r3, #3
 801663e:	440b      	add	r3, r1
 8016640:	3312      	adds	r3, #18
 8016642:	881b      	ldrh	r3, [r3, #0]
 8016644:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016648:	d215      	bcs.n	8016676 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801664a:	4938      	ldr	r1, [pc, #224]	@ (801672c <etharp_tmr+0x14c>)
 801664c:	687a      	ldr	r2, [r7, #4]
 801664e:	4613      	mov	r3, r2
 8016650:	005b      	lsls	r3, r3, #1
 8016652:	4413      	add	r3, r2
 8016654:	00db      	lsls	r3, r3, #3
 8016656:	440b      	add	r3, r1
 8016658:	3314      	adds	r3, #20
 801665a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801665c:	2b01      	cmp	r3, #1
 801665e:	d10e      	bne.n	801667e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016660:	4932      	ldr	r1, [pc, #200]	@ (801672c <etharp_tmr+0x14c>)
 8016662:	687a      	ldr	r2, [r7, #4]
 8016664:	4613      	mov	r3, r2
 8016666:	005b      	lsls	r3, r3, #1
 8016668:	4413      	add	r3, r2
 801666a:	00db      	lsls	r3, r3, #3
 801666c:	440b      	add	r3, r1
 801666e:	3312      	adds	r3, #18
 8016670:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016672:	2b04      	cmp	r3, #4
 8016674:	d903      	bls.n	801667e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f7ff ff80 	bl	801657c <etharp_free_entry>
 801667c:	e04a      	b.n	8016714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801667e:	492b      	ldr	r1, [pc, #172]	@ (801672c <etharp_tmr+0x14c>)
 8016680:	687a      	ldr	r2, [r7, #4]
 8016682:	4613      	mov	r3, r2
 8016684:	005b      	lsls	r3, r3, #1
 8016686:	4413      	add	r3, r2
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	440b      	add	r3, r1
 801668c:	3314      	adds	r3, #20
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	2b03      	cmp	r3, #3
 8016692:	d10a      	bne.n	80166aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016694:	4925      	ldr	r1, [pc, #148]	@ (801672c <etharp_tmr+0x14c>)
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	4613      	mov	r3, r2
 801669a:	005b      	lsls	r3, r3, #1
 801669c:	4413      	add	r3, r2
 801669e:	00db      	lsls	r3, r3, #3
 80166a0:	440b      	add	r3, r1
 80166a2:	3314      	adds	r3, #20
 80166a4:	2204      	movs	r2, #4
 80166a6:	701a      	strb	r2, [r3, #0]
 80166a8:	e034      	b.n	8016714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80166aa:	4920      	ldr	r1, [pc, #128]	@ (801672c <etharp_tmr+0x14c>)
 80166ac:	687a      	ldr	r2, [r7, #4]
 80166ae:	4613      	mov	r3, r2
 80166b0:	005b      	lsls	r3, r3, #1
 80166b2:	4413      	add	r3, r2
 80166b4:	00db      	lsls	r3, r3, #3
 80166b6:	440b      	add	r3, r1
 80166b8:	3314      	adds	r3, #20
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	2b04      	cmp	r3, #4
 80166be:	d10a      	bne.n	80166d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80166c0:	491a      	ldr	r1, [pc, #104]	@ (801672c <etharp_tmr+0x14c>)
 80166c2:	687a      	ldr	r2, [r7, #4]
 80166c4:	4613      	mov	r3, r2
 80166c6:	005b      	lsls	r3, r3, #1
 80166c8:	4413      	add	r3, r2
 80166ca:	00db      	lsls	r3, r3, #3
 80166cc:	440b      	add	r3, r1
 80166ce:	3314      	adds	r3, #20
 80166d0:	2202      	movs	r2, #2
 80166d2:	701a      	strb	r2, [r3, #0]
 80166d4:	e01e      	b.n	8016714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80166d6:	4915      	ldr	r1, [pc, #84]	@ (801672c <etharp_tmr+0x14c>)
 80166d8:	687a      	ldr	r2, [r7, #4]
 80166da:	4613      	mov	r3, r2
 80166dc:	005b      	lsls	r3, r3, #1
 80166de:	4413      	add	r3, r2
 80166e0:	00db      	lsls	r3, r3, #3
 80166e2:	440b      	add	r3, r1
 80166e4:	3314      	adds	r3, #20
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	2b01      	cmp	r3, #1
 80166ea:	d113      	bne.n	8016714 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80166ec:	490f      	ldr	r1, [pc, #60]	@ (801672c <etharp_tmr+0x14c>)
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	4613      	mov	r3, r2
 80166f2:	005b      	lsls	r3, r3, #1
 80166f4:	4413      	add	r3, r2
 80166f6:	00db      	lsls	r3, r3, #3
 80166f8:	440b      	add	r3, r1
 80166fa:	3308      	adds	r3, #8
 80166fc:	6818      	ldr	r0, [r3, #0]
 80166fe:	687a      	ldr	r2, [r7, #4]
 8016700:	4613      	mov	r3, r2
 8016702:	005b      	lsls	r3, r3, #1
 8016704:	4413      	add	r3, r2
 8016706:	00db      	lsls	r3, r3, #3
 8016708:	4a08      	ldr	r2, [pc, #32]	@ (801672c <etharp_tmr+0x14c>)
 801670a:	4413      	add	r3, r2
 801670c:	3304      	adds	r3, #4
 801670e:	4619      	mov	r1, r3
 8016710:	f000 fe6e 	bl	80173f0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	3301      	adds	r3, #1
 8016718:	607b      	str	r3, [r7, #4]
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2b09      	cmp	r3, #9
 801671e:	f77f af65 	ble.w	80165ec <etharp_tmr+0xc>
      }
    }
  }
}
 8016722:	bf00      	nop
 8016724:	bf00      	nop
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	20011d78 	.word	0x20011d78

08016730 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b08a      	sub	sp, #40	@ 0x28
 8016734:	af00      	add	r7, sp, #0
 8016736:	60f8      	str	r0, [r7, #12]
 8016738:	460b      	mov	r3, r1
 801673a:	607a      	str	r2, [r7, #4]
 801673c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801673e:	230a      	movs	r3, #10
 8016740:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016742:	230a      	movs	r3, #10
 8016744:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016746:	230a      	movs	r3, #10
 8016748:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801674a:	2300      	movs	r3, #0
 801674c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801674e:	230a      	movs	r3, #10
 8016750:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016752:	2300      	movs	r3, #0
 8016754:	83bb      	strh	r3, [r7, #28]
 8016756:	2300      	movs	r3, #0
 8016758:	837b      	strh	r3, [r7, #26]
 801675a:	2300      	movs	r3, #0
 801675c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801675e:	2300      	movs	r3, #0
 8016760:	843b      	strh	r3, [r7, #32]
 8016762:	e0ae      	b.n	80168c2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016764:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016768:	49a6      	ldr	r1, [pc, #664]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801676a:	4613      	mov	r3, r2
 801676c:	005b      	lsls	r3, r3, #1
 801676e:	4413      	add	r3, r2
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	440b      	add	r3, r1
 8016774:	3314      	adds	r3, #20
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801677a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801677e:	2b0a      	cmp	r3, #10
 8016780:	d105      	bne.n	801678e <etharp_find_entry+0x5e>
 8016782:	7dfb      	ldrb	r3, [r7, #23]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d102      	bne.n	801678e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016788:	8c3b      	ldrh	r3, [r7, #32]
 801678a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801678c:	e095      	b.n	80168ba <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801678e:	7dfb      	ldrb	r3, [r7, #23]
 8016790:	2b00      	cmp	r3, #0
 8016792:	f000 8092 	beq.w	80168ba <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016796:	7dfb      	ldrb	r3, [r7, #23]
 8016798:	2b01      	cmp	r3, #1
 801679a:	d009      	beq.n	80167b0 <etharp_find_entry+0x80>
 801679c:	7dfb      	ldrb	r3, [r7, #23]
 801679e:	2b01      	cmp	r3, #1
 80167a0:	d806      	bhi.n	80167b0 <etharp_find_entry+0x80>
 80167a2:	4b99      	ldr	r3, [pc, #612]	@ (8016a08 <etharp_find_entry+0x2d8>)
 80167a4:	f240 1223 	movw	r2, #291	@ 0x123
 80167a8:	4998      	ldr	r1, [pc, #608]	@ (8016a0c <etharp_find_entry+0x2dc>)
 80167aa:	4899      	ldr	r0, [pc, #612]	@ (8016a10 <etharp_find_entry+0x2e0>)
 80167ac:	f003 f89a 	bl	80198e4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d020      	beq.n	80167f8 <etharp_find_entry+0xc8>
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	6819      	ldr	r1, [r3, #0]
 80167ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167be:	4891      	ldr	r0, [pc, #580]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80167c0:	4613      	mov	r3, r2
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	4413      	add	r3, r2
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	4403      	add	r3, r0
 80167ca:	3304      	adds	r3, #4
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4299      	cmp	r1, r3
 80167d0:	d112      	bne.n	80167f8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d00c      	beq.n	80167f2 <etharp_find_entry+0xc2>
 80167d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167dc:	4989      	ldr	r1, [pc, #548]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80167de:	4613      	mov	r3, r2
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4413      	add	r3, r2
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	440b      	add	r3, r1
 80167e8:	3308      	adds	r3, #8
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d102      	bne.n	80167f8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80167f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167f6:	e100      	b.n	80169fa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80167f8:	7dfb      	ldrb	r3, [r7, #23]
 80167fa:	2b01      	cmp	r3, #1
 80167fc:	d140      	bne.n	8016880 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80167fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016802:	4980      	ldr	r1, [pc, #512]	@ (8016a04 <etharp_find_entry+0x2d4>)
 8016804:	4613      	mov	r3, r2
 8016806:	005b      	lsls	r3, r3, #1
 8016808:	4413      	add	r3, r2
 801680a:	00db      	lsls	r3, r3, #3
 801680c:	440b      	add	r3, r1
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d01a      	beq.n	801684a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016818:	497a      	ldr	r1, [pc, #488]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801681a:	4613      	mov	r3, r2
 801681c:	005b      	lsls	r3, r3, #1
 801681e:	4413      	add	r3, r2
 8016820:	00db      	lsls	r3, r3, #3
 8016822:	440b      	add	r3, r1
 8016824:	3312      	adds	r3, #18
 8016826:	881b      	ldrh	r3, [r3, #0]
 8016828:	8bba      	ldrh	r2, [r7, #28]
 801682a:	429a      	cmp	r2, r3
 801682c:	d845      	bhi.n	80168ba <etharp_find_entry+0x18a>
            old_queue = i;
 801682e:	8c3b      	ldrh	r3, [r7, #32]
 8016830:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016832:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016836:	4973      	ldr	r1, [pc, #460]	@ (8016a04 <etharp_find_entry+0x2d4>)
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	3312      	adds	r3, #18
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	83bb      	strh	r3, [r7, #28]
 8016848:	e037      	b.n	80168ba <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801684a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801684e:	496d      	ldr	r1, [pc, #436]	@ (8016a04 <etharp_find_entry+0x2d4>)
 8016850:	4613      	mov	r3, r2
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	4413      	add	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	440b      	add	r3, r1
 801685a:	3312      	adds	r3, #18
 801685c:	881b      	ldrh	r3, [r3, #0]
 801685e:	8b7a      	ldrh	r2, [r7, #26]
 8016860:	429a      	cmp	r2, r3
 8016862:	d82a      	bhi.n	80168ba <etharp_find_entry+0x18a>
            old_pending = i;
 8016864:	8c3b      	ldrh	r3, [r7, #32]
 8016866:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801686c:	4965      	ldr	r1, [pc, #404]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801686e:	4613      	mov	r3, r2
 8016870:	005b      	lsls	r3, r3, #1
 8016872:	4413      	add	r3, r2
 8016874:	00db      	lsls	r3, r3, #3
 8016876:	440b      	add	r3, r1
 8016878:	3312      	adds	r3, #18
 801687a:	881b      	ldrh	r3, [r3, #0]
 801687c:	837b      	strh	r3, [r7, #26]
 801687e:	e01c      	b.n	80168ba <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016880:	7dfb      	ldrb	r3, [r7, #23]
 8016882:	2b01      	cmp	r3, #1
 8016884:	d919      	bls.n	80168ba <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016886:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801688a:	495e      	ldr	r1, [pc, #376]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801688c:	4613      	mov	r3, r2
 801688e:	005b      	lsls	r3, r3, #1
 8016890:	4413      	add	r3, r2
 8016892:	00db      	lsls	r3, r3, #3
 8016894:	440b      	add	r3, r1
 8016896:	3312      	adds	r3, #18
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	8b3a      	ldrh	r2, [r7, #24]
 801689c:	429a      	cmp	r2, r3
 801689e:	d80c      	bhi.n	80168ba <etharp_find_entry+0x18a>
            old_stable = i;
 80168a0:	8c3b      	ldrh	r3, [r7, #32]
 80168a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80168a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168a8:	4956      	ldr	r1, [pc, #344]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80168aa:	4613      	mov	r3, r2
 80168ac:	005b      	lsls	r3, r3, #1
 80168ae:	4413      	add	r3, r2
 80168b0:	00db      	lsls	r3, r3, #3
 80168b2:	440b      	add	r3, r1
 80168b4:	3312      	adds	r3, #18
 80168b6:	881b      	ldrh	r3, [r3, #0]
 80168b8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168ba:	8c3b      	ldrh	r3, [r7, #32]
 80168bc:	3301      	adds	r3, #1
 80168be:	b29b      	uxth	r3, r3
 80168c0:	843b      	strh	r3, [r7, #32]
 80168c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168c6:	2b09      	cmp	r3, #9
 80168c8:	f77f af4c 	ble.w	8016764 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80168cc:	7afb      	ldrb	r3, [r7, #11]
 80168ce:	f003 0302 	and.w	r3, r3, #2
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d108      	bne.n	80168e8 <etharp_find_entry+0x1b8>
 80168d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80168da:	2b0a      	cmp	r3, #10
 80168dc:	d107      	bne.n	80168ee <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80168de:	7afb      	ldrb	r3, [r7, #11]
 80168e0:	f003 0301 	and.w	r3, r3, #1
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d102      	bne.n	80168ee <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80168e8:	f04f 33ff 	mov.w	r3, #4294967295
 80168ec:	e085      	b.n	80169fa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80168ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80168f2:	2b09      	cmp	r3, #9
 80168f4:	dc02      	bgt.n	80168fc <etharp_find_entry+0x1cc>
    i = empty;
 80168f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168f8:	843b      	strh	r3, [r7, #32]
 80168fa:	e039      	b.n	8016970 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80168fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016900:	2b09      	cmp	r3, #9
 8016902:	dc14      	bgt.n	801692e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016904:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016906:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016908:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801690c:	493d      	ldr	r1, [pc, #244]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801690e:	4613      	mov	r3, r2
 8016910:	005b      	lsls	r3, r3, #1
 8016912:	4413      	add	r3, r2
 8016914:	00db      	lsls	r3, r3, #3
 8016916:	440b      	add	r3, r1
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d018      	beq.n	8016950 <etharp_find_entry+0x220>
 801691e:	4b3a      	ldr	r3, [pc, #232]	@ (8016a08 <etharp_find_entry+0x2d8>)
 8016920:	f240 126d 	movw	r2, #365	@ 0x16d
 8016924:	493b      	ldr	r1, [pc, #236]	@ (8016a14 <etharp_find_entry+0x2e4>)
 8016926:	483a      	ldr	r0, [pc, #232]	@ (8016a10 <etharp_find_entry+0x2e0>)
 8016928:	f002 ffdc 	bl	80198e4 <iprintf>
 801692c:	e010      	b.n	8016950 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801692e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016932:	2b09      	cmp	r3, #9
 8016934:	dc02      	bgt.n	801693c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016936:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016938:	843b      	strh	r3, [r7, #32]
 801693a:	e009      	b.n	8016950 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801693c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016940:	2b09      	cmp	r3, #9
 8016942:	dc02      	bgt.n	801694a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016944:	8bfb      	ldrh	r3, [r7, #30]
 8016946:	843b      	strh	r3, [r7, #32]
 8016948:	e002      	b.n	8016950 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801694a:	f04f 33ff 	mov.w	r3, #4294967295
 801694e:	e054      	b.n	80169fa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016950:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016954:	2b09      	cmp	r3, #9
 8016956:	dd06      	ble.n	8016966 <etharp_find_entry+0x236>
 8016958:	4b2b      	ldr	r3, [pc, #172]	@ (8016a08 <etharp_find_entry+0x2d8>)
 801695a:	f240 127f 	movw	r2, #383	@ 0x17f
 801695e:	492e      	ldr	r1, [pc, #184]	@ (8016a18 <etharp_find_entry+0x2e8>)
 8016960:	482b      	ldr	r0, [pc, #172]	@ (8016a10 <etharp_find_entry+0x2e0>)
 8016962:	f002 ffbf 	bl	80198e4 <iprintf>
    etharp_free_entry(i);
 8016966:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801696a:	4618      	mov	r0, r3
 801696c:	f7ff fe06 	bl	801657c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016970:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016974:	2b09      	cmp	r3, #9
 8016976:	dd06      	ble.n	8016986 <etharp_find_entry+0x256>
 8016978:	4b23      	ldr	r3, [pc, #140]	@ (8016a08 <etharp_find_entry+0x2d8>)
 801697a:	f240 1283 	movw	r2, #387	@ 0x183
 801697e:	4926      	ldr	r1, [pc, #152]	@ (8016a18 <etharp_find_entry+0x2e8>)
 8016980:	4823      	ldr	r0, [pc, #140]	@ (8016a10 <etharp_find_entry+0x2e0>)
 8016982:	f002 ffaf 	bl	80198e4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801698a:	491e      	ldr	r1, [pc, #120]	@ (8016a04 <etharp_find_entry+0x2d4>)
 801698c:	4613      	mov	r3, r2
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	4413      	add	r3, r2
 8016992:	00db      	lsls	r3, r3, #3
 8016994:	440b      	add	r3, r1
 8016996:	3314      	adds	r3, #20
 8016998:	781b      	ldrb	r3, [r3, #0]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d006      	beq.n	80169ac <etharp_find_entry+0x27c>
 801699e:	4b1a      	ldr	r3, [pc, #104]	@ (8016a08 <etharp_find_entry+0x2d8>)
 80169a0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80169a4:	491d      	ldr	r1, [pc, #116]	@ (8016a1c <etharp_find_entry+0x2ec>)
 80169a6:	481a      	ldr	r0, [pc, #104]	@ (8016a10 <etharp_find_entry+0x2e0>)
 80169a8:	f002 ff9c 	bl	80198e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d00b      	beq.n	80169ca <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80169b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	6819      	ldr	r1, [r3, #0]
 80169ba:	4812      	ldr	r0, [pc, #72]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80169bc:	4613      	mov	r3, r2
 80169be:	005b      	lsls	r3, r3, #1
 80169c0:	4413      	add	r3, r2
 80169c2:	00db      	lsls	r3, r3, #3
 80169c4:	4403      	add	r3, r0
 80169c6:	3304      	adds	r3, #4
 80169c8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80169ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169ce:	490d      	ldr	r1, [pc, #52]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80169d0:	4613      	mov	r3, r2
 80169d2:	005b      	lsls	r3, r3, #1
 80169d4:	4413      	add	r3, r2
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	440b      	add	r3, r1
 80169da:	3312      	adds	r3, #18
 80169dc:	2200      	movs	r2, #0
 80169de:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80169e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169e4:	4907      	ldr	r1, [pc, #28]	@ (8016a04 <etharp_find_entry+0x2d4>)
 80169e6:	4613      	mov	r3, r2
 80169e8:	005b      	lsls	r3, r3, #1
 80169ea:	4413      	add	r3, r2
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	440b      	add	r3, r1
 80169f0:	3308      	adds	r3, #8
 80169f2:	687a      	ldr	r2, [r7, #4]
 80169f4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80169f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3728      	adds	r7, #40	@ 0x28
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
 8016a02:	bf00      	nop
 8016a04:	20011d78 	.word	0x20011d78
 8016a08:	0801ee38 	.word	0x0801ee38
 8016a0c:	0801ee70 	.word	0x0801ee70
 8016a10:	0801eeb0 	.word	0x0801eeb0
 8016a14:	0801eed8 	.word	0x0801eed8
 8016a18:	0801eef0 	.word	0x0801eef0
 8016a1c:	0801ef04 	.word	0x0801ef04

08016a20 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b088      	sub	sp, #32
 8016a24:	af02      	add	r7, sp, #8
 8016a26:	60f8      	str	r0, [r7, #12]
 8016a28:	60b9      	str	r1, [r7, #8]
 8016a2a:	607a      	str	r2, [r7, #4]
 8016a2c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016a34:	2b06      	cmp	r3, #6
 8016a36:	d006      	beq.n	8016a46 <etharp_update_arp_entry+0x26>
 8016a38:	4b48      	ldr	r3, [pc, #288]	@ (8016b5c <etharp_update_arp_entry+0x13c>)
 8016a3a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016a3e:	4948      	ldr	r1, [pc, #288]	@ (8016b60 <etharp_update_arp_entry+0x140>)
 8016a40:	4848      	ldr	r0, [pc, #288]	@ (8016b64 <etharp_update_arp_entry+0x144>)
 8016a42:	f002 ff4f 	bl	80198e4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	d012      	beq.n	8016a72 <etharp_update_arp_entry+0x52>
 8016a4c:	68bb      	ldr	r3, [r7, #8]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d00e      	beq.n	8016a72 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	68f9      	ldr	r1, [r7, #12]
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f001 f8fe 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8016a60:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d105      	bne.n	8016a72 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a6e:	2be0      	cmp	r3, #224	@ 0xe0
 8016a70:	d102      	bne.n	8016a78 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016a72:	f06f 030f 	mvn.w	r3, #15
 8016a76:	e06c      	b.n	8016b52 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016a78:	78fb      	ldrb	r3, [r7, #3]
 8016a7a:	68fa      	ldr	r2, [r7, #12]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	68b8      	ldr	r0, [r7, #8]
 8016a80:	f7ff fe56 	bl	8016730 <etharp_find_entry>
 8016a84:	4603      	mov	r3, r0
 8016a86:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016a88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	da02      	bge.n	8016a96 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016a90:	8afb      	ldrh	r3, [r7, #22]
 8016a92:	b25b      	sxtb	r3, r3
 8016a94:	e05d      	b.n	8016b52 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016a96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a9a:	4933      	ldr	r1, [pc, #204]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016a9c:	4613      	mov	r3, r2
 8016a9e:	005b      	lsls	r3, r3, #1
 8016aa0:	4413      	add	r3, r2
 8016aa2:	00db      	lsls	r3, r3, #3
 8016aa4:	440b      	add	r3, r1
 8016aa6:	3314      	adds	r3, #20
 8016aa8:	2202      	movs	r2, #2
 8016aaa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016aac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ab0:	492d      	ldr	r1, [pc, #180]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
 8016ab8:	00db      	lsls	r3, r3, #3
 8016aba:	440b      	add	r3, r1
 8016abc:	3308      	adds	r3, #8
 8016abe:	68fa      	ldr	r2, [r7, #12]
 8016ac0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016ac2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	4413      	add	r3, r2
 8016acc:	00db      	lsls	r3, r3, #3
 8016ace:	3308      	adds	r3, #8
 8016ad0:	4a25      	ldr	r2, [pc, #148]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016ad2:	4413      	add	r3, r2
 8016ad4:	3304      	adds	r3, #4
 8016ad6:	2206      	movs	r2, #6
 8016ad8:	6879      	ldr	r1, [r7, #4]
 8016ada:	4618      	mov	r0, r3
 8016adc:	f003 f981 	bl	8019de2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016ae0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ae4:	4920      	ldr	r1, [pc, #128]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016ae6:	4613      	mov	r3, r2
 8016ae8:	005b      	lsls	r3, r3, #1
 8016aea:	4413      	add	r3, r2
 8016aec:	00db      	lsls	r3, r3, #3
 8016aee:	440b      	add	r3, r1
 8016af0:	3312      	adds	r3, #18
 8016af2:	2200      	movs	r2, #0
 8016af4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016af6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016afa:	491b      	ldr	r1, [pc, #108]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016afc:	4613      	mov	r3, r2
 8016afe:	005b      	lsls	r3, r3, #1
 8016b00:	4413      	add	r3, r2
 8016b02:	00db      	lsls	r3, r3, #3
 8016b04:	440b      	add	r3, r1
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d021      	beq.n	8016b50 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016b0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b10:	4915      	ldr	r1, [pc, #84]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016b12:	4613      	mov	r3, r2
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	4413      	add	r3, r2
 8016b18:	00db      	lsls	r3, r3, #3
 8016b1a:	440b      	add	r3, r1
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016b20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016b24:	4910      	ldr	r1, [pc, #64]	@ (8016b68 <etharp_update_arp_entry+0x148>)
 8016b26:	4613      	mov	r3, r2
 8016b28:	005b      	lsls	r3, r3, #1
 8016b2a:	4413      	add	r3, r2
 8016b2c:	00db      	lsls	r3, r3, #3
 8016b2e:	440b      	add	r3, r1
 8016b30:	2200      	movs	r2, #0
 8016b32:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016b3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016b3e:	9300      	str	r3, [sp, #0]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6939      	ldr	r1, [r7, #16]
 8016b44:	68f8      	ldr	r0, [r7, #12]
 8016b46:	f001 ff97 	bl	8018a78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016b4a:	6938      	ldr	r0, [r7, #16]
 8016b4c:	f7f8 fd80 	bl	800f650 <pbuf_free>
  }
  return ERR_OK;
 8016b50:	2300      	movs	r3, #0
}
 8016b52:	4618      	mov	r0, r3
 8016b54:	3718      	adds	r7, #24
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	0801ee38 	.word	0x0801ee38
 8016b60:	0801ef30 	.word	0x0801ef30
 8016b64:	0801eeb0 	.word	0x0801eeb0
 8016b68:	20011d78 	.word	0x20011d78

08016b6c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b084      	sub	sp, #16
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b74:	2300      	movs	r3, #0
 8016b76:	60fb      	str	r3, [r7, #12]
 8016b78:	e01e      	b.n	8016bb8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016b7a:	4913      	ldr	r1, [pc, #76]	@ (8016bc8 <etharp_cleanup_netif+0x5c>)
 8016b7c:	68fa      	ldr	r2, [r7, #12]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	005b      	lsls	r3, r3, #1
 8016b82:	4413      	add	r3, r2
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	440b      	add	r3, r1
 8016b88:	3314      	adds	r3, #20
 8016b8a:	781b      	ldrb	r3, [r3, #0]
 8016b8c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016b8e:	7afb      	ldrb	r3, [r7, #11]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d00e      	beq.n	8016bb2 <etharp_cleanup_netif+0x46>
 8016b94:	490c      	ldr	r1, [pc, #48]	@ (8016bc8 <etharp_cleanup_netif+0x5c>)
 8016b96:	68fa      	ldr	r2, [r7, #12]
 8016b98:	4613      	mov	r3, r2
 8016b9a:	005b      	lsls	r3, r3, #1
 8016b9c:	4413      	add	r3, r2
 8016b9e:	00db      	lsls	r3, r3, #3
 8016ba0:	440b      	add	r3, r1
 8016ba2:	3308      	adds	r3, #8
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d102      	bne.n	8016bb2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016bac:	68f8      	ldr	r0, [r7, #12]
 8016bae:	f7ff fce5 	bl	801657c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	3301      	adds	r3, #1
 8016bb6:	60fb      	str	r3, [r7, #12]
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	2b09      	cmp	r3, #9
 8016bbc:	dddd      	ble.n	8016b7a <etharp_cleanup_netif+0xe>
    }
  }
}
 8016bbe:	bf00      	nop
 8016bc0:	bf00      	nop
 8016bc2:	3710      	adds	r7, #16
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bd80      	pop	{r7, pc}
 8016bc8:	20011d78 	.word	0x20011d78

08016bcc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016bcc:	b5b0      	push	{r4, r5, r7, lr}
 8016bce:	b08a      	sub	sp, #40	@ 0x28
 8016bd0:	af04      	add	r7, sp, #16
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d107      	bne.n	8016bec <etharp_input+0x20>
 8016bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8016cd4 <etharp_input+0x108>)
 8016bde:	f240 228a 	movw	r2, #650	@ 0x28a
 8016be2:	493d      	ldr	r1, [pc, #244]	@ (8016cd8 <etharp_input+0x10c>)
 8016be4:	483d      	ldr	r0, [pc, #244]	@ (8016cdc <etharp_input+0x110>)
 8016be6:	f002 fe7d 	bl	80198e4 <iprintf>
 8016bea:	e06f      	b.n	8016ccc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	881b      	ldrh	r3, [r3, #0]
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016bfc:	d10c      	bne.n	8016c18 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016c02:	2b06      	cmp	r3, #6
 8016c04:	d108      	bne.n	8016c18 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016c06:	693b      	ldr	r3, [r7, #16]
 8016c08:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016c0a:	2b04      	cmp	r3, #4
 8016c0c:	d104      	bne.n	8016c18 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	885b      	ldrh	r3, [r3, #2]
 8016c12:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016c14:	2b08      	cmp	r3, #8
 8016c16:	d003      	beq.n	8016c20 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f7f8 fd19 	bl	800f650 <pbuf_free>
    return;
 8016c1e:	e055      	b.n	8016ccc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	330e      	adds	r3, #14
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	3318      	adds	r3, #24
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c30:	683b      	ldr	r3, [r7, #0]
 8016c32:	3304      	adds	r3, #4
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d102      	bne.n	8016c40 <etharp_input+0x74>
    for_us = 0;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	75fb      	strb	r3, [r7, #23]
 8016c3e:	e009      	b.n	8016c54 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016c40:	68ba      	ldr	r2, [r7, #8]
 8016c42:	683b      	ldr	r3, [r7, #0]
 8016c44:	3304      	adds	r3, #4
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	bf0c      	ite	eq
 8016c4c:	2301      	moveq	r3, #1
 8016c4e:	2300      	movne	r3, #0
 8016c50:	b2db      	uxtb	r3, r3
 8016c52:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016c54:	693b      	ldr	r3, [r7, #16]
 8016c56:	f103 0208 	add.w	r2, r3, #8
 8016c5a:	7dfb      	ldrb	r3, [r7, #23]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d001      	beq.n	8016c64 <etharp_input+0x98>
 8016c60:	2301      	movs	r3, #1
 8016c62:	e000      	b.n	8016c66 <etharp_input+0x9a>
 8016c64:	2302      	movs	r3, #2
 8016c66:	f107 010c 	add.w	r1, r7, #12
 8016c6a:	6838      	ldr	r0, [r7, #0]
 8016c6c:	f7ff fed8 	bl	8016a20 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	88db      	ldrh	r3, [r3, #6]
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016c7a:	d003      	beq.n	8016c84 <etharp_input+0xb8>
 8016c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016c80:	d01e      	beq.n	8016cc0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016c82:	e020      	b.n	8016cc6 <etharp_input+0xfa>
      if (for_us) {
 8016c84:	7dfb      	ldrb	r3, [r7, #23]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d01c      	beq.n	8016cc4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016ca0:	693a      	ldr	r2, [r7, #16]
 8016ca2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016ca4:	2102      	movs	r1, #2
 8016ca6:	9103      	str	r1, [sp, #12]
 8016ca8:	f107 010c 	add.w	r1, r7, #12
 8016cac:	9102      	str	r1, [sp, #8]
 8016cae:	9201      	str	r2, [sp, #4]
 8016cb0:	9300      	str	r3, [sp, #0]
 8016cb2:	462b      	mov	r3, r5
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	4601      	mov	r1, r0
 8016cb8:	6838      	ldr	r0, [r7, #0]
 8016cba:	f000 faeb 	bl	8017294 <etharp_raw>
      break;
 8016cbe:	e001      	b.n	8016cc4 <etharp_input+0xf8>
      break;
 8016cc0:	bf00      	nop
 8016cc2:	e000      	b.n	8016cc6 <etharp_input+0xfa>
      break;
 8016cc4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7f8 fcc2 	bl	800f650 <pbuf_free>
}
 8016ccc:	3718      	adds	r7, #24
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	0801ee38 	.word	0x0801ee38
 8016cd8:	0801ef88 	.word	0x0801ef88
 8016cdc:	0801eeb0 	.word	0x0801eeb0

08016ce0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af02      	add	r7, sp, #8
 8016ce6:	60f8      	str	r0, [r7, #12]
 8016ce8:	60b9      	str	r1, [r7, #8]
 8016cea:	4613      	mov	r3, r2
 8016cec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016cee:	79fa      	ldrb	r2, [r7, #7]
 8016cf0:	4944      	ldr	r1, [pc, #272]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016cf2:	4613      	mov	r3, r2
 8016cf4:	005b      	lsls	r3, r3, #1
 8016cf6:	4413      	add	r3, r2
 8016cf8:	00db      	lsls	r3, r3, #3
 8016cfa:	440b      	add	r3, r1
 8016cfc:	3314      	adds	r3, #20
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	2b01      	cmp	r3, #1
 8016d02:	d806      	bhi.n	8016d12 <etharp_output_to_arp_index+0x32>
 8016d04:	4b40      	ldr	r3, [pc, #256]	@ (8016e08 <etharp_output_to_arp_index+0x128>)
 8016d06:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016d0a:	4940      	ldr	r1, [pc, #256]	@ (8016e0c <etharp_output_to_arp_index+0x12c>)
 8016d0c:	4840      	ldr	r0, [pc, #256]	@ (8016e10 <etharp_output_to_arp_index+0x130>)
 8016d0e:	f002 fde9 	bl	80198e4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016d12:	79fa      	ldrb	r2, [r7, #7]
 8016d14:	493b      	ldr	r1, [pc, #236]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d16:	4613      	mov	r3, r2
 8016d18:	005b      	lsls	r3, r3, #1
 8016d1a:	4413      	add	r3, r2
 8016d1c:	00db      	lsls	r3, r3, #3
 8016d1e:	440b      	add	r3, r1
 8016d20:	3314      	adds	r3, #20
 8016d22:	781b      	ldrb	r3, [r3, #0]
 8016d24:	2b02      	cmp	r3, #2
 8016d26:	d153      	bne.n	8016dd0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016d28:	79fa      	ldrb	r2, [r7, #7]
 8016d2a:	4936      	ldr	r1, [pc, #216]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d2c:	4613      	mov	r3, r2
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	4413      	add	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	440b      	add	r3, r1
 8016d36:	3312      	adds	r3, #18
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016d3e:	d919      	bls.n	8016d74 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016d40:	79fa      	ldrb	r2, [r7, #7]
 8016d42:	4613      	mov	r3, r2
 8016d44:	005b      	lsls	r3, r3, #1
 8016d46:	4413      	add	r3, r2
 8016d48:	00db      	lsls	r3, r3, #3
 8016d4a:	4a2e      	ldr	r2, [pc, #184]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d4c:	4413      	add	r3, r2
 8016d4e:	3304      	adds	r3, #4
 8016d50:	4619      	mov	r1, r3
 8016d52:	68f8      	ldr	r0, [r7, #12]
 8016d54:	f000 fb4c 	bl	80173f0 <etharp_request>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d138      	bne.n	8016dd0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d5e:	79fa      	ldrb	r2, [r7, #7]
 8016d60:	4928      	ldr	r1, [pc, #160]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d62:	4613      	mov	r3, r2
 8016d64:	005b      	lsls	r3, r3, #1
 8016d66:	4413      	add	r3, r2
 8016d68:	00db      	lsls	r3, r3, #3
 8016d6a:	440b      	add	r3, r1
 8016d6c:	3314      	adds	r3, #20
 8016d6e:	2203      	movs	r2, #3
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	e02d      	b.n	8016dd0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016d74:	79fa      	ldrb	r2, [r7, #7]
 8016d76:	4923      	ldr	r1, [pc, #140]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d78:	4613      	mov	r3, r2
 8016d7a:	005b      	lsls	r3, r3, #1
 8016d7c:	4413      	add	r3, r2
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	440b      	add	r3, r1
 8016d82:	3312      	adds	r3, #18
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8016d8a:	d321      	bcc.n	8016dd0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016d8c:	79fa      	ldrb	r2, [r7, #7]
 8016d8e:	4613      	mov	r3, r2
 8016d90:	005b      	lsls	r3, r3, #1
 8016d92:	4413      	add	r3, r2
 8016d94:	00db      	lsls	r3, r3, #3
 8016d96:	4a1b      	ldr	r2, [pc, #108]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016d98:	4413      	add	r3, r2
 8016d9a:	1d19      	adds	r1, r3, #4
 8016d9c:	79fa      	ldrb	r2, [r7, #7]
 8016d9e:	4613      	mov	r3, r2
 8016da0:	005b      	lsls	r3, r3, #1
 8016da2:	4413      	add	r3, r2
 8016da4:	00db      	lsls	r3, r3, #3
 8016da6:	3308      	adds	r3, #8
 8016da8:	4a16      	ldr	r2, [pc, #88]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016daa:	4413      	add	r3, r2
 8016dac:	3304      	adds	r3, #4
 8016dae:	461a      	mov	r2, r3
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f000 fafb 	bl	80173ac <etharp_request_dst>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d109      	bne.n	8016dd0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016dbc:	79fa      	ldrb	r2, [r7, #7]
 8016dbe:	4911      	ldr	r1, [pc, #68]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016dc0:	4613      	mov	r3, r2
 8016dc2:	005b      	lsls	r3, r3, #1
 8016dc4:	4413      	add	r3, r2
 8016dc6:	00db      	lsls	r3, r3, #3
 8016dc8:	440b      	add	r3, r1
 8016dca:	3314      	adds	r3, #20
 8016dcc:	2203      	movs	r2, #3
 8016dce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8016dd6:	79fa      	ldrb	r2, [r7, #7]
 8016dd8:	4613      	mov	r3, r2
 8016dda:	005b      	lsls	r3, r3, #1
 8016ddc:	4413      	add	r3, r2
 8016dde:	00db      	lsls	r3, r3, #3
 8016de0:	3308      	adds	r3, #8
 8016de2:	4a08      	ldr	r2, [pc, #32]	@ (8016e04 <etharp_output_to_arp_index+0x124>)
 8016de4:	4413      	add	r3, r2
 8016de6:	3304      	adds	r3, #4
 8016de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016dec:	9200      	str	r2, [sp, #0]
 8016dee:	460a      	mov	r2, r1
 8016df0:	68b9      	ldr	r1, [r7, #8]
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	f001 fe40 	bl	8018a78 <ethernet_output>
 8016df8:	4603      	mov	r3, r0
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3710      	adds	r7, #16
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	20011d78 	.word	0x20011d78
 8016e08:	0801ee38 	.word	0x0801ee38
 8016e0c:	0801efa8 	.word	0x0801efa8
 8016e10:	0801eeb0 	.word	0x0801eeb0

08016e14 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b08a      	sub	sp, #40	@ 0x28
 8016e18:	af02      	add	r7, sp, #8
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d106      	bne.n	8016e38 <etharp_output+0x24>
 8016e2a:	4b73      	ldr	r3, [pc, #460]	@ (8016ff8 <etharp_output+0x1e4>)
 8016e2c:	f240 321e 	movw	r2, #798	@ 0x31e
 8016e30:	4972      	ldr	r1, [pc, #456]	@ (8016ffc <etharp_output+0x1e8>)
 8016e32:	4873      	ldr	r0, [pc, #460]	@ (8017000 <etharp_output+0x1ec>)
 8016e34:	f002 fd56 	bl	80198e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d106      	bne.n	8016e4c <etharp_output+0x38>
 8016e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8016ff8 <etharp_output+0x1e4>)
 8016e40:	f240 321f 	movw	r2, #799	@ 0x31f
 8016e44:	496f      	ldr	r1, [pc, #444]	@ (8017004 <etharp_output+0x1f0>)
 8016e46:	486e      	ldr	r0, [pc, #440]	@ (8017000 <etharp_output+0x1ec>)
 8016e48:	f002 fd4c 	bl	80198e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d106      	bne.n	8016e60 <etharp_output+0x4c>
 8016e52:	4b69      	ldr	r3, [pc, #420]	@ (8016ff8 <etharp_output+0x1e4>)
 8016e54:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e58:	496b      	ldr	r1, [pc, #428]	@ (8017008 <etharp_output+0x1f4>)
 8016e5a:	4869      	ldr	r0, [pc, #420]	@ (8017000 <etharp_output+0x1ec>)
 8016e5c:	f002 fd42 	bl	80198e4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	68f9      	ldr	r1, [r7, #12]
 8016e66:	4618      	mov	r0, r3
 8016e68:	f000 fef8 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d002      	beq.n	8016e78 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016e72:	4b66      	ldr	r3, [pc, #408]	@ (801700c <etharp_output+0x1f8>)
 8016e74:	61fb      	str	r3, [r7, #28]
 8016e76:	e0af      	b.n	8016fd8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e80:	2be0      	cmp	r3, #224	@ 0xe0
 8016e82:	d118      	bne.n	8016eb6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016e84:	2301      	movs	r3, #1
 8016e86:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016e88:	2300      	movs	r3, #0
 8016e8a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016e8c:	235e      	movs	r3, #94	@ 0x5e
 8016e8e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	3301      	adds	r3, #1
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016e9a:	b2db      	uxtb	r3, r3
 8016e9c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	3302      	adds	r3, #2
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3303      	adds	r3, #3
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016eae:	f107 0310 	add.w	r3, r7, #16
 8016eb2:	61fb      	str	r3, [r7, #28]
 8016eb4:	e090      	b.n	8016fd8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681a      	ldr	r2, [r3, #0]
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	3304      	adds	r3, #4
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	405a      	eors	r2, r3
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	3308      	adds	r3, #8
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	4013      	ands	r3, r2
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d012      	beq.n	8016ef4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016ed4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8016ed8:	4293      	cmp	r3, r2
 8016eda:	d00b      	beq.n	8016ef4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	330c      	adds	r3, #12
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d003      	beq.n	8016eee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	330c      	adds	r3, #12
 8016eea:	61bb      	str	r3, [r7, #24]
 8016eec:	e002      	b.n	8016ef4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016eee:	f06f 0303 	mvn.w	r3, #3
 8016ef2:	e07d      	b.n	8016ff0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ef4:	4b46      	ldr	r3, [pc, #280]	@ (8017010 <etharp_output+0x1fc>)
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	4619      	mov	r1, r3
 8016efa:	4a46      	ldr	r2, [pc, #280]	@ (8017014 <etharp_output+0x200>)
 8016efc:	460b      	mov	r3, r1
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	440b      	add	r3, r1
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	4413      	add	r3, r2
 8016f06:	3314      	adds	r3, #20
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d925      	bls.n	8016f5a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016f0e:	4b40      	ldr	r3, [pc, #256]	@ (8017010 <etharp_output+0x1fc>)
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	4619      	mov	r1, r3
 8016f14:	4a3f      	ldr	r2, [pc, #252]	@ (8017014 <etharp_output+0x200>)
 8016f16:	460b      	mov	r3, r1
 8016f18:	005b      	lsls	r3, r3, #1
 8016f1a:	440b      	add	r3, r1
 8016f1c:	00db      	lsls	r3, r3, #3
 8016f1e:	4413      	add	r3, r2
 8016f20:	3308      	adds	r3, #8
 8016f22:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016f24:	68fa      	ldr	r2, [r7, #12]
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d117      	bne.n	8016f5a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016f2a:	69bb      	ldr	r3, [r7, #24]
 8016f2c:	681a      	ldr	r2, [r3, #0]
 8016f2e:	4b38      	ldr	r3, [pc, #224]	@ (8017010 <etharp_output+0x1fc>)
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	4618      	mov	r0, r3
 8016f34:	4937      	ldr	r1, [pc, #220]	@ (8017014 <etharp_output+0x200>)
 8016f36:	4603      	mov	r3, r0
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4403      	add	r3, r0
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	440b      	add	r3, r1
 8016f40:	3304      	adds	r3, #4
 8016f42:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d108      	bne.n	8016f5a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016f48:	4b31      	ldr	r3, [pc, #196]	@ (8017010 <etharp_output+0x1fc>)
 8016f4a:	781b      	ldrb	r3, [r3, #0]
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	68b9      	ldr	r1, [r7, #8]
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f7ff fec5 	bl	8016ce0 <etharp_output_to_arp_index>
 8016f56:	4603      	mov	r3, r0
 8016f58:	e04a      	b.n	8016ff0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	75fb      	strb	r3, [r7, #23]
 8016f5e:	e031      	b.n	8016fc4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016f60:	7dfa      	ldrb	r2, [r7, #23]
 8016f62:	492c      	ldr	r1, [pc, #176]	@ (8017014 <etharp_output+0x200>)
 8016f64:	4613      	mov	r3, r2
 8016f66:	005b      	lsls	r3, r3, #1
 8016f68:	4413      	add	r3, r2
 8016f6a:	00db      	lsls	r3, r3, #3
 8016f6c:	440b      	add	r3, r1
 8016f6e:	3314      	adds	r3, #20
 8016f70:	781b      	ldrb	r3, [r3, #0]
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d923      	bls.n	8016fbe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016f76:	7dfa      	ldrb	r2, [r7, #23]
 8016f78:	4926      	ldr	r1, [pc, #152]	@ (8017014 <etharp_output+0x200>)
 8016f7a:	4613      	mov	r3, r2
 8016f7c:	005b      	lsls	r3, r3, #1
 8016f7e:	4413      	add	r3, r2
 8016f80:	00db      	lsls	r3, r3, #3
 8016f82:	440b      	add	r3, r1
 8016f84:	3308      	adds	r3, #8
 8016f86:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016f88:	68fa      	ldr	r2, [r7, #12]
 8016f8a:	429a      	cmp	r2, r3
 8016f8c:	d117      	bne.n	8016fbe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016f8e:	69bb      	ldr	r3, [r7, #24]
 8016f90:	6819      	ldr	r1, [r3, #0]
 8016f92:	7dfa      	ldrb	r2, [r7, #23]
 8016f94:	481f      	ldr	r0, [pc, #124]	@ (8017014 <etharp_output+0x200>)
 8016f96:	4613      	mov	r3, r2
 8016f98:	005b      	lsls	r3, r3, #1
 8016f9a:	4413      	add	r3, r2
 8016f9c:	00db      	lsls	r3, r3, #3
 8016f9e:	4403      	add	r3, r0
 8016fa0:	3304      	adds	r3, #4
 8016fa2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016fa4:	4299      	cmp	r1, r3
 8016fa6:	d10a      	bne.n	8016fbe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016fa8:	4a19      	ldr	r2, [pc, #100]	@ (8017010 <etharp_output+0x1fc>)
 8016faa:	7dfb      	ldrb	r3, [r7, #23]
 8016fac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016fae:	7dfb      	ldrb	r3, [r7, #23]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	68b9      	ldr	r1, [r7, #8]
 8016fb4:	68f8      	ldr	r0, [r7, #12]
 8016fb6:	f7ff fe93 	bl	8016ce0 <etharp_output_to_arp_index>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	e018      	b.n	8016ff0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016fbe:	7dfb      	ldrb	r3, [r7, #23]
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	75fb      	strb	r3, [r7, #23]
 8016fc4:	7dfb      	ldrb	r3, [r7, #23]
 8016fc6:	2b09      	cmp	r3, #9
 8016fc8:	d9ca      	bls.n	8016f60 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	69b9      	ldr	r1, [r7, #24]
 8016fce:	68f8      	ldr	r0, [r7, #12]
 8016fd0:	f000 f822 	bl	8017018 <etharp_query>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	e00b      	b.n	8016ff0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016fde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016fe2:	9300      	str	r3, [sp, #0]
 8016fe4:	69fb      	ldr	r3, [r7, #28]
 8016fe6:	68b9      	ldr	r1, [r7, #8]
 8016fe8:	68f8      	ldr	r0, [r7, #12]
 8016fea:	f001 fd45 	bl	8018a78 <ethernet_output>
 8016fee:	4603      	mov	r3, r0
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	3720      	adds	r7, #32
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	0801ee38 	.word	0x0801ee38
 8016ffc:	0801ef88 	.word	0x0801ef88
 8017000:	0801eeb0 	.word	0x0801eeb0
 8017004:	0801efd8 	.word	0x0801efd8
 8017008:	0801ef78 	.word	0x0801ef78
 801700c:	0801f62c 	.word	0x0801f62c
 8017010:	20011e68 	.word	0x20011e68
 8017014:	20011d78 	.word	0x20011d78

08017018 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b08c      	sub	sp, #48	@ 0x30
 801701c:	af02      	add	r7, sp, #8
 801701e:	60f8      	str	r0, [r7, #12]
 8017020:	60b9      	str	r1, [r7, #8]
 8017022:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	3326      	adds	r3, #38	@ 0x26
 8017028:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801702a:	23ff      	movs	r3, #255	@ 0xff
 801702c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8017030:	2300      	movs	r3, #0
 8017032:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	68f9      	ldr	r1, [r7, #12]
 801703a:	4618      	mov	r0, r3
 801703c:	f000 fe0e 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8017040:	4603      	mov	r3, r0
 8017042:	2b00      	cmp	r3, #0
 8017044:	d10c      	bne.n	8017060 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801704e:	2be0      	cmp	r3, #224	@ 0xe0
 8017050:	d006      	beq.n	8017060 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d003      	beq.n	8017060 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d102      	bne.n	8017066 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017060:	f06f 030f 	mvn.w	r3, #15
 8017064:	e101      	b.n	801726a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017066:	68fa      	ldr	r2, [r7, #12]
 8017068:	2101      	movs	r1, #1
 801706a:	68b8      	ldr	r0, [r7, #8]
 801706c:	f7ff fb60 	bl	8016730 <etharp_find_entry>
 8017070:	4603      	mov	r3, r0
 8017072:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017078:	2b00      	cmp	r3, #0
 801707a:	da02      	bge.n	8017082 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801707c:	8a7b      	ldrh	r3, [r7, #18]
 801707e:	b25b      	sxtb	r3, r3
 8017080:	e0f3      	b.n	801726a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017082:	8a7b      	ldrh	r3, [r7, #18]
 8017084:	2b7e      	cmp	r3, #126	@ 0x7e
 8017086:	d906      	bls.n	8017096 <etharp_query+0x7e>
 8017088:	4b7a      	ldr	r3, [pc, #488]	@ (8017274 <etharp_query+0x25c>)
 801708a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801708e:	497a      	ldr	r1, [pc, #488]	@ (8017278 <etharp_query+0x260>)
 8017090:	487a      	ldr	r0, [pc, #488]	@ (801727c <etharp_query+0x264>)
 8017092:	f002 fc27 	bl	80198e4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017096:	8a7b      	ldrh	r3, [r7, #18]
 8017098:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801709a:	7c7a      	ldrb	r2, [r7, #17]
 801709c:	4978      	ldr	r1, [pc, #480]	@ (8017280 <etharp_query+0x268>)
 801709e:	4613      	mov	r3, r2
 80170a0:	005b      	lsls	r3, r3, #1
 80170a2:	4413      	add	r3, r2
 80170a4:	00db      	lsls	r3, r3, #3
 80170a6:	440b      	add	r3, r1
 80170a8:	3314      	adds	r3, #20
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d115      	bne.n	80170dc <etharp_query+0xc4>
    is_new_entry = 1;
 80170b0:	2301      	movs	r3, #1
 80170b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80170b4:	7c7a      	ldrb	r2, [r7, #17]
 80170b6:	4972      	ldr	r1, [pc, #456]	@ (8017280 <etharp_query+0x268>)
 80170b8:	4613      	mov	r3, r2
 80170ba:	005b      	lsls	r3, r3, #1
 80170bc:	4413      	add	r3, r2
 80170be:	00db      	lsls	r3, r3, #3
 80170c0:	440b      	add	r3, r1
 80170c2:	3314      	adds	r3, #20
 80170c4:	2201      	movs	r2, #1
 80170c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80170c8:	7c7a      	ldrb	r2, [r7, #17]
 80170ca:	496d      	ldr	r1, [pc, #436]	@ (8017280 <etharp_query+0x268>)
 80170cc:	4613      	mov	r3, r2
 80170ce:	005b      	lsls	r3, r3, #1
 80170d0:	4413      	add	r3, r2
 80170d2:	00db      	lsls	r3, r3, #3
 80170d4:	440b      	add	r3, r1
 80170d6:	3308      	adds	r3, #8
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80170dc:	7c7a      	ldrb	r2, [r7, #17]
 80170de:	4968      	ldr	r1, [pc, #416]	@ (8017280 <etharp_query+0x268>)
 80170e0:	4613      	mov	r3, r2
 80170e2:	005b      	lsls	r3, r3, #1
 80170e4:	4413      	add	r3, r2
 80170e6:	00db      	lsls	r3, r3, #3
 80170e8:	440b      	add	r3, r1
 80170ea:	3314      	adds	r3, #20
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	2b01      	cmp	r3, #1
 80170f0:	d011      	beq.n	8017116 <etharp_query+0xfe>
 80170f2:	7c7a      	ldrb	r2, [r7, #17]
 80170f4:	4962      	ldr	r1, [pc, #392]	@ (8017280 <etharp_query+0x268>)
 80170f6:	4613      	mov	r3, r2
 80170f8:	005b      	lsls	r3, r3, #1
 80170fa:	4413      	add	r3, r2
 80170fc:	00db      	lsls	r3, r3, #3
 80170fe:	440b      	add	r3, r1
 8017100:	3314      	adds	r3, #20
 8017102:	781b      	ldrb	r3, [r3, #0]
 8017104:	2b01      	cmp	r3, #1
 8017106:	d806      	bhi.n	8017116 <etharp_query+0xfe>
 8017108:	4b5a      	ldr	r3, [pc, #360]	@ (8017274 <etharp_query+0x25c>)
 801710a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801710e:	495d      	ldr	r1, [pc, #372]	@ (8017284 <etharp_query+0x26c>)
 8017110:	485a      	ldr	r0, [pc, #360]	@ (801727c <etharp_query+0x264>)
 8017112:	f002 fbe7 	bl	80198e4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d102      	bne.n	8017122 <etharp_query+0x10a>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d10c      	bne.n	801713c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017122:	68b9      	ldr	r1, [r7, #8]
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f000 f963 	bl	80173f0 <etharp_request>
 801712a:	4603      	mov	r3, r0
 801712c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d102      	bne.n	801713c <etharp_query+0x124>
      return result;
 8017136:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801713a:	e096      	b.n	801726a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <etharp_query+0x138>
 8017142:	4b4c      	ldr	r3, [pc, #304]	@ (8017274 <etharp_query+0x25c>)
 8017144:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017148:	494f      	ldr	r1, [pc, #316]	@ (8017288 <etharp_query+0x270>)
 801714a:	484c      	ldr	r0, [pc, #304]	@ (801727c <etharp_query+0x264>)
 801714c:	f002 fbca 	bl	80198e4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017150:	7c7a      	ldrb	r2, [r7, #17]
 8017152:	494b      	ldr	r1, [pc, #300]	@ (8017280 <etharp_query+0x268>)
 8017154:	4613      	mov	r3, r2
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	00db      	lsls	r3, r3, #3
 801715c:	440b      	add	r3, r1
 801715e:	3314      	adds	r3, #20
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	2b01      	cmp	r3, #1
 8017164:	d917      	bls.n	8017196 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017166:	4a49      	ldr	r2, [pc, #292]	@ (801728c <etharp_query+0x274>)
 8017168:	7c7b      	ldrb	r3, [r7, #17]
 801716a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801716c:	7c7a      	ldrb	r2, [r7, #17]
 801716e:	4613      	mov	r3, r2
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	4413      	add	r3, r2
 8017174:	00db      	lsls	r3, r3, #3
 8017176:	3308      	adds	r3, #8
 8017178:	4a41      	ldr	r2, [pc, #260]	@ (8017280 <etharp_query+0x268>)
 801717a:	4413      	add	r3, r2
 801717c:	3304      	adds	r3, #4
 801717e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017182:	9200      	str	r2, [sp, #0]
 8017184:	697a      	ldr	r2, [r7, #20]
 8017186:	6879      	ldr	r1, [r7, #4]
 8017188:	68f8      	ldr	r0, [r7, #12]
 801718a:	f001 fc75 	bl	8018a78 <ethernet_output>
 801718e:	4603      	mov	r3, r0
 8017190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017194:	e067      	b.n	8017266 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017196:	7c7a      	ldrb	r2, [r7, #17]
 8017198:	4939      	ldr	r1, [pc, #228]	@ (8017280 <etharp_query+0x268>)
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	440b      	add	r3, r1
 80171a4:	3314      	adds	r3, #20
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d15c      	bne.n	8017266 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80171ac:	2300      	movs	r3, #0
 80171ae:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80171b4:	e01c      	b.n	80171f0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80171b6:	69fb      	ldr	r3, [r7, #28]
 80171b8:	895a      	ldrh	r2, [r3, #10]
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	891b      	ldrh	r3, [r3, #8]
 80171be:	429a      	cmp	r2, r3
 80171c0:	d10a      	bne.n	80171d8 <etharp_query+0x1c0>
 80171c2:	69fb      	ldr	r3, [r7, #28]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d006      	beq.n	80171d8 <etharp_query+0x1c0>
 80171ca:	4b2a      	ldr	r3, [pc, #168]	@ (8017274 <etharp_query+0x25c>)
 80171cc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80171d0:	492f      	ldr	r1, [pc, #188]	@ (8017290 <etharp_query+0x278>)
 80171d2:	482a      	ldr	r0, [pc, #168]	@ (801727c <etharp_query+0x264>)
 80171d4:	f002 fb86 	bl	80198e4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	7b1b      	ldrb	r3, [r3, #12]
 80171dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d002      	beq.n	80171ea <etharp_query+0x1d2>
        copy_needed = 1;
 80171e4:	2301      	movs	r3, #1
 80171e6:	61bb      	str	r3, [r7, #24]
        break;
 80171e8:	e005      	b.n	80171f6 <etharp_query+0x1de>
      }
      p = p->next;
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80171f0:	69fb      	ldr	r3, [r7, #28]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1df      	bne.n	80171b6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80171f6:	69bb      	ldr	r3, [r7, #24]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d007      	beq.n	801720c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80171fc:	687a      	ldr	r2, [r7, #4]
 80171fe:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8017202:	200e      	movs	r0, #14
 8017204:	f7f8 fc8c 	bl	800fb20 <pbuf_clone>
 8017208:	61f8      	str	r0, [r7, #28]
 801720a:	e004      	b.n	8017216 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017210:	69f8      	ldr	r0, [r7, #28]
 8017212:	f7f8 fac3 	bl	800f79c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d021      	beq.n	8017260 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801721c:	7c7a      	ldrb	r2, [r7, #17]
 801721e:	4918      	ldr	r1, [pc, #96]	@ (8017280 <etharp_query+0x268>)
 8017220:	4613      	mov	r3, r2
 8017222:	005b      	lsls	r3, r3, #1
 8017224:	4413      	add	r3, r2
 8017226:	00db      	lsls	r3, r3, #3
 8017228:	440b      	add	r3, r1
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d00a      	beq.n	8017246 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017230:	7c7a      	ldrb	r2, [r7, #17]
 8017232:	4913      	ldr	r1, [pc, #76]	@ (8017280 <etharp_query+0x268>)
 8017234:	4613      	mov	r3, r2
 8017236:	005b      	lsls	r3, r3, #1
 8017238:	4413      	add	r3, r2
 801723a:	00db      	lsls	r3, r3, #3
 801723c:	440b      	add	r3, r1
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	4618      	mov	r0, r3
 8017242:	f7f8 fa05 	bl	800f650 <pbuf_free>
      }
      arp_table[i].q = p;
 8017246:	7c7a      	ldrb	r2, [r7, #17]
 8017248:	490d      	ldr	r1, [pc, #52]	@ (8017280 <etharp_query+0x268>)
 801724a:	4613      	mov	r3, r2
 801724c:	005b      	lsls	r3, r3, #1
 801724e:	4413      	add	r3, r2
 8017250:	00db      	lsls	r3, r3, #3
 8017252:	440b      	add	r3, r1
 8017254:	69fa      	ldr	r2, [r7, #28]
 8017256:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017258:	2300      	movs	r3, #0
 801725a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801725e:	e002      	b.n	8017266 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017260:	23ff      	movs	r3, #255	@ 0xff
 8017262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8017266:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801726a:	4618      	mov	r0, r3
 801726c:	3728      	adds	r7, #40	@ 0x28
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
 8017272:	bf00      	nop
 8017274:	0801ee38 	.word	0x0801ee38
 8017278:	0801efe4 	.word	0x0801efe4
 801727c:	0801eeb0 	.word	0x0801eeb0
 8017280:	20011d78 	.word	0x20011d78
 8017284:	0801eff4 	.word	0x0801eff4
 8017288:	0801efd8 	.word	0x0801efd8
 801728c:	20011e68 	.word	0x20011e68
 8017290:	0801f01c 	.word	0x0801f01c

08017294 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017294:	b580      	push	{r7, lr}
 8017296:	b08a      	sub	sp, #40	@ 0x28
 8017298:	af02      	add	r7, sp, #8
 801729a:	60f8      	str	r0, [r7, #12]
 801729c:	60b9      	str	r1, [r7, #8]
 801729e:	607a      	str	r2, [r7, #4]
 80172a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80172a2:	2300      	movs	r3, #0
 80172a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d106      	bne.n	80172ba <etharp_raw+0x26>
 80172ac:	4b3a      	ldr	r3, [pc, #232]	@ (8017398 <etharp_raw+0x104>)
 80172ae:	f240 4257 	movw	r2, #1111	@ 0x457
 80172b2:	493a      	ldr	r1, [pc, #232]	@ (801739c <etharp_raw+0x108>)
 80172b4:	483a      	ldr	r0, [pc, #232]	@ (80173a0 <etharp_raw+0x10c>)
 80172b6:	f002 fb15 	bl	80198e4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80172ba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80172be:	211c      	movs	r1, #28
 80172c0:	200e      	movs	r0, #14
 80172c2:	f7f7 fee1 	bl	800f088 <pbuf_alloc>
 80172c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80172c8:	69bb      	ldr	r3, [r7, #24]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d102      	bne.n	80172d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80172ce:	f04f 33ff 	mov.w	r3, #4294967295
 80172d2:	e05d      	b.n	8017390 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80172d4:	69bb      	ldr	r3, [r7, #24]
 80172d6:	895b      	ldrh	r3, [r3, #10]
 80172d8:	2b1b      	cmp	r3, #27
 80172da:	d806      	bhi.n	80172ea <etharp_raw+0x56>
 80172dc:	4b2e      	ldr	r3, [pc, #184]	@ (8017398 <etharp_raw+0x104>)
 80172de:	f240 4262 	movw	r2, #1122	@ 0x462
 80172e2:	4930      	ldr	r1, [pc, #192]	@ (80173a4 <etharp_raw+0x110>)
 80172e4:	482e      	ldr	r0, [pc, #184]	@ (80173a0 <etharp_raw+0x10c>)
 80172e6:	f002 fafd 	bl	80198e4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80172ea:	69bb      	ldr	r3, [r7, #24]
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80172f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7f6 fe00 	bl	800def8 <lwip_htons>
 80172f8:	4603      	mov	r3, r0
 80172fa:	461a      	mov	r2, r3
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8017306:	2b06      	cmp	r3, #6
 8017308:	d006      	beq.n	8017318 <etharp_raw+0x84>
 801730a:	4b23      	ldr	r3, [pc, #140]	@ (8017398 <etharp_raw+0x104>)
 801730c:	f240 4269 	movw	r2, #1129	@ 0x469
 8017310:	4925      	ldr	r1, [pc, #148]	@ (80173a8 <etharp_raw+0x114>)
 8017312:	4823      	ldr	r0, [pc, #140]	@ (80173a0 <etharp_raw+0x10c>)
 8017314:	f002 fae6 	bl	80198e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	3308      	adds	r3, #8
 801731c:	2206      	movs	r2, #6
 801731e:	6839      	ldr	r1, [r7, #0]
 8017320:	4618      	mov	r0, r3
 8017322:	f002 fd5e 	bl	8019de2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	3312      	adds	r3, #18
 801732a:	2206      	movs	r2, #6
 801732c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801732e:	4618      	mov	r0, r3
 8017330:	f002 fd57 	bl	8019de2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	330e      	adds	r3, #14
 8017338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801733a:	6812      	ldr	r2, [r2, #0]
 801733c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801733e:	697b      	ldr	r3, [r7, #20]
 8017340:	3318      	adds	r3, #24
 8017342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017344:	6812      	ldr	r2, [r2, #0]
 8017346:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	2200      	movs	r2, #0
 801734c:	701a      	strb	r2, [r3, #0]
 801734e:	2200      	movs	r2, #0
 8017350:	f042 0201 	orr.w	r2, r2, #1
 8017354:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017356:	697b      	ldr	r3, [r7, #20]
 8017358:	2200      	movs	r2, #0
 801735a:	f042 0208 	orr.w	r2, r2, #8
 801735e:	709a      	strb	r2, [r3, #2]
 8017360:	2200      	movs	r2, #0
 8017362:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	2206      	movs	r2, #6
 8017368:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801736a:	697b      	ldr	r3, [r7, #20]
 801736c:	2204      	movs	r2, #4
 801736e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017370:	f640 0306 	movw	r3, #2054	@ 0x806
 8017374:	9300      	str	r3, [sp, #0]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	68ba      	ldr	r2, [r7, #8]
 801737a:	69b9      	ldr	r1, [r7, #24]
 801737c:	68f8      	ldr	r0, [r7, #12]
 801737e:	f001 fb7b 	bl	8018a78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017382:	69b8      	ldr	r0, [r7, #24]
 8017384:	f7f8 f964 	bl	800f650 <pbuf_free>
  p = NULL;
 8017388:	2300      	movs	r3, #0
 801738a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801738c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017390:	4618      	mov	r0, r3
 8017392:	3720      	adds	r7, #32
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}
 8017398:	0801ee38 	.word	0x0801ee38
 801739c:	0801ef88 	.word	0x0801ef88
 80173a0:	0801eeb0 	.word	0x0801eeb0
 80173a4:	0801f038 	.word	0x0801f038
 80173a8:	0801f06c 	.word	0x0801f06c

080173ac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b088      	sub	sp, #32
 80173b0:	af04      	add	r7, sp, #16
 80173b2:	60f8      	str	r0, [r7, #12]
 80173b4:	60b9      	str	r1, [r7, #8]
 80173b6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80173c8:	2201      	movs	r2, #1
 80173ca:	9203      	str	r2, [sp, #12]
 80173cc:	68ba      	ldr	r2, [r7, #8]
 80173ce:	9202      	str	r2, [sp, #8]
 80173d0:	4a06      	ldr	r2, [pc, #24]	@ (80173ec <etharp_request_dst+0x40>)
 80173d2:	9201      	str	r2, [sp, #4]
 80173d4:	9300      	str	r3, [sp, #0]
 80173d6:	4603      	mov	r3, r0
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	68f8      	ldr	r0, [r7, #12]
 80173dc:	f7ff ff5a 	bl	8017294 <etharp_raw>
 80173e0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80173e2:	4618      	mov	r0, r3
 80173e4:	3710      	adds	r7, #16
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
 80173ea:	bf00      	nop
 80173ec:	0801f634 	.word	0x0801f634

080173f0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80173fa:	4a05      	ldr	r2, [pc, #20]	@ (8017410 <etharp_request+0x20>)
 80173fc:	6839      	ldr	r1, [r7, #0]
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f7ff ffd4 	bl	80173ac <etharp_request_dst>
 8017404:	4603      	mov	r3, r0
}
 8017406:	4618      	mov	r0, r3
 8017408:	3708      	adds	r7, #8
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}
 801740e:	bf00      	nop
 8017410:	0801f62c 	.word	0x0801f62c

08017414 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b08e      	sub	sp, #56	@ 0x38
 8017418:	af04      	add	r7, sp, #16
 801741a:	6078      	str	r0, [r7, #4]
 801741c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801741e:	4b79      	ldr	r3, [pc, #484]	@ (8017604 <icmp_input+0x1f0>)
 8017420:	689b      	ldr	r3, [r3, #8]
 8017422:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017426:	781b      	ldrb	r3, [r3, #0]
 8017428:	f003 030f 	and.w	r3, r3, #15
 801742c:	b2db      	uxtb	r3, r3
 801742e:	009b      	lsls	r3, r3, #2
 8017430:	b2db      	uxtb	r3, r3
 8017432:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8017434:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017436:	2b13      	cmp	r3, #19
 8017438:	f240 80cd 	bls.w	80175d6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	895b      	ldrh	r3, [r3, #10]
 8017440:	2b03      	cmp	r3, #3
 8017442:	f240 80ca 	bls.w	80175da <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	781b      	ldrb	r3, [r3, #0]
 801744c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017450:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017454:	2b00      	cmp	r3, #0
 8017456:	f000 80b7 	beq.w	80175c8 <icmp_input+0x1b4>
 801745a:	2b08      	cmp	r3, #8
 801745c:	f040 80b7 	bne.w	80175ce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017460:	4b69      	ldr	r3, [pc, #420]	@ (8017608 <icmp_input+0x1f4>)
 8017462:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017464:	4b67      	ldr	r3, [pc, #412]	@ (8017604 <icmp_input+0x1f0>)
 8017466:	695b      	ldr	r3, [r3, #20]
 8017468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801746c:	2be0      	cmp	r3, #224	@ 0xe0
 801746e:	f000 80bb 	beq.w	80175e8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017472:	4b64      	ldr	r3, [pc, #400]	@ (8017604 <icmp_input+0x1f0>)
 8017474:	695b      	ldr	r3, [r3, #20]
 8017476:	4a63      	ldr	r2, [pc, #396]	@ (8017604 <icmp_input+0x1f0>)
 8017478:	6812      	ldr	r2, [r2, #0]
 801747a:	4611      	mov	r1, r2
 801747c:	4618      	mov	r0, r3
 801747e:	f000 fbed 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8017482:	4603      	mov	r3, r0
 8017484:	2b00      	cmp	r3, #0
 8017486:	f040 80b1 	bne.w	80175ec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	891b      	ldrh	r3, [r3, #8]
 801748e:	2b07      	cmp	r3, #7
 8017490:	f240 80a5 	bls.w	80175de <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017494:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017496:	330e      	adds	r3, #14
 8017498:	4619      	mov	r1, r3
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f7f8 f842 	bl	800f524 <pbuf_add_header>
 80174a0:	4603      	mov	r3, r0
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d04b      	beq.n	801753e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	891a      	ldrh	r2, [r3, #8]
 80174aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174ac:	4413      	add	r3, r2
 80174ae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	891b      	ldrh	r3, [r3, #8]
 80174b4:	8b7a      	ldrh	r2, [r7, #26]
 80174b6:	429a      	cmp	r2, r3
 80174b8:	f0c0 809a 	bcc.w	80175f0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80174bc:	8b7b      	ldrh	r3, [r7, #26]
 80174be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80174c2:	4619      	mov	r1, r3
 80174c4:	200e      	movs	r0, #14
 80174c6:	f7f7 fddf 	bl	800f088 <pbuf_alloc>
 80174ca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 8090 	beq.w	80175f4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80174d4:	697b      	ldr	r3, [r7, #20]
 80174d6:	895b      	ldrh	r3, [r3, #10]
 80174d8:	461a      	mov	r2, r3
 80174da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174dc:	3308      	adds	r3, #8
 80174de:	429a      	cmp	r2, r3
 80174e0:	d203      	bcs.n	80174ea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80174e2:	6978      	ldr	r0, [r7, #20]
 80174e4:	f7f8 f8b4 	bl	800f650 <pbuf_free>
          goto icmperr;
 80174e8:	e085      	b.n	80175f6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80174f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80174f2:	4618      	mov	r0, r3
 80174f4:	f002 fc75 	bl	8019de2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80174f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80174fa:	4619      	mov	r1, r3
 80174fc:	6978      	ldr	r0, [r7, #20]
 80174fe:	f7f8 f821 	bl	800f544 <pbuf_remove_header>
 8017502:	4603      	mov	r3, r0
 8017504:	2b00      	cmp	r3, #0
 8017506:	d009      	beq.n	801751c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017508:	4b40      	ldr	r3, [pc, #256]	@ (801760c <icmp_input+0x1f8>)
 801750a:	22b6      	movs	r2, #182	@ 0xb6
 801750c:	4940      	ldr	r1, [pc, #256]	@ (8017610 <icmp_input+0x1fc>)
 801750e:	4841      	ldr	r0, [pc, #260]	@ (8017614 <icmp_input+0x200>)
 8017510:	f002 f9e8 	bl	80198e4 <iprintf>
          pbuf_free(r);
 8017514:	6978      	ldr	r0, [r7, #20]
 8017516:	f7f8 f89b 	bl	800f650 <pbuf_free>
          goto icmperr;
 801751a:	e06c      	b.n	80175f6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801751c:	6879      	ldr	r1, [r7, #4]
 801751e:	6978      	ldr	r0, [r7, #20]
 8017520:	f7f8 f9ba 	bl	800f898 <pbuf_copy>
 8017524:	4603      	mov	r3, r0
 8017526:	2b00      	cmp	r3, #0
 8017528:	d003      	beq.n	8017532 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801752a:	6978      	ldr	r0, [r7, #20]
 801752c:	f7f8 f890 	bl	800f650 <pbuf_free>
          goto icmperr;
 8017530:	e061      	b.n	80175f6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f7f8 f88c 	bl	800f650 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	607b      	str	r3, [r7, #4]
 801753c:	e00f      	b.n	801755e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801753e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017540:	330e      	adds	r3, #14
 8017542:	4619      	mov	r1, r3
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7f7 fffd 	bl	800f544 <pbuf_remove_header>
 801754a:	4603      	mov	r3, r0
 801754c:	2b00      	cmp	r3, #0
 801754e:	d006      	beq.n	801755e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017550:	4b2e      	ldr	r3, [pc, #184]	@ (801760c <icmp_input+0x1f8>)
 8017552:	22c7      	movs	r2, #199	@ 0xc7
 8017554:	4930      	ldr	r1, [pc, #192]	@ (8017618 <icmp_input+0x204>)
 8017556:	482f      	ldr	r0, [pc, #188]	@ (8017614 <icmp_input+0x200>)
 8017558:	f002 f9c4 	bl	80198e4 <iprintf>
          goto icmperr;
 801755c:	e04b      	b.n	80175f6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017564:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017566:	4619      	mov	r1, r3
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f7f7 ffdb 	bl	800f524 <pbuf_add_header>
 801756e:	4603      	mov	r3, r0
 8017570:	2b00      	cmp	r3, #0
 8017572:	d12b      	bne.n	80175cc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	685b      	ldr	r3, [r3, #4]
 8017578:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801757a:	69fb      	ldr	r3, [r7, #28]
 801757c:	681a      	ldr	r2, [r3, #0]
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017582:	4b20      	ldr	r3, [pc, #128]	@ (8017604 <icmp_input+0x1f0>)
 8017584:	691a      	ldr	r2, [r3, #16]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801758a:	693b      	ldr	r3, [r7, #16]
 801758c:	2200      	movs	r2, #0
 801758e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017590:	693b      	ldr	r3, [r7, #16]
 8017592:	2200      	movs	r2, #0
 8017594:	709a      	strb	r2, [r3, #2]
 8017596:	2200      	movs	r2, #0
 8017598:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	22ff      	movs	r2, #255	@ 0xff
 801759e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2200      	movs	r2, #0
 80175a4:	729a      	strb	r2, [r3, #10]
 80175a6:	2200      	movs	r2, #0
 80175a8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	9302      	str	r3, [sp, #8]
 80175ae:	2301      	movs	r3, #1
 80175b0:	9301      	str	r3, [sp, #4]
 80175b2:	2300      	movs	r3, #0
 80175b4:	9300      	str	r3, [sp, #0]
 80175b6:	23ff      	movs	r3, #255	@ 0xff
 80175b8:	2200      	movs	r2, #0
 80175ba:	69f9      	ldr	r1, [r7, #28]
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f000 fa75 	bl	8017aac <ip4_output_if>
 80175c2:	4603      	mov	r3, r0
 80175c4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80175c6:	e001      	b.n	80175cc <icmp_input+0x1b8>
      break;
 80175c8:	bf00      	nop
 80175ca:	e000      	b.n	80175ce <icmp_input+0x1ba>
      break;
 80175cc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f7f8 f83e 	bl	800f650 <pbuf_free>
  return;
 80175d4:	e013      	b.n	80175fe <icmp_input+0x1ea>
    goto lenerr;
 80175d6:	bf00      	nop
 80175d8:	e002      	b.n	80175e0 <icmp_input+0x1cc>
    goto lenerr;
 80175da:	bf00      	nop
 80175dc:	e000      	b.n	80175e0 <icmp_input+0x1cc>
        goto lenerr;
 80175de:	bf00      	nop
lenerr:
  pbuf_free(p);
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f7f8 f835 	bl	800f650 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80175e6:	e00a      	b.n	80175fe <icmp_input+0x1ea>
        goto icmperr;
 80175e8:	bf00      	nop
 80175ea:	e004      	b.n	80175f6 <icmp_input+0x1e2>
        goto icmperr;
 80175ec:	bf00      	nop
 80175ee:	e002      	b.n	80175f6 <icmp_input+0x1e2>
          goto icmperr;
 80175f0:	bf00      	nop
 80175f2:	e000      	b.n	80175f6 <icmp_input+0x1e2>
          goto icmperr;
 80175f4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7f8 f82a 	bl	800f650 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80175fc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80175fe:	3728      	adds	r7, #40	@ 0x28
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	2000c404 	.word	0x2000c404
 8017608:	2000c418 	.word	0x2000c418
 801760c:	0801f0b0 	.word	0x0801f0b0
 8017610:	0801f0e8 	.word	0x0801f0e8
 8017614:	0801f120 	.word	0x0801f120
 8017618:	0801f148 	.word	0x0801f148

0801761c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b082      	sub	sp, #8
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	460b      	mov	r3, r1
 8017626:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017628:	78fb      	ldrb	r3, [r7, #3]
 801762a:	461a      	mov	r2, r3
 801762c:	2103      	movs	r1, #3
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f000 f814 	bl	801765c <icmp_send_response>
}
 8017634:	bf00      	nop
 8017636:	3708      	adds	r7, #8
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}

0801763c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	460b      	mov	r3, r1
 8017646:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017648:	78fb      	ldrb	r3, [r7, #3]
 801764a:	461a      	mov	r2, r3
 801764c:	210b      	movs	r1, #11
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f000 f804 	bl	801765c <icmp_send_response>
}
 8017654:	bf00      	nop
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b08c      	sub	sp, #48	@ 0x30
 8017660:	af04      	add	r7, sp, #16
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	460b      	mov	r3, r1
 8017666:	70fb      	strb	r3, [r7, #3]
 8017668:	4613      	mov	r3, r2
 801766a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801766c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017670:	2124      	movs	r1, #36	@ 0x24
 8017672:	2022      	movs	r0, #34	@ 0x22
 8017674:	f7f7 fd08 	bl	800f088 <pbuf_alloc>
 8017678:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801767a:	69fb      	ldr	r3, [r7, #28]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d04c      	beq.n	801771a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017680:	69fb      	ldr	r3, [r7, #28]
 8017682:	895b      	ldrh	r3, [r3, #10]
 8017684:	2b23      	cmp	r3, #35	@ 0x23
 8017686:	d806      	bhi.n	8017696 <icmp_send_response+0x3a>
 8017688:	4b26      	ldr	r3, [pc, #152]	@ (8017724 <icmp_send_response+0xc8>)
 801768a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801768e:	4926      	ldr	r1, [pc, #152]	@ (8017728 <icmp_send_response+0xcc>)
 8017690:	4826      	ldr	r0, [pc, #152]	@ (801772c <icmp_send_response+0xd0>)
 8017692:	f002 f927 	bl	80198e4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	685b      	ldr	r3, [r3, #4]
 801769a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801769c:	69fb      	ldr	r3, [r7, #28]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	78fa      	ldrb	r2, [r7, #3]
 80176a6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80176a8:	697b      	ldr	r3, [r7, #20]
 80176aa:	78ba      	ldrb	r2, [r7, #2]
 80176ac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	2200      	movs	r2, #0
 80176b2:	711a      	strb	r2, [r3, #4]
 80176b4:	2200      	movs	r2, #0
 80176b6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80176b8:	697b      	ldr	r3, [r7, #20]
 80176ba:	2200      	movs	r2, #0
 80176bc:	719a      	strb	r2, [r3, #6]
 80176be:	2200      	movs	r2, #0
 80176c0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	685b      	ldr	r3, [r3, #4]
 80176c6:	f103 0008 	add.w	r0, r3, #8
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	221c      	movs	r2, #28
 80176d0:	4619      	mov	r1, r3
 80176d2:	f002 fb86 	bl	8019de2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80176d6:	69bb      	ldr	r3, [r7, #24]
 80176d8:	68db      	ldr	r3, [r3, #12]
 80176da:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80176dc:	f107 030c 	add.w	r3, r7, #12
 80176e0:	4618      	mov	r0, r3
 80176e2:	f000 f825 	bl	8017730 <ip4_route>
 80176e6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d011      	beq.n	8017712 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80176ee:	697b      	ldr	r3, [r7, #20]
 80176f0:	2200      	movs	r2, #0
 80176f2:	709a      	strb	r2, [r3, #2]
 80176f4:	2200      	movs	r2, #0
 80176f6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80176f8:	f107 020c 	add.w	r2, r7, #12
 80176fc:	693b      	ldr	r3, [r7, #16]
 80176fe:	9302      	str	r3, [sp, #8]
 8017700:	2301      	movs	r3, #1
 8017702:	9301      	str	r3, [sp, #4]
 8017704:	2300      	movs	r3, #0
 8017706:	9300      	str	r3, [sp, #0]
 8017708:	23ff      	movs	r3, #255	@ 0xff
 801770a:	2100      	movs	r1, #0
 801770c:	69f8      	ldr	r0, [r7, #28]
 801770e:	f000 f9cd 	bl	8017aac <ip4_output_if>
  }
  pbuf_free(q);
 8017712:	69f8      	ldr	r0, [r7, #28]
 8017714:	f7f7 ff9c 	bl	800f650 <pbuf_free>
 8017718:	e000      	b.n	801771c <icmp_send_response+0xc0>
    return;
 801771a:	bf00      	nop
}
 801771c:	3720      	adds	r7, #32
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	0801f0b0 	.word	0x0801f0b0
 8017728:	0801f17c 	.word	0x0801f17c
 801772c:	0801f120 	.word	0x0801f120

08017730 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017730:	b480      	push	{r7}
 8017732:	b085      	sub	sp, #20
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017738:	4b33      	ldr	r3, [pc, #204]	@ (8017808 <ip4_route+0xd8>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	60fb      	str	r3, [r7, #12]
 801773e:	e036      	b.n	80177ae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017746:	f003 0301 	and.w	r3, r3, #1
 801774a:	b2db      	uxtb	r3, r3
 801774c:	2b00      	cmp	r3, #0
 801774e:	d02b      	beq.n	80177a8 <ip4_route+0x78>
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017756:	089b      	lsrs	r3, r3, #2
 8017758:	f003 0301 	and.w	r3, r3, #1
 801775c:	b2db      	uxtb	r3, r3
 801775e:	2b00      	cmp	r3, #0
 8017760:	d022      	beq.n	80177a8 <ip4_route+0x78>
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	3304      	adds	r3, #4
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d01d      	beq.n	80177a8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681a      	ldr	r2, [r3, #0]
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	3304      	adds	r3, #4
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	405a      	eors	r2, r3
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	3308      	adds	r3, #8
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	4013      	ands	r3, r2
 8017780:	2b00      	cmp	r3, #0
 8017782:	d101      	bne.n	8017788 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	e038      	b.n	80177fa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801778e:	f003 0302 	and.w	r3, r3, #2
 8017792:	2b00      	cmp	r3, #0
 8017794:	d108      	bne.n	80177a8 <ip4_route+0x78>
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	330c      	adds	r3, #12
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	429a      	cmp	r2, r3
 80177a2:	d101      	bne.n	80177a8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	e028      	b.n	80177fa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	60fb      	str	r3, [r7, #12]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d1c5      	bne.n	8017740 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80177b4:	4b15      	ldr	r3, [pc, #84]	@ (801780c <ip4_route+0xdc>)
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d01a      	beq.n	80177f2 <ip4_route+0xc2>
 80177bc:	4b13      	ldr	r3, [pc, #76]	@ (801780c <ip4_route+0xdc>)
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80177c4:	f003 0301 	and.w	r3, r3, #1
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d012      	beq.n	80177f2 <ip4_route+0xc2>
 80177cc:	4b0f      	ldr	r3, [pc, #60]	@ (801780c <ip4_route+0xdc>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80177d4:	f003 0304 	and.w	r3, r3, #4
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00a      	beq.n	80177f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177dc:	4b0b      	ldr	r3, [pc, #44]	@ (801780c <ip4_route+0xdc>)
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	3304      	adds	r3, #4
 80177e2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d004      	beq.n	80177f2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80177f0:	d101      	bne.n	80177f6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80177f2:	2300      	movs	r3, #0
 80177f4:	e001      	b.n	80177fa <ip4_route+0xca>
  }

  return netif_default;
 80177f6:	4b05      	ldr	r3, [pc, #20]	@ (801780c <ip4_route+0xdc>)
 80177f8:	681b      	ldr	r3, [r3, #0]
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3714      	adds	r7, #20
 80177fe:	46bd      	mov	sp, r7
 8017800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop
 8017808:	20011d0c 	.word	0x20011d0c
 801780c:	20011d10 	.word	0x20011d10

08017810 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b082      	sub	sp, #8
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801781e:	f003 0301 	and.w	r3, r3, #1
 8017822:	b2db      	uxtb	r3, r3
 8017824:	2b00      	cmp	r3, #0
 8017826:	d016      	beq.n	8017856 <ip4_input_accept+0x46>
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	3304      	adds	r3, #4
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d011      	beq.n	8017856 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017832:	4b0b      	ldr	r3, [pc, #44]	@ (8017860 <ip4_input_accept+0x50>)
 8017834:	695a      	ldr	r2, [r3, #20]
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	3304      	adds	r3, #4
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	429a      	cmp	r2, r3
 801783e:	d008      	beq.n	8017852 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017840:	4b07      	ldr	r3, [pc, #28]	@ (8017860 <ip4_input_accept+0x50>)
 8017842:	695b      	ldr	r3, [r3, #20]
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	4618      	mov	r0, r3
 8017848:	f000 fa08 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 801784c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801784e:	2b00      	cmp	r3, #0
 8017850:	d001      	beq.n	8017856 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017852:	2301      	movs	r3, #1
 8017854:	e000      	b.n	8017858 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017856:	2300      	movs	r3, #0
}
 8017858:	4618      	mov	r0, r3
 801785a:	3708      	adds	r7, #8
 801785c:	46bd      	mov	sp, r7
 801785e:	bd80      	pop	{r7, pc}
 8017860:	2000c404 	.word	0x2000c404

08017864 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b086      	sub	sp, #24
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
 801786c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	781b      	ldrb	r3, [r3, #0]
 8017878:	091b      	lsrs	r3, r3, #4
 801787a:	b2db      	uxtb	r3, r3
 801787c:	2b04      	cmp	r3, #4
 801787e:	d004      	beq.n	801788a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017880:	6878      	ldr	r0, [r7, #4]
 8017882:	f7f7 fee5 	bl	800f650 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017886:	2300      	movs	r3, #0
 8017888:	e107      	b.n	8017a9a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	781b      	ldrb	r3, [r3, #0]
 801788e:	f003 030f 	and.w	r3, r3, #15
 8017892:	b2db      	uxtb	r3, r3
 8017894:	009b      	lsls	r3, r3, #2
 8017896:	b2db      	uxtb	r3, r3
 8017898:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	885b      	ldrh	r3, [r3, #2]
 801789e:	b29b      	uxth	r3, r3
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7f6 fb29 	bl	800def8 <lwip_htons>
 80178a6:	4603      	mov	r3, r0
 80178a8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	891b      	ldrh	r3, [r3, #8]
 80178ae:	89ba      	ldrh	r2, [r7, #12]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d204      	bcs.n	80178be <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80178b4:	89bb      	ldrh	r3, [r7, #12]
 80178b6:	4619      	mov	r1, r3
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f7f7 fd43 	bl	800f344 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	895b      	ldrh	r3, [r3, #10]
 80178c2:	89fa      	ldrh	r2, [r7, #14]
 80178c4:	429a      	cmp	r2, r3
 80178c6:	d807      	bhi.n	80178d8 <ip4_input+0x74>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	891b      	ldrh	r3, [r3, #8]
 80178cc:	89ba      	ldrh	r2, [r7, #12]
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d802      	bhi.n	80178d8 <ip4_input+0x74>
 80178d2:	89fb      	ldrh	r3, [r7, #14]
 80178d4:	2b13      	cmp	r3, #19
 80178d6:	d804      	bhi.n	80178e2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80178d8:	6878      	ldr	r0, [r7, #4]
 80178da:	f7f7 feb9 	bl	800f650 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80178de:	2300      	movs	r3, #0
 80178e0:	e0db      	b.n	8017a9a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80178e2:	697b      	ldr	r3, [r7, #20]
 80178e4:	691b      	ldr	r3, [r3, #16]
 80178e6:	4a6f      	ldr	r2, [pc, #444]	@ (8017aa4 <ip4_input+0x240>)
 80178e8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	68db      	ldr	r3, [r3, #12]
 80178ee:	4a6d      	ldr	r2, [pc, #436]	@ (8017aa4 <ip4_input+0x240>)
 80178f0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80178f2:	4b6c      	ldr	r3, [pc, #432]	@ (8017aa4 <ip4_input+0x240>)
 80178f4:	695b      	ldr	r3, [r3, #20]
 80178f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80178fa:	2be0      	cmp	r3, #224	@ 0xe0
 80178fc:	d112      	bne.n	8017924 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017904:	f003 0301 	and.w	r3, r3, #1
 8017908:	b2db      	uxtb	r3, r3
 801790a:	2b00      	cmp	r3, #0
 801790c:	d007      	beq.n	801791e <ip4_input+0xba>
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	3304      	adds	r3, #4
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d002      	beq.n	801791e <ip4_input+0xba>
      netif = inp;
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	613b      	str	r3, [r7, #16]
 801791c:	e02a      	b.n	8017974 <ip4_input+0x110>
    } else {
      netif = NULL;
 801791e:	2300      	movs	r3, #0
 8017920:	613b      	str	r3, [r7, #16]
 8017922:	e027      	b.n	8017974 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017924:	6838      	ldr	r0, [r7, #0]
 8017926:	f7ff ff73 	bl	8017810 <ip4_input_accept>
 801792a:	4603      	mov	r3, r0
 801792c:	2b00      	cmp	r3, #0
 801792e:	d002      	beq.n	8017936 <ip4_input+0xd2>
      netif = inp;
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	613b      	str	r3, [r7, #16]
 8017934:	e01e      	b.n	8017974 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017936:	2300      	movs	r3, #0
 8017938:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801793a:	4b5a      	ldr	r3, [pc, #360]	@ (8017aa4 <ip4_input+0x240>)
 801793c:	695b      	ldr	r3, [r3, #20]
 801793e:	b2db      	uxtb	r3, r3
 8017940:	2b7f      	cmp	r3, #127	@ 0x7f
 8017942:	d017      	beq.n	8017974 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017944:	4b58      	ldr	r3, [pc, #352]	@ (8017aa8 <ip4_input+0x244>)
 8017946:	681b      	ldr	r3, [r3, #0]
 8017948:	613b      	str	r3, [r7, #16]
 801794a:	e00e      	b.n	801796a <ip4_input+0x106>
          if (netif == inp) {
 801794c:	693a      	ldr	r2, [r7, #16]
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	429a      	cmp	r2, r3
 8017952:	d006      	beq.n	8017962 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017954:	6938      	ldr	r0, [r7, #16]
 8017956:	f7ff ff5b 	bl	8017810 <ip4_input_accept>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d108      	bne.n	8017972 <ip4_input+0x10e>
 8017960:	e000      	b.n	8017964 <ip4_input+0x100>
            continue;
 8017962:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017964:	693b      	ldr	r3, [r7, #16]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	613b      	str	r3, [r7, #16]
 801796a:	693b      	ldr	r3, [r7, #16]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d1ed      	bne.n	801794c <ip4_input+0xe8>
 8017970:	e000      	b.n	8017974 <ip4_input+0x110>
            break;
 8017972:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017974:	4b4b      	ldr	r3, [pc, #300]	@ (8017aa4 <ip4_input+0x240>)
 8017976:	691b      	ldr	r3, [r3, #16]
 8017978:	6839      	ldr	r1, [r7, #0]
 801797a:	4618      	mov	r0, r3
 801797c:	f000 f96e 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8017980:	4603      	mov	r3, r0
 8017982:	2b00      	cmp	r3, #0
 8017984:	d105      	bne.n	8017992 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017986:	4b47      	ldr	r3, [pc, #284]	@ (8017aa4 <ip4_input+0x240>)
 8017988:	691b      	ldr	r3, [r3, #16]
 801798a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801798e:	2be0      	cmp	r3, #224	@ 0xe0
 8017990:	d104      	bne.n	801799c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f7f7 fe5c 	bl	800f650 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017998:	2300      	movs	r3, #0
 801799a:	e07e      	b.n	8017a9a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d104      	bne.n	80179ac <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7f7 fe54 	bl	800f650 <pbuf_free>
    return ERR_OK;
 80179a8:	2300      	movs	r3, #0
 80179aa:	e076      	b.n	8017a9a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	88db      	ldrh	r3, [r3, #6]
 80179b0:	b29b      	uxth	r3, r3
 80179b2:	461a      	mov	r2, r3
 80179b4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80179b8:	4013      	ands	r3, r2
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d00b      	beq.n	80179d6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f000 fc92 	bl	80182e8 <ip4_reass>
 80179c4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d101      	bne.n	80179d0 <ip4_input+0x16c>
      return ERR_OK;
 80179cc:	2300      	movs	r3, #0
 80179ce:	e064      	b.n	8017a9a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	685b      	ldr	r3, [r3, #4]
 80179d4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80179d6:	4a33      	ldr	r2, [pc, #204]	@ (8017aa4 <ip4_input+0x240>)
 80179d8:	693b      	ldr	r3, [r7, #16]
 80179da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80179dc:	4a31      	ldr	r2, [pc, #196]	@ (8017aa4 <ip4_input+0x240>)
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80179e2:	4a30      	ldr	r2, [pc, #192]	@ (8017aa4 <ip4_input+0x240>)
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	f003 030f 	and.w	r3, r3, #15
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	009b      	lsls	r3, r3, #2
 80179f4:	b2db      	uxtb	r3, r3
 80179f6:	461a      	mov	r2, r3
 80179f8:	4b2a      	ldr	r3, [pc, #168]	@ (8017aa4 <ip4_input+0x240>)
 80179fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80179fc:	89fb      	ldrh	r3, [r7, #14]
 80179fe:	4619      	mov	r1, r3
 8017a00:	6878      	ldr	r0, [r7, #4]
 8017a02:	f7f7 fd9f 	bl	800f544 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	7a5b      	ldrb	r3, [r3, #9]
 8017a0a:	2b11      	cmp	r3, #17
 8017a0c:	d006      	beq.n	8017a1c <ip4_input+0x1b8>
 8017a0e:	2b11      	cmp	r3, #17
 8017a10:	dc13      	bgt.n	8017a3a <ip4_input+0x1d6>
 8017a12:	2b01      	cmp	r3, #1
 8017a14:	d00c      	beq.n	8017a30 <ip4_input+0x1cc>
 8017a16:	2b06      	cmp	r3, #6
 8017a18:	d005      	beq.n	8017a26 <ip4_input+0x1c2>
 8017a1a:	e00e      	b.n	8017a3a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017a1c:	6839      	ldr	r1, [r7, #0]
 8017a1e:	6878      	ldr	r0, [r7, #4]
 8017a20:	f7fe fb5a 	bl	80160d8 <udp_input>
        break;
 8017a24:	e026      	b.n	8017a74 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017a26:	6839      	ldr	r1, [r7, #0]
 8017a28:	6878      	ldr	r0, [r7, #4]
 8017a2a:	f7f9 ff19 	bl	8011860 <tcp_input>
        break;
 8017a2e:	e021      	b.n	8017a74 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017a30:	6839      	ldr	r1, [r7, #0]
 8017a32:	6878      	ldr	r0, [r7, #4]
 8017a34:	f7ff fcee 	bl	8017414 <icmp_input>
        break;
 8017a38:	e01c      	b.n	8017a74 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8017aa4 <ip4_input+0x240>)
 8017a3c:	695b      	ldr	r3, [r3, #20]
 8017a3e:	6939      	ldr	r1, [r7, #16]
 8017a40:	4618      	mov	r0, r3
 8017a42:	f000 f90b 	bl	8017c5c <ip4_addr_isbroadcast_u32>
 8017a46:	4603      	mov	r3, r0
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d10f      	bne.n	8017a6c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a4c:	4b15      	ldr	r3, [pc, #84]	@ (8017aa4 <ip4_input+0x240>)
 8017a4e:	695b      	ldr	r3, [r3, #20]
 8017a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017a54:	2be0      	cmp	r3, #224	@ 0xe0
 8017a56:	d009      	beq.n	8017a6c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017a58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017a5c:	4619      	mov	r1, r3
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f7f7 fde3 	bl	800f62a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017a64:	2102      	movs	r1, #2
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f7ff fdd8 	bl	801761c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f7f7 fdef 	bl	800f650 <pbuf_free>
        break;
 8017a72:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017a74:	4b0b      	ldr	r3, [pc, #44]	@ (8017aa4 <ip4_input+0x240>)
 8017a76:	2200      	movs	r2, #0
 8017a78:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8017aa4 <ip4_input+0x240>)
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017a80:	4b08      	ldr	r3, [pc, #32]	@ (8017aa4 <ip4_input+0x240>)
 8017a82:	2200      	movs	r2, #0
 8017a84:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017a86:	4b07      	ldr	r3, [pc, #28]	@ (8017aa4 <ip4_input+0x240>)
 8017a88:	2200      	movs	r2, #0
 8017a8a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017a8c:	4b05      	ldr	r3, [pc, #20]	@ (8017aa4 <ip4_input+0x240>)
 8017a8e:	2200      	movs	r2, #0
 8017a90:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017a92:	4b04      	ldr	r3, [pc, #16]	@ (8017aa4 <ip4_input+0x240>)
 8017a94:	2200      	movs	r2, #0
 8017a96:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017a98:	2300      	movs	r3, #0
}
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	3718      	adds	r7, #24
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	2000c404 	.word	0x2000c404
 8017aa8:	20011d0c 	.word	0x20011d0c

08017aac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b08a      	sub	sp, #40	@ 0x28
 8017ab0:	af04      	add	r7, sp, #16
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
 8017ab8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d009      	beq.n	8017ad8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017ac4:	68bb      	ldr	r3, [r7, #8]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d003      	beq.n	8017ad2 <ip4_output_if+0x26>
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d102      	bne.n	8017ad8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad4:	3304      	adds	r3, #4
 8017ad6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017ad8:	78fa      	ldrb	r2, [r7, #3]
 8017ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017adc:	9302      	str	r3, [sp, #8]
 8017ade:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017ae2:	9301      	str	r3, [sp, #4]
 8017ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ae8:	9300      	str	r3, [sp, #0]
 8017aea:	4613      	mov	r3, r2
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	6979      	ldr	r1, [r7, #20]
 8017af0:	68f8      	ldr	r0, [r7, #12]
 8017af2:	f000 f805 	bl	8017b00 <ip4_output_if_src>
 8017af6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	3718      	adds	r7, #24
 8017afc:	46bd      	mov	sp, r7
 8017afe:	bd80      	pop	{r7, pc}

08017b00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b088      	sub	sp, #32
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	60b9      	str	r1, [r7, #8]
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	7b9b      	ldrb	r3, [r3, #14]
 8017b12:	2b01      	cmp	r3, #1
 8017b14:	d006      	beq.n	8017b24 <ip4_output_if_src+0x24>
 8017b16:	4b4b      	ldr	r3, [pc, #300]	@ (8017c44 <ip4_output_if_src+0x144>)
 8017b18:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8017b1c:	494a      	ldr	r1, [pc, #296]	@ (8017c48 <ip4_output_if_src+0x148>)
 8017b1e:	484b      	ldr	r0, [pc, #300]	@ (8017c4c <ip4_output_if_src+0x14c>)
 8017b20:	f001 fee0 	bl	80198e4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d060      	beq.n	8017bec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017b2a:	2314      	movs	r3, #20
 8017b2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017b2e:	2114      	movs	r1, #20
 8017b30:	68f8      	ldr	r0, [r7, #12]
 8017b32:	f7f7 fcf7 	bl	800f524 <pbuf_add_header>
 8017b36:	4603      	mov	r3, r0
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d002      	beq.n	8017b42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b3c:	f06f 0301 	mvn.w	r3, #1
 8017b40:	e07c      	b.n	8017c3c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	895b      	ldrh	r3, [r3, #10]
 8017b4c:	2b13      	cmp	r3, #19
 8017b4e:	d806      	bhi.n	8017b5e <ip4_output_if_src+0x5e>
 8017b50:	4b3c      	ldr	r3, [pc, #240]	@ (8017c44 <ip4_output_if_src+0x144>)
 8017b52:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8017b56:	493e      	ldr	r1, [pc, #248]	@ (8017c50 <ip4_output_if_src+0x150>)
 8017b58:	483c      	ldr	r0, [pc, #240]	@ (8017c4c <ip4_output_if_src+0x14c>)
 8017b5a:	f001 fec3 	bl	80198e4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017b5e:	69fb      	ldr	r3, [r7, #28]
 8017b60:	78fa      	ldrb	r2, [r7, #3]
 8017b62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017b6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	69fb      	ldr	r3, [r7, #28]
 8017b72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017b74:	8b7b      	ldrh	r3, [r7, #26]
 8017b76:	089b      	lsrs	r3, r3, #2
 8017b78:	b29b      	uxth	r3, r3
 8017b7a:	b2db      	uxtb	r3, r3
 8017b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b80:	b2da      	uxtb	r2, r3
 8017b82:	69fb      	ldr	r3, [r7, #28]
 8017b84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017b86:	69fb      	ldr	r3, [r7, #28]
 8017b88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017b8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	891b      	ldrh	r3, [r3, #8]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7f6 f9b0 	bl	800def8 <lwip_htons>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	461a      	mov	r2, r3
 8017b9c:	69fb      	ldr	r3, [r7, #28]
 8017b9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ba0:	69fb      	ldr	r3, [r7, #28]
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	719a      	strb	r2, [r3, #6]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017baa:	4b2a      	ldr	r3, [pc, #168]	@ (8017c54 <ip4_output_if_src+0x154>)
 8017bac:	881b      	ldrh	r3, [r3, #0]
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7f6 f9a2 	bl	800def8 <lwip_htons>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017bbc:	4b25      	ldr	r3, [pc, #148]	@ (8017c54 <ip4_output_if_src+0x154>)
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	3301      	adds	r3, #1
 8017bc2:	b29a      	uxth	r2, r3
 8017bc4:	4b23      	ldr	r3, [pc, #140]	@ (8017c54 <ip4_output_if_src+0x154>)
 8017bc6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d104      	bne.n	8017bd8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017bce:	4b22      	ldr	r3, [pc, #136]	@ (8017c58 <ip4_output_if_src+0x158>)
 8017bd0:	681a      	ldr	r2, [r3, #0]
 8017bd2:	69fb      	ldr	r3, [r7, #28]
 8017bd4:	60da      	str	r2, [r3, #12]
 8017bd6:	e003      	b.n	8017be0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	69fb      	ldr	r3, [r7, #28]
 8017bde:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	2200      	movs	r2, #0
 8017be4:	729a      	strb	r2, [r3, #10]
 8017be6:	2200      	movs	r2, #0
 8017be8:	72da      	strb	r2, [r3, #11]
 8017bea:	e00f      	b.n	8017c0c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017bec:	68fb      	ldr	r3, [r7, #12]
 8017bee:	895b      	ldrh	r3, [r3, #10]
 8017bf0:	2b13      	cmp	r3, #19
 8017bf2:	d802      	bhi.n	8017bfa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017bf4:	f06f 0301 	mvn.w	r3, #1
 8017bf8:	e020      	b.n	8017c3c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	685b      	ldr	r3, [r3, #4]
 8017bfe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017c00:	69fb      	ldr	r3, [r7, #28]
 8017c02:	691b      	ldr	r3, [r3, #16]
 8017c04:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017c06:	f107 0314 	add.w	r3, r7, #20
 8017c0a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d00c      	beq.n	8017c2e <ip4_output_if_src+0x12e>
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	891a      	ldrh	r2, [r3, #8]
 8017c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c1a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8017c1c:	429a      	cmp	r2, r3
 8017c1e:	d906      	bls.n	8017c2e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017c24:	68f8      	ldr	r0, [r7, #12]
 8017c26:	f000 fd53 	bl	80186d0 <ip4_frag>
 8017c2a:	4603      	mov	r3, r0
 8017c2c:	e006      	b.n	8017c3c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c30:	695b      	ldr	r3, [r3, #20]
 8017c32:	687a      	ldr	r2, [r7, #4]
 8017c34:	68f9      	ldr	r1, [r7, #12]
 8017c36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017c38:	4798      	blx	r3
 8017c3a:	4603      	mov	r3, r0
}
 8017c3c:	4618      	mov	r0, r3
 8017c3e:	3720      	adds	r7, #32
 8017c40:	46bd      	mov	sp, r7
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	0801f1a8 	.word	0x0801f1a8
 8017c48:	0801f1dc 	.word	0x0801f1dc
 8017c4c:	0801f1e8 	.word	0x0801f1e8
 8017c50:	0801f210 	.word	0x0801f210
 8017c54:	20011e6a 	.word	0x20011e6a
 8017c58:	0801f628 	.word	0x0801f628

08017c5c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017c5c:	b480      	push	{r7}
 8017c5e:	b085      	sub	sp, #20
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
 8017c64:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c70:	d002      	beq.n	8017c78 <ip4_addr_isbroadcast_u32+0x1c>
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d101      	bne.n	8017c7c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017c78:	2301      	movs	r3, #1
 8017c7a:	e02a      	b.n	8017cd2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017c82:	f003 0302 	and.w	r3, r3, #2
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d101      	bne.n	8017c8e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	e021      	b.n	8017cd2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	3304      	adds	r3, #4
 8017c92:	681b      	ldr	r3, [r3, #0]
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	429a      	cmp	r2, r3
 8017c98:	d101      	bne.n	8017c9e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	e019      	b.n	8017cd2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017c9e:	68fa      	ldr	r2, [r7, #12]
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	3304      	adds	r3, #4
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	405a      	eors	r2, r3
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	3308      	adds	r3, #8
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4013      	ands	r3, r2
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d10d      	bne.n	8017cd0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017cb4:	683b      	ldr	r3, [r7, #0]
 8017cb6:	3308      	adds	r3, #8
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	43da      	mvns	r2, r3
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	3308      	adds	r3, #8
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017cc8:	429a      	cmp	r2, r3
 8017cca:	d101      	bne.n	8017cd0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017ccc:	2301      	movs	r3, #1
 8017cce:	e000      	b.n	8017cd2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017cd0:	2300      	movs	r3, #0
  }
}
 8017cd2:	4618      	mov	r0, r3
 8017cd4:	3714      	adds	r7, #20
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cdc:	4770      	bx	lr
	...

08017ce0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b084      	sub	sp, #16
 8017ce4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017cea:	4b12      	ldr	r3, [pc, #72]	@ (8017d34 <ip_reass_tmr+0x54>)
 8017cec:	681b      	ldr	r3, [r3, #0]
 8017cee:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017cf0:	e018      	b.n	8017d24 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	7fdb      	ldrb	r3, [r3, #31]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d00b      	beq.n	8017d12 <ip_reass_tmr+0x32>
      r->timer--;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	7fdb      	ldrb	r3, [r3, #31]
 8017cfe:	3b01      	subs	r3, #1
 8017d00:	b2da      	uxtb	r2, r3
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	60fb      	str	r3, [r7, #12]
 8017d10:	e008      	b.n	8017d24 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017d12:	68fb      	ldr	r3, [r7, #12]
 8017d14:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017d1c:	68b9      	ldr	r1, [r7, #8]
 8017d1e:	6878      	ldr	r0, [r7, #4]
 8017d20:	f000 f80a 	bl	8017d38 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d1e3      	bne.n	8017cf2 <ip_reass_tmr+0x12>
    }
  }
}
 8017d2a:	bf00      	nop
 8017d2c:	bf00      	nop
 8017d2e:	3710      	adds	r7, #16
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}
 8017d34:	20011e6c 	.word	0x20011e6c

08017d38 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b088      	sub	sp, #32
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
 8017d40:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017d42:	2300      	movs	r3, #0
 8017d44:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017d46:	683a      	ldr	r2, [r7, #0]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d105      	bne.n	8017d5a <ip_reass_free_complete_datagram+0x22>
 8017d4e:	4b45      	ldr	r3, [pc, #276]	@ (8017e64 <ip_reass_free_complete_datagram+0x12c>)
 8017d50:	22ab      	movs	r2, #171	@ 0xab
 8017d52:	4945      	ldr	r1, [pc, #276]	@ (8017e68 <ip_reass_free_complete_datagram+0x130>)
 8017d54:	4845      	ldr	r0, [pc, #276]	@ (8017e6c <ip_reass_free_complete_datagram+0x134>)
 8017d56:	f001 fdc5 	bl	80198e4 <iprintf>
  if (prev != NULL) {
 8017d5a:	683b      	ldr	r3, [r7, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d00a      	beq.n	8017d76 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	687a      	ldr	r2, [r7, #4]
 8017d66:	429a      	cmp	r2, r3
 8017d68:	d005      	beq.n	8017d76 <ip_reass_free_complete_datagram+0x3e>
 8017d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8017e64 <ip_reass_free_complete_datagram+0x12c>)
 8017d6c:	22ad      	movs	r2, #173	@ 0xad
 8017d6e:	4940      	ldr	r1, [pc, #256]	@ (8017e70 <ip_reass_free_complete_datagram+0x138>)
 8017d70:	483e      	ldr	r0, [pc, #248]	@ (8017e6c <ip_reass_free_complete_datagram+0x134>)
 8017d72:	f001 fdb7 	bl	80198e4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	685b      	ldr	r3, [r3, #4]
 8017d7c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	889b      	ldrh	r3, [r3, #4]
 8017d82:	b29b      	uxth	r3, r3
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d12a      	bne.n	8017dde <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	681a      	ldr	r2, [r3, #0]
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017d96:	69bb      	ldr	r3, [r7, #24]
 8017d98:	6858      	ldr	r0, [r3, #4]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	3308      	adds	r3, #8
 8017d9e:	2214      	movs	r2, #20
 8017da0:	4619      	mov	r1, r3
 8017da2:	f002 f81e 	bl	8019de2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017da6:	2101      	movs	r1, #1
 8017da8:	69b8      	ldr	r0, [r7, #24]
 8017daa:	f7ff fc47 	bl	801763c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017dae:	69b8      	ldr	r0, [r7, #24]
 8017db0:	f7f7 fcdc 	bl	800f76c <pbuf_clen>
 8017db4:	4603      	mov	r3, r0
 8017db6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017db8:	8bfa      	ldrh	r2, [r7, #30]
 8017dba:	8a7b      	ldrh	r3, [r7, #18]
 8017dbc:	4413      	add	r3, r2
 8017dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017dc2:	db05      	blt.n	8017dd0 <ip_reass_free_complete_datagram+0x98>
 8017dc4:	4b27      	ldr	r3, [pc, #156]	@ (8017e64 <ip_reass_free_complete_datagram+0x12c>)
 8017dc6:	22bc      	movs	r2, #188	@ 0xbc
 8017dc8:	492a      	ldr	r1, [pc, #168]	@ (8017e74 <ip_reass_free_complete_datagram+0x13c>)
 8017dca:	4828      	ldr	r0, [pc, #160]	@ (8017e6c <ip_reass_free_complete_datagram+0x134>)
 8017dcc:	f001 fd8a 	bl	80198e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017dd0:	8bfa      	ldrh	r2, [r7, #30]
 8017dd2:	8a7b      	ldrh	r3, [r7, #18]
 8017dd4:	4413      	add	r3, r2
 8017dd6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017dd8:	69b8      	ldr	r0, [r7, #24]
 8017dda:	f7f7 fc39 	bl	800f650 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	685b      	ldr	r3, [r3, #4]
 8017de2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017de4:	e01f      	b.n	8017e26 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	685b      	ldr	r3, [r3, #4]
 8017dea:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017dec:	69bb      	ldr	r3, [r7, #24]
 8017dee:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017df0:	697b      	ldr	r3, [r7, #20]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017df6:	68f8      	ldr	r0, [r7, #12]
 8017df8:	f7f7 fcb8 	bl	800f76c <pbuf_clen>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017e00:	8bfa      	ldrh	r2, [r7, #30]
 8017e02:	8a7b      	ldrh	r3, [r7, #18]
 8017e04:	4413      	add	r3, r2
 8017e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017e0a:	db05      	blt.n	8017e18 <ip_reass_free_complete_datagram+0xe0>
 8017e0c:	4b15      	ldr	r3, [pc, #84]	@ (8017e64 <ip_reass_free_complete_datagram+0x12c>)
 8017e0e:	22cc      	movs	r2, #204	@ 0xcc
 8017e10:	4918      	ldr	r1, [pc, #96]	@ (8017e74 <ip_reass_free_complete_datagram+0x13c>)
 8017e12:	4816      	ldr	r0, [pc, #88]	@ (8017e6c <ip_reass_free_complete_datagram+0x134>)
 8017e14:	f001 fd66 	bl	80198e4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017e18:	8bfa      	ldrh	r2, [r7, #30]
 8017e1a:	8a7b      	ldrh	r3, [r7, #18]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f7f7 fc15 	bl	800f650 <pbuf_free>
  while (p != NULL) {
 8017e26:	69bb      	ldr	r3, [r7, #24]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d1dc      	bne.n	8017de6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017e2c:	6839      	ldr	r1, [r7, #0]
 8017e2e:	6878      	ldr	r0, [r7, #4]
 8017e30:	f000 f8c2 	bl	8017fb8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017e34:	4b10      	ldr	r3, [pc, #64]	@ (8017e78 <ip_reass_free_complete_datagram+0x140>)
 8017e36:	881b      	ldrh	r3, [r3, #0]
 8017e38:	8bfa      	ldrh	r2, [r7, #30]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d905      	bls.n	8017e4a <ip_reass_free_complete_datagram+0x112>
 8017e3e:	4b09      	ldr	r3, [pc, #36]	@ (8017e64 <ip_reass_free_complete_datagram+0x12c>)
 8017e40:	22d2      	movs	r2, #210	@ 0xd2
 8017e42:	490e      	ldr	r1, [pc, #56]	@ (8017e7c <ip_reass_free_complete_datagram+0x144>)
 8017e44:	4809      	ldr	r0, [pc, #36]	@ (8017e6c <ip_reass_free_complete_datagram+0x134>)
 8017e46:	f001 fd4d 	bl	80198e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8017e78 <ip_reass_free_complete_datagram+0x140>)
 8017e4c:	881a      	ldrh	r2, [r3, #0]
 8017e4e:	8bfb      	ldrh	r3, [r7, #30]
 8017e50:	1ad3      	subs	r3, r2, r3
 8017e52:	b29a      	uxth	r2, r3
 8017e54:	4b08      	ldr	r3, [pc, #32]	@ (8017e78 <ip_reass_free_complete_datagram+0x140>)
 8017e56:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017e58:	8bfb      	ldrh	r3, [r7, #30]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3720      	adds	r7, #32
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	0801f240 	.word	0x0801f240
 8017e68:	0801f27c 	.word	0x0801f27c
 8017e6c:	0801f288 	.word	0x0801f288
 8017e70:	0801f2b0 	.word	0x0801f2b0
 8017e74:	0801f2c4 	.word	0x0801f2c4
 8017e78:	20011e70 	.word	0x20011e70
 8017e7c:	0801f2e4 	.word	0x0801f2e4

08017e80 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b08a      	sub	sp, #40	@ 0x28
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
 8017e88:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017e92:	2300      	movs	r3, #0
 8017e94:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017e96:	2300      	movs	r3, #0
 8017e98:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017e9e:	4b28      	ldr	r3, [pc, #160]	@ (8017f40 <ip_reass_remove_oldest_datagram+0xc0>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017ea4:	e030      	b.n	8017f08 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ea8:	695a      	ldr	r2, [r3, #20]
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	68db      	ldr	r3, [r3, #12]
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d10c      	bne.n	8017ecc <ip_reass_remove_oldest_datagram+0x4c>
 8017eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eb4:	699a      	ldr	r2, [r3, #24]
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	691b      	ldr	r3, [r3, #16]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d106      	bne.n	8017ecc <ip_reass_remove_oldest_datagram+0x4c>
 8017ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ec0:	899a      	ldrh	r2, [r3, #12]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	889b      	ldrh	r3, [r3, #4]
 8017ec6:	b29b      	uxth	r3, r3
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d014      	beq.n	8017ef6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017ecc:	693b      	ldr	r3, [r7, #16]
 8017ece:	3301      	adds	r3, #1
 8017ed0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017ed2:	6a3b      	ldr	r3, [r7, #32]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d104      	bne.n	8017ee2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eda:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	61bb      	str	r3, [r7, #24]
 8017ee0:	e009      	b.n	8017ef6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ee4:	7fda      	ldrb	r2, [r3, #31]
 8017ee6:	6a3b      	ldr	r3, [r7, #32]
 8017ee8:	7fdb      	ldrb	r3, [r3, #31]
 8017eea:	429a      	cmp	r2, r3
 8017eec:	d803      	bhi.n	8017ef6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ef0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ef2:	69fb      	ldr	r3, [r7, #28]
 8017ef4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d001      	beq.n	8017f02 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f00:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d1cb      	bne.n	8017ea6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d008      	beq.n	8017f26 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017f14:	69b9      	ldr	r1, [r7, #24]
 8017f16:	6a38      	ldr	r0, [r7, #32]
 8017f18:	f7ff ff0e 	bl	8017d38 <ip_reass_free_complete_datagram>
 8017f1c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017f1e:	697a      	ldr	r2, [r7, #20]
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	4413      	add	r3, r2
 8017f24:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017f26:	697a      	ldr	r2, [r7, #20]
 8017f28:	683b      	ldr	r3, [r7, #0]
 8017f2a:	429a      	cmp	r2, r3
 8017f2c:	da02      	bge.n	8017f34 <ip_reass_remove_oldest_datagram+0xb4>
 8017f2e:	693b      	ldr	r3, [r7, #16]
 8017f30:	2b01      	cmp	r3, #1
 8017f32:	dcac      	bgt.n	8017e8e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017f34:	697b      	ldr	r3, [r7, #20]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3728      	adds	r7, #40	@ 0x28
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	20011e6c 	.word	0x20011e6c

08017f44 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f4e:	2004      	movs	r0, #4
 8017f50:	f7f6 fc88 	bl	800e864 <memp_malloc>
 8017f54:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d110      	bne.n	8017f7e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017f5c:	6839      	ldr	r1, [r7, #0]
 8017f5e:	6878      	ldr	r0, [r7, #4]
 8017f60:	f7ff ff8e 	bl	8017e80 <ip_reass_remove_oldest_datagram>
 8017f64:	4602      	mov	r2, r0
 8017f66:	683b      	ldr	r3, [r7, #0]
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	dc03      	bgt.n	8017f74 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017f6c:	2004      	movs	r0, #4
 8017f6e:	f7f6 fc79 	bl	800e864 <memp_malloc>
 8017f72:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d101      	bne.n	8017f7e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	e016      	b.n	8017fac <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017f7e:	2220      	movs	r2, #32
 8017f80:	2100      	movs	r1, #0
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f001 fe74 	bl	8019c70 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	220f      	movs	r2, #15
 8017f8c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017f8e:	4b09      	ldr	r3, [pc, #36]	@ (8017fb4 <ip_reass_enqueue_new_datagram+0x70>)
 8017f90:	681a      	ldr	r2, [r3, #0]
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017f96:	4a07      	ldr	r2, [pc, #28]	@ (8017fb4 <ip_reass_enqueue_new_datagram+0x70>)
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	3308      	adds	r3, #8
 8017fa0:	2214      	movs	r2, #20
 8017fa2:	6879      	ldr	r1, [r7, #4]
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	f001 ff1c 	bl	8019de2 <memcpy>
  return ipr;
 8017faa:	68fb      	ldr	r3, [r7, #12]
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}
 8017fb4:	20011e6c 	.word	0x20011e6c

08017fb8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b082      	sub	sp, #8
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017fc2:	4b10      	ldr	r3, [pc, #64]	@ (8018004 <ip_reass_dequeue_datagram+0x4c>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	429a      	cmp	r2, r3
 8017fca:	d104      	bne.n	8017fd6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8018004 <ip_reass_dequeue_datagram+0x4c>)
 8017fd2:	6013      	str	r3, [r2, #0]
 8017fd4:	e00d      	b.n	8017ff2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017fd6:	683b      	ldr	r3, [r7, #0]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d106      	bne.n	8017fea <ip_reass_dequeue_datagram+0x32>
 8017fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8018008 <ip_reass_dequeue_datagram+0x50>)
 8017fde:	f240 1245 	movw	r2, #325	@ 0x145
 8017fe2:	490a      	ldr	r1, [pc, #40]	@ (801800c <ip_reass_dequeue_datagram+0x54>)
 8017fe4:	480a      	ldr	r0, [pc, #40]	@ (8018010 <ip_reass_dequeue_datagram+0x58>)
 8017fe6:	f001 fc7d 	bl	80198e4 <iprintf>
    prev->next = ipr->next;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681a      	ldr	r2, [r3, #0]
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017ff2:	6879      	ldr	r1, [r7, #4]
 8017ff4:	2004      	movs	r0, #4
 8017ff6:	f7f6 fc87 	bl	800e908 <memp_free>
}
 8017ffa:	bf00      	nop
 8017ffc:	3708      	adds	r7, #8
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}
 8018002:	bf00      	nop
 8018004:	20011e6c 	.word	0x20011e6c
 8018008:	0801f240 	.word	0x0801f240
 801800c:	0801f308 	.word	0x0801f308
 8018010:	0801f288 	.word	0x0801f288

08018014 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b08c      	sub	sp, #48	@ 0x30
 8018018:	af00      	add	r7, sp, #0
 801801a:	60f8      	str	r0, [r7, #12]
 801801c:	60b9      	str	r1, [r7, #8]
 801801e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018020:	2300      	movs	r3, #0
 8018022:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018024:	2301      	movs	r3, #1
 8018026:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801802e:	69fb      	ldr	r3, [r7, #28]
 8018030:	885b      	ldrh	r3, [r3, #2]
 8018032:	b29b      	uxth	r3, r3
 8018034:	4618      	mov	r0, r3
 8018036:	f7f5 ff5f 	bl	800def8 <lwip_htons>
 801803a:	4603      	mov	r3, r0
 801803c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801803e:	69fb      	ldr	r3, [r7, #28]
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	f003 030f 	and.w	r3, r3, #15
 8018046:	b2db      	uxtb	r3, r3
 8018048:	009b      	lsls	r3, r3, #2
 801804a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801804c:	7e7b      	ldrb	r3, [r7, #25]
 801804e:	b29b      	uxth	r3, r3
 8018050:	8b7a      	ldrh	r2, [r7, #26]
 8018052:	429a      	cmp	r2, r3
 8018054:	d202      	bcs.n	801805c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018056:	f04f 33ff 	mov.w	r3, #4294967295
 801805a:	e135      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801805c:	7e7b      	ldrb	r3, [r7, #25]
 801805e:	b29b      	uxth	r3, r3
 8018060:	8b7a      	ldrh	r2, [r7, #26]
 8018062:	1ad3      	subs	r3, r2, r3
 8018064:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018066:	69fb      	ldr	r3, [r7, #28]
 8018068:	88db      	ldrh	r3, [r3, #6]
 801806a:	b29b      	uxth	r3, r3
 801806c:	4618      	mov	r0, r3
 801806e:	f7f5 ff43 	bl	800def8 <lwip_htons>
 8018072:	4603      	mov	r3, r0
 8018074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018078:	b29b      	uxth	r3, r3
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801807e:	68bb      	ldr	r3, [r7, #8]
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8018084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018086:	2200      	movs	r2, #0
 8018088:	701a      	strb	r2, [r3, #0]
 801808a:	2200      	movs	r2, #0
 801808c:	705a      	strb	r2, [r3, #1]
 801808e:	2200      	movs	r2, #0
 8018090:	709a      	strb	r2, [r3, #2]
 8018092:	2200      	movs	r2, #0
 8018094:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018098:	8afa      	ldrh	r2, [r7, #22]
 801809a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801809c:	8afa      	ldrh	r2, [r7, #22]
 801809e:	8b7b      	ldrh	r3, [r7, #26]
 80180a0:	4413      	add	r3, r2
 80180a2:	b29a      	uxth	r2, r3
 80180a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180a6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80180a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180aa:	88db      	ldrh	r3, [r3, #6]
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	8afa      	ldrh	r2, [r7, #22]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d902      	bls.n	80180ba <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180b4:	f04f 33ff 	mov.w	r3, #4294967295
 80180b8:	e106      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	685b      	ldr	r3, [r3, #4]
 80180be:	627b      	str	r3, [r7, #36]	@ 0x24
 80180c0:	e068      	b.n	8018194 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80180c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c4:	685b      	ldr	r3, [r3, #4]
 80180c6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80180c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180ca:	889b      	ldrh	r3, [r3, #4]
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	693b      	ldr	r3, [r7, #16]
 80180d0:	889b      	ldrh	r3, [r3, #4]
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	429a      	cmp	r2, r3
 80180d6:	d235      	bcs.n	8018144 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80180d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80180dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80180de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d020      	beq.n	8018126 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80180e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180e6:	889b      	ldrh	r3, [r3, #4]
 80180e8:	b29a      	uxth	r2, r3
 80180ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180ec:	88db      	ldrh	r3, [r3, #6]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d307      	bcc.n	8018104 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80180f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80180f6:	88db      	ldrh	r3, [r3, #6]
 80180f8:	b29a      	uxth	r2, r3
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	889b      	ldrh	r3, [r3, #4]
 80180fe:	b29b      	uxth	r3, r3
 8018100:	429a      	cmp	r2, r3
 8018102:	d902      	bls.n	801810a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018104:	f04f 33ff 	mov.w	r3, #4294967295
 8018108:	e0de      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801810c:	68ba      	ldr	r2, [r7, #8]
 801810e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018112:	88db      	ldrh	r3, [r3, #6]
 8018114:	b29a      	uxth	r2, r3
 8018116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018118:	889b      	ldrh	r3, [r3, #4]
 801811a:	b29b      	uxth	r3, r3
 801811c:	429a      	cmp	r2, r3
 801811e:	d03d      	beq.n	801819c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018120:	2300      	movs	r3, #0
 8018122:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018124:	e03a      	b.n	801819c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018128:	88db      	ldrh	r3, [r3, #6]
 801812a:	b29a      	uxth	r2, r3
 801812c:	693b      	ldr	r3, [r7, #16]
 801812e:	889b      	ldrh	r3, [r3, #4]
 8018130:	b29b      	uxth	r3, r3
 8018132:	429a      	cmp	r2, r3
 8018134:	d902      	bls.n	801813c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018136:	f04f 33ff 	mov.w	r3, #4294967295
 801813a:	e0c5      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	68ba      	ldr	r2, [r7, #8]
 8018140:	605a      	str	r2, [r3, #4]
      break;
 8018142:	e02b      	b.n	801819c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018146:	889b      	ldrh	r3, [r3, #4]
 8018148:	b29a      	uxth	r2, r3
 801814a:	693b      	ldr	r3, [r7, #16]
 801814c:	889b      	ldrh	r3, [r3, #4]
 801814e:	b29b      	uxth	r3, r3
 8018150:	429a      	cmp	r2, r3
 8018152:	d102      	bne.n	801815a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018154:	f04f 33ff 	mov.w	r3, #4294967295
 8018158:	e0b6      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801815c:	889b      	ldrh	r3, [r3, #4]
 801815e:	b29a      	uxth	r2, r3
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	88db      	ldrh	r3, [r3, #6]
 8018164:	b29b      	uxth	r3, r3
 8018166:	429a      	cmp	r2, r3
 8018168:	d202      	bcs.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801816a:	f04f 33ff 	mov.w	r3, #4294967295
 801816e:	e0ab      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018172:	2b00      	cmp	r3, #0
 8018174:	d009      	beq.n	801818a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018178:	88db      	ldrh	r3, [r3, #6]
 801817a:	b29a      	uxth	r2, r3
 801817c:	693b      	ldr	r3, [r7, #16]
 801817e:	889b      	ldrh	r3, [r3, #4]
 8018180:	b29b      	uxth	r3, r3
 8018182:	429a      	cmp	r2, r3
 8018184:	d001      	beq.n	801818a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018186:	2300      	movs	r3, #0
 8018188:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018190:	693b      	ldr	r3, [r7, #16]
 8018192:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8018194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018196:	2b00      	cmp	r3, #0
 8018198:	d193      	bne.n	80180c2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801819a:	e000      	b.n	801819e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801819c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d12d      	bne.n	8018200 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80181a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d01c      	beq.n	80181e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80181aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181ac:	88db      	ldrh	r3, [r3, #6]
 80181ae:	b29a      	uxth	r2, r3
 80181b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181b2:	889b      	ldrh	r3, [r3, #4]
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d906      	bls.n	80181c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80181ba:	4b45      	ldr	r3, [pc, #276]	@ (80182d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181bc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80181c0:	4944      	ldr	r1, [pc, #272]	@ (80182d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80181c2:	4845      	ldr	r0, [pc, #276]	@ (80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181c4:	f001 fb8e 	bl	80198e4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80181c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181ca:	68ba      	ldr	r2, [r7, #8]
 80181cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80181ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181d0:	88db      	ldrh	r3, [r3, #6]
 80181d2:	b29a      	uxth	r2, r3
 80181d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80181d6:	889b      	ldrh	r3, [r3, #4]
 80181d8:	b29b      	uxth	r3, r3
 80181da:	429a      	cmp	r2, r3
 80181dc:	d010      	beq.n	8018200 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80181de:	2300      	movs	r3, #0
 80181e0:	623b      	str	r3, [r7, #32]
 80181e2:	e00d      	b.n	8018200 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	685b      	ldr	r3, [r3, #4]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d006      	beq.n	80181fa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80181ec:	4b38      	ldr	r3, [pc, #224]	@ (80182d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181ee:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80181f2:	493a      	ldr	r1, [pc, #232]	@ (80182dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80181f4:	4838      	ldr	r0, [pc, #224]	@ (80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181f6:	f001 fb75 	bl	80198e4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	68ba      	ldr	r2, [r7, #8]
 80181fe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d105      	bne.n	8018212 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	7f9b      	ldrb	r3, [r3, #30]
 801820a:	f003 0301 	and.w	r3, r3, #1
 801820e:	2b00      	cmp	r3, #0
 8018210:	d059      	beq.n	80182c6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d04f      	beq.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	685b      	ldr	r3, [r3, #4]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d006      	beq.n	801822e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	685b      	ldr	r3, [r3, #4]
 8018224:	685b      	ldr	r3, [r3, #4]
 8018226:	889b      	ldrh	r3, [r3, #4]
 8018228:	b29b      	uxth	r3, r3
 801822a:	2b00      	cmp	r3, #0
 801822c:	d002      	beq.n	8018234 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801822e:	2300      	movs	r3, #0
 8018230:	623b      	str	r3, [r7, #32]
 8018232:	e041      	b.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018236:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801823e:	e012      	b.n	8018266 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018242:	685b      	ldr	r3, [r3, #4]
 8018244:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8018246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018248:	88db      	ldrh	r3, [r3, #6]
 801824a:	b29a      	uxth	r2, r3
 801824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801824e:	889b      	ldrh	r3, [r3, #4]
 8018250:	b29b      	uxth	r3, r3
 8018252:	429a      	cmp	r2, r3
 8018254:	d002      	beq.n	801825c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018256:	2300      	movs	r3, #0
 8018258:	623b      	str	r3, [r7, #32]
            break;
 801825a:	e007      	b.n	801826c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801825e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018268:	2b00      	cmp	r3, #0
 801826a:	d1e9      	bne.n	8018240 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801826c:	6a3b      	ldr	r3, [r7, #32]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d022      	beq.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	685b      	ldr	r3, [r3, #4]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d106      	bne.n	8018288 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801827a:	4b15      	ldr	r3, [pc, #84]	@ (80182d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801827c:	f240 12df 	movw	r2, #479	@ 0x1df
 8018280:	4917      	ldr	r1, [pc, #92]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018282:	4815      	ldr	r0, [pc, #84]	@ (80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018284:	f001 fb2e 	bl	80198e4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	685b      	ldr	r3, [r3, #4]
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018290:	429a      	cmp	r2, r3
 8018292:	d106      	bne.n	80182a2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018294:	4b0e      	ldr	r3, [pc, #56]	@ (80182d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018296:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801829a:	4911      	ldr	r1, [pc, #68]	@ (80182e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801829c:	480e      	ldr	r0, [pc, #56]	@ (80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801829e:	f001 fb21 	bl	80198e4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80182a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d006      	beq.n	80182b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80182aa:	4b09      	ldr	r3, [pc, #36]	@ (80182d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80182ac:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80182b0:	490c      	ldr	r1, [pc, #48]	@ (80182e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80182b2:	4809      	ldr	r0, [pc, #36]	@ (80182d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80182b4:	f001 fb16 	bl	80198e4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80182b8:	6a3b      	ldr	r3, [r7, #32]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	bf14      	ite	ne
 80182be:	2301      	movne	r3, #1
 80182c0:	2300      	moveq	r3, #0
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	e000      	b.n	80182c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80182c6:	2300      	movs	r3, #0
}
 80182c8:	4618      	mov	r0, r3
 80182ca:	3730      	adds	r7, #48	@ 0x30
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	0801f240 	.word	0x0801f240
 80182d4:	0801f324 	.word	0x0801f324
 80182d8:	0801f288 	.word	0x0801f288
 80182dc:	0801f344 	.word	0x0801f344
 80182e0:	0801f37c 	.word	0x0801f37c
 80182e4:	0801f38c 	.word	0x0801f38c

080182e8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b08e      	sub	sp, #56	@ 0x38
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80182f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	f003 030f 	and.w	r3, r3, #15
 80182fe:	b2db      	uxtb	r3, r3
 8018300:	009b      	lsls	r3, r3, #2
 8018302:	b2db      	uxtb	r3, r3
 8018304:	2b14      	cmp	r3, #20
 8018306:	f040 8171 	bne.w	80185ec <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801830a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801830c:	88db      	ldrh	r3, [r3, #6]
 801830e:	b29b      	uxth	r3, r3
 8018310:	4618      	mov	r0, r3
 8018312:	f7f5 fdf1 	bl	800def8 <lwip_htons>
 8018316:	4603      	mov	r3, r0
 8018318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801831c:	b29b      	uxth	r3, r3
 801831e:	00db      	lsls	r3, r3, #3
 8018320:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018324:	885b      	ldrh	r3, [r3, #2]
 8018326:	b29b      	uxth	r3, r3
 8018328:	4618      	mov	r0, r3
 801832a:	f7f5 fde5 	bl	800def8 <lwip_htons>
 801832e:	4603      	mov	r3, r0
 8018330:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	f003 030f 	and.w	r3, r3, #15
 801833a:	b2db      	uxtb	r3, r3
 801833c:	009b      	lsls	r3, r3, #2
 801833e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018342:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018346:	b29b      	uxth	r3, r3
 8018348:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801834a:	429a      	cmp	r2, r3
 801834c:	f0c0 8150 	bcc.w	80185f0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018350:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018354:	b29b      	uxth	r3, r3
 8018356:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018358:	1ad3      	subs	r3, r2, r3
 801835a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	f7f7 fa05 	bl	800f76c <pbuf_clen>
 8018362:	4603      	mov	r3, r0
 8018364:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018366:	4b8c      	ldr	r3, [pc, #560]	@ (8018598 <ip4_reass+0x2b0>)
 8018368:	881b      	ldrh	r3, [r3, #0]
 801836a:	461a      	mov	r2, r3
 801836c:	8c3b      	ldrh	r3, [r7, #32]
 801836e:	4413      	add	r3, r2
 8018370:	2b0a      	cmp	r3, #10
 8018372:	dd10      	ble.n	8018396 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018374:	8c3b      	ldrh	r3, [r7, #32]
 8018376:	4619      	mov	r1, r3
 8018378:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801837a:	f7ff fd81 	bl	8017e80 <ip_reass_remove_oldest_datagram>
 801837e:	4603      	mov	r3, r0
 8018380:	2b00      	cmp	r3, #0
 8018382:	f000 8137 	beq.w	80185f4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018386:	4b84      	ldr	r3, [pc, #528]	@ (8018598 <ip4_reass+0x2b0>)
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	8c3b      	ldrh	r3, [r7, #32]
 801838e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018390:	2b0a      	cmp	r3, #10
 8018392:	f300 812f 	bgt.w	80185f4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018396:	4b81      	ldr	r3, [pc, #516]	@ (801859c <ip4_reass+0x2b4>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	633b      	str	r3, [r7, #48]	@ 0x30
 801839c:	e015      	b.n	80183ca <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183a0:	695a      	ldr	r2, [r3, #20]
 80183a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d10c      	bne.n	80183c4 <ip4_reass+0xdc>
 80183aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183ac:	699a      	ldr	r2, [r3, #24]
 80183ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183b0:	691b      	ldr	r3, [r3, #16]
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d106      	bne.n	80183c4 <ip4_reass+0xdc>
 80183b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183b8:	899a      	ldrh	r2, [r3, #12]
 80183ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183bc:	889b      	ldrh	r3, [r3, #4]
 80183be:	b29b      	uxth	r3, r3
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d006      	beq.n	80183d2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80183c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80183ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d1e6      	bne.n	801839e <ip4_reass+0xb6>
 80183d0:	e000      	b.n	80183d4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80183d2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80183d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d109      	bne.n	80183ee <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80183da:	8c3b      	ldrh	r3, [r7, #32]
 80183dc:	4619      	mov	r1, r3
 80183de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80183e0:	f7ff fdb0 	bl	8017f44 <ip_reass_enqueue_new_datagram>
 80183e4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80183e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d11c      	bne.n	8018426 <ip4_reass+0x13e>
      goto nullreturn;
 80183ec:	e105      	b.n	80185fa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183f0:	88db      	ldrh	r3, [r3, #6]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7f5 fd7f 	bl	800def8 <lwip_htons>
 80183fa:	4603      	mov	r3, r0
 80183fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018400:	2b00      	cmp	r3, #0
 8018402:	d110      	bne.n	8018426 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018406:	89db      	ldrh	r3, [r3, #14]
 8018408:	4618      	mov	r0, r3
 801840a:	f7f5 fd75 	bl	800def8 <lwip_htons>
 801840e:	4603      	mov	r3, r0
 8018410:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018414:	2b00      	cmp	r3, #0
 8018416:	d006      	beq.n	8018426 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801841a:	3308      	adds	r3, #8
 801841c:	2214      	movs	r2, #20
 801841e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018420:	4618      	mov	r0, r3
 8018422:	f001 fcde 	bl	8019de2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018428:	88db      	ldrh	r3, [r3, #6]
 801842a:	b29b      	uxth	r3, r3
 801842c:	f003 0320 	and.w	r3, r3, #32
 8018430:	2b00      	cmp	r3, #0
 8018432:	bf0c      	ite	eq
 8018434:	2301      	moveq	r3, #1
 8018436:	2300      	movne	r3, #0
 8018438:	b2db      	uxtb	r3, r3
 801843a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d00e      	beq.n	8018460 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018442:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018446:	4413      	add	r3, r2
 8018448:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801844a:	8b7a      	ldrh	r2, [r7, #26]
 801844c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801844e:	429a      	cmp	r2, r3
 8018450:	f0c0 80a0 	bcc.w	8018594 <ip4_reass+0x2ac>
 8018454:	8b7b      	ldrh	r3, [r7, #26]
 8018456:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801845a:	4293      	cmp	r3, r2
 801845c:	f200 809a 	bhi.w	8018594 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018460:	69fa      	ldr	r2, [r7, #28]
 8018462:	6879      	ldr	r1, [r7, #4]
 8018464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018466:	f7ff fdd5 	bl	8018014 <ip_reass_chain_frag_into_datagram_and_validate>
 801846a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801846c:	697b      	ldr	r3, [r7, #20]
 801846e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018472:	f000 809b 	beq.w	80185ac <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018476:	4b48      	ldr	r3, [pc, #288]	@ (8018598 <ip4_reass+0x2b0>)
 8018478:	881a      	ldrh	r2, [r3, #0]
 801847a:	8c3b      	ldrh	r3, [r7, #32]
 801847c:	4413      	add	r3, r2
 801847e:	b29a      	uxth	r2, r3
 8018480:	4b45      	ldr	r3, [pc, #276]	@ (8018598 <ip4_reass+0x2b0>)
 8018482:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d00d      	beq.n	80184a6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801848a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801848c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801848e:	4413      	add	r3, r2
 8018490:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018494:	8a7a      	ldrh	r2, [r7, #18]
 8018496:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801849a:	7f9b      	ldrb	r3, [r3, #30]
 801849c:	f043 0301 	orr.w	r3, r3, #1
 80184a0:	b2da      	uxtb	r2, r3
 80184a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184a4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b01      	cmp	r3, #1
 80184aa:	d171      	bne.n	8018590 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80184ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184ae:	8b9b      	ldrh	r3, [r3, #28]
 80184b0:	3314      	adds	r3, #20
 80184b2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80184b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184b6:	685b      	ldr	r3, [r3, #4]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80184be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	685b      	ldr	r3, [r3, #4]
 80184c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80184c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184c8:	3308      	adds	r3, #8
 80184ca:	2214      	movs	r2, #20
 80184cc:	4619      	mov	r1, r3
 80184ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80184d0:	f001 fc87 	bl	8019de2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80184d4:	8a3b      	ldrh	r3, [r7, #16]
 80184d6:	4618      	mov	r0, r3
 80184d8:	f7f5 fd0e 	bl	800def8 <lwip_htons>
 80184dc:	4603      	mov	r3, r0
 80184de:	461a      	mov	r2, r3
 80184e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184e2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80184e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184e6:	2200      	movs	r2, #0
 80184e8:	719a      	strb	r2, [r3, #6]
 80184ea:	2200      	movs	r2, #0
 80184ec:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80184ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80184f0:	2200      	movs	r2, #0
 80184f2:	729a      	strb	r2, [r3, #10]
 80184f4:	2200      	movs	r2, #0
 80184f6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80184f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80184fa:	685b      	ldr	r3, [r3, #4]
 80184fc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80184fe:	e00d      	b.n	801851c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018506:	2114      	movs	r1, #20
 8018508:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801850a:	f7f7 f81b 	bl	800f544 <pbuf_remove_header>
      pbuf_cat(p, r);
 801850e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f7f7 f96b 	bl	800f7ec <pbuf_cat>
      r = iprh->next_pbuf;
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801851c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801851e:	2b00      	cmp	r3, #0
 8018520:	d1ee      	bne.n	8018500 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018522:	4b1e      	ldr	r3, [pc, #120]	@ (801859c <ip4_reass+0x2b4>)
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018528:	429a      	cmp	r2, r3
 801852a:	d102      	bne.n	8018532 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801852c:	2300      	movs	r3, #0
 801852e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018530:	e010      	b.n	8018554 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018532:	4b1a      	ldr	r3, [pc, #104]	@ (801859c <ip4_reass+0x2b4>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018538:	e007      	b.n	801854a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801853a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018540:	429a      	cmp	r2, r3
 8018542:	d006      	beq.n	8018552 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801854a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801854c:	2b00      	cmp	r3, #0
 801854e:	d1f4      	bne.n	801853a <ip4_reass+0x252>
 8018550:	e000      	b.n	8018554 <ip4_reass+0x26c>
          break;
 8018552:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018556:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018558:	f7ff fd2e 	bl	8017fb8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801855c:	6878      	ldr	r0, [r7, #4]
 801855e:	f7f7 f905 	bl	800f76c <pbuf_clen>
 8018562:	4603      	mov	r3, r0
 8018564:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018566:	4b0c      	ldr	r3, [pc, #48]	@ (8018598 <ip4_reass+0x2b0>)
 8018568:	881b      	ldrh	r3, [r3, #0]
 801856a:	8c3a      	ldrh	r2, [r7, #32]
 801856c:	429a      	cmp	r2, r3
 801856e:	d906      	bls.n	801857e <ip4_reass+0x296>
 8018570:	4b0b      	ldr	r3, [pc, #44]	@ (80185a0 <ip4_reass+0x2b8>)
 8018572:	f240 229b 	movw	r2, #667	@ 0x29b
 8018576:	490b      	ldr	r1, [pc, #44]	@ (80185a4 <ip4_reass+0x2bc>)
 8018578:	480b      	ldr	r0, [pc, #44]	@ (80185a8 <ip4_reass+0x2c0>)
 801857a:	f001 f9b3 	bl	80198e4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801857e:	4b06      	ldr	r3, [pc, #24]	@ (8018598 <ip4_reass+0x2b0>)
 8018580:	881a      	ldrh	r2, [r3, #0]
 8018582:	8c3b      	ldrh	r3, [r7, #32]
 8018584:	1ad3      	subs	r3, r2, r3
 8018586:	b29a      	uxth	r2, r3
 8018588:	4b03      	ldr	r3, [pc, #12]	@ (8018598 <ip4_reass+0x2b0>)
 801858a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	e038      	b.n	8018602 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018590:	2300      	movs	r3, #0
 8018592:	e036      	b.n	8018602 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018594:	bf00      	nop
 8018596:	e00a      	b.n	80185ae <ip4_reass+0x2c6>
 8018598:	20011e70 	.word	0x20011e70
 801859c:	20011e6c 	.word	0x20011e6c
 80185a0:	0801f240 	.word	0x0801f240
 80185a4:	0801f3b0 	.word	0x0801f3b0
 80185a8:	0801f288 	.word	0x0801f288
    goto nullreturn_ipr;
 80185ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80185ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d106      	bne.n	80185c2 <ip4_reass+0x2da>
 80185b4:	4b15      	ldr	r3, [pc, #84]	@ (801860c <ip4_reass+0x324>)
 80185b6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80185ba:	4915      	ldr	r1, [pc, #84]	@ (8018610 <ip4_reass+0x328>)
 80185bc:	4815      	ldr	r0, [pc, #84]	@ (8018614 <ip4_reass+0x32c>)
 80185be:	f001 f991 	bl	80198e4 <iprintf>
  if (ipr->p == NULL) {
 80185c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185c4:	685b      	ldr	r3, [r3, #4]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d116      	bne.n	80185f8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80185ca:	4b13      	ldr	r3, [pc, #76]	@ (8018618 <ip4_reass+0x330>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80185d0:	429a      	cmp	r2, r3
 80185d2:	d006      	beq.n	80185e2 <ip4_reass+0x2fa>
 80185d4:	4b0d      	ldr	r3, [pc, #52]	@ (801860c <ip4_reass+0x324>)
 80185d6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80185da:	4910      	ldr	r1, [pc, #64]	@ (801861c <ip4_reass+0x334>)
 80185dc:	480d      	ldr	r0, [pc, #52]	@ (8018614 <ip4_reass+0x32c>)
 80185de:	f001 f981 	bl	80198e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80185e2:	2100      	movs	r1, #0
 80185e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80185e6:	f7ff fce7 	bl	8017fb8 <ip_reass_dequeue_datagram>
 80185ea:	e006      	b.n	80185fa <ip4_reass+0x312>
    goto nullreturn;
 80185ec:	bf00      	nop
 80185ee:	e004      	b.n	80185fa <ip4_reass+0x312>
    goto nullreturn;
 80185f0:	bf00      	nop
 80185f2:	e002      	b.n	80185fa <ip4_reass+0x312>
      goto nullreturn;
 80185f4:	bf00      	nop
 80185f6:	e000      	b.n	80185fa <ip4_reass+0x312>
  }

nullreturn:
 80185f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f7f7 f828 	bl	800f650 <pbuf_free>
  return NULL;
 8018600:	2300      	movs	r3, #0
}
 8018602:	4618      	mov	r0, r3
 8018604:	3738      	adds	r7, #56	@ 0x38
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}
 801860a:	bf00      	nop
 801860c:	0801f240 	.word	0x0801f240
 8018610:	0801f3cc 	.word	0x0801f3cc
 8018614:	0801f288 	.word	0x0801f288
 8018618:	20011e6c 	.word	0x20011e6c
 801861c:	0801f3d8 	.word	0x0801f3d8

08018620 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018624:	2005      	movs	r0, #5
 8018626:	f7f6 f91d 	bl	800e864 <memp_malloc>
 801862a:	4603      	mov	r3, r0
}
 801862c:	4618      	mov	r0, r3
 801862e:	bd80      	pop	{r7, pc}

08018630 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d106      	bne.n	801864c <ip_frag_free_pbuf_custom_ref+0x1c>
 801863e:	4b07      	ldr	r3, [pc, #28]	@ (801865c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018640:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018644:	4906      	ldr	r1, [pc, #24]	@ (8018660 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018646:	4807      	ldr	r0, [pc, #28]	@ (8018664 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018648:	f001 f94c 	bl	80198e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801864c:	6879      	ldr	r1, [r7, #4]
 801864e:	2005      	movs	r0, #5
 8018650:	f7f6 f95a 	bl	800e908 <memp_free>
}
 8018654:	bf00      	nop
 8018656:	3708      	adds	r7, #8
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}
 801865c:	0801f240 	.word	0x0801f240
 8018660:	0801f3f8 	.word	0x0801f3f8
 8018664:	0801f288 	.word	0x0801f288

08018668 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b084      	sub	sp, #16
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d106      	bne.n	8018688 <ipfrag_free_pbuf_custom+0x20>
 801867a:	4b11      	ldr	r3, [pc, #68]	@ (80186c0 <ipfrag_free_pbuf_custom+0x58>)
 801867c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018680:	4910      	ldr	r1, [pc, #64]	@ (80186c4 <ipfrag_free_pbuf_custom+0x5c>)
 8018682:	4811      	ldr	r0, [pc, #68]	@ (80186c8 <ipfrag_free_pbuf_custom+0x60>)
 8018684:	f001 f92e 	bl	80198e4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018688:	68fa      	ldr	r2, [r7, #12]
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	429a      	cmp	r2, r3
 801868e:	d006      	beq.n	801869e <ipfrag_free_pbuf_custom+0x36>
 8018690:	4b0b      	ldr	r3, [pc, #44]	@ (80186c0 <ipfrag_free_pbuf_custom+0x58>)
 8018692:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018696:	490d      	ldr	r1, [pc, #52]	@ (80186cc <ipfrag_free_pbuf_custom+0x64>)
 8018698:	480b      	ldr	r0, [pc, #44]	@ (80186c8 <ipfrag_free_pbuf_custom+0x60>)
 801869a:	f001 f923 	bl	80198e4 <iprintf>
  if (pcr->original != NULL) {
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	695b      	ldr	r3, [r3, #20]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d004      	beq.n	80186b0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	695b      	ldr	r3, [r3, #20]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7f6 ffd0 	bl	800f650 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80186b0:	68f8      	ldr	r0, [r7, #12]
 80186b2:	f7ff ffbd 	bl	8018630 <ip_frag_free_pbuf_custom_ref>
}
 80186b6:	bf00      	nop
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	0801f240 	.word	0x0801f240
 80186c4:	0801f404 	.word	0x0801f404
 80186c8:	0801f288 	.word	0x0801f288
 80186cc:	0801f410 	.word	0x0801f410

080186d0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b094      	sub	sp, #80	@ 0x50
 80186d4:	af02      	add	r7, sp, #8
 80186d6:	60f8      	str	r0, [r7, #12]
 80186d8:	60b9      	str	r1, [r7, #8]
 80186da:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80186dc:	2300      	movs	r3, #0
 80186de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80186e6:	3b14      	subs	r3, #20
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	da00      	bge.n	80186ee <ip4_frag+0x1e>
 80186ec:	3307      	adds	r3, #7
 80186ee:	10db      	asrs	r3, r3, #3
 80186f0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80186f2:	2314      	movs	r3, #20
 80186f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	685b      	ldr	r3, [r3, #4]
 80186fa:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80186fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186fe:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018702:	781b      	ldrb	r3, [r3, #0]
 8018704:	f003 030f 	and.w	r3, r3, #15
 8018708:	b2db      	uxtb	r3, r3
 801870a:	009b      	lsls	r3, r3, #2
 801870c:	b2db      	uxtb	r3, r3
 801870e:	2b14      	cmp	r3, #20
 8018710:	d002      	beq.n	8018718 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018712:	f06f 0305 	mvn.w	r3, #5
 8018716:	e110      	b.n	801893a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	895b      	ldrh	r3, [r3, #10]
 801871c:	2b13      	cmp	r3, #19
 801871e:	d809      	bhi.n	8018734 <ip4_frag+0x64>
 8018720:	4b88      	ldr	r3, [pc, #544]	@ (8018944 <ip4_frag+0x274>)
 8018722:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018726:	4988      	ldr	r1, [pc, #544]	@ (8018948 <ip4_frag+0x278>)
 8018728:	4888      	ldr	r0, [pc, #544]	@ (801894c <ip4_frag+0x27c>)
 801872a:	f001 f8db 	bl	80198e4 <iprintf>
 801872e:	f06f 0305 	mvn.w	r3, #5
 8018732:	e102      	b.n	801893a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018736:	88db      	ldrh	r3, [r3, #6]
 8018738:	b29b      	uxth	r3, r3
 801873a:	4618      	mov	r0, r3
 801873c:	f7f5 fbdc 	bl	800def8 <lwip_htons>
 8018740:	4603      	mov	r3, r0
 8018742:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018744:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801874a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801874e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018754:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	891b      	ldrh	r3, [r3, #8]
 801875a:	3b14      	subs	r3, #20
 801875c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018760:	e0e1      	b.n	8018926 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018762:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018764:	00db      	lsls	r3, r3, #3
 8018766:	b29b      	uxth	r3, r3
 8018768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801876c:	4293      	cmp	r3, r2
 801876e:	bf28      	it	cs
 8018770:	4613      	movcs	r3, r2
 8018772:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018774:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018778:	2114      	movs	r1, #20
 801877a:	200e      	movs	r0, #14
 801877c:	f7f6 fc84 	bl	800f088 <pbuf_alloc>
 8018780:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018784:	2b00      	cmp	r3, #0
 8018786:	f000 80d5 	beq.w	8018934 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801878c:	895b      	ldrh	r3, [r3, #10]
 801878e:	2b13      	cmp	r3, #19
 8018790:	d806      	bhi.n	80187a0 <ip4_frag+0xd0>
 8018792:	4b6c      	ldr	r3, [pc, #432]	@ (8018944 <ip4_frag+0x274>)
 8018794:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018798:	496d      	ldr	r1, [pc, #436]	@ (8018950 <ip4_frag+0x280>)
 801879a:	486c      	ldr	r0, [pc, #432]	@ (801894c <ip4_frag+0x27c>)
 801879c:	f001 f8a2 	bl	80198e4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80187a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a2:	685b      	ldr	r3, [r3, #4]
 80187a4:	2214      	movs	r2, #20
 80187a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80187a8:	4618      	mov	r0, r3
 80187aa:	f001 fb1a 	bl	8019de2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80187ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b0:	685b      	ldr	r3, [r3, #4]
 80187b2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80187b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80187b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80187ba:	e064      	b.n	8018886 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	895a      	ldrh	r2, [r3, #10]
 80187c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80187c2:	1ad3      	subs	r3, r2, r3
 80187c4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80187c6:	68fb      	ldr	r3, [r7, #12]
 80187c8:	895b      	ldrh	r3, [r3, #10]
 80187ca:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d906      	bls.n	80187de <ip4_frag+0x10e>
 80187d0:	4b5c      	ldr	r3, [pc, #368]	@ (8018944 <ip4_frag+0x274>)
 80187d2:	f240 322d 	movw	r2, #813	@ 0x32d
 80187d6:	495f      	ldr	r1, [pc, #380]	@ (8018954 <ip4_frag+0x284>)
 80187d8:	485c      	ldr	r0, [pc, #368]	@ (801894c <ip4_frag+0x27c>)
 80187da:	f001 f883 	bl	80198e4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80187de:	8bfa      	ldrh	r2, [r7, #30]
 80187e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80187e4:	4293      	cmp	r3, r2
 80187e6:	bf28      	it	cs
 80187e8:	4613      	movcs	r3, r2
 80187ea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80187ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d105      	bne.n	8018802 <ip4_frag+0x132>
        poff = 0;
 80187f6:	2300      	movs	r3, #0
 80187f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80187fa:	68fb      	ldr	r3, [r7, #12]
 80187fc:	681b      	ldr	r3, [r3, #0]
 80187fe:	60fb      	str	r3, [r7, #12]
        continue;
 8018800:	e041      	b.n	8018886 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018802:	f7ff ff0d 	bl	8018620 <ip_frag_alloc_pbuf_custom_ref>
 8018806:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018808:	69bb      	ldr	r3, [r7, #24]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d103      	bne.n	8018816 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801880e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018810:	f7f6 ff1e 	bl	800f650 <pbuf_free>
        goto memerr;
 8018814:	e08f      	b.n	8018936 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018816:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801881c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801881e:	4413      	add	r3, r2
 8018820:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018824:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018828:	9201      	str	r2, [sp, #4]
 801882a:	9300      	str	r3, [sp, #0]
 801882c:	4603      	mov	r3, r0
 801882e:	2241      	movs	r2, #65	@ 0x41
 8018830:	2000      	movs	r0, #0
 8018832:	f7f6 fd53 	bl	800f2dc <pbuf_alloced_custom>
 8018836:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018838:	697b      	ldr	r3, [r7, #20]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d106      	bne.n	801884c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801883e:	69b8      	ldr	r0, [r7, #24]
 8018840:	f7ff fef6 	bl	8018630 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018844:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018846:	f7f6 ff03 	bl	800f650 <pbuf_free>
        goto memerr;
 801884a:	e074      	b.n	8018936 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801884c:	68f8      	ldr	r0, [r7, #12]
 801884e:	f7f6 ffa5 	bl	800f79c <pbuf_ref>
      pcr->original = p;
 8018852:	69bb      	ldr	r3, [r7, #24]
 8018854:	68fa      	ldr	r2, [r7, #12]
 8018856:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018858:	69bb      	ldr	r3, [r7, #24]
 801885a:	4a3f      	ldr	r2, [pc, #252]	@ (8018958 <ip4_frag+0x288>)
 801885c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801885e:	6979      	ldr	r1, [r7, #20]
 8018860:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018862:	f7f6 ffc3 	bl	800f7ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018866:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801886a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801886e:	1ad3      	subs	r3, r2, r3
 8018870:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018874:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018878:	2b00      	cmp	r3, #0
 801887a:	d004      	beq.n	8018886 <ip4_frag+0x1b6>
        poff = 0;
 801887c:	2300      	movs	r3, #0
 801887e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018880:	68fb      	ldr	r3, [r7, #12]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018886:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801888a:	2b00      	cmp	r3, #0
 801888c:	d196      	bne.n	80187bc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801888e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018894:	4413      	add	r3, r2
 8018896:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018898:	68bb      	ldr	r3, [r7, #8]
 801889a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801889c:	f1a3 0213 	sub.w	r2, r3, #19
 80188a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80188a4:	429a      	cmp	r2, r3
 80188a6:	bfcc      	ite	gt
 80188a8:	2301      	movgt	r3, #1
 80188aa:	2300      	movle	r3, #0
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80188b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80188b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188b8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80188ba:	6a3b      	ldr	r3, [r7, #32]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d002      	beq.n	80188c6 <ip4_frag+0x1f6>
 80188c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d003      	beq.n	80188ce <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80188c6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80188cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80188ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7f5 fb11 	bl	800def8 <lwip_htons>
 80188d6:	4603      	mov	r3, r0
 80188d8:	461a      	mov	r2, r3
 80188da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188dc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80188de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80188e0:	3314      	adds	r3, #20
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7f5 fb07 	bl	800def8 <lwip_htons>
 80188ea:	4603      	mov	r3, r0
 80188ec:	461a      	mov	r2, r3
 80188ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188f0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80188f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188f4:	2200      	movs	r2, #0
 80188f6:	729a      	strb	r2, [r3, #10]
 80188f8:	2200      	movs	r2, #0
 80188fa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	695b      	ldr	r3, [r3, #20]
 8018900:	687a      	ldr	r2, [r7, #4]
 8018902:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018904:	68b8      	ldr	r0, [r7, #8]
 8018906:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801890a:	f7f6 fea1 	bl	800f650 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801890e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018912:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018914:	1ad3      	subs	r3, r2, r3
 8018916:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801891a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801891e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018920:	4413      	add	r3, r2
 8018922:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801892a:	2b00      	cmp	r3, #0
 801892c:	f47f af19 	bne.w	8018762 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018930:	2300      	movs	r3, #0
 8018932:	e002      	b.n	801893a <ip4_frag+0x26a>
      goto memerr;
 8018934:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018936:	f04f 33ff 	mov.w	r3, #4294967295
}
 801893a:	4618      	mov	r0, r3
 801893c:	3748      	adds	r7, #72	@ 0x48
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	0801f240 	.word	0x0801f240
 8018948:	0801f41c 	.word	0x0801f41c
 801894c:	0801f288 	.word	0x0801f288
 8018950:	0801f438 	.word	0x0801f438
 8018954:	0801f458 	.word	0x0801f458
 8018958:	08018669 	.word	0x08018669

0801895c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801895c:	b580      	push	{r7, lr}
 801895e:	b086      	sub	sp, #24
 8018960:	af00      	add	r7, sp, #0
 8018962:	6078      	str	r0, [r7, #4]
 8018964:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018966:	230e      	movs	r3, #14
 8018968:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	895b      	ldrh	r3, [r3, #10]
 801896e:	2b0e      	cmp	r3, #14
 8018970:	d96e      	bls.n	8018a50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	7bdb      	ldrb	r3, [r3, #15]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d106      	bne.n	8018988 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018980:	3301      	adds	r3, #1
 8018982:	b2da      	uxtb	r2, r3
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	685b      	ldr	r3, [r3, #4]
 801898c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801898e:	693b      	ldr	r3, [r7, #16]
 8018990:	7b1a      	ldrb	r2, [r3, #12]
 8018992:	7b5b      	ldrb	r3, [r3, #13]
 8018994:	021b      	lsls	r3, r3, #8
 8018996:	4313      	orrs	r3, r2
 8018998:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	781b      	ldrb	r3, [r3, #0]
 801899e:	f003 0301 	and.w	r3, r3, #1
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d023      	beq.n	80189ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80189a6:	693b      	ldr	r3, [r7, #16]
 80189a8:	781b      	ldrb	r3, [r3, #0]
 80189aa:	2b01      	cmp	r3, #1
 80189ac:	d10f      	bne.n	80189ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189ae:	693b      	ldr	r3, [r7, #16]
 80189b0:	785b      	ldrb	r3, [r3, #1]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d11b      	bne.n	80189ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80189ba:	2b5e      	cmp	r3, #94	@ 0x5e
 80189bc:	d117      	bne.n	80189ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	7b5b      	ldrb	r3, [r3, #13]
 80189c2:	f043 0310 	orr.w	r3, r3, #16
 80189c6:	b2da      	uxtb	r2, r3
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	735a      	strb	r2, [r3, #13]
 80189cc:	e00f      	b.n	80189ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	2206      	movs	r2, #6
 80189d2:	4928      	ldr	r1, [pc, #160]	@ (8018a74 <ethernet_input+0x118>)
 80189d4:	4618      	mov	r0, r3
 80189d6:	f001 f921 	bl	8019c1c <memcmp>
 80189da:	4603      	mov	r3, r0
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d106      	bne.n	80189ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	7b5b      	ldrb	r3, [r3, #13]
 80189e4:	f043 0308 	orr.w	r3, r3, #8
 80189e8:	b2da      	uxtb	r2, r3
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80189ee:	89fb      	ldrh	r3, [r7, #14]
 80189f0:	2b08      	cmp	r3, #8
 80189f2:	d003      	beq.n	80189fc <ethernet_input+0xa0>
 80189f4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80189f8:	d014      	beq.n	8018a24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80189fa:	e032      	b.n	8018a62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80189fc:	683b      	ldr	r3, [r7, #0]
 80189fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018a02:	f003 0308 	and.w	r3, r3, #8
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d024      	beq.n	8018a54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a0a:	8afb      	ldrh	r3, [r7, #22]
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7f6 fd98 	bl	800f544 <pbuf_remove_header>
 8018a14:	4603      	mov	r3, r0
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d11e      	bne.n	8018a58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018a1a:	6839      	ldr	r1, [r7, #0]
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f7fe ff21 	bl	8017864 <ip4_input>
      break;
 8018a22:	e013      	b.n	8018a4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018a24:	683b      	ldr	r3, [r7, #0]
 8018a26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018a2a:	f003 0308 	and.w	r3, r3, #8
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d014      	beq.n	8018a5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018a32:	8afb      	ldrh	r3, [r7, #22]
 8018a34:	4619      	mov	r1, r3
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f7f6 fd84 	bl	800f544 <pbuf_remove_header>
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d10e      	bne.n	8018a60 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018a42:	6839      	ldr	r1, [r7, #0]
 8018a44:	6878      	ldr	r0, [r7, #4]
 8018a46:	f7fe f8c1 	bl	8016bcc <etharp_input>
      break;
 8018a4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	e00c      	b.n	8018a6a <ethernet_input+0x10e>
    goto free_and_return;
 8018a50:	bf00      	nop
 8018a52:	e006      	b.n	8018a62 <ethernet_input+0x106>
        goto free_and_return;
 8018a54:	bf00      	nop
 8018a56:	e004      	b.n	8018a62 <ethernet_input+0x106>
        goto free_and_return;
 8018a58:	bf00      	nop
 8018a5a:	e002      	b.n	8018a62 <ethernet_input+0x106>
        goto free_and_return;
 8018a5c:	bf00      	nop
 8018a5e:	e000      	b.n	8018a62 <ethernet_input+0x106>
        goto free_and_return;
 8018a60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7f6 fdf4 	bl	800f650 <pbuf_free>
  return ERR_OK;
 8018a68:	2300      	movs	r3, #0
}
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	3718      	adds	r7, #24
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop
 8018a74:	0801f62c 	.word	0x0801f62c

08018a78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b086      	sub	sp, #24
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	60f8      	str	r0, [r7, #12]
 8018a80:	60b9      	str	r1, [r7, #8]
 8018a82:	607a      	str	r2, [r7, #4]
 8018a84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018a86:	8c3b      	ldrh	r3, [r7, #32]
 8018a88:	4618      	mov	r0, r3
 8018a8a:	f7f5 fa35 	bl	800def8 <lwip_htons>
 8018a8e:	4603      	mov	r3, r0
 8018a90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018a92:	210e      	movs	r1, #14
 8018a94:	68b8      	ldr	r0, [r7, #8]
 8018a96:	f7f6 fd45 	bl	800f524 <pbuf_add_header>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d125      	bne.n	8018aec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	685b      	ldr	r3, [r3, #4]
 8018aa4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018aa6:	693b      	ldr	r3, [r7, #16]
 8018aa8:	8afa      	ldrh	r2, [r7, #22]
 8018aaa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018aac:	693b      	ldr	r3, [r7, #16]
 8018aae:	2206      	movs	r2, #6
 8018ab0:	6839      	ldr	r1, [r7, #0]
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f001 f995 	bl	8019de2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	3306      	adds	r3, #6
 8018abc:	2206      	movs	r2, #6
 8018abe:	6879      	ldr	r1, [r7, #4]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f001 f98e 	bl	8019de2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018acc:	2b06      	cmp	r3, #6
 8018ace:	d006      	beq.n	8018ade <ethernet_output+0x66>
 8018ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8018afc <ethernet_output+0x84>)
 8018ad2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018ad6:	490a      	ldr	r1, [pc, #40]	@ (8018b00 <ethernet_output+0x88>)
 8018ad8:	480a      	ldr	r0, [pc, #40]	@ (8018b04 <ethernet_output+0x8c>)
 8018ada:	f000 ff03 	bl	80198e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	699b      	ldr	r3, [r3, #24]
 8018ae2:	68b9      	ldr	r1, [r7, #8]
 8018ae4:	68f8      	ldr	r0, [r7, #12]
 8018ae6:	4798      	blx	r3
 8018ae8:	4603      	mov	r3, r0
 8018aea:	e002      	b.n	8018af2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018aec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018aee:	f06f 0301 	mvn.w	r3, #1
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3718      	adds	r7, #24
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	0801f468 	.word	0x0801f468
 8018b00:	0801f4a0 	.word	0x0801f4a0
 8018b04:	0801f4d4 	.word	0x0801f4d4

08018b08 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	2200      	movs	r2, #0
 8018b16:	2104      	movs	r1, #4
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ee ffb9 	bl	8007a90 <osMessageQueueNew>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d102      	bne.n	8018b32 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b30:	e000      	b.n	8018b34 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018b32:	2300      	movs	r3, #0
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3708      	adds	r7, #8
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd80      	pop	{r7, pc}

08018b3c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b082      	sub	sp, #8
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	4618      	mov	r0, r3
 8018b4a:	f7ef f90d 	bl	8007d68 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	4618      	mov	r0, r3
 8018b54:	f7ef f93a 	bl	8007dcc <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018b58:	bf00      	nop
 8018b5a:	3708      	adds	r7, #8
 8018b5c:	46bd      	mov	sp, r7
 8018b5e:	bd80      	pop	{r7, pc}

08018b60 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	6818      	ldr	r0, [r3, #0]
 8018b6e:	4639      	mov	r1, r7
 8018b70:	2300      	movs	r3, #0
 8018b72:	2200      	movs	r2, #0
 8018b74:	f7ef f812 	bl	8007b9c <osMessageQueuePut>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d102      	bne.n	8018b84 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018b7e:	2300      	movs	r3, #0
 8018b80:	73fb      	strb	r3, [r7, #15]
 8018b82:	e001      	b.n	8018b88 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018b84:	23ff      	movs	r3, #255	@ 0xff
 8018b86:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3710      	adds	r7, #16
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}

08018b94 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018b94:	b580      	push	{r7, lr}
 8018b96:	b086      	sub	sp, #24
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	60f8      	str	r0, [r7, #12]
 8018b9c:	60b9      	str	r1, [r7, #8]
 8018b9e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018ba0:	f7ee fba2 	bl	80072e8 <osKernelGetTickCount>
 8018ba4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d013      	beq.n	8018bd4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	6818      	ldr	r0, [r3, #0]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	68b9      	ldr	r1, [r7, #8]
 8018bb6:	f7ef f865 	bl	8007c84 <osMessageQueueGet>
 8018bba:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018bbc:	693b      	ldr	r3, [r7, #16]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d105      	bne.n	8018bce <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018bc2:	f7ee fb91 	bl	80072e8 <osKernelGetTickCount>
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	1ad3      	subs	r3, r2, r3
 8018bcc:	e00f      	b.n	8018bee <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018bce:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd2:	e00c      	b.n	8018bee <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	6818      	ldr	r0, [r3, #0]
 8018bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018bdc:	2200      	movs	r2, #0
 8018bde:	68b9      	ldr	r1, [r7, #8]
 8018be0:	f7ef f850 	bl	8007c84 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018be4:	f7ee fb80 	bl	80072e8 <osKernelGetTickCount>
 8018be8:	4602      	mov	r2, r0
 8018bea:	697b      	ldr	r3, [r7, #20]
 8018bec:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3718      	adds	r7, #24
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}

08018bf6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018bf6:	b580      	push	{r7, lr}
 8018bf8:	b082      	sub	sp, #8
 8018bfa:	af00      	add	r7, sp, #0
 8018bfc:	6078      	str	r0, [r7, #4]
 8018bfe:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6818      	ldr	r0, [r3, #0]
 8018c04:	2300      	movs	r3, #0
 8018c06:	2200      	movs	r2, #0
 8018c08:	6839      	ldr	r1, [r7, #0]
 8018c0a:	f7ef f83b 	bl	8007c84 <osMessageQueueGet>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d101      	bne.n	8018c18 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018c14:	2300      	movs	r3, #0
 8018c16:	e001      	b.n	8018c1c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018c18:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b083      	sub	sp, #12
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d101      	bne.n	8018c38 <sys_mbox_valid+0x14>
    return 0;
 8018c34:	2300      	movs	r3, #0
 8018c36:	e000      	b.n	8018c3a <sys_mbox_valid+0x16>
  else
    return 1;
 8018c38:	2301      	movs	r3, #1
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	370c      	adds	r7, #12
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c44:	4770      	bx	lr

08018c46 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018c46:	b480      	push	{r7}
 8018c48:	b083      	sub	sp, #12
 8018c4a:	af00      	add	r7, sp, #0
 8018c4c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	2200      	movs	r2, #0
 8018c52:	601a      	str	r2, [r3, #0]
}
 8018c54:	bf00      	nop
 8018c56:	370c      	adds	r7, #12
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5e:	4770      	bx	lr

08018c60 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b082      	sub	sp, #8
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
 8018c68:	460b      	mov	r3, r1
 8018c6a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018c6c:	78fb      	ldrb	r3, [r7, #3]
 8018c6e:	2200      	movs	r2, #0
 8018c70:	4619      	mov	r1, r3
 8018c72:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c76:	f7ee fd7b 	bl	8007770 <osSemaphoreNew>
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d102      	bne.n	8018c8e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c88:	f04f 33ff 	mov.w	r3, #4294967295
 8018c8c:	e009      	b.n	8018ca2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018c8e:	78fb      	ldrb	r3, [r7, #3]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d105      	bne.n	8018ca0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	2100      	movs	r1, #0
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7ee fe04 	bl	80078a8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018ca0:	2300      	movs	r3, #0
}
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	3708      	adds	r7, #8
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}

08018caa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018caa:	b580      	push	{r7, lr}
 8018cac:	b084      	sub	sp, #16
 8018cae:	af00      	add	r7, sp, #0
 8018cb0:	6078      	str	r0, [r7, #4]
 8018cb2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018cb4:	f7ee fb18 	bl	80072e8 <osKernelGetTickCount>
 8018cb8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018cba:	683b      	ldr	r3, [r7, #0]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d011      	beq.n	8018ce4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	6839      	ldr	r1, [r7, #0]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ee fdee 	bl	80078a8 <osSemaphoreAcquire>
 8018ccc:	4603      	mov	r3, r0
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d105      	bne.n	8018cde <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018cd2:	f7ee fb09 	bl	80072e8 <osKernelGetTickCount>
 8018cd6:	4602      	mov	r2, r0
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	1ad3      	subs	r3, r2, r3
 8018cdc:	e012      	b.n	8018d04 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018cde:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce2:	e00f      	b.n	8018d04 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018ce4:	bf00      	nop
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	f04f 31ff 	mov.w	r1, #4294967295
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7ee fdda 	bl	80078a8 <osSemaphoreAcquire>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d1f5      	bne.n	8018ce6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018cfa:	f7ee faf5 	bl	80072e8 <osKernelGetTickCount>
 8018cfe:	4602      	mov	r2, r0
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018d04:	4618      	mov	r0, r3
 8018d06:	3710      	adds	r7, #16
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	bd80      	pop	{r7, pc}

08018d0c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f7ee fe2b 	bl	8007974 <osSemaphoreRelease>
}
 8018d1e:	bf00      	nop
 8018d20:	3708      	adds	r7, #8
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bd80      	pop	{r7, pc}

08018d26 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018d26:	b580      	push	{r7, lr}
 8018d28:	b082      	sub	sp, #8
 8018d2a:	af00      	add	r7, sp, #0
 8018d2c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7ee fe76 	bl	8007a24 <osSemaphoreDelete>
}
 8018d38:	bf00      	nop
 8018d3a:	3708      	adds	r7, #8
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd80      	pop	{r7, pc}

08018d40 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018d40:	b480      	push	{r7}
 8018d42:	b083      	sub	sp, #12
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d101      	bne.n	8018d54 <sys_sem_valid+0x14>
    return 0;
 8018d50:	2300      	movs	r3, #0
 8018d52:	e000      	b.n	8018d56 <sys_sem_valid+0x16>
  else
    return 1;
 8018d54:	2301      	movs	r3, #1
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	370c      	adds	r7, #12
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d60:	4770      	bx	lr

08018d62 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018d62:	b480      	push	{r7}
 8018d64:	b083      	sub	sp, #12
 8018d66:	af00      	add	r7, sp, #0
 8018d68:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]
}
 8018d70:	bf00      	nop
 8018d72:	370c      	adds	r7, #12
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr

08018d7c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018d80:	2000      	movs	r0, #0
 8018d82:	f7ee fbad 	bl	80074e0 <osMutexNew>
 8018d86:	4603      	mov	r3, r0
 8018d88:	4a01      	ldr	r2, [pc, #4]	@ (8018d90 <sys_init+0x14>)
 8018d8a:	6013      	str	r3, [r2, #0]
#endif
}
 8018d8c:	bf00      	nop
 8018d8e:	bd80      	pop	{r7, pc}
 8018d90:	20011e78 	.word	0x20011e78

08018d94 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	f7ee fb9f 	bl	80074e0 <osMutexNew>
 8018da2:	4602      	mov	r2, r0
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d102      	bne.n	8018db6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018db0:	f04f 33ff 	mov.w	r3, #4294967295
 8018db4:	e000      	b.n	8018db8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018db6:	2300      	movs	r3, #0
}
 8018db8:	4618      	mov	r0, r3
 8018dba:	3708      	adds	r7, #8
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	bd80      	pop	{r7, pc}

08018dc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	f7ee fc1f 	bl	8007614 <osMutexAcquire>
#endif
}
 8018dd6:	bf00      	nop
 8018dd8:	3708      	adds	r7, #8
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}

08018dde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018dde:	b580      	push	{r7, lr}
 8018de0:	b082      	sub	sp, #8
 8018de2:	af00      	add	r7, sp, #0
 8018de4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	4618      	mov	r0, r3
 8018dec:	f7ee fc70 	bl	80076d0 <osMutexRelease>
}
 8018df0:	bf00      	nop
 8018df2:	3708      	adds	r7, #8
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}

08018df8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b08e      	sub	sp, #56	@ 0x38
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	60f8      	str	r0, [r7, #12]
 8018e00:	60b9      	str	r1, [r7, #8]
 8018e02:	607a      	str	r2, [r7, #4]
 8018e04:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018e06:	f107 0314 	add.w	r3, r7, #20
 8018e0a:	2224      	movs	r2, #36	@ 0x24
 8018e0c:	2100      	movs	r1, #0
 8018e0e:	4618      	mov	r0, r3
 8018e10:	f000 ff2e 	bl	8019c70 <memset>
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	617b      	str	r3, [r7, #20]
 8018e18:	683b      	ldr	r3, [r7, #0]
 8018e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018e20:	f107 0314 	add.w	r3, r7, #20
 8018e24:	461a      	mov	r2, r3
 8018e26:	6879      	ldr	r1, [r7, #4]
 8018e28:	68b8      	ldr	r0, [r7, #8]
 8018e2a:	f7ee fa85 	bl	8007338 <osThreadNew>
 8018e2e:	4603      	mov	r3, r0
#endif
}
 8018e30:	4618      	mov	r0, r3
 8018e32:	3738      	adds	r7, #56	@ 0x38
 8018e34:	46bd      	mov	sp, r7
 8018e36:	bd80      	pop	{r7, pc}

08018e38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018e3c:	4b04      	ldr	r3, [pc, #16]	@ (8018e50 <sys_arch_protect+0x18>)
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	f04f 31ff 	mov.w	r1, #4294967295
 8018e44:	4618      	mov	r0, r3
 8018e46:	f7ee fbe5 	bl	8007614 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018e4a:	2301      	movs	r3, #1
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	bd80      	pop	{r7, pc}
 8018e50:	20011e78 	.word	0x20011e78

08018e54 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018e5c:	4b04      	ldr	r3, [pc, #16]	@ (8018e70 <sys_arch_unprotect+0x1c>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7ee fc35 	bl	80076d0 <osMutexRelease>
}
 8018e66:	bf00      	nop
 8018e68:	3708      	adds	r7, #8
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	20011e78 	.word	0x20011e78

08018e74 <rand>:
 8018e74:	4b16      	ldr	r3, [pc, #88]	@ (8018ed0 <rand+0x5c>)
 8018e76:	b510      	push	{r4, lr}
 8018e78:	681c      	ldr	r4, [r3, #0]
 8018e7a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018e7c:	b9b3      	cbnz	r3, 8018eac <rand+0x38>
 8018e7e:	2018      	movs	r0, #24
 8018e80:	f001 fe06 	bl	801aa90 <malloc>
 8018e84:	4602      	mov	r2, r0
 8018e86:	6320      	str	r0, [r4, #48]	@ 0x30
 8018e88:	b920      	cbnz	r0, 8018e94 <rand+0x20>
 8018e8a:	4b12      	ldr	r3, [pc, #72]	@ (8018ed4 <rand+0x60>)
 8018e8c:	4812      	ldr	r0, [pc, #72]	@ (8018ed8 <rand+0x64>)
 8018e8e:	2152      	movs	r1, #82	@ 0x52
 8018e90:	f000 ffb6 	bl	8019e00 <__assert_func>
 8018e94:	4911      	ldr	r1, [pc, #68]	@ (8018edc <rand+0x68>)
 8018e96:	4b12      	ldr	r3, [pc, #72]	@ (8018ee0 <rand+0x6c>)
 8018e98:	e9c0 1300 	strd	r1, r3, [r0]
 8018e9c:	4b11      	ldr	r3, [pc, #68]	@ (8018ee4 <rand+0x70>)
 8018e9e:	6083      	str	r3, [r0, #8]
 8018ea0:	230b      	movs	r3, #11
 8018ea2:	8183      	strh	r3, [r0, #12]
 8018ea4:	2100      	movs	r1, #0
 8018ea6:	2001      	movs	r0, #1
 8018ea8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018eae:	480e      	ldr	r0, [pc, #56]	@ (8018ee8 <rand+0x74>)
 8018eb0:	690b      	ldr	r3, [r1, #16]
 8018eb2:	694c      	ldr	r4, [r1, #20]
 8018eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8018eec <rand+0x78>)
 8018eb6:	4358      	muls	r0, r3
 8018eb8:	fb02 0004 	mla	r0, r2, r4, r0
 8018ebc:	fba3 3202 	umull	r3, r2, r3, r2
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	eb40 0002 	adc.w	r0, r0, r2
 8018ec6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018eca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8018ece:	bd10      	pop	{r4, pc}
 8018ed0:	20000028 	.word	0x20000028
 8018ed4:	0801f63a 	.word	0x0801f63a
 8018ed8:	0801f651 	.word	0x0801f651
 8018edc:	abcd330e 	.word	0xabcd330e
 8018ee0:	e66d1234 	.word	0xe66d1234
 8018ee4:	0005deec 	.word	0x0005deec
 8018ee8:	5851f42d 	.word	0x5851f42d
 8018eec:	4c957f2d 	.word	0x4c957f2d

08018ef0 <__cvt>:
 8018ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ef2:	ed2d 8b02 	vpush	{d8}
 8018ef6:	eeb0 8b40 	vmov.f64	d8, d0
 8018efa:	b085      	sub	sp, #20
 8018efc:	4617      	mov	r7, r2
 8018efe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018f00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018f02:	ee18 2a90 	vmov	r2, s17
 8018f06:	f025 0520 	bic.w	r5, r5, #32
 8018f0a:	2a00      	cmp	r2, #0
 8018f0c:	bfb6      	itet	lt
 8018f0e:	222d      	movlt	r2, #45	@ 0x2d
 8018f10:	2200      	movge	r2, #0
 8018f12:	eeb1 8b40 	vneglt.f64	d8, d0
 8018f16:	2d46      	cmp	r5, #70	@ 0x46
 8018f18:	460c      	mov	r4, r1
 8018f1a:	701a      	strb	r2, [r3, #0]
 8018f1c:	d004      	beq.n	8018f28 <__cvt+0x38>
 8018f1e:	2d45      	cmp	r5, #69	@ 0x45
 8018f20:	d100      	bne.n	8018f24 <__cvt+0x34>
 8018f22:	3401      	adds	r4, #1
 8018f24:	2102      	movs	r1, #2
 8018f26:	e000      	b.n	8018f2a <__cvt+0x3a>
 8018f28:	2103      	movs	r1, #3
 8018f2a:	ab03      	add	r3, sp, #12
 8018f2c:	9301      	str	r3, [sp, #4]
 8018f2e:	ab02      	add	r3, sp, #8
 8018f30:	9300      	str	r3, [sp, #0]
 8018f32:	4622      	mov	r2, r4
 8018f34:	4633      	mov	r3, r6
 8018f36:	eeb0 0b48 	vmov.f64	d0, d8
 8018f3a:	f001 f809 	bl	8019f50 <_dtoa_r>
 8018f3e:	2d47      	cmp	r5, #71	@ 0x47
 8018f40:	d114      	bne.n	8018f6c <__cvt+0x7c>
 8018f42:	07fb      	lsls	r3, r7, #31
 8018f44:	d50a      	bpl.n	8018f5c <__cvt+0x6c>
 8018f46:	1902      	adds	r2, r0, r4
 8018f48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f50:	bf08      	it	eq
 8018f52:	9203      	streq	r2, [sp, #12]
 8018f54:	2130      	movs	r1, #48	@ 0x30
 8018f56:	9b03      	ldr	r3, [sp, #12]
 8018f58:	4293      	cmp	r3, r2
 8018f5a:	d319      	bcc.n	8018f90 <__cvt+0xa0>
 8018f5c:	9b03      	ldr	r3, [sp, #12]
 8018f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018f60:	1a1b      	subs	r3, r3, r0
 8018f62:	6013      	str	r3, [r2, #0]
 8018f64:	b005      	add	sp, #20
 8018f66:	ecbd 8b02 	vpop	{d8}
 8018f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f6c:	2d46      	cmp	r5, #70	@ 0x46
 8018f6e:	eb00 0204 	add.w	r2, r0, r4
 8018f72:	d1e9      	bne.n	8018f48 <__cvt+0x58>
 8018f74:	7803      	ldrb	r3, [r0, #0]
 8018f76:	2b30      	cmp	r3, #48	@ 0x30
 8018f78:	d107      	bne.n	8018f8a <__cvt+0x9a>
 8018f7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f82:	bf1c      	itt	ne
 8018f84:	f1c4 0401 	rsbne	r4, r4, #1
 8018f88:	6034      	strne	r4, [r6, #0]
 8018f8a:	6833      	ldr	r3, [r6, #0]
 8018f8c:	441a      	add	r2, r3
 8018f8e:	e7db      	b.n	8018f48 <__cvt+0x58>
 8018f90:	1c5c      	adds	r4, r3, #1
 8018f92:	9403      	str	r4, [sp, #12]
 8018f94:	7019      	strb	r1, [r3, #0]
 8018f96:	e7de      	b.n	8018f56 <__cvt+0x66>

08018f98 <__exponent>:
 8018f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f9a:	2900      	cmp	r1, #0
 8018f9c:	bfba      	itte	lt
 8018f9e:	4249      	neglt	r1, r1
 8018fa0:	232d      	movlt	r3, #45	@ 0x2d
 8018fa2:	232b      	movge	r3, #43	@ 0x2b
 8018fa4:	2909      	cmp	r1, #9
 8018fa6:	7002      	strb	r2, [r0, #0]
 8018fa8:	7043      	strb	r3, [r0, #1]
 8018faa:	dd29      	ble.n	8019000 <__exponent+0x68>
 8018fac:	f10d 0307 	add.w	r3, sp, #7
 8018fb0:	461d      	mov	r5, r3
 8018fb2:	270a      	movs	r7, #10
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	fbb1 f6f7 	udiv	r6, r1, r7
 8018fba:	fb07 1416 	mls	r4, r7, r6, r1
 8018fbe:	3430      	adds	r4, #48	@ 0x30
 8018fc0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8018fc4:	460c      	mov	r4, r1
 8018fc6:	2c63      	cmp	r4, #99	@ 0x63
 8018fc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8018fcc:	4631      	mov	r1, r6
 8018fce:	dcf1      	bgt.n	8018fb4 <__exponent+0x1c>
 8018fd0:	3130      	adds	r1, #48	@ 0x30
 8018fd2:	1e94      	subs	r4, r2, #2
 8018fd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8018fd8:	1c41      	adds	r1, r0, #1
 8018fda:	4623      	mov	r3, r4
 8018fdc:	42ab      	cmp	r3, r5
 8018fde:	d30a      	bcc.n	8018ff6 <__exponent+0x5e>
 8018fe0:	f10d 0309 	add.w	r3, sp, #9
 8018fe4:	1a9b      	subs	r3, r3, r2
 8018fe6:	42ac      	cmp	r4, r5
 8018fe8:	bf88      	it	hi
 8018fea:	2300      	movhi	r3, #0
 8018fec:	3302      	adds	r3, #2
 8018fee:	4403      	add	r3, r0
 8018ff0:	1a18      	subs	r0, r3, r0
 8018ff2:	b003      	add	sp, #12
 8018ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ff6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8018ffa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8018ffe:	e7ed      	b.n	8018fdc <__exponent+0x44>
 8019000:	2330      	movs	r3, #48	@ 0x30
 8019002:	3130      	adds	r1, #48	@ 0x30
 8019004:	7083      	strb	r3, [r0, #2]
 8019006:	70c1      	strb	r1, [r0, #3]
 8019008:	1d03      	adds	r3, r0, #4
 801900a:	e7f1      	b.n	8018ff0 <__exponent+0x58>
 801900c:	0000      	movs	r0, r0
	...

08019010 <_printf_float>:
 8019010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019014:	b08d      	sub	sp, #52	@ 0x34
 8019016:	460c      	mov	r4, r1
 8019018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801901c:	4616      	mov	r6, r2
 801901e:	461f      	mov	r7, r3
 8019020:	4605      	mov	r5, r0
 8019022:	f000 fe65 	bl	8019cf0 <_localeconv_r>
 8019026:	f8d0 b000 	ldr.w	fp, [r0]
 801902a:	4658      	mov	r0, fp
 801902c:	f7e7 f958 	bl	80002e0 <strlen>
 8019030:	2300      	movs	r3, #0
 8019032:	930a      	str	r3, [sp, #40]	@ 0x28
 8019034:	f8d8 3000 	ldr.w	r3, [r8]
 8019038:	f894 9018 	ldrb.w	r9, [r4, #24]
 801903c:	6822      	ldr	r2, [r4, #0]
 801903e:	9005      	str	r0, [sp, #20]
 8019040:	3307      	adds	r3, #7
 8019042:	f023 0307 	bic.w	r3, r3, #7
 8019046:	f103 0108 	add.w	r1, r3, #8
 801904a:	f8c8 1000 	str.w	r1, [r8]
 801904e:	ed93 0b00 	vldr	d0, [r3]
 8019052:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80192b0 <_printf_float+0x2a0>
 8019056:	eeb0 7bc0 	vabs.f64	d7, d0
 801905a:	eeb4 7b46 	vcmp.f64	d7, d6
 801905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019062:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8019066:	dd24      	ble.n	80190b2 <_printf_float+0xa2>
 8019068:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019070:	d502      	bpl.n	8019078 <_printf_float+0x68>
 8019072:	232d      	movs	r3, #45	@ 0x2d
 8019074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019078:	498f      	ldr	r1, [pc, #572]	@ (80192b8 <_printf_float+0x2a8>)
 801907a:	4b90      	ldr	r3, [pc, #576]	@ (80192bc <_printf_float+0x2ac>)
 801907c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8019080:	bf94      	ite	ls
 8019082:	4688      	movls	r8, r1
 8019084:	4698      	movhi	r8, r3
 8019086:	f022 0204 	bic.w	r2, r2, #4
 801908a:	2303      	movs	r3, #3
 801908c:	6123      	str	r3, [r4, #16]
 801908e:	6022      	str	r2, [r4, #0]
 8019090:	f04f 0a00 	mov.w	sl, #0
 8019094:	9700      	str	r7, [sp, #0]
 8019096:	4633      	mov	r3, r6
 8019098:	aa0b      	add	r2, sp, #44	@ 0x2c
 801909a:	4621      	mov	r1, r4
 801909c:	4628      	mov	r0, r5
 801909e:	f000 f9d1 	bl	8019444 <_printf_common>
 80190a2:	3001      	adds	r0, #1
 80190a4:	f040 8089 	bne.w	80191ba <_printf_float+0x1aa>
 80190a8:	f04f 30ff 	mov.w	r0, #4294967295
 80190ac:	b00d      	add	sp, #52	@ 0x34
 80190ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80190b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190ba:	d709      	bvc.n	80190d0 <_printf_float+0xc0>
 80190bc:	ee10 3a90 	vmov	r3, s1
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	bfbc      	itt	lt
 80190c4:	232d      	movlt	r3, #45	@ 0x2d
 80190c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80190ca:	497d      	ldr	r1, [pc, #500]	@ (80192c0 <_printf_float+0x2b0>)
 80190cc:	4b7d      	ldr	r3, [pc, #500]	@ (80192c4 <_printf_float+0x2b4>)
 80190ce:	e7d5      	b.n	801907c <_printf_float+0x6c>
 80190d0:	6863      	ldr	r3, [r4, #4]
 80190d2:	1c59      	adds	r1, r3, #1
 80190d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80190d8:	d139      	bne.n	801914e <_printf_float+0x13e>
 80190da:	2306      	movs	r3, #6
 80190dc:	6063      	str	r3, [r4, #4]
 80190de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80190e2:	2300      	movs	r3, #0
 80190e4:	6022      	str	r2, [r4, #0]
 80190e6:	9303      	str	r3, [sp, #12]
 80190e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80190ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80190ee:	ab09      	add	r3, sp, #36	@ 0x24
 80190f0:	9300      	str	r3, [sp, #0]
 80190f2:	6861      	ldr	r1, [r4, #4]
 80190f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80190f8:	4628      	mov	r0, r5
 80190fa:	f7ff fef9 	bl	8018ef0 <__cvt>
 80190fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019104:	4680      	mov	r8, r0
 8019106:	d129      	bne.n	801915c <_printf_float+0x14c>
 8019108:	1cc8      	adds	r0, r1, #3
 801910a:	db02      	blt.n	8019112 <_printf_float+0x102>
 801910c:	6863      	ldr	r3, [r4, #4]
 801910e:	4299      	cmp	r1, r3
 8019110:	dd41      	ble.n	8019196 <_printf_float+0x186>
 8019112:	f1a9 0902 	sub.w	r9, r9, #2
 8019116:	fa5f f989 	uxtb.w	r9, r9
 801911a:	3901      	subs	r1, #1
 801911c:	464a      	mov	r2, r9
 801911e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019122:	9109      	str	r1, [sp, #36]	@ 0x24
 8019124:	f7ff ff38 	bl	8018f98 <__exponent>
 8019128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801912a:	1813      	adds	r3, r2, r0
 801912c:	2a01      	cmp	r2, #1
 801912e:	4682      	mov	sl, r0
 8019130:	6123      	str	r3, [r4, #16]
 8019132:	dc02      	bgt.n	801913a <_printf_float+0x12a>
 8019134:	6822      	ldr	r2, [r4, #0]
 8019136:	07d2      	lsls	r2, r2, #31
 8019138:	d501      	bpl.n	801913e <_printf_float+0x12e>
 801913a:	3301      	adds	r3, #1
 801913c:	6123      	str	r3, [r4, #16]
 801913e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019142:	2b00      	cmp	r3, #0
 8019144:	d0a6      	beq.n	8019094 <_printf_float+0x84>
 8019146:	232d      	movs	r3, #45	@ 0x2d
 8019148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801914c:	e7a2      	b.n	8019094 <_printf_float+0x84>
 801914e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8019152:	d1c4      	bne.n	80190de <_printf_float+0xce>
 8019154:	2b00      	cmp	r3, #0
 8019156:	d1c2      	bne.n	80190de <_printf_float+0xce>
 8019158:	2301      	movs	r3, #1
 801915a:	e7bf      	b.n	80190dc <_printf_float+0xcc>
 801915c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8019160:	d9db      	bls.n	801911a <_printf_float+0x10a>
 8019162:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8019166:	d118      	bne.n	801919a <_printf_float+0x18a>
 8019168:	2900      	cmp	r1, #0
 801916a:	6863      	ldr	r3, [r4, #4]
 801916c:	dd0b      	ble.n	8019186 <_printf_float+0x176>
 801916e:	6121      	str	r1, [r4, #16]
 8019170:	b913      	cbnz	r3, 8019178 <_printf_float+0x168>
 8019172:	6822      	ldr	r2, [r4, #0]
 8019174:	07d0      	lsls	r0, r2, #31
 8019176:	d502      	bpl.n	801917e <_printf_float+0x16e>
 8019178:	3301      	adds	r3, #1
 801917a:	440b      	add	r3, r1
 801917c:	6123      	str	r3, [r4, #16]
 801917e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019180:	f04f 0a00 	mov.w	sl, #0
 8019184:	e7db      	b.n	801913e <_printf_float+0x12e>
 8019186:	b913      	cbnz	r3, 801918e <_printf_float+0x17e>
 8019188:	6822      	ldr	r2, [r4, #0]
 801918a:	07d2      	lsls	r2, r2, #31
 801918c:	d501      	bpl.n	8019192 <_printf_float+0x182>
 801918e:	3302      	adds	r3, #2
 8019190:	e7f4      	b.n	801917c <_printf_float+0x16c>
 8019192:	2301      	movs	r3, #1
 8019194:	e7f2      	b.n	801917c <_printf_float+0x16c>
 8019196:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801919a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801919c:	4299      	cmp	r1, r3
 801919e:	db05      	blt.n	80191ac <_printf_float+0x19c>
 80191a0:	6823      	ldr	r3, [r4, #0]
 80191a2:	6121      	str	r1, [r4, #16]
 80191a4:	07d8      	lsls	r0, r3, #31
 80191a6:	d5ea      	bpl.n	801917e <_printf_float+0x16e>
 80191a8:	1c4b      	adds	r3, r1, #1
 80191aa:	e7e7      	b.n	801917c <_printf_float+0x16c>
 80191ac:	2900      	cmp	r1, #0
 80191ae:	bfd4      	ite	le
 80191b0:	f1c1 0202 	rsble	r2, r1, #2
 80191b4:	2201      	movgt	r2, #1
 80191b6:	4413      	add	r3, r2
 80191b8:	e7e0      	b.n	801917c <_printf_float+0x16c>
 80191ba:	6823      	ldr	r3, [r4, #0]
 80191bc:	055a      	lsls	r2, r3, #21
 80191be:	d407      	bmi.n	80191d0 <_printf_float+0x1c0>
 80191c0:	6923      	ldr	r3, [r4, #16]
 80191c2:	4642      	mov	r2, r8
 80191c4:	4631      	mov	r1, r6
 80191c6:	4628      	mov	r0, r5
 80191c8:	47b8      	blx	r7
 80191ca:	3001      	adds	r0, #1
 80191cc:	d12a      	bne.n	8019224 <_printf_float+0x214>
 80191ce:	e76b      	b.n	80190a8 <_printf_float+0x98>
 80191d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80191d4:	f240 80e0 	bls.w	8019398 <_printf_float+0x388>
 80191d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80191dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80191e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191e4:	d133      	bne.n	801924e <_printf_float+0x23e>
 80191e6:	4a38      	ldr	r2, [pc, #224]	@ (80192c8 <_printf_float+0x2b8>)
 80191e8:	2301      	movs	r3, #1
 80191ea:	4631      	mov	r1, r6
 80191ec:	4628      	mov	r0, r5
 80191ee:	47b8      	blx	r7
 80191f0:	3001      	adds	r0, #1
 80191f2:	f43f af59 	beq.w	80190a8 <_printf_float+0x98>
 80191f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80191fa:	4543      	cmp	r3, r8
 80191fc:	db02      	blt.n	8019204 <_printf_float+0x1f4>
 80191fe:	6823      	ldr	r3, [r4, #0]
 8019200:	07d8      	lsls	r0, r3, #31
 8019202:	d50f      	bpl.n	8019224 <_printf_float+0x214>
 8019204:	9b05      	ldr	r3, [sp, #20]
 8019206:	465a      	mov	r2, fp
 8019208:	4631      	mov	r1, r6
 801920a:	4628      	mov	r0, r5
 801920c:	47b8      	blx	r7
 801920e:	3001      	adds	r0, #1
 8019210:	f43f af4a 	beq.w	80190a8 <_printf_float+0x98>
 8019214:	f04f 0900 	mov.w	r9, #0
 8019218:	f108 38ff 	add.w	r8, r8, #4294967295
 801921c:	f104 0a1a 	add.w	sl, r4, #26
 8019220:	45c8      	cmp	r8, r9
 8019222:	dc09      	bgt.n	8019238 <_printf_float+0x228>
 8019224:	6823      	ldr	r3, [r4, #0]
 8019226:	079b      	lsls	r3, r3, #30
 8019228:	f100 8107 	bmi.w	801943a <_printf_float+0x42a>
 801922c:	68e0      	ldr	r0, [r4, #12]
 801922e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019230:	4298      	cmp	r0, r3
 8019232:	bfb8      	it	lt
 8019234:	4618      	movlt	r0, r3
 8019236:	e739      	b.n	80190ac <_printf_float+0x9c>
 8019238:	2301      	movs	r3, #1
 801923a:	4652      	mov	r2, sl
 801923c:	4631      	mov	r1, r6
 801923e:	4628      	mov	r0, r5
 8019240:	47b8      	blx	r7
 8019242:	3001      	adds	r0, #1
 8019244:	f43f af30 	beq.w	80190a8 <_printf_float+0x98>
 8019248:	f109 0901 	add.w	r9, r9, #1
 801924c:	e7e8      	b.n	8019220 <_printf_float+0x210>
 801924e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019250:	2b00      	cmp	r3, #0
 8019252:	dc3b      	bgt.n	80192cc <_printf_float+0x2bc>
 8019254:	4a1c      	ldr	r2, [pc, #112]	@ (80192c8 <_printf_float+0x2b8>)
 8019256:	2301      	movs	r3, #1
 8019258:	4631      	mov	r1, r6
 801925a:	4628      	mov	r0, r5
 801925c:	47b8      	blx	r7
 801925e:	3001      	adds	r0, #1
 8019260:	f43f af22 	beq.w	80190a8 <_printf_float+0x98>
 8019264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8019268:	ea59 0303 	orrs.w	r3, r9, r3
 801926c:	d102      	bne.n	8019274 <_printf_float+0x264>
 801926e:	6823      	ldr	r3, [r4, #0]
 8019270:	07d9      	lsls	r1, r3, #31
 8019272:	d5d7      	bpl.n	8019224 <_printf_float+0x214>
 8019274:	9b05      	ldr	r3, [sp, #20]
 8019276:	465a      	mov	r2, fp
 8019278:	4631      	mov	r1, r6
 801927a:	4628      	mov	r0, r5
 801927c:	47b8      	blx	r7
 801927e:	3001      	adds	r0, #1
 8019280:	f43f af12 	beq.w	80190a8 <_printf_float+0x98>
 8019284:	f04f 0a00 	mov.w	sl, #0
 8019288:	f104 0b1a 	add.w	fp, r4, #26
 801928c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801928e:	425b      	negs	r3, r3
 8019290:	4553      	cmp	r3, sl
 8019292:	dc01      	bgt.n	8019298 <_printf_float+0x288>
 8019294:	464b      	mov	r3, r9
 8019296:	e794      	b.n	80191c2 <_printf_float+0x1b2>
 8019298:	2301      	movs	r3, #1
 801929a:	465a      	mov	r2, fp
 801929c:	4631      	mov	r1, r6
 801929e:	4628      	mov	r0, r5
 80192a0:	47b8      	blx	r7
 80192a2:	3001      	adds	r0, #1
 80192a4:	f43f af00 	beq.w	80190a8 <_printf_float+0x98>
 80192a8:	f10a 0a01 	add.w	sl, sl, #1
 80192ac:	e7ee      	b.n	801928c <_printf_float+0x27c>
 80192ae:	bf00      	nop
 80192b0:	ffffffff 	.word	0xffffffff
 80192b4:	7fefffff 	.word	0x7fefffff
 80192b8:	0801f7aa 	.word	0x0801f7aa
 80192bc:	0801f7ae 	.word	0x0801f7ae
 80192c0:	0801f7b2 	.word	0x0801f7b2
 80192c4:	0801f7b6 	.word	0x0801f7b6
 80192c8:	0801f7ba 	.word	0x0801f7ba
 80192cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80192ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80192d2:	4553      	cmp	r3, sl
 80192d4:	bfa8      	it	ge
 80192d6:	4653      	movge	r3, sl
 80192d8:	2b00      	cmp	r3, #0
 80192da:	4699      	mov	r9, r3
 80192dc:	dc37      	bgt.n	801934e <_printf_float+0x33e>
 80192de:	2300      	movs	r3, #0
 80192e0:	9307      	str	r3, [sp, #28]
 80192e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80192e6:	f104 021a 	add.w	r2, r4, #26
 80192ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80192ec:	9907      	ldr	r1, [sp, #28]
 80192ee:	9306      	str	r3, [sp, #24]
 80192f0:	eba3 0309 	sub.w	r3, r3, r9
 80192f4:	428b      	cmp	r3, r1
 80192f6:	dc31      	bgt.n	801935c <_printf_float+0x34c>
 80192f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192fa:	459a      	cmp	sl, r3
 80192fc:	dc3b      	bgt.n	8019376 <_printf_float+0x366>
 80192fe:	6823      	ldr	r3, [r4, #0]
 8019300:	07da      	lsls	r2, r3, #31
 8019302:	d438      	bmi.n	8019376 <_printf_float+0x366>
 8019304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019306:	ebaa 0903 	sub.w	r9, sl, r3
 801930a:	9b06      	ldr	r3, [sp, #24]
 801930c:	ebaa 0303 	sub.w	r3, sl, r3
 8019310:	4599      	cmp	r9, r3
 8019312:	bfa8      	it	ge
 8019314:	4699      	movge	r9, r3
 8019316:	f1b9 0f00 	cmp.w	r9, #0
 801931a:	dc34      	bgt.n	8019386 <_printf_float+0x376>
 801931c:	f04f 0800 	mov.w	r8, #0
 8019320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019324:	f104 0b1a 	add.w	fp, r4, #26
 8019328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801932a:	ebaa 0303 	sub.w	r3, sl, r3
 801932e:	eba3 0309 	sub.w	r3, r3, r9
 8019332:	4543      	cmp	r3, r8
 8019334:	f77f af76 	ble.w	8019224 <_printf_float+0x214>
 8019338:	2301      	movs	r3, #1
 801933a:	465a      	mov	r2, fp
 801933c:	4631      	mov	r1, r6
 801933e:	4628      	mov	r0, r5
 8019340:	47b8      	blx	r7
 8019342:	3001      	adds	r0, #1
 8019344:	f43f aeb0 	beq.w	80190a8 <_printf_float+0x98>
 8019348:	f108 0801 	add.w	r8, r8, #1
 801934c:	e7ec      	b.n	8019328 <_printf_float+0x318>
 801934e:	4642      	mov	r2, r8
 8019350:	4631      	mov	r1, r6
 8019352:	4628      	mov	r0, r5
 8019354:	47b8      	blx	r7
 8019356:	3001      	adds	r0, #1
 8019358:	d1c1      	bne.n	80192de <_printf_float+0x2ce>
 801935a:	e6a5      	b.n	80190a8 <_printf_float+0x98>
 801935c:	2301      	movs	r3, #1
 801935e:	4631      	mov	r1, r6
 8019360:	4628      	mov	r0, r5
 8019362:	9206      	str	r2, [sp, #24]
 8019364:	47b8      	blx	r7
 8019366:	3001      	adds	r0, #1
 8019368:	f43f ae9e 	beq.w	80190a8 <_printf_float+0x98>
 801936c:	9b07      	ldr	r3, [sp, #28]
 801936e:	9a06      	ldr	r2, [sp, #24]
 8019370:	3301      	adds	r3, #1
 8019372:	9307      	str	r3, [sp, #28]
 8019374:	e7b9      	b.n	80192ea <_printf_float+0x2da>
 8019376:	9b05      	ldr	r3, [sp, #20]
 8019378:	465a      	mov	r2, fp
 801937a:	4631      	mov	r1, r6
 801937c:	4628      	mov	r0, r5
 801937e:	47b8      	blx	r7
 8019380:	3001      	adds	r0, #1
 8019382:	d1bf      	bne.n	8019304 <_printf_float+0x2f4>
 8019384:	e690      	b.n	80190a8 <_printf_float+0x98>
 8019386:	9a06      	ldr	r2, [sp, #24]
 8019388:	464b      	mov	r3, r9
 801938a:	4442      	add	r2, r8
 801938c:	4631      	mov	r1, r6
 801938e:	4628      	mov	r0, r5
 8019390:	47b8      	blx	r7
 8019392:	3001      	adds	r0, #1
 8019394:	d1c2      	bne.n	801931c <_printf_float+0x30c>
 8019396:	e687      	b.n	80190a8 <_printf_float+0x98>
 8019398:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801939c:	f1b9 0f01 	cmp.w	r9, #1
 80193a0:	dc01      	bgt.n	80193a6 <_printf_float+0x396>
 80193a2:	07db      	lsls	r3, r3, #31
 80193a4:	d536      	bpl.n	8019414 <_printf_float+0x404>
 80193a6:	2301      	movs	r3, #1
 80193a8:	4642      	mov	r2, r8
 80193aa:	4631      	mov	r1, r6
 80193ac:	4628      	mov	r0, r5
 80193ae:	47b8      	blx	r7
 80193b0:	3001      	adds	r0, #1
 80193b2:	f43f ae79 	beq.w	80190a8 <_printf_float+0x98>
 80193b6:	9b05      	ldr	r3, [sp, #20]
 80193b8:	465a      	mov	r2, fp
 80193ba:	4631      	mov	r1, r6
 80193bc:	4628      	mov	r0, r5
 80193be:	47b8      	blx	r7
 80193c0:	3001      	adds	r0, #1
 80193c2:	f43f ae71 	beq.w	80190a8 <_printf_float+0x98>
 80193c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80193ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80193ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80193d6:	d018      	beq.n	801940a <_printf_float+0x3fa>
 80193d8:	464b      	mov	r3, r9
 80193da:	f108 0201 	add.w	r2, r8, #1
 80193de:	4631      	mov	r1, r6
 80193e0:	4628      	mov	r0, r5
 80193e2:	47b8      	blx	r7
 80193e4:	3001      	adds	r0, #1
 80193e6:	d10c      	bne.n	8019402 <_printf_float+0x3f2>
 80193e8:	e65e      	b.n	80190a8 <_printf_float+0x98>
 80193ea:	2301      	movs	r3, #1
 80193ec:	465a      	mov	r2, fp
 80193ee:	4631      	mov	r1, r6
 80193f0:	4628      	mov	r0, r5
 80193f2:	47b8      	blx	r7
 80193f4:	3001      	adds	r0, #1
 80193f6:	f43f ae57 	beq.w	80190a8 <_printf_float+0x98>
 80193fa:	f108 0801 	add.w	r8, r8, #1
 80193fe:	45c8      	cmp	r8, r9
 8019400:	dbf3      	blt.n	80193ea <_printf_float+0x3da>
 8019402:	4653      	mov	r3, sl
 8019404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019408:	e6dc      	b.n	80191c4 <_printf_float+0x1b4>
 801940a:	f04f 0800 	mov.w	r8, #0
 801940e:	f104 0b1a 	add.w	fp, r4, #26
 8019412:	e7f4      	b.n	80193fe <_printf_float+0x3ee>
 8019414:	2301      	movs	r3, #1
 8019416:	4642      	mov	r2, r8
 8019418:	e7e1      	b.n	80193de <_printf_float+0x3ce>
 801941a:	2301      	movs	r3, #1
 801941c:	464a      	mov	r2, r9
 801941e:	4631      	mov	r1, r6
 8019420:	4628      	mov	r0, r5
 8019422:	47b8      	blx	r7
 8019424:	3001      	adds	r0, #1
 8019426:	f43f ae3f 	beq.w	80190a8 <_printf_float+0x98>
 801942a:	f108 0801 	add.w	r8, r8, #1
 801942e:	68e3      	ldr	r3, [r4, #12]
 8019430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019432:	1a5b      	subs	r3, r3, r1
 8019434:	4543      	cmp	r3, r8
 8019436:	dcf0      	bgt.n	801941a <_printf_float+0x40a>
 8019438:	e6f8      	b.n	801922c <_printf_float+0x21c>
 801943a:	f04f 0800 	mov.w	r8, #0
 801943e:	f104 0919 	add.w	r9, r4, #25
 8019442:	e7f4      	b.n	801942e <_printf_float+0x41e>

08019444 <_printf_common>:
 8019444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019448:	4616      	mov	r6, r2
 801944a:	4698      	mov	r8, r3
 801944c:	688a      	ldr	r2, [r1, #8]
 801944e:	690b      	ldr	r3, [r1, #16]
 8019450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019454:	4293      	cmp	r3, r2
 8019456:	bfb8      	it	lt
 8019458:	4613      	movlt	r3, r2
 801945a:	6033      	str	r3, [r6, #0]
 801945c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019460:	4607      	mov	r7, r0
 8019462:	460c      	mov	r4, r1
 8019464:	b10a      	cbz	r2, 801946a <_printf_common+0x26>
 8019466:	3301      	adds	r3, #1
 8019468:	6033      	str	r3, [r6, #0]
 801946a:	6823      	ldr	r3, [r4, #0]
 801946c:	0699      	lsls	r1, r3, #26
 801946e:	bf42      	ittt	mi
 8019470:	6833      	ldrmi	r3, [r6, #0]
 8019472:	3302      	addmi	r3, #2
 8019474:	6033      	strmi	r3, [r6, #0]
 8019476:	6825      	ldr	r5, [r4, #0]
 8019478:	f015 0506 	ands.w	r5, r5, #6
 801947c:	d106      	bne.n	801948c <_printf_common+0x48>
 801947e:	f104 0a19 	add.w	sl, r4, #25
 8019482:	68e3      	ldr	r3, [r4, #12]
 8019484:	6832      	ldr	r2, [r6, #0]
 8019486:	1a9b      	subs	r3, r3, r2
 8019488:	42ab      	cmp	r3, r5
 801948a:	dc26      	bgt.n	80194da <_printf_common+0x96>
 801948c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019490:	6822      	ldr	r2, [r4, #0]
 8019492:	3b00      	subs	r3, #0
 8019494:	bf18      	it	ne
 8019496:	2301      	movne	r3, #1
 8019498:	0692      	lsls	r2, r2, #26
 801949a:	d42b      	bmi.n	80194f4 <_printf_common+0xb0>
 801949c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80194a0:	4641      	mov	r1, r8
 80194a2:	4638      	mov	r0, r7
 80194a4:	47c8      	blx	r9
 80194a6:	3001      	adds	r0, #1
 80194a8:	d01e      	beq.n	80194e8 <_printf_common+0xa4>
 80194aa:	6823      	ldr	r3, [r4, #0]
 80194ac:	6922      	ldr	r2, [r4, #16]
 80194ae:	f003 0306 	and.w	r3, r3, #6
 80194b2:	2b04      	cmp	r3, #4
 80194b4:	bf02      	ittt	eq
 80194b6:	68e5      	ldreq	r5, [r4, #12]
 80194b8:	6833      	ldreq	r3, [r6, #0]
 80194ba:	1aed      	subeq	r5, r5, r3
 80194bc:	68a3      	ldr	r3, [r4, #8]
 80194be:	bf0c      	ite	eq
 80194c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80194c4:	2500      	movne	r5, #0
 80194c6:	4293      	cmp	r3, r2
 80194c8:	bfc4      	itt	gt
 80194ca:	1a9b      	subgt	r3, r3, r2
 80194cc:	18ed      	addgt	r5, r5, r3
 80194ce:	2600      	movs	r6, #0
 80194d0:	341a      	adds	r4, #26
 80194d2:	42b5      	cmp	r5, r6
 80194d4:	d11a      	bne.n	801950c <_printf_common+0xc8>
 80194d6:	2000      	movs	r0, #0
 80194d8:	e008      	b.n	80194ec <_printf_common+0xa8>
 80194da:	2301      	movs	r3, #1
 80194dc:	4652      	mov	r2, sl
 80194de:	4641      	mov	r1, r8
 80194e0:	4638      	mov	r0, r7
 80194e2:	47c8      	blx	r9
 80194e4:	3001      	adds	r0, #1
 80194e6:	d103      	bne.n	80194f0 <_printf_common+0xac>
 80194e8:	f04f 30ff 	mov.w	r0, #4294967295
 80194ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194f0:	3501      	adds	r5, #1
 80194f2:	e7c6      	b.n	8019482 <_printf_common+0x3e>
 80194f4:	18e1      	adds	r1, r4, r3
 80194f6:	1c5a      	adds	r2, r3, #1
 80194f8:	2030      	movs	r0, #48	@ 0x30
 80194fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80194fe:	4422      	add	r2, r4
 8019500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019508:	3302      	adds	r3, #2
 801950a:	e7c7      	b.n	801949c <_printf_common+0x58>
 801950c:	2301      	movs	r3, #1
 801950e:	4622      	mov	r2, r4
 8019510:	4641      	mov	r1, r8
 8019512:	4638      	mov	r0, r7
 8019514:	47c8      	blx	r9
 8019516:	3001      	adds	r0, #1
 8019518:	d0e6      	beq.n	80194e8 <_printf_common+0xa4>
 801951a:	3601      	adds	r6, #1
 801951c:	e7d9      	b.n	80194d2 <_printf_common+0x8e>
	...

08019520 <_printf_i>:
 8019520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019524:	7e0f      	ldrb	r7, [r1, #24]
 8019526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019528:	2f78      	cmp	r7, #120	@ 0x78
 801952a:	4691      	mov	r9, r2
 801952c:	4680      	mov	r8, r0
 801952e:	460c      	mov	r4, r1
 8019530:	469a      	mov	sl, r3
 8019532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019536:	d807      	bhi.n	8019548 <_printf_i+0x28>
 8019538:	2f62      	cmp	r7, #98	@ 0x62
 801953a:	d80a      	bhi.n	8019552 <_printf_i+0x32>
 801953c:	2f00      	cmp	r7, #0
 801953e:	f000 80d2 	beq.w	80196e6 <_printf_i+0x1c6>
 8019542:	2f58      	cmp	r7, #88	@ 0x58
 8019544:	f000 80b9 	beq.w	80196ba <_printf_i+0x19a>
 8019548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801954c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019550:	e03a      	b.n	80195c8 <_printf_i+0xa8>
 8019552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019556:	2b15      	cmp	r3, #21
 8019558:	d8f6      	bhi.n	8019548 <_printf_i+0x28>
 801955a:	a101      	add	r1, pc, #4	@ (adr r1, 8019560 <_printf_i+0x40>)
 801955c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019560:	080195b9 	.word	0x080195b9
 8019564:	080195cd 	.word	0x080195cd
 8019568:	08019549 	.word	0x08019549
 801956c:	08019549 	.word	0x08019549
 8019570:	08019549 	.word	0x08019549
 8019574:	08019549 	.word	0x08019549
 8019578:	080195cd 	.word	0x080195cd
 801957c:	08019549 	.word	0x08019549
 8019580:	08019549 	.word	0x08019549
 8019584:	08019549 	.word	0x08019549
 8019588:	08019549 	.word	0x08019549
 801958c:	080196cd 	.word	0x080196cd
 8019590:	080195f7 	.word	0x080195f7
 8019594:	08019687 	.word	0x08019687
 8019598:	08019549 	.word	0x08019549
 801959c:	08019549 	.word	0x08019549
 80195a0:	080196ef 	.word	0x080196ef
 80195a4:	08019549 	.word	0x08019549
 80195a8:	080195f7 	.word	0x080195f7
 80195ac:	08019549 	.word	0x08019549
 80195b0:	08019549 	.word	0x08019549
 80195b4:	0801968f 	.word	0x0801968f
 80195b8:	6833      	ldr	r3, [r6, #0]
 80195ba:	1d1a      	adds	r2, r3, #4
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	6032      	str	r2, [r6, #0]
 80195c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80195c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80195c8:	2301      	movs	r3, #1
 80195ca:	e09d      	b.n	8019708 <_printf_i+0x1e8>
 80195cc:	6833      	ldr	r3, [r6, #0]
 80195ce:	6820      	ldr	r0, [r4, #0]
 80195d0:	1d19      	adds	r1, r3, #4
 80195d2:	6031      	str	r1, [r6, #0]
 80195d4:	0606      	lsls	r6, r0, #24
 80195d6:	d501      	bpl.n	80195dc <_printf_i+0xbc>
 80195d8:	681d      	ldr	r5, [r3, #0]
 80195da:	e003      	b.n	80195e4 <_printf_i+0xc4>
 80195dc:	0645      	lsls	r5, r0, #25
 80195de:	d5fb      	bpl.n	80195d8 <_printf_i+0xb8>
 80195e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80195e4:	2d00      	cmp	r5, #0
 80195e6:	da03      	bge.n	80195f0 <_printf_i+0xd0>
 80195e8:	232d      	movs	r3, #45	@ 0x2d
 80195ea:	426d      	negs	r5, r5
 80195ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80195f0:	4859      	ldr	r0, [pc, #356]	@ (8019758 <_printf_i+0x238>)
 80195f2:	230a      	movs	r3, #10
 80195f4:	e011      	b.n	801961a <_printf_i+0xfa>
 80195f6:	6821      	ldr	r1, [r4, #0]
 80195f8:	6833      	ldr	r3, [r6, #0]
 80195fa:	0608      	lsls	r0, r1, #24
 80195fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8019600:	d402      	bmi.n	8019608 <_printf_i+0xe8>
 8019602:	0649      	lsls	r1, r1, #25
 8019604:	bf48      	it	mi
 8019606:	b2ad      	uxthmi	r5, r5
 8019608:	2f6f      	cmp	r7, #111	@ 0x6f
 801960a:	4853      	ldr	r0, [pc, #332]	@ (8019758 <_printf_i+0x238>)
 801960c:	6033      	str	r3, [r6, #0]
 801960e:	bf14      	ite	ne
 8019610:	230a      	movne	r3, #10
 8019612:	2308      	moveq	r3, #8
 8019614:	2100      	movs	r1, #0
 8019616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801961a:	6866      	ldr	r6, [r4, #4]
 801961c:	60a6      	str	r6, [r4, #8]
 801961e:	2e00      	cmp	r6, #0
 8019620:	bfa2      	ittt	ge
 8019622:	6821      	ldrge	r1, [r4, #0]
 8019624:	f021 0104 	bicge.w	r1, r1, #4
 8019628:	6021      	strge	r1, [r4, #0]
 801962a:	b90d      	cbnz	r5, 8019630 <_printf_i+0x110>
 801962c:	2e00      	cmp	r6, #0
 801962e:	d04b      	beq.n	80196c8 <_printf_i+0x1a8>
 8019630:	4616      	mov	r6, r2
 8019632:	fbb5 f1f3 	udiv	r1, r5, r3
 8019636:	fb03 5711 	mls	r7, r3, r1, r5
 801963a:	5dc7      	ldrb	r7, [r0, r7]
 801963c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019640:	462f      	mov	r7, r5
 8019642:	42bb      	cmp	r3, r7
 8019644:	460d      	mov	r5, r1
 8019646:	d9f4      	bls.n	8019632 <_printf_i+0x112>
 8019648:	2b08      	cmp	r3, #8
 801964a:	d10b      	bne.n	8019664 <_printf_i+0x144>
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	07df      	lsls	r7, r3, #31
 8019650:	d508      	bpl.n	8019664 <_printf_i+0x144>
 8019652:	6923      	ldr	r3, [r4, #16]
 8019654:	6861      	ldr	r1, [r4, #4]
 8019656:	4299      	cmp	r1, r3
 8019658:	bfde      	ittt	le
 801965a:	2330      	movle	r3, #48	@ 0x30
 801965c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019660:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019664:	1b92      	subs	r2, r2, r6
 8019666:	6122      	str	r2, [r4, #16]
 8019668:	f8cd a000 	str.w	sl, [sp]
 801966c:	464b      	mov	r3, r9
 801966e:	aa03      	add	r2, sp, #12
 8019670:	4621      	mov	r1, r4
 8019672:	4640      	mov	r0, r8
 8019674:	f7ff fee6 	bl	8019444 <_printf_common>
 8019678:	3001      	adds	r0, #1
 801967a:	d14a      	bne.n	8019712 <_printf_i+0x1f2>
 801967c:	f04f 30ff 	mov.w	r0, #4294967295
 8019680:	b004      	add	sp, #16
 8019682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019686:	6823      	ldr	r3, [r4, #0]
 8019688:	f043 0320 	orr.w	r3, r3, #32
 801968c:	6023      	str	r3, [r4, #0]
 801968e:	4833      	ldr	r0, [pc, #204]	@ (801975c <_printf_i+0x23c>)
 8019690:	2778      	movs	r7, #120	@ 0x78
 8019692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019696:	6823      	ldr	r3, [r4, #0]
 8019698:	6831      	ldr	r1, [r6, #0]
 801969a:	061f      	lsls	r7, r3, #24
 801969c:	f851 5b04 	ldr.w	r5, [r1], #4
 80196a0:	d402      	bmi.n	80196a8 <_printf_i+0x188>
 80196a2:	065f      	lsls	r7, r3, #25
 80196a4:	bf48      	it	mi
 80196a6:	b2ad      	uxthmi	r5, r5
 80196a8:	6031      	str	r1, [r6, #0]
 80196aa:	07d9      	lsls	r1, r3, #31
 80196ac:	bf44      	itt	mi
 80196ae:	f043 0320 	orrmi.w	r3, r3, #32
 80196b2:	6023      	strmi	r3, [r4, #0]
 80196b4:	b11d      	cbz	r5, 80196be <_printf_i+0x19e>
 80196b6:	2310      	movs	r3, #16
 80196b8:	e7ac      	b.n	8019614 <_printf_i+0xf4>
 80196ba:	4827      	ldr	r0, [pc, #156]	@ (8019758 <_printf_i+0x238>)
 80196bc:	e7e9      	b.n	8019692 <_printf_i+0x172>
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	f023 0320 	bic.w	r3, r3, #32
 80196c4:	6023      	str	r3, [r4, #0]
 80196c6:	e7f6      	b.n	80196b6 <_printf_i+0x196>
 80196c8:	4616      	mov	r6, r2
 80196ca:	e7bd      	b.n	8019648 <_printf_i+0x128>
 80196cc:	6833      	ldr	r3, [r6, #0]
 80196ce:	6825      	ldr	r5, [r4, #0]
 80196d0:	6961      	ldr	r1, [r4, #20]
 80196d2:	1d18      	adds	r0, r3, #4
 80196d4:	6030      	str	r0, [r6, #0]
 80196d6:	062e      	lsls	r6, r5, #24
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	d501      	bpl.n	80196e0 <_printf_i+0x1c0>
 80196dc:	6019      	str	r1, [r3, #0]
 80196de:	e002      	b.n	80196e6 <_printf_i+0x1c6>
 80196e0:	0668      	lsls	r0, r5, #25
 80196e2:	d5fb      	bpl.n	80196dc <_printf_i+0x1bc>
 80196e4:	8019      	strh	r1, [r3, #0]
 80196e6:	2300      	movs	r3, #0
 80196e8:	6123      	str	r3, [r4, #16]
 80196ea:	4616      	mov	r6, r2
 80196ec:	e7bc      	b.n	8019668 <_printf_i+0x148>
 80196ee:	6833      	ldr	r3, [r6, #0]
 80196f0:	1d1a      	adds	r2, r3, #4
 80196f2:	6032      	str	r2, [r6, #0]
 80196f4:	681e      	ldr	r6, [r3, #0]
 80196f6:	6862      	ldr	r2, [r4, #4]
 80196f8:	2100      	movs	r1, #0
 80196fa:	4630      	mov	r0, r6
 80196fc:	f7e6 fda0 	bl	8000240 <memchr>
 8019700:	b108      	cbz	r0, 8019706 <_printf_i+0x1e6>
 8019702:	1b80      	subs	r0, r0, r6
 8019704:	6060      	str	r0, [r4, #4]
 8019706:	6863      	ldr	r3, [r4, #4]
 8019708:	6123      	str	r3, [r4, #16]
 801970a:	2300      	movs	r3, #0
 801970c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019710:	e7aa      	b.n	8019668 <_printf_i+0x148>
 8019712:	6923      	ldr	r3, [r4, #16]
 8019714:	4632      	mov	r2, r6
 8019716:	4649      	mov	r1, r9
 8019718:	4640      	mov	r0, r8
 801971a:	47d0      	blx	sl
 801971c:	3001      	adds	r0, #1
 801971e:	d0ad      	beq.n	801967c <_printf_i+0x15c>
 8019720:	6823      	ldr	r3, [r4, #0]
 8019722:	079b      	lsls	r3, r3, #30
 8019724:	d413      	bmi.n	801974e <_printf_i+0x22e>
 8019726:	68e0      	ldr	r0, [r4, #12]
 8019728:	9b03      	ldr	r3, [sp, #12]
 801972a:	4298      	cmp	r0, r3
 801972c:	bfb8      	it	lt
 801972e:	4618      	movlt	r0, r3
 8019730:	e7a6      	b.n	8019680 <_printf_i+0x160>
 8019732:	2301      	movs	r3, #1
 8019734:	4632      	mov	r2, r6
 8019736:	4649      	mov	r1, r9
 8019738:	4640      	mov	r0, r8
 801973a:	47d0      	blx	sl
 801973c:	3001      	adds	r0, #1
 801973e:	d09d      	beq.n	801967c <_printf_i+0x15c>
 8019740:	3501      	adds	r5, #1
 8019742:	68e3      	ldr	r3, [r4, #12]
 8019744:	9903      	ldr	r1, [sp, #12]
 8019746:	1a5b      	subs	r3, r3, r1
 8019748:	42ab      	cmp	r3, r5
 801974a:	dcf2      	bgt.n	8019732 <_printf_i+0x212>
 801974c:	e7eb      	b.n	8019726 <_printf_i+0x206>
 801974e:	2500      	movs	r5, #0
 8019750:	f104 0619 	add.w	r6, r4, #25
 8019754:	e7f5      	b.n	8019742 <_printf_i+0x222>
 8019756:	bf00      	nop
 8019758:	0801f7bc 	.word	0x0801f7bc
 801975c:	0801f7cd 	.word	0x0801f7cd

08019760 <std>:
 8019760:	2300      	movs	r3, #0
 8019762:	b510      	push	{r4, lr}
 8019764:	4604      	mov	r4, r0
 8019766:	e9c0 3300 	strd	r3, r3, [r0]
 801976a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801976e:	6083      	str	r3, [r0, #8]
 8019770:	8181      	strh	r1, [r0, #12]
 8019772:	6643      	str	r3, [r0, #100]	@ 0x64
 8019774:	81c2      	strh	r2, [r0, #14]
 8019776:	6183      	str	r3, [r0, #24]
 8019778:	4619      	mov	r1, r3
 801977a:	2208      	movs	r2, #8
 801977c:	305c      	adds	r0, #92	@ 0x5c
 801977e:	f000 fa77 	bl	8019c70 <memset>
 8019782:	4b0d      	ldr	r3, [pc, #52]	@ (80197b8 <std+0x58>)
 8019784:	6263      	str	r3, [r4, #36]	@ 0x24
 8019786:	4b0d      	ldr	r3, [pc, #52]	@ (80197bc <std+0x5c>)
 8019788:	62a3      	str	r3, [r4, #40]	@ 0x28
 801978a:	4b0d      	ldr	r3, [pc, #52]	@ (80197c0 <std+0x60>)
 801978c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801978e:	4b0d      	ldr	r3, [pc, #52]	@ (80197c4 <std+0x64>)
 8019790:	6323      	str	r3, [r4, #48]	@ 0x30
 8019792:	4b0d      	ldr	r3, [pc, #52]	@ (80197c8 <std+0x68>)
 8019794:	6224      	str	r4, [r4, #32]
 8019796:	429c      	cmp	r4, r3
 8019798:	d006      	beq.n	80197a8 <std+0x48>
 801979a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801979e:	4294      	cmp	r4, r2
 80197a0:	d002      	beq.n	80197a8 <std+0x48>
 80197a2:	33d0      	adds	r3, #208	@ 0xd0
 80197a4:	429c      	cmp	r4, r3
 80197a6:	d105      	bne.n	80197b4 <std+0x54>
 80197a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80197ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197b0:	f000 bb0c 	b.w	8019dcc <__retarget_lock_init_recursive>
 80197b4:	bd10      	pop	{r4, pc}
 80197b6:	bf00      	nop
 80197b8:	08019a6d 	.word	0x08019a6d
 80197bc:	08019a8f 	.word	0x08019a8f
 80197c0:	08019ac7 	.word	0x08019ac7
 80197c4:	08019aeb 	.word	0x08019aeb
 80197c8:	20011e7c 	.word	0x20011e7c

080197cc <stdio_exit_handler>:
 80197cc:	4a02      	ldr	r2, [pc, #8]	@ (80197d8 <stdio_exit_handler+0xc>)
 80197ce:	4903      	ldr	r1, [pc, #12]	@ (80197dc <stdio_exit_handler+0x10>)
 80197d0:	4803      	ldr	r0, [pc, #12]	@ (80197e0 <stdio_exit_handler+0x14>)
 80197d2:	f000 b869 	b.w	80198a8 <_fwalk_sglue>
 80197d6:	bf00      	nop
 80197d8:	2000001c 	.word	0x2000001c
 80197dc:	0801b93d 	.word	0x0801b93d
 80197e0:	2000002c 	.word	0x2000002c

080197e4 <cleanup_stdio>:
 80197e4:	6841      	ldr	r1, [r0, #4]
 80197e6:	4b0c      	ldr	r3, [pc, #48]	@ (8019818 <cleanup_stdio+0x34>)
 80197e8:	4299      	cmp	r1, r3
 80197ea:	b510      	push	{r4, lr}
 80197ec:	4604      	mov	r4, r0
 80197ee:	d001      	beq.n	80197f4 <cleanup_stdio+0x10>
 80197f0:	f002 f8a4 	bl	801b93c <_fflush_r>
 80197f4:	68a1      	ldr	r1, [r4, #8]
 80197f6:	4b09      	ldr	r3, [pc, #36]	@ (801981c <cleanup_stdio+0x38>)
 80197f8:	4299      	cmp	r1, r3
 80197fa:	d002      	beq.n	8019802 <cleanup_stdio+0x1e>
 80197fc:	4620      	mov	r0, r4
 80197fe:	f002 f89d 	bl	801b93c <_fflush_r>
 8019802:	68e1      	ldr	r1, [r4, #12]
 8019804:	4b06      	ldr	r3, [pc, #24]	@ (8019820 <cleanup_stdio+0x3c>)
 8019806:	4299      	cmp	r1, r3
 8019808:	d004      	beq.n	8019814 <cleanup_stdio+0x30>
 801980a:	4620      	mov	r0, r4
 801980c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019810:	f002 b894 	b.w	801b93c <_fflush_r>
 8019814:	bd10      	pop	{r4, pc}
 8019816:	bf00      	nop
 8019818:	20011e7c 	.word	0x20011e7c
 801981c:	20011ee4 	.word	0x20011ee4
 8019820:	20011f4c 	.word	0x20011f4c

08019824 <global_stdio_init.part.0>:
 8019824:	b510      	push	{r4, lr}
 8019826:	4b0b      	ldr	r3, [pc, #44]	@ (8019854 <global_stdio_init.part.0+0x30>)
 8019828:	4c0b      	ldr	r4, [pc, #44]	@ (8019858 <global_stdio_init.part.0+0x34>)
 801982a:	4a0c      	ldr	r2, [pc, #48]	@ (801985c <global_stdio_init.part.0+0x38>)
 801982c:	601a      	str	r2, [r3, #0]
 801982e:	4620      	mov	r0, r4
 8019830:	2200      	movs	r2, #0
 8019832:	2104      	movs	r1, #4
 8019834:	f7ff ff94 	bl	8019760 <std>
 8019838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801983c:	2201      	movs	r2, #1
 801983e:	2109      	movs	r1, #9
 8019840:	f7ff ff8e 	bl	8019760 <std>
 8019844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019848:	2202      	movs	r2, #2
 801984a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801984e:	2112      	movs	r1, #18
 8019850:	f7ff bf86 	b.w	8019760 <std>
 8019854:	20011fb4 	.word	0x20011fb4
 8019858:	20011e7c 	.word	0x20011e7c
 801985c:	080197cd 	.word	0x080197cd

08019860 <__sfp_lock_acquire>:
 8019860:	4801      	ldr	r0, [pc, #4]	@ (8019868 <__sfp_lock_acquire+0x8>)
 8019862:	f000 bab4 	b.w	8019dce <__retarget_lock_acquire_recursive>
 8019866:	bf00      	nop
 8019868:	20011fb9 	.word	0x20011fb9

0801986c <__sfp_lock_release>:
 801986c:	4801      	ldr	r0, [pc, #4]	@ (8019874 <__sfp_lock_release+0x8>)
 801986e:	f000 baaf 	b.w	8019dd0 <__retarget_lock_release_recursive>
 8019872:	bf00      	nop
 8019874:	20011fb9 	.word	0x20011fb9

08019878 <__sinit>:
 8019878:	b510      	push	{r4, lr}
 801987a:	4604      	mov	r4, r0
 801987c:	f7ff fff0 	bl	8019860 <__sfp_lock_acquire>
 8019880:	6a23      	ldr	r3, [r4, #32]
 8019882:	b11b      	cbz	r3, 801988c <__sinit+0x14>
 8019884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019888:	f7ff bff0 	b.w	801986c <__sfp_lock_release>
 801988c:	4b04      	ldr	r3, [pc, #16]	@ (80198a0 <__sinit+0x28>)
 801988e:	6223      	str	r3, [r4, #32]
 8019890:	4b04      	ldr	r3, [pc, #16]	@ (80198a4 <__sinit+0x2c>)
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d1f5      	bne.n	8019884 <__sinit+0xc>
 8019898:	f7ff ffc4 	bl	8019824 <global_stdio_init.part.0>
 801989c:	e7f2      	b.n	8019884 <__sinit+0xc>
 801989e:	bf00      	nop
 80198a0:	080197e5 	.word	0x080197e5
 80198a4:	20011fb4 	.word	0x20011fb4

080198a8 <_fwalk_sglue>:
 80198a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198ac:	4607      	mov	r7, r0
 80198ae:	4688      	mov	r8, r1
 80198b0:	4614      	mov	r4, r2
 80198b2:	2600      	movs	r6, #0
 80198b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80198b8:	f1b9 0901 	subs.w	r9, r9, #1
 80198bc:	d505      	bpl.n	80198ca <_fwalk_sglue+0x22>
 80198be:	6824      	ldr	r4, [r4, #0]
 80198c0:	2c00      	cmp	r4, #0
 80198c2:	d1f7      	bne.n	80198b4 <_fwalk_sglue+0xc>
 80198c4:	4630      	mov	r0, r6
 80198c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198ca:	89ab      	ldrh	r3, [r5, #12]
 80198cc:	2b01      	cmp	r3, #1
 80198ce:	d907      	bls.n	80198e0 <_fwalk_sglue+0x38>
 80198d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80198d4:	3301      	adds	r3, #1
 80198d6:	d003      	beq.n	80198e0 <_fwalk_sglue+0x38>
 80198d8:	4629      	mov	r1, r5
 80198da:	4638      	mov	r0, r7
 80198dc:	47c0      	blx	r8
 80198de:	4306      	orrs	r6, r0
 80198e0:	3568      	adds	r5, #104	@ 0x68
 80198e2:	e7e9      	b.n	80198b8 <_fwalk_sglue+0x10>

080198e4 <iprintf>:
 80198e4:	b40f      	push	{r0, r1, r2, r3}
 80198e6:	b507      	push	{r0, r1, r2, lr}
 80198e8:	4906      	ldr	r1, [pc, #24]	@ (8019904 <iprintf+0x20>)
 80198ea:	ab04      	add	r3, sp, #16
 80198ec:	6808      	ldr	r0, [r1, #0]
 80198ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80198f2:	6881      	ldr	r1, [r0, #8]
 80198f4:	9301      	str	r3, [sp, #4]
 80198f6:	f001 fe85 	bl	801b604 <_vfiprintf_r>
 80198fa:	b003      	add	sp, #12
 80198fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8019900:	b004      	add	sp, #16
 8019902:	4770      	bx	lr
 8019904:	20000028 	.word	0x20000028

08019908 <_puts_r>:
 8019908:	6a03      	ldr	r3, [r0, #32]
 801990a:	b570      	push	{r4, r5, r6, lr}
 801990c:	6884      	ldr	r4, [r0, #8]
 801990e:	4605      	mov	r5, r0
 8019910:	460e      	mov	r6, r1
 8019912:	b90b      	cbnz	r3, 8019918 <_puts_r+0x10>
 8019914:	f7ff ffb0 	bl	8019878 <__sinit>
 8019918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801991a:	07db      	lsls	r3, r3, #31
 801991c:	d405      	bmi.n	801992a <_puts_r+0x22>
 801991e:	89a3      	ldrh	r3, [r4, #12]
 8019920:	0598      	lsls	r0, r3, #22
 8019922:	d402      	bmi.n	801992a <_puts_r+0x22>
 8019924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019926:	f000 fa52 	bl	8019dce <__retarget_lock_acquire_recursive>
 801992a:	89a3      	ldrh	r3, [r4, #12]
 801992c:	0719      	lsls	r1, r3, #28
 801992e:	d502      	bpl.n	8019936 <_puts_r+0x2e>
 8019930:	6923      	ldr	r3, [r4, #16]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d135      	bne.n	80199a2 <_puts_r+0x9a>
 8019936:	4621      	mov	r1, r4
 8019938:	4628      	mov	r0, r5
 801993a:	f000 f919 	bl	8019b70 <__swsetup_r>
 801993e:	b380      	cbz	r0, 80199a2 <_puts_r+0x9a>
 8019940:	f04f 35ff 	mov.w	r5, #4294967295
 8019944:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019946:	07da      	lsls	r2, r3, #31
 8019948:	d405      	bmi.n	8019956 <_puts_r+0x4e>
 801994a:	89a3      	ldrh	r3, [r4, #12]
 801994c:	059b      	lsls	r3, r3, #22
 801994e:	d402      	bmi.n	8019956 <_puts_r+0x4e>
 8019950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019952:	f000 fa3d 	bl	8019dd0 <__retarget_lock_release_recursive>
 8019956:	4628      	mov	r0, r5
 8019958:	bd70      	pop	{r4, r5, r6, pc}
 801995a:	2b00      	cmp	r3, #0
 801995c:	da04      	bge.n	8019968 <_puts_r+0x60>
 801995e:	69a2      	ldr	r2, [r4, #24]
 8019960:	429a      	cmp	r2, r3
 8019962:	dc17      	bgt.n	8019994 <_puts_r+0x8c>
 8019964:	290a      	cmp	r1, #10
 8019966:	d015      	beq.n	8019994 <_puts_r+0x8c>
 8019968:	6823      	ldr	r3, [r4, #0]
 801996a:	1c5a      	adds	r2, r3, #1
 801996c:	6022      	str	r2, [r4, #0]
 801996e:	7019      	strb	r1, [r3, #0]
 8019970:	68a3      	ldr	r3, [r4, #8]
 8019972:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019976:	3b01      	subs	r3, #1
 8019978:	60a3      	str	r3, [r4, #8]
 801997a:	2900      	cmp	r1, #0
 801997c:	d1ed      	bne.n	801995a <_puts_r+0x52>
 801997e:	2b00      	cmp	r3, #0
 8019980:	da11      	bge.n	80199a6 <_puts_r+0x9e>
 8019982:	4622      	mov	r2, r4
 8019984:	210a      	movs	r1, #10
 8019986:	4628      	mov	r0, r5
 8019988:	f000 f8b3 	bl	8019af2 <__swbuf_r>
 801998c:	3001      	adds	r0, #1
 801998e:	d0d7      	beq.n	8019940 <_puts_r+0x38>
 8019990:	250a      	movs	r5, #10
 8019992:	e7d7      	b.n	8019944 <_puts_r+0x3c>
 8019994:	4622      	mov	r2, r4
 8019996:	4628      	mov	r0, r5
 8019998:	f000 f8ab 	bl	8019af2 <__swbuf_r>
 801999c:	3001      	adds	r0, #1
 801999e:	d1e7      	bne.n	8019970 <_puts_r+0x68>
 80199a0:	e7ce      	b.n	8019940 <_puts_r+0x38>
 80199a2:	3e01      	subs	r6, #1
 80199a4:	e7e4      	b.n	8019970 <_puts_r+0x68>
 80199a6:	6823      	ldr	r3, [r4, #0]
 80199a8:	1c5a      	adds	r2, r3, #1
 80199aa:	6022      	str	r2, [r4, #0]
 80199ac:	220a      	movs	r2, #10
 80199ae:	701a      	strb	r2, [r3, #0]
 80199b0:	e7ee      	b.n	8019990 <_puts_r+0x88>
	...

080199b4 <puts>:
 80199b4:	4b02      	ldr	r3, [pc, #8]	@ (80199c0 <puts+0xc>)
 80199b6:	4601      	mov	r1, r0
 80199b8:	6818      	ldr	r0, [r3, #0]
 80199ba:	f7ff bfa5 	b.w	8019908 <_puts_r>
 80199be:	bf00      	nop
 80199c0:	20000028 	.word	0x20000028

080199c4 <sniprintf>:
 80199c4:	b40c      	push	{r2, r3}
 80199c6:	b530      	push	{r4, r5, lr}
 80199c8:	4b17      	ldr	r3, [pc, #92]	@ (8019a28 <sniprintf+0x64>)
 80199ca:	1e0c      	subs	r4, r1, #0
 80199cc:	681d      	ldr	r5, [r3, #0]
 80199ce:	b09d      	sub	sp, #116	@ 0x74
 80199d0:	da08      	bge.n	80199e4 <sniprintf+0x20>
 80199d2:	238b      	movs	r3, #139	@ 0x8b
 80199d4:	602b      	str	r3, [r5, #0]
 80199d6:	f04f 30ff 	mov.w	r0, #4294967295
 80199da:	b01d      	add	sp, #116	@ 0x74
 80199dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80199e0:	b002      	add	sp, #8
 80199e2:	4770      	bx	lr
 80199e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80199e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80199ec:	bf14      	ite	ne
 80199ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80199f2:	4623      	moveq	r3, r4
 80199f4:	9304      	str	r3, [sp, #16]
 80199f6:	9307      	str	r3, [sp, #28]
 80199f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199fc:	9002      	str	r0, [sp, #8]
 80199fe:	9006      	str	r0, [sp, #24]
 8019a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019a04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019a06:	ab21      	add	r3, sp, #132	@ 0x84
 8019a08:	a902      	add	r1, sp, #8
 8019a0a:	4628      	mov	r0, r5
 8019a0c:	9301      	str	r3, [sp, #4]
 8019a0e:	f001 fcd3 	bl	801b3b8 <_svfiprintf_r>
 8019a12:	1c43      	adds	r3, r0, #1
 8019a14:	bfbc      	itt	lt
 8019a16:	238b      	movlt	r3, #139	@ 0x8b
 8019a18:	602b      	strlt	r3, [r5, #0]
 8019a1a:	2c00      	cmp	r4, #0
 8019a1c:	d0dd      	beq.n	80199da <sniprintf+0x16>
 8019a1e:	9b02      	ldr	r3, [sp, #8]
 8019a20:	2200      	movs	r2, #0
 8019a22:	701a      	strb	r2, [r3, #0]
 8019a24:	e7d9      	b.n	80199da <sniprintf+0x16>
 8019a26:	bf00      	nop
 8019a28:	20000028 	.word	0x20000028

08019a2c <siprintf>:
 8019a2c:	b40e      	push	{r1, r2, r3}
 8019a2e:	b500      	push	{lr}
 8019a30:	b09c      	sub	sp, #112	@ 0x70
 8019a32:	ab1d      	add	r3, sp, #116	@ 0x74
 8019a34:	9002      	str	r0, [sp, #8]
 8019a36:	9006      	str	r0, [sp, #24]
 8019a38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019a3c:	4809      	ldr	r0, [pc, #36]	@ (8019a64 <siprintf+0x38>)
 8019a3e:	9107      	str	r1, [sp, #28]
 8019a40:	9104      	str	r1, [sp, #16]
 8019a42:	4909      	ldr	r1, [pc, #36]	@ (8019a68 <siprintf+0x3c>)
 8019a44:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a48:	9105      	str	r1, [sp, #20]
 8019a4a:	6800      	ldr	r0, [r0, #0]
 8019a4c:	9301      	str	r3, [sp, #4]
 8019a4e:	a902      	add	r1, sp, #8
 8019a50:	f001 fcb2 	bl	801b3b8 <_svfiprintf_r>
 8019a54:	9b02      	ldr	r3, [sp, #8]
 8019a56:	2200      	movs	r2, #0
 8019a58:	701a      	strb	r2, [r3, #0]
 8019a5a:	b01c      	add	sp, #112	@ 0x70
 8019a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a60:	b003      	add	sp, #12
 8019a62:	4770      	bx	lr
 8019a64:	20000028 	.word	0x20000028
 8019a68:	ffff0208 	.word	0xffff0208

08019a6c <__sread>:
 8019a6c:	b510      	push	{r4, lr}
 8019a6e:	460c      	mov	r4, r1
 8019a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a74:	f000 f962 	bl	8019d3c <_read_r>
 8019a78:	2800      	cmp	r0, #0
 8019a7a:	bfab      	itete	ge
 8019a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8019a80:	181b      	addge	r3, r3, r0
 8019a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019a86:	bfac      	ite	ge
 8019a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019a8a:	81a3      	strhlt	r3, [r4, #12]
 8019a8c:	bd10      	pop	{r4, pc}

08019a8e <__swrite>:
 8019a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a92:	461f      	mov	r7, r3
 8019a94:	898b      	ldrh	r3, [r1, #12]
 8019a96:	05db      	lsls	r3, r3, #23
 8019a98:	4605      	mov	r5, r0
 8019a9a:	460c      	mov	r4, r1
 8019a9c:	4616      	mov	r6, r2
 8019a9e:	d505      	bpl.n	8019aac <__swrite+0x1e>
 8019aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aa4:	2302      	movs	r3, #2
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	f000 f936 	bl	8019d18 <_lseek_r>
 8019aac:	89a3      	ldrh	r3, [r4, #12]
 8019aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019ab6:	81a3      	strh	r3, [r4, #12]
 8019ab8:	4632      	mov	r2, r6
 8019aba:	463b      	mov	r3, r7
 8019abc:	4628      	mov	r0, r5
 8019abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ac2:	f000 b94d 	b.w	8019d60 <_write_r>

08019ac6 <__sseek>:
 8019ac6:	b510      	push	{r4, lr}
 8019ac8:	460c      	mov	r4, r1
 8019aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ace:	f000 f923 	bl	8019d18 <_lseek_r>
 8019ad2:	1c43      	adds	r3, r0, #1
 8019ad4:	89a3      	ldrh	r3, [r4, #12]
 8019ad6:	bf15      	itete	ne
 8019ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019ae2:	81a3      	strheq	r3, [r4, #12]
 8019ae4:	bf18      	it	ne
 8019ae6:	81a3      	strhne	r3, [r4, #12]
 8019ae8:	bd10      	pop	{r4, pc}

08019aea <__sclose>:
 8019aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aee:	f000 b903 	b.w	8019cf8 <_close_r>

08019af2 <__swbuf_r>:
 8019af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019af4:	460e      	mov	r6, r1
 8019af6:	4614      	mov	r4, r2
 8019af8:	4605      	mov	r5, r0
 8019afa:	b118      	cbz	r0, 8019b04 <__swbuf_r+0x12>
 8019afc:	6a03      	ldr	r3, [r0, #32]
 8019afe:	b90b      	cbnz	r3, 8019b04 <__swbuf_r+0x12>
 8019b00:	f7ff feba 	bl	8019878 <__sinit>
 8019b04:	69a3      	ldr	r3, [r4, #24]
 8019b06:	60a3      	str	r3, [r4, #8]
 8019b08:	89a3      	ldrh	r3, [r4, #12]
 8019b0a:	071a      	lsls	r2, r3, #28
 8019b0c:	d501      	bpl.n	8019b12 <__swbuf_r+0x20>
 8019b0e:	6923      	ldr	r3, [r4, #16]
 8019b10:	b943      	cbnz	r3, 8019b24 <__swbuf_r+0x32>
 8019b12:	4621      	mov	r1, r4
 8019b14:	4628      	mov	r0, r5
 8019b16:	f000 f82b 	bl	8019b70 <__swsetup_r>
 8019b1a:	b118      	cbz	r0, 8019b24 <__swbuf_r+0x32>
 8019b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8019b20:	4638      	mov	r0, r7
 8019b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b24:	6823      	ldr	r3, [r4, #0]
 8019b26:	6922      	ldr	r2, [r4, #16]
 8019b28:	1a98      	subs	r0, r3, r2
 8019b2a:	6963      	ldr	r3, [r4, #20]
 8019b2c:	b2f6      	uxtb	r6, r6
 8019b2e:	4283      	cmp	r3, r0
 8019b30:	4637      	mov	r7, r6
 8019b32:	dc05      	bgt.n	8019b40 <__swbuf_r+0x4e>
 8019b34:	4621      	mov	r1, r4
 8019b36:	4628      	mov	r0, r5
 8019b38:	f001 ff00 	bl	801b93c <_fflush_r>
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d1ed      	bne.n	8019b1c <__swbuf_r+0x2a>
 8019b40:	68a3      	ldr	r3, [r4, #8]
 8019b42:	3b01      	subs	r3, #1
 8019b44:	60a3      	str	r3, [r4, #8]
 8019b46:	6823      	ldr	r3, [r4, #0]
 8019b48:	1c5a      	adds	r2, r3, #1
 8019b4a:	6022      	str	r2, [r4, #0]
 8019b4c:	701e      	strb	r6, [r3, #0]
 8019b4e:	6962      	ldr	r2, [r4, #20]
 8019b50:	1c43      	adds	r3, r0, #1
 8019b52:	429a      	cmp	r2, r3
 8019b54:	d004      	beq.n	8019b60 <__swbuf_r+0x6e>
 8019b56:	89a3      	ldrh	r3, [r4, #12]
 8019b58:	07db      	lsls	r3, r3, #31
 8019b5a:	d5e1      	bpl.n	8019b20 <__swbuf_r+0x2e>
 8019b5c:	2e0a      	cmp	r6, #10
 8019b5e:	d1df      	bne.n	8019b20 <__swbuf_r+0x2e>
 8019b60:	4621      	mov	r1, r4
 8019b62:	4628      	mov	r0, r5
 8019b64:	f001 feea 	bl	801b93c <_fflush_r>
 8019b68:	2800      	cmp	r0, #0
 8019b6a:	d0d9      	beq.n	8019b20 <__swbuf_r+0x2e>
 8019b6c:	e7d6      	b.n	8019b1c <__swbuf_r+0x2a>
	...

08019b70 <__swsetup_r>:
 8019b70:	b538      	push	{r3, r4, r5, lr}
 8019b72:	4b29      	ldr	r3, [pc, #164]	@ (8019c18 <__swsetup_r+0xa8>)
 8019b74:	4605      	mov	r5, r0
 8019b76:	6818      	ldr	r0, [r3, #0]
 8019b78:	460c      	mov	r4, r1
 8019b7a:	b118      	cbz	r0, 8019b84 <__swsetup_r+0x14>
 8019b7c:	6a03      	ldr	r3, [r0, #32]
 8019b7e:	b90b      	cbnz	r3, 8019b84 <__swsetup_r+0x14>
 8019b80:	f7ff fe7a 	bl	8019878 <__sinit>
 8019b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b88:	0719      	lsls	r1, r3, #28
 8019b8a:	d422      	bmi.n	8019bd2 <__swsetup_r+0x62>
 8019b8c:	06da      	lsls	r2, r3, #27
 8019b8e:	d407      	bmi.n	8019ba0 <__swsetup_r+0x30>
 8019b90:	2209      	movs	r2, #9
 8019b92:	602a      	str	r2, [r5, #0]
 8019b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b98:	81a3      	strh	r3, [r4, #12]
 8019b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b9e:	e033      	b.n	8019c08 <__swsetup_r+0x98>
 8019ba0:	0758      	lsls	r0, r3, #29
 8019ba2:	d512      	bpl.n	8019bca <__swsetup_r+0x5a>
 8019ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019ba6:	b141      	cbz	r1, 8019bba <__swsetup_r+0x4a>
 8019ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019bac:	4299      	cmp	r1, r3
 8019bae:	d002      	beq.n	8019bb6 <__swsetup_r+0x46>
 8019bb0:	4628      	mov	r0, r5
 8019bb2:	f000 ff23 	bl	801a9fc <_free_r>
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8019bba:	89a3      	ldrh	r3, [r4, #12]
 8019bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019bc0:	81a3      	strh	r3, [r4, #12]
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	6063      	str	r3, [r4, #4]
 8019bc6:	6923      	ldr	r3, [r4, #16]
 8019bc8:	6023      	str	r3, [r4, #0]
 8019bca:	89a3      	ldrh	r3, [r4, #12]
 8019bcc:	f043 0308 	orr.w	r3, r3, #8
 8019bd0:	81a3      	strh	r3, [r4, #12]
 8019bd2:	6923      	ldr	r3, [r4, #16]
 8019bd4:	b94b      	cbnz	r3, 8019bea <__swsetup_r+0x7a>
 8019bd6:	89a3      	ldrh	r3, [r4, #12]
 8019bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019be0:	d003      	beq.n	8019bea <__swsetup_r+0x7a>
 8019be2:	4621      	mov	r1, r4
 8019be4:	4628      	mov	r0, r5
 8019be6:	f001 ff09 	bl	801b9fc <__smakebuf_r>
 8019bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bee:	f013 0201 	ands.w	r2, r3, #1
 8019bf2:	d00a      	beq.n	8019c0a <__swsetup_r+0x9a>
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	60a2      	str	r2, [r4, #8]
 8019bf8:	6962      	ldr	r2, [r4, #20]
 8019bfa:	4252      	negs	r2, r2
 8019bfc:	61a2      	str	r2, [r4, #24]
 8019bfe:	6922      	ldr	r2, [r4, #16]
 8019c00:	b942      	cbnz	r2, 8019c14 <__swsetup_r+0xa4>
 8019c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019c06:	d1c5      	bne.n	8019b94 <__swsetup_r+0x24>
 8019c08:	bd38      	pop	{r3, r4, r5, pc}
 8019c0a:	0799      	lsls	r1, r3, #30
 8019c0c:	bf58      	it	pl
 8019c0e:	6962      	ldrpl	r2, [r4, #20]
 8019c10:	60a2      	str	r2, [r4, #8]
 8019c12:	e7f4      	b.n	8019bfe <__swsetup_r+0x8e>
 8019c14:	2000      	movs	r0, #0
 8019c16:	e7f7      	b.n	8019c08 <__swsetup_r+0x98>
 8019c18:	20000028 	.word	0x20000028

08019c1c <memcmp>:
 8019c1c:	b510      	push	{r4, lr}
 8019c1e:	3901      	subs	r1, #1
 8019c20:	4402      	add	r2, r0
 8019c22:	4290      	cmp	r0, r2
 8019c24:	d101      	bne.n	8019c2a <memcmp+0xe>
 8019c26:	2000      	movs	r0, #0
 8019c28:	e005      	b.n	8019c36 <memcmp+0x1a>
 8019c2a:	7803      	ldrb	r3, [r0, #0]
 8019c2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019c30:	42a3      	cmp	r3, r4
 8019c32:	d001      	beq.n	8019c38 <memcmp+0x1c>
 8019c34:	1b18      	subs	r0, r3, r4
 8019c36:	bd10      	pop	{r4, pc}
 8019c38:	3001      	adds	r0, #1
 8019c3a:	e7f2      	b.n	8019c22 <memcmp+0x6>

08019c3c <memmove>:
 8019c3c:	4288      	cmp	r0, r1
 8019c3e:	b510      	push	{r4, lr}
 8019c40:	eb01 0402 	add.w	r4, r1, r2
 8019c44:	d902      	bls.n	8019c4c <memmove+0x10>
 8019c46:	4284      	cmp	r4, r0
 8019c48:	4623      	mov	r3, r4
 8019c4a:	d807      	bhi.n	8019c5c <memmove+0x20>
 8019c4c:	1e43      	subs	r3, r0, #1
 8019c4e:	42a1      	cmp	r1, r4
 8019c50:	d008      	beq.n	8019c64 <memmove+0x28>
 8019c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c5a:	e7f8      	b.n	8019c4e <memmove+0x12>
 8019c5c:	4402      	add	r2, r0
 8019c5e:	4601      	mov	r1, r0
 8019c60:	428a      	cmp	r2, r1
 8019c62:	d100      	bne.n	8019c66 <memmove+0x2a>
 8019c64:	bd10      	pop	{r4, pc}
 8019c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c6e:	e7f7      	b.n	8019c60 <memmove+0x24>

08019c70 <memset>:
 8019c70:	4402      	add	r2, r0
 8019c72:	4603      	mov	r3, r0
 8019c74:	4293      	cmp	r3, r2
 8019c76:	d100      	bne.n	8019c7a <memset+0xa>
 8019c78:	4770      	bx	lr
 8019c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8019c7e:	e7f9      	b.n	8019c74 <memset+0x4>

08019c80 <strcat>:
 8019c80:	b510      	push	{r4, lr}
 8019c82:	4602      	mov	r2, r0
 8019c84:	7814      	ldrb	r4, [r2, #0]
 8019c86:	4613      	mov	r3, r2
 8019c88:	3201      	adds	r2, #1
 8019c8a:	2c00      	cmp	r4, #0
 8019c8c:	d1fa      	bne.n	8019c84 <strcat+0x4>
 8019c8e:	3b01      	subs	r3, #1
 8019c90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c98:	2a00      	cmp	r2, #0
 8019c9a:	d1f9      	bne.n	8019c90 <strcat+0x10>
 8019c9c:	bd10      	pop	{r4, pc}

08019c9e <strncpy>:
 8019c9e:	b510      	push	{r4, lr}
 8019ca0:	3901      	subs	r1, #1
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	b132      	cbz	r2, 8019cb4 <strncpy+0x16>
 8019ca6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019caa:	f803 4b01 	strb.w	r4, [r3], #1
 8019cae:	3a01      	subs	r2, #1
 8019cb0:	2c00      	cmp	r4, #0
 8019cb2:	d1f7      	bne.n	8019ca4 <strncpy+0x6>
 8019cb4:	441a      	add	r2, r3
 8019cb6:	2100      	movs	r1, #0
 8019cb8:	4293      	cmp	r3, r2
 8019cba:	d100      	bne.n	8019cbe <strncpy+0x20>
 8019cbc:	bd10      	pop	{r4, pc}
 8019cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8019cc2:	e7f9      	b.n	8019cb8 <strncpy+0x1a>

08019cc4 <strstr>:
 8019cc4:	780a      	ldrb	r2, [r1, #0]
 8019cc6:	b570      	push	{r4, r5, r6, lr}
 8019cc8:	b96a      	cbnz	r2, 8019ce6 <strstr+0x22>
 8019cca:	bd70      	pop	{r4, r5, r6, pc}
 8019ccc:	429a      	cmp	r2, r3
 8019cce:	d109      	bne.n	8019ce4 <strstr+0x20>
 8019cd0:	460c      	mov	r4, r1
 8019cd2:	4605      	mov	r5, r0
 8019cd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d0f6      	beq.n	8019cca <strstr+0x6>
 8019cdc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019ce0:	429e      	cmp	r6, r3
 8019ce2:	d0f7      	beq.n	8019cd4 <strstr+0x10>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	7803      	ldrb	r3, [r0, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d1ef      	bne.n	8019ccc <strstr+0x8>
 8019cec:	4618      	mov	r0, r3
 8019cee:	e7ec      	b.n	8019cca <strstr+0x6>

08019cf0 <_localeconv_r>:
 8019cf0:	4800      	ldr	r0, [pc, #0]	@ (8019cf4 <_localeconv_r+0x4>)
 8019cf2:	4770      	bx	lr
 8019cf4:	20000168 	.word	0x20000168

08019cf8 <_close_r>:
 8019cf8:	b538      	push	{r3, r4, r5, lr}
 8019cfa:	4d06      	ldr	r5, [pc, #24]	@ (8019d14 <_close_r+0x1c>)
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	4604      	mov	r4, r0
 8019d00:	4608      	mov	r0, r1
 8019d02:	602b      	str	r3, [r5, #0]
 8019d04:	f7e7 fcbe 	bl	8001684 <_close>
 8019d08:	1c43      	adds	r3, r0, #1
 8019d0a:	d102      	bne.n	8019d12 <_close_r+0x1a>
 8019d0c:	682b      	ldr	r3, [r5, #0]
 8019d0e:	b103      	cbz	r3, 8019d12 <_close_r+0x1a>
 8019d10:	6023      	str	r3, [r4, #0]
 8019d12:	bd38      	pop	{r3, r4, r5, pc}
 8019d14:	20011e74 	.word	0x20011e74

08019d18 <_lseek_r>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4d07      	ldr	r5, [pc, #28]	@ (8019d38 <_lseek_r+0x20>)
 8019d1c:	4604      	mov	r4, r0
 8019d1e:	4608      	mov	r0, r1
 8019d20:	4611      	mov	r1, r2
 8019d22:	2200      	movs	r2, #0
 8019d24:	602a      	str	r2, [r5, #0]
 8019d26:	461a      	mov	r2, r3
 8019d28:	f7e7 fcd3 	bl	80016d2 <_lseek>
 8019d2c:	1c43      	adds	r3, r0, #1
 8019d2e:	d102      	bne.n	8019d36 <_lseek_r+0x1e>
 8019d30:	682b      	ldr	r3, [r5, #0]
 8019d32:	b103      	cbz	r3, 8019d36 <_lseek_r+0x1e>
 8019d34:	6023      	str	r3, [r4, #0]
 8019d36:	bd38      	pop	{r3, r4, r5, pc}
 8019d38:	20011e74 	.word	0x20011e74

08019d3c <_read_r>:
 8019d3c:	b538      	push	{r3, r4, r5, lr}
 8019d3e:	4d07      	ldr	r5, [pc, #28]	@ (8019d5c <_read_r+0x20>)
 8019d40:	4604      	mov	r4, r0
 8019d42:	4608      	mov	r0, r1
 8019d44:	4611      	mov	r1, r2
 8019d46:	2200      	movs	r2, #0
 8019d48:	602a      	str	r2, [r5, #0]
 8019d4a:	461a      	mov	r2, r3
 8019d4c:	f7e7 fc7d 	bl	800164a <_read>
 8019d50:	1c43      	adds	r3, r0, #1
 8019d52:	d102      	bne.n	8019d5a <_read_r+0x1e>
 8019d54:	682b      	ldr	r3, [r5, #0]
 8019d56:	b103      	cbz	r3, 8019d5a <_read_r+0x1e>
 8019d58:	6023      	str	r3, [r4, #0]
 8019d5a:	bd38      	pop	{r3, r4, r5, pc}
 8019d5c:	20011e74 	.word	0x20011e74

08019d60 <_write_r>:
 8019d60:	b538      	push	{r3, r4, r5, lr}
 8019d62:	4d07      	ldr	r5, [pc, #28]	@ (8019d80 <_write_r+0x20>)
 8019d64:	4604      	mov	r4, r0
 8019d66:	4608      	mov	r0, r1
 8019d68:	4611      	mov	r1, r2
 8019d6a:	2200      	movs	r2, #0
 8019d6c:	602a      	str	r2, [r5, #0]
 8019d6e:	461a      	mov	r2, r3
 8019d70:	f7e6 ff9a 	bl	8000ca8 <_write>
 8019d74:	1c43      	adds	r3, r0, #1
 8019d76:	d102      	bne.n	8019d7e <_write_r+0x1e>
 8019d78:	682b      	ldr	r3, [r5, #0]
 8019d7a:	b103      	cbz	r3, 8019d7e <_write_r+0x1e>
 8019d7c:	6023      	str	r3, [r4, #0]
 8019d7e:	bd38      	pop	{r3, r4, r5, pc}
 8019d80:	20011e74 	.word	0x20011e74

08019d84 <__libc_init_array>:
 8019d84:	b570      	push	{r4, r5, r6, lr}
 8019d86:	4d0d      	ldr	r5, [pc, #52]	@ (8019dbc <__libc_init_array+0x38>)
 8019d88:	4c0d      	ldr	r4, [pc, #52]	@ (8019dc0 <__libc_init_array+0x3c>)
 8019d8a:	1b64      	subs	r4, r4, r5
 8019d8c:	10a4      	asrs	r4, r4, #2
 8019d8e:	2600      	movs	r6, #0
 8019d90:	42a6      	cmp	r6, r4
 8019d92:	d109      	bne.n	8019da8 <__libc_init_array+0x24>
 8019d94:	4d0b      	ldr	r5, [pc, #44]	@ (8019dc4 <__libc_init_array+0x40>)
 8019d96:	4c0c      	ldr	r4, [pc, #48]	@ (8019dc8 <__libc_init_array+0x44>)
 8019d98:	f001 ff52 	bl	801bc40 <_init>
 8019d9c:	1b64      	subs	r4, r4, r5
 8019d9e:	10a4      	asrs	r4, r4, #2
 8019da0:	2600      	movs	r6, #0
 8019da2:	42a6      	cmp	r6, r4
 8019da4:	d105      	bne.n	8019db2 <__libc_init_array+0x2e>
 8019da6:	bd70      	pop	{r4, r5, r6, pc}
 8019da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8019dac:	4798      	blx	r3
 8019dae:	3601      	adds	r6, #1
 8019db0:	e7ee      	b.n	8019d90 <__libc_init_array+0xc>
 8019db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8019db6:	4798      	blx	r3
 8019db8:	3601      	adds	r6, #1
 8019dba:	e7f2      	b.n	8019da2 <__libc_init_array+0x1e>
 8019dbc:	0801fa0c 	.word	0x0801fa0c
 8019dc0:	0801fa0c 	.word	0x0801fa0c
 8019dc4:	0801fa0c 	.word	0x0801fa0c
 8019dc8:	0801fa10 	.word	0x0801fa10

08019dcc <__retarget_lock_init_recursive>:
 8019dcc:	4770      	bx	lr

08019dce <__retarget_lock_acquire_recursive>:
 8019dce:	4770      	bx	lr

08019dd0 <__retarget_lock_release_recursive>:
 8019dd0:	4770      	bx	lr

08019dd2 <strcpy>:
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019dd8:	f803 2b01 	strb.w	r2, [r3], #1
 8019ddc:	2a00      	cmp	r2, #0
 8019dde:	d1f9      	bne.n	8019dd4 <strcpy+0x2>
 8019de0:	4770      	bx	lr

08019de2 <memcpy>:
 8019de2:	440a      	add	r2, r1
 8019de4:	4291      	cmp	r1, r2
 8019de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8019dea:	d100      	bne.n	8019dee <memcpy+0xc>
 8019dec:	4770      	bx	lr
 8019dee:	b510      	push	{r4, lr}
 8019df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019df8:	4291      	cmp	r1, r2
 8019dfa:	d1f9      	bne.n	8019df0 <memcpy+0xe>
 8019dfc:	bd10      	pop	{r4, pc}
	...

08019e00 <__assert_func>:
 8019e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019e02:	4614      	mov	r4, r2
 8019e04:	461a      	mov	r2, r3
 8019e06:	4b09      	ldr	r3, [pc, #36]	@ (8019e2c <__assert_func+0x2c>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	4605      	mov	r5, r0
 8019e0c:	68d8      	ldr	r0, [r3, #12]
 8019e0e:	b954      	cbnz	r4, 8019e26 <__assert_func+0x26>
 8019e10:	4b07      	ldr	r3, [pc, #28]	@ (8019e30 <__assert_func+0x30>)
 8019e12:	461c      	mov	r4, r3
 8019e14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019e18:	9100      	str	r1, [sp, #0]
 8019e1a:	462b      	mov	r3, r5
 8019e1c:	4905      	ldr	r1, [pc, #20]	@ (8019e34 <__assert_func+0x34>)
 8019e1e:	f001 fdb5 	bl	801b98c <fiprintf>
 8019e22:	f001 fe59 	bl	801bad8 <abort>
 8019e26:	4b04      	ldr	r3, [pc, #16]	@ (8019e38 <__assert_func+0x38>)
 8019e28:	e7f4      	b.n	8019e14 <__assert_func+0x14>
 8019e2a:	bf00      	nop
 8019e2c:	20000028 	.word	0x20000028
 8019e30:	0801f819 	.word	0x0801f819
 8019e34:	0801f7eb 	.word	0x0801f7eb
 8019e38:	0801f7de 	.word	0x0801f7de

08019e3c <quorem>:
 8019e3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	6903      	ldr	r3, [r0, #16]
 8019e42:	690c      	ldr	r4, [r1, #16]
 8019e44:	42a3      	cmp	r3, r4
 8019e46:	4607      	mov	r7, r0
 8019e48:	db7e      	blt.n	8019f48 <quorem+0x10c>
 8019e4a:	3c01      	subs	r4, #1
 8019e4c:	f101 0814 	add.w	r8, r1, #20
 8019e50:	00a3      	lsls	r3, r4, #2
 8019e52:	f100 0514 	add.w	r5, r0, #20
 8019e56:	9300      	str	r3, [sp, #0]
 8019e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019e5c:	9301      	str	r3, [sp, #4]
 8019e5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019e62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019e66:	3301      	adds	r3, #1
 8019e68:	429a      	cmp	r2, r3
 8019e6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019e6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8019e72:	d32e      	bcc.n	8019ed2 <quorem+0x96>
 8019e74:	f04f 0a00 	mov.w	sl, #0
 8019e78:	46c4      	mov	ip, r8
 8019e7a:	46ae      	mov	lr, r5
 8019e7c:	46d3      	mov	fp, sl
 8019e7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8019e82:	b298      	uxth	r0, r3
 8019e84:	fb06 a000 	mla	r0, r6, r0, sl
 8019e88:	0c02      	lsrs	r2, r0, #16
 8019e8a:	0c1b      	lsrs	r3, r3, #16
 8019e8c:	fb06 2303 	mla	r3, r6, r3, r2
 8019e90:	f8de 2000 	ldr.w	r2, [lr]
 8019e94:	b280      	uxth	r0, r0
 8019e96:	b292      	uxth	r2, r2
 8019e98:	1a12      	subs	r2, r2, r0
 8019e9a:	445a      	add	r2, fp
 8019e9c:	f8de 0000 	ldr.w	r0, [lr]
 8019ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8019ea4:	b29b      	uxth	r3, r3
 8019ea6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8019eaa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8019eae:	b292      	uxth	r2, r2
 8019eb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8019eb4:	45e1      	cmp	r9, ip
 8019eb6:	f84e 2b04 	str.w	r2, [lr], #4
 8019eba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8019ebe:	d2de      	bcs.n	8019e7e <quorem+0x42>
 8019ec0:	9b00      	ldr	r3, [sp, #0]
 8019ec2:	58eb      	ldr	r3, [r5, r3]
 8019ec4:	b92b      	cbnz	r3, 8019ed2 <quorem+0x96>
 8019ec6:	9b01      	ldr	r3, [sp, #4]
 8019ec8:	3b04      	subs	r3, #4
 8019eca:	429d      	cmp	r5, r3
 8019ecc:	461a      	mov	r2, r3
 8019ece:	d32f      	bcc.n	8019f30 <quorem+0xf4>
 8019ed0:	613c      	str	r4, [r7, #16]
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	f001 f90c 	bl	801b0f0 <__mcmp>
 8019ed8:	2800      	cmp	r0, #0
 8019eda:	db25      	blt.n	8019f28 <quorem+0xec>
 8019edc:	4629      	mov	r1, r5
 8019ede:	2000      	movs	r0, #0
 8019ee0:	f858 2b04 	ldr.w	r2, [r8], #4
 8019ee4:	f8d1 c000 	ldr.w	ip, [r1]
 8019ee8:	fa1f fe82 	uxth.w	lr, r2
 8019eec:	fa1f f38c 	uxth.w	r3, ip
 8019ef0:	eba3 030e 	sub.w	r3, r3, lr
 8019ef4:	4403      	add	r3, r0
 8019ef6:	0c12      	lsrs	r2, r2, #16
 8019ef8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8019efc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019f06:	45c1      	cmp	r9, r8
 8019f08:	f841 3b04 	str.w	r3, [r1], #4
 8019f0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8019f10:	d2e6      	bcs.n	8019ee0 <quorem+0xa4>
 8019f12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019f1a:	b922      	cbnz	r2, 8019f26 <quorem+0xea>
 8019f1c:	3b04      	subs	r3, #4
 8019f1e:	429d      	cmp	r5, r3
 8019f20:	461a      	mov	r2, r3
 8019f22:	d30b      	bcc.n	8019f3c <quorem+0x100>
 8019f24:	613c      	str	r4, [r7, #16]
 8019f26:	3601      	adds	r6, #1
 8019f28:	4630      	mov	r0, r6
 8019f2a:	b003      	add	sp, #12
 8019f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f30:	6812      	ldr	r2, [r2, #0]
 8019f32:	3b04      	subs	r3, #4
 8019f34:	2a00      	cmp	r2, #0
 8019f36:	d1cb      	bne.n	8019ed0 <quorem+0x94>
 8019f38:	3c01      	subs	r4, #1
 8019f3a:	e7c6      	b.n	8019eca <quorem+0x8e>
 8019f3c:	6812      	ldr	r2, [r2, #0]
 8019f3e:	3b04      	subs	r3, #4
 8019f40:	2a00      	cmp	r2, #0
 8019f42:	d1ef      	bne.n	8019f24 <quorem+0xe8>
 8019f44:	3c01      	subs	r4, #1
 8019f46:	e7ea      	b.n	8019f1e <quorem+0xe2>
 8019f48:	2000      	movs	r0, #0
 8019f4a:	e7ee      	b.n	8019f2a <quorem+0xee>
 8019f4c:	0000      	movs	r0, r0
	...

08019f50 <_dtoa_r>:
 8019f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f54:	ed2d 8b02 	vpush	{d8}
 8019f58:	69c7      	ldr	r7, [r0, #28]
 8019f5a:	b091      	sub	sp, #68	@ 0x44
 8019f5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8019f60:	ec55 4b10 	vmov	r4, r5, d0
 8019f64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8019f66:	9107      	str	r1, [sp, #28]
 8019f68:	4681      	mov	r9, r0
 8019f6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8019f6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8019f6e:	b97f      	cbnz	r7, 8019f90 <_dtoa_r+0x40>
 8019f70:	2010      	movs	r0, #16
 8019f72:	f000 fd8d 	bl	801aa90 <malloc>
 8019f76:	4602      	mov	r2, r0
 8019f78:	f8c9 001c 	str.w	r0, [r9, #28]
 8019f7c:	b920      	cbnz	r0, 8019f88 <_dtoa_r+0x38>
 8019f7e:	4ba0      	ldr	r3, [pc, #640]	@ (801a200 <_dtoa_r+0x2b0>)
 8019f80:	21ef      	movs	r1, #239	@ 0xef
 8019f82:	48a0      	ldr	r0, [pc, #640]	@ (801a204 <_dtoa_r+0x2b4>)
 8019f84:	f7ff ff3c 	bl	8019e00 <__assert_func>
 8019f88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8019f8c:	6007      	str	r7, [r0, #0]
 8019f8e:	60c7      	str	r7, [r0, #12]
 8019f90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019f94:	6819      	ldr	r1, [r3, #0]
 8019f96:	b159      	cbz	r1, 8019fb0 <_dtoa_r+0x60>
 8019f98:	685a      	ldr	r2, [r3, #4]
 8019f9a:	604a      	str	r2, [r1, #4]
 8019f9c:	2301      	movs	r3, #1
 8019f9e:	4093      	lsls	r3, r2
 8019fa0:	608b      	str	r3, [r1, #8]
 8019fa2:	4648      	mov	r0, r9
 8019fa4:	f000 fe6a 	bl	801ac7c <_Bfree>
 8019fa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8019fac:	2200      	movs	r2, #0
 8019fae:	601a      	str	r2, [r3, #0]
 8019fb0:	1e2b      	subs	r3, r5, #0
 8019fb2:	bfbb      	ittet	lt
 8019fb4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8019fb8:	9303      	strlt	r3, [sp, #12]
 8019fba:	2300      	movge	r3, #0
 8019fbc:	2201      	movlt	r2, #1
 8019fbe:	bfac      	ite	ge
 8019fc0:	6033      	strge	r3, [r6, #0]
 8019fc2:	6032      	strlt	r2, [r6, #0]
 8019fc4:	4b90      	ldr	r3, [pc, #576]	@ (801a208 <_dtoa_r+0x2b8>)
 8019fc6:	9e03      	ldr	r6, [sp, #12]
 8019fc8:	43b3      	bics	r3, r6
 8019fca:	d110      	bne.n	8019fee <_dtoa_r+0x9e>
 8019fcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019fce:	f242 730f 	movw	r3, #9999	@ 0x270f
 8019fd2:	6013      	str	r3, [r2, #0]
 8019fd4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8019fd8:	4323      	orrs	r3, r4
 8019fda:	f000 84de 	beq.w	801a99a <_dtoa_r+0xa4a>
 8019fde:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019fe0:	4f8a      	ldr	r7, [pc, #552]	@ (801a20c <_dtoa_r+0x2bc>)
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	f000 84e0 	beq.w	801a9a8 <_dtoa_r+0xa58>
 8019fe8:	1cfb      	adds	r3, r7, #3
 8019fea:	f000 bcdb 	b.w	801a9a4 <_dtoa_r+0xa54>
 8019fee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8019ff2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ffa:	d10a      	bne.n	801a012 <_dtoa_r+0xc2>
 8019ffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019ffe:	2301      	movs	r3, #1
 801a000:	6013      	str	r3, [r2, #0]
 801a002:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a004:	b113      	cbz	r3, 801a00c <_dtoa_r+0xbc>
 801a006:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a008:	4b81      	ldr	r3, [pc, #516]	@ (801a210 <_dtoa_r+0x2c0>)
 801a00a:	6013      	str	r3, [r2, #0]
 801a00c:	4f81      	ldr	r7, [pc, #516]	@ (801a214 <_dtoa_r+0x2c4>)
 801a00e:	f000 bccb 	b.w	801a9a8 <_dtoa_r+0xa58>
 801a012:	aa0e      	add	r2, sp, #56	@ 0x38
 801a014:	a90f      	add	r1, sp, #60	@ 0x3c
 801a016:	4648      	mov	r0, r9
 801a018:	eeb0 0b48 	vmov.f64	d0, d8
 801a01c:	f001 f918 	bl	801b250 <__d2b>
 801a020:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801a024:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a026:	9001      	str	r0, [sp, #4]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d045      	beq.n	801a0b8 <_dtoa_r+0x168>
 801a02c:	eeb0 7b48 	vmov.f64	d7, d8
 801a030:	ee18 1a90 	vmov	r1, s17
 801a034:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a038:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801a03c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801a040:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801a044:	2500      	movs	r5, #0
 801a046:	ee07 1a90 	vmov	s15, r1
 801a04a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801a04e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a1e8 <_dtoa_r+0x298>
 801a052:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a056:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801a1f0 <_dtoa_r+0x2a0>
 801a05a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a05e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801a1f8 <_dtoa_r+0x2a8>
 801a062:	ee07 3a90 	vmov	s15, r3
 801a066:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a06a:	eeb0 7b46 	vmov.f64	d7, d6
 801a06e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a072:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a076:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a07e:	ee16 8a90 	vmov	r8, s13
 801a082:	d508      	bpl.n	801a096 <_dtoa_r+0x146>
 801a084:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a088:	eeb4 6b47 	vcmp.f64	d6, d7
 801a08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a090:	bf18      	it	ne
 801a092:	f108 38ff 	addne.w	r8, r8, #4294967295
 801a096:	f1b8 0f16 	cmp.w	r8, #22
 801a09a:	d82b      	bhi.n	801a0f4 <_dtoa_r+0x1a4>
 801a09c:	495e      	ldr	r1, [pc, #376]	@ (801a218 <_dtoa_r+0x2c8>)
 801a09e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801a0a2:	ed91 7b00 	vldr	d7, [r1]
 801a0a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0ae:	d501      	bpl.n	801a0b4 <_dtoa_r+0x164>
 801a0b0:	f108 38ff 	add.w	r8, r8, #4294967295
 801a0b4:	2100      	movs	r1, #0
 801a0b6:	e01e      	b.n	801a0f6 <_dtoa_r+0x1a6>
 801a0b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a0ba:	4413      	add	r3, r2
 801a0bc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801a0c0:	2920      	cmp	r1, #32
 801a0c2:	bfc1      	itttt	gt
 801a0c4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801a0c8:	408e      	lslgt	r6, r1
 801a0ca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801a0ce:	fa24 f101 	lsrgt.w	r1, r4, r1
 801a0d2:	bfd6      	itet	le
 801a0d4:	f1c1 0120 	rsble	r1, r1, #32
 801a0d8:	4331      	orrgt	r1, r6
 801a0da:	fa04 f101 	lslle.w	r1, r4, r1
 801a0de:	ee07 1a90 	vmov	s15, r1
 801a0e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a0e6:	3b01      	subs	r3, #1
 801a0e8:	ee17 1a90 	vmov	r1, s15
 801a0ec:	2501      	movs	r5, #1
 801a0ee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801a0f2:	e7a8      	b.n	801a046 <_dtoa_r+0xf6>
 801a0f4:	2101      	movs	r1, #1
 801a0f6:	1ad2      	subs	r2, r2, r3
 801a0f8:	1e53      	subs	r3, r2, #1
 801a0fa:	9306      	str	r3, [sp, #24]
 801a0fc:	bf45      	ittet	mi
 801a0fe:	f1c2 0301 	rsbmi	r3, r2, #1
 801a102:	9305      	strmi	r3, [sp, #20]
 801a104:	2300      	movpl	r3, #0
 801a106:	2300      	movmi	r3, #0
 801a108:	bf4c      	ite	mi
 801a10a:	9306      	strmi	r3, [sp, #24]
 801a10c:	9305      	strpl	r3, [sp, #20]
 801a10e:	f1b8 0f00 	cmp.w	r8, #0
 801a112:	910c      	str	r1, [sp, #48]	@ 0x30
 801a114:	db18      	blt.n	801a148 <_dtoa_r+0x1f8>
 801a116:	9b06      	ldr	r3, [sp, #24]
 801a118:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801a11c:	4443      	add	r3, r8
 801a11e:	9306      	str	r3, [sp, #24]
 801a120:	2300      	movs	r3, #0
 801a122:	9a07      	ldr	r2, [sp, #28]
 801a124:	2a09      	cmp	r2, #9
 801a126:	d849      	bhi.n	801a1bc <_dtoa_r+0x26c>
 801a128:	2a05      	cmp	r2, #5
 801a12a:	bfc4      	itt	gt
 801a12c:	3a04      	subgt	r2, #4
 801a12e:	9207      	strgt	r2, [sp, #28]
 801a130:	9a07      	ldr	r2, [sp, #28]
 801a132:	f1a2 0202 	sub.w	r2, r2, #2
 801a136:	bfcc      	ite	gt
 801a138:	2400      	movgt	r4, #0
 801a13a:	2401      	movle	r4, #1
 801a13c:	2a03      	cmp	r2, #3
 801a13e:	d848      	bhi.n	801a1d2 <_dtoa_r+0x282>
 801a140:	e8df f002 	tbb	[pc, r2]
 801a144:	3a2c2e0b 	.word	0x3a2c2e0b
 801a148:	9b05      	ldr	r3, [sp, #20]
 801a14a:	2200      	movs	r2, #0
 801a14c:	eba3 0308 	sub.w	r3, r3, r8
 801a150:	9305      	str	r3, [sp, #20]
 801a152:	920a      	str	r2, [sp, #40]	@ 0x28
 801a154:	f1c8 0300 	rsb	r3, r8, #0
 801a158:	e7e3      	b.n	801a122 <_dtoa_r+0x1d2>
 801a15a:	2200      	movs	r2, #0
 801a15c:	9208      	str	r2, [sp, #32]
 801a15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a160:	2a00      	cmp	r2, #0
 801a162:	dc39      	bgt.n	801a1d8 <_dtoa_r+0x288>
 801a164:	f04f 0b01 	mov.w	fp, #1
 801a168:	46da      	mov	sl, fp
 801a16a:	465a      	mov	r2, fp
 801a16c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a170:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801a174:	2100      	movs	r1, #0
 801a176:	2004      	movs	r0, #4
 801a178:	f100 0614 	add.w	r6, r0, #20
 801a17c:	4296      	cmp	r6, r2
 801a17e:	d930      	bls.n	801a1e2 <_dtoa_r+0x292>
 801a180:	6079      	str	r1, [r7, #4]
 801a182:	4648      	mov	r0, r9
 801a184:	9304      	str	r3, [sp, #16]
 801a186:	f000 fd39 	bl	801abfc <_Balloc>
 801a18a:	9b04      	ldr	r3, [sp, #16]
 801a18c:	4607      	mov	r7, r0
 801a18e:	2800      	cmp	r0, #0
 801a190:	d146      	bne.n	801a220 <_dtoa_r+0x2d0>
 801a192:	4b22      	ldr	r3, [pc, #136]	@ (801a21c <_dtoa_r+0x2cc>)
 801a194:	4602      	mov	r2, r0
 801a196:	f240 11af 	movw	r1, #431	@ 0x1af
 801a19a:	e6f2      	b.n	8019f82 <_dtoa_r+0x32>
 801a19c:	2201      	movs	r2, #1
 801a19e:	e7dd      	b.n	801a15c <_dtoa_r+0x20c>
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	9208      	str	r2, [sp, #32]
 801a1a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1a6:	eb08 0b02 	add.w	fp, r8, r2
 801a1aa:	f10b 0a01 	add.w	sl, fp, #1
 801a1ae:	4652      	mov	r2, sl
 801a1b0:	2a01      	cmp	r2, #1
 801a1b2:	bfb8      	it	lt
 801a1b4:	2201      	movlt	r2, #1
 801a1b6:	e7db      	b.n	801a170 <_dtoa_r+0x220>
 801a1b8:	2201      	movs	r2, #1
 801a1ba:	e7f2      	b.n	801a1a2 <_dtoa_r+0x252>
 801a1bc:	2401      	movs	r4, #1
 801a1be:	2200      	movs	r2, #0
 801a1c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801a1c4:	f04f 3bff 	mov.w	fp, #4294967295
 801a1c8:	2100      	movs	r1, #0
 801a1ca:	46da      	mov	sl, fp
 801a1cc:	2212      	movs	r2, #18
 801a1ce:	9109      	str	r1, [sp, #36]	@ 0x24
 801a1d0:	e7ce      	b.n	801a170 <_dtoa_r+0x220>
 801a1d2:	2201      	movs	r2, #1
 801a1d4:	9208      	str	r2, [sp, #32]
 801a1d6:	e7f5      	b.n	801a1c4 <_dtoa_r+0x274>
 801a1d8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801a1dc:	46da      	mov	sl, fp
 801a1de:	465a      	mov	r2, fp
 801a1e0:	e7c6      	b.n	801a170 <_dtoa_r+0x220>
 801a1e2:	3101      	adds	r1, #1
 801a1e4:	0040      	lsls	r0, r0, #1
 801a1e6:	e7c7      	b.n	801a178 <_dtoa_r+0x228>
 801a1e8:	636f4361 	.word	0x636f4361
 801a1ec:	3fd287a7 	.word	0x3fd287a7
 801a1f0:	8b60c8b3 	.word	0x8b60c8b3
 801a1f4:	3fc68a28 	.word	0x3fc68a28
 801a1f8:	509f79fb 	.word	0x509f79fb
 801a1fc:	3fd34413 	.word	0x3fd34413
 801a200:	0801f63a 	.word	0x0801f63a
 801a204:	0801f827 	.word	0x0801f827
 801a208:	7ff00000 	.word	0x7ff00000
 801a20c:	0801f823 	.word	0x0801f823
 801a210:	0801f7bb 	.word	0x0801f7bb
 801a214:	0801f7ba 	.word	0x0801f7ba
 801a218:	0801f920 	.word	0x0801f920
 801a21c:	0801f87f 	.word	0x0801f87f
 801a220:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801a224:	f1ba 0f0e 	cmp.w	sl, #14
 801a228:	6010      	str	r0, [r2, #0]
 801a22a:	d86f      	bhi.n	801a30c <_dtoa_r+0x3bc>
 801a22c:	2c00      	cmp	r4, #0
 801a22e:	d06d      	beq.n	801a30c <_dtoa_r+0x3bc>
 801a230:	f1b8 0f00 	cmp.w	r8, #0
 801a234:	f340 80c2 	ble.w	801a3bc <_dtoa_r+0x46c>
 801a238:	4aca      	ldr	r2, [pc, #808]	@ (801a564 <_dtoa_r+0x614>)
 801a23a:	f008 010f 	and.w	r1, r8, #15
 801a23e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a242:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801a246:	ed92 7b00 	vldr	d7, [r2]
 801a24a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801a24e:	f000 80a9 	beq.w	801a3a4 <_dtoa_r+0x454>
 801a252:	4ac5      	ldr	r2, [pc, #788]	@ (801a568 <_dtoa_r+0x618>)
 801a254:	ed92 6b08 	vldr	d6, [r2, #32]
 801a258:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a25c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a260:	f001 010f 	and.w	r1, r1, #15
 801a264:	2203      	movs	r2, #3
 801a266:	48c0      	ldr	r0, [pc, #768]	@ (801a568 <_dtoa_r+0x618>)
 801a268:	2900      	cmp	r1, #0
 801a26a:	f040 809d 	bne.w	801a3a8 <_dtoa_r+0x458>
 801a26e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a272:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a276:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a27a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a27c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a280:	2900      	cmp	r1, #0
 801a282:	f000 80c1 	beq.w	801a408 <_dtoa_r+0x4b8>
 801a286:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801a28a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a292:	f140 80b9 	bpl.w	801a408 <_dtoa_r+0x4b8>
 801a296:	f1ba 0f00 	cmp.w	sl, #0
 801a29a:	f000 80b5 	beq.w	801a408 <_dtoa_r+0x4b8>
 801a29e:	f1bb 0f00 	cmp.w	fp, #0
 801a2a2:	dd31      	ble.n	801a308 <_dtoa_r+0x3b8>
 801a2a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801a2a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a2ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a2b0:	f108 31ff 	add.w	r1, r8, #4294967295
 801a2b4:	9104      	str	r1, [sp, #16]
 801a2b6:	3201      	adds	r2, #1
 801a2b8:	465c      	mov	r4, fp
 801a2ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a2be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801a2c2:	ee07 2a90 	vmov	s15, r2
 801a2c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a2ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a2ce:	ee15 2a90 	vmov	r2, s11
 801a2d2:	ec51 0b15 	vmov	r0, r1, d5
 801a2d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801a2da:	2c00      	cmp	r4, #0
 801a2dc:	f040 8098 	bne.w	801a410 <_dtoa_r+0x4c0>
 801a2e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a2e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a2e8:	ec41 0b17 	vmov	d7, r0, r1
 801a2ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2f4:	f300 8261 	bgt.w	801a7ba <_dtoa_r+0x86a>
 801a2f8:	eeb1 7b47 	vneg.f64	d7, d7
 801a2fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a304:	f100 80f5 	bmi.w	801a4f2 <_dtoa_r+0x5a2>
 801a308:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a30c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a30e:	2a00      	cmp	r2, #0
 801a310:	f2c0 812c 	blt.w	801a56c <_dtoa_r+0x61c>
 801a314:	f1b8 0f0e 	cmp.w	r8, #14
 801a318:	f300 8128 	bgt.w	801a56c <_dtoa_r+0x61c>
 801a31c:	4b91      	ldr	r3, [pc, #580]	@ (801a564 <_dtoa_r+0x614>)
 801a31e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a322:	ed93 6b00 	vldr	d6, [r3]
 801a326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a328:	2b00      	cmp	r3, #0
 801a32a:	da03      	bge.n	801a334 <_dtoa_r+0x3e4>
 801a32c:	f1ba 0f00 	cmp.w	sl, #0
 801a330:	f340 80d2 	ble.w	801a4d8 <_dtoa_r+0x588>
 801a334:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801a338:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a33c:	463e      	mov	r6, r7
 801a33e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a342:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a346:	ee15 3a10 	vmov	r3, s10
 801a34a:	3330      	adds	r3, #48	@ 0x30
 801a34c:	f806 3b01 	strb.w	r3, [r6], #1
 801a350:	1bf3      	subs	r3, r6, r7
 801a352:	459a      	cmp	sl, r3
 801a354:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a358:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a35c:	f040 80f8 	bne.w	801a550 <_dtoa_r+0x600>
 801a360:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a364:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a36c:	f300 80dd 	bgt.w	801a52a <_dtoa_r+0x5da>
 801a370:	eeb4 7b46 	vcmp.f64	d7, d6
 801a374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a378:	d104      	bne.n	801a384 <_dtoa_r+0x434>
 801a37a:	ee15 3a10 	vmov	r3, s10
 801a37e:	07db      	lsls	r3, r3, #31
 801a380:	f100 80d3 	bmi.w	801a52a <_dtoa_r+0x5da>
 801a384:	9901      	ldr	r1, [sp, #4]
 801a386:	4648      	mov	r0, r9
 801a388:	f000 fc78 	bl	801ac7c <_Bfree>
 801a38c:	2300      	movs	r3, #0
 801a38e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a390:	7033      	strb	r3, [r6, #0]
 801a392:	f108 0301 	add.w	r3, r8, #1
 801a396:	6013      	str	r3, [r2, #0]
 801a398:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	f000 8304 	beq.w	801a9a8 <_dtoa_r+0xa58>
 801a3a0:	601e      	str	r6, [r3, #0]
 801a3a2:	e301      	b.n	801a9a8 <_dtoa_r+0xa58>
 801a3a4:	2202      	movs	r2, #2
 801a3a6:	e75e      	b.n	801a266 <_dtoa_r+0x316>
 801a3a8:	07cc      	lsls	r4, r1, #31
 801a3aa:	d504      	bpl.n	801a3b6 <_dtoa_r+0x466>
 801a3ac:	ed90 6b00 	vldr	d6, [r0]
 801a3b0:	3201      	adds	r2, #1
 801a3b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3b6:	1049      	asrs	r1, r1, #1
 801a3b8:	3008      	adds	r0, #8
 801a3ba:	e755      	b.n	801a268 <_dtoa_r+0x318>
 801a3bc:	d022      	beq.n	801a404 <_dtoa_r+0x4b4>
 801a3be:	f1c8 0100 	rsb	r1, r8, #0
 801a3c2:	4a68      	ldr	r2, [pc, #416]	@ (801a564 <_dtoa_r+0x614>)
 801a3c4:	f001 000f 	and.w	r0, r1, #15
 801a3c8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801a3cc:	ed92 7b00 	vldr	d7, [r2]
 801a3d0:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a3d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3d8:	4863      	ldr	r0, [pc, #396]	@ (801a568 <_dtoa_r+0x618>)
 801a3da:	1109      	asrs	r1, r1, #4
 801a3dc:	2400      	movs	r4, #0
 801a3de:	2202      	movs	r2, #2
 801a3e0:	b929      	cbnz	r1, 801a3ee <_dtoa_r+0x49e>
 801a3e2:	2c00      	cmp	r4, #0
 801a3e4:	f43f af49 	beq.w	801a27a <_dtoa_r+0x32a>
 801a3e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a3ec:	e745      	b.n	801a27a <_dtoa_r+0x32a>
 801a3ee:	07ce      	lsls	r6, r1, #31
 801a3f0:	d505      	bpl.n	801a3fe <_dtoa_r+0x4ae>
 801a3f2:	ed90 6b00 	vldr	d6, [r0]
 801a3f6:	3201      	adds	r2, #1
 801a3f8:	2401      	movs	r4, #1
 801a3fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a3fe:	1049      	asrs	r1, r1, #1
 801a400:	3008      	adds	r0, #8
 801a402:	e7ed      	b.n	801a3e0 <_dtoa_r+0x490>
 801a404:	2202      	movs	r2, #2
 801a406:	e738      	b.n	801a27a <_dtoa_r+0x32a>
 801a408:	f8cd 8010 	str.w	r8, [sp, #16]
 801a40c:	4654      	mov	r4, sl
 801a40e:	e754      	b.n	801a2ba <_dtoa_r+0x36a>
 801a410:	4a54      	ldr	r2, [pc, #336]	@ (801a564 <_dtoa_r+0x614>)
 801a412:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801a416:	ed12 4b02 	vldr	d4, [r2, #-8]
 801a41a:	9a08      	ldr	r2, [sp, #32]
 801a41c:	ec41 0b17 	vmov	d7, r0, r1
 801a420:	443c      	add	r4, r7
 801a422:	b34a      	cbz	r2, 801a478 <_dtoa_r+0x528>
 801a424:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801a428:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801a42c:	463e      	mov	r6, r7
 801a42e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a432:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a436:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a43a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a43e:	ee14 2a90 	vmov	r2, s9
 801a442:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a446:	3230      	adds	r2, #48	@ 0x30
 801a448:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a44c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a454:	f806 2b01 	strb.w	r2, [r6], #1
 801a458:	d438      	bmi.n	801a4cc <_dtoa_r+0x57c>
 801a45a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a45e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a466:	d462      	bmi.n	801a52e <_dtoa_r+0x5de>
 801a468:	42a6      	cmp	r6, r4
 801a46a:	f43f af4d 	beq.w	801a308 <_dtoa_r+0x3b8>
 801a46e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a472:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a476:	e7e0      	b.n	801a43a <_dtoa_r+0x4ea>
 801a478:	4621      	mov	r1, r4
 801a47a:	463e      	mov	r6, r7
 801a47c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a480:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801a484:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a488:	ee14 2a90 	vmov	r2, s9
 801a48c:	3230      	adds	r2, #48	@ 0x30
 801a48e:	f806 2b01 	strb.w	r2, [r6], #1
 801a492:	42a6      	cmp	r6, r4
 801a494:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a498:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a49c:	d119      	bne.n	801a4d2 <_dtoa_r+0x582>
 801a49e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801a4a2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a4a6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ae:	dc3e      	bgt.n	801a52e <_dtoa_r+0x5de>
 801a4b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a4b4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4bc:	f57f af24 	bpl.w	801a308 <_dtoa_r+0x3b8>
 801a4c0:	460e      	mov	r6, r1
 801a4c2:	3901      	subs	r1, #1
 801a4c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801a4c8:	2b30      	cmp	r3, #48	@ 0x30
 801a4ca:	d0f9      	beq.n	801a4c0 <_dtoa_r+0x570>
 801a4cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801a4d0:	e758      	b.n	801a384 <_dtoa_r+0x434>
 801a4d2:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a4d6:	e7d5      	b.n	801a484 <_dtoa_r+0x534>
 801a4d8:	d10b      	bne.n	801a4f2 <_dtoa_r+0x5a2>
 801a4da:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801a4de:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a4e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a4e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ee:	f2c0 8161 	blt.w	801a7b4 <_dtoa_r+0x864>
 801a4f2:	2400      	movs	r4, #0
 801a4f4:	4625      	mov	r5, r4
 801a4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4f8:	43db      	mvns	r3, r3
 801a4fa:	9304      	str	r3, [sp, #16]
 801a4fc:	463e      	mov	r6, r7
 801a4fe:	f04f 0800 	mov.w	r8, #0
 801a502:	4621      	mov	r1, r4
 801a504:	4648      	mov	r0, r9
 801a506:	f000 fbb9 	bl	801ac7c <_Bfree>
 801a50a:	2d00      	cmp	r5, #0
 801a50c:	d0de      	beq.n	801a4cc <_dtoa_r+0x57c>
 801a50e:	f1b8 0f00 	cmp.w	r8, #0
 801a512:	d005      	beq.n	801a520 <_dtoa_r+0x5d0>
 801a514:	45a8      	cmp	r8, r5
 801a516:	d003      	beq.n	801a520 <_dtoa_r+0x5d0>
 801a518:	4641      	mov	r1, r8
 801a51a:	4648      	mov	r0, r9
 801a51c:	f000 fbae 	bl	801ac7c <_Bfree>
 801a520:	4629      	mov	r1, r5
 801a522:	4648      	mov	r0, r9
 801a524:	f000 fbaa 	bl	801ac7c <_Bfree>
 801a528:	e7d0      	b.n	801a4cc <_dtoa_r+0x57c>
 801a52a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a52e:	4633      	mov	r3, r6
 801a530:	461e      	mov	r6, r3
 801a532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a536:	2a39      	cmp	r2, #57	@ 0x39
 801a538:	d106      	bne.n	801a548 <_dtoa_r+0x5f8>
 801a53a:	429f      	cmp	r7, r3
 801a53c:	d1f8      	bne.n	801a530 <_dtoa_r+0x5e0>
 801a53e:	9a04      	ldr	r2, [sp, #16]
 801a540:	3201      	adds	r2, #1
 801a542:	9204      	str	r2, [sp, #16]
 801a544:	2230      	movs	r2, #48	@ 0x30
 801a546:	703a      	strb	r2, [r7, #0]
 801a548:	781a      	ldrb	r2, [r3, #0]
 801a54a:	3201      	adds	r2, #1
 801a54c:	701a      	strb	r2, [r3, #0]
 801a54e:	e7bd      	b.n	801a4cc <_dtoa_r+0x57c>
 801a550:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a554:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55c:	f47f aeef 	bne.w	801a33e <_dtoa_r+0x3ee>
 801a560:	e710      	b.n	801a384 <_dtoa_r+0x434>
 801a562:	bf00      	nop
 801a564:	0801f920 	.word	0x0801f920
 801a568:	0801f8f8 	.word	0x0801f8f8
 801a56c:	9908      	ldr	r1, [sp, #32]
 801a56e:	2900      	cmp	r1, #0
 801a570:	f000 80e3 	beq.w	801a73a <_dtoa_r+0x7ea>
 801a574:	9907      	ldr	r1, [sp, #28]
 801a576:	2901      	cmp	r1, #1
 801a578:	f300 80c8 	bgt.w	801a70c <_dtoa_r+0x7bc>
 801a57c:	2d00      	cmp	r5, #0
 801a57e:	f000 80c1 	beq.w	801a704 <_dtoa_r+0x7b4>
 801a582:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801a586:	9e05      	ldr	r6, [sp, #20]
 801a588:	461c      	mov	r4, r3
 801a58a:	9304      	str	r3, [sp, #16]
 801a58c:	9b05      	ldr	r3, [sp, #20]
 801a58e:	4413      	add	r3, r2
 801a590:	9305      	str	r3, [sp, #20]
 801a592:	9b06      	ldr	r3, [sp, #24]
 801a594:	2101      	movs	r1, #1
 801a596:	4413      	add	r3, r2
 801a598:	4648      	mov	r0, r9
 801a59a:	9306      	str	r3, [sp, #24]
 801a59c:	f000 fc22 	bl	801ade4 <__i2b>
 801a5a0:	9b04      	ldr	r3, [sp, #16]
 801a5a2:	4605      	mov	r5, r0
 801a5a4:	b166      	cbz	r6, 801a5c0 <_dtoa_r+0x670>
 801a5a6:	9a06      	ldr	r2, [sp, #24]
 801a5a8:	2a00      	cmp	r2, #0
 801a5aa:	dd09      	ble.n	801a5c0 <_dtoa_r+0x670>
 801a5ac:	42b2      	cmp	r2, r6
 801a5ae:	9905      	ldr	r1, [sp, #20]
 801a5b0:	bfa8      	it	ge
 801a5b2:	4632      	movge	r2, r6
 801a5b4:	1a89      	subs	r1, r1, r2
 801a5b6:	9105      	str	r1, [sp, #20]
 801a5b8:	9906      	ldr	r1, [sp, #24]
 801a5ba:	1ab6      	subs	r6, r6, r2
 801a5bc:	1a8a      	subs	r2, r1, r2
 801a5be:	9206      	str	r2, [sp, #24]
 801a5c0:	b1fb      	cbz	r3, 801a602 <_dtoa_r+0x6b2>
 801a5c2:	9a08      	ldr	r2, [sp, #32]
 801a5c4:	2a00      	cmp	r2, #0
 801a5c6:	f000 80bc 	beq.w	801a742 <_dtoa_r+0x7f2>
 801a5ca:	b19c      	cbz	r4, 801a5f4 <_dtoa_r+0x6a4>
 801a5cc:	4629      	mov	r1, r5
 801a5ce:	4622      	mov	r2, r4
 801a5d0:	4648      	mov	r0, r9
 801a5d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a5d4:	f000 fcc6 	bl	801af64 <__pow5mult>
 801a5d8:	9a01      	ldr	r2, [sp, #4]
 801a5da:	4601      	mov	r1, r0
 801a5dc:	4605      	mov	r5, r0
 801a5de:	4648      	mov	r0, r9
 801a5e0:	f000 fc16 	bl	801ae10 <__multiply>
 801a5e4:	9901      	ldr	r1, [sp, #4]
 801a5e6:	9004      	str	r0, [sp, #16]
 801a5e8:	4648      	mov	r0, r9
 801a5ea:	f000 fb47 	bl	801ac7c <_Bfree>
 801a5ee:	9a04      	ldr	r2, [sp, #16]
 801a5f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a5f2:	9201      	str	r2, [sp, #4]
 801a5f4:	1b1a      	subs	r2, r3, r4
 801a5f6:	d004      	beq.n	801a602 <_dtoa_r+0x6b2>
 801a5f8:	9901      	ldr	r1, [sp, #4]
 801a5fa:	4648      	mov	r0, r9
 801a5fc:	f000 fcb2 	bl	801af64 <__pow5mult>
 801a600:	9001      	str	r0, [sp, #4]
 801a602:	2101      	movs	r1, #1
 801a604:	4648      	mov	r0, r9
 801a606:	f000 fbed 	bl	801ade4 <__i2b>
 801a60a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a60c:	4604      	mov	r4, r0
 801a60e:	2b00      	cmp	r3, #0
 801a610:	f000 81d0 	beq.w	801a9b4 <_dtoa_r+0xa64>
 801a614:	461a      	mov	r2, r3
 801a616:	4601      	mov	r1, r0
 801a618:	4648      	mov	r0, r9
 801a61a:	f000 fca3 	bl	801af64 <__pow5mult>
 801a61e:	9b07      	ldr	r3, [sp, #28]
 801a620:	2b01      	cmp	r3, #1
 801a622:	4604      	mov	r4, r0
 801a624:	f300 8095 	bgt.w	801a752 <_dtoa_r+0x802>
 801a628:	9b02      	ldr	r3, [sp, #8]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	f040 808b 	bne.w	801a746 <_dtoa_r+0x7f6>
 801a630:	9b03      	ldr	r3, [sp, #12]
 801a632:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801a636:	2a00      	cmp	r2, #0
 801a638:	f040 8087 	bne.w	801a74a <_dtoa_r+0x7fa>
 801a63c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a640:	0d12      	lsrs	r2, r2, #20
 801a642:	0512      	lsls	r2, r2, #20
 801a644:	2a00      	cmp	r2, #0
 801a646:	f000 8082 	beq.w	801a74e <_dtoa_r+0x7fe>
 801a64a:	9b05      	ldr	r3, [sp, #20]
 801a64c:	3301      	adds	r3, #1
 801a64e:	9305      	str	r3, [sp, #20]
 801a650:	9b06      	ldr	r3, [sp, #24]
 801a652:	3301      	adds	r3, #1
 801a654:	9306      	str	r3, [sp, #24]
 801a656:	2301      	movs	r3, #1
 801a658:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a65a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a65c:	2b00      	cmp	r3, #0
 801a65e:	f000 81af 	beq.w	801a9c0 <_dtoa_r+0xa70>
 801a662:	6922      	ldr	r2, [r4, #16]
 801a664:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801a668:	6910      	ldr	r0, [r2, #16]
 801a66a:	f000 fb6f 	bl	801ad4c <__hi0bits>
 801a66e:	f1c0 0020 	rsb	r0, r0, #32
 801a672:	9b06      	ldr	r3, [sp, #24]
 801a674:	4418      	add	r0, r3
 801a676:	f010 001f 	ands.w	r0, r0, #31
 801a67a:	d076      	beq.n	801a76a <_dtoa_r+0x81a>
 801a67c:	f1c0 0220 	rsb	r2, r0, #32
 801a680:	2a04      	cmp	r2, #4
 801a682:	dd69      	ble.n	801a758 <_dtoa_r+0x808>
 801a684:	9b05      	ldr	r3, [sp, #20]
 801a686:	f1c0 001c 	rsb	r0, r0, #28
 801a68a:	4403      	add	r3, r0
 801a68c:	9305      	str	r3, [sp, #20]
 801a68e:	9b06      	ldr	r3, [sp, #24]
 801a690:	4406      	add	r6, r0
 801a692:	4403      	add	r3, r0
 801a694:	9306      	str	r3, [sp, #24]
 801a696:	9b05      	ldr	r3, [sp, #20]
 801a698:	2b00      	cmp	r3, #0
 801a69a:	dd05      	ble.n	801a6a8 <_dtoa_r+0x758>
 801a69c:	9901      	ldr	r1, [sp, #4]
 801a69e:	461a      	mov	r2, r3
 801a6a0:	4648      	mov	r0, r9
 801a6a2:	f000 fcb9 	bl	801b018 <__lshift>
 801a6a6:	9001      	str	r0, [sp, #4]
 801a6a8:	9b06      	ldr	r3, [sp, #24]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	dd05      	ble.n	801a6ba <_dtoa_r+0x76a>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	461a      	mov	r2, r3
 801a6b2:	4648      	mov	r0, r9
 801a6b4:	f000 fcb0 	bl	801b018 <__lshift>
 801a6b8:	4604      	mov	r4, r0
 801a6ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d056      	beq.n	801a76e <_dtoa_r+0x81e>
 801a6c0:	9801      	ldr	r0, [sp, #4]
 801a6c2:	4621      	mov	r1, r4
 801a6c4:	f000 fd14 	bl	801b0f0 <__mcmp>
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	da50      	bge.n	801a76e <_dtoa_r+0x81e>
 801a6cc:	f108 33ff 	add.w	r3, r8, #4294967295
 801a6d0:	9304      	str	r3, [sp, #16]
 801a6d2:	9901      	ldr	r1, [sp, #4]
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	220a      	movs	r2, #10
 801a6d8:	4648      	mov	r0, r9
 801a6da:	f000 faf1 	bl	801acc0 <__multadd>
 801a6de:	9b08      	ldr	r3, [sp, #32]
 801a6e0:	9001      	str	r0, [sp, #4]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	f000 816e 	beq.w	801a9c4 <_dtoa_r+0xa74>
 801a6e8:	4629      	mov	r1, r5
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	220a      	movs	r2, #10
 801a6ee:	4648      	mov	r0, r9
 801a6f0:	f000 fae6 	bl	801acc0 <__multadd>
 801a6f4:	f1bb 0f00 	cmp.w	fp, #0
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	dc64      	bgt.n	801a7c6 <_dtoa_r+0x876>
 801a6fc:	9b07      	ldr	r3, [sp, #28]
 801a6fe:	2b02      	cmp	r3, #2
 801a700:	dc3e      	bgt.n	801a780 <_dtoa_r+0x830>
 801a702:	e060      	b.n	801a7c6 <_dtoa_r+0x876>
 801a704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a706:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a70a:	e73c      	b.n	801a586 <_dtoa_r+0x636>
 801a70c:	f10a 34ff 	add.w	r4, sl, #4294967295
 801a710:	42a3      	cmp	r3, r4
 801a712:	bfbf      	itttt	lt
 801a714:	1ae2      	sublt	r2, r4, r3
 801a716:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801a718:	189b      	addlt	r3, r3, r2
 801a71a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801a71c:	bfae      	itee	ge
 801a71e:	1b1c      	subge	r4, r3, r4
 801a720:	4623      	movlt	r3, r4
 801a722:	2400      	movlt	r4, #0
 801a724:	f1ba 0f00 	cmp.w	sl, #0
 801a728:	bfb5      	itete	lt
 801a72a:	9a05      	ldrlt	r2, [sp, #20]
 801a72c:	9e05      	ldrge	r6, [sp, #20]
 801a72e:	eba2 060a 	sublt.w	r6, r2, sl
 801a732:	4652      	movge	r2, sl
 801a734:	bfb8      	it	lt
 801a736:	2200      	movlt	r2, #0
 801a738:	e727      	b.n	801a58a <_dtoa_r+0x63a>
 801a73a:	9e05      	ldr	r6, [sp, #20]
 801a73c:	9d08      	ldr	r5, [sp, #32]
 801a73e:	461c      	mov	r4, r3
 801a740:	e730      	b.n	801a5a4 <_dtoa_r+0x654>
 801a742:	461a      	mov	r2, r3
 801a744:	e758      	b.n	801a5f8 <_dtoa_r+0x6a8>
 801a746:	2300      	movs	r3, #0
 801a748:	e786      	b.n	801a658 <_dtoa_r+0x708>
 801a74a:	9b02      	ldr	r3, [sp, #8]
 801a74c:	e784      	b.n	801a658 <_dtoa_r+0x708>
 801a74e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a750:	e783      	b.n	801a65a <_dtoa_r+0x70a>
 801a752:	2300      	movs	r3, #0
 801a754:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a756:	e784      	b.n	801a662 <_dtoa_r+0x712>
 801a758:	d09d      	beq.n	801a696 <_dtoa_r+0x746>
 801a75a:	9b05      	ldr	r3, [sp, #20]
 801a75c:	321c      	adds	r2, #28
 801a75e:	4413      	add	r3, r2
 801a760:	9305      	str	r3, [sp, #20]
 801a762:	9b06      	ldr	r3, [sp, #24]
 801a764:	4416      	add	r6, r2
 801a766:	4413      	add	r3, r2
 801a768:	e794      	b.n	801a694 <_dtoa_r+0x744>
 801a76a:	4602      	mov	r2, r0
 801a76c:	e7f5      	b.n	801a75a <_dtoa_r+0x80a>
 801a76e:	f1ba 0f00 	cmp.w	sl, #0
 801a772:	f8cd 8010 	str.w	r8, [sp, #16]
 801a776:	46d3      	mov	fp, sl
 801a778:	dc21      	bgt.n	801a7be <_dtoa_r+0x86e>
 801a77a:	9b07      	ldr	r3, [sp, #28]
 801a77c:	2b02      	cmp	r3, #2
 801a77e:	dd1e      	ble.n	801a7be <_dtoa_r+0x86e>
 801a780:	f1bb 0f00 	cmp.w	fp, #0
 801a784:	f47f aeb7 	bne.w	801a4f6 <_dtoa_r+0x5a6>
 801a788:	4621      	mov	r1, r4
 801a78a:	465b      	mov	r3, fp
 801a78c:	2205      	movs	r2, #5
 801a78e:	4648      	mov	r0, r9
 801a790:	f000 fa96 	bl	801acc0 <__multadd>
 801a794:	4601      	mov	r1, r0
 801a796:	4604      	mov	r4, r0
 801a798:	9801      	ldr	r0, [sp, #4]
 801a79a:	f000 fca9 	bl	801b0f0 <__mcmp>
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	f77f aea9 	ble.w	801a4f6 <_dtoa_r+0x5a6>
 801a7a4:	463e      	mov	r6, r7
 801a7a6:	2331      	movs	r3, #49	@ 0x31
 801a7a8:	f806 3b01 	strb.w	r3, [r6], #1
 801a7ac:	9b04      	ldr	r3, [sp, #16]
 801a7ae:	3301      	adds	r3, #1
 801a7b0:	9304      	str	r3, [sp, #16]
 801a7b2:	e6a4      	b.n	801a4fe <_dtoa_r+0x5ae>
 801a7b4:	f8cd 8010 	str.w	r8, [sp, #16]
 801a7b8:	4654      	mov	r4, sl
 801a7ba:	4625      	mov	r5, r4
 801a7bc:	e7f2      	b.n	801a7a4 <_dtoa_r+0x854>
 801a7be:	9b08      	ldr	r3, [sp, #32]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	f000 8103 	beq.w	801a9cc <_dtoa_r+0xa7c>
 801a7c6:	2e00      	cmp	r6, #0
 801a7c8:	dd05      	ble.n	801a7d6 <_dtoa_r+0x886>
 801a7ca:	4629      	mov	r1, r5
 801a7cc:	4632      	mov	r2, r6
 801a7ce:	4648      	mov	r0, r9
 801a7d0:	f000 fc22 	bl	801b018 <__lshift>
 801a7d4:	4605      	mov	r5, r0
 801a7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d058      	beq.n	801a88e <_dtoa_r+0x93e>
 801a7dc:	6869      	ldr	r1, [r5, #4]
 801a7de:	4648      	mov	r0, r9
 801a7e0:	f000 fa0c 	bl	801abfc <_Balloc>
 801a7e4:	4606      	mov	r6, r0
 801a7e6:	b928      	cbnz	r0, 801a7f4 <_dtoa_r+0x8a4>
 801a7e8:	4b82      	ldr	r3, [pc, #520]	@ (801a9f4 <_dtoa_r+0xaa4>)
 801a7ea:	4602      	mov	r2, r0
 801a7ec:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801a7f0:	f7ff bbc7 	b.w	8019f82 <_dtoa_r+0x32>
 801a7f4:	692a      	ldr	r2, [r5, #16]
 801a7f6:	3202      	adds	r2, #2
 801a7f8:	0092      	lsls	r2, r2, #2
 801a7fa:	f105 010c 	add.w	r1, r5, #12
 801a7fe:	300c      	adds	r0, #12
 801a800:	f7ff faef 	bl	8019de2 <memcpy>
 801a804:	2201      	movs	r2, #1
 801a806:	4631      	mov	r1, r6
 801a808:	4648      	mov	r0, r9
 801a80a:	f000 fc05 	bl	801b018 <__lshift>
 801a80e:	1c7b      	adds	r3, r7, #1
 801a810:	9305      	str	r3, [sp, #20]
 801a812:	eb07 030b 	add.w	r3, r7, fp
 801a816:	9309      	str	r3, [sp, #36]	@ 0x24
 801a818:	9b02      	ldr	r3, [sp, #8]
 801a81a:	f003 0301 	and.w	r3, r3, #1
 801a81e:	46a8      	mov	r8, r5
 801a820:	9308      	str	r3, [sp, #32]
 801a822:	4605      	mov	r5, r0
 801a824:	9b05      	ldr	r3, [sp, #20]
 801a826:	9801      	ldr	r0, [sp, #4]
 801a828:	4621      	mov	r1, r4
 801a82a:	f103 3bff 	add.w	fp, r3, #4294967295
 801a82e:	f7ff fb05 	bl	8019e3c <quorem>
 801a832:	4641      	mov	r1, r8
 801a834:	9002      	str	r0, [sp, #8]
 801a836:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a83a:	9801      	ldr	r0, [sp, #4]
 801a83c:	f000 fc58 	bl	801b0f0 <__mcmp>
 801a840:	462a      	mov	r2, r5
 801a842:	9006      	str	r0, [sp, #24]
 801a844:	4621      	mov	r1, r4
 801a846:	4648      	mov	r0, r9
 801a848:	f000 fc6e 	bl	801b128 <__mdiff>
 801a84c:	68c2      	ldr	r2, [r0, #12]
 801a84e:	4606      	mov	r6, r0
 801a850:	b9fa      	cbnz	r2, 801a892 <_dtoa_r+0x942>
 801a852:	4601      	mov	r1, r0
 801a854:	9801      	ldr	r0, [sp, #4]
 801a856:	f000 fc4b 	bl	801b0f0 <__mcmp>
 801a85a:	4602      	mov	r2, r0
 801a85c:	4631      	mov	r1, r6
 801a85e:	4648      	mov	r0, r9
 801a860:	920a      	str	r2, [sp, #40]	@ 0x28
 801a862:	f000 fa0b 	bl	801ac7c <_Bfree>
 801a866:	9b07      	ldr	r3, [sp, #28]
 801a868:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a86a:	9e05      	ldr	r6, [sp, #20]
 801a86c:	ea43 0102 	orr.w	r1, r3, r2
 801a870:	9b08      	ldr	r3, [sp, #32]
 801a872:	4319      	orrs	r1, r3
 801a874:	d10f      	bne.n	801a896 <_dtoa_r+0x946>
 801a876:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a87a:	d028      	beq.n	801a8ce <_dtoa_r+0x97e>
 801a87c:	9b06      	ldr	r3, [sp, #24]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	dd02      	ble.n	801a888 <_dtoa_r+0x938>
 801a882:	9b02      	ldr	r3, [sp, #8]
 801a884:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801a888:	f88b a000 	strb.w	sl, [fp]
 801a88c:	e639      	b.n	801a502 <_dtoa_r+0x5b2>
 801a88e:	4628      	mov	r0, r5
 801a890:	e7bd      	b.n	801a80e <_dtoa_r+0x8be>
 801a892:	2201      	movs	r2, #1
 801a894:	e7e2      	b.n	801a85c <_dtoa_r+0x90c>
 801a896:	9b06      	ldr	r3, [sp, #24]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	db04      	blt.n	801a8a6 <_dtoa_r+0x956>
 801a89c:	9907      	ldr	r1, [sp, #28]
 801a89e:	430b      	orrs	r3, r1
 801a8a0:	9908      	ldr	r1, [sp, #32]
 801a8a2:	430b      	orrs	r3, r1
 801a8a4:	d120      	bne.n	801a8e8 <_dtoa_r+0x998>
 801a8a6:	2a00      	cmp	r2, #0
 801a8a8:	ddee      	ble.n	801a888 <_dtoa_r+0x938>
 801a8aa:	9901      	ldr	r1, [sp, #4]
 801a8ac:	2201      	movs	r2, #1
 801a8ae:	4648      	mov	r0, r9
 801a8b0:	f000 fbb2 	bl	801b018 <__lshift>
 801a8b4:	4621      	mov	r1, r4
 801a8b6:	9001      	str	r0, [sp, #4]
 801a8b8:	f000 fc1a 	bl	801b0f0 <__mcmp>
 801a8bc:	2800      	cmp	r0, #0
 801a8be:	dc03      	bgt.n	801a8c8 <_dtoa_r+0x978>
 801a8c0:	d1e2      	bne.n	801a888 <_dtoa_r+0x938>
 801a8c2:	f01a 0f01 	tst.w	sl, #1
 801a8c6:	d0df      	beq.n	801a888 <_dtoa_r+0x938>
 801a8c8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a8cc:	d1d9      	bne.n	801a882 <_dtoa_r+0x932>
 801a8ce:	2339      	movs	r3, #57	@ 0x39
 801a8d0:	f88b 3000 	strb.w	r3, [fp]
 801a8d4:	4633      	mov	r3, r6
 801a8d6:	461e      	mov	r6, r3
 801a8d8:	3b01      	subs	r3, #1
 801a8da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801a8de:	2a39      	cmp	r2, #57	@ 0x39
 801a8e0:	d053      	beq.n	801a98a <_dtoa_r+0xa3a>
 801a8e2:	3201      	adds	r2, #1
 801a8e4:	701a      	strb	r2, [r3, #0]
 801a8e6:	e60c      	b.n	801a502 <_dtoa_r+0x5b2>
 801a8e8:	2a00      	cmp	r2, #0
 801a8ea:	dd07      	ble.n	801a8fc <_dtoa_r+0x9ac>
 801a8ec:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801a8f0:	d0ed      	beq.n	801a8ce <_dtoa_r+0x97e>
 801a8f2:	f10a 0301 	add.w	r3, sl, #1
 801a8f6:	f88b 3000 	strb.w	r3, [fp]
 801a8fa:	e602      	b.n	801a502 <_dtoa_r+0x5b2>
 801a8fc:	9b05      	ldr	r3, [sp, #20]
 801a8fe:	9a05      	ldr	r2, [sp, #20]
 801a900:	f803 ac01 	strb.w	sl, [r3, #-1]
 801a904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a906:	4293      	cmp	r3, r2
 801a908:	d029      	beq.n	801a95e <_dtoa_r+0xa0e>
 801a90a:	9901      	ldr	r1, [sp, #4]
 801a90c:	2300      	movs	r3, #0
 801a90e:	220a      	movs	r2, #10
 801a910:	4648      	mov	r0, r9
 801a912:	f000 f9d5 	bl	801acc0 <__multadd>
 801a916:	45a8      	cmp	r8, r5
 801a918:	9001      	str	r0, [sp, #4]
 801a91a:	f04f 0300 	mov.w	r3, #0
 801a91e:	f04f 020a 	mov.w	r2, #10
 801a922:	4641      	mov	r1, r8
 801a924:	4648      	mov	r0, r9
 801a926:	d107      	bne.n	801a938 <_dtoa_r+0x9e8>
 801a928:	f000 f9ca 	bl	801acc0 <__multadd>
 801a92c:	4680      	mov	r8, r0
 801a92e:	4605      	mov	r5, r0
 801a930:	9b05      	ldr	r3, [sp, #20]
 801a932:	3301      	adds	r3, #1
 801a934:	9305      	str	r3, [sp, #20]
 801a936:	e775      	b.n	801a824 <_dtoa_r+0x8d4>
 801a938:	f000 f9c2 	bl	801acc0 <__multadd>
 801a93c:	4629      	mov	r1, r5
 801a93e:	4680      	mov	r8, r0
 801a940:	2300      	movs	r3, #0
 801a942:	220a      	movs	r2, #10
 801a944:	4648      	mov	r0, r9
 801a946:	f000 f9bb 	bl	801acc0 <__multadd>
 801a94a:	4605      	mov	r5, r0
 801a94c:	e7f0      	b.n	801a930 <_dtoa_r+0x9e0>
 801a94e:	f1bb 0f00 	cmp.w	fp, #0
 801a952:	bfcc      	ite	gt
 801a954:	465e      	movgt	r6, fp
 801a956:	2601      	movle	r6, #1
 801a958:	443e      	add	r6, r7
 801a95a:	f04f 0800 	mov.w	r8, #0
 801a95e:	9901      	ldr	r1, [sp, #4]
 801a960:	2201      	movs	r2, #1
 801a962:	4648      	mov	r0, r9
 801a964:	f000 fb58 	bl	801b018 <__lshift>
 801a968:	4621      	mov	r1, r4
 801a96a:	9001      	str	r0, [sp, #4]
 801a96c:	f000 fbc0 	bl	801b0f0 <__mcmp>
 801a970:	2800      	cmp	r0, #0
 801a972:	dcaf      	bgt.n	801a8d4 <_dtoa_r+0x984>
 801a974:	d102      	bne.n	801a97c <_dtoa_r+0xa2c>
 801a976:	f01a 0f01 	tst.w	sl, #1
 801a97a:	d1ab      	bne.n	801a8d4 <_dtoa_r+0x984>
 801a97c:	4633      	mov	r3, r6
 801a97e:	461e      	mov	r6, r3
 801a980:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a984:	2a30      	cmp	r2, #48	@ 0x30
 801a986:	d0fa      	beq.n	801a97e <_dtoa_r+0xa2e>
 801a988:	e5bb      	b.n	801a502 <_dtoa_r+0x5b2>
 801a98a:	429f      	cmp	r7, r3
 801a98c:	d1a3      	bne.n	801a8d6 <_dtoa_r+0x986>
 801a98e:	9b04      	ldr	r3, [sp, #16]
 801a990:	3301      	adds	r3, #1
 801a992:	9304      	str	r3, [sp, #16]
 801a994:	2331      	movs	r3, #49	@ 0x31
 801a996:	703b      	strb	r3, [r7, #0]
 801a998:	e5b3      	b.n	801a502 <_dtoa_r+0x5b2>
 801a99a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a99c:	4f16      	ldr	r7, [pc, #88]	@ (801a9f8 <_dtoa_r+0xaa8>)
 801a99e:	b11b      	cbz	r3, 801a9a8 <_dtoa_r+0xa58>
 801a9a0:	f107 0308 	add.w	r3, r7, #8
 801a9a4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801a9a6:	6013      	str	r3, [r2, #0]
 801a9a8:	4638      	mov	r0, r7
 801a9aa:	b011      	add	sp, #68	@ 0x44
 801a9ac:	ecbd 8b02 	vpop	{d8}
 801a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9b4:	9b07      	ldr	r3, [sp, #28]
 801a9b6:	2b01      	cmp	r3, #1
 801a9b8:	f77f ae36 	ble.w	801a628 <_dtoa_r+0x6d8>
 801a9bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9be:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a9c0:	2001      	movs	r0, #1
 801a9c2:	e656      	b.n	801a672 <_dtoa_r+0x722>
 801a9c4:	f1bb 0f00 	cmp.w	fp, #0
 801a9c8:	f77f aed7 	ble.w	801a77a <_dtoa_r+0x82a>
 801a9cc:	463e      	mov	r6, r7
 801a9ce:	9801      	ldr	r0, [sp, #4]
 801a9d0:	4621      	mov	r1, r4
 801a9d2:	f7ff fa33 	bl	8019e3c <quorem>
 801a9d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801a9da:	f806 ab01 	strb.w	sl, [r6], #1
 801a9de:	1bf2      	subs	r2, r6, r7
 801a9e0:	4593      	cmp	fp, r2
 801a9e2:	ddb4      	ble.n	801a94e <_dtoa_r+0x9fe>
 801a9e4:	9901      	ldr	r1, [sp, #4]
 801a9e6:	2300      	movs	r3, #0
 801a9e8:	220a      	movs	r2, #10
 801a9ea:	4648      	mov	r0, r9
 801a9ec:	f000 f968 	bl	801acc0 <__multadd>
 801a9f0:	9001      	str	r0, [sp, #4]
 801a9f2:	e7ec      	b.n	801a9ce <_dtoa_r+0xa7e>
 801a9f4:	0801f87f 	.word	0x0801f87f
 801a9f8:	0801f81a 	.word	0x0801f81a

0801a9fc <_free_r>:
 801a9fc:	b538      	push	{r3, r4, r5, lr}
 801a9fe:	4605      	mov	r5, r0
 801aa00:	2900      	cmp	r1, #0
 801aa02:	d041      	beq.n	801aa88 <_free_r+0x8c>
 801aa04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aa08:	1f0c      	subs	r4, r1, #4
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	bfb8      	it	lt
 801aa0e:	18e4      	addlt	r4, r4, r3
 801aa10:	f000 f8e8 	bl	801abe4 <__malloc_lock>
 801aa14:	4a1d      	ldr	r2, [pc, #116]	@ (801aa8c <_free_r+0x90>)
 801aa16:	6813      	ldr	r3, [r2, #0]
 801aa18:	b933      	cbnz	r3, 801aa28 <_free_r+0x2c>
 801aa1a:	6063      	str	r3, [r4, #4]
 801aa1c:	6014      	str	r4, [r2, #0]
 801aa1e:	4628      	mov	r0, r5
 801aa20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa24:	f000 b8e4 	b.w	801abf0 <__malloc_unlock>
 801aa28:	42a3      	cmp	r3, r4
 801aa2a:	d908      	bls.n	801aa3e <_free_r+0x42>
 801aa2c:	6820      	ldr	r0, [r4, #0]
 801aa2e:	1821      	adds	r1, r4, r0
 801aa30:	428b      	cmp	r3, r1
 801aa32:	bf01      	itttt	eq
 801aa34:	6819      	ldreq	r1, [r3, #0]
 801aa36:	685b      	ldreq	r3, [r3, #4]
 801aa38:	1809      	addeq	r1, r1, r0
 801aa3a:	6021      	streq	r1, [r4, #0]
 801aa3c:	e7ed      	b.n	801aa1a <_free_r+0x1e>
 801aa3e:	461a      	mov	r2, r3
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	b10b      	cbz	r3, 801aa48 <_free_r+0x4c>
 801aa44:	42a3      	cmp	r3, r4
 801aa46:	d9fa      	bls.n	801aa3e <_free_r+0x42>
 801aa48:	6811      	ldr	r1, [r2, #0]
 801aa4a:	1850      	adds	r0, r2, r1
 801aa4c:	42a0      	cmp	r0, r4
 801aa4e:	d10b      	bne.n	801aa68 <_free_r+0x6c>
 801aa50:	6820      	ldr	r0, [r4, #0]
 801aa52:	4401      	add	r1, r0
 801aa54:	1850      	adds	r0, r2, r1
 801aa56:	4283      	cmp	r3, r0
 801aa58:	6011      	str	r1, [r2, #0]
 801aa5a:	d1e0      	bne.n	801aa1e <_free_r+0x22>
 801aa5c:	6818      	ldr	r0, [r3, #0]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	6053      	str	r3, [r2, #4]
 801aa62:	4408      	add	r0, r1
 801aa64:	6010      	str	r0, [r2, #0]
 801aa66:	e7da      	b.n	801aa1e <_free_r+0x22>
 801aa68:	d902      	bls.n	801aa70 <_free_r+0x74>
 801aa6a:	230c      	movs	r3, #12
 801aa6c:	602b      	str	r3, [r5, #0]
 801aa6e:	e7d6      	b.n	801aa1e <_free_r+0x22>
 801aa70:	6820      	ldr	r0, [r4, #0]
 801aa72:	1821      	adds	r1, r4, r0
 801aa74:	428b      	cmp	r3, r1
 801aa76:	bf04      	itt	eq
 801aa78:	6819      	ldreq	r1, [r3, #0]
 801aa7a:	685b      	ldreq	r3, [r3, #4]
 801aa7c:	6063      	str	r3, [r4, #4]
 801aa7e:	bf04      	itt	eq
 801aa80:	1809      	addeq	r1, r1, r0
 801aa82:	6021      	streq	r1, [r4, #0]
 801aa84:	6054      	str	r4, [r2, #4]
 801aa86:	e7ca      	b.n	801aa1e <_free_r+0x22>
 801aa88:	bd38      	pop	{r3, r4, r5, pc}
 801aa8a:	bf00      	nop
 801aa8c:	20011fc0 	.word	0x20011fc0

0801aa90 <malloc>:
 801aa90:	4b02      	ldr	r3, [pc, #8]	@ (801aa9c <malloc+0xc>)
 801aa92:	4601      	mov	r1, r0
 801aa94:	6818      	ldr	r0, [r3, #0]
 801aa96:	f000 b825 	b.w	801aae4 <_malloc_r>
 801aa9a:	bf00      	nop
 801aa9c:	20000028 	.word	0x20000028

0801aaa0 <sbrk_aligned>:
 801aaa0:	b570      	push	{r4, r5, r6, lr}
 801aaa2:	4e0f      	ldr	r6, [pc, #60]	@ (801aae0 <sbrk_aligned+0x40>)
 801aaa4:	460c      	mov	r4, r1
 801aaa6:	6831      	ldr	r1, [r6, #0]
 801aaa8:	4605      	mov	r5, r0
 801aaaa:	b911      	cbnz	r1, 801aab2 <sbrk_aligned+0x12>
 801aaac:	f001 f804 	bl	801bab8 <_sbrk_r>
 801aab0:	6030      	str	r0, [r6, #0]
 801aab2:	4621      	mov	r1, r4
 801aab4:	4628      	mov	r0, r5
 801aab6:	f000 ffff 	bl	801bab8 <_sbrk_r>
 801aaba:	1c43      	adds	r3, r0, #1
 801aabc:	d103      	bne.n	801aac6 <sbrk_aligned+0x26>
 801aabe:	f04f 34ff 	mov.w	r4, #4294967295
 801aac2:	4620      	mov	r0, r4
 801aac4:	bd70      	pop	{r4, r5, r6, pc}
 801aac6:	1cc4      	adds	r4, r0, #3
 801aac8:	f024 0403 	bic.w	r4, r4, #3
 801aacc:	42a0      	cmp	r0, r4
 801aace:	d0f8      	beq.n	801aac2 <sbrk_aligned+0x22>
 801aad0:	1a21      	subs	r1, r4, r0
 801aad2:	4628      	mov	r0, r5
 801aad4:	f000 fff0 	bl	801bab8 <_sbrk_r>
 801aad8:	3001      	adds	r0, #1
 801aada:	d1f2      	bne.n	801aac2 <sbrk_aligned+0x22>
 801aadc:	e7ef      	b.n	801aabe <sbrk_aligned+0x1e>
 801aade:	bf00      	nop
 801aae0:	20011fbc 	.word	0x20011fbc

0801aae4 <_malloc_r>:
 801aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aae8:	1ccd      	adds	r5, r1, #3
 801aaea:	f025 0503 	bic.w	r5, r5, #3
 801aaee:	3508      	adds	r5, #8
 801aaf0:	2d0c      	cmp	r5, #12
 801aaf2:	bf38      	it	cc
 801aaf4:	250c      	movcc	r5, #12
 801aaf6:	2d00      	cmp	r5, #0
 801aaf8:	4606      	mov	r6, r0
 801aafa:	db01      	blt.n	801ab00 <_malloc_r+0x1c>
 801aafc:	42a9      	cmp	r1, r5
 801aafe:	d904      	bls.n	801ab0a <_malloc_r+0x26>
 801ab00:	230c      	movs	r3, #12
 801ab02:	6033      	str	r3, [r6, #0]
 801ab04:	2000      	movs	r0, #0
 801ab06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801abe0 <_malloc_r+0xfc>
 801ab0e:	f000 f869 	bl	801abe4 <__malloc_lock>
 801ab12:	f8d8 3000 	ldr.w	r3, [r8]
 801ab16:	461c      	mov	r4, r3
 801ab18:	bb44      	cbnz	r4, 801ab6c <_malloc_r+0x88>
 801ab1a:	4629      	mov	r1, r5
 801ab1c:	4630      	mov	r0, r6
 801ab1e:	f7ff ffbf 	bl	801aaa0 <sbrk_aligned>
 801ab22:	1c43      	adds	r3, r0, #1
 801ab24:	4604      	mov	r4, r0
 801ab26:	d158      	bne.n	801abda <_malloc_r+0xf6>
 801ab28:	f8d8 4000 	ldr.w	r4, [r8]
 801ab2c:	4627      	mov	r7, r4
 801ab2e:	2f00      	cmp	r7, #0
 801ab30:	d143      	bne.n	801abba <_malloc_r+0xd6>
 801ab32:	2c00      	cmp	r4, #0
 801ab34:	d04b      	beq.n	801abce <_malloc_r+0xea>
 801ab36:	6823      	ldr	r3, [r4, #0]
 801ab38:	4639      	mov	r1, r7
 801ab3a:	4630      	mov	r0, r6
 801ab3c:	eb04 0903 	add.w	r9, r4, r3
 801ab40:	f000 ffba 	bl	801bab8 <_sbrk_r>
 801ab44:	4581      	cmp	r9, r0
 801ab46:	d142      	bne.n	801abce <_malloc_r+0xea>
 801ab48:	6821      	ldr	r1, [r4, #0]
 801ab4a:	1a6d      	subs	r5, r5, r1
 801ab4c:	4629      	mov	r1, r5
 801ab4e:	4630      	mov	r0, r6
 801ab50:	f7ff ffa6 	bl	801aaa0 <sbrk_aligned>
 801ab54:	3001      	adds	r0, #1
 801ab56:	d03a      	beq.n	801abce <_malloc_r+0xea>
 801ab58:	6823      	ldr	r3, [r4, #0]
 801ab5a:	442b      	add	r3, r5
 801ab5c:	6023      	str	r3, [r4, #0]
 801ab5e:	f8d8 3000 	ldr.w	r3, [r8]
 801ab62:	685a      	ldr	r2, [r3, #4]
 801ab64:	bb62      	cbnz	r2, 801abc0 <_malloc_r+0xdc>
 801ab66:	f8c8 7000 	str.w	r7, [r8]
 801ab6a:	e00f      	b.n	801ab8c <_malloc_r+0xa8>
 801ab6c:	6822      	ldr	r2, [r4, #0]
 801ab6e:	1b52      	subs	r2, r2, r5
 801ab70:	d420      	bmi.n	801abb4 <_malloc_r+0xd0>
 801ab72:	2a0b      	cmp	r2, #11
 801ab74:	d917      	bls.n	801aba6 <_malloc_r+0xc2>
 801ab76:	1961      	adds	r1, r4, r5
 801ab78:	42a3      	cmp	r3, r4
 801ab7a:	6025      	str	r5, [r4, #0]
 801ab7c:	bf18      	it	ne
 801ab7e:	6059      	strne	r1, [r3, #4]
 801ab80:	6863      	ldr	r3, [r4, #4]
 801ab82:	bf08      	it	eq
 801ab84:	f8c8 1000 	streq.w	r1, [r8]
 801ab88:	5162      	str	r2, [r4, r5]
 801ab8a:	604b      	str	r3, [r1, #4]
 801ab8c:	4630      	mov	r0, r6
 801ab8e:	f000 f82f 	bl	801abf0 <__malloc_unlock>
 801ab92:	f104 000b 	add.w	r0, r4, #11
 801ab96:	1d23      	adds	r3, r4, #4
 801ab98:	f020 0007 	bic.w	r0, r0, #7
 801ab9c:	1ac2      	subs	r2, r0, r3
 801ab9e:	bf1c      	itt	ne
 801aba0:	1a1b      	subne	r3, r3, r0
 801aba2:	50a3      	strne	r3, [r4, r2]
 801aba4:	e7af      	b.n	801ab06 <_malloc_r+0x22>
 801aba6:	6862      	ldr	r2, [r4, #4]
 801aba8:	42a3      	cmp	r3, r4
 801abaa:	bf0c      	ite	eq
 801abac:	f8c8 2000 	streq.w	r2, [r8]
 801abb0:	605a      	strne	r2, [r3, #4]
 801abb2:	e7eb      	b.n	801ab8c <_malloc_r+0xa8>
 801abb4:	4623      	mov	r3, r4
 801abb6:	6864      	ldr	r4, [r4, #4]
 801abb8:	e7ae      	b.n	801ab18 <_malloc_r+0x34>
 801abba:	463c      	mov	r4, r7
 801abbc:	687f      	ldr	r7, [r7, #4]
 801abbe:	e7b6      	b.n	801ab2e <_malloc_r+0x4a>
 801abc0:	461a      	mov	r2, r3
 801abc2:	685b      	ldr	r3, [r3, #4]
 801abc4:	42a3      	cmp	r3, r4
 801abc6:	d1fb      	bne.n	801abc0 <_malloc_r+0xdc>
 801abc8:	2300      	movs	r3, #0
 801abca:	6053      	str	r3, [r2, #4]
 801abcc:	e7de      	b.n	801ab8c <_malloc_r+0xa8>
 801abce:	230c      	movs	r3, #12
 801abd0:	6033      	str	r3, [r6, #0]
 801abd2:	4630      	mov	r0, r6
 801abd4:	f000 f80c 	bl	801abf0 <__malloc_unlock>
 801abd8:	e794      	b.n	801ab04 <_malloc_r+0x20>
 801abda:	6005      	str	r5, [r0, #0]
 801abdc:	e7d6      	b.n	801ab8c <_malloc_r+0xa8>
 801abde:	bf00      	nop
 801abe0:	20011fc0 	.word	0x20011fc0

0801abe4 <__malloc_lock>:
 801abe4:	4801      	ldr	r0, [pc, #4]	@ (801abec <__malloc_lock+0x8>)
 801abe6:	f7ff b8f2 	b.w	8019dce <__retarget_lock_acquire_recursive>
 801abea:	bf00      	nop
 801abec:	20011fb8 	.word	0x20011fb8

0801abf0 <__malloc_unlock>:
 801abf0:	4801      	ldr	r0, [pc, #4]	@ (801abf8 <__malloc_unlock+0x8>)
 801abf2:	f7ff b8ed 	b.w	8019dd0 <__retarget_lock_release_recursive>
 801abf6:	bf00      	nop
 801abf8:	20011fb8 	.word	0x20011fb8

0801abfc <_Balloc>:
 801abfc:	b570      	push	{r4, r5, r6, lr}
 801abfe:	69c6      	ldr	r6, [r0, #28]
 801ac00:	4604      	mov	r4, r0
 801ac02:	460d      	mov	r5, r1
 801ac04:	b976      	cbnz	r6, 801ac24 <_Balloc+0x28>
 801ac06:	2010      	movs	r0, #16
 801ac08:	f7ff ff42 	bl	801aa90 <malloc>
 801ac0c:	4602      	mov	r2, r0
 801ac0e:	61e0      	str	r0, [r4, #28]
 801ac10:	b920      	cbnz	r0, 801ac1c <_Balloc+0x20>
 801ac12:	4b18      	ldr	r3, [pc, #96]	@ (801ac74 <_Balloc+0x78>)
 801ac14:	4818      	ldr	r0, [pc, #96]	@ (801ac78 <_Balloc+0x7c>)
 801ac16:	216b      	movs	r1, #107	@ 0x6b
 801ac18:	f7ff f8f2 	bl	8019e00 <__assert_func>
 801ac1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ac20:	6006      	str	r6, [r0, #0]
 801ac22:	60c6      	str	r6, [r0, #12]
 801ac24:	69e6      	ldr	r6, [r4, #28]
 801ac26:	68f3      	ldr	r3, [r6, #12]
 801ac28:	b183      	cbz	r3, 801ac4c <_Balloc+0x50>
 801ac2a:	69e3      	ldr	r3, [r4, #28]
 801ac2c:	68db      	ldr	r3, [r3, #12]
 801ac2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ac32:	b9b8      	cbnz	r0, 801ac64 <_Balloc+0x68>
 801ac34:	2101      	movs	r1, #1
 801ac36:	fa01 f605 	lsl.w	r6, r1, r5
 801ac3a:	1d72      	adds	r2, r6, #5
 801ac3c:	0092      	lsls	r2, r2, #2
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f000 ff51 	bl	801bae6 <_calloc_r>
 801ac44:	b160      	cbz	r0, 801ac60 <_Balloc+0x64>
 801ac46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ac4a:	e00e      	b.n	801ac6a <_Balloc+0x6e>
 801ac4c:	2221      	movs	r2, #33	@ 0x21
 801ac4e:	2104      	movs	r1, #4
 801ac50:	4620      	mov	r0, r4
 801ac52:	f000 ff48 	bl	801bae6 <_calloc_r>
 801ac56:	69e3      	ldr	r3, [r4, #28]
 801ac58:	60f0      	str	r0, [r6, #12]
 801ac5a:	68db      	ldr	r3, [r3, #12]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d1e4      	bne.n	801ac2a <_Balloc+0x2e>
 801ac60:	2000      	movs	r0, #0
 801ac62:	bd70      	pop	{r4, r5, r6, pc}
 801ac64:	6802      	ldr	r2, [r0, #0]
 801ac66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ac6a:	2300      	movs	r3, #0
 801ac6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ac70:	e7f7      	b.n	801ac62 <_Balloc+0x66>
 801ac72:	bf00      	nop
 801ac74:	0801f63a 	.word	0x0801f63a
 801ac78:	0801f890 	.word	0x0801f890

0801ac7c <_Bfree>:
 801ac7c:	b570      	push	{r4, r5, r6, lr}
 801ac7e:	69c6      	ldr	r6, [r0, #28]
 801ac80:	4605      	mov	r5, r0
 801ac82:	460c      	mov	r4, r1
 801ac84:	b976      	cbnz	r6, 801aca4 <_Bfree+0x28>
 801ac86:	2010      	movs	r0, #16
 801ac88:	f7ff ff02 	bl	801aa90 <malloc>
 801ac8c:	4602      	mov	r2, r0
 801ac8e:	61e8      	str	r0, [r5, #28]
 801ac90:	b920      	cbnz	r0, 801ac9c <_Bfree+0x20>
 801ac92:	4b09      	ldr	r3, [pc, #36]	@ (801acb8 <_Bfree+0x3c>)
 801ac94:	4809      	ldr	r0, [pc, #36]	@ (801acbc <_Bfree+0x40>)
 801ac96:	218f      	movs	r1, #143	@ 0x8f
 801ac98:	f7ff f8b2 	bl	8019e00 <__assert_func>
 801ac9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aca0:	6006      	str	r6, [r0, #0]
 801aca2:	60c6      	str	r6, [r0, #12]
 801aca4:	b13c      	cbz	r4, 801acb6 <_Bfree+0x3a>
 801aca6:	69eb      	ldr	r3, [r5, #28]
 801aca8:	6862      	ldr	r2, [r4, #4]
 801acaa:	68db      	ldr	r3, [r3, #12]
 801acac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801acb0:	6021      	str	r1, [r4, #0]
 801acb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801acb6:	bd70      	pop	{r4, r5, r6, pc}
 801acb8:	0801f63a 	.word	0x0801f63a
 801acbc:	0801f890 	.word	0x0801f890

0801acc0 <__multadd>:
 801acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acc4:	690d      	ldr	r5, [r1, #16]
 801acc6:	4607      	mov	r7, r0
 801acc8:	460c      	mov	r4, r1
 801acca:	461e      	mov	r6, r3
 801accc:	f101 0c14 	add.w	ip, r1, #20
 801acd0:	2000      	movs	r0, #0
 801acd2:	f8dc 3000 	ldr.w	r3, [ip]
 801acd6:	b299      	uxth	r1, r3
 801acd8:	fb02 6101 	mla	r1, r2, r1, r6
 801acdc:	0c1e      	lsrs	r6, r3, #16
 801acde:	0c0b      	lsrs	r3, r1, #16
 801ace0:	fb02 3306 	mla	r3, r2, r6, r3
 801ace4:	b289      	uxth	r1, r1
 801ace6:	3001      	adds	r0, #1
 801ace8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801acec:	4285      	cmp	r5, r0
 801acee:	f84c 1b04 	str.w	r1, [ip], #4
 801acf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801acf6:	dcec      	bgt.n	801acd2 <__multadd+0x12>
 801acf8:	b30e      	cbz	r6, 801ad3e <__multadd+0x7e>
 801acfa:	68a3      	ldr	r3, [r4, #8]
 801acfc:	42ab      	cmp	r3, r5
 801acfe:	dc19      	bgt.n	801ad34 <__multadd+0x74>
 801ad00:	6861      	ldr	r1, [r4, #4]
 801ad02:	4638      	mov	r0, r7
 801ad04:	3101      	adds	r1, #1
 801ad06:	f7ff ff79 	bl	801abfc <_Balloc>
 801ad0a:	4680      	mov	r8, r0
 801ad0c:	b928      	cbnz	r0, 801ad1a <__multadd+0x5a>
 801ad0e:	4602      	mov	r2, r0
 801ad10:	4b0c      	ldr	r3, [pc, #48]	@ (801ad44 <__multadd+0x84>)
 801ad12:	480d      	ldr	r0, [pc, #52]	@ (801ad48 <__multadd+0x88>)
 801ad14:	21ba      	movs	r1, #186	@ 0xba
 801ad16:	f7ff f873 	bl	8019e00 <__assert_func>
 801ad1a:	6922      	ldr	r2, [r4, #16]
 801ad1c:	3202      	adds	r2, #2
 801ad1e:	f104 010c 	add.w	r1, r4, #12
 801ad22:	0092      	lsls	r2, r2, #2
 801ad24:	300c      	adds	r0, #12
 801ad26:	f7ff f85c 	bl	8019de2 <memcpy>
 801ad2a:	4621      	mov	r1, r4
 801ad2c:	4638      	mov	r0, r7
 801ad2e:	f7ff ffa5 	bl	801ac7c <_Bfree>
 801ad32:	4644      	mov	r4, r8
 801ad34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ad38:	3501      	adds	r5, #1
 801ad3a:	615e      	str	r6, [r3, #20]
 801ad3c:	6125      	str	r5, [r4, #16]
 801ad3e:	4620      	mov	r0, r4
 801ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad44:	0801f87f 	.word	0x0801f87f
 801ad48:	0801f890 	.word	0x0801f890

0801ad4c <__hi0bits>:
 801ad4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ad50:	4603      	mov	r3, r0
 801ad52:	bf36      	itet	cc
 801ad54:	0403      	lslcc	r3, r0, #16
 801ad56:	2000      	movcs	r0, #0
 801ad58:	2010      	movcc	r0, #16
 801ad5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ad5e:	bf3c      	itt	cc
 801ad60:	021b      	lslcc	r3, r3, #8
 801ad62:	3008      	addcc	r0, #8
 801ad64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ad68:	bf3c      	itt	cc
 801ad6a:	011b      	lslcc	r3, r3, #4
 801ad6c:	3004      	addcc	r0, #4
 801ad6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ad72:	bf3c      	itt	cc
 801ad74:	009b      	lslcc	r3, r3, #2
 801ad76:	3002      	addcc	r0, #2
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	db05      	blt.n	801ad88 <__hi0bits+0x3c>
 801ad7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ad80:	f100 0001 	add.w	r0, r0, #1
 801ad84:	bf08      	it	eq
 801ad86:	2020      	moveq	r0, #32
 801ad88:	4770      	bx	lr

0801ad8a <__lo0bits>:
 801ad8a:	6803      	ldr	r3, [r0, #0]
 801ad8c:	4602      	mov	r2, r0
 801ad8e:	f013 0007 	ands.w	r0, r3, #7
 801ad92:	d00b      	beq.n	801adac <__lo0bits+0x22>
 801ad94:	07d9      	lsls	r1, r3, #31
 801ad96:	d421      	bmi.n	801addc <__lo0bits+0x52>
 801ad98:	0798      	lsls	r0, r3, #30
 801ad9a:	bf49      	itett	mi
 801ad9c:	085b      	lsrmi	r3, r3, #1
 801ad9e:	089b      	lsrpl	r3, r3, #2
 801ada0:	2001      	movmi	r0, #1
 801ada2:	6013      	strmi	r3, [r2, #0]
 801ada4:	bf5c      	itt	pl
 801ada6:	6013      	strpl	r3, [r2, #0]
 801ada8:	2002      	movpl	r0, #2
 801adaa:	4770      	bx	lr
 801adac:	b299      	uxth	r1, r3
 801adae:	b909      	cbnz	r1, 801adb4 <__lo0bits+0x2a>
 801adb0:	0c1b      	lsrs	r3, r3, #16
 801adb2:	2010      	movs	r0, #16
 801adb4:	b2d9      	uxtb	r1, r3
 801adb6:	b909      	cbnz	r1, 801adbc <__lo0bits+0x32>
 801adb8:	3008      	adds	r0, #8
 801adba:	0a1b      	lsrs	r3, r3, #8
 801adbc:	0719      	lsls	r1, r3, #28
 801adbe:	bf04      	itt	eq
 801adc0:	091b      	lsreq	r3, r3, #4
 801adc2:	3004      	addeq	r0, #4
 801adc4:	0799      	lsls	r1, r3, #30
 801adc6:	bf04      	itt	eq
 801adc8:	089b      	lsreq	r3, r3, #2
 801adca:	3002      	addeq	r0, #2
 801adcc:	07d9      	lsls	r1, r3, #31
 801adce:	d403      	bmi.n	801add8 <__lo0bits+0x4e>
 801add0:	085b      	lsrs	r3, r3, #1
 801add2:	f100 0001 	add.w	r0, r0, #1
 801add6:	d003      	beq.n	801ade0 <__lo0bits+0x56>
 801add8:	6013      	str	r3, [r2, #0]
 801adda:	4770      	bx	lr
 801addc:	2000      	movs	r0, #0
 801adde:	4770      	bx	lr
 801ade0:	2020      	movs	r0, #32
 801ade2:	4770      	bx	lr

0801ade4 <__i2b>:
 801ade4:	b510      	push	{r4, lr}
 801ade6:	460c      	mov	r4, r1
 801ade8:	2101      	movs	r1, #1
 801adea:	f7ff ff07 	bl	801abfc <_Balloc>
 801adee:	4602      	mov	r2, r0
 801adf0:	b928      	cbnz	r0, 801adfe <__i2b+0x1a>
 801adf2:	4b05      	ldr	r3, [pc, #20]	@ (801ae08 <__i2b+0x24>)
 801adf4:	4805      	ldr	r0, [pc, #20]	@ (801ae0c <__i2b+0x28>)
 801adf6:	f240 1145 	movw	r1, #325	@ 0x145
 801adfa:	f7ff f801 	bl	8019e00 <__assert_func>
 801adfe:	2301      	movs	r3, #1
 801ae00:	6144      	str	r4, [r0, #20]
 801ae02:	6103      	str	r3, [r0, #16]
 801ae04:	bd10      	pop	{r4, pc}
 801ae06:	bf00      	nop
 801ae08:	0801f87f 	.word	0x0801f87f
 801ae0c:	0801f890 	.word	0x0801f890

0801ae10 <__multiply>:
 801ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae14:	4614      	mov	r4, r2
 801ae16:	690a      	ldr	r2, [r1, #16]
 801ae18:	6923      	ldr	r3, [r4, #16]
 801ae1a:	429a      	cmp	r2, r3
 801ae1c:	bfa8      	it	ge
 801ae1e:	4623      	movge	r3, r4
 801ae20:	460f      	mov	r7, r1
 801ae22:	bfa4      	itt	ge
 801ae24:	460c      	movge	r4, r1
 801ae26:	461f      	movge	r7, r3
 801ae28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ae2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ae30:	68a3      	ldr	r3, [r4, #8]
 801ae32:	6861      	ldr	r1, [r4, #4]
 801ae34:	eb0a 0609 	add.w	r6, sl, r9
 801ae38:	42b3      	cmp	r3, r6
 801ae3a:	b085      	sub	sp, #20
 801ae3c:	bfb8      	it	lt
 801ae3e:	3101      	addlt	r1, #1
 801ae40:	f7ff fedc 	bl	801abfc <_Balloc>
 801ae44:	b930      	cbnz	r0, 801ae54 <__multiply+0x44>
 801ae46:	4602      	mov	r2, r0
 801ae48:	4b44      	ldr	r3, [pc, #272]	@ (801af5c <__multiply+0x14c>)
 801ae4a:	4845      	ldr	r0, [pc, #276]	@ (801af60 <__multiply+0x150>)
 801ae4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ae50:	f7fe ffd6 	bl	8019e00 <__assert_func>
 801ae54:	f100 0514 	add.w	r5, r0, #20
 801ae58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ae5c:	462b      	mov	r3, r5
 801ae5e:	2200      	movs	r2, #0
 801ae60:	4543      	cmp	r3, r8
 801ae62:	d321      	bcc.n	801aea8 <__multiply+0x98>
 801ae64:	f107 0114 	add.w	r1, r7, #20
 801ae68:	f104 0214 	add.w	r2, r4, #20
 801ae6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ae70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ae74:	9302      	str	r3, [sp, #8]
 801ae76:	1b13      	subs	r3, r2, r4
 801ae78:	3b15      	subs	r3, #21
 801ae7a:	f023 0303 	bic.w	r3, r3, #3
 801ae7e:	3304      	adds	r3, #4
 801ae80:	f104 0715 	add.w	r7, r4, #21
 801ae84:	42ba      	cmp	r2, r7
 801ae86:	bf38      	it	cc
 801ae88:	2304      	movcc	r3, #4
 801ae8a:	9301      	str	r3, [sp, #4]
 801ae8c:	9b02      	ldr	r3, [sp, #8]
 801ae8e:	9103      	str	r1, [sp, #12]
 801ae90:	428b      	cmp	r3, r1
 801ae92:	d80c      	bhi.n	801aeae <__multiply+0x9e>
 801ae94:	2e00      	cmp	r6, #0
 801ae96:	dd03      	ble.n	801aea0 <__multiply+0x90>
 801ae98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d05b      	beq.n	801af58 <__multiply+0x148>
 801aea0:	6106      	str	r6, [r0, #16]
 801aea2:	b005      	add	sp, #20
 801aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aea8:	f843 2b04 	str.w	r2, [r3], #4
 801aeac:	e7d8      	b.n	801ae60 <__multiply+0x50>
 801aeae:	f8b1 a000 	ldrh.w	sl, [r1]
 801aeb2:	f1ba 0f00 	cmp.w	sl, #0
 801aeb6:	d024      	beq.n	801af02 <__multiply+0xf2>
 801aeb8:	f104 0e14 	add.w	lr, r4, #20
 801aebc:	46a9      	mov	r9, r5
 801aebe:	f04f 0c00 	mov.w	ip, #0
 801aec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801aec6:	f8d9 3000 	ldr.w	r3, [r9]
 801aeca:	fa1f fb87 	uxth.w	fp, r7
 801aece:	b29b      	uxth	r3, r3
 801aed0:	fb0a 330b 	mla	r3, sl, fp, r3
 801aed4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801aed8:	f8d9 7000 	ldr.w	r7, [r9]
 801aedc:	4463      	add	r3, ip
 801aede:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aee2:	fb0a c70b 	mla	r7, sl, fp, ip
 801aee6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801aef0:	4572      	cmp	r2, lr
 801aef2:	f849 3b04 	str.w	r3, [r9], #4
 801aef6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801aefa:	d8e2      	bhi.n	801aec2 <__multiply+0xb2>
 801aefc:	9b01      	ldr	r3, [sp, #4]
 801aefe:	f845 c003 	str.w	ip, [r5, r3]
 801af02:	9b03      	ldr	r3, [sp, #12]
 801af04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801af08:	3104      	adds	r1, #4
 801af0a:	f1b9 0f00 	cmp.w	r9, #0
 801af0e:	d021      	beq.n	801af54 <__multiply+0x144>
 801af10:	682b      	ldr	r3, [r5, #0]
 801af12:	f104 0c14 	add.w	ip, r4, #20
 801af16:	46ae      	mov	lr, r5
 801af18:	f04f 0a00 	mov.w	sl, #0
 801af1c:	f8bc b000 	ldrh.w	fp, [ip]
 801af20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801af24:	fb09 770b 	mla	r7, r9, fp, r7
 801af28:	4457      	add	r7, sl
 801af2a:	b29b      	uxth	r3, r3
 801af2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801af30:	f84e 3b04 	str.w	r3, [lr], #4
 801af34:	f85c 3b04 	ldr.w	r3, [ip], #4
 801af38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801af3c:	f8be 3000 	ldrh.w	r3, [lr]
 801af40:	fb09 330a 	mla	r3, r9, sl, r3
 801af44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801af48:	4562      	cmp	r2, ip
 801af4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801af4e:	d8e5      	bhi.n	801af1c <__multiply+0x10c>
 801af50:	9f01      	ldr	r7, [sp, #4]
 801af52:	51eb      	str	r3, [r5, r7]
 801af54:	3504      	adds	r5, #4
 801af56:	e799      	b.n	801ae8c <__multiply+0x7c>
 801af58:	3e01      	subs	r6, #1
 801af5a:	e79b      	b.n	801ae94 <__multiply+0x84>
 801af5c:	0801f87f 	.word	0x0801f87f
 801af60:	0801f890 	.word	0x0801f890

0801af64 <__pow5mult>:
 801af64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af68:	4615      	mov	r5, r2
 801af6a:	f012 0203 	ands.w	r2, r2, #3
 801af6e:	4607      	mov	r7, r0
 801af70:	460e      	mov	r6, r1
 801af72:	d007      	beq.n	801af84 <__pow5mult+0x20>
 801af74:	4c25      	ldr	r4, [pc, #148]	@ (801b00c <__pow5mult+0xa8>)
 801af76:	3a01      	subs	r2, #1
 801af78:	2300      	movs	r3, #0
 801af7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801af7e:	f7ff fe9f 	bl	801acc0 <__multadd>
 801af82:	4606      	mov	r6, r0
 801af84:	10ad      	asrs	r5, r5, #2
 801af86:	d03d      	beq.n	801b004 <__pow5mult+0xa0>
 801af88:	69fc      	ldr	r4, [r7, #28]
 801af8a:	b97c      	cbnz	r4, 801afac <__pow5mult+0x48>
 801af8c:	2010      	movs	r0, #16
 801af8e:	f7ff fd7f 	bl	801aa90 <malloc>
 801af92:	4602      	mov	r2, r0
 801af94:	61f8      	str	r0, [r7, #28]
 801af96:	b928      	cbnz	r0, 801afa4 <__pow5mult+0x40>
 801af98:	4b1d      	ldr	r3, [pc, #116]	@ (801b010 <__pow5mult+0xac>)
 801af9a:	481e      	ldr	r0, [pc, #120]	@ (801b014 <__pow5mult+0xb0>)
 801af9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801afa0:	f7fe ff2e 	bl	8019e00 <__assert_func>
 801afa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801afa8:	6004      	str	r4, [r0, #0]
 801afaa:	60c4      	str	r4, [r0, #12]
 801afac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801afb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801afb4:	b94c      	cbnz	r4, 801afca <__pow5mult+0x66>
 801afb6:	f240 2171 	movw	r1, #625	@ 0x271
 801afba:	4638      	mov	r0, r7
 801afbc:	f7ff ff12 	bl	801ade4 <__i2b>
 801afc0:	2300      	movs	r3, #0
 801afc2:	f8c8 0008 	str.w	r0, [r8, #8]
 801afc6:	4604      	mov	r4, r0
 801afc8:	6003      	str	r3, [r0, #0]
 801afca:	f04f 0900 	mov.w	r9, #0
 801afce:	07eb      	lsls	r3, r5, #31
 801afd0:	d50a      	bpl.n	801afe8 <__pow5mult+0x84>
 801afd2:	4631      	mov	r1, r6
 801afd4:	4622      	mov	r2, r4
 801afd6:	4638      	mov	r0, r7
 801afd8:	f7ff ff1a 	bl	801ae10 <__multiply>
 801afdc:	4631      	mov	r1, r6
 801afde:	4680      	mov	r8, r0
 801afe0:	4638      	mov	r0, r7
 801afe2:	f7ff fe4b 	bl	801ac7c <_Bfree>
 801afe6:	4646      	mov	r6, r8
 801afe8:	106d      	asrs	r5, r5, #1
 801afea:	d00b      	beq.n	801b004 <__pow5mult+0xa0>
 801afec:	6820      	ldr	r0, [r4, #0]
 801afee:	b938      	cbnz	r0, 801b000 <__pow5mult+0x9c>
 801aff0:	4622      	mov	r2, r4
 801aff2:	4621      	mov	r1, r4
 801aff4:	4638      	mov	r0, r7
 801aff6:	f7ff ff0b 	bl	801ae10 <__multiply>
 801affa:	6020      	str	r0, [r4, #0]
 801affc:	f8c0 9000 	str.w	r9, [r0]
 801b000:	4604      	mov	r4, r0
 801b002:	e7e4      	b.n	801afce <__pow5mult+0x6a>
 801b004:	4630      	mov	r0, r6
 801b006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b00a:	bf00      	nop
 801b00c:	0801f8ec 	.word	0x0801f8ec
 801b010:	0801f63a 	.word	0x0801f63a
 801b014:	0801f890 	.word	0x0801f890

0801b018 <__lshift>:
 801b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b01c:	460c      	mov	r4, r1
 801b01e:	6849      	ldr	r1, [r1, #4]
 801b020:	6923      	ldr	r3, [r4, #16]
 801b022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b026:	68a3      	ldr	r3, [r4, #8]
 801b028:	4607      	mov	r7, r0
 801b02a:	4691      	mov	r9, r2
 801b02c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b030:	f108 0601 	add.w	r6, r8, #1
 801b034:	42b3      	cmp	r3, r6
 801b036:	db0b      	blt.n	801b050 <__lshift+0x38>
 801b038:	4638      	mov	r0, r7
 801b03a:	f7ff fddf 	bl	801abfc <_Balloc>
 801b03e:	4605      	mov	r5, r0
 801b040:	b948      	cbnz	r0, 801b056 <__lshift+0x3e>
 801b042:	4602      	mov	r2, r0
 801b044:	4b28      	ldr	r3, [pc, #160]	@ (801b0e8 <__lshift+0xd0>)
 801b046:	4829      	ldr	r0, [pc, #164]	@ (801b0ec <__lshift+0xd4>)
 801b048:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801b04c:	f7fe fed8 	bl	8019e00 <__assert_func>
 801b050:	3101      	adds	r1, #1
 801b052:	005b      	lsls	r3, r3, #1
 801b054:	e7ee      	b.n	801b034 <__lshift+0x1c>
 801b056:	2300      	movs	r3, #0
 801b058:	f100 0114 	add.w	r1, r0, #20
 801b05c:	f100 0210 	add.w	r2, r0, #16
 801b060:	4618      	mov	r0, r3
 801b062:	4553      	cmp	r3, sl
 801b064:	db33      	blt.n	801b0ce <__lshift+0xb6>
 801b066:	6920      	ldr	r0, [r4, #16]
 801b068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b06c:	f104 0314 	add.w	r3, r4, #20
 801b070:	f019 091f 	ands.w	r9, r9, #31
 801b074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b078:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b07c:	d02b      	beq.n	801b0d6 <__lshift+0xbe>
 801b07e:	f1c9 0e20 	rsb	lr, r9, #32
 801b082:	468a      	mov	sl, r1
 801b084:	2200      	movs	r2, #0
 801b086:	6818      	ldr	r0, [r3, #0]
 801b088:	fa00 f009 	lsl.w	r0, r0, r9
 801b08c:	4310      	orrs	r0, r2
 801b08e:	f84a 0b04 	str.w	r0, [sl], #4
 801b092:	f853 2b04 	ldr.w	r2, [r3], #4
 801b096:	459c      	cmp	ip, r3
 801b098:	fa22 f20e 	lsr.w	r2, r2, lr
 801b09c:	d8f3      	bhi.n	801b086 <__lshift+0x6e>
 801b09e:	ebac 0304 	sub.w	r3, ip, r4
 801b0a2:	3b15      	subs	r3, #21
 801b0a4:	f023 0303 	bic.w	r3, r3, #3
 801b0a8:	3304      	adds	r3, #4
 801b0aa:	f104 0015 	add.w	r0, r4, #21
 801b0ae:	4584      	cmp	ip, r0
 801b0b0:	bf38      	it	cc
 801b0b2:	2304      	movcc	r3, #4
 801b0b4:	50ca      	str	r2, [r1, r3]
 801b0b6:	b10a      	cbz	r2, 801b0bc <__lshift+0xa4>
 801b0b8:	f108 0602 	add.w	r6, r8, #2
 801b0bc:	3e01      	subs	r6, #1
 801b0be:	4638      	mov	r0, r7
 801b0c0:	612e      	str	r6, [r5, #16]
 801b0c2:	4621      	mov	r1, r4
 801b0c4:	f7ff fdda 	bl	801ac7c <_Bfree>
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0ce:	f842 0f04 	str.w	r0, [r2, #4]!
 801b0d2:	3301      	adds	r3, #1
 801b0d4:	e7c5      	b.n	801b062 <__lshift+0x4a>
 801b0d6:	3904      	subs	r1, #4
 801b0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0dc:	f841 2f04 	str.w	r2, [r1, #4]!
 801b0e0:	459c      	cmp	ip, r3
 801b0e2:	d8f9      	bhi.n	801b0d8 <__lshift+0xc0>
 801b0e4:	e7ea      	b.n	801b0bc <__lshift+0xa4>
 801b0e6:	bf00      	nop
 801b0e8:	0801f87f 	.word	0x0801f87f
 801b0ec:	0801f890 	.word	0x0801f890

0801b0f0 <__mcmp>:
 801b0f0:	690a      	ldr	r2, [r1, #16]
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	6900      	ldr	r0, [r0, #16]
 801b0f6:	1a80      	subs	r0, r0, r2
 801b0f8:	b530      	push	{r4, r5, lr}
 801b0fa:	d10e      	bne.n	801b11a <__mcmp+0x2a>
 801b0fc:	3314      	adds	r3, #20
 801b0fe:	3114      	adds	r1, #20
 801b100:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801b104:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801b108:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b10c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b110:	4295      	cmp	r5, r2
 801b112:	d003      	beq.n	801b11c <__mcmp+0x2c>
 801b114:	d205      	bcs.n	801b122 <__mcmp+0x32>
 801b116:	f04f 30ff 	mov.w	r0, #4294967295
 801b11a:	bd30      	pop	{r4, r5, pc}
 801b11c:	42a3      	cmp	r3, r4
 801b11e:	d3f3      	bcc.n	801b108 <__mcmp+0x18>
 801b120:	e7fb      	b.n	801b11a <__mcmp+0x2a>
 801b122:	2001      	movs	r0, #1
 801b124:	e7f9      	b.n	801b11a <__mcmp+0x2a>
	...

0801b128 <__mdiff>:
 801b128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b12c:	4689      	mov	r9, r1
 801b12e:	4606      	mov	r6, r0
 801b130:	4611      	mov	r1, r2
 801b132:	4648      	mov	r0, r9
 801b134:	4614      	mov	r4, r2
 801b136:	f7ff ffdb 	bl	801b0f0 <__mcmp>
 801b13a:	1e05      	subs	r5, r0, #0
 801b13c:	d112      	bne.n	801b164 <__mdiff+0x3c>
 801b13e:	4629      	mov	r1, r5
 801b140:	4630      	mov	r0, r6
 801b142:	f7ff fd5b 	bl	801abfc <_Balloc>
 801b146:	4602      	mov	r2, r0
 801b148:	b928      	cbnz	r0, 801b156 <__mdiff+0x2e>
 801b14a:	4b3f      	ldr	r3, [pc, #252]	@ (801b248 <__mdiff+0x120>)
 801b14c:	f240 2137 	movw	r1, #567	@ 0x237
 801b150:	483e      	ldr	r0, [pc, #248]	@ (801b24c <__mdiff+0x124>)
 801b152:	f7fe fe55 	bl	8019e00 <__assert_func>
 801b156:	2301      	movs	r3, #1
 801b158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b15c:	4610      	mov	r0, r2
 801b15e:	b003      	add	sp, #12
 801b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b164:	bfbc      	itt	lt
 801b166:	464b      	movlt	r3, r9
 801b168:	46a1      	movlt	r9, r4
 801b16a:	4630      	mov	r0, r6
 801b16c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801b170:	bfba      	itte	lt
 801b172:	461c      	movlt	r4, r3
 801b174:	2501      	movlt	r5, #1
 801b176:	2500      	movge	r5, #0
 801b178:	f7ff fd40 	bl	801abfc <_Balloc>
 801b17c:	4602      	mov	r2, r0
 801b17e:	b918      	cbnz	r0, 801b188 <__mdiff+0x60>
 801b180:	4b31      	ldr	r3, [pc, #196]	@ (801b248 <__mdiff+0x120>)
 801b182:	f240 2145 	movw	r1, #581	@ 0x245
 801b186:	e7e3      	b.n	801b150 <__mdiff+0x28>
 801b188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801b18c:	6926      	ldr	r6, [r4, #16]
 801b18e:	60c5      	str	r5, [r0, #12]
 801b190:	f109 0310 	add.w	r3, r9, #16
 801b194:	f109 0514 	add.w	r5, r9, #20
 801b198:	f104 0e14 	add.w	lr, r4, #20
 801b19c:	f100 0b14 	add.w	fp, r0, #20
 801b1a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801b1a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801b1a8:	9301      	str	r3, [sp, #4]
 801b1aa:	46d9      	mov	r9, fp
 801b1ac:	f04f 0c00 	mov.w	ip, #0
 801b1b0:	9b01      	ldr	r3, [sp, #4]
 801b1b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801b1b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801b1ba:	9301      	str	r3, [sp, #4]
 801b1bc:	fa1f f38a 	uxth.w	r3, sl
 801b1c0:	4619      	mov	r1, r3
 801b1c2:	b283      	uxth	r3, r0
 801b1c4:	1acb      	subs	r3, r1, r3
 801b1c6:	0c00      	lsrs	r0, r0, #16
 801b1c8:	4463      	add	r3, ip
 801b1ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801b1ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801b1d8:	4576      	cmp	r6, lr
 801b1da:	f849 3b04 	str.w	r3, [r9], #4
 801b1de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b1e2:	d8e5      	bhi.n	801b1b0 <__mdiff+0x88>
 801b1e4:	1b33      	subs	r3, r6, r4
 801b1e6:	3b15      	subs	r3, #21
 801b1e8:	f023 0303 	bic.w	r3, r3, #3
 801b1ec:	3415      	adds	r4, #21
 801b1ee:	3304      	adds	r3, #4
 801b1f0:	42a6      	cmp	r6, r4
 801b1f2:	bf38      	it	cc
 801b1f4:	2304      	movcc	r3, #4
 801b1f6:	441d      	add	r5, r3
 801b1f8:	445b      	add	r3, fp
 801b1fa:	461e      	mov	r6, r3
 801b1fc:	462c      	mov	r4, r5
 801b1fe:	4544      	cmp	r4, r8
 801b200:	d30e      	bcc.n	801b220 <__mdiff+0xf8>
 801b202:	f108 0103 	add.w	r1, r8, #3
 801b206:	1b49      	subs	r1, r1, r5
 801b208:	f021 0103 	bic.w	r1, r1, #3
 801b20c:	3d03      	subs	r5, #3
 801b20e:	45a8      	cmp	r8, r5
 801b210:	bf38      	it	cc
 801b212:	2100      	movcc	r1, #0
 801b214:	440b      	add	r3, r1
 801b216:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801b21a:	b191      	cbz	r1, 801b242 <__mdiff+0x11a>
 801b21c:	6117      	str	r7, [r2, #16]
 801b21e:	e79d      	b.n	801b15c <__mdiff+0x34>
 801b220:	f854 1b04 	ldr.w	r1, [r4], #4
 801b224:	46e6      	mov	lr, ip
 801b226:	0c08      	lsrs	r0, r1, #16
 801b228:	fa1c fc81 	uxtah	ip, ip, r1
 801b22c:	4471      	add	r1, lr
 801b22e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801b232:	b289      	uxth	r1, r1
 801b234:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801b238:	f846 1b04 	str.w	r1, [r6], #4
 801b23c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801b240:	e7dd      	b.n	801b1fe <__mdiff+0xd6>
 801b242:	3f01      	subs	r7, #1
 801b244:	e7e7      	b.n	801b216 <__mdiff+0xee>
 801b246:	bf00      	nop
 801b248:	0801f87f 	.word	0x0801f87f
 801b24c:	0801f890 	.word	0x0801f890

0801b250 <__d2b>:
 801b250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b254:	460f      	mov	r7, r1
 801b256:	2101      	movs	r1, #1
 801b258:	ec59 8b10 	vmov	r8, r9, d0
 801b25c:	4616      	mov	r6, r2
 801b25e:	f7ff fccd 	bl	801abfc <_Balloc>
 801b262:	4604      	mov	r4, r0
 801b264:	b930      	cbnz	r0, 801b274 <__d2b+0x24>
 801b266:	4602      	mov	r2, r0
 801b268:	4b23      	ldr	r3, [pc, #140]	@ (801b2f8 <__d2b+0xa8>)
 801b26a:	4824      	ldr	r0, [pc, #144]	@ (801b2fc <__d2b+0xac>)
 801b26c:	f240 310f 	movw	r1, #783	@ 0x30f
 801b270:	f7fe fdc6 	bl	8019e00 <__assert_func>
 801b274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b27c:	b10d      	cbz	r5, 801b282 <__d2b+0x32>
 801b27e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b282:	9301      	str	r3, [sp, #4]
 801b284:	f1b8 0300 	subs.w	r3, r8, #0
 801b288:	d023      	beq.n	801b2d2 <__d2b+0x82>
 801b28a:	4668      	mov	r0, sp
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	f7ff fd7c 	bl	801ad8a <__lo0bits>
 801b292:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b296:	b1d0      	cbz	r0, 801b2ce <__d2b+0x7e>
 801b298:	f1c0 0320 	rsb	r3, r0, #32
 801b29c:	fa02 f303 	lsl.w	r3, r2, r3
 801b2a0:	430b      	orrs	r3, r1
 801b2a2:	40c2      	lsrs	r2, r0
 801b2a4:	6163      	str	r3, [r4, #20]
 801b2a6:	9201      	str	r2, [sp, #4]
 801b2a8:	9b01      	ldr	r3, [sp, #4]
 801b2aa:	61a3      	str	r3, [r4, #24]
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	bf0c      	ite	eq
 801b2b0:	2201      	moveq	r2, #1
 801b2b2:	2202      	movne	r2, #2
 801b2b4:	6122      	str	r2, [r4, #16]
 801b2b6:	b1a5      	cbz	r5, 801b2e2 <__d2b+0x92>
 801b2b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801b2bc:	4405      	add	r5, r0
 801b2be:	603d      	str	r5, [r7, #0]
 801b2c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801b2c4:	6030      	str	r0, [r6, #0]
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	b003      	add	sp, #12
 801b2ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2ce:	6161      	str	r1, [r4, #20]
 801b2d0:	e7ea      	b.n	801b2a8 <__d2b+0x58>
 801b2d2:	a801      	add	r0, sp, #4
 801b2d4:	f7ff fd59 	bl	801ad8a <__lo0bits>
 801b2d8:	9b01      	ldr	r3, [sp, #4]
 801b2da:	6163      	str	r3, [r4, #20]
 801b2dc:	3020      	adds	r0, #32
 801b2de:	2201      	movs	r2, #1
 801b2e0:	e7e8      	b.n	801b2b4 <__d2b+0x64>
 801b2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b2e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801b2ea:	6038      	str	r0, [r7, #0]
 801b2ec:	6918      	ldr	r0, [r3, #16]
 801b2ee:	f7ff fd2d 	bl	801ad4c <__hi0bits>
 801b2f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b2f6:	e7e5      	b.n	801b2c4 <__d2b+0x74>
 801b2f8:	0801f87f 	.word	0x0801f87f
 801b2fc:	0801f890 	.word	0x0801f890

0801b300 <__ssputs_r>:
 801b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b304:	688e      	ldr	r6, [r1, #8]
 801b306:	461f      	mov	r7, r3
 801b308:	42be      	cmp	r6, r7
 801b30a:	680b      	ldr	r3, [r1, #0]
 801b30c:	4682      	mov	sl, r0
 801b30e:	460c      	mov	r4, r1
 801b310:	4690      	mov	r8, r2
 801b312:	d82d      	bhi.n	801b370 <__ssputs_r+0x70>
 801b314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b318:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b31c:	d026      	beq.n	801b36c <__ssputs_r+0x6c>
 801b31e:	6965      	ldr	r5, [r4, #20]
 801b320:	6909      	ldr	r1, [r1, #16]
 801b322:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b326:	eba3 0901 	sub.w	r9, r3, r1
 801b32a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b32e:	1c7b      	adds	r3, r7, #1
 801b330:	444b      	add	r3, r9
 801b332:	106d      	asrs	r5, r5, #1
 801b334:	429d      	cmp	r5, r3
 801b336:	bf38      	it	cc
 801b338:	461d      	movcc	r5, r3
 801b33a:	0553      	lsls	r3, r2, #21
 801b33c:	d527      	bpl.n	801b38e <__ssputs_r+0x8e>
 801b33e:	4629      	mov	r1, r5
 801b340:	f7ff fbd0 	bl	801aae4 <_malloc_r>
 801b344:	4606      	mov	r6, r0
 801b346:	b360      	cbz	r0, 801b3a2 <__ssputs_r+0xa2>
 801b348:	6921      	ldr	r1, [r4, #16]
 801b34a:	464a      	mov	r2, r9
 801b34c:	f7fe fd49 	bl	8019de2 <memcpy>
 801b350:	89a3      	ldrh	r3, [r4, #12]
 801b352:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b35a:	81a3      	strh	r3, [r4, #12]
 801b35c:	6126      	str	r6, [r4, #16]
 801b35e:	6165      	str	r5, [r4, #20]
 801b360:	444e      	add	r6, r9
 801b362:	eba5 0509 	sub.w	r5, r5, r9
 801b366:	6026      	str	r6, [r4, #0]
 801b368:	60a5      	str	r5, [r4, #8]
 801b36a:	463e      	mov	r6, r7
 801b36c:	42be      	cmp	r6, r7
 801b36e:	d900      	bls.n	801b372 <__ssputs_r+0x72>
 801b370:	463e      	mov	r6, r7
 801b372:	6820      	ldr	r0, [r4, #0]
 801b374:	4632      	mov	r2, r6
 801b376:	4641      	mov	r1, r8
 801b378:	f7fe fc60 	bl	8019c3c <memmove>
 801b37c:	68a3      	ldr	r3, [r4, #8]
 801b37e:	1b9b      	subs	r3, r3, r6
 801b380:	60a3      	str	r3, [r4, #8]
 801b382:	6823      	ldr	r3, [r4, #0]
 801b384:	4433      	add	r3, r6
 801b386:	6023      	str	r3, [r4, #0]
 801b388:	2000      	movs	r0, #0
 801b38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b38e:	462a      	mov	r2, r5
 801b390:	f000 fbcf 	bl	801bb32 <_realloc_r>
 801b394:	4606      	mov	r6, r0
 801b396:	2800      	cmp	r0, #0
 801b398:	d1e0      	bne.n	801b35c <__ssputs_r+0x5c>
 801b39a:	6921      	ldr	r1, [r4, #16]
 801b39c:	4650      	mov	r0, sl
 801b39e:	f7ff fb2d 	bl	801a9fc <_free_r>
 801b3a2:	230c      	movs	r3, #12
 801b3a4:	f8ca 3000 	str.w	r3, [sl]
 801b3a8:	89a3      	ldrh	r3, [r4, #12]
 801b3aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b3ae:	81a3      	strh	r3, [r4, #12]
 801b3b0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3b4:	e7e9      	b.n	801b38a <__ssputs_r+0x8a>
	...

0801b3b8 <_svfiprintf_r>:
 801b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3bc:	4698      	mov	r8, r3
 801b3be:	898b      	ldrh	r3, [r1, #12]
 801b3c0:	061b      	lsls	r3, r3, #24
 801b3c2:	b09d      	sub	sp, #116	@ 0x74
 801b3c4:	4607      	mov	r7, r0
 801b3c6:	460d      	mov	r5, r1
 801b3c8:	4614      	mov	r4, r2
 801b3ca:	d510      	bpl.n	801b3ee <_svfiprintf_r+0x36>
 801b3cc:	690b      	ldr	r3, [r1, #16]
 801b3ce:	b973      	cbnz	r3, 801b3ee <_svfiprintf_r+0x36>
 801b3d0:	2140      	movs	r1, #64	@ 0x40
 801b3d2:	f7ff fb87 	bl	801aae4 <_malloc_r>
 801b3d6:	6028      	str	r0, [r5, #0]
 801b3d8:	6128      	str	r0, [r5, #16]
 801b3da:	b930      	cbnz	r0, 801b3ea <_svfiprintf_r+0x32>
 801b3dc:	230c      	movs	r3, #12
 801b3de:	603b      	str	r3, [r7, #0]
 801b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e4:	b01d      	add	sp, #116	@ 0x74
 801b3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3ea:	2340      	movs	r3, #64	@ 0x40
 801b3ec:	616b      	str	r3, [r5, #20]
 801b3ee:	2300      	movs	r3, #0
 801b3f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801b3f2:	2320      	movs	r3, #32
 801b3f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b3f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3fc:	2330      	movs	r3, #48	@ 0x30
 801b3fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801b59c <_svfiprintf_r+0x1e4>
 801b402:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b406:	f04f 0901 	mov.w	r9, #1
 801b40a:	4623      	mov	r3, r4
 801b40c:	469a      	mov	sl, r3
 801b40e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b412:	b10a      	cbz	r2, 801b418 <_svfiprintf_r+0x60>
 801b414:	2a25      	cmp	r2, #37	@ 0x25
 801b416:	d1f9      	bne.n	801b40c <_svfiprintf_r+0x54>
 801b418:	ebba 0b04 	subs.w	fp, sl, r4
 801b41c:	d00b      	beq.n	801b436 <_svfiprintf_r+0x7e>
 801b41e:	465b      	mov	r3, fp
 801b420:	4622      	mov	r2, r4
 801b422:	4629      	mov	r1, r5
 801b424:	4638      	mov	r0, r7
 801b426:	f7ff ff6b 	bl	801b300 <__ssputs_r>
 801b42a:	3001      	adds	r0, #1
 801b42c:	f000 80a7 	beq.w	801b57e <_svfiprintf_r+0x1c6>
 801b430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b432:	445a      	add	r2, fp
 801b434:	9209      	str	r2, [sp, #36]	@ 0x24
 801b436:	f89a 3000 	ldrb.w	r3, [sl]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	f000 809f 	beq.w	801b57e <_svfiprintf_r+0x1c6>
 801b440:	2300      	movs	r3, #0
 801b442:	f04f 32ff 	mov.w	r2, #4294967295
 801b446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b44a:	f10a 0a01 	add.w	sl, sl, #1
 801b44e:	9304      	str	r3, [sp, #16]
 801b450:	9307      	str	r3, [sp, #28]
 801b452:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b456:	931a      	str	r3, [sp, #104]	@ 0x68
 801b458:	4654      	mov	r4, sl
 801b45a:	2205      	movs	r2, #5
 801b45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b460:	484e      	ldr	r0, [pc, #312]	@ (801b59c <_svfiprintf_r+0x1e4>)
 801b462:	f7e4 feed 	bl	8000240 <memchr>
 801b466:	9a04      	ldr	r2, [sp, #16]
 801b468:	b9d8      	cbnz	r0, 801b4a2 <_svfiprintf_r+0xea>
 801b46a:	06d0      	lsls	r0, r2, #27
 801b46c:	bf44      	itt	mi
 801b46e:	2320      	movmi	r3, #32
 801b470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b474:	0711      	lsls	r1, r2, #28
 801b476:	bf44      	itt	mi
 801b478:	232b      	movmi	r3, #43	@ 0x2b
 801b47a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b47e:	f89a 3000 	ldrb.w	r3, [sl]
 801b482:	2b2a      	cmp	r3, #42	@ 0x2a
 801b484:	d015      	beq.n	801b4b2 <_svfiprintf_r+0xfa>
 801b486:	9a07      	ldr	r2, [sp, #28]
 801b488:	4654      	mov	r4, sl
 801b48a:	2000      	movs	r0, #0
 801b48c:	f04f 0c0a 	mov.w	ip, #10
 801b490:	4621      	mov	r1, r4
 801b492:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b496:	3b30      	subs	r3, #48	@ 0x30
 801b498:	2b09      	cmp	r3, #9
 801b49a:	d94b      	bls.n	801b534 <_svfiprintf_r+0x17c>
 801b49c:	b1b0      	cbz	r0, 801b4cc <_svfiprintf_r+0x114>
 801b49e:	9207      	str	r2, [sp, #28]
 801b4a0:	e014      	b.n	801b4cc <_svfiprintf_r+0x114>
 801b4a2:	eba0 0308 	sub.w	r3, r0, r8
 801b4a6:	fa09 f303 	lsl.w	r3, r9, r3
 801b4aa:	4313      	orrs	r3, r2
 801b4ac:	9304      	str	r3, [sp, #16]
 801b4ae:	46a2      	mov	sl, r4
 801b4b0:	e7d2      	b.n	801b458 <_svfiprintf_r+0xa0>
 801b4b2:	9b03      	ldr	r3, [sp, #12]
 801b4b4:	1d19      	adds	r1, r3, #4
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	9103      	str	r1, [sp, #12]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	bfbb      	ittet	lt
 801b4be:	425b      	neglt	r3, r3
 801b4c0:	f042 0202 	orrlt.w	r2, r2, #2
 801b4c4:	9307      	strge	r3, [sp, #28]
 801b4c6:	9307      	strlt	r3, [sp, #28]
 801b4c8:	bfb8      	it	lt
 801b4ca:	9204      	strlt	r2, [sp, #16]
 801b4cc:	7823      	ldrb	r3, [r4, #0]
 801b4ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801b4d0:	d10a      	bne.n	801b4e8 <_svfiprintf_r+0x130>
 801b4d2:	7863      	ldrb	r3, [r4, #1]
 801b4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b4d6:	d132      	bne.n	801b53e <_svfiprintf_r+0x186>
 801b4d8:	9b03      	ldr	r3, [sp, #12]
 801b4da:	1d1a      	adds	r2, r3, #4
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	9203      	str	r2, [sp, #12]
 801b4e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b4e4:	3402      	adds	r4, #2
 801b4e6:	9305      	str	r3, [sp, #20]
 801b4e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801b5ac <_svfiprintf_r+0x1f4>
 801b4ec:	7821      	ldrb	r1, [r4, #0]
 801b4ee:	2203      	movs	r2, #3
 801b4f0:	4650      	mov	r0, sl
 801b4f2:	f7e4 fea5 	bl	8000240 <memchr>
 801b4f6:	b138      	cbz	r0, 801b508 <_svfiprintf_r+0x150>
 801b4f8:	9b04      	ldr	r3, [sp, #16]
 801b4fa:	eba0 000a 	sub.w	r0, r0, sl
 801b4fe:	2240      	movs	r2, #64	@ 0x40
 801b500:	4082      	lsls	r2, r0
 801b502:	4313      	orrs	r3, r2
 801b504:	3401      	adds	r4, #1
 801b506:	9304      	str	r3, [sp, #16]
 801b508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b50c:	4824      	ldr	r0, [pc, #144]	@ (801b5a0 <_svfiprintf_r+0x1e8>)
 801b50e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b512:	2206      	movs	r2, #6
 801b514:	f7e4 fe94 	bl	8000240 <memchr>
 801b518:	2800      	cmp	r0, #0
 801b51a:	d036      	beq.n	801b58a <_svfiprintf_r+0x1d2>
 801b51c:	4b21      	ldr	r3, [pc, #132]	@ (801b5a4 <_svfiprintf_r+0x1ec>)
 801b51e:	bb1b      	cbnz	r3, 801b568 <_svfiprintf_r+0x1b0>
 801b520:	9b03      	ldr	r3, [sp, #12]
 801b522:	3307      	adds	r3, #7
 801b524:	f023 0307 	bic.w	r3, r3, #7
 801b528:	3308      	adds	r3, #8
 801b52a:	9303      	str	r3, [sp, #12]
 801b52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b52e:	4433      	add	r3, r6
 801b530:	9309      	str	r3, [sp, #36]	@ 0x24
 801b532:	e76a      	b.n	801b40a <_svfiprintf_r+0x52>
 801b534:	fb0c 3202 	mla	r2, ip, r2, r3
 801b538:	460c      	mov	r4, r1
 801b53a:	2001      	movs	r0, #1
 801b53c:	e7a8      	b.n	801b490 <_svfiprintf_r+0xd8>
 801b53e:	2300      	movs	r3, #0
 801b540:	3401      	adds	r4, #1
 801b542:	9305      	str	r3, [sp, #20]
 801b544:	4619      	mov	r1, r3
 801b546:	f04f 0c0a 	mov.w	ip, #10
 801b54a:	4620      	mov	r0, r4
 801b54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b550:	3a30      	subs	r2, #48	@ 0x30
 801b552:	2a09      	cmp	r2, #9
 801b554:	d903      	bls.n	801b55e <_svfiprintf_r+0x1a6>
 801b556:	2b00      	cmp	r3, #0
 801b558:	d0c6      	beq.n	801b4e8 <_svfiprintf_r+0x130>
 801b55a:	9105      	str	r1, [sp, #20]
 801b55c:	e7c4      	b.n	801b4e8 <_svfiprintf_r+0x130>
 801b55e:	fb0c 2101 	mla	r1, ip, r1, r2
 801b562:	4604      	mov	r4, r0
 801b564:	2301      	movs	r3, #1
 801b566:	e7f0      	b.n	801b54a <_svfiprintf_r+0x192>
 801b568:	ab03      	add	r3, sp, #12
 801b56a:	9300      	str	r3, [sp, #0]
 801b56c:	462a      	mov	r2, r5
 801b56e:	4b0e      	ldr	r3, [pc, #56]	@ (801b5a8 <_svfiprintf_r+0x1f0>)
 801b570:	a904      	add	r1, sp, #16
 801b572:	4638      	mov	r0, r7
 801b574:	f7fd fd4c 	bl	8019010 <_printf_float>
 801b578:	1c42      	adds	r2, r0, #1
 801b57a:	4606      	mov	r6, r0
 801b57c:	d1d6      	bne.n	801b52c <_svfiprintf_r+0x174>
 801b57e:	89ab      	ldrh	r3, [r5, #12]
 801b580:	065b      	lsls	r3, r3, #25
 801b582:	f53f af2d 	bmi.w	801b3e0 <_svfiprintf_r+0x28>
 801b586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b588:	e72c      	b.n	801b3e4 <_svfiprintf_r+0x2c>
 801b58a:	ab03      	add	r3, sp, #12
 801b58c:	9300      	str	r3, [sp, #0]
 801b58e:	462a      	mov	r2, r5
 801b590:	4b05      	ldr	r3, [pc, #20]	@ (801b5a8 <_svfiprintf_r+0x1f0>)
 801b592:	a904      	add	r1, sp, #16
 801b594:	4638      	mov	r0, r7
 801b596:	f7fd ffc3 	bl	8019520 <_printf_i>
 801b59a:	e7ed      	b.n	801b578 <_svfiprintf_r+0x1c0>
 801b59c:	0801f9e8 	.word	0x0801f9e8
 801b5a0:	0801f9f2 	.word	0x0801f9f2
 801b5a4:	08019011 	.word	0x08019011
 801b5a8:	0801b301 	.word	0x0801b301
 801b5ac:	0801f9ee 	.word	0x0801f9ee

0801b5b0 <__sfputc_r>:
 801b5b0:	6893      	ldr	r3, [r2, #8]
 801b5b2:	3b01      	subs	r3, #1
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	b410      	push	{r4}
 801b5b8:	6093      	str	r3, [r2, #8]
 801b5ba:	da08      	bge.n	801b5ce <__sfputc_r+0x1e>
 801b5bc:	6994      	ldr	r4, [r2, #24]
 801b5be:	42a3      	cmp	r3, r4
 801b5c0:	db01      	blt.n	801b5c6 <__sfputc_r+0x16>
 801b5c2:	290a      	cmp	r1, #10
 801b5c4:	d103      	bne.n	801b5ce <__sfputc_r+0x1e>
 801b5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5ca:	f7fe ba92 	b.w	8019af2 <__swbuf_r>
 801b5ce:	6813      	ldr	r3, [r2, #0]
 801b5d0:	1c58      	adds	r0, r3, #1
 801b5d2:	6010      	str	r0, [r2, #0]
 801b5d4:	7019      	strb	r1, [r3, #0]
 801b5d6:	4608      	mov	r0, r1
 801b5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5dc:	4770      	bx	lr

0801b5de <__sfputs_r>:
 801b5de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5e0:	4606      	mov	r6, r0
 801b5e2:	460f      	mov	r7, r1
 801b5e4:	4614      	mov	r4, r2
 801b5e6:	18d5      	adds	r5, r2, r3
 801b5e8:	42ac      	cmp	r4, r5
 801b5ea:	d101      	bne.n	801b5f0 <__sfputs_r+0x12>
 801b5ec:	2000      	movs	r0, #0
 801b5ee:	e007      	b.n	801b600 <__sfputs_r+0x22>
 801b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5f4:	463a      	mov	r2, r7
 801b5f6:	4630      	mov	r0, r6
 801b5f8:	f7ff ffda 	bl	801b5b0 <__sfputc_r>
 801b5fc:	1c43      	adds	r3, r0, #1
 801b5fe:	d1f3      	bne.n	801b5e8 <__sfputs_r+0xa>
 801b600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b604 <_vfiprintf_r>:
 801b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b608:	460d      	mov	r5, r1
 801b60a:	b09d      	sub	sp, #116	@ 0x74
 801b60c:	4614      	mov	r4, r2
 801b60e:	4698      	mov	r8, r3
 801b610:	4606      	mov	r6, r0
 801b612:	b118      	cbz	r0, 801b61c <_vfiprintf_r+0x18>
 801b614:	6a03      	ldr	r3, [r0, #32]
 801b616:	b90b      	cbnz	r3, 801b61c <_vfiprintf_r+0x18>
 801b618:	f7fe f92e 	bl	8019878 <__sinit>
 801b61c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b61e:	07d9      	lsls	r1, r3, #31
 801b620:	d405      	bmi.n	801b62e <_vfiprintf_r+0x2a>
 801b622:	89ab      	ldrh	r3, [r5, #12]
 801b624:	059a      	lsls	r2, r3, #22
 801b626:	d402      	bmi.n	801b62e <_vfiprintf_r+0x2a>
 801b628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b62a:	f7fe fbd0 	bl	8019dce <__retarget_lock_acquire_recursive>
 801b62e:	89ab      	ldrh	r3, [r5, #12]
 801b630:	071b      	lsls	r3, r3, #28
 801b632:	d501      	bpl.n	801b638 <_vfiprintf_r+0x34>
 801b634:	692b      	ldr	r3, [r5, #16]
 801b636:	b99b      	cbnz	r3, 801b660 <_vfiprintf_r+0x5c>
 801b638:	4629      	mov	r1, r5
 801b63a:	4630      	mov	r0, r6
 801b63c:	f7fe fa98 	bl	8019b70 <__swsetup_r>
 801b640:	b170      	cbz	r0, 801b660 <_vfiprintf_r+0x5c>
 801b642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b644:	07dc      	lsls	r4, r3, #31
 801b646:	d504      	bpl.n	801b652 <_vfiprintf_r+0x4e>
 801b648:	f04f 30ff 	mov.w	r0, #4294967295
 801b64c:	b01d      	add	sp, #116	@ 0x74
 801b64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b652:	89ab      	ldrh	r3, [r5, #12]
 801b654:	0598      	lsls	r0, r3, #22
 801b656:	d4f7      	bmi.n	801b648 <_vfiprintf_r+0x44>
 801b658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b65a:	f7fe fbb9 	bl	8019dd0 <__retarget_lock_release_recursive>
 801b65e:	e7f3      	b.n	801b648 <_vfiprintf_r+0x44>
 801b660:	2300      	movs	r3, #0
 801b662:	9309      	str	r3, [sp, #36]	@ 0x24
 801b664:	2320      	movs	r3, #32
 801b666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b66a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b66e:	2330      	movs	r3, #48	@ 0x30
 801b670:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801b820 <_vfiprintf_r+0x21c>
 801b674:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b678:	f04f 0901 	mov.w	r9, #1
 801b67c:	4623      	mov	r3, r4
 801b67e:	469a      	mov	sl, r3
 801b680:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b684:	b10a      	cbz	r2, 801b68a <_vfiprintf_r+0x86>
 801b686:	2a25      	cmp	r2, #37	@ 0x25
 801b688:	d1f9      	bne.n	801b67e <_vfiprintf_r+0x7a>
 801b68a:	ebba 0b04 	subs.w	fp, sl, r4
 801b68e:	d00b      	beq.n	801b6a8 <_vfiprintf_r+0xa4>
 801b690:	465b      	mov	r3, fp
 801b692:	4622      	mov	r2, r4
 801b694:	4629      	mov	r1, r5
 801b696:	4630      	mov	r0, r6
 801b698:	f7ff ffa1 	bl	801b5de <__sfputs_r>
 801b69c:	3001      	adds	r0, #1
 801b69e:	f000 80a7 	beq.w	801b7f0 <_vfiprintf_r+0x1ec>
 801b6a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b6a4:	445a      	add	r2, fp
 801b6a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801b6a8:	f89a 3000 	ldrb.w	r3, [sl]
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	f000 809f 	beq.w	801b7f0 <_vfiprintf_r+0x1ec>
 801b6b2:	2300      	movs	r3, #0
 801b6b4:	f04f 32ff 	mov.w	r2, #4294967295
 801b6b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6bc:	f10a 0a01 	add.w	sl, sl, #1
 801b6c0:	9304      	str	r3, [sp, #16]
 801b6c2:	9307      	str	r3, [sp, #28]
 801b6c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b6c8:	931a      	str	r3, [sp, #104]	@ 0x68
 801b6ca:	4654      	mov	r4, sl
 801b6cc:	2205      	movs	r2, #5
 801b6ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6d2:	4853      	ldr	r0, [pc, #332]	@ (801b820 <_vfiprintf_r+0x21c>)
 801b6d4:	f7e4 fdb4 	bl	8000240 <memchr>
 801b6d8:	9a04      	ldr	r2, [sp, #16]
 801b6da:	b9d8      	cbnz	r0, 801b714 <_vfiprintf_r+0x110>
 801b6dc:	06d1      	lsls	r1, r2, #27
 801b6de:	bf44      	itt	mi
 801b6e0:	2320      	movmi	r3, #32
 801b6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b6e6:	0713      	lsls	r3, r2, #28
 801b6e8:	bf44      	itt	mi
 801b6ea:	232b      	movmi	r3, #43	@ 0x2b
 801b6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b6f0:	f89a 3000 	ldrb.w	r3, [sl]
 801b6f4:	2b2a      	cmp	r3, #42	@ 0x2a
 801b6f6:	d015      	beq.n	801b724 <_vfiprintf_r+0x120>
 801b6f8:	9a07      	ldr	r2, [sp, #28]
 801b6fa:	4654      	mov	r4, sl
 801b6fc:	2000      	movs	r0, #0
 801b6fe:	f04f 0c0a 	mov.w	ip, #10
 801b702:	4621      	mov	r1, r4
 801b704:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b708:	3b30      	subs	r3, #48	@ 0x30
 801b70a:	2b09      	cmp	r3, #9
 801b70c:	d94b      	bls.n	801b7a6 <_vfiprintf_r+0x1a2>
 801b70e:	b1b0      	cbz	r0, 801b73e <_vfiprintf_r+0x13a>
 801b710:	9207      	str	r2, [sp, #28]
 801b712:	e014      	b.n	801b73e <_vfiprintf_r+0x13a>
 801b714:	eba0 0308 	sub.w	r3, r0, r8
 801b718:	fa09 f303 	lsl.w	r3, r9, r3
 801b71c:	4313      	orrs	r3, r2
 801b71e:	9304      	str	r3, [sp, #16]
 801b720:	46a2      	mov	sl, r4
 801b722:	e7d2      	b.n	801b6ca <_vfiprintf_r+0xc6>
 801b724:	9b03      	ldr	r3, [sp, #12]
 801b726:	1d19      	adds	r1, r3, #4
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	9103      	str	r1, [sp, #12]
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	bfbb      	ittet	lt
 801b730:	425b      	neglt	r3, r3
 801b732:	f042 0202 	orrlt.w	r2, r2, #2
 801b736:	9307      	strge	r3, [sp, #28]
 801b738:	9307      	strlt	r3, [sp, #28]
 801b73a:	bfb8      	it	lt
 801b73c:	9204      	strlt	r2, [sp, #16]
 801b73e:	7823      	ldrb	r3, [r4, #0]
 801b740:	2b2e      	cmp	r3, #46	@ 0x2e
 801b742:	d10a      	bne.n	801b75a <_vfiprintf_r+0x156>
 801b744:	7863      	ldrb	r3, [r4, #1]
 801b746:	2b2a      	cmp	r3, #42	@ 0x2a
 801b748:	d132      	bne.n	801b7b0 <_vfiprintf_r+0x1ac>
 801b74a:	9b03      	ldr	r3, [sp, #12]
 801b74c:	1d1a      	adds	r2, r3, #4
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	9203      	str	r2, [sp, #12]
 801b752:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b756:	3402      	adds	r4, #2
 801b758:	9305      	str	r3, [sp, #20]
 801b75a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801b830 <_vfiprintf_r+0x22c>
 801b75e:	7821      	ldrb	r1, [r4, #0]
 801b760:	2203      	movs	r2, #3
 801b762:	4650      	mov	r0, sl
 801b764:	f7e4 fd6c 	bl	8000240 <memchr>
 801b768:	b138      	cbz	r0, 801b77a <_vfiprintf_r+0x176>
 801b76a:	9b04      	ldr	r3, [sp, #16]
 801b76c:	eba0 000a 	sub.w	r0, r0, sl
 801b770:	2240      	movs	r2, #64	@ 0x40
 801b772:	4082      	lsls	r2, r0
 801b774:	4313      	orrs	r3, r2
 801b776:	3401      	adds	r4, #1
 801b778:	9304      	str	r3, [sp, #16]
 801b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b77e:	4829      	ldr	r0, [pc, #164]	@ (801b824 <_vfiprintf_r+0x220>)
 801b780:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b784:	2206      	movs	r2, #6
 801b786:	f7e4 fd5b 	bl	8000240 <memchr>
 801b78a:	2800      	cmp	r0, #0
 801b78c:	d03f      	beq.n	801b80e <_vfiprintf_r+0x20a>
 801b78e:	4b26      	ldr	r3, [pc, #152]	@ (801b828 <_vfiprintf_r+0x224>)
 801b790:	bb1b      	cbnz	r3, 801b7da <_vfiprintf_r+0x1d6>
 801b792:	9b03      	ldr	r3, [sp, #12]
 801b794:	3307      	adds	r3, #7
 801b796:	f023 0307 	bic.w	r3, r3, #7
 801b79a:	3308      	adds	r3, #8
 801b79c:	9303      	str	r3, [sp, #12]
 801b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7a0:	443b      	add	r3, r7
 801b7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801b7a4:	e76a      	b.n	801b67c <_vfiprintf_r+0x78>
 801b7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7aa:	460c      	mov	r4, r1
 801b7ac:	2001      	movs	r0, #1
 801b7ae:	e7a8      	b.n	801b702 <_vfiprintf_r+0xfe>
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	3401      	adds	r4, #1
 801b7b4:	9305      	str	r3, [sp, #20]
 801b7b6:	4619      	mov	r1, r3
 801b7b8:	f04f 0c0a 	mov.w	ip, #10
 801b7bc:	4620      	mov	r0, r4
 801b7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7c2:	3a30      	subs	r2, #48	@ 0x30
 801b7c4:	2a09      	cmp	r2, #9
 801b7c6:	d903      	bls.n	801b7d0 <_vfiprintf_r+0x1cc>
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d0c6      	beq.n	801b75a <_vfiprintf_r+0x156>
 801b7cc:	9105      	str	r1, [sp, #20]
 801b7ce:	e7c4      	b.n	801b75a <_vfiprintf_r+0x156>
 801b7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b7d4:	4604      	mov	r4, r0
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	e7f0      	b.n	801b7bc <_vfiprintf_r+0x1b8>
 801b7da:	ab03      	add	r3, sp, #12
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	462a      	mov	r2, r5
 801b7e0:	4b12      	ldr	r3, [pc, #72]	@ (801b82c <_vfiprintf_r+0x228>)
 801b7e2:	a904      	add	r1, sp, #16
 801b7e4:	4630      	mov	r0, r6
 801b7e6:	f7fd fc13 	bl	8019010 <_printf_float>
 801b7ea:	4607      	mov	r7, r0
 801b7ec:	1c78      	adds	r0, r7, #1
 801b7ee:	d1d6      	bne.n	801b79e <_vfiprintf_r+0x19a>
 801b7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801b7f2:	07d9      	lsls	r1, r3, #31
 801b7f4:	d405      	bmi.n	801b802 <_vfiprintf_r+0x1fe>
 801b7f6:	89ab      	ldrh	r3, [r5, #12]
 801b7f8:	059a      	lsls	r2, r3, #22
 801b7fa:	d402      	bmi.n	801b802 <_vfiprintf_r+0x1fe>
 801b7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801b7fe:	f7fe fae7 	bl	8019dd0 <__retarget_lock_release_recursive>
 801b802:	89ab      	ldrh	r3, [r5, #12]
 801b804:	065b      	lsls	r3, r3, #25
 801b806:	f53f af1f 	bmi.w	801b648 <_vfiprintf_r+0x44>
 801b80a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801b80c:	e71e      	b.n	801b64c <_vfiprintf_r+0x48>
 801b80e:	ab03      	add	r3, sp, #12
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	462a      	mov	r2, r5
 801b814:	4b05      	ldr	r3, [pc, #20]	@ (801b82c <_vfiprintf_r+0x228>)
 801b816:	a904      	add	r1, sp, #16
 801b818:	4630      	mov	r0, r6
 801b81a:	f7fd fe81 	bl	8019520 <_printf_i>
 801b81e:	e7e4      	b.n	801b7ea <_vfiprintf_r+0x1e6>
 801b820:	0801f9e8 	.word	0x0801f9e8
 801b824:	0801f9f2 	.word	0x0801f9f2
 801b828:	08019011 	.word	0x08019011
 801b82c:	0801b5df 	.word	0x0801b5df
 801b830:	0801f9ee 	.word	0x0801f9ee

0801b834 <__sflush_r>:
 801b834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83c:	0716      	lsls	r6, r2, #28
 801b83e:	4605      	mov	r5, r0
 801b840:	460c      	mov	r4, r1
 801b842:	d454      	bmi.n	801b8ee <__sflush_r+0xba>
 801b844:	684b      	ldr	r3, [r1, #4]
 801b846:	2b00      	cmp	r3, #0
 801b848:	dc02      	bgt.n	801b850 <__sflush_r+0x1c>
 801b84a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	dd48      	ble.n	801b8e2 <__sflush_r+0xae>
 801b850:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b852:	2e00      	cmp	r6, #0
 801b854:	d045      	beq.n	801b8e2 <__sflush_r+0xae>
 801b856:	2300      	movs	r3, #0
 801b858:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b85c:	682f      	ldr	r7, [r5, #0]
 801b85e:	6a21      	ldr	r1, [r4, #32]
 801b860:	602b      	str	r3, [r5, #0]
 801b862:	d030      	beq.n	801b8c6 <__sflush_r+0x92>
 801b864:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b866:	89a3      	ldrh	r3, [r4, #12]
 801b868:	0759      	lsls	r1, r3, #29
 801b86a:	d505      	bpl.n	801b878 <__sflush_r+0x44>
 801b86c:	6863      	ldr	r3, [r4, #4]
 801b86e:	1ad2      	subs	r2, r2, r3
 801b870:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b872:	b10b      	cbz	r3, 801b878 <__sflush_r+0x44>
 801b874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b876:	1ad2      	subs	r2, r2, r3
 801b878:	2300      	movs	r3, #0
 801b87a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b87c:	6a21      	ldr	r1, [r4, #32]
 801b87e:	4628      	mov	r0, r5
 801b880:	47b0      	blx	r6
 801b882:	1c43      	adds	r3, r0, #1
 801b884:	89a3      	ldrh	r3, [r4, #12]
 801b886:	d106      	bne.n	801b896 <__sflush_r+0x62>
 801b888:	6829      	ldr	r1, [r5, #0]
 801b88a:	291d      	cmp	r1, #29
 801b88c:	d82b      	bhi.n	801b8e6 <__sflush_r+0xb2>
 801b88e:	4a2a      	ldr	r2, [pc, #168]	@ (801b938 <__sflush_r+0x104>)
 801b890:	410a      	asrs	r2, r1
 801b892:	07d6      	lsls	r6, r2, #31
 801b894:	d427      	bmi.n	801b8e6 <__sflush_r+0xb2>
 801b896:	2200      	movs	r2, #0
 801b898:	6062      	str	r2, [r4, #4]
 801b89a:	04d9      	lsls	r1, r3, #19
 801b89c:	6922      	ldr	r2, [r4, #16]
 801b89e:	6022      	str	r2, [r4, #0]
 801b8a0:	d504      	bpl.n	801b8ac <__sflush_r+0x78>
 801b8a2:	1c42      	adds	r2, r0, #1
 801b8a4:	d101      	bne.n	801b8aa <__sflush_r+0x76>
 801b8a6:	682b      	ldr	r3, [r5, #0]
 801b8a8:	b903      	cbnz	r3, 801b8ac <__sflush_r+0x78>
 801b8aa:	6560      	str	r0, [r4, #84]	@ 0x54
 801b8ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b8ae:	602f      	str	r7, [r5, #0]
 801b8b0:	b1b9      	cbz	r1, 801b8e2 <__sflush_r+0xae>
 801b8b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b8b6:	4299      	cmp	r1, r3
 801b8b8:	d002      	beq.n	801b8c0 <__sflush_r+0x8c>
 801b8ba:	4628      	mov	r0, r5
 801b8bc:	f7ff f89e 	bl	801a9fc <_free_r>
 801b8c0:	2300      	movs	r3, #0
 801b8c2:	6363      	str	r3, [r4, #52]	@ 0x34
 801b8c4:	e00d      	b.n	801b8e2 <__sflush_r+0xae>
 801b8c6:	2301      	movs	r3, #1
 801b8c8:	4628      	mov	r0, r5
 801b8ca:	47b0      	blx	r6
 801b8cc:	4602      	mov	r2, r0
 801b8ce:	1c50      	adds	r0, r2, #1
 801b8d0:	d1c9      	bne.n	801b866 <__sflush_r+0x32>
 801b8d2:	682b      	ldr	r3, [r5, #0]
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d0c6      	beq.n	801b866 <__sflush_r+0x32>
 801b8d8:	2b1d      	cmp	r3, #29
 801b8da:	d001      	beq.n	801b8e0 <__sflush_r+0xac>
 801b8dc:	2b16      	cmp	r3, #22
 801b8de:	d11e      	bne.n	801b91e <__sflush_r+0xea>
 801b8e0:	602f      	str	r7, [r5, #0]
 801b8e2:	2000      	movs	r0, #0
 801b8e4:	e022      	b.n	801b92c <__sflush_r+0xf8>
 801b8e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b8ea:	b21b      	sxth	r3, r3
 801b8ec:	e01b      	b.n	801b926 <__sflush_r+0xf2>
 801b8ee:	690f      	ldr	r7, [r1, #16]
 801b8f0:	2f00      	cmp	r7, #0
 801b8f2:	d0f6      	beq.n	801b8e2 <__sflush_r+0xae>
 801b8f4:	0793      	lsls	r3, r2, #30
 801b8f6:	680e      	ldr	r6, [r1, #0]
 801b8f8:	bf08      	it	eq
 801b8fa:	694b      	ldreq	r3, [r1, #20]
 801b8fc:	600f      	str	r7, [r1, #0]
 801b8fe:	bf18      	it	ne
 801b900:	2300      	movne	r3, #0
 801b902:	eba6 0807 	sub.w	r8, r6, r7
 801b906:	608b      	str	r3, [r1, #8]
 801b908:	f1b8 0f00 	cmp.w	r8, #0
 801b90c:	dde9      	ble.n	801b8e2 <__sflush_r+0xae>
 801b90e:	6a21      	ldr	r1, [r4, #32]
 801b910:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b912:	4643      	mov	r3, r8
 801b914:	463a      	mov	r2, r7
 801b916:	4628      	mov	r0, r5
 801b918:	47b0      	blx	r6
 801b91a:	2800      	cmp	r0, #0
 801b91c:	dc08      	bgt.n	801b930 <__sflush_r+0xfc>
 801b91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b926:	81a3      	strh	r3, [r4, #12]
 801b928:	f04f 30ff 	mov.w	r0, #4294967295
 801b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b930:	4407      	add	r7, r0
 801b932:	eba8 0800 	sub.w	r8, r8, r0
 801b936:	e7e7      	b.n	801b908 <__sflush_r+0xd4>
 801b938:	dfbffffe 	.word	0xdfbffffe

0801b93c <_fflush_r>:
 801b93c:	b538      	push	{r3, r4, r5, lr}
 801b93e:	690b      	ldr	r3, [r1, #16]
 801b940:	4605      	mov	r5, r0
 801b942:	460c      	mov	r4, r1
 801b944:	b913      	cbnz	r3, 801b94c <_fflush_r+0x10>
 801b946:	2500      	movs	r5, #0
 801b948:	4628      	mov	r0, r5
 801b94a:	bd38      	pop	{r3, r4, r5, pc}
 801b94c:	b118      	cbz	r0, 801b956 <_fflush_r+0x1a>
 801b94e:	6a03      	ldr	r3, [r0, #32]
 801b950:	b90b      	cbnz	r3, 801b956 <_fflush_r+0x1a>
 801b952:	f7fd ff91 	bl	8019878 <__sinit>
 801b956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d0f3      	beq.n	801b946 <_fflush_r+0xa>
 801b95e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b960:	07d0      	lsls	r0, r2, #31
 801b962:	d404      	bmi.n	801b96e <_fflush_r+0x32>
 801b964:	0599      	lsls	r1, r3, #22
 801b966:	d402      	bmi.n	801b96e <_fflush_r+0x32>
 801b968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b96a:	f7fe fa30 	bl	8019dce <__retarget_lock_acquire_recursive>
 801b96e:	4628      	mov	r0, r5
 801b970:	4621      	mov	r1, r4
 801b972:	f7ff ff5f 	bl	801b834 <__sflush_r>
 801b976:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b978:	07da      	lsls	r2, r3, #31
 801b97a:	4605      	mov	r5, r0
 801b97c:	d4e4      	bmi.n	801b948 <_fflush_r+0xc>
 801b97e:	89a3      	ldrh	r3, [r4, #12]
 801b980:	059b      	lsls	r3, r3, #22
 801b982:	d4e1      	bmi.n	801b948 <_fflush_r+0xc>
 801b984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b986:	f7fe fa23 	bl	8019dd0 <__retarget_lock_release_recursive>
 801b98a:	e7dd      	b.n	801b948 <_fflush_r+0xc>

0801b98c <fiprintf>:
 801b98c:	b40e      	push	{r1, r2, r3}
 801b98e:	b503      	push	{r0, r1, lr}
 801b990:	4601      	mov	r1, r0
 801b992:	ab03      	add	r3, sp, #12
 801b994:	4805      	ldr	r0, [pc, #20]	@ (801b9ac <fiprintf+0x20>)
 801b996:	f853 2b04 	ldr.w	r2, [r3], #4
 801b99a:	6800      	ldr	r0, [r0, #0]
 801b99c:	9301      	str	r3, [sp, #4]
 801b99e:	f7ff fe31 	bl	801b604 <_vfiprintf_r>
 801b9a2:	b002      	add	sp, #8
 801b9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b9a8:	b003      	add	sp, #12
 801b9aa:	4770      	bx	lr
 801b9ac:	20000028 	.word	0x20000028

0801b9b0 <__swhatbuf_r>:
 801b9b0:	b570      	push	{r4, r5, r6, lr}
 801b9b2:	460c      	mov	r4, r1
 801b9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b9b8:	2900      	cmp	r1, #0
 801b9ba:	b096      	sub	sp, #88	@ 0x58
 801b9bc:	4615      	mov	r5, r2
 801b9be:	461e      	mov	r6, r3
 801b9c0:	da0d      	bge.n	801b9de <__swhatbuf_r+0x2e>
 801b9c2:	89a3      	ldrh	r3, [r4, #12]
 801b9c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b9c8:	f04f 0100 	mov.w	r1, #0
 801b9cc:	bf14      	ite	ne
 801b9ce:	2340      	movne	r3, #64	@ 0x40
 801b9d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b9d4:	2000      	movs	r0, #0
 801b9d6:	6031      	str	r1, [r6, #0]
 801b9d8:	602b      	str	r3, [r5, #0]
 801b9da:	b016      	add	sp, #88	@ 0x58
 801b9dc:	bd70      	pop	{r4, r5, r6, pc}
 801b9de:	466a      	mov	r2, sp
 801b9e0:	f000 f848 	bl	801ba74 <_fstat_r>
 801b9e4:	2800      	cmp	r0, #0
 801b9e6:	dbec      	blt.n	801b9c2 <__swhatbuf_r+0x12>
 801b9e8:	9901      	ldr	r1, [sp, #4]
 801b9ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b9ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b9f2:	4259      	negs	r1, r3
 801b9f4:	4159      	adcs	r1, r3
 801b9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b9fa:	e7eb      	b.n	801b9d4 <__swhatbuf_r+0x24>

0801b9fc <__smakebuf_r>:
 801b9fc:	898b      	ldrh	r3, [r1, #12]
 801b9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba00:	079d      	lsls	r5, r3, #30
 801ba02:	4606      	mov	r6, r0
 801ba04:	460c      	mov	r4, r1
 801ba06:	d507      	bpl.n	801ba18 <__smakebuf_r+0x1c>
 801ba08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ba0c:	6023      	str	r3, [r4, #0]
 801ba0e:	6123      	str	r3, [r4, #16]
 801ba10:	2301      	movs	r3, #1
 801ba12:	6163      	str	r3, [r4, #20]
 801ba14:	b003      	add	sp, #12
 801ba16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba18:	ab01      	add	r3, sp, #4
 801ba1a:	466a      	mov	r2, sp
 801ba1c:	f7ff ffc8 	bl	801b9b0 <__swhatbuf_r>
 801ba20:	9f00      	ldr	r7, [sp, #0]
 801ba22:	4605      	mov	r5, r0
 801ba24:	4639      	mov	r1, r7
 801ba26:	4630      	mov	r0, r6
 801ba28:	f7ff f85c 	bl	801aae4 <_malloc_r>
 801ba2c:	b948      	cbnz	r0, 801ba42 <__smakebuf_r+0x46>
 801ba2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba32:	059a      	lsls	r2, r3, #22
 801ba34:	d4ee      	bmi.n	801ba14 <__smakebuf_r+0x18>
 801ba36:	f023 0303 	bic.w	r3, r3, #3
 801ba3a:	f043 0302 	orr.w	r3, r3, #2
 801ba3e:	81a3      	strh	r3, [r4, #12]
 801ba40:	e7e2      	b.n	801ba08 <__smakebuf_r+0xc>
 801ba42:	89a3      	ldrh	r3, [r4, #12]
 801ba44:	6020      	str	r0, [r4, #0]
 801ba46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ba4a:	81a3      	strh	r3, [r4, #12]
 801ba4c:	9b01      	ldr	r3, [sp, #4]
 801ba4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ba52:	b15b      	cbz	r3, 801ba6c <__smakebuf_r+0x70>
 801ba54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ba58:	4630      	mov	r0, r6
 801ba5a:	f000 f81d 	bl	801ba98 <_isatty_r>
 801ba5e:	b128      	cbz	r0, 801ba6c <__smakebuf_r+0x70>
 801ba60:	89a3      	ldrh	r3, [r4, #12]
 801ba62:	f023 0303 	bic.w	r3, r3, #3
 801ba66:	f043 0301 	orr.w	r3, r3, #1
 801ba6a:	81a3      	strh	r3, [r4, #12]
 801ba6c:	89a3      	ldrh	r3, [r4, #12]
 801ba6e:	431d      	orrs	r5, r3
 801ba70:	81a5      	strh	r5, [r4, #12]
 801ba72:	e7cf      	b.n	801ba14 <__smakebuf_r+0x18>

0801ba74 <_fstat_r>:
 801ba74:	b538      	push	{r3, r4, r5, lr}
 801ba76:	4d07      	ldr	r5, [pc, #28]	@ (801ba94 <_fstat_r+0x20>)
 801ba78:	2300      	movs	r3, #0
 801ba7a:	4604      	mov	r4, r0
 801ba7c:	4608      	mov	r0, r1
 801ba7e:	4611      	mov	r1, r2
 801ba80:	602b      	str	r3, [r5, #0]
 801ba82:	f7e5 fe0b 	bl	800169c <_fstat>
 801ba86:	1c43      	adds	r3, r0, #1
 801ba88:	d102      	bne.n	801ba90 <_fstat_r+0x1c>
 801ba8a:	682b      	ldr	r3, [r5, #0]
 801ba8c:	b103      	cbz	r3, 801ba90 <_fstat_r+0x1c>
 801ba8e:	6023      	str	r3, [r4, #0]
 801ba90:	bd38      	pop	{r3, r4, r5, pc}
 801ba92:	bf00      	nop
 801ba94:	20011e74 	.word	0x20011e74

0801ba98 <_isatty_r>:
 801ba98:	b538      	push	{r3, r4, r5, lr}
 801ba9a:	4d06      	ldr	r5, [pc, #24]	@ (801bab4 <_isatty_r+0x1c>)
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	4604      	mov	r4, r0
 801baa0:	4608      	mov	r0, r1
 801baa2:	602b      	str	r3, [r5, #0]
 801baa4:	f7e5 fe0a 	bl	80016bc <_isatty>
 801baa8:	1c43      	adds	r3, r0, #1
 801baaa:	d102      	bne.n	801bab2 <_isatty_r+0x1a>
 801baac:	682b      	ldr	r3, [r5, #0]
 801baae:	b103      	cbz	r3, 801bab2 <_isatty_r+0x1a>
 801bab0:	6023      	str	r3, [r4, #0]
 801bab2:	bd38      	pop	{r3, r4, r5, pc}
 801bab4:	20011e74 	.word	0x20011e74

0801bab8 <_sbrk_r>:
 801bab8:	b538      	push	{r3, r4, r5, lr}
 801baba:	4d06      	ldr	r5, [pc, #24]	@ (801bad4 <_sbrk_r+0x1c>)
 801babc:	2300      	movs	r3, #0
 801babe:	4604      	mov	r4, r0
 801bac0:	4608      	mov	r0, r1
 801bac2:	602b      	str	r3, [r5, #0]
 801bac4:	f7e5 fe12 	bl	80016ec <_sbrk>
 801bac8:	1c43      	adds	r3, r0, #1
 801baca:	d102      	bne.n	801bad2 <_sbrk_r+0x1a>
 801bacc:	682b      	ldr	r3, [r5, #0]
 801bace:	b103      	cbz	r3, 801bad2 <_sbrk_r+0x1a>
 801bad0:	6023      	str	r3, [r4, #0]
 801bad2:	bd38      	pop	{r3, r4, r5, pc}
 801bad4:	20011e74 	.word	0x20011e74

0801bad8 <abort>:
 801bad8:	b508      	push	{r3, lr}
 801bada:	2006      	movs	r0, #6
 801badc:	f000 f88c 	bl	801bbf8 <raise>
 801bae0:	2001      	movs	r0, #1
 801bae2:	f7e5 fda7 	bl	8001634 <_exit>

0801bae6 <_calloc_r>:
 801bae6:	b570      	push	{r4, r5, r6, lr}
 801bae8:	fba1 5402 	umull	r5, r4, r1, r2
 801baec:	b93c      	cbnz	r4, 801bafe <_calloc_r+0x18>
 801baee:	4629      	mov	r1, r5
 801baf0:	f7fe fff8 	bl	801aae4 <_malloc_r>
 801baf4:	4606      	mov	r6, r0
 801baf6:	b928      	cbnz	r0, 801bb04 <_calloc_r+0x1e>
 801baf8:	2600      	movs	r6, #0
 801bafa:	4630      	mov	r0, r6
 801bafc:	bd70      	pop	{r4, r5, r6, pc}
 801bafe:	220c      	movs	r2, #12
 801bb00:	6002      	str	r2, [r0, #0]
 801bb02:	e7f9      	b.n	801baf8 <_calloc_r+0x12>
 801bb04:	462a      	mov	r2, r5
 801bb06:	4621      	mov	r1, r4
 801bb08:	f7fe f8b2 	bl	8019c70 <memset>
 801bb0c:	e7f5      	b.n	801bafa <_calloc_r+0x14>

0801bb0e <__ascii_mbtowc>:
 801bb0e:	b082      	sub	sp, #8
 801bb10:	b901      	cbnz	r1, 801bb14 <__ascii_mbtowc+0x6>
 801bb12:	a901      	add	r1, sp, #4
 801bb14:	b142      	cbz	r2, 801bb28 <__ascii_mbtowc+0x1a>
 801bb16:	b14b      	cbz	r3, 801bb2c <__ascii_mbtowc+0x1e>
 801bb18:	7813      	ldrb	r3, [r2, #0]
 801bb1a:	600b      	str	r3, [r1, #0]
 801bb1c:	7812      	ldrb	r2, [r2, #0]
 801bb1e:	1e10      	subs	r0, r2, #0
 801bb20:	bf18      	it	ne
 801bb22:	2001      	movne	r0, #1
 801bb24:	b002      	add	sp, #8
 801bb26:	4770      	bx	lr
 801bb28:	4610      	mov	r0, r2
 801bb2a:	e7fb      	b.n	801bb24 <__ascii_mbtowc+0x16>
 801bb2c:	f06f 0001 	mvn.w	r0, #1
 801bb30:	e7f8      	b.n	801bb24 <__ascii_mbtowc+0x16>

0801bb32 <_realloc_r>:
 801bb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb36:	4680      	mov	r8, r0
 801bb38:	4615      	mov	r5, r2
 801bb3a:	460c      	mov	r4, r1
 801bb3c:	b921      	cbnz	r1, 801bb48 <_realloc_r+0x16>
 801bb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb42:	4611      	mov	r1, r2
 801bb44:	f7fe bfce 	b.w	801aae4 <_malloc_r>
 801bb48:	b92a      	cbnz	r2, 801bb56 <_realloc_r+0x24>
 801bb4a:	f7fe ff57 	bl	801a9fc <_free_r>
 801bb4e:	2400      	movs	r4, #0
 801bb50:	4620      	mov	r0, r4
 801bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb56:	f000 f86b 	bl	801bc30 <_malloc_usable_size_r>
 801bb5a:	4285      	cmp	r5, r0
 801bb5c:	4606      	mov	r6, r0
 801bb5e:	d802      	bhi.n	801bb66 <_realloc_r+0x34>
 801bb60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801bb64:	d8f4      	bhi.n	801bb50 <_realloc_r+0x1e>
 801bb66:	4629      	mov	r1, r5
 801bb68:	4640      	mov	r0, r8
 801bb6a:	f7fe ffbb 	bl	801aae4 <_malloc_r>
 801bb6e:	4607      	mov	r7, r0
 801bb70:	2800      	cmp	r0, #0
 801bb72:	d0ec      	beq.n	801bb4e <_realloc_r+0x1c>
 801bb74:	42b5      	cmp	r5, r6
 801bb76:	462a      	mov	r2, r5
 801bb78:	4621      	mov	r1, r4
 801bb7a:	bf28      	it	cs
 801bb7c:	4632      	movcs	r2, r6
 801bb7e:	f7fe f930 	bl	8019de2 <memcpy>
 801bb82:	4621      	mov	r1, r4
 801bb84:	4640      	mov	r0, r8
 801bb86:	f7fe ff39 	bl	801a9fc <_free_r>
 801bb8a:	463c      	mov	r4, r7
 801bb8c:	e7e0      	b.n	801bb50 <_realloc_r+0x1e>

0801bb8e <__ascii_wctomb>:
 801bb8e:	4603      	mov	r3, r0
 801bb90:	4608      	mov	r0, r1
 801bb92:	b141      	cbz	r1, 801bba6 <__ascii_wctomb+0x18>
 801bb94:	2aff      	cmp	r2, #255	@ 0xff
 801bb96:	d904      	bls.n	801bba2 <__ascii_wctomb+0x14>
 801bb98:	228a      	movs	r2, #138	@ 0x8a
 801bb9a:	601a      	str	r2, [r3, #0]
 801bb9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bba0:	4770      	bx	lr
 801bba2:	700a      	strb	r2, [r1, #0]
 801bba4:	2001      	movs	r0, #1
 801bba6:	4770      	bx	lr

0801bba8 <_raise_r>:
 801bba8:	291f      	cmp	r1, #31
 801bbaa:	b538      	push	{r3, r4, r5, lr}
 801bbac:	4605      	mov	r5, r0
 801bbae:	460c      	mov	r4, r1
 801bbb0:	d904      	bls.n	801bbbc <_raise_r+0x14>
 801bbb2:	2316      	movs	r3, #22
 801bbb4:	6003      	str	r3, [r0, #0]
 801bbb6:	f04f 30ff 	mov.w	r0, #4294967295
 801bbba:	bd38      	pop	{r3, r4, r5, pc}
 801bbbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801bbbe:	b112      	cbz	r2, 801bbc6 <_raise_r+0x1e>
 801bbc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bbc4:	b94b      	cbnz	r3, 801bbda <_raise_r+0x32>
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	f000 f830 	bl	801bc2c <_getpid_r>
 801bbcc:	4622      	mov	r2, r4
 801bbce:	4601      	mov	r1, r0
 801bbd0:	4628      	mov	r0, r5
 801bbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbd6:	f000 b817 	b.w	801bc08 <_kill_r>
 801bbda:	2b01      	cmp	r3, #1
 801bbdc:	d00a      	beq.n	801bbf4 <_raise_r+0x4c>
 801bbde:	1c59      	adds	r1, r3, #1
 801bbe0:	d103      	bne.n	801bbea <_raise_r+0x42>
 801bbe2:	2316      	movs	r3, #22
 801bbe4:	6003      	str	r3, [r0, #0]
 801bbe6:	2001      	movs	r0, #1
 801bbe8:	e7e7      	b.n	801bbba <_raise_r+0x12>
 801bbea:	2100      	movs	r1, #0
 801bbec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801bbf0:	4620      	mov	r0, r4
 801bbf2:	4798      	blx	r3
 801bbf4:	2000      	movs	r0, #0
 801bbf6:	e7e0      	b.n	801bbba <_raise_r+0x12>

0801bbf8 <raise>:
 801bbf8:	4b02      	ldr	r3, [pc, #8]	@ (801bc04 <raise+0xc>)
 801bbfa:	4601      	mov	r1, r0
 801bbfc:	6818      	ldr	r0, [r3, #0]
 801bbfe:	f7ff bfd3 	b.w	801bba8 <_raise_r>
 801bc02:	bf00      	nop
 801bc04:	20000028 	.word	0x20000028

0801bc08 <_kill_r>:
 801bc08:	b538      	push	{r3, r4, r5, lr}
 801bc0a:	4d07      	ldr	r5, [pc, #28]	@ (801bc28 <_kill_r+0x20>)
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	4604      	mov	r4, r0
 801bc10:	4608      	mov	r0, r1
 801bc12:	4611      	mov	r1, r2
 801bc14:	602b      	str	r3, [r5, #0]
 801bc16:	f7e5 fcfb 	bl	8001610 <_kill>
 801bc1a:	1c43      	adds	r3, r0, #1
 801bc1c:	d102      	bne.n	801bc24 <_kill_r+0x1c>
 801bc1e:	682b      	ldr	r3, [r5, #0]
 801bc20:	b103      	cbz	r3, 801bc24 <_kill_r+0x1c>
 801bc22:	6023      	str	r3, [r4, #0]
 801bc24:	bd38      	pop	{r3, r4, r5, pc}
 801bc26:	bf00      	nop
 801bc28:	20011e74 	.word	0x20011e74

0801bc2c <_getpid_r>:
 801bc2c:	f7e5 bce8 	b.w	8001600 <_getpid>

0801bc30 <_malloc_usable_size_r>:
 801bc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bc34:	1f18      	subs	r0, r3, #4
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	bfbc      	itt	lt
 801bc3a:	580b      	ldrlt	r3, [r1, r0]
 801bc3c:	18c0      	addlt	r0, r0, r3
 801bc3e:	4770      	bx	lr

0801bc40 <_init>:
 801bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc42:	bf00      	nop
 801bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc46:	bc08      	pop	{r3}
 801bc48:	469e      	mov	lr, r3
 801bc4a:	4770      	bx	lr

0801bc4c <_fini>:
 801bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc4e:	bf00      	nop
 801bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc52:	bc08      	pop	{r3}
 801bc54:	469e      	mov	lr, r3
 801bc56:	4770      	bx	lr
